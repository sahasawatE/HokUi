'use strict';

var plugin = require('tailwindcss/plugin');

function getDefaultExportFromCjs (x) {
	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
}

var jsxRuntime = {exports: {}};

var reactJsxRuntime_production_min = {};

var react = {exports: {}};

var react_production_min = {};

/**
 * @license React
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var hasRequiredReact_production_min;

function requireReact_production_min () {
	if (hasRequiredReact_production_min) return react_production_min;
	hasRequiredReact_production_min = 1;
var l=Symbol.for("react.element"),n=Symbol.for("react.portal"),p=Symbol.for("react.fragment"),q=Symbol.for("react.strict_mode"),r=Symbol.for("react.profiler"),t=Symbol.for("react.provider"),u=Symbol.for("react.context"),v=Symbol.for("react.forward_ref"),w=Symbol.for("react.suspense"),x=Symbol.for("react.memo"),y=Symbol.for("react.lazy"),z=Symbol.iterator;function A(a){if(null===a||"object"!==typeof a)return null;a=z&&a[z]||a["@@iterator"];return "function"===typeof a?a:null}
	var B={isMounted:function(){return !1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},C=Object.assign,D={};function E(a,b,e){this.props=a;this.context=b;this.refs=D;this.updater=e||B;}E.prototype.isReactComponent={};
	E.prototype.setState=function(a,b){if("object"!==typeof a&&"function"!==typeof a&&null!=a)throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");this.updater.enqueueSetState(this,a,b,"setState");};E.prototype.forceUpdate=function(a){this.updater.enqueueForceUpdate(this,a,"forceUpdate");};function F(){}F.prototype=E.prototype;function G(a,b,e){this.props=a;this.context=b;this.refs=D;this.updater=e||B;}var H=G.prototype=new F;
	H.constructor=G;C(H,E.prototype);H.isPureReactComponent=!0;var I=Array.isArray,J=Object.prototype.hasOwnProperty,K={current:null},L={key:!0,ref:!0,__self:!0,__source:!0};
	function M(a,b,e){var d,c={},k=null,h=null;if(null!=b)for(d in void 0!==b.ref&&(h=b.ref),void 0!==b.key&&(k=""+b.key),b)J.call(b,d)&&!L.hasOwnProperty(d)&&(c[d]=b[d]);var g=arguments.length-2;if(1===g)c.children=e;else if(1<g){for(var f=Array(g),m=0;m<g;m++)f[m]=arguments[m+2];c.children=f;}if(a&&a.defaultProps)for(d in g=a.defaultProps,g)void 0===c[d]&&(c[d]=g[d]);return {$$typeof:l,type:a,key:k,ref:h,props:c,_owner:K.current}}
	function N(a,b){return {$$typeof:l,type:a.type,key:b,ref:a.ref,props:a.props,_owner:a._owner}}function O(a){return "object"===typeof a&&null!==a&&a.$$typeof===l}function escape(a){var b={"=":"=0",":":"=2"};return "$"+a.replace(/[=:]/g,function(a){return b[a]})}var P=/\/+/g;function Q(a,b){return "object"===typeof a&&null!==a&&null!=a.key?escape(""+a.key):b.toString(36)}
	function R(a,b,e,d,c){var k=typeof a;if("undefined"===k||"boolean"===k)a=null;var h=!1;if(null===a)h=!0;else switch(k){case "string":case "number":h=!0;break;case "object":switch(a.$$typeof){case l:case n:h=!0;}}if(h)return h=a,c=c(h),a=""===d?"."+Q(h,0):d,I(c)?(e="",null!=a&&(e=a.replace(P,"$&/")+"/"),R(c,b,e,"",function(a){return a})):null!=c&&(O(c)&&(c=N(c,e+(!c.key||h&&h.key===c.key?"":(""+c.key).replace(P,"$&/")+"/")+a)),b.push(c)),1;h=0;d=""===d?".":d+":";if(I(a))for(var g=0;g<a.length;g++){k=
	a[g];var f=d+Q(k,g);h+=R(k,b,e,f,c);}else if(f=A(a),"function"===typeof f)for(a=f.call(a),g=0;!(k=a.next()).done;)k=k.value,f=d+Q(k,g++),h+=R(k,b,e,f,c);else if("object"===k)throw b=String(a),Error("Objects are not valid as a React child (found: "+("[object Object]"===b?"object with keys {"+Object.keys(a).join(", ")+"}":b)+"). If you meant to render a collection of children, use an array instead.");return h}
	function S(a,b,e){if(null==a)return a;var d=[],c=0;R(a,d,"","",function(a){return b.call(e,a,c++)});return d}function T(a){if(-1===a._status){var b=a._result;b=b();b.then(function(b){if(0===a._status||-1===a._status)a._status=1,a._result=b;},function(b){if(0===a._status||-1===a._status)a._status=2,a._result=b;});-1===a._status&&(a._status=0,a._result=b);}if(1===a._status)return a._result.default;throw a._result;}
	var U={current:null},V={transition:null},W={ReactCurrentDispatcher:U,ReactCurrentBatchConfig:V,ReactCurrentOwner:K};function X(){throw Error("act(...) is not supported in production builds of React.");}
	react_production_min.Children={map:S,forEach:function(a,b,e){S(a,function(){b.apply(this,arguments);},e);},count:function(a){var b=0;S(a,function(){b++;});return b},toArray:function(a){return S(a,function(a){return a})||[]},only:function(a){if(!O(a))throw Error("React.Children.only expected to receive a single React element child.");return a}};react_production_min.Component=E;react_production_min.Fragment=p;react_production_min.Profiler=r;react_production_min.PureComponent=G;react_production_min.StrictMode=q;react_production_min.Suspense=w;
	react_production_min.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=W;react_production_min.act=X;
	react_production_min.cloneElement=function(a,b,e){if(null===a||void 0===a)throw Error("React.cloneElement(...): The argument must be a React element, but you passed "+a+".");var d=C({},a.props),c=a.key,k=a.ref,h=a._owner;if(null!=b){void 0!==b.ref&&(k=b.ref,h=K.current);void 0!==b.key&&(c=""+b.key);if(a.type&&a.type.defaultProps)var g=a.type.defaultProps;for(f in b)J.call(b,f)&&!L.hasOwnProperty(f)&&(d[f]=void 0===b[f]&&void 0!==g?g[f]:b[f]);}var f=arguments.length-2;if(1===f)d.children=e;else if(1<f){g=Array(f);
	for(var m=0;m<f;m++)g[m]=arguments[m+2];d.children=g;}return {$$typeof:l,type:a.type,key:c,ref:k,props:d,_owner:h}};react_production_min.createContext=function(a){a={$$typeof:u,_currentValue:a,_currentValue2:a,_threadCount:0,Provider:null,Consumer:null,_defaultValue:null,_globalName:null};a.Provider={$$typeof:t,_context:a};return a.Consumer=a};react_production_min.createElement=M;react_production_min.createFactory=function(a){var b=M.bind(null,a);b.type=a;return b};react_production_min.createRef=function(){return {current:null}};
	react_production_min.forwardRef=function(a){return {$$typeof:v,render:a}};react_production_min.isValidElement=O;react_production_min.lazy=function(a){return {$$typeof:y,_payload:{_status:-1,_result:a},_init:T}};react_production_min.memo=function(a,b){return {$$typeof:x,type:a,compare:void 0===b?null:b}};react_production_min.startTransition=function(a){var b=V.transition;V.transition={};try{a();}finally{V.transition=b;}};react_production_min.unstable_act=X;react_production_min.useCallback=function(a,b){return U.current.useCallback(a,b)};react_production_min.useContext=function(a){return U.current.useContext(a)};
	react_production_min.useDebugValue=function(){};react_production_min.useDeferredValue=function(a){return U.current.useDeferredValue(a)};react_production_min.useEffect=function(a,b){return U.current.useEffect(a,b)};react_production_min.useId=function(){return U.current.useId()};react_production_min.useImperativeHandle=function(a,b,e){return U.current.useImperativeHandle(a,b,e)};react_production_min.useInsertionEffect=function(a,b){return U.current.useInsertionEffect(a,b)};react_production_min.useLayoutEffect=function(a,b){return U.current.useLayoutEffect(a,b)};
	react_production_min.useMemo=function(a,b){return U.current.useMemo(a,b)};react_production_min.useReducer=function(a,b,e){return U.current.useReducer(a,b,e)};react_production_min.useRef=function(a){return U.current.useRef(a)};react_production_min.useState=function(a){return U.current.useState(a)};react_production_min.useSyncExternalStore=function(a,b,e){return U.current.useSyncExternalStore(a,b,e)};react_production_min.useTransition=function(){return U.current.useTransition()};react_production_min.version="18.3.1";
	return react_production_min;
}

var react_development = {exports: {}};

/**
 * @license React
 * react.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
react_development.exports;

var hasRequiredReact_development;

function requireReact_development () {
	if (hasRequiredReact_development) return react_development.exports;
	hasRequiredReact_development = 1;
	(function (module, exports) {

		if (process.env.NODE_ENV !== "production") {
		  (function() {

		/* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */
		if (
		  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' &&
		  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart ===
		    'function'
		) {
		  __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
		}
		          var ReactVersion = '18.3.1';

		// ATTENTION
		// When adding new symbols to this file,
		// Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'
		// The Symbol used to tag the ReactElement-like types.
		var REACT_ELEMENT_TYPE = Symbol.for('react.element');
		var REACT_PORTAL_TYPE = Symbol.for('react.portal');
		var REACT_FRAGMENT_TYPE = Symbol.for('react.fragment');
		var REACT_STRICT_MODE_TYPE = Symbol.for('react.strict_mode');
		var REACT_PROFILER_TYPE = Symbol.for('react.profiler');
		var REACT_PROVIDER_TYPE = Symbol.for('react.provider');
		var REACT_CONTEXT_TYPE = Symbol.for('react.context');
		var REACT_FORWARD_REF_TYPE = Symbol.for('react.forward_ref');
		var REACT_SUSPENSE_TYPE = Symbol.for('react.suspense');
		var REACT_SUSPENSE_LIST_TYPE = Symbol.for('react.suspense_list');
		var REACT_MEMO_TYPE = Symbol.for('react.memo');
		var REACT_LAZY_TYPE = Symbol.for('react.lazy');
		var REACT_OFFSCREEN_TYPE = Symbol.for('react.offscreen');
		var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
		var FAUX_ITERATOR_SYMBOL = '@@iterator';
		function getIteratorFn(maybeIterable) {
		  if (maybeIterable === null || typeof maybeIterable !== 'object') {
		    return null;
		  }

		  var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];

		  if (typeof maybeIterator === 'function') {
		    return maybeIterator;
		  }

		  return null;
		}

		/**
		 * Keeps track of the current dispatcher.
		 */
		var ReactCurrentDispatcher = {
		  /**
		   * @internal
		   * @type {ReactComponent}
		   */
		  current: null
		};

		/**
		 * Keeps track of the current batch's configuration such as how long an update
		 * should suspend for if it needs to.
		 */
		var ReactCurrentBatchConfig = {
		  transition: null
		};

		var ReactCurrentActQueue = {
		  current: null,
		  // Used to reproduce behavior of `batchedUpdates` in legacy mode.
		  isBatchingLegacy: false,
		  didScheduleLegacyUpdate: false
		};

		/**
		 * Keeps track of the current owner.
		 *
		 * The current owner is the component who should own any components that are
		 * currently being constructed.
		 */
		var ReactCurrentOwner = {
		  /**
		   * @internal
		   * @type {ReactComponent}
		   */
		  current: null
		};

		var ReactDebugCurrentFrame = {};
		var currentExtraStackFrame = null;
		function setExtraStackFrame(stack) {
		  {
		    currentExtraStackFrame = stack;
		  }
		}

		{
		  ReactDebugCurrentFrame.setExtraStackFrame = function (stack) {
		    {
		      currentExtraStackFrame = stack;
		    }
		  }; // Stack implementation injected by the current renderer.


		  ReactDebugCurrentFrame.getCurrentStack = null;

		  ReactDebugCurrentFrame.getStackAddendum = function () {
		    var stack = ''; // Add an extra top frame while an element is being validated

		    if (currentExtraStackFrame) {
		      stack += currentExtraStackFrame;
		    } // Delegate to the injected renderer-specific implementation


		    var impl = ReactDebugCurrentFrame.getCurrentStack;

		    if (impl) {
		      stack += impl() || '';
		    }

		    return stack;
		  };
		}

		// -----------------------------------------------------------------------------

		var enableScopeAPI = false; // Experimental Create Event Handle API.
		var enableCacheElement = false;
		var enableTransitionTracing = false; // No known bugs, but needs performance testing

		var enableLegacyHidden = false; // Enables unstable_avoidThisFallback feature in Fiber
		// stuff. Intended to enable React core members to more easily debug scheduling
		// issues in DEV builds.

		var enableDebugTracing = false; // Track which Fiber(s) schedule render work.

		var ReactSharedInternals = {
		  ReactCurrentDispatcher: ReactCurrentDispatcher,
		  ReactCurrentBatchConfig: ReactCurrentBatchConfig,
		  ReactCurrentOwner: ReactCurrentOwner
		};

		{
		  ReactSharedInternals.ReactDebugCurrentFrame = ReactDebugCurrentFrame;
		  ReactSharedInternals.ReactCurrentActQueue = ReactCurrentActQueue;
		}

		// by calls to these methods by a Babel plugin.
		//
		// In PROD (or in packages without access to React internals),
		// they are left as they are instead.

		function warn(format) {
		  {
		    {
		      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
		        args[_key - 1] = arguments[_key];
		      }

		      printWarning('warn', format, args);
		    }
		  }
		}
		function error(format) {
		  {
		    {
		      for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
		        args[_key2 - 1] = arguments[_key2];
		      }

		      printWarning('error', format, args);
		    }
		  }
		}

		function printWarning(level, format, args) {
		  // When changing this logic, you might want to also
		  // update consoleWithStackDev.www.js as well.
		  {
		    var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
		    var stack = ReactDebugCurrentFrame.getStackAddendum();

		    if (stack !== '') {
		      format += '%s';
		      args = args.concat([stack]);
		    } // eslint-disable-next-line react-internal/safe-string-coercion


		    var argsWithFormat = args.map(function (item) {
		      return String(item);
		    }); // Careful: RN currently depends on this prefix

		    argsWithFormat.unshift('Warning: ' + format); // We intentionally don't use spread (or .apply) directly because it
		    // breaks IE9: https://github.com/facebook/react/issues/13610
		    // eslint-disable-next-line react-internal/no-production-logging

		    Function.prototype.apply.call(console[level], console, argsWithFormat);
		  }
		}

		var didWarnStateUpdateForUnmountedComponent = {};

		function warnNoop(publicInstance, callerName) {
		  {
		    var _constructor = publicInstance.constructor;
		    var componentName = _constructor && (_constructor.displayName || _constructor.name) || 'ReactClass';
		    var warningKey = componentName + "." + callerName;

		    if (didWarnStateUpdateForUnmountedComponent[warningKey]) {
		      return;
		    }

		    error("Can't call %s on a component that is not yet mounted. " + 'This is a no-op, but it might indicate a bug in your application. ' + 'Instead, assign to `this.state` directly or define a `state = {};` ' + 'class property with the desired state in the %s component.', callerName, componentName);

		    didWarnStateUpdateForUnmountedComponent[warningKey] = true;
		  }
		}
		/**
		 * This is the abstract API for an update queue.
		 */


		var ReactNoopUpdateQueue = {
		  /**
		   * Checks whether or not this composite component is mounted.
		   * @param {ReactClass} publicInstance The instance we want to test.
		   * @return {boolean} True if mounted, false otherwise.
		   * @protected
		   * @final
		   */
		  isMounted: function (publicInstance) {
		    return false;
		  },

		  /**
		   * Forces an update. This should only be invoked when it is known with
		   * certainty that we are **not** in a DOM transaction.
		   *
		   * You may want to call this when you know that some deeper aspect of the
		   * component's state has changed but `setState` was not called.
		   *
		   * This will not invoke `shouldComponentUpdate`, but it will invoke
		   * `componentWillUpdate` and `componentDidUpdate`.
		   *
		   * @param {ReactClass} publicInstance The instance that should rerender.
		   * @param {?function} callback Called after component is updated.
		   * @param {?string} callerName name of the calling function in the public API.
		   * @internal
		   */
		  enqueueForceUpdate: function (publicInstance, callback, callerName) {
		    warnNoop(publicInstance, 'forceUpdate');
		  },

		  /**
		   * Replaces all of the state. Always use this or `setState` to mutate state.
		   * You should treat `this.state` as immutable.
		   *
		   * There is no guarantee that `this.state` will be immediately updated, so
		   * accessing `this.state` after calling this method may return the old value.
		   *
		   * @param {ReactClass} publicInstance The instance that should rerender.
		   * @param {object} completeState Next state.
		   * @param {?function} callback Called after component is updated.
		   * @param {?string} callerName name of the calling function in the public API.
		   * @internal
		   */
		  enqueueReplaceState: function (publicInstance, completeState, callback, callerName) {
		    warnNoop(publicInstance, 'replaceState');
		  },

		  /**
		   * Sets a subset of the state. This only exists because _pendingState is
		   * internal. This provides a merging strategy that is not available to deep
		   * properties which is confusing. TODO: Expose pendingState or don't use it
		   * during the merge.
		   *
		   * @param {ReactClass} publicInstance The instance that should rerender.
		   * @param {object} partialState Next partial state to be merged with state.
		   * @param {?function} callback Called after component is updated.
		   * @param {?string} Name of the calling function in the public API.
		   * @internal
		   */
		  enqueueSetState: function (publicInstance, partialState, callback, callerName) {
		    warnNoop(publicInstance, 'setState');
		  }
		};

		var assign = Object.assign;

		var emptyObject = {};

		{
		  Object.freeze(emptyObject);
		}
		/**
		 * Base class helpers for the updating state of a component.
		 */


		function Component(props, context, updater) {
		  this.props = props;
		  this.context = context; // If a component has string refs, we will assign a different object later.

		  this.refs = emptyObject; // We initialize the default updater but the real one gets injected by the
		  // renderer.

		  this.updater = updater || ReactNoopUpdateQueue;
		}

		Component.prototype.isReactComponent = {};
		/**
		 * Sets a subset of the state. Always use this to mutate
		 * state. You should treat `this.state` as immutable.
		 *
		 * There is no guarantee that `this.state` will be immediately updated, so
		 * accessing `this.state` after calling this method may return the old value.
		 *
		 * There is no guarantee that calls to `setState` will run synchronously,
		 * as they may eventually be batched together.  You can provide an optional
		 * callback that will be executed when the call to setState is actually
		 * completed.
		 *
		 * When a function is provided to setState, it will be called at some point in
		 * the future (not synchronously). It will be called with the up to date
		 * component arguments (state, props, context). These values can be different
		 * from this.* because your function may be called after receiveProps but before
		 * shouldComponentUpdate, and this new state, props, and context will not yet be
		 * assigned to this.
		 *
		 * @param {object|function} partialState Next partial state or function to
		 *        produce next partial state to be merged with current state.
		 * @param {?function} callback Called after state is updated.
		 * @final
		 * @protected
		 */

		Component.prototype.setState = function (partialState, callback) {
		  if (typeof partialState !== 'object' && typeof partialState !== 'function' && partialState != null) {
		    throw new Error('setState(...): takes an object of state variables to update or a ' + 'function which returns an object of state variables.');
		  }

		  this.updater.enqueueSetState(this, partialState, callback, 'setState');
		};
		/**
		 * Forces an update. This should only be invoked when it is known with
		 * certainty that we are **not** in a DOM transaction.
		 *
		 * You may want to call this when you know that some deeper aspect of the
		 * component's state has changed but `setState` was not called.
		 *
		 * This will not invoke `shouldComponentUpdate`, but it will invoke
		 * `componentWillUpdate` and `componentDidUpdate`.
		 *
		 * @param {?function} callback Called after update is complete.
		 * @final
		 * @protected
		 */


		Component.prototype.forceUpdate = function (callback) {
		  this.updater.enqueueForceUpdate(this, callback, 'forceUpdate');
		};
		/**
		 * Deprecated APIs. These APIs used to exist on classic React classes but since
		 * we would like to deprecate them, we're not going to move them over to this
		 * modern base class. Instead, we define a getter that warns if it's accessed.
		 */


		{
		  var deprecatedAPIs = {
		    isMounted: ['isMounted', 'Instead, make sure to clean up subscriptions and pending requests in ' + 'componentWillUnmount to prevent memory leaks.'],
		    replaceState: ['replaceState', 'Refactor your code to use setState instead (see ' + 'https://github.com/facebook/react/issues/3236).']
		  };

		  var defineDeprecationWarning = function (methodName, info) {
		    Object.defineProperty(Component.prototype, methodName, {
		      get: function () {
		        warn('%s(...) is deprecated in plain JavaScript React classes. %s', info[0], info[1]);

		        return undefined;
		      }
		    });
		  };

		  for (var fnName in deprecatedAPIs) {
		    if (deprecatedAPIs.hasOwnProperty(fnName)) {
		      defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
		    }
		  }
		}

		function ComponentDummy() {}

		ComponentDummy.prototype = Component.prototype;
		/**
		 * Convenience component with default shallow equality check for sCU.
		 */

		function PureComponent(props, context, updater) {
		  this.props = props;
		  this.context = context; // If a component has string refs, we will assign a different object later.

		  this.refs = emptyObject;
		  this.updater = updater || ReactNoopUpdateQueue;
		}

		var pureComponentPrototype = PureComponent.prototype = new ComponentDummy();
		pureComponentPrototype.constructor = PureComponent; // Avoid an extra prototype jump for these methods.

		assign(pureComponentPrototype, Component.prototype);
		pureComponentPrototype.isPureReactComponent = true;

		// an immutable object with a single mutable value
		function createRef() {
		  var refObject = {
		    current: null
		  };

		  {
		    Object.seal(refObject);
		  }

		  return refObject;
		}

		var isArrayImpl = Array.isArray; // eslint-disable-next-line no-redeclare

		function isArray(a) {
		  return isArrayImpl(a);
		}

		/*
		 * The `'' + value` pattern (used in in perf-sensitive code) throws for Symbol
		 * and Temporal.* types. See https://github.com/facebook/react/pull/22064.
		 *
		 * The functions in this module will throw an easier-to-understand,
		 * easier-to-debug exception with a clear errors message message explaining the
		 * problem. (Instead of a confusing exception thrown inside the implementation
		 * of the `value` object).
		 */
		// $FlowFixMe only called in DEV, so void return is not possible.
		function typeName(value) {
		  {
		    // toStringTag is needed for namespaced types like Temporal.Instant
		    var hasToStringTag = typeof Symbol === 'function' && Symbol.toStringTag;
		    var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || 'Object';
		    return type;
		  }
		} // $FlowFixMe only called in DEV, so void return is not possible.


		function willCoercionThrow(value) {
		  {
		    try {
		      testStringCoercion(value);
		      return false;
		    } catch (e) {
		      return true;
		    }
		  }
		}

		function testStringCoercion(value) {
		  // If you ended up here by following an exception call stack, here's what's
		  // happened: you supplied an object or symbol value to React (as a prop, key,
		  // DOM attribute, CSS property, string ref, etc.) and when React tried to
		  // coerce it to a string using `'' + value`, an exception was thrown.
		  //
		  // The most common types that will cause this exception are `Symbol` instances
		  // and Temporal objects like `Temporal.Instant`. But any object that has a
		  // `valueOf` or `[Symbol.toPrimitive]` method that throws will also cause this
		  // exception. (Library authors do this to prevent users from using built-in
		  // numeric operators like `+` or comparison operators like `>=` because custom
		  // methods are needed to perform accurate arithmetic or comparison.)
		  //
		  // To fix the problem, coerce this object or symbol value to a string before
		  // passing it to React. The most reliable way is usually `String(value)`.
		  //
		  // To find which value is throwing, check the browser or debugger console.
		  // Before this exception was thrown, there should be `console.error` output
		  // that shows the type (Symbol, Temporal.PlainDate, etc.) that caused the
		  // problem and how that type was used: key, atrribute, input value prop, etc.
		  // In most cases, this console output also shows the component and its
		  // ancestor components where the exception happened.
		  //
		  // eslint-disable-next-line react-internal/safe-string-coercion
		  return '' + value;
		}
		function checkKeyStringCoercion(value) {
		  {
		    if (willCoercionThrow(value)) {
		      error('The provided key is an unsupported type %s.' + ' This value must be coerced to a string before before using it here.', typeName(value));

		      return testStringCoercion(value); // throw (to help callers find troubleshooting comments)
		    }
		  }
		}

		function getWrappedName(outerType, innerType, wrapperName) {
		  var displayName = outerType.displayName;

		  if (displayName) {
		    return displayName;
		  }

		  var functionName = innerType.displayName || innerType.name || '';
		  return functionName !== '' ? wrapperName + "(" + functionName + ")" : wrapperName;
		} // Keep in sync with react-reconciler/getComponentNameFromFiber


		function getContextName(type) {
		  return type.displayName || 'Context';
		} // Note that the reconciler package should generally prefer to use getComponentNameFromFiber() instead.


		function getComponentNameFromType(type) {
		  if (type == null) {
		    // Host root, text node or just invalid type.
		    return null;
		  }

		  {
		    if (typeof type.tag === 'number') {
		      error('Received an unexpected object in getComponentNameFromType(). ' + 'This is likely a bug in React. Please file an issue.');
		    }
		  }

		  if (typeof type === 'function') {
		    return type.displayName || type.name || null;
		  }

		  if (typeof type === 'string') {
		    return type;
		  }

		  switch (type) {
		    case REACT_FRAGMENT_TYPE:
		      return 'Fragment';

		    case REACT_PORTAL_TYPE:
		      return 'Portal';

		    case REACT_PROFILER_TYPE:
		      return 'Profiler';

		    case REACT_STRICT_MODE_TYPE:
		      return 'StrictMode';

		    case REACT_SUSPENSE_TYPE:
		      return 'Suspense';

		    case REACT_SUSPENSE_LIST_TYPE:
		      return 'SuspenseList';

		  }

		  if (typeof type === 'object') {
		    switch (type.$$typeof) {
		      case REACT_CONTEXT_TYPE:
		        var context = type;
		        return getContextName(context) + '.Consumer';

		      case REACT_PROVIDER_TYPE:
		        var provider = type;
		        return getContextName(provider._context) + '.Provider';

		      case REACT_FORWARD_REF_TYPE:
		        return getWrappedName(type, type.render, 'ForwardRef');

		      case REACT_MEMO_TYPE:
		        var outerName = type.displayName || null;

		        if (outerName !== null) {
		          return outerName;
		        }

		        return getComponentNameFromType(type.type) || 'Memo';

		      case REACT_LAZY_TYPE:
		        {
		          var lazyComponent = type;
		          var payload = lazyComponent._payload;
		          var init = lazyComponent._init;

		          try {
		            return getComponentNameFromType(init(payload));
		          } catch (x) {
		            return null;
		          }
		        }

		      // eslint-disable-next-line no-fallthrough
		    }
		  }

		  return null;
		}

		var hasOwnProperty = Object.prototype.hasOwnProperty;

		var RESERVED_PROPS = {
		  key: true,
		  ref: true,
		  __self: true,
		  __source: true
		};
		var specialPropKeyWarningShown, specialPropRefWarningShown, didWarnAboutStringRefs;

		{
		  didWarnAboutStringRefs = {};
		}

		function hasValidRef(config) {
		  {
		    if (hasOwnProperty.call(config, 'ref')) {
		      var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;

		      if (getter && getter.isReactWarning) {
		        return false;
		      }
		    }
		  }

		  return config.ref !== undefined;
		}

		function hasValidKey(config) {
		  {
		    if (hasOwnProperty.call(config, 'key')) {
		      var getter = Object.getOwnPropertyDescriptor(config, 'key').get;

		      if (getter && getter.isReactWarning) {
		        return false;
		      }
		    }
		  }

		  return config.key !== undefined;
		}

		function defineKeyPropWarningGetter(props, displayName) {
		  var warnAboutAccessingKey = function () {
		    {
		      if (!specialPropKeyWarningShown) {
		        specialPropKeyWarningShown = true;

		        error('%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://reactjs.org/link/special-props)', displayName);
		      }
		    }
		  };

		  warnAboutAccessingKey.isReactWarning = true;
		  Object.defineProperty(props, 'key', {
		    get: warnAboutAccessingKey,
		    configurable: true
		  });
		}

		function defineRefPropWarningGetter(props, displayName) {
		  var warnAboutAccessingRef = function () {
		    {
		      if (!specialPropRefWarningShown) {
		        specialPropRefWarningShown = true;

		        error('%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://reactjs.org/link/special-props)', displayName);
		      }
		    }
		  };

		  warnAboutAccessingRef.isReactWarning = true;
		  Object.defineProperty(props, 'ref', {
		    get: warnAboutAccessingRef,
		    configurable: true
		  });
		}

		function warnIfStringRefCannotBeAutoConverted(config) {
		  {
		    if (typeof config.ref === 'string' && ReactCurrentOwner.current && config.__self && ReactCurrentOwner.current.stateNode !== config.__self) {
		      var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);

		      if (!didWarnAboutStringRefs[componentName]) {
		        error('Component "%s" contains the string ref "%s". ' + 'Support for string refs will be removed in a future major release. ' + 'This case cannot be automatically converted to an arrow function. ' + 'We ask you to manually fix this case by using useRef() or createRef() instead. ' + 'Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-string-ref', componentName, config.ref);

		        didWarnAboutStringRefs[componentName] = true;
		      }
		    }
		  }
		}
		/**
		 * Factory method to create a new React element. This no longer adheres to
		 * the class pattern, so do not use new to call it. Also, instanceof check
		 * will not work. Instead test $$typeof field against Symbol.for('react.element') to check
		 * if something is a React Element.
		 *
		 * @param {*} type
		 * @param {*} props
		 * @param {*} key
		 * @param {string|object} ref
		 * @param {*} owner
		 * @param {*} self A *temporary* helper to detect places where `this` is
		 * different from the `owner` when React.createElement is called, so that we
		 * can warn. We want to get rid of owner and replace string `ref`s with arrow
		 * functions, and as long as `this` and owner are the same, there will be no
		 * change in behavior.
		 * @param {*} source An annotation object (added by a transpiler or otherwise)
		 * indicating filename, line number, and/or other information.
		 * @internal
		 */


		var ReactElement = function (type, key, ref, self, source, owner, props) {
		  var element = {
		    // This tag allows us to uniquely identify this as a React Element
		    $$typeof: REACT_ELEMENT_TYPE,
		    // Built-in properties that belong on the element
		    type: type,
		    key: key,
		    ref: ref,
		    props: props,
		    // Record the component responsible for creating this element.
		    _owner: owner
		  };

		  {
		    // The validation flag is currently mutative. We put it on
		    // an external backing store so that we can freeze the whole object.
		    // This can be replaced with a WeakMap once they are implemented in
		    // commonly used development environments.
		    element._store = {}; // To make comparing ReactElements easier for testing purposes, we make
		    // the validation flag non-enumerable (where possible, which should
		    // include every environment we run tests in), so the test framework
		    // ignores it.

		    Object.defineProperty(element._store, 'validated', {
		      configurable: false,
		      enumerable: false,
		      writable: true,
		      value: false
		    }); // self and source are DEV only properties.

		    Object.defineProperty(element, '_self', {
		      configurable: false,
		      enumerable: false,
		      writable: false,
		      value: self
		    }); // Two elements created in two different places should be considered
		    // equal for testing purposes and therefore we hide it from enumeration.

		    Object.defineProperty(element, '_source', {
		      configurable: false,
		      enumerable: false,
		      writable: false,
		      value: source
		    });

		    if (Object.freeze) {
		      Object.freeze(element.props);
		      Object.freeze(element);
		    }
		  }

		  return element;
		};
		/**
		 * Create and return a new ReactElement of the given type.
		 * See https://reactjs.org/docs/react-api.html#createelement
		 */

		function createElement(type, config, children) {
		  var propName; // Reserved names are extracted

		  var props = {};
		  var key = null;
		  var ref = null;
		  var self = null;
		  var source = null;

		  if (config != null) {
		    if (hasValidRef(config)) {
		      ref = config.ref;

		      {
		        warnIfStringRefCannotBeAutoConverted(config);
		      }
		    }

		    if (hasValidKey(config)) {
		      {
		        checkKeyStringCoercion(config.key);
		      }

		      key = '' + config.key;
		    }

		    self = config.__self === undefined ? null : config.__self;
		    source = config.__source === undefined ? null : config.__source; // Remaining properties are added to a new props object

		    for (propName in config) {
		      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
		        props[propName] = config[propName];
		      }
		    }
		  } // Children can be more than one argument, and those are transferred onto
		  // the newly allocated props object.


		  var childrenLength = arguments.length - 2;

		  if (childrenLength === 1) {
		    props.children = children;
		  } else if (childrenLength > 1) {
		    var childArray = Array(childrenLength);

		    for (var i = 0; i < childrenLength; i++) {
		      childArray[i] = arguments[i + 2];
		    }

		    {
		      if (Object.freeze) {
		        Object.freeze(childArray);
		      }
		    }

		    props.children = childArray;
		  } // Resolve default props


		  if (type && type.defaultProps) {
		    var defaultProps = type.defaultProps;

		    for (propName in defaultProps) {
		      if (props[propName] === undefined) {
		        props[propName] = defaultProps[propName];
		      }
		    }
		  }

		  {
		    if (key || ref) {
		      var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;

		      if (key) {
		        defineKeyPropWarningGetter(props, displayName);
		      }

		      if (ref) {
		        defineRefPropWarningGetter(props, displayName);
		      }
		    }
		  }

		  return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
		}
		function cloneAndReplaceKey(oldElement, newKey) {
		  var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
		  return newElement;
		}
		/**
		 * Clone and return a new ReactElement using element as the starting point.
		 * See https://reactjs.org/docs/react-api.html#cloneelement
		 */

		function cloneElement(element, config, children) {
		  if (element === null || element === undefined) {
		    throw new Error("React.cloneElement(...): The argument must be a React element, but you passed " + element + ".");
		  }

		  var propName; // Original props are copied

		  var props = assign({}, element.props); // Reserved names are extracted

		  var key = element.key;
		  var ref = element.ref; // Self is preserved since the owner is preserved.

		  var self = element._self; // Source is preserved since cloneElement is unlikely to be targeted by a
		  // transpiler, and the original source is probably a better indicator of the
		  // true owner.

		  var source = element._source; // Owner will be preserved, unless ref is overridden

		  var owner = element._owner;

		  if (config != null) {
		    if (hasValidRef(config)) {
		      // Silently steal the ref from the parent.
		      ref = config.ref;
		      owner = ReactCurrentOwner.current;
		    }

		    if (hasValidKey(config)) {
		      {
		        checkKeyStringCoercion(config.key);
		      }

		      key = '' + config.key;
		    } // Remaining properties override existing props


		    var defaultProps;

		    if (element.type && element.type.defaultProps) {
		      defaultProps = element.type.defaultProps;
		    }

		    for (propName in config) {
		      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
		        if (config[propName] === undefined && defaultProps !== undefined) {
		          // Resolve default props
		          props[propName] = defaultProps[propName];
		        } else {
		          props[propName] = config[propName];
		        }
		      }
		    }
		  } // Children can be more than one argument, and those are transferred onto
		  // the newly allocated props object.


		  var childrenLength = arguments.length - 2;

		  if (childrenLength === 1) {
		    props.children = children;
		  } else if (childrenLength > 1) {
		    var childArray = Array(childrenLength);

		    for (var i = 0; i < childrenLength; i++) {
		      childArray[i] = arguments[i + 2];
		    }

		    props.children = childArray;
		  }

		  return ReactElement(element.type, key, ref, self, source, owner, props);
		}
		/**
		 * Verifies the object is a ReactElement.
		 * See https://reactjs.org/docs/react-api.html#isvalidelement
		 * @param {?object} object
		 * @return {boolean} True if `object` is a ReactElement.
		 * @final
		 */

		function isValidElement(object) {
		  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
		}

		var SEPARATOR = '.';
		var SUBSEPARATOR = ':';
		/**
		 * Escape and wrap key so it is safe to use as a reactid
		 *
		 * @param {string} key to be escaped.
		 * @return {string} the escaped key.
		 */

		function escape(key) {
		  var escapeRegex = /[=:]/g;
		  var escaperLookup = {
		    '=': '=0',
		    ':': '=2'
		  };
		  var escapedString = key.replace(escapeRegex, function (match) {
		    return escaperLookup[match];
		  });
		  return '$' + escapedString;
		}
		/**
		 * TODO: Test that a single child and an array with one item have the same key
		 * pattern.
		 */


		var didWarnAboutMaps = false;
		var userProvidedKeyEscapeRegex = /\/+/g;

		function escapeUserProvidedKey(text) {
		  return text.replace(userProvidedKeyEscapeRegex, '$&/');
		}
		/**
		 * Generate a key string that identifies a element within a set.
		 *
		 * @param {*} element A element that could contain a manual key.
		 * @param {number} index Index that is used if a manual key is not provided.
		 * @return {string}
		 */


		function getElementKey(element, index) {
		  // Do some typechecking here since we call this blindly. We want to ensure
		  // that we don't block potential future ES APIs.
		  if (typeof element === 'object' && element !== null && element.key != null) {
		    // Explicit key
		    {
		      checkKeyStringCoercion(element.key);
		    }

		    return escape('' + element.key);
		  } // Implicit key determined by the index in the set


		  return index.toString(36);
		}

		function mapIntoArray(children, array, escapedPrefix, nameSoFar, callback) {
		  var type = typeof children;

		  if (type === 'undefined' || type === 'boolean') {
		    // All of the above are perceived as null.
		    children = null;
		  }

		  var invokeCallback = false;

		  if (children === null) {
		    invokeCallback = true;
		  } else {
		    switch (type) {
		      case 'string':
		      case 'number':
		        invokeCallback = true;
		        break;

		      case 'object':
		        switch (children.$$typeof) {
		          case REACT_ELEMENT_TYPE:
		          case REACT_PORTAL_TYPE:
		            invokeCallback = true;
		        }

		    }
		  }

		  if (invokeCallback) {
		    var _child = children;
		    var mappedChild = callback(_child); // If it's the only child, treat the name as if it was wrapped in an array
		    // so that it's consistent if the number of children grows:

		    var childKey = nameSoFar === '' ? SEPARATOR + getElementKey(_child, 0) : nameSoFar;

		    if (isArray(mappedChild)) {
		      var escapedChildKey = '';

		      if (childKey != null) {
		        escapedChildKey = escapeUserProvidedKey(childKey) + '/';
		      }

		      mapIntoArray(mappedChild, array, escapedChildKey, '', function (c) {
		        return c;
		      });
		    } else if (mappedChild != null) {
		      if (isValidElement(mappedChild)) {
		        {
		          // The `if` statement here prevents auto-disabling of the safe
		          // coercion ESLint rule, so we must manually disable it below.
		          // $FlowFixMe Flow incorrectly thinks React.Portal doesn't have a key
		          if (mappedChild.key && (!_child || _child.key !== mappedChild.key)) {
		            checkKeyStringCoercion(mappedChild.key);
		          }
		        }

		        mappedChild = cloneAndReplaceKey(mappedChild, // Keep both the (mapped) and old keys if they differ, just as
		        // traverseAllChildren used to do for objects as children
		        escapedPrefix + ( // $FlowFixMe Flow incorrectly thinks React.Portal doesn't have a key
		        mappedChild.key && (!_child || _child.key !== mappedChild.key) ? // $FlowFixMe Flow incorrectly thinks existing element's key can be a number
		        // eslint-disable-next-line react-internal/safe-string-coercion
		        escapeUserProvidedKey('' + mappedChild.key) + '/' : '') + childKey);
		      }

		      array.push(mappedChild);
		    }

		    return 1;
		  }

		  var child;
		  var nextName;
		  var subtreeCount = 0; // Count of children found in the current subtree.

		  var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;

		  if (isArray(children)) {
		    for (var i = 0; i < children.length; i++) {
		      child = children[i];
		      nextName = nextNamePrefix + getElementKey(child, i);
		      subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
		    }
		  } else {
		    var iteratorFn = getIteratorFn(children);

		    if (typeof iteratorFn === 'function') {
		      var iterableChildren = children;

		      {
		        // Warn about using Maps as children
		        if (iteratorFn === iterableChildren.entries) {
		          if (!didWarnAboutMaps) {
		            warn('Using Maps as children is not supported. ' + 'Use an array of keyed ReactElements instead.');
		          }

		          didWarnAboutMaps = true;
		        }
		      }

		      var iterator = iteratorFn.call(iterableChildren);
		      var step;
		      var ii = 0;

		      while (!(step = iterator.next()).done) {
		        child = step.value;
		        nextName = nextNamePrefix + getElementKey(child, ii++);
		        subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
		      }
		    } else if (type === 'object') {
		      // eslint-disable-next-line react-internal/safe-string-coercion
		      var childrenString = String(children);
		      throw new Error("Objects are not valid as a React child (found: " + (childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString) + "). " + 'If you meant to render a collection of children, use an array ' + 'instead.');
		    }
		  }

		  return subtreeCount;
		}

		/**
		 * Maps children that are typically specified as `props.children`.
		 *
		 * See https://reactjs.org/docs/react-api.html#reactchildrenmap
		 *
		 * The provided mapFunction(child, index) will be called for each
		 * leaf child.
		 *
		 * @param {?*} children Children tree container.
		 * @param {function(*, int)} func The map function.
		 * @param {*} context Context for mapFunction.
		 * @return {object} Object containing the ordered map of results.
		 */
		function mapChildren(children, func, context) {
		  if (children == null) {
		    return children;
		  }

		  var result = [];
		  var count = 0;
		  mapIntoArray(children, result, '', '', function (child) {
		    return func.call(context, child, count++);
		  });
		  return result;
		}
		/**
		 * Count the number of children that are typically specified as
		 * `props.children`.
		 *
		 * See https://reactjs.org/docs/react-api.html#reactchildrencount
		 *
		 * @param {?*} children Children tree container.
		 * @return {number} The number of children.
		 */


		function countChildren(children) {
		  var n = 0;
		  mapChildren(children, function () {
		    n++; // Don't return anything
		  });
		  return n;
		}

		/**
		 * Iterates through children that are typically specified as `props.children`.
		 *
		 * See https://reactjs.org/docs/react-api.html#reactchildrenforeach
		 *
		 * The provided forEachFunc(child, index) will be called for each
		 * leaf child.
		 *
		 * @param {?*} children Children tree container.
		 * @param {function(*, int)} forEachFunc
		 * @param {*} forEachContext Context for forEachContext.
		 */
		function forEachChildren(children, forEachFunc, forEachContext) {
		  mapChildren(children, function () {
		    forEachFunc.apply(this, arguments); // Don't return anything.
		  }, forEachContext);
		}
		/**
		 * Flatten a children object (typically specified as `props.children`) and
		 * return an array with appropriately re-keyed children.
		 *
		 * See https://reactjs.org/docs/react-api.html#reactchildrentoarray
		 */


		function toArray(children) {
		  return mapChildren(children, function (child) {
		    return child;
		  }) || [];
		}
		/**
		 * Returns the first child in a collection of children and verifies that there
		 * is only one child in the collection.
		 *
		 * See https://reactjs.org/docs/react-api.html#reactchildrenonly
		 *
		 * The current implementation of this function assumes that a single child gets
		 * passed without a wrapper, but the purpose of this helper function is to
		 * abstract away the particular structure of children.
		 *
		 * @param {?object} children Child collection structure.
		 * @return {ReactElement} The first and only `ReactElement` contained in the
		 * structure.
		 */


		function onlyChild(children) {
		  if (!isValidElement(children)) {
		    throw new Error('React.Children.only expected to receive a single React element child.');
		  }

		  return children;
		}

		function createContext(defaultValue) {
		  // TODO: Second argument used to be an optional `calculateChangedBits`
		  // function. Warn to reserve for future use?
		  var context = {
		    $$typeof: REACT_CONTEXT_TYPE,
		    // As a workaround to support multiple concurrent renderers, we categorize
		    // some renderers as primary and others as secondary. We only expect
		    // there to be two concurrent renderers at most: React Native (primary) and
		    // Fabric (secondary); React DOM (primary) and React ART (secondary).
		    // Secondary renderers store their context values on separate fields.
		    _currentValue: defaultValue,
		    _currentValue2: defaultValue,
		    // Used to track how many concurrent renderers this context currently
		    // supports within in a single renderer. Such as parallel server rendering.
		    _threadCount: 0,
		    // These are circular
		    Provider: null,
		    Consumer: null,
		    // Add these to use same hidden class in VM as ServerContext
		    _defaultValue: null,
		    _globalName: null
		  };
		  context.Provider = {
		    $$typeof: REACT_PROVIDER_TYPE,
		    _context: context
		  };
		  var hasWarnedAboutUsingNestedContextConsumers = false;
		  var hasWarnedAboutUsingConsumerProvider = false;
		  var hasWarnedAboutDisplayNameOnConsumer = false;

		  {
		    // A separate object, but proxies back to the original context object for
		    // backwards compatibility. It has a different $$typeof, so we can properly
		    // warn for the incorrect usage of Context as a Consumer.
		    var Consumer = {
		      $$typeof: REACT_CONTEXT_TYPE,
		      _context: context
		    }; // $FlowFixMe: Flow complains about not setting a value, which is intentional here

		    Object.defineProperties(Consumer, {
		      Provider: {
		        get: function () {
		          if (!hasWarnedAboutUsingConsumerProvider) {
		            hasWarnedAboutUsingConsumerProvider = true;

		            error('Rendering <Context.Consumer.Provider> is not supported and will be removed in ' + 'a future major release. Did you mean to render <Context.Provider> instead?');
		          }

		          return context.Provider;
		        },
		        set: function (_Provider) {
		          context.Provider = _Provider;
		        }
		      },
		      _currentValue: {
		        get: function () {
		          return context._currentValue;
		        },
		        set: function (_currentValue) {
		          context._currentValue = _currentValue;
		        }
		      },
		      _currentValue2: {
		        get: function () {
		          return context._currentValue2;
		        },
		        set: function (_currentValue2) {
		          context._currentValue2 = _currentValue2;
		        }
		      },
		      _threadCount: {
		        get: function () {
		          return context._threadCount;
		        },
		        set: function (_threadCount) {
		          context._threadCount = _threadCount;
		        }
		      },
		      Consumer: {
		        get: function () {
		          if (!hasWarnedAboutUsingNestedContextConsumers) {
		            hasWarnedAboutUsingNestedContextConsumers = true;

		            error('Rendering <Context.Consumer.Consumer> is not supported and will be removed in ' + 'a future major release. Did you mean to render <Context.Consumer> instead?');
		          }

		          return context.Consumer;
		        }
		      },
		      displayName: {
		        get: function () {
		          return context.displayName;
		        },
		        set: function (displayName) {
		          if (!hasWarnedAboutDisplayNameOnConsumer) {
		            warn('Setting `displayName` on Context.Consumer has no effect. ' + "You should set it directly on the context with Context.displayName = '%s'.", displayName);

		            hasWarnedAboutDisplayNameOnConsumer = true;
		          }
		        }
		      }
		    }); // $FlowFixMe: Flow complains about missing properties because it doesn't understand defineProperty

		    context.Consumer = Consumer;
		  }

		  {
		    context._currentRenderer = null;
		    context._currentRenderer2 = null;
		  }

		  return context;
		}

		var Uninitialized = -1;
		var Pending = 0;
		var Resolved = 1;
		var Rejected = 2;

		function lazyInitializer(payload) {
		  if (payload._status === Uninitialized) {
		    var ctor = payload._result;
		    var thenable = ctor(); // Transition to the next state.
		    // This might throw either because it's missing or throws. If so, we treat it
		    // as still uninitialized and try again next time. Which is the same as what
		    // happens if the ctor or any wrappers processing the ctor throws. This might
		    // end up fixing it if the resolution was a concurrency bug.

		    thenable.then(function (moduleObject) {
		      if (payload._status === Pending || payload._status === Uninitialized) {
		        // Transition to the next state.
		        var resolved = payload;
		        resolved._status = Resolved;
		        resolved._result = moduleObject;
		      }
		    }, function (error) {
		      if (payload._status === Pending || payload._status === Uninitialized) {
		        // Transition to the next state.
		        var rejected = payload;
		        rejected._status = Rejected;
		        rejected._result = error;
		      }
		    });

		    if (payload._status === Uninitialized) {
		      // In case, we're still uninitialized, then we're waiting for the thenable
		      // to resolve. Set it as pending in the meantime.
		      var pending = payload;
		      pending._status = Pending;
		      pending._result = thenable;
		    }
		  }

		  if (payload._status === Resolved) {
		    var moduleObject = payload._result;

		    {
		      if (moduleObject === undefined) {
		        error('lazy: Expected the result of a dynamic imp' + 'ort() call. ' + 'Instead received: %s\n\nYour code should look like: \n  ' + // Break up imports to avoid accidentally parsing them as dependencies.
		        'const MyComponent = lazy(() => imp' + "ort('./MyComponent'))\n\n" + 'Did you accidentally put curly braces around the import?', moduleObject);
		      }
		    }

		    {
		      if (!('default' in moduleObject)) {
		        error('lazy: Expected the result of a dynamic imp' + 'ort() call. ' + 'Instead received: %s\n\nYour code should look like: \n  ' + // Break up imports to avoid accidentally parsing them as dependencies.
		        'const MyComponent = lazy(() => imp' + "ort('./MyComponent'))", moduleObject);
		      }
		    }

		    return moduleObject.default;
		  } else {
		    throw payload._result;
		  }
		}

		function lazy(ctor) {
		  var payload = {
		    // We use these fields to store the result.
		    _status: Uninitialized,
		    _result: ctor
		  };
		  var lazyType = {
		    $$typeof: REACT_LAZY_TYPE,
		    _payload: payload,
		    _init: lazyInitializer
		  };

		  {
		    // In production, this would just set it on the object.
		    var defaultProps;
		    var propTypes; // $FlowFixMe

		    Object.defineProperties(lazyType, {
		      defaultProps: {
		        configurable: true,
		        get: function () {
		          return defaultProps;
		        },
		        set: function (newDefaultProps) {
		          error('React.lazy(...): It is not supported to assign `defaultProps` to ' + 'a lazy component import. Either specify them where the component ' + 'is defined, or create a wrapping component around it.');

		          defaultProps = newDefaultProps; // Match production behavior more closely:
		          // $FlowFixMe

		          Object.defineProperty(lazyType, 'defaultProps', {
		            enumerable: true
		          });
		        }
		      },
		      propTypes: {
		        configurable: true,
		        get: function () {
		          return propTypes;
		        },
		        set: function (newPropTypes) {
		          error('React.lazy(...): It is not supported to assign `propTypes` to ' + 'a lazy component import. Either specify them where the component ' + 'is defined, or create a wrapping component around it.');

		          propTypes = newPropTypes; // Match production behavior more closely:
		          // $FlowFixMe

		          Object.defineProperty(lazyType, 'propTypes', {
		            enumerable: true
		          });
		        }
		      }
		    });
		  }

		  return lazyType;
		}

		function forwardRef(render) {
		  {
		    if (render != null && render.$$typeof === REACT_MEMO_TYPE) {
		      error('forwardRef requires a render function but received a `memo` ' + 'component. Instead of forwardRef(memo(...)), use ' + 'memo(forwardRef(...)).');
		    } else if (typeof render !== 'function') {
		      error('forwardRef requires a render function but was given %s.', render === null ? 'null' : typeof render);
		    } else {
		      if (render.length !== 0 && render.length !== 2) {
		        error('forwardRef render functions accept exactly two parameters: props and ref. %s', render.length === 1 ? 'Did you forget to use the ref parameter?' : 'Any additional parameter will be undefined.');
		      }
		    }

		    if (render != null) {
		      if (render.defaultProps != null || render.propTypes != null) {
		        error('forwardRef render functions do not support propTypes or defaultProps. ' + 'Did you accidentally pass a React component?');
		      }
		    }
		  }

		  var elementType = {
		    $$typeof: REACT_FORWARD_REF_TYPE,
		    render: render
		  };

		  {
		    var ownName;
		    Object.defineProperty(elementType, 'displayName', {
		      enumerable: false,
		      configurable: true,
		      get: function () {
		        return ownName;
		      },
		      set: function (name) {
		        ownName = name; // The inner component shouldn't inherit this display name in most cases,
		        // because the component may be used elsewhere.
		        // But it's nice for anonymous functions to inherit the name,
		        // so that our component-stack generation logic will display their frames.
		        // An anonymous function generally suggests a pattern like:
		        //   React.forwardRef((props, ref) => {...});
		        // This kind of inner function is not used elsewhere so the side effect is okay.

		        if (!render.name && !render.displayName) {
		          render.displayName = name;
		        }
		      }
		    });
		  }

		  return elementType;
		}

		var REACT_MODULE_REFERENCE;

		{
		  REACT_MODULE_REFERENCE = Symbol.for('react.module.reference');
		}

		function isValidElementType(type) {
		  if (typeof type === 'string' || typeof type === 'function') {
		    return true;
		  } // Note: typeof might be other than 'symbol' or 'number' (e.g. if it's a polyfill).


		  if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing  || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden  || type === REACT_OFFSCREEN_TYPE || enableScopeAPI  || enableCacheElement  || enableTransitionTracing ) {
		    return true;
		  }

		  if (typeof type === 'object' && type !== null) {
		    if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object
		    // types supported by any Flight configuration anywhere since
		    // we don't know which Flight build this will end up being used
		    // with.
		    type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== undefined) {
		      return true;
		    }
		  }

		  return false;
		}

		function memo(type, compare) {
		  {
		    if (!isValidElementType(type)) {
		      error('memo: The first argument must be a component. Instead ' + 'received: %s', type === null ? 'null' : typeof type);
		    }
		  }

		  var elementType = {
		    $$typeof: REACT_MEMO_TYPE,
		    type: type,
		    compare: compare === undefined ? null : compare
		  };

		  {
		    var ownName;
		    Object.defineProperty(elementType, 'displayName', {
		      enumerable: false,
		      configurable: true,
		      get: function () {
		        return ownName;
		      },
		      set: function (name) {
		        ownName = name; // The inner component shouldn't inherit this display name in most cases,
		        // because the component may be used elsewhere.
		        // But it's nice for anonymous functions to inherit the name,
		        // so that our component-stack generation logic will display their frames.
		        // An anonymous function generally suggests a pattern like:
		        //   React.memo((props) => {...});
		        // This kind of inner function is not used elsewhere so the side effect is okay.

		        if (!type.name && !type.displayName) {
		          type.displayName = name;
		        }
		      }
		    });
		  }

		  return elementType;
		}

		function resolveDispatcher() {
		  var dispatcher = ReactCurrentDispatcher.current;

		  {
		    if (dispatcher === null) {
		      error('Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for' + ' one of the following reasons:\n' + '1. You might have mismatching versions of React and the renderer (such as React DOM)\n' + '2. You might be breaking the Rules of Hooks\n' + '3. You might have more than one copy of React in the same app\n' + 'See https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.');
		    }
		  } // Will result in a null access error if accessed outside render phase. We
		  // intentionally don't throw our own error because this is in a hot path.
		  // Also helps ensure this is inlined.


		  return dispatcher;
		}
		function useContext(Context) {
		  var dispatcher = resolveDispatcher();

		  {
		    // TODO: add a more generic warning for invalid values.
		    if (Context._context !== undefined) {
		      var realContext = Context._context; // Don't deduplicate because this legitimately causes bugs
		      // and nobody should be using this in existing code.

		      if (realContext.Consumer === Context) {
		        error('Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be ' + 'removed in a future major release. Did you mean to call useContext(Context) instead?');
		      } else if (realContext.Provider === Context) {
		        error('Calling useContext(Context.Provider) is not supported. ' + 'Did you mean to call useContext(Context) instead?');
		      }
		    }
		  }

		  return dispatcher.useContext(Context);
		}
		function useState(initialState) {
		  var dispatcher = resolveDispatcher();
		  return dispatcher.useState(initialState);
		}
		function useReducer(reducer, initialArg, init) {
		  var dispatcher = resolveDispatcher();
		  return dispatcher.useReducer(reducer, initialArg, init);
		}
		function useRef(initialValue) {
		  var dispatcher = resolveDispatcher();
		  return dispatcher.useRef(initialValue);
		}
		function useEffect(create, deps) {
		  var dispatcher = resolveDispatcher();
		  return dispatcher.useEffect(create, deps);
		}
		function useInsertionEffect(create, deps) {
		  var dispatcher = resolveDispatcher();
		  return dispatcher.useInsertionEffect(create, deps);
		}
		function useLayoutEffect(create, deps) {
		  var dispatcher = resolveDispatcher();
		  return dispatcher.useLayoutEffect(create, deps);
		}
		function useCallback(callback, deps) {
		  var dispatcher = resolveDispatcher();
		  return dispatcher.useCallback(callback, deps);
		}
		function useMemo(create, deps) {
		  var dispatcher = resolveDispatcher();
		  return dispatcher.useMemo(create, deps);
		}
		function useImperativeHandle(ref, create, deps) {
		  var dispatcher = resolveDispatcher();
		  return dispatcher.useImperativeHandle(ref, create, deps);
		}
		function useDebugValue(value, formatterFn) {
		  {
		    var dispatcher = resolveDispatcher();
		    return dispatcher.useDebugValue(value, formatterFn);
		  }
		}
		function useTransition() {
		  var dispatcher = resolveDispatcher();
		  return dispatcher.useTransition();
		}
		function useDeferredValue(value) {
		  var dispatcher = resolveDispatcher();
		  return dispatcher.useDeferredValue(value);
		}
		function useId() {
		  var dispatcher = resolveDispatcher();
		  return dispatcher.useId();
		}
		function useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
		  var dispatcher = resolveDispatcher();
		  return dispatcher.useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
		}

		// Helpers to patch console.logs to avoid logging during side-effect free
		// replaying on render function. This currently only patches the object
		// lazily which won't cover if the log function was extracted eagerly.
		// We could also eagerly patch the method.
		var disabledDepth = 0;
		var prevLog;
		var prevInfo;
		var prevWarn;
		var prevError;
		var prevGroup;
		var prevGroupCollapsed;
		var prevGroupEnd;

		function disabledLog() {}

		disabledLog.__reactDisabledLog = true;
		function disableLogs() {
		  {
		    if (disabledDepth === 0) {
		      /* eslint-disable react-internal/no-production-logging */
		      prevLog = console.log;
		      prevInfo = console.info;
		      prevWarn = console.warn;
		      prevError = console.error;
		      prevGroup = console.group;
		      prevGroupCollapsed = console.groupCollapsed;
		      prevGroupEnd = console.groupEnd; // https://github.com/facebook/react/issues/19099

		      var props = {
		        configurable: true,
		        enumerable: true,
		        value: disabledLog,
		        writable: true
		      }; // $FlowFixMe Flow thinks console is immutable.

		      Object.defineProperties(console, {
		        info: props,
		        log: props,
		        warn: props,
		        error: props,
		        group: props,
		        groupCollapsed: props,
		        groupEnd: props
		      });
		      /* eslint-enable react-internal/no-production-logging */
		    }

		    disabledDepth++;
		  }
		}
		function reenableLogs() {
		  {
		    disabledDepth--;

		    if (disabledDepth === 0) {
		      /* eslint-disable react-internal/no-production-logging */
		      var props = {
		        configurable: true,
		        enumerable: true,
		        writable: true
		      }; // $FlowFixMe Flow thinks console is immutable.

		      Object.defineProperties(console, {
		        log: assign({}, props, {
		          value: prevLog
		        }),
		        info: assign({}, props, {
		          value: prevInfo
		        }),
		        warn: assign({}, props, {
		          value: prevWarn
		        }),
		        error: assign({}, props, {
		          value: prevError
		        }),
		        group: assign({}, props, {
		          value: prevGroup
		        }),
		        groupCollapsed: assign({}, props, {
		          value: prevGroupCollapsed
		        }),
		        groupEnd: assign({}, props, {
		          value: prevGroupEnd
		        })
		      });
		      /* eslint-enable react-internal/no-production-logging */
		    }

		    if (disabledDepth < 0) {
		      error('disabledDepth fell below zero. ' + 'This is a bug in React. Please file an issue.');
		    }
		  }
		}

		var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher;
		var prefix;
		function describeBuiltInComponentFrame(name, source, ownerFn) {
		  {
		    if (prefix === undefined) {
		      // Extract the VM specific prefix used by each line.
		      try {
		        throw Error();
		      } catch (x) {
		        var match = x.stack.trim().match(/\n( *(at )?)/);
		        prefix = match && match[1] || '';
		      }
		    } // We use the prefix to ensure our stacks line up with native stack frames.


		    return '\n' + prefix + name;
		  }
		}
		var reentry = false;
		var componentFrameCache;

		{
		  var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;
		  componentFrameCache = new PossiblyWeakMap();
		}

		function describeNativeComponentFrame(fn, construct) {
		  // If something asked for a stack inside a fake render, it should get ignored.
		  if ( !fn || reentry) {
		    return '';
		  }

		  {
		    var frame = componentFrameCache.get(fn);

		    if (frame !== undefined) {
		      return frame;
		    }
		  }

		  var control;
		  reentry = true;
		  var previousPrepareStackTrace = Error.prepareStackTrace; // $FlowFixMe It does accept undefined.

		  Error.prepareStackTrace = undefined;
		  var previousDispatcher;

		  {
		    previousDispatcher = ReactCurrentDispatcher$1.current; // Set the dispatcher in DEV because this might be call in the render function
		    // for warnings.

		    ReactCurrentDispatcher$1.current = null;
		    disableLogs();
		  }

		  try {
		    // This should throw.
		    if (construct) {
		      // Something should be setting the props in the constructor.
		      var Fake = function () {
		        throw Error();
		      }; // $FlowFixMe


		      Object.defineProperty(Fake.prototype, 'props', {
		        set: function () {
		          // We use a throwing setter instead of frozen or non-writable props
		          // because that won't throw in a non-strict mode function.
		          throw Error();
		        }
		      });

		      if (typeof Reflect === 'object' && Reflect.construct) {
		        // We construct a different control for this case to include any extra
		        // frames added by the construct call.
		        try {
		          Reflect.construct(Fake, []);
		        } catch (x) {
		          control = x;
		        }

		        Reflect.construct(fn, [], Fake);
		      } else {
		        try {
		          Fake.call();
		        } catch (x) {
		          control = x;
		        }

		        fn.call(Fake.prototype);
		      }
		    } else {
		      try {
		        throw Error();
		      } catch (x) {
		        control = x;
		      }

		      fn();
		    }
		  } catch (sample) {
		    // This is inlined manually because closure doesn't do it for us.
		    if (sample && control && typeof sample.stack === 'string') {
		      // This extracts the first frame from the sample that isn't also in the control.
		      // Skipping one frame that we assume is the frame that calls the two.
		      var sampleLines = sample.stack.split('\n');
		      var controlLines = control.stack.split('\n');
		      var s = sampleLines.length - 1;
		      var c = controlLines.length - 1;

		      while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
		        // We expect at least one stack frame to be shared.
		        // Typically this will be the root most one. However, stack frames may be
		        // cut off due to maximum stack limits. In this case, one maybe cut off
		        // earlier than the other. We assume that the sample is longer or the same
		        // and there for cut off earlier. So we should find the root most frame in
		        // the sample somewhere in the control.
		        c--;
		      }

		      for (; s >= 1 && c >= 0; s--, c--) {
		        // Next we find the first one that isn't the same which should be the
		        // frame that called our sample function and the control.
		        if (sampleLines[s] !== controlLines[c]) {
		          // In V8, the first line is describing the message but other VMs don't.
		          // If we're about to return the first line, and the control is also on the same
		          // line, that's a pretty good indicator that our sample threw at same line as
		          // the control. I.e. before we entered the sample frame. So we ignore this result.
		          // This can happen if you passed a class to function component, or non-function.
		          if (s !== 1 || c !== 1) {
		            do {
		              s--;
		              c--; // We may still have similar intermediate frames from the construct call.
		              // The next one that isn't the same should be our match though.

		              if (c < 0 || sampleLines[s] !== controlLines[c]) {
		                // V8 adds a "new" prefix for native classes. Let's remove it to make it prettier.
		                var _frame = '\n' + sampleLines[s].replace(' at new ', ' at '); // If our component frame is labeled "<anonymous>"
		                // but we have a user-provided "displayName"
		                // splice it in to make the stack more readable.


		                if (fn.displayName && _frame.includes('<anonymous>')) {
		                  _frame = _frame.replace('<anonymous>', fn.displayName);
		                }

		                {
		                  if (typeof fn === 'function') {
		                    componentFrameCache.set(fn, _frame);
		                  }
		                } // Return the line we found.


		                return _frame;
		              }
		            } while (s >= 1 && c >= 0);
		          }

		          break;
		        }
		      }
		    }
		  } finally {
		    reentry = false;

		    {
		      ReactCurrentDispatcher$1.current = previousDispatcher;
		      reenableLogs();
		    }

		    Error.prepareStackTrace = previousPrepareStackTrace;
		  } // Fallback to just using the name if we couldn't make it throw.


		  var name = fn ? fn.displayName || fn.name : '';
		  var syntheticFrame = name ? describeBuiltInComponentFrame(name) : '';

		  {
		    if (typeof fn === 'function') {
		      componentFrameCache.set(fn, syntheticFrame);
		    }
		  }

		  return syntheticFrame;
		}
		function describeFunctionComponentFrame(fn, source, ownerFn) {
		  {
		    return describeNativeComponentFrame(fn, false);
		  }
		}

		function shouldConstruct(Component) {
		  var prototype = Component.prototype;
		  return !!(prototype && prototype.isReactComponent);
		}

		function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {

		  if (type == null) {
		    return '';
		  }

		  if (typeof type === 'function') {
		    {
		      return describeNativeComponentFrame(type, shouldConstruct(type));
		    }
		  }

		  if (typeof type === 'string') {
		    return describeBuiltInComponentFrame(type);
		  }

		  switch (type) {
		    case REACT_SUSPENSE_TYPE:
		      return describeBuiltInComponentFrame('Suspense');

		    case REACT_SUSPENSE_LIST_TYPE:
		      return describeBuiltInComponentFrame('SuspenseList');
		  }

		  if (typeof type === 'object') {
		    switch (type.$$typeof) {
		      case REACT_FORWARD_REF_TYPE:
		        return describeFunctionComponentFrame(type.render);

		      case REACT_MEMO_TYPE:
		        // Memo may contain any component type so we recursively resolve it.
		        return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);

		      case REACT_LAZY_TYPE:
		        {
		          var lazyComponent = type;
		          var payload = lazyComponent._payload;
		          var init = lazyComponent._init;

		          try {
		            // Lazy may contain any component type so we recursively resolve it.
		            return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
		          } catch (x) {}
		        }
		    }
		  }

		  return '';
		}

		var loggedTypeFailures = {};
		var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;

		function setCurrentlyValidatingElement(element) {
		  {
		    if (element) {
		      var owner = element._owner;
		      var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
		      ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
		    } else {
		      ReactDebugCurrentFrame$1.setExtraStackFrame(null);
		    }
		  }
		}

		function checkPropTypes(typeSpecs, values, location, componentName, element) {
		  {
		    // $FlowFixMe This is okay but Flow doesn't know it.
		    var has = Function.call.bind(hasOwnProperty);

		    for (var typeSpecName in typeSpecs) {
		      if (has(typeSpecs, typeSpecName)) {
		        var error$1 = void 0; // Prop type validation may throw. In case they do, we don't want to
		        // fail the render phase where it didn't fail before. So we log it.
		        // After these have been cleaned up, we'll let them throw.

		        try {
		          // This is intentionally an invariant that gets caught. It's the same
		          // behavior as without this statement except with a better message.
		          if (typeof typeSpecs[typeSpecName] !== 'function') {
		            // eslint-disable-next-line react-internal/prod-error-codes
		            var err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.' + 'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.');
		            err.name = 'Invariant Violation';
		            throw err;
		          }

		          error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED');
		        } catch (ex) {
		          error$1 = ex;
		        }

		        if (error$1 && !(error$1 instanceof Error)) {
		          setCurrentlyValidatingElement(element);

		          error('%s: type specification of %s' + ' `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', location, typeSpecName, typeof error$1);

		          setCurrentlyValidatingElement(null);
		        }

		        if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
		          // Only monitor this failure once because there tends to be a lot of the
		          // same error.
		          loggedTypeFailures[error$1.message] = true;
		          setCurrentlyValidatingElement(element);

		          error('Failed %s type: %s', location, error$1.message);

		          setCurrentlyValidatingElement(null);
		        }
		      }
		    }
		  }
		}

		function setCurrentlyValidatingElement$1(element) {
		  {
		    if (element) {
		      var owner = element._owner;
		      var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
		      setExtraStackFrame(stack);
		    } else {
		      setExtraStackFrame(null);
		    }
		  }
		}

		var propTypesMisspellWarningShown;

		{
		  propTypesMisspellWarningShown = false;
		}

		function getDeclarationErrorAddendum() {
		  if (ReactCurrentOwner.current) {
		    var name = getComponentNameFromType(ReactCurrentOwner.current.type);

		    if (name) {
		      return '\n\nCheck the render method of `' + name + '`.';
		    }
		  }

		  return '';
		}

		function getSourceInfoErrorAddendum(source) {
		  if (source !== undefined) {
		    var fileName = source.fileName.replace(/^.*[\\\/]/, '');
		    var lineNumber = source.lineNumber;
		    return '\n\nCheck your code at ' + fileName + ':' + lineNumber + '.';
		  }

		  return '';
		}

		function getSourceInfoErrorAddendumForProps(elementProps) {
		  if (elementProps !== null && elementProps !== undefined) {
		    return getSourceInfoErrorAddendum(elementProps.__source);
		  }

		  return '';
		}
		/**
		 * Warn if there's no key explicitly set on dynamic arrays of children or
		 * object keys are not valid. This allows us to keep track of children between
		 * updates.
		 */


		var ownerHasKeyUseWarning = {};

		function getCurrentComponentErrorInfo(parentType) {
		  var info = getDeclarationErrorAddendum();

		  if (!info) {
		    var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;

		    if (parentName) {
		      info = "\n\nCheck the top-level render call using <" + parentName + ">.";
		    }
		  }

		  return info;
		}
		/**
		 * Warn if the element doesn't have an explicit key assigned to it.
		 * This element is in an array. The array could grow and shrink or be
		 * reordered. All children that haven't already been validated are required to
		 * have a "key" property assigned to it. Error statuses are cached so a warning
		 * will only be shown once.
		 *
		 * @internal
		 * @param {ReactElement} element Element that requires a key.
		 * @param {*} parentType element's parent's type.
		 */


		function validateExplicitKey(element, parentType) {
		  if (!element._store || element._store.validated || element.key != null) {
		    return;
		  }

		  element._store.validated = true;
		  var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);

		  if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
		    return;
		  }

		  ownerHasKeyUseWarning[currentComponentErrorInfo] = true; // Usually the current owner is the offender, but if it accepts children as a
		  // property, it may be the creator of the child that's responsible for
		  // assigning it a key.

		  var childOwner = '';

		  if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
		    // Give the component that originally created this child.
		    childOwner = " It was passed a child from " + getComponentNameFromType(element._owner.type) + ".";
		  }

		  {
		    setCurrentlyValidatingElement$1(element);

		    error('Each child in a list should have a unique "key" prop.' + '%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);

		    setCurrentlyValidatingElement$1(null);
		  }
		}
		/**
		 * Ensure that every element either is passed in a static location, in an
		 * array with an explicit keys property defined, or in an object literal
		 * with valid key property.
		 *
		 * @internal
		 * @param {ReactNode} node Statically passed child of any type.
		 * @param {*} parentType node's parent's type.
		 */


		function validateChildKeys(node, parentType) {
		  if (typeof node !== 'object') {
		    return;
		  }

		  if (isArray(node)) {
		    for (var i = 0; i < node.length; i++) {
		      var child = node[i];

		      if (isValidElement(child)) {
		        validateExplicitKey(child, parentType);
		      }
		    }
		  } else if (isValidElement(node)) {
		    // This element was passed in a valid location.
		    if (node._store) {
		      node._store.validated = true;
		    }
		  } else if (node) {
		    var iteratorFn = getIteratorFn(node);

		    if (typeof iteratorFn === 'function') {
		      // Entry iterators used to provide implicit keys,
		      // but now we print a separate warning for them later.
		      if (iteratorFn !== node.entries) {
		        var iterator = iteratorFn.call(node);
		        var step;

		        while (!(step = iterator.next()).done) {
		          if (isValidElement(step.value)) {
		            validateExplicitKey(step.value, parentType);
		          }
		        }
		      }
		    }
		  }
		}
		/**
		 * Given an element, validate that its props follow the propTypes definition,
		 * provided by the type.
		 *
		 * @param {ReactElement} element
		 */


		function validatePropTypes(element) {
		  {
		    var type = element.type;

		    if (type === null || type === undefined || typeof type === 'string') {
		      return;
		    }

		    var propTypes;

		    if (typeof type === 'function') {
		      propTypes = type.propTypes;
		    } else if (typeof type === 'object' && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.
		    // Inner props are checked in the reconciler.
		    type.$$typeof === REACT_MEMO_TYPE)) {
		      propTypes = type.propTypes;
		    } else {
		      return;
		    }

		    if (propTypes) {
		      // Intentionally inside to avoid triggering lazy initializers:
		      var name = getComponentNameFromType(type);
		      checkPropTypes(propTypes, element.props, 'prop', name, element);
		    } else if (type.PropTypes !== undefined && !propTypesMisspellWarningShown) {
		      propTypesMisspellWarningShown = true; // Intentionally inside to avoid triggering lazy initializers:

		      var _name = getComponentNameFromType(type);

		      error('Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?', _name || 'Unknown');
		    }

		    if (typeof type.getDefaultProps === 'function' && !type.getDefaultProps.isReactClassApproved) {
		      error('getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.');
		    }
		  }
		}
		/**
		 * Given a fragment, validate that it can only be provided with fragment props
		 * @param {ReactElement} fragment
		 */


		function validateFragmentProps(fragment) {
		  {
		    var keys = Object.keys(fragment.props);

		    for (var i = 0; i < keys.length; i++) {
		      var key = keys[i];

		      if (key !== 'children' && key !== 'key') {
		        setCurrentlyValidatingElement$1(fragment);

		        error('Invalid prop `%s` supplied to `React.Fragment`. ' + 'React.Fragment can only have `key` and `children` props.', key);

		        setCurrentlyValidatingElement$1(null);
		        break;
		      }
		    }

		    if (fragment.ref !== null) {
		      setCurrentlyValidatingElement$1(fragment);

		      error('Invalid attribute `ref` supplied to `React.Fragment`.');

		      setCurrentlyValidatingElement$1(null);
		    }
		  }
		}
		function createElementWithValidation(type, props, children) {
		  var validType = isValidElementType(type); // We warn in this case but don't throw. We expect the element creation to
		  // succeed and there will likely be errors in render.

		  if (!validType) {
		    var info = '';

		    if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {
		      info += ' You likely forgot to export your component from the file ' + "it's defined in, or you might have mixed up default and named imports.";
		    }

		    var sourceInfo = getSourceInfoErrorAddendumForProps(props);

		    if (sourceInfo) {
		      info += sourceInfo;
		    } else {
		      info += getDeclarationErrorAddendum();
		    }

		    var typeString;

		    if (type === null) {
		      typeString = 'null';
		    } else if (isArray(type)) {
		      typeString = 'array';
		    } else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {
		      typeString = "<" + (getComponentNameFromType(type.type) || 'Unknown') + " />";
		      info = ' Did you accidentally export a JSX literal instead of a component?';
		    } else {
		      typeString = typeof type;
		    }

		    {
		      error('React.createElement: type is invalid -- expected a string (for ' + 'built-in components) or a class/function (for composite ' + 'components) but got: %s.%s', typeString, info);
		    }
		  }

		  var element = createElement.apply(this, arguments); // The result can be nullish if a mock or a custom function is used.
		  // TODO: Drop this when these are no longer allowed as the type argument.

		  if (element == null) {
		    return element;
		  } // Skip key warning if the type isn't valid since our key validation logic
		  // doesn't expect a non-string/function type and can throw confusing errors.
		  // We don't want exception behavior to differ between dev and prod.
		  // (Rendering will throw with a helpful message and as soon as the type is
		  // fixed, the key warnings will appear.)


		  if (validType) {
		    for (var i = 2; i < arguments.length; i++) {
		      validateChildKeys(arguments[i], type);
		    }
		  }

		  if (type === REACT_FRAGMENT_TYPE) {
		    validateFragmentProps(element);
		  } else {
		    validatePropTypes(element);
		  }

		  return element;
		}
		var didWarnAboutDeprecatedCreateFactory = false;
		function createFactoryWithValidation(type) {
		  var validatedFactory = createElementWithValidation.bind(null, type);
		  validatedFactory.type = type;

		  {
		    if (!didWarnAboutDeprecatedCreateFactory) {
		      didWarnAboutDeprecatedCreateFactory = true;

		      warn('React.createFactory() is deprecated and will be removed in ' + 'a future major release. Consider using JSX ' + 'or use React.createElement() directly instead.');
		    } // Legacy hook: remove it


		    Object.defineProperty(validatedFactory, 'type', {
		      enumerable: false,
		      get: function () {
		        warn('Factory.type is deprecated. Access the class directly ' + 'before passing it to createFactory.');

		        Object.defineProperty(this, 'type', {
		          value: type
		        });
		        return type;
		      }
		    });
		  }

		  return validatedFactory;
		}
		function cloneElementWithValidation(element, props, children) {
		  var newElement = cloneElement.apply(this, arguments);

		  for (var i = 2; i < arguments.length; i++) {
		    validateChildKeys(arguments[i], newElement.type);
		  }

		  validatePropTypes(newElement);
		  return newElement;
		}

		function startTransition(scope, options) {
		  var prevTransition = ReactCurrentBatchConfig.transition;
		  ReactCurrentBatchConfig.transition = {};
		  var currentTransition = ReactCurrentBatchConfig.transition;

		  {
		    ReactCurrentBatchConfig.transition._updatedFibers = new Set();
		  }

		  try {
		    scope();
		  } finally {
		    ReactCurrentBatchConfig.transition = prevTransition;

		    {
		      if (prevTransition === null && currentTransition._updatedFibers) {
		        var updatedFibersCount = currentTransition._updatedFibers.size;

		        if (updatedFibersCount > 10) {
		          warn('Detected a large number of updates inside startTransition. ' + 'If this is due to a subscription please re-write it to use React provided hooks. ' + 'Otherwise concurrent mode guarantees are off the table.');
		        }

		        currentTransition._updatedFibers.clear();
		      }
		    }
		  }
		}

		var didWarnAboutMessageChannel = false;
		var enqueueTaskImpl = null;
		function enqueueTask(task) {
		  if (enqueueTaskImpl === null) {
		    try {
		      // read require off the module object to get around the bundlers.
		      // we don't want them to detect a require and bundle a Node polyfill.
		      var requireString = ('require' + Math.random()).slice(0, 7);
		      var nodeRequire = module && module[requireString]; // assuming we're in node, let's try to get node's
		      // version of setImmediate, bypassing fake timers if any.

		      enqueueTaskImpl = nodeRequire.call(module, 'timers').setImmediate;
		    } catch (_err) {
		      // we're in a browser
		      // we can't use regular timers because they may still be faked
		      // so we try MessageChannel+postMessage instead
		      enqueueTaskImpl = function (callback) {
		        {
		          if (didWarnAboutMessageChannel === false) {
		            didWarnAboutMessageChannel = true;

		            if (typeof MessageChannel === 'undefined') {
		              error('This browser does not have a MessageChannel implementation, ' + 'so enqueuing tasks via await act(async () => ...) will fail. ' + 'Please file an issue at https://github.com/facebook/react/issues ' + 'if you encounter this warning.');
		            }
		          }
		        }

		        var channel = new MessageChannel();
		        channel.port1.onmessage = callback;
		        channel.port2.postMessage(undefined);
		      };
		    }
		  }

		  return enqueueTaskImpl(task);
		}

		var actScopeDepth = 0;
		var didWarnNoAwaitAct = false;
		function act(callback) {
		  {
		    // `act` calls can be nested, so we track the depth. This represents the
		    // number of `act` scopes on the stack.
		    var prevActScopeDepth = actScopeDepth;
		    actScopeDepth++;

		    if (ReactCurrentActQueue.current === null) {
		      // This is the outermost `act` scope. Initialize the queue. The reconciler
		      // will detect the queue and use it instead of Scheduler.
		      ReactCurrentActQueue.current = [];
		    }

		    var prevIsBatchingLegacy = ReactCurrentActQueue.isBatchingLegacy;
		    var result;

		    try {
		      // Used to reproduce behavior of `batchedUpdates` in legacy mode. Only
		      // set to `true` while the given callback is executed, not for updates
		      // triggered during an async event, because this is how the legacy
		      // implementation of `act` behaved.
		      ReactCurrentActQueue.isBatchingLegacy = true;
		      result = callback(); // Replicate behavior of original `act` implementation in legacy mode,
		      // which flushed updates immediately after the scope function exits, even
		      // if it's an async function.

		      if (!prevIsBatchingLegacy && ReactCurrentActQueue.didScheduleLegacyUpdate) {
		        var queue = ReactCurrentActQueue.current;

		        if (queue !== null) {
		          ReactCurrentActQueue.didScheduleLegacyUpdate = false;
		          flushActQueue(queue);
		        }
		      }
		    } catch (error) {
		      popActScope(prevActScopeDepth);
		      throw error;
		    } finally {
		      ReactCurrentActQueue.isBatchingLegacy = prevIsBatchingLegacy;
		    }

		    if (result !== null && typeof result === 'object' && typeof result.then === 'function') {
		      var thenableResult = result; // The callback is an async function (i.e. returned a promise). Wait
		      // for it to resolve before exiting the current scope.

		      var wasAwaited = false;
		      var thenable = {
		        then: function (resolve, reject) {
		          wasAwaited = true;
		          thenableResult.then(function (returnValue) {
		            popActScope(prevActScopeDepth);

		            if (actScopeDepth === 0) {
		              // We've exited the outermost act scope. Recursively flush the
		              // queue until there's no remaining work.
		              recursivelyFlushAsyncActWork(returnValue, resolve, reject);
		            } else {
		              resolve(returnValue);
		            }
		          }, function (error) {
		            // The callback threw an error.
		            popActScope(prevActScopeDepth);
		            reject(error);
		          });
		        }
		      };

		      {
		        if (!didWarnNoAwaitAct && typeof Promise !== 'undefined') {
		          // eslint-disable-next-line no-undef
		          Promise.resolve().then(function () {}).then(function () {
		            if (!wasAwaited) {
		              didWarnNoAwaitAct = true;

		              error('You called act(async () => ...) without await. ' + 'This could lead to unexpected testing behaviour, ' + 'interleaving multiple act calls and mixing their ' + 'scopes. ' + 'You should - await act(async () => ...);');
		            }
		          });
		        }
		      }

		      return thenable;
		    } else {
		      var returnValue = result; // The callback is not an async function. Exit the current scope
		      // immediately, without awaiting.

		      popActScope(prevActScopeDepth);

		      if (actScopeDepth === 0) {
		        // Exiting the outermost act scope. Flush the queue.
		        var _queue = ReactCurrentActQueue.current;

		        if (_queue !== null) {
		          flushActQueue(_queue);
		          ReactCurrentActQueue.current = null;
		        } // Return a thenable. If the user awaits it, we'll flush again in
		        // case additional work was scheduled by a microtask.


		        var _thenable = {
		          then: function (resolve, reject) {
		            // Confirm we haven't re-entered another `act` scope, in case
		            // the user does something weird like await the thenable
		            // multiple times.
		            if (ReactCurrentActQueue.current === null) {
		              // Recursively flush the queue until there's no remaining work.
		              ReactCurrentActQueue.current = [];
		              recursivelyFlushAsyncActWork(returnValue, resolve, reject);
		            } else {
		              resolve(returnValue);
		            }
		          }
		        };
		        return _thenable;
		      } else {
		        // Since we're inside a nested `act` scope, the returned thenable
		        // immediately resolves. The outer scope will flush the queue.
		        var _thenable2 = {
		          then: function (resolve, reject) {
		            resolve(returnValue);
		          }
		        };
		        return _thenable2;
		      }
		    }
		  }
		}

		function popActScope(prevActScopeDepth) {
		  {
		    if (prevActScopeDepth !== actScopeDepth - 1) {
		      error('You seem to have overlapping act() calls, this is not supported. ' + 'Be sure to await previous act() calls before making a new one. ');
		    }

		    actScopeDepth = prevActScopeDepth;
		  }
		}

		function recursivelyFlushAsyncActWork(returnValue, resolve, reject) {
		  {
		    var queue = ReactCurrentActQueue.current;

		    if (queue !== null) {
		      try {
		        flushActQueue(queue);
		        enqueueTask(function () {
		          if (queue.length === 0) {
		            // No additional work was scheduled. Finish.
		            ReactCurrentActQueue.current = null;
		            resolve(returnValue);
		          } else {
		            // Keep flushing work until there's none left.
		            recursivelyFlushAsyncActWork(returnValue, resolve, reject);
		          }
		        });
		      } catch (error) {
		        reject(error);
		      }
		    } else {
		      resolve(returnValue);
		    }
		  }
		}

		var isFlushing = false;

		function flushActQueue(queue) {
		  {
		    if (!isFlushing) {
		      // Prevent re-entrance.
		      isFlushing = true;
		      var i = 0;

		      try {
		        for (; i < queue.length; i++) {
		          var callback = queue[i];

		          do {
		            callback = callback(true);
		          } while (callback !== null);
		        }

		        queue.length = 0;
		      } catch (error) {
		        // If something throws, leave the remaining callbacks on the queue.
		        queue = queue.slice(i + 1);
		        throw error;
		      } finally {
		        isFlushing = false;
		      }
		    }
		  }
		}

		var createElement$1 =  createElementWithValidation ;
		var cloneElement$1 =  cloneElementWithValidation ;
		var createFactory =  createFactoryWithValidation ;
		var Children = {
		  map: mapChildren,
		  forEach: forEachChildren,
		  count: countChildren,
		  toArray: toArray,
		  only: onlyChild
		};

		exports.Children = Children;
		exports.Component = Component;
		exports.Fragment = REACT_FRAGMENT_TYPE;
		exports.Profiler = REACT_PROFILER_TYPE;
		exports.PureComponent = PureComponent;
		exports.StrictMode = REACT_STRICT_MODE_TYPE;
		exports.Suspense = REACT_SUSPENSE_TYPE;
		exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactSharedInternals;
		exports.act = act;
		exports.cloneElement = cloneElement$1;
		exports.createContext = createContext;
		exports.createElement = createElement$1;
		exports.createFactory = createFactory;
		exports.createRef = createRef;
		exports.forwardRef = forwardRef;
		exports.isValidElement = isValidElement;
		exports.lazy = lazy;
		exports.memo = memo;
		exports.startTransition = startTransition;
		exports.unstable_act = act;
		exports.useCallback = useCallback;
		exports.useContext = useContext;
		exports.useDebugValue = useDebugValue;
		exports.useDeferredValue = useDeferredValue;
		exports.useEffect = useEffect;
		exports.useId = useId;
		exports.useImperativeHandle = useImperativeHandle;
		exports.useInsertionEffect = useInsertionEffect;
		exports.useLayoutEffect = useLayoutEffect;
		exports.useMemo = useMemo;
		exports.useReducer = useReducer;
		exports.useRef = useRef;
		exports.useState = useState;
		exports.useSyncExternalStore = useSyncExternalStore;
		exports.useTransition = useTransition;
		exports.version = ReactVersion;
		          /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */
		if (
		  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' &&
		  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop ===
		    'function'
		) {
		  __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
		}
		        
		  })();
		} 
	} (react_development, react_development.exports));
	return react_development.exports;
}

if (process.env.NODE_ENV === 'production') {
  react.exports = requireReact_production_min();
} else {
  react.exports = requireReact_development();
}

var reactExports = react.exports;
var React = /*@__PURE__*/getDefaultExportFromCjs(reactExports);

/**
 * @license React
 * react-jsx-runtime.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var hasRequiredReactJsxRuntime_production_min;

function requireReactJsxRuntime_production_min () {
	if (hasRequiredReactJsxRuntime_production_min) return reactJsxRuntime_production_min;
	hasRequiredReactJsxRuntime_production_min = 1;
var f=reactExports,k=Symbol.for("react.element"),l=Symbol.for("react.fragment"),m=Object.prototype.hasOwnProperty,n=f.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,p={key:!0,ref:!0,__self:!0,__source:!0};
	function q(c,a,g){var b,d={},e=null,h=null;void 0!==g&&(e=""+g);void 0!==a.key&&(e=""+a.key);void 0!==a.ref&&(h=a.ref);for(b in a)m.call(a,b)&&!p.hasOwnProperty(b)&&(d[b]=a[b]);if(c&&c.defaultProps)for(b in a=c.defaultProps,a)void 0===d[b]&&(d[b]=a[b]);return {$$typeof:k,type:c,key:e,ref:h,props:d,_owner:n.current}}reactJsxRuntime_production_min.Fragment=l;reactJsxRuntime_production_min.jsx=q;reactJsxRuntime_production_min.jsxs=q;
	return reactJsxRuntime_production_min;
}

var reactJsxRuntime_development = {};

/**
 * @license React
 * react-jsx-runtime.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var hasRequiredReactJsxRuntime_development;

function requireReactJsxRuntime_development () {
	if (hasRequiredReactJsxRuntime_development) return reactJsxRuntime_development;
	hasRequiredReactJsxRuntime_development = 1;

	if (process.env.NODE_ENV !== "production") {
	  (function() {

	var React = reactExports;

	// ATTENTION
	// When adding new symbols to this file,
	// Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'
	// The Symbol used to tag the ReactElement-like types.
	var REACT_ELEMENT_TYPE = Symbol.for('react.element');
	var REACT_PORTAL_TYPE = Symbol.for('react.portal');
	var REACT_FRAGMENT_TYPE = Symbol.for('react.fragment');
	var REACT_STRICT_MODE_TYPE = Symbol.for('react.strict_mode');
	var REACT_PROFILER_TYPE = Symbol.for('react.profiler');
	var REACT_PROVIDER_TYPE = Symbol.for('react.provider');
	var REACT_CONTEXT_TYPE = Symbol.for('react.context');
	var REACT_FORWARD_REF_TYPE = Symbol.for('react.forward_ref');
	var REACT_SUSPENSE_TYPE = Symbol.for('react.suspense');
	var REACT_SUSPENSE_LIST_TYPE = Symbol.for('react.suspense_list');
	var REACT_MEMO_TYPE = Symbol.for('react.memo');
	var REACT_LAZY_TYPE = Symbol.for('react.lazy');
	var REACT_OFFSCREEN_TYPE = Symbol.for('react.offscreen');
	var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
	var FAUX_ITERATOR_SYMBOL = '@@iterator';
	function getIteratorFn(maybeIterable) {
	  if (maybeIterable === null || typeof maybeIterable !== 'object') {
	    return null;
	  }

	  var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];

	  if (typeof maybeIterator === 'function') {
	    return maybeIterator;
	  }

	  return null;
	}

	var ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;

	function error(format) {
	  {
	    {
	      for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
	        args[_key2 - 1] = arguments[_key2];
	      }

	      printWarning('error', format, args);
	    }
	  }
	}

	function printWarning(level, format, args) {
	  // When changing this logic, you might want to also
	  // update consoleWithStackDev.www.js as well.
	  {
	    var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
	    var stack = ReactDebugCurrentFrame.getStackAddendum();

	    if (stack !== '') {
	      format += '%s';
	      args = args.concat([stack]);
	    } // eslint-disable-next-line react-internal/safe-string-coercion


	    var argsWithFormat = args.map(function (item) {
	      return String(item);
	    }); // Careful: RN currently depends on this prefix

	    argsWithFormat.unshift('Warning: ' + format); // We intentionally don't use spread (or .apply) directly because it
	    // breaks IE9: https://github.com/facebook/react/issues/13610
	    // eslint-disable-next-line react-internal/no-production-logging

	    Function.prototype.apply.call(console[level], console, argsWithFormat);
	  }
	}

	// -----------------------------------------------------------------------------

	var enableScopeAPI = false; // Experimental Create Event Handle API.
	var enableCacheElement = false;
	var enableTransitionTracing = false; // No known bugs, but needs performance testing

	var enableLegacyHidden = false; // Enables unstable_avoidThisFallback feature in Fiber
	// stuff. Intended to enable React core members to more easily debug scheduling
	// issues in DEV builds.

	var enableDebugTracing = false; // Track which Fiber(s) schedule render work.

	var REACT_MODULE_REFERENCE;

	{
	  REACT_MODULE_REFERENCE = Symbol.for('react.module.reference');
	}

	function isValidElementType(type) {
	  if (typeof type === 'string' || typeof type === 'function') {
	    return true;
	  } // Note: typeof might be other than 'symbol' or 'number' (e.g. if it's a polyfill).


	  if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing  || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden  || type === REACT_OFFSCREEN_TYPE || enableScopeAPI  || enableCacheElement  || enableTransitionTracing ) {
	    return true;
	  }

	  if (typeof type === 'object' && type !== null) {
	    if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object
	    // types supported by any Flight configuration anywhere since
	    // we don't know which Flight build this will end up being used
	    // with.
	    type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== undefined) {
	      return true;
	    }
	  }

	  return false;
	}

	function getWrappedName(outerType, innerType, wrapperName) {
	  var displayName = outerType.displayName;

	  if (displayName) {
	    return displayName;
	  }

	  var functionName = innerType.displayName || innerType.name || '';
	  return functionName !== '' ? wrapperName + "(" + functionName + ")" : wrapperName;
	} // Keep in sync with react-reconciler/getComponentNameFromFiber


	function getContextName(type) {
	  return type.displayName || 'Context';
	} // Note that the reconciler package should generally prefer to use getComponentNameFromFiber() instead.


	function getComponentNameFromType(type) {
	  if (type == null) {
	    // Host root, text node or just invalid type.
	    return null;
	  }

	  {
	    if (typeof type.tag === 'number') {
	      error('Received an unexpected object in getComponentNameFromType(). ' + 'This is likely a bug in React. Please file an issue.');
	    }
	  }

	  if (typeof type === 'function') {
	    return type.displayName || type.name || null;
	  }

	  if (typeof type === 'string') {
	    return type;
	  }

	  switch (type) {
	    case REACT_FRAGMENT_TYPE:
	      return 'Fragment';

	    case REACT_PORTAL_TYPE:
	      return 'Portal';

	    case REACT_PROFILER_TYPE:
	      return 'Profiler';

	    case REACT_STRICT_MODE_TYPE:
	      return 'StrictMode';

	    case REACT_SUSPENSE_TYPE:
	      return 'Suspense';

	    case REACT_SUSPENSE_LIST_TYPE:
	      return 'SuspenseList';

	  }

	  if (typeof type === 'object') {
	    switch (type.$$typeof) {
	      case REACT_CONTEXT_TYPE:
	        var context = type;
	        return getContextName(context) + '.Consumer';

	      case REACT_PROVIDER_TYPE:
	        var provider = type;
	        return getContextName(provider._context) + '.Provider';

	      case REACT_FORWARD_REF_TYPE:
	        return getWrappedName(type, type.render, 'ForwardRef');

	      case REACT_MEMO_TYPE:
	        var outerName = type.displayName || null;

	        if (outerName !== null) {
	          return outerName;
	        }

	        return getComponentNameFromType(type.type) || 'Memo';

	      case REACT_LAZY_TYPE:
	        {
	          var lazyComponent = type;
	          var payload = lazyComponent._payload;
	          var init = lazyComponent._init;

	          try {
	            return getComponentNameFromType(init(payload));
	          } catch (x) {
	            return null;
	          }
	        }

	      // eslint-disable-next-line no-fallthrough
	    }
	  }

	  return null;
	}

	var assign = Object.assign;

	// Helpers to patch console.logs to avoid logging during side-effect free
	// replaying on render function. This currently only patches the object
	// lazily which won't cover if the log function was extracted eagerly.
	// We could also eagerly patch the method.
	var disabledDepth = 0;
	var prevLog;
	var prevInfo;
	var prevWarn;
	var prevError;
	var prevGroup;
	var prevGroupCollapsed;
	var prevGroupEnd;

	function disabledLog() {}

	disabledLog.__reactDisabledLog = true;
	function disableLogs() {
	  {
	    if (disabledDepth === 0) {
	      /* eslint-disable react-internal/no-production-logging */
	      prevLog = console.log;
	      prevInfo = console.info;
	      prevWarn = console.warn;
	      prevError = console.error;
	      prevGroup = console.group;
	      prevGroupCollapsed = console.groupCollapsed;
	      prevGroupEnd = console.groupEnd; // https://github.com/facebook/react/issues/19099

	      var props = {
	        configurable: true,
	        enumerable: true,
	        value: disabledLog,
	        writable: true
	      }; // $FlowFixMe Flow thinks console is immutable.

	      Object.defineProperties(console, {
	        info: props,
	        log: props,
	        warn: props,
	        error: props,
	        group: props,
	        groupCollapsed: props,
	        groupEnd: props
	      });
	      /* eslint-enable react-internal/no-production-logging */
	    }

	    disabledDepth++;
	  }
	}
	function reenableLogs() {
	  {
	    disabledDepth--;

	    if (disabledDepth === 0) {
	      /* eslint-disable react-internal/no-production-logging */
	      var props = {
	        configurable: true,
	        enumerable: true,
	        writable: true
	      }; // $FlowFixMe Flow thinks console is immutable.

	      Object.defineProperties(console, {
	        log: assign({}, props, {
	          value: prevLog
	        }),
	        info: assign({}, props, {
	          value: prevInfo
	        }),
	        warn: assign({}, props, {
	          value: prevWarn
	        }),
	        error: assign({}, props, {
	          value: prevError
	        }),
	        group: assign({}, props, {
	          value: prevGroup
	        }),
	        groupCollapsed: assign({}, props, {
	          value: prevGroupCollapsed
	        }),
	        groupEnd: assign({}, props, {
	          value: prevGroupEnd
	        })
	      });
	      /* eslint-enable react-internal/no-production-logging */
	    }

	    if (disabledDepth < 0) {
	      error('disabledDepth fell below zero. ' + 'This is a bug in React. Please file an issue.');
	    }
	  }
	}

	var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
	var prefix;
	function describeBuiltInComponentFrame(name, source, ownerFn) {
	  {
	    if (prefix === undefined) {
	      // Extract the VM specific prefix used by each line.
	      try {
	        throw Error();
	      } catch (x) {
	        var match = x.stack.trim().match(/\n( *(at )?)/);
	        prefix = match && match[1] || '';
	      }
	    } // We use the prefix to ensure our stacks line up with native stack frames.


	    return '\n' + prefix + name;
	  }
	}
	var reentry = false;
	var componentFrameCache;

	{
	  var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;
	  componentFrameCache = new PossiblyWeakMap();
	}

	function describeNativeComponentFrame(fn, construct) {
	  // If something asked for a stack inside a fake render, it should get ignored.
	  if ( !fn || reentry) {
	    return '';
	  }

	  {
	    var frame = componentFrameCache.get(fn);

	    if (frame !== undefined) {
	      return frame;
	    }
	  }

	  var control;
	  reentry = true;
	  var previousPrepareStackTrace = Error.prepareStackTrace; // $FlowFixMe It does accept undefined.

	  Error.prepareStackTrace = undefined;
	  var previousDispatcher;

	  {
	    previousDispatcher = ReactCurrentDispatcher.current; // Set the dispatcher in DEV because this might be call in the render function
	    // for warnings.

	    ReactCurrentDispatcher.current = null;
	    disableLogs();
	  }

	  try {
	    // This should throw.
	    if (construct) {
	      // Something should be setting the props in the constructor.
	      var Fake = function () {
	        throw Error();
	      }; // $FlowFixMe


	      Object.defineProperty(Fake.prototype, 'props', {
	        set: function () {
	          // We use a throwing setter instead of frozen or non-writable props
	          // because that won't throw in a non-strict mode function.
	          throw Error();
	        }
	      });

	      if (typeof Reflect === 'object' && Reflect.construct) {
	        // We construct a different control for this case to include any extra
	        // frames added by the construct call.
	        try {
	          Reflect.construct(Fake, []);
	        } catch (x) {
	          control = x;
	        }

	        Reflect.construct(fn, [], Fake);
	      } else {
	        try {
	          Fake.call();
	        } catch (x) {
	          control = x;
	        }

	        fn.call(Fake.prototype);
	      }
	    } else {
	      try {
	        throw Error();
	      } catch (x) {
	        control = x;
	      }

	      fn();
	    }
	  } catch (sample) {
	    // This is inlined manually because closure doesn't do it for us.
	    if (sample && control && typeof sample.stack === 'string') {
	      // This extracts the first frame from the sample that isn't also in the control.
	      // Skipping one frame that we assume is the frame that calls the two.
	      var sampleLines = sample.stack.split('\n');
	      var controlLines = control.stack.split('\n');
	      var s = sampleLines.length - 1;
	      var c = controlLines.length - 1;

	      while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
	        // We expect at least one stack frame to be shared.
	        // Typically this will be the root most one. However, stack frames may be
	        // cut off due to maximum stack limits. In this case, one maybe cut off
	        // earlier than the other. We assume that the sample is longer or the same
	        // and there for cut off earlier. So we should find the root most frame in
	        // the sample somewhere in the control.
	        c--;
	      }

	      for (; s >= 1 && c >= 0; s--, c--) {
	        // Next we find the first one that isn't the same which should be the
	        // frame that called our sample function and the control.
	        if (sampleLines[s] !== controlLines[c]) {
	          // In V8, the first line is describing the message but other VMs don't.
	          // If we're about to return the first line, and the control is also on the same
	          // line, that's a pretty good indicator that our sample threw at same line as
	          // the control. I.e. before we entered the sample frame. So we ignore this result.
	          // This can happen if you passed a class to function component, or non-function.
	          if (s !== 1 || c !== 1) {
	            do {
	              s--;
	              c--; // We may still have similar intermediate frames from the construct call.
	              // The next one that isn't the same should be our match though.

	              if (c < 0 || sampleLines[s] !== controlLines[c]) {
	                // V8 adds a "new" prefix for native classes. Let's remove it to make it prettier.
	                var _frame = '\n' + sampleLines[s].replace(' at new ', ' at '); // If our component frame is labeled "<anonymous>"
	                // but we have a user-provided "displayName"
	                // splice it in to make the stack more readable.


	                if (fn.displayName && _frame.includes('<anonymous>')) {
	                  _frame = _frame.replace('<anonymous>', fn.displayName);
	                }

	                {
	                  if (typeof fn === 'function') {
	                    componentFrameCache.set(fn, _frame);
	                  }
	                } // Return the line we found.


	                return _frame;
	              }
	            } while (s >= 1 && c >= 0);
	          }

	          break;
	        }
	      }
	    }
	  } finally {
	    reentry = false;

	    {
	      ReactCurrentDispatcher.current = previousDispatcher;
	      reenableLogs();
	    }

	    Error.prepareStackTrace = previousPrepareStackTrace;
	  } // Fallback to just using the name if we couldn't make it throw.


	  var name = fn ? fn.displayName || fn.name : '';
	  var syntheticFrame = name ? describeBuiltInComponentFrame(name) : '';

	  {
	    if (typeof fn === 'function') {
	      componentFrameCache.set(fn, syntheticFrame);
	    }
	  }

	  return syntheticFrame;
	}
	function describeFunctionComponentFrame(fn, source, ownerFn) {
	  {
	    return describeNativeComponentFrame(fn, false);
	  }
	}

	function shouldConstruct(Component) {
	  var prototype = Component.prototype;
	  return !!(prototype && prototype.isReactComponent);
	}

	function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {

	  if (type == null) {
	    return '';
	  }

	  if (typeof type === 'function') {
	    {
	      return describeNativeComponentFrame(type, shouldConstruct(type));
	    }
	  }

	  if (typeof type === 'string') {
	    return describeBuiltInComponentFrame(type);
	  }

	  switch (type) {
	    case REACT_SUSPENSE_TYPE:
	      return describeBuiltInComponentFrame('Suspense');

	    case REACT_SUSPENSE_LIST_TYPE:
	      return describeBuiltInComponentFrame('SuspenseList');
	  }

	  if (typeof type === 'object') {
	    switch (type.$$typeof) {
	      case REACT_FORWARD_REF_TYPE:
	        return describeFunctionComponentFrame(type.render);

	      case REACT_MEMO_TYPE:
	        // Memo may contain any component type so we recursively resolve it.
	        return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);

	      case REACT_LAZY_TYPE:
	        {
	          var lazyComponent = type;
	          var payload = lazyComponent._payload;
	          var init = lazyComponent._init;

	          try {
	            // Lazy may contain any component type so we recursively resolve it.
	            return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
	          } catch (x) {}
	        }
	    }
	  }

	  return '';
	}

	var hasOwnProperty = Object.prototype.hasOwnProperty;

	var loggedTypeFailures = {};
	var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;

	function setCurrentlyValidatingElement(element) {
	  {
	    if (element) {
	      var owner = element._owner;
	      var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
	      ReactDebugCurrentFrame.setExtraStackFrame(stack);
	    } else {
	      ReactDebugCurrentFrame.setExtraStackFrame(null);
	    }
	  }
	}

	function checkPropTypes(typeSpecs, values, location, componentName, element) {
	  {
	    // $FlowFixMe This is okay but Flow doesn't know it.
	    var has = Function.call.bind(hasOwnProperty);

	    for (var typeSpecName in typeSpecs) {
	      if (has(typeSpecs, typeSpecName)) {
	        var error$1 = void 0; // Prop type validation may throw. In case they do, we don't want to
	        // fail the render phase where it didn't fail before. So we log it.
	        // After these have been cleaned up, we'll let them throw.

	        try {
	          // This is intentionally an invariant that gets caught. It's the same
	          // behavior as without this statement except with a better message.
	          if (typeof typeSpecs[typeSpecName] !== 'function') {
	            // eslint-disable-next-line react-internal/prod-error-codes
	            var err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.' + 'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.');
	            err.name = 'Invariant Violation';
	            throw err;
	          }

	          error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED');
	        } catch (ex) {
	          error$1 = ex;
	        }

	        if (error$1 && !(error$1 instanceof Error)) {
	          setCurrentlyValidatingElement(element);

	          error('%s: type specification of %s' + ' `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', location, typeSpecName, typeof error$1);

	          setCurrentlyValidatingElement(null);
	        }

	        if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
	          // Only monitor this failure once because there tends to be a lot of the
	          // same error.
	          loggedTypeFailures[error$1.message] = true;
	          setCurrentlyValidatingElement(element);

	          error('Failed %s type: %s', location, error$1.message);

	          setCurrentlyValidatingElement(null);
	        }
	      }
	    }
	  }
	}

	var isArrayImpl = Array.isArray; // eslint-disable-next-line no-redeclare

	function isArray(a) {
	  return isArrayImpl(a);
	}

	/*
	 * The `'' + value` pattern (used in in perf-sensitive code) throws for Symbol
	 * and Temporal.* types. See https://github.com/facebook/react/pull/22064.
	 *
	 * The functions in this module will throw an easier-to-understand,
	 * easier-to-debug exception with a clear errors message message explaining the
	 * problem. (Instead of a confusing exception thrown inside the implementation
	 * of the `value` object).
	 */
	// $FlowFixMe only called in DEV, so void return is not possible.
	function typeName(value) {
	  {
	    // toStringTag is needed for namespaced types like Temporal.Instant
	    var hasToStringTag = typeof Symbol === 'function' && Symbol.toStringTag;
	    var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || 'Object';
	    return type;
	  }
	} // $FlowFixMe only called in DEV, so void return is not possible.


	function willCoercionThrow(value) {
	  {
	    try {
	      testStringCoercion(value);
	      return false;
	    } catch (e) {
	      return true;
	    }
	  }
	}

	function testStringCoercion(value) {
	  // If you ended up here by following an exception call stack, here's what's
	  // happened: you supplied an object or symbol value to React (as a prop, key,
	  // DOM attribute, CSS property, string ref, etc.) and when React tried to
	  // coerce it to a string using `'' + value`, an exception was thrown.
	  //
	  // The most common types that will cause this exception are `Symbol` instances
	  // and Temporal objects like `Temporal.Instant`. But any object that has a
	  // `valueOf` or `[Symbol.toPrimitive]` method that throws will also cause this
	  // exception. (Library authors do this to prevent users from using built-in
	  // numeric operators like `+` or comparison operators like `>=` because custom
	  // methods are needed to perform accurate arithmetic or comparison.)
	  //
	  // To fix the problem, coerce this object or symbol value to a string before
	  // passing it to React. The most reliable way is usually `String(value)`.
	  //
	  // To find which value is throwing, check the browser or debugger console.
	  // Before this exception was thrown, there should be `console.error` output
	  // that shows the type (Symbol, Temporal.PlainDate, etc.) that caused the
	  // problem and how that type was used: key, atrribute, input value prop, etc.
	  // In most cases, this console output also shows the component and its
	  // ancestor components where the exception happened.
	  //
	  // eslint-disable-next-line react-internal/safe-string-coercion
	  return '' + value;
	}
	function checkKeyStringCoercion(value) {
	  {
	    if (willCoercionThrow(value)) {
	      error('The provided key is an unsupported type %s.' + ' This value must be coerced to a string before before using it here.', typeName(value));

	      return testStringCoercion(value); // throw (to help callers find troubleshooting comments)
	    }
	  }
	}

	var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
	var RESERVED_PROPS = {
	  key: true,
	  ref: true,
	  __self: true,
	  __source: true
	};
	var specialPropKeyWarningShown;
	var specialPropRefWarningShown;
	var didWarnAboutStringRefs;

	{
	  didWarnAboutStringRefs = {};
	}

	function hasValidRef(config) {
	  {
	    if (hasOwnProperty.call(config, 'ref')) {
	      var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;

	      if (getter && getter.isReactWarning) {
	        return false;
	      }
	    }
	  }

	  return config.ref !== undefined;
	}

	function hasValidKey(config) {
	  {
	    if (hasOwnProperty.call(config, 'key')) {
	      var getter = Object.getOwnPropertyDescriptor(config, 'key').get;

	      if (getter && getter.isReactWarning) {
	        return false;
	      }
	    }
	  }

	  return config.key !== undefined;
	}

	function warnIfStringRefCannotBeAutoConverted(config, self) {
	  {
	    if (typeof config.ref === 'string' && ReactCurrentOwner.current && self && ReactCurrentOwner.current.stateNode !== self) {
	      var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);

	      if (!didWarnAboutStringRefs[componentName]) {
	        error('Component "%s" contains the string ref "%s". ' + 'Support for string refs will be removed in a future major release. ' + 'This case cannot be automatically converted to an arrow function. ' + 'We ask you to manually fix this case by using useRef() or createRef() instead. ' + 'Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-string-ref', getComponentNameFromType(ReactCurrentOwner.current.type), config.ref);

	        didWarnAboutStringRefs[componentName] = true;
	      }
	    }
	  }
	}

	function defineKeyPropWarningGetter(props, displayName) {
	  {
	    var warnAboutAccessingKey = function () {
	      if (!specialPropKeyWarningShown) {
	        specialPropKeyWarningShown = true;

	        error('%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://reactjs.org/link/special-props)', displayName);
	      }
	    };

	    warnAboutAccessingKey.isReactWarning = true;
	    Object.defineProperty(props, 'key', {
	      get: warnAboutAccessingKey,
	      configurable: true
	    });
	  }
	}

	function defineRefPropWarningGetter(props, displayName) {
	  {
	    var warnAboutAccessingRef = function () {
	      if (!specialPropRefWarningShown) {
	        specialPropRefWarningShown = true;

	        error('%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://reactjs.org/link/special-props)', displayName);
	      }
	    };

	    warnAboutAccessingRef.isReactWarning = true;
	    Object.defineProperty(props, 'ref', {
	      get: warnAboutAccessingRef,
	      configurable: true
	    });
	  }
	}
	/**
	 * Factory method to create a new React element. This no longer adheres to
	 * the class pattern, so do not use new to call it. Also, instanceof check
	 * will not work. Instead test $$typeof field against Symbol.for('react.element') to check
	 * if something is a React Element.
	 *
	 * @param {*} type
	 * @param {*} props
	 * @param {*} key
	 * @param {string|object} ref
	 * @param {*} owner
	 * @param {*} self A *temporary* helper to detect places where `this` is
	 * different from the `owner` when React.createElement is called, so that we
	 * can warn. We want to get rid of owner and replace string `ref`s with arrow
	 * functions, and as long as `this` and owner are the same, there will be no
	 * change in behavior.
	 * @param {*} source An annotation object (added by a transpiler or otherwise)
	 * indicating filename, line number, and/or other information.
	 * @internal
	 */


	var ReactElement = function (type, key, ref, self, source, owner, props) {
	  var element = {
	    // This tag allows us to uniquely identify this as a React Element
	    $$typeof: REACT_ELEMENT_TYPE,
	    // Built-in properties that belong on the element
	    type: type,
	    key: key,
	    ref: ref,
	    props: props,
	    // Record the component responsible for creating this element.
	    _owner: owner
	  };

	  {
	    // The validation flag is currently mutative. We put it on
	    // an external backing store so that we can freeze the whole object.
	    // This can be replaced with a WeakMap once they are implemented in
	    // commonly used development environments.
	    element._store = {}; // To make comparing ReactElements easier for testing purposes, we make
	    // the validation flag non-enumerable (where possible, which should
	    // include every environment we run tests in), so the test framework
	    // ignores it.

	    Object.defineProperty(element._store, 'validated', {
	      configurable: false,
	      enumerable: false,
	      writable: true,
	      value: false
	    }); // self and source are DEV only properties.

	    Object.defineProperty(element, '_self', {
	      configurable: false,
	      enumerable: false,
	      writable: false,
	      value: self
	    }); // Two elements created in two different places should be considered
	    // equal for testing purposes and therefore we hide it from enumeration.

	    Object.defineProperty(element, '_source', {
	      configurable: false,
	      enumerable: false,
	      writable: false,
	      value: source
	    });

	    if (Object.freeze) {
	      Object.freeze(element.props);
	      Object.freeze(element);
	    }
	  }

	  return element;
	};
	/**
	 * https://github.com/reactjs/rfcs/pull/107
	 * @param {*} type
	 * @param {object} props
	 * @param {string} key
	 */

	function jsxDEV(type, config, maybeKey, source, self) {
	  {
	    var propName; // Reserved names are extracted

	    var props = {};
	    var key = null;
	    var ref = null; // Currently, key can be spread in as a prop. This causes a potential
	    // issue if key is also explicitly declared (ie. <div {...props} key="Hi" />
	    // or <div key="Hi" {...props} /> ). We want to deprecate key spread,
	    // but as an intermediary step, we will use jsxDEV for everything except
	    // <div {...props} key="Hi" />, because we aren't currently able to tell if
	    // key is explicitly declared to be undefined or not.

	    if (maybeKey !== undefined) {
	      {
	        checkKeyStringCoercion(maybeKey);
	      }

	      key = '' + maybeKey;
	    }

	    if (hasValidKey(config)) {
	      {
	        checkKeyStringCoercion(config.key);
	      }

	      key = '' + config.key;
	    }

	    if (hasValidRef(config)) {
	      ref = config.ref;
	      warnIfStringRefCannotBeAutoConverted(config, self);
	    } // Remaining properties are added to a new props object


	    for (propName in config) {
	      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
	        props[propName] = config[propName];
	      }
	    } // Resolve default props


	    if (type && type.defaultProps) {
	      var defaultProps = type.defaultProps;

	      for (propName in defaultProps) {
	        if (props[propName] === undefined) {
	          props[propName] = defaultProps[propName];
	        }
	      }
	    }

	    if (key || ref) {
	      var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;

	      if (key) {
	        defineKeyPropWarningGetter(props, displayName);
	      }

	      if (ref) {
	        defineRefPropWarningGetter(props, displayName);
	      }
	    }

	    return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
	  }
	}

	var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
	var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;

	function setCurrentlyValidatingElement$1(element) {
	  {
	    if (element) {
	      var owner = element._owner;
	      var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
	      ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
	    } else {
	      ReactDebugCurrentFrame$1.setExtraStackFrame(null);
	    }
	  }
	}

	var propTypesMisspellWarningShown;

	{
	  propTypesMisspellWarningShown = false;
	}
	/**
	 * Verifies the object is a ReactElement.
	 * See https://reactjs.org/docs/react-api.html#isvalidelement
	 * @param {?object} object
	 * @return {boolean} True if `object` is a ReactElement.
	 * @final
	 */


	function isValidElement(object) {
	  {
	    return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
	  }
	}

	function getDeclarationErrorAddendum() {
	  {
	    if (ReactCurrentOwner$1.current) {
	      var name = getComponentNameFromType(ReactCurrentOwner$1.current.type);

	      if (name) {
	        return '\n\nCheck the render method of `' + name + '`.';
	      }
	    }

	    return '';
	  }
	}

	function getSourceInfoErrorAddendum(source) {
	  {
	    if (source !== undefined) {
	      var fileName = source.fileName.replace(/^.*[\\\/]/, '');
	      var lineNumber = source.lineNumber;
	      return '\n\nCheck your code at ' + fileName + ':' + lineNumber + '.';
	    }

	    return '';
	  }
	}
	/**
	 * Warn if there's no key explicitly set on dynamic arrays of children or
	 * object keys are not valid. This allows us to keep track of children between
	 * updates.
	 */


	var ownerHasKeyUseWarning = {};

	function getCurrentComponentErrorInfo(parentType) {
	  {
	    var info = getDeclarationErrorAddendum();

	    if (!info) {
	      var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;

	      if (parentName) {
	        info = "\n\nCheck the top-level render call using <" + parentName + ">.";
	      }
	    }

	    return info;
	  }
	}
	/**
	 * Warn if the element doesn't have an explicit key assigned to it.
	 * This element is in an array. The array could grow and shrink or be
	 * reordered. All children that haven't already been validated are required to
	 * have a "key" property assigned to it. Error statuses are cached so a warning
	 * will only be shown once.
	 *
	 * @internal
	 * @param {ReactElement} element Element that requires a key.
	 * @param {*} parentType element's parent's type.
	 */


	function validateExplicitKey(element, parentType) {
	  {
	    if (!element._store || element._store.validated || element.key != null) {
	      return;
	    }

	    element._store.validated = true;
	    var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);

	    if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
	      return;
	    }

	    ownerHasKeyUseWarning[currentComponentErrorInfo] = true; // Usually the current owner is the offender, but if it accepts children as a
	    // property, it may be the creator of the child that's responsible for
	    // assigning it a key.

	    var childOwner = '';

	    if (element && element._owner && element._owner !== ReactCurrentOwner$1.current) {
	      // Give the component that originally created this child.
	      childOwner = " It was passed a child from " + getComponentNameFromType(element._owner.type) + ".";
	    }

	    setCurrentlyValidatingElement$1(element);

	    error('Each child in a list should have a unique "key" prop.' + '%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);

	    setCurrentlyValidatingElement$1(null);
	  }
	}
	/**
	 * Ensure that every element either is passed in a static location, in an
	 * array with an explicit keys property defined, or in an object literal
	 * with valid key property.
	 *
	 * @internal
	 * @param {ReactNode} node Statically passed child of any type.
	 * @param {*} parentType node's parent's type.
	 */


	function validateChildKeys(node, parentType) {
	  {
	    if (typeof node !== 'object') {
	      return;
	    }

	    if (isArray(node)) {
	      for (var i = 0; i < node.length; i++) {
	        var child = node[i];

	        if (isValidElement(child)) {
	          validateExplicitKey(child, parentType);
	        }
	      }
	    } else if (isValidElement(node)) {
	      // This element was passed in a valid location.
	      if (node._store) {
	        node._store.validated = true;
	      }
	    } else if (node) {
	      var iteratorFn = getIteratorFn(node);

	      if (typeof iteratorFn === 'function') {
	        // Entry iterators used to provide implicit keys,
	        // but now we print a separate warning for them later.
	        if (iteratorFn !== node.entries) {
	          var iterator = iteratorFn.call(node);
	          var step;

	          while (!(step = iterator.next()).done) {
	            if (isValidElement(step.value)) {
	              validateExplicitKey(step.value, parentType);
	            }
	          }
	        }
	      }
	    }
	  }
	}
	/**
	 * Given an element, validate that its props follow the propTypes definition,
	 * provided by the type.
	 *
	 * @param {ReactElement} element
	 */


	function validatePropTypes(element) {
	  {
	    var type = element.type;

	    if (type === null || type === undefined || typeof type === 'string') {
	      return;
	    }

	    var propTypes;

	    if (typeof type === 'function') {
	      propTypes = type.propTypes;
	    } else if (typeof type === 'object' && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.
	    // Inner props are checked in the reconciler.
	    type.$$typeof === REACT_MEMO_TYPE)) {
	      propTypes = type.propTypes;
	    } else {
	      return;
	    }

	    if (propTypes) {
	      // Intentionally inside to avoid triggering lazy initializers:
	      var name = getComponentNameFromType(type);
	      checkPropTypes(propTypes, element.props, 'prop', name, element);
	    } else if (type.PropTypes !== undefined && !propTypesMisspellWarningShown) {
	      propTypesMisspellWarningShown = true; // Intentionally inside to avoid triggering lazy initializers:

	      var _name = getComponentNameFromType(type);

	      error('Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?', _name || 'Unknown');
	    }

	    if (typeof type.getDefaultProps === 'function' && !type.getDefaultProps.isReactClassApproved) {
	      error('getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.');
	    }
	  }
	}
	/**
	 * Given a fragment, validate that it can only be provided with fragment props
	 * @param {ReactElement} fragment
	 */


	function validateFragmentProps(fragment) {
	  {
	    var keys = Object.keys(fragment.props);

	    for (var i = 0; i < keys.length; i++) {
	      var key = keys[i];

	      if (key !== 'children' && key !== 'key') {
	        setCurrentlyValidatingElement$1(fragment);

	        error('Invalid prop `%s` supplied to `React.Fragment`. ' + 'React.Fragment can only have `key` and `children` props.', key);

	        setCurrentlyValidatingElement$1(null);
	        break;
	      }
	    }

	    if (fragment.ref !== null) {
	      setCurrentlyValidatingElement$1(fragment);

	      error('Invalid attribute `ref` supplied to `React.Fragment`.');

	      setCurrentlyValidatingElement$1(null);
	    }
	  }
	}

	var didWarnAboutKeySpread = {};
	function jsxWithValidation(type, props, key, isStaticChildren, source, self) {
	  {
	    var validType = isValidElementType(type); // We warn in this case but don't throw. We expect the element creation to
	    // succeed and there will likely be errors in render.

	    if (!validType) {
	      var info = '';

	      if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {
	        info += ' You likely forgot to export your component from the file ' + "it's defined in, or you might have mixed up default and named imports.";
	      }

	      var sourceInfo = getSourceInfoErrorAddendum(source);

	      if (sourceInfo) {
	        info += sourceInfo;
	      } else {
	        info += getDeclarationErrorAddendum();
	      }

	      var typeString;

	      if (type === null) {
	        typeString = 'null';
	      } else if (isArray(type)) {
	        typeString = 'array';
	      } else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {
	        typeString = "<" + (getComponentNameFromType(type.type) || 'Unknown') + " />";
	        info = ' Did you accidentally export a JSX literal instead of a component?';
	      } else {
	        typeString = typeof type;
	      }

	      error('React.jsx: type is invalid -- expected a string (for ' + 'built-in components) or a class/function (for composite ' + 'components) but got: %s.%s', typeString, info);
	    }

	    var element = jsxDEV(type, props, key, source, self); // The result can be nullish if a mock or a custom function is used.
	    // TODO: Drop this when these are no longer allowed as the type argument.

	    if (element == null) {
	      return element;
	    } // Skip key warning if the type isn't valid since our key validation logic
	    // doesn't expect a non-string/function type and can throw confusing errors.
	    // We don't want exception behavior to differ between dev and prod.
	    // (Rendering will throw with a helpful message and as soon as the type is
	    // fixed, the key warnings will appear.)


	    if (validType) {
	      var children = props.children;

	      if (children !== undefined) {
	        if (isStaticChildren) {
	          if (isArray(children)) {
	            for (var i = 0; i < children.length; i++) {
	              validateChildKeys(children[i], type);
	            }

	            if (Object.freeze) {
	              Object.freeze(children);
	            }
	          } else {
	            error('React.jsx: Static children should always be an array. ' + 'You are likely explicitly calling React.jsxs or React.jsxDEV. ' + 'Use the Babel transform instead.');
	          }
	        } else {
	          validateChildKeys(children, type);
	        }
	      }
	    }

	    {
	      if (hasOwnProperty.call(props, 'key')) {
	        var componentName = getComponentNameFromType(type);
	        var keys = Object.keys(props).filter(function (k) {
	          return k !== 'key';
	        });
	        var beforeExample = keys.length > 0 ? '{key: someKey, ' + keys.join(': ..., ') + ': ...}' : '{key: someKey}';

	        if (!didWarnAboutKeySpread[componentName + beforeExample]) {
	          var afterExample = keys.length > 0 ? '{' + keys.join(': ..., ') + ': ...}' : '{}';

	          error('A props object containing a "key" prop is being spread into JSX:\n' + '  let props = %s;\n' + '  <%s {...props} />\n' + 'React keys must be passed directly to JSX without using spread:\n' + '  let props = %s;\n' + '  <%s key={someKey} {...props} />', beforeExample, componentName, afterExample, componentName);

	          didWarnAboutKeySpread[componentName + beforeExample] = true;
	        }
	      }
	    }

	    if (type === REACT_FRAGMENT_TYPE) {
	      validateFragmentProps(element);
	    } else {
	      validatePropTypes(element);
	    }

	    return element;
	  }
	} // These two functions exist to still get child warnings in dev
	// even with the prod transform. This means that jsxDEV is purely
	// opt-in behavior for better messages but that we won't stop
	// giving you warnings if you use production apis.

	function jsxWithValidationStatic(type, props, key) {
	  {
	    return jsxWithValidation(type, props, key, true);
	  }
	}
	function jsxWithValidationDynamic(type, props, key) {
	  {
	    return jsxWithValidation(type, props, key, false);
	  }
	}

	var jsx =  jsxWithValidationDynamic ; // we may want to special case jsxs internally to take advantage of static children.
	// for now we can ship identical prod functions

	var jsxs =  jsxWithValidationStatic ;

	reactJsxRuntime_development.Fragment = REACT_FRAGMENT_TYPE;
	reactJsxRuntime_development.jsx = jsx;
	reactJsxRuntime_development.jsxs = jsxs;
	  })();
	}
	return reactJsxRuntime_development;
}

if (process.env.NODE_ENV === 'production') {
  jsxRuntime.exports = requireReactJsxRuntime_production_min();
} else {
  jsxRuntime.exports = requireReactJsxRuntime_development();
}

var jsxRuntimeExports = jsxRuntime.exports;

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 
const $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c = typeof document !== 'undefined' ? (React).useLayoutEffect : ()=>{};

/*
 * Copyright 2023 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 

function $8ae05eaa5c114e9c$export$7f54fc3180508a52(fn) {
    const ref = (reactExports.useRef)(null);
    ($f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(()=>{
        ref.current = fn;
    }, [
        fn
    ]);
    // @ts-ignore
    return (reactExports.useCallback)((...args)=>{
        const f = ref.current;
        return f === null || f === void 0 ? void 0 : f(...args);
    }, []);
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 

function $1dbecbe27a04f9af$export$14d238f342723f25(defaultValue) {
    let [value, setValue] = (reactExports.useState)(defaultValue);
    let effect = (reactExports.useRef)(null);
    // Store the function in a ref so we can always access the current version
    // which has the proper `value` in scope.
    let nextRef = ($8ae05eaa5c114e9c$export$7f54fc3180508a52)(()=>{
        if (!effect.current) return;
        // Run the generator to the next yield.
        let newValue = effect.current.next();
        // If the generator is done, reset the effect.
        if (newValue.done) {
            effect.current = null;
            return;
        }
        // If the value is the same as the current value,
        // then continue to the next yield. Otherwise,
        // set the value in state and wait for the next layout effect.
        if (value === newValue.value) nextRef();
        else setValue(newValue.value);
    });
    ($f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(()=>{
        // If there is an effect currently running, continue to the next yield.
        if (effect.current) nextRef();
    });
    let queue = ($8ae05eaa5c114e9c$export$7f54fc3180508a52)((fn)=>{
        effect.current = fn(value);
        nextRef();
    });
    return [
        value,
        queue
    ];
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ // We must avoid a circular dependency with @react-aria/utils, and this useLayoutEffect is
// guarded by a check that it only runs on the client side.
// eslint-disable-next-line rulesdir/useLayoutEffectRule

// Default context value to use in case there is no SSRProvider. This is fine for
// client-only apps. In order to support multiple copies of React Aria potentially
// being on the page at once, the prefix is set to a random number. SSRProvider
// will reset this to zero for consistency between server and client, so in the
// SSR case multiple copies of React Aria is not supported.
const $b5e257d569688ac6$var$defaultContext = {
    prefix: String(Math.round(Math.random() * 10000000000)),
    current: 0
};
const $b5e257d569688ac6$var$SSRContext = /*#__PURE__*/ (React).createContext($b5e257d569688ac6$var$defaultContext);
const $b5e257d569688ac6$var$IsSSRContext = /*#__PURE__*/ (React).createContext(false);
let $b5e257d569688ac6$var$canUseDOM = Boolean(typeof window !== 'undefined' && window.document && window.document.createElement);
let $b5e257d569688ac6$var$componentIds = new WeakMap();
function $b5e257d569688ac6$var$useCounter(isDisabled = false) {
    let ctx = (reactExports.useContext)($b5e257d569688ac6$var$SSRContext);
    let ref = (reactExports.useRef)(null);
    // eslint-disable-next-line rulesdir/pure-render
    if (ref.current === null && !isDisabled) {
        var _React___SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED_ReactCurrentOwner, _React___SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
        // In strict mode, React renders components twice, and the ref will be reset to null on the second render.
        // This means our id counter will be incremented twice instead of once. This is a problem because on the
        // server, components are only rendered once and so ids generated on the server won't match the client.
        // In React 18, useId was introduced to solve this, but it is not available in older versions. So to solve this
        // we need to use some React internals to access the underlying Fiber instance, which is stable between renders.
        // This is exposed as ReactCurrentOwner in development, which is all we need since StrictMode only runs in development.
        // To ensure that we only increment the global counter once, we store the starting id for this component in
        // a weak map associated with the Fiber. On the second render, we reset the global counter to this value.
        // Since React runs the second render immediately after the first, this is safe.
        // @ts-ignore
        let currentOwner = (_React___SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = (React).__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED) === null || _React___SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED === void 0 ? void 0 : (_React___SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED_ReactCurrentOwner = _React___SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner) === null || _React___SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED_ReactCurrentOwner === void 0 ? void 0 : _React___SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED_ReactCurrentOwner.current;
        if (currentOwner) {
            let prevComponentValue = $b5e257d569688ac6$var$componentIds.get(currentOwner);
            if (prevComponentValue == null) // On the first render, and first call to useId, store the id and state in our weak map.
            $b5e257d569688ac6$var$componentIds.set(currentOwner, {
                id: ctx.current,
                state: currentOwner.memoizedState
            });
            else if (currentOwner.memoizedState !== prevComponentValue.state) {
                // On the second render, the memoizedState gets reset by React.
                // Reset the counter, and remove from the weak map so we don't
                // do this for subsequent useId calls.
                ctx.current = prevComponentValue.id;
                $b5e257d569688ac6$var$componentIds.delete(currentOwner);
            }
        }
        // eslint-disable-next-line rulesdir/pure-render
        ref.current = ++ctx.current;
    }
    // eslint-disable-next-line rulesdir/pure-render
    return ref.current;
}
function $b5e257d569688ac6$var$useLegacySSRSafeId(defaultId) {
    let ctx = (reactExports.useContext)($b5e257d569688ac6$var$SSRContext);
    // If we are rendering in a non-DOM environment, and there's no SSRProvider,
    // provide a warning to hint to the developer to add one.
    if (ctx === $b5e257d569688ac6$var$defaultContext && !$b5e257d569688ac6$var$canUseDOM) console.warn('When server rendering, you must wrap your application in an <SSRProvider> to ensure consistent ids are generated between the client and server.');
    let counter = $b5e257d569688ac6$var$useCounter(!!defaultId);
    let prefix = ctx === $b5e257d569688ac6$var$defaultContext && process.env.NODE_ENV === 'test' ? 'react-aria' : `react-aria${ctx.prefix}`;
    return defaultId || `${prefix}-${counter}`;
}
function $b5e257d569688ac6$var$useModernSSRSafeId(defaultId) {
    // @ts-ignore
    let id = (React).useId();
    let [didSSR] = (reactExports.useState)($b5e257d569688ac6$export$535bd6ca7f90a273());
    let prefix = didSSR || process.env.NODE_ENV === 'test' ? 'react-aria' : `react-aria${$b5e257d569688ac6$var$defaultContext.prefix}`;
    return defaultId || `${prefix}-${id}`;
}
const $b5e257d569688ac6$export$619500959fc48b26 = typeof (React)['useId'] === 'function' ? $b5e257d569688ac6$var$useModernSSRSafeId : $b5e257d569688ac6$var$useLegacySSRSafeId;
function $b5e257d569688ac6$var$getSnapshot() {
    return false;
}
function $b5e257d569688ac6$var$getServerSnapshot() {
    return true;
}
// eslint-disable-next-line @typescript-eslint/no-unused-vars
function $b5e257d569688ac6$var$subscribe(onStoreChange) {
    // noop
    return ()=>{};
}
function $b5e257d569688ac6$export$535bd6ca7f90a273() {
    // In React 18, we can use useSyncExternalStore to detect if we're server rendering or hydrating.
    if (typeof (React)['useSyncExternalStore'] === 'function') return (React)['useSyncExternalStore']($b5e257d569688ac6$var$subscribe, $b5e257d569688ac6$var$getSnapshot, $b5e257d569688ac6$var$getServerSnapshot);
    // eslint-disable-next-line react-hooks/rules-of-hooks
    return (reactExports.useContext)($b5e257d569688ac6$var$IsSSRContext);
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 



// copied from SSRProvider.tsx to reduce exports, if needed again, consider sharing
let $bdb11010cef70236$var$canUseDOM = Boolean(typeof window !== 'undefined' && window.document && window.document.createElement);
let $bdb11010cef70236$var$idsUpdaterMap = new Map();
function $bdb11010cef70236$export$f680877a34711e37(defaultId) {
    let [value, setValue] = (reactExports.useState)(defaultId);
    let nextId = (reactExports.useRef)(null);
    let res = ($b5e257d569688ac6$export$619500959fc48b26)(value);
    let updateValue = (reactExports.useCallback)((val)=>{
        nextId.current = val;
    }, []);
    if ($bdb11010cef70236$var$canUseDOM) $bdb11010cef70236$var$idsUpdaterMap.set(res, updateValue);
    ($f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(()=>{
        let r = res;
        return ()=>{
            $bdb11010cef70236$var$idsUpdaterMap.delete(r);
        };
    }, [
        res
    ]);
    // This cannot cause an infinite loop because the ref is updated first.
    // eslint-disable-next-line
    (reactExports.useEffect)(()=>{
        let newId = nextId.current;
        if (newId) {
            nextId.current = null;
            setValue(newId);
        }
    });
    return res;
}
function $bdb11010cef70236$export$cd8c9cb68f842629(idA, idB) {
    if (idA === idB) return idA;
    let setIdA = $bdb11010cef70236$var$idsUpdaterMap.get(idA);
    if (setIdA) {
        setIdA(idB);
        return idB;
    }
    let setIdB = $bdb11010cef70236$var$idsUpdaterMap.get(idB);
    if (setIdB) {
        setIdB(idA);
        return idA;
    }
    return idB;
}
function $bdb11010cef70236$export$b4cc09c592e8fdb8(depArray = []) {
    let id = $bdb11010cef70236$export$f680877a34711e37();
    let [resolvedId, setResolvedId] = ($1dbecbe27a04f9af$export$14d238f342723f25)(id);
    let updateId = (reactExports.useCallback)(()=>{
        setResolvedId(function*() {
            yield id;
            yield document.getElementById(id) ? id : undefined;
        });
    }, [
        id,
        setResolvedId
    ]);
    ($f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(updateId, [
        id,
        updateId,
        ...depArray
    ]);
    return resolvedId;
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ /**
 * Calls all functions in the order they were chained with the same arguments.
 */ function $ff5963eb1fccf552$export$e08e3b67e392101e(...callbacks) {
    return (...args)=>{
        for (let callback of callbacks)if (typeof callback === 'function') callback(...args);
    };
}

const $431fbd86ca7dc216$export$b204af158042fbac = (el)=>{
    var _el_ownerDocument;
    return (_el_ownerDocument = el === null || el === void 0 ? void 0 : el.ownerDocument) !== null && _el_ownerDocument !== void 0 ? _el_ownerDocument : document;
};
const $431fbd86ca7dc216$export$f21a1ffae260145a = (el)=>{
    if (el && 'window' in el && el.window === el) return el;
    const doc = $431fbd86ca7dc216$export$b204af158042fbac(el);
    return doc.defaultView || window;
};

function r(e){var t,f,n="";if("string"==typeof e||"number"==typeof e)n+=e;else if("object"==typeof e)if(Array.isArray(e)){var o=e.length;for(t=0;t<o;t++)e[t]&&(f=r(e[t]))&&(n&&(n+=" "),n+=f);}else for(f in e)e[f]&&(n&&(n+=" "),n+=f);return n}function clsx(){for(var e,t,f=0,n="",o=arguments.length;f<o;f++)(e=arguments[f])&&(t=r(e))&&(n&&(n+=" "),n+=t);return n}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 


function $3ef42575df84b30b$export$9d1611c77c2fe928(...args) {
    // Start with a base clone of the first argument. This is a lot faster than starting
    // with an empty object and adding properties as we go.
    let result = {
        ...args[0]
    };
    for(let i = 1; i < args.length; i++){
        let props = args[i];
        for(let key in props){
            let a = result[key];
            let b = props[key];
            // Chain events
            if (typeof a === 'function' && typeof b === 'function' && // This is a lot faster than a regex.
            key[0] === 'o' && key[1] === 'n' && key.charCodeAt(2) >= /* 'A' */ 65 && key.charCodeAt(2) <= /* 'Z' */ 90) result[key] = ($ff5963eb1fccf552$export$e08e3b67e392101e)(a, b);
            else if ((key === 'className' || key === 'UNSAFE_className') && typeof a === 'string' && typeof b === 'string') result[key] = (clsx)(a, b);
            else if (key === 'id' && a && b) result.id = ($bdb11010cef70236$export$cd8c9cb68f842629)(a, b);
            else result[key] = b !== undefined ? b : a;
        }
    }
    return result;
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ function $5dc95899b306f630$export$c9058316764c140e(...refs) {
    if (refs.length === 1 && refs[0]) return refs[0];
    return (value)=>{
        for (let ref of refs){
            if (typeof ref === 'function') ref(value);
            else if (ref != null) ref.current = value;
        }
    };
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ const $65484d02dcb7eb3e$var$DOMPropNames = new Set([
    'id'
]);
const $65484d02dcb7eb3e$var$labelablePropNames = new Set([
    'aria-label',
    'aria-labelledby',
    'aria-describedby',
    'aria-details'
]);
// See LinkDOMProps in dom.d.ts.
const $65484d02dcb7eb3e$var$linkPropNames = new Set([
    'href',
    'hrefLang',
    'target',
    'rel',
    'download',
    'ping',
    'referrerPolicy'
]);
const $65484d02dcb7eb3e$var$propRe = /^(data-.*)$/;
function $65484d02dcb7eb3e$export$457c3d6518dd4c6f(props, opts = {}) {
    let { labelable: labelable, isLink: isLink, propNames: propNames } = opts;
    let filteredProps = {};
    for(const prop in props)if (Object.prototype.hasOwnProperty.call(props, prop) && ($65484d02dcb7eb3e$var$DOMPropNames.has(prop) || labelable && $65484d02dcb7eb3e$var$labelablePropNames.has(prop) || isLink && $65484d02dcb7eb3e$var$linkPropNames.has(prop) || (propNames === null || propNames === void 0 ? void 0 : propNames.has(prop)) || $65484d02dcb7eb3e$var$propRe.test(prop))) filteredProps[prop] = props[prop];
    return filteredProps;
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ function $7215afc6de606d6b$export$de79e2c695e052f3(element) {
    if ($7215afc6de606d6b$var$supportsPreventScroll()) element.focus({
        preventScroll: true
    });
    else {
        let scrollableElements = $7215afc6de606d6b$var$getScrollableElements(element);
        element.focus();
        $7215afc6de606d6b$var$restoreScrollPosition(scrollableElements);
    }
}
let $7215afc6de606d6b$var$supportsPreventScrollCached = null;
function $7215afc6de606d6b$var$supportsPreventScroll() {
    if ($7215afc6de606d6b$var$supportsPreventScrollCached == null) {
        $7215afc6de606d6b$var$supportsPreventScrollCached = false;
        try {
            let focusElem = document.createElement('div');
            focusElem.focus({
                get preventScroll () {
                    $7215afc6de606d6b$var$supportsPreventScrollCached = true;
                    return true;
                }
            });
        } catch (e) {
        // Ignore
        }
    }
    return $7215afc6de606d6b$var$supportsPreventScrollCached;
}
function $7215afc6de606d6b$var$getScrollableElements(element) {
    let parent = element.parentNode;
    let scrollableElements = [];
    let rootScrollingElement = document.scrollingElement || document.documentElement;
    while(parent instanceof HTMLElement && parent !== rootScrollingElement){
        if (parent.offsetHeight < parent.scrollHeight || parent.offsetWidth < parent.scrollWidth) scrollableElements.push({
            element: parent,
            scrollTop: parent.scrollTop,
            scrollLeft: parent.scrollLeft
        });
        parent = parent.parentNode;
    }
    if (rootScrollingElement instanceof HTMLElement) scrollableElements.push({
        element: rootScrollingElement,
        scrollTop: rootScrollingElement.scrollTop,
        scrollLeft: rootScrollingElement.scrollLeft
    });
    return scrollableElements;
}
function $7215afc6de606d6b$var$restoreScrollPosition(scrollableElements) {
    for (let { element: element, scrollTop: scrollTop, scrollLeft: scrollLeft } of scrollableElements){
        element.scrollTop = scrollTop;
        element.scrollLeft = scrollLeft;
    }
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ function $c87311424ea30a05$var$testUserAgent(re) {
    var _window_navigator_userAgentData;
    if (typeof window === 'undefined' || window.navigator == null) return false;
    return ((_window_navigator_userAgentData = window.navigator['userAgentData']) === null || _window_navigator_userAgentData === void 0 ? void 0 : _window_navigator_userAgentData.brands.some((brand)=>re.test(brand.brand))) || re.test(window.navigator.userAgent);
}
function $c87311424ea30a05$var$testPlatform(re) {
    var _window_navigator_userAgentData;
    return typeof window !== 'undefined' && window.navigator != null ? re.test(((_window_navigator_userAgentData = window.navigator['userAgentData']) === null || _window_navigator_userAgentData === void 0 ? void 0 : _window_navigator_userAgentData.platform) || window.navigator.platform) : false;
}
function $c87311424ea30a05$var$cached(fn) {
    let res = null;
    return ()=>{
        if (res == null) res = fn();
        return res;
    };
}
const $c87311424ea30a05$export$9ac100e40613ea10 = $c87311424ea30a05$var$cached(function() {
    return $c87311424ea30a05$var$testPlatform(/^Mac/i);
});
const $c87311424ea30a05$export$186c6964ca17d99 = $c87311424ea30a05$var$cached(function() {
    return $c87311424ea30a05$var$testPlatform(/^iPhone/i);
});
const $c87311424ea30a05$export$7bef049ce92e4224 = $c87311424ea30a05$var$cached(function() {
    return $c87311424ea30a05$var$testPlatform(/^iPad/i) || // iPadOS 13 lies and says it's a Mac, but we can distinguish by detecting touch support.
    $c87311424ea30a05$export$9ac100e40613ea10() && navigator.maxTouchPoints > 1;
});
const $c87311424ea30a05$export$fedb369cb70207f1 = $c87311424ea30a05$var$cached(function() {
    return $c87311424ea30a05$export$186c6964ca17d99() || $c87311424ea30a05$export$7bef049ce92e4224();
});
const $c87311424ea30a05$export$e1865c3bedcd822b = $c87311424ea30a05$var$cached(function() {
    return $c87311424ea30a05$export$9ac100e40613ea10() || $c87311424ea30a05$export$fedb369cb70207f1();
});
const $c87311424ea30a05$export$78551043582a6a98 = $c87311424ea30a05$var$cached(function() {
    return $c87311424ea30a05$var$testUserAgent(/AppleWebKit/i) && !$c87311424ea30a05$export$6446a186d09e379e();
});
const $c87311424ea30a05$export$6446a186d09e379e = $c87311424ea30a05$var$cached(function() {
    return $c87311424ea30a05$var$testUserAgent(/Chrome/i);
});
const $c87311424ea30a05$export$a11b0059900ceec8 = $c87311424ea30a05$var$cached(function() {
    return $c87311424ea30a05$var$testUserAgent(/Android/i);
});
const $c87311424ea30a05$export$b7d78993b74f766d = $c87311424ea30a05$var$cached(function() {
    return $c87311424ea30a05$var$testUserAgent(/Firefox/i);
});

/*
 * Copyright 2023 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 


const $ea8dcbcb9ea1b556$var$RouterContext = /*#__PURE__*/ (reactExports.createContext)({
    isNative: true,
    open: $ea8dcbcb9ea1b556$var$openSyntheticLink,
    useHref: (href)=>href
});
function $ea8dcbcb9ea1b556$export$9a302a45f65d0572() {
    return (reactExports.useContext)($ea8dcbcb9ea1b556$var$RouterContext);
}
function $ea8dcbcb9ea1b556$export$efa8c9099e530235(link, modifiers) {
    // Use getAttribute here instead of link.target. Firefox will default link.target to "_parent" when inside an iframe.
    let target = link.getAttribute('target');
    return (!target || target === '_self') && link.origin === location.origin && !link.hasAttribute('download') && !modifiers.metaKey && // open in new tab (mac)
    !modifiers.ctrlKey && // open in new tab (windows)
    !modifiers.altKey && // download
    !modifiers.shiftKey;
}
function $ea8dcbcb9ea1b556$export$95185d699e05d4d7(target, modifiers, setOpening = true) {
    var _window_event_type, _window_event;
    let { metaKey: metaKey, ctrlKey: ctrlKey, altKey: altKey, shiftKey: shiftKey } = modifiers;
    // Firefox does not recognize keyboard events as a user action by default, and the popup blocker
    // will prevent links with target="_blank" from opening. However, it does allow the event if the
    // Command/Control key is held, which opens the link in a background tab. This seems like the best we can do.
    // See https://bugzilla.mozilla.org/show_bug.cgi?id=257870 and https://bugzilla.mozilla.org/show_bug.cgi?id=746640.
    if (($c87311424ea30a05$export$b7d78993b74f766d)() && ((_window_event = window.event) === null || _window_event === void 0 ? void 0 : (_window_event_type = _window_event.type) === null || _window_event_type === void 0 ? void 0 : _window_event_type.startsWith('key')) && target.target === '_blank') {
        if (($c87311424ea30a05$export$9ac100e40613ea10)()) metaKey = true;
        else ctrlKey = true;
    }
    // WebKit does not support firing click events with modifier keys, but does support keyboard events.
    // https://github.com/WebKit/WebKit/blob/c03d0ac6e6db178f90923a0a63080b5ca210d25f/Source/WebCore/html/HTMLAnchorElement.cpp#L184
    let event = ($c87311424ea30a05$export$78551043582a6a98)() && ($c87311424ea30a05$export$9ac100e40613ea10)() && !($c87311424ea30a05$export$7bef049ce92e4224)() && true ? new KeyboardEvent('keydown', {
        keyIdentifier: 'Enter',
        metaKey: metaKey,
        ctrlKey: ctrlKey,
        altKey: altKey,
        shiftKey: shiftKey
    }) : new MouseEvent('click', {
        metaKey: metaKey,
        ctrlKey: ctrlKey,
        altKey: altKey,
        shiftKey: shiftKey,
        bubbles: true,
        cancelable: true
    });
    $ea8dcbcb9ea1b556$export$95185d699e05d4d7.isOpening = setOpening;
    ($7215afc6de606d6b$export$de79e2c695e052f3)(target);
    target.dispatchEvent(event);
    $ea8dcbcb9ea1b556$export$95185d699e05d4d7.isOpening = false;
}
// https://github.com/parcel-bundler/parcel/issues/8724
$ea8dcbcb9ea1b556$export$95185d699e05d4d7.isOpening = false;
function $ea8dcbcb9ea1b556$var$getSyntheticLink(target, open) {
    if (target instanceof HTMLAnchorElement) open(target);
    else if (target.hasAttribute('data-href')) {
        let link = document.createElement('a');
        link.href = target.getAttribute('data-href');
        if (target.hasAttribute('data-target')) link.target = target.getAttribute('data-target');
        if (target.hasAttribute('data-rel')) link.rel = target.getAttribute('data-rel');
        if (target.hasAttribute('data-download')) link.download = target.getAttribute('data-download');
        if (target.hasAttribute('data-ping')) link.ping = target.getAttribute('data-ping');
        if (target.hasAttribute('data-referrer-policy')) link.referrerPolicy = target.getAttribute('data-referrer-policy');
        target.appendChild(link);
        open(link);
        target.removeChild(link);
    }
}
function $ea8dcbcb9ea1b556$var$openSyntheticLink(target, modifiers) {
    $ea8dcbcb9ea1b556$var$getSyntheticLink(target, (link)=>$ea8dcbcb9ea1b556$export$95185d699e05d4d7(link, modifiers));
}
function $ea8dcbcb9ea1b556$export$bdc77b0c0a3a85d6(props) {
    let router = $ea8dcbcb9ea1b556$export$9a302a45f65d0572();
    return {
        'data-href': props.href ? router.useHref(props.href) : undefined,
        'data-target': props.target,
        'data-rel': props.rel,
        'data-download': props.download,
        'data-ping': props.ping,
        'data-referrer-policy': props.referrerPolicy
    };
}
function $ea8dcbcb9ea1b556$export$7e924b3091a3bd18(props) {
    let router = $ea8dcbcb9ea1b556$export$9a302a45f65d0572();
    return {
        href: (props === null || props === void 0 ? void 0 : props.href) ? router.useHref(props === null || props === void 0 ? void 0 : props.href) : undefined,
        target: props === null || props === void 0 ? void 0 : props.target,
        rel: props === null || props === void 0 ? void 0 : props.rel,
        download: props === null || props === void 0 ? void 0 : props.download,
        ping: props === null || props === void 0 ? void 0 : props.ping,
        referrerPolicy: props === null || props === void 0 ? void 0 : props.referrerPolicy
    };
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ // We store a global list of elements that are currently transitioning,
// mapped to a set of CSS properties that are transitioning for that element.
// This is necessary rather than a simple count of transitions because of browser
// bugs, e.g. Chrome sometimes fires both transitionend and transitioncancel rather
// than one or the other. So we need to track what's actually transitioning so that
// we can ignore these duplicate events.
let $bbed8b41f857bcc0$var$transitionsByElement = new Map();
// A list of callbacks to call once there are no transitioning elements.
let $bbed8b41f857bcc0$var$transitionCallbacks = new Set();
function $bbed8b41f857bcc0$var$setupGlobalEvents() {
    if (typeof window === 'undefined') return;
    function isTransitionEvent(event) {
        return 'propertyName' in event;
    }
    let onTransitionStart = (e)=>{
        if (!isTransitionEvent(e) || !e.target) return;
        // Add the transitioning property to the list for this element.
        let transitions = $bbed8b41f857bcc0$var$transitionsByElement.get(e.target);
        if (!transitions) {
            transitions = new Set();
            $bbed8b41f857bcc0$var$transitionsByElement.set(e.target, transitions);
            // The transitioncancel event must be registered on the element itself, rather than as a global
            // event. This enables us to handle when the node is deleted from the document while it is transitioning.
            // In that case, the cancel event would have nowhere to bubble to so we need to handle it directly.
            e.target.addEventListener('transitioncancel', onTransitionEnd, {
                once: true
            });
        }
        transitions.add(e.propertyName);
    };
    let onTransitionEnd = (e)=>{
        if (!isTransitionEvent(e) || !e.target) return;
        // Remove property from list of transitioning properties.
        let properties = $bbed8b41f857bcc0$var$transitionsByElement.get(e.target);
        if (!properties) return;
        properties.delete(e.propertyName);
        // If empty, remove transitioncancel event, and remove the element from the list of transitioning elements.
        if (properties.size === 0) {
            e.target.removeEventListener('transitioncancel', onTransitionEnd);
            $bbed8b41f857bcc0$var$transitionsByElement.delete(e.target);
        }
        // If no transitioning elements, call all of the queued callbacks.
        if ($bbed8b41f857bcc0$var$transitionsByElement.size === 0) {
            for (let cb of $bbed8b41f857bcc0$var$transitionCallbacks)cb();
            $bbed8b41f857bcc0$var$transitionCallbacks.clear();
        }
    };
    document.body.addEventListener('transitionrun', onTransitionStart);
    document.body.addEventListener('transitionend', onTransitionEnd);
}
if (typeof document !== 'undefined') {
    if (document.readyState !== 'loading') $bbed8b41f857bcc0$var$setupGlobalEvents();
    else document.addEventListener('DOMContentLoaded', $bbed8b41f857bcc0$var$setupGlobalEvents);
}
function $bbed8b41f857bcc0$export$24490316f764c430(fn) {
    // Wait one frame to see if an animation starts, e.g. a transition on mount.
    requestAnimationFrame(()=>{
        // If no transitions are running, call the function immediately.
        // Otherwise, add it to a list of callbacks to run at the end of the animation.
        if ($bbed8b41f857bcc0$var$transitionsByElement.size === 0) fn();
        else $bbed8b41f857bcc0$var$transitionCallbacks.add(fn);
    });
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 
function $03deb23ff14920c4$export$4eaf04e54aa8eed6() {
    let globalListeners = (reactExports.useRef)(new Map());
    let addGlobalListener = (reactExports.useCallback)((eventTarget, type, listener, options)=>{
        // Make sure we remove the listener after it is called with the `once` option.
        let fn = (options === null || options === void 0 ? void 0 : options.once) ? (...args)=>{
            globalListeners.current.delete(listener);
            listener(...args);
        } : listener;
        globalListeners.current.set(listener, {
            type: type,
            eventTarget: eventTarget,
            fn: fn,
            options: options
        });
        eventTarget.addEventListener(type, listener, options);
    }, []);
    let removeGlobalListener = (reactExports.useCallback)((eventTarget, type, listener, options)=>{
        var _globalListeners_current_get;
        let fn = ((_globalListeners_current_get = globalListeners.current.get(listener)) === null || _globalListeners_current_get === void 0 ? void 0 : _globalListeners_current_get.fn) || listener;
        eventTarget.removeEventListener(type, fn, options);
        globalListeners.current.delete(listener);
    }, []);
    let removeAllGlobalListeners = (reactExports.useCallback)(()=>{
        globalListeners.current.forEach((value, key)=>{
            removeGlobalListener(value.eventTarget, value.type, key, value.options);
        });
    }, [
        removeGlobalListener
    ]);
    // eslint-disable-next-line arrow-body-style
    (reactExports.useEffect)(()=>{
        return removeAllGlobalListeners;
    }, [
        removeAllGlobalListeners
    ]);
    return {
        addGlobalListener: addGlobalListener,
        removeGlobalListener: removeGlobalListener,
        removeAllGlobalListeners: removeAllGlobalListeners
    };
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 
function $313b98861ee5dd6c$export$d6875122194c7b44(props, defaultLabel) {
    let { id: id, 'aria-label': label, 'aria-labelledby': labelledBy } = props;
    // If there is both an aria-label and aria-labelledby,
    // combine them by pointing to the element itself.
    id = ($bdb11010cef70236$export$f680877a34711e37)(id);
    if (labelledBy && label) {
        let ids = new Set([
            id,
            ...labelledBy.trim().split(/\s+/)
        ]);
        labelledBy = [
            ...ids
        ].join(' ');
    } else if (labelledBy) labelledBy = labelledBy.trim().split(/\s+/).join(' ');
    // If no labels are provided, use the default
    if (!label && !labelledBy && defaultLabel) label = defaultLabel;
    return {
        id: id,
        'aria-label': label,
        'aria-labelledby': labelledBy
    };
}

/*
 * Copyright 2021 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 
function $df56164dff5785e2$export$4338b53315abf666(forwardedRef) {
    const objRef = (reactExports.useRef)(null);
    return (reactExports.useMemo)(()=>({
            get current () {
                return objRef.current;
            },
            set current (value){
                objRef.current = value;
                if (typeof forwardedRef === 'function') forwardedRef(value);
                else if (forwardedRef) forwardedRef.current = value;
            }
        }), [
        forwardedRef
    ]);
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 
function $4f58c5f72bcf79f7$export$496315a1608d9602(effect, dependencies) {
    const isInitialMount = (reactExports.useRef)(true);
    const lastDeps = (reactExports.useRef)(null);
    (reactExports.useEffect)(()=>{
        isInitialMount.current = true;
        return ()=>{
            isInitialMount.current = false;
        };
    }, []);
    (reactExports.useEffect)(()=>{
        if (isInitialMount.current) isInitialMount.current = false;
        else if (!lastDeps.current || dependencies.some((dep, i)=>!Object.is(dep, lastDeps[i]))) effect();
        lastDeps.current = dependencies;
    // eslint-disable-next-line react-hooks/exhaustive-deps
    }, dependencies);
}

function $9daab02d461809db$var$hasResizeObserver() {
    return typeof window.ResizeObserver !== 'undefined';
}
function $9daab02d461809db$export$683480f191c0e3ea(options) {
    const { ref: ref, box: box, onResize: onResize } = options;
    (reactExports.useEffect)(()=>{
        let element = ref === null || ref === void 0 ? void 0 : ref.current;
        if (!element) return;
        if (!$9daab02d461809db$var$hasResizeObserver()) {
            window.addEventListener('resize', onResize, false);
            return ()=>{
                window.removeEventListener('resize', onResize, false);
            };
        } else {
            const resizeObserverInstance = new window.ResizeObserver((entries)=>{
                if (!entries.length) return;
                onResize();
            });
            resizeObserverInstance.observe(element, {
                box: box
            });
            return ()=>{
                if (element) resizeObserverInstance.unobserve(element);
            };
        }
    }, [
        onResize,
        ref,
        box
    ]);
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 
function $e7801be82b4b2a53$export$4debdb1a3f0fa79e(context, ref) {
    ($f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(()=>{
        if (context && context.ref && ref) {
            context.ref.current = ref.current;
            return ()=>{
                if (context.ref) context.ref.current = null;
            };
        }
    });
}

/*
 * Copyright 2024 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ function $cc38e7bd3fc7b213$export$2bb74740c4e19def(node, checkForOverflow) {
    let style = window.getComputedStyle(node);
    let isScrollable = /(auto|scroll)/.test(style.overflow + style.overflowX + style.overflowY);
    if (isScrollable && checkForOverflow) isScrollable = node.scrollHeight !== node.clientHeight || node.scrollWidth !== node.clientWidth;
    return isScrollable;
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 
function $62d8ded9296f3872$export$cfa2225e87938781(node, checkForOverflow) {
    let scrollableNode = node;
    if (($cc38e7bd3fc7b213$export$2bb74740c4e19def)(scrollableNode, checkForOverflow)) scrollableNode = scrollableNode.parentElement;
    while(scrollableNode && !($cc38e7bd3fc7b213$export$2bb74740c4e19def)(scrollableNode, checkForOverflow))scrollableNode = scrollableNode.parentElement;
    return scrollableNode || document.scrollingElement || document.documentElement;
}

/*
 * Copyright 2024 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 
function $a40c673dc9f6d9c7$export$94ed1c92c7beeb22(node, checkForOverflow) {
    const scrollParents = [];
    while(node && node !== document.documentElement){
        if (($cc38e7bd3fc7b213$export$2bb74740c4e19def)(node, checkForOverflow)) scrollParents.push(node);
        node = node.parentElement;
    }
    return scrollParents;
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 

// @ts-ignore
let $5df64b3807dc15ee$var$visualViewport = typeof document !== 'undefined' && window.visualViewport;
function $5df64b3807dc15ee$export$d699905dd57c73ca() {
    let isSSR = ($b5e257d569688ac6$export$535bd6ca7f90a273)();
    let [size, setSize] = (reactExports.useState)(()=>isSSR ? {
            width: 0,
            height: 0
        } : $5df64b3807dc15ee$var$getViewportSize());
    (reactExports.useEffect)(()=>{
        // Use visualViewport api to track available height even on iOS virtual keyboard opening
        let onResize = ()=>{
            setSize((size)=>{
                let newSize = $5df64b3807dc15ee$var$getViewportSize();
                if (newSize.width === size.width && newSize.height === size.height) return size;
                return newSize;
            });
        };
        if (!$5df64b3807dc15ee$var$visualViewport) window.addEventListener('resize', onResize);
        else $5df64b3807dc15ee$var$visualViewport.addEventListener('resize', onResize);
        return ()=>{
            if (!$5df64b3807dc15ee$var$visualViewport) window.removeEventListener('resize', onResize);
            else $5df64b3807dc15ee$var$visualViewport.removeEventListener('resize', onResize);
        };
    }, []);
    return size;
}
function $5df64b3807dc15ee$var$getViewportSize() {
    return {
        width: $5df64b3807dc15ee$var$visualViewport && ($5df64b3807dc15ee$var$visualViewport === null || $5df64b3807dc15ee$var$visualViewport === void 0 ? void 0 : $5df64b3807dc15ee$var$visualViewport.width) || window.innerWidth,
        height: $5df64b3807dc15ee$var$visualViewport && ($5df64b3807dc15ee$var$visualViewport === null || $5df64b3807dc15ee$var$visualViewport === void 0 ? void 0 : $5df64b3807dc15ee$var$visualViewport.height) || window.innerHeight
    };
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 

let $ef06256079686ba0$var$descriptionId = 0;
const $ef06256079686ba0$var$descriptionNodes = new Map();
function $ef06256079686ba0$export$f8aeda7b10753fa1(description) {
    let [id, setId] = (reactExports.useState)();
    ($f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(()=>{
        if (!description) return;
        let desc = $ef06256079686ba0$var$descriptionNodes.get(description);
        if (!desc) {
            let id = `react-aria-description-${$ef06256079686ba0$var$descriptionId++}`;
            setId(id);
            let node = document.createElement('div');
            node.id = id;
            node.style.display = 'none';
            node.textContent = description;
            document.body.appendChild(node);
            desc = {
                refCount: 0,
                element: node
            };
            $ef06256079686ba0$var$descriptionNodes.set(description, desc);
        } else setId(desc.element.id);
        desc.refCount++;
        return ()=>{
            if (desc && --desc.refCount === 0) {
                desc.element.remove();
                $ef06256079686ba0$var$descriptionNodes.delete(description);
            }
        };
    }, [
        description
    ]);
    return {
        'aria-describedby': description ? id : undefined
    };
}

/*
 * Copyright 2021 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 

function $e9faafb641e167db$export$90fc3a17d93f704c(ref, event, handler, options) {
    let handleEvent = ($8ae05eaa5c114e9c$export$7f54fc3180508a52)(handler);
    let isDisabled = handler == null;
    (reactExports.useEffect)(()=>{
        if (isDisabled || !ref.current) return;
        let element = ref.current;
        element.addEventListener(event, handleEvent, options);
        return ()=>{
            element.removeEventListener(event, handleEvent, options);
        };
    }, [
        ref,
        event,
        options,
        isDisabled,
        handleEvent
    ]);
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 
function $2f04cbc44ee30ce0$export$53a0910f038337bd(scrollView, element) {
    let offsetX = $2f04cbc44ee30ce0$var$relativeOffset(scrollView, element, 'left');
    let offsetY = $2f04cbc44ee30ce0$var$relativeOffset(scrollView, element, 'top');
    let width = element.offsetWidth;
    let height = element.offsetHeight;
    let x = scrollView.scrollLeft;
    let y = scrollView.scrollTop;
    // Account for top/left border offsetting the scroll top/Left
    let { borderTopWidth: borderTopWidth, borderLeftWidth: borderLeftWidth } = getComputedStyle(scrollView);
    let borderAdjustedX = scrollView.scrollLeft + parseInt(borderLeftWidth, 10);
    let borderAdjustedY = scrollView.scrollTop + parseInt(borderTopWidth, 10);
    // Ignore end/bottom border via clientHeight/Width instead of offsetHeight/Width
    let maxX = borderAdjustedX + scrollView.clientWidth;
    let maxY = borderAdjustedY + scrollView.clientHeight;
    if (offsetX <= x) x = offsetX - parseInt(borderLeftWidth, 10);
    else if (offsetX + width > maxX) x += offsetX + width - maxX;
    if (offsetY <= borderAdjustedY) y = offsetY - parseInt(borderTopWidth, 10);
    else if (offsetY + height > maxY) y += offsetY + height - maxY;
    scrollView.scrollLeft = x;
    scrollView.scrollTop = y;
}
/**
 * Computes the offset left or top from child to ancestor by accumulating
 * offsetLeft or offsetTop through intervening offsetParents.
 */ function $2f04cbc44ee30ce0$var$relativeOffset(ancestor, child, axis) {
    const prop = axis === 'left' ? 'offsetLeft' : 'offsetTop';
    let sum = 0;
    while(child.offsetParent){
        sum += child[prop];
        if (child.offsetParent === ancestor) break;
        else if (child.offsetParent.contains(ancestor)) {
            // If the ancestor is not `position:relative`, then we stop at
            // _its_ offset parent, and we subtract off _its_ offset, so that
            // we end up with the proper offset from child to ancestor.
            sum -= ancestor[prop];
            break;
        }
        child = child.offsetParent;
    }
    return sum;
}
function $2f04cbc44ee30ce0$export$c826860796309d1b(targetElement, opts) {
    if (document.contains(targetElement)) {
        let root = document.scrollingElement || document.documentElement;
        let isScrollPrevented = window.getComputedStyle(root).overflow === 'hidden';
        // If scrolling is not currently prevented then we aren’t in a overlay nor is a overlay open, just use element.scrollIntoView to bring the element into view
        if (!isScrollPrevented) {
            var // use scrollIntoView({block: 'nearest'}) instead of .focus to check if the element is fully in view or not since .focus()
            // won't cause a scroll if the element is already focused and doesn't behave consistently when an element is partially out of view horizontally vs vertically
            _targetElement_scrollIntoView;
            let { left: originalLeft, top: originalTop } = targetElement.getBoundingClientRect();
            targetElement === null || targetElement === void 0 ? void 0 : (_targetElement_scrollIntoView = targetElement.scrollIntoView) === null || _targetElement_scrollIntoView === void 0 ? void 0 : _targetElement_scrollIntoView.call(targetElement, {
                block: 'nearest'
            });
            let { left: newLeft, top: newTop } = targetElement.getBoundingClientRect();
            // Account for sub pixel differences from rounding
            if (Math.abs(originalLeft - newLeft) > 1 || Math.abs(originalTop - newTop) > 1) {
                var _opts_containingElement_scrollIntoView, _opts_containingElement, _targetElement_scrollIntoView1;
                opts === null || opts === void 0 ? void 0 : (_opts_containingElement = opts.containingElement) === null || _opts_containingElement === void 0 ? void 0 : (_opts_containingElement_scrollIntoView = _opts_containingElement.scrollIntoView) === null || _opts_containingElement_scrollIntoView === void 0 ? void 0 : _opts_containingElement_scrollIntoView.call(_opts_containingElement, {
                    block: 'center',
                    inline: 'center'
                });
                (_targetElement_scrollIntoView1 = targetElement.scrollIntoView) === null || _targetElement_scrollIntoView1 === void 0 ? void 0 : _targetElement_scrollIntoView1.call(targetElement, {
                    block: 'nearest'
                });
            }
        } else {
            let scrollParents = ($a40c673dc9f6d9c7$export$94ed1c92c7beeb22)(targetElement);
            // If scrolling is prevented, we don't want to scroll the body since it might move the overlay partially offscreen and the user can't scroll it back into view.
            for (let scrollParent of scrollParents)$2f04cbc44ee30ce0$export$53a0910f038337bd(scrollParent, targetElement);
        }
    }
}

/*
 * Copyright 2022 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 
function $6a7db85432448f7f$export$60278871457622de(event) {
    // JAWS/NVDA with Firefox.
    if (event.mozInputSource === 0 && event.isTrusted) return true;
    // Android TalkBack's detail value varies depending on the event listener providing the event so we have specific logic here instead
    // If pointerType is defined, event is from a click listener. For events from mousedown listener, detail === 0 is a sufficient check
    // to detect TalkBack virtual clicks.
    if (($c87311424ea30a05$export$a11b0059900ceec8)() && event.pointerType) return event.type === 'click' && event.buttons === 1;
    return event.detail === 0 && !event.pointerType;
}
function $6a7db85432448f7f$export$29bf1b5f2c56cf63(event) {
    // If the pointer size is zero, then we assume it's from a screen reader.
    // Android TalkBack double tap will sometimes return a event with width and height of 1
    // and pointerType === 'mouse' so we need to check for a specific combination of event attributes.
    // Cannot use "event.pressure === 0" as the sole check due to Safari pointer events always returning pressure === 0
    // instead of .5, see https://bugs.webkit.org/show_bug.cgi?id=206216. event.pointerType === 'mouse' is to distingush
    // Talkback double tap from Windows Firefox touch screen press
    return !($c87311424ea30a05$export$a11b0059900ceec8)() && event.width === 0 && event.height === 0 || event.width === 1 && event.height === 1 && event.pressure === 0 && event.detail === 0 && event.pointerType === 'mouse';
}

/*
 * Copyright 2023 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ /* eslint-disable rulesdir/pure-render */ 
function $5a387cc49350e6db$export$722debc0e56fea39(value, isEqual) {
    // Using a ref during render is ok here because it's only an optimization – both values are equivalent.
    // If a render is thrown away, it'll still work the same no matter if the next render is the same or not.
    let lastValue = (reactExports.useRef)(null);
    if (value && lastValue.current && isEqual(value, lastValue.current)) value = lastValue.current;
    lastValue.current = value;
    return value;
}

/*
 * Copyright 2023 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 

function $99facab73266f662$export$5add1d006293d136(ref, initialValue, onReset) {
    let resetValue = (reactExports.useRef)(initialValue);
    let handleReset = ($8ae05eaa5c114e9c$export$7f54fc3180508a52)(()=>{
        if (onReset) onReset(resetValue.current);
    });
    (reactExports.useEffect)(()=>{
        var _ref_current;
        let form = ref === null || ref === void 0 ? void 0 : (_ref_current = ref.current) === null || _ref_current === void 0 ? void 0 : _ref_current.form;
        form === null || form === void 0 ? void 0 : form.addEventListener('reset', handleReset);
        return ()=>{
            form === null || form === void 0 ? void 0 : form.removeEventListener('reset', handleReset);
        };
    }, [
        ref,
        handleReset
    ]);
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 
function $458b0a5536c1a7cf$export$40bfa8c7b0832715(value, defaultValue, onChange) {
    let [stateValue, setStateValue] = (reactExports.useState)(value || defaultValue);
    let isControlledRef = (reactExports.useRef)(value !== undefined);
    let isControlled = value !== undefined;
    (reactExports.useEffect)(()=>{
        let wasControlled = isControlledRef.current;
        if (wasControlled !== isControlled) console.warn(`WARN: A component changed from ${wasControlled ? 'controlled' : 'uncontrolled'} to ${isControlled ? 'controlled' : 'uncontrolled'}.`);
        isControlledRef.current = isControlled;
    }, [
        isControlled
    ]);
    let currentValue = isControlled ? value : stateValue;
    let setValue = (reactExports.useCallback)((value, ...args)=>{
        let onChangeCaller = (value, ...onChangeArgs)=>{
            if (onChange) {
                if (!Object.is(currentValue, value)) onChange(value, ...onChangeArgs);
            }
            if (!isControlled) // If uncontrolled, mutate the currentValue local variable so that
            // calling setState multiple times with the same value only emits onChange once.
            // We do not use a ref for this because we specifically _do_ want the value to
            // reset every render, and assigning to a ref in render breaks aborted suspended renders.
            // eslint-disable-next-line react-hooks/exhaustive-deps
            currentValue = value;
        };
        if (typeof value === 'function') {
            console.warn('We can not support a function callback. See Github Issues for details https://github.com/adobe/react-spectrum/issues/2320');
            // this supports functional updates https://reactjs.org/docs/hooks-reference.html#functional-updates
            // when someone using useControlledState calls setControlledState(myFunc)
            // this will call our useState setState with a function as well which invokes myFunc and calls onChange with the value from myFunc
            // if we're in an uncontrolled state, then we also return the value of myFunc which to setState looks as though it was just called with myFunc from the beginning
            // otherwise we just return the controlled value, which won't cause a rerender because React knows to bail out when the value is the same
            let updateFunction = (oldValue, ...functionArgs)=>{
                let interceptedValue = value(isControlled ? currentValue : oldValue, ...functionArgs);
                onChangeCaller(interceptedValue, ...args);
                if (!isControlled) return interceptedValue;
                return oldValue;
            };
            setStateValue(updateFunction);
        } else {
            if (!isControlled) setStateValue(value);
            onChangeCaller(value, ...args);
        }
    }, [
        isControlled,
        currentValue,
        onChange
    ]);
    return [
        currentValue,
        setValue
    ];
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ /**
 * Takes a value and forces it to the closest min/max if it's outside. Also forces it to the closest valid step.
 */ function $9446cca9a3875146$export$7d15b64cf5a3a4c4(value, min = -Infinity, max = Infinity) {
    let newValue = Math.min(Math.max(value, min), max);
    return newValue;
}
function $9446cca9a3875146$export$e1a7b8e69ef6c52f(value, step) {
    let roundedValue = value;
    let stepString = step.toString();
    let pointIndex = stepString.indexOf('.');
    let precision = pointIndex >= 0 ? stepString.length - pointIndex : 0;
    if (precision > 0) {
        let pow = Math.pow(10, precision);
        roundedValue = Math.round(roundedValue * pow) / pow;
    }
    return roundedValue;
}
function $9446cca9a3875146$export$cb6e0bb50bc19463(value, min, max, step) {
    min = Number(min);
    max = Number(max);
    let remainder = (value - (isNaN(min) ? 0 : min)) % step;
    let snappedValue = $9446cca9a3875146$export$e1a7b8e69ef6c52f(Math.abs(remainder) * 2 >= step ? value + Math.sign(remainder) * (step - Math.abs(remainder)) : value - remainder, step);
    if (!isNaN(min)) {
        if (snappedValue < min) snappedValue = min;
        else if (!isNaN(max) && snappedValue > max) snappedValue = min + Math.floor($9446cca9a3875146$export$e1a7b8e69ef6c52f((max - min) / step, step)) * step;
    } else if (!isNaN(max) && snappedValue > max) snappedValue = Math.floor($9446cca9a3875146$export$e1a7b8e69ef6c52f(max / step, step)) * step;
    // correct floating point behavior by rounding to step precision
    snappedValue = $9446cca9a3875146$export$e1a7b8e69ef6c52f(snappedValue, step);
    return snappedValue;
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 
// Note that state only matters here for iOS. Non-iOS gets user-select: none applied to the target element
// rather than at the document level so we just need to apply/remove user-select: none for each pressed element individually
let $14c0b72509d70225$var$state = 'default';
let $14c0b72509d70225$var$savedUserSelect = '';
let $14c0b72509d70225$var$modifiedElementMap = new WeakMap();
function $14c0b72509d70225$export$16a4697467175487(target) {
    if (($c87311424ea30a05$export$fedb369cb70207f1)()) {
        if ($14c0b72509d70225$var$state === 'default') {
            // eslint-disable-next-line no-restricted-globals
            const documentObject = ($431fbd86ca7dc216$export$b204af158042fbac)(target);
            $14c0b72509d70225$var$savedUserSelect = documentObject.documentElement.style.webkitUserSelect;
            documentObject.documentElement.style.webkitUserSelect = 'none';
        }
        $14c0b72509d70225$var$state = 'disabled';
    } else if (target instanceof HTMLElement || target instanceof SVGElement) {
        // If not iOS, store the target's original user-select and change to user-select: none
        // Ignore state since it doesn't apply for non iOS
        $14c0b72509d70225$var$modifiedElementMap.set(target, target.style.userSelect);
        target.style.userSelect = 'none';
    }
}
function $14c0b72509d70225$export$b0d6fa1ab32e3295(target) {
    if (($c87311424ea30a05$export$fedb369cb70207f1)()) {
        // If the state is already default, there's nothing to do.
        // If it is restoring, then there's no need to queue a second restore.
        if ($14c0b72509d70225$var$state !== 'disabled') return;
        $14c0b72509d70225$var$state = 'restoring';
        // There appears to be a delay on iOS where selection still might occur
        // after pointer up, so wait a bit before removing user-select.
        setTimeout(()=>{
            // Wait for any CSS transitions to complete so we don't recompute style
            // for the whole page in the middle of the animation and cause jank.
            ($bbed8b41f857bcc0$export$24490316f764c430)(()=>{
                // Avoid race conditions
                if ($14c0b72509d70225$var$state === 'restoring') {
                    // eslint-disable-next-line no-restricted-globals
                    const documentObject = ($431fbd86ca7dc216$export$b204af158042fbac)(target);
                    if (documentObject.documentElement.style.webkitUserSelect === 'none') documentObject.documentElement.style.webkitUserSelect = $14c0b72509d70225$var$savedUserSelect || '';
                    $14c0b72509d70225$var$savedUserSelect = '';
                    $14c0b72509d70225$var$state = 'default';
                }
            });
        }, 300);
    } else if (target instanceof HTMLElement || target instanceof SVGElement) // If not iOS, restore the target's original user-select if any
    // Ignore state since it doesn't apply for non iOS
    {
        if (target && $14c0b72509d70225$var$modifiedElementMap.has(target)) {
            let targetOldUserSelect = $14c0b72509d70225$var$modifiedElementMap.get(target);
            if (target.style.userSelect === 'none') target.style.userSelect = targetOldUserSelect;
            if (target.getAttribute('style') === '') target.removeAttribute('style');
            $14c0b72509d70225$var$modifiedElementMap.delete(target);
        }
    }
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 
const $ae1eeba8b9eafd08$export$5165eccb35aaadb5 = (React).createContext({
    register: ()=>{}
});
$ae1eeba8b9eafd08$export$5165eccb35aaadb5.displayName = 'PressResponderContext';

function _class_apply_descriptor_get(receiver, descriptor) {
    if (descriptor.get) return descriptor.get.call(receiver);

    return descriptor.value;
}

function _class_extract_field_descriptor(receiver, privateMap, action) {
    if (!privateMap.has(receiver)) throw new TypeError("attempted to " + action + " private field on non-instance");

    return privateMap.get(receiver);
}

function _class_private_field_get(receiver, privateMap) {
    var descriptor = _class_extract_field_descriptor(receiver, privateMap, "get");
    return _class_apply_descriptor_get(receiver, descriptor);
}

function _check_private_redeclaration(obj, privateCollection) {
    if (privateCollection.has(obj)) {
        throw new TypeError("Cannot initialize the same private elements twice on an object");
    }
}

function _class_private_field_init(obj, privateMap, value) {
    _check_private_redeclaration(obj, privateMap);
    privateMap.set(obj, value);
}

function _class_apply_descriptor_set(receiver, descriptor, value) {
    if (descriptor.set) descriptor.set.call(receiver, value);
    else {
        if (!descriptor.writable) {
            // This should only throw in strict mode, but class bodies are
            // always strict and private fields can only be used inside
            // class bodies.
            throw new TypeError("attempted to set read only private field");
        }
        descriptor.value = value;
    }
}

function _class_private_field_set(receiver, privateMap, value) {
    var descriptor = _class_extract_field_descriptor(receiver, privateMap, "set");
    _class_apply_descriptor_set(receiver, descriptor, value);
    return value;
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ // Portions of the code in this file are based on code from react.
// Original licensing for the following can be found in the
// NOTICE file in the root directory of this source tree.
// See https://github.com/facebook/react/tree/cc7c1aece46a6b69b41958d731e0fd27c94bfc6c/packages/react-interactions







function $f6c31cce2adf654f$var$usePressResponderContext(props) {
    // Consume context from <PressResponder> and merge with props.
    let context = (reactExports.useContext)(($ae1eeba8b9eafd08$export$5165eccb35aaadb5));
    if (context) {
        let { register: register, ...contextProps } = context;
        props = ($3ef42575df84b30b$export$9d1611c77c2fe928)(contextProps, props);
        register();
    }
    ($e7801be82b4b2a53$export$4debdb1a3f0fa79e)(context, props.ref);
    return props;
}
var $f6c31cce2adf654f$var$_shouldStopPropagation = /*#__PURE__*/ new WeakMap();
class $f6c31cce2adf654f$var$PressEvent {
    continuePropagation() {
        (_class_private_field_set)(this, $f6c31cce2adf654f$var$_shouldStopPropagation, false);
    }
    get shouldStopPropagation() {
        return (_class_private_field_get)(this, $f6c31cce2adf654f$var$_shouldStopPropagation);
    }
    constructor(type, pointerType, originalEvent, state){
        (_class_private_field_init)(this, $f6c31cce2adf654f$var$_shouldStopPropagation, {
            writable: true,
            value: void 0
        });
        (_class_private_field_set)(this, $f6c31cce2adf654f$var$_shouldStopPropagation, true);
        var _state_target;
        let currentTarget = (_state_target = state === null || state === void 0 ? void 0 : state.target) !== null && _state_target !== void 0 ? _state_target : originalEvent.currentTarget;
        const rect = currentTarget === null || currentTarget === void 0 ? void 0 : currentTarget.getBoundingClientRect();
        let x, y = 0;
        let clientX, clientY = null;
        if (originalEvent.clientX != null && originalEvent.clientY != null) {
            clientX = originalEvent.clientX;
            clientY = originalEvent.clientY;
        }
        if (rect) {
            if (clientX != null && clientY != null) {
                x = clientX - rect.left;
                y = clientY - rect.top;
            } else {
                x = rect.width / 2;
                y = rect.height / 2;
            }
        }
        this.type = type;
        this.pointerType = pointerType;
        this.target = originalEvent.currentTarget;
        this.shiftKey = originalEvent.shiftKey;
        this.metaKey = originalEvent.metaKey;
        this.ctrlKey = originalEvent.ctrlKey;
        this.altKey = originalEvent.altKey;
        this.x = x;
        this.y = y;
    }
}
const $f6c31cce2adf654f$var$LINK_CLICKED = Symbol('linkClicked');
function $f6c31cce2adf654f$export$45712eceda6fad21(props) {
    let { onPress: onPress, onPressChange: onPressChange, onPressStart: onPressStart, onPressEnd: onPressEnd, onPressUp: onPressUp, isDisabled: isDisabled, isPressed: isPressedProp, preventFocusOnPress: preventFocusOnPress, shouldCancelOnPointerExit: shouldCancelOnPointerExit, allowTextSelectionOnPress: allowTextSelectionOnPress, // eslint-disable-next-line @typescript-eslint/no-unused-vars
    ref: _, ...domProps } = $f6c31cce2adf654f$var$usePressResponderContext(props);
    let [isPressed, setPressed] = (reactExports.useState)(false);
    let ref = (reactExports.useRef)({
        isPressed: false,
        ignoreEmulatedMouseEvents: false,
        ignoreClickAfterPress: false,
        didFirePressStart: false,
        isTriggeringEvent: false,
        activePointerId: null,
        target: null,
        isOverTarget: false,
        pointerType: null
    });
    let { addGlobalListener: addGlobalListener, removeAllGlobalListeners: removeAllGlobalListeners } = ($03deb23ff14920c4$export$4eaf04e54aa8eed6)();
    let triggerPressStart = ($8ae05eaa5c114e9c$export$7f54fc3180508a52)((originalEvent, pointerType)=>{
        let state = ref.current;
        if (isDisabled || state.didFirePressStart) return false;
        let shouldStopPropagation = true;
        state.isTriggeringEvent = true;
        if (onPressStart) {
            let event = new $f6c31cce2adf654f$var$PressEvent('pressstart', pointerType, originalEvent);
            onPressStart(event);
            shouldStopPropagation = event.shouldStopPropagation;
        }
        if (onPressChange) onPressChange(true);
        state.isTriggeringEvent = false;
        state.didFirePressStart = true;
        setPressed(true);
        return shouldStopPropagation;
    });
    let triggerPressEnd = ($8ae05eaa5c114e9c$export$7f54fc3180508a52)((originalEvent, pointerType, wasPressed = true)=>{
        let state = ref.current;
        if (!state.didFirePressStart) return false;
        state.ignoreClickAfterPress = true;
        state.didFirePressStart = false;
        state.isTriggeringEvent = true;
        let shouldStopPropagation = true;
        if (onPressEnd) {
            let event = new $f6c31cce2adf654f$var$PressEvent('pressend', pointerType, originalEvent);
            onPressEnd(event);
            shouldStopPropagation = event.shouldStopPropagation;
        }
        if (onPressChange) onPressChange(false);
        setPressed(false);
        if (onPress && wasPressed && !isDisabled) {
            let event = new $f6c31cce2adf654f$var$PressEvent('press', pointerType, originalEvent);
            onPress(event);
            shouldStopPropagation && (shouldStopPropagation = event.shouldStopPropagation);
        }
        state.isTriggeringEvent = false;
        return shouldStopPropagation;
    });
    let triggerPressUp = ($8ae05eaa5c114e9c$export$7f54fc3180508a52)((originalEvent, pointerType)=>{
        let state = ref.current;
        if (isDisabled) return false;
        if (onPressUp) {
            state.isTriggeringEvent = true;
            let event = new $f6c31cce2adf654f$var$PressEvent('pressup', pointerType, originalEvent);
            onPressUp(event);
            state.isTriggeringEvent = false;
            return event.shouldStopPropagation;
        }
        return true;
    });
    let cancel = ($8ae05eaa5c114e9c$export$7f54fc3180508a52)((e)=>{
        let state = ref.current;
        if (state.isPressed && state.target) {
            if (state.isOverTarget && state.pointerType != null) triggerPressEnd($f6c31cce2adf654f$var$createEvent(state.target, e), state.pointerType, false);
            state.isPressed = false;
            state.isOverTarget = false;
            state.activePointerId = null;
            state.pointerType = null;
            removeAllGlobalListeners();
            if (!allowTextSelectionOnPress) ($14c0b72509d70225$export$b0d6fa1ab32e3295)(state.target);
        }
    });
    let cancelOnPointerExit = ($8ae05eaa5c114e9c$export$7f54fc3180508a52)((e)=>{
        if (shouldCancelOnPointerExit) cancel(e);
    });
    let pressProps = (reactExports.useMemo)(()=>{
        let state = ref.current;
        let pressProps = {
            onKeyDown (e) {
                if ($f6c31cce2adf654f$var$isValidKeyboardEvent(e.nativeEvent, e.currentTarget) && e.currentTarget.contains(e.target)) {
                    var _state_metaKeyEvents;
                    if ($f6c31cce2adf654f$var$shouldPreventDefaultKeyboard(e.target, e.key)) e.preventDefault();
                    // If the event is repeating, it may have started on a different element
                    // after which focus moved to the current element. Ignore these events and
                    // only handle the first key down event.
                    let shouldStopPropagation = true;
                    if (!state.isPressed && !e.repeat) {
                        state.target = e.currentTarget;
                        state.isPressed = true;
                        shouldStopPropagation = triggerPressStart(e, 'keyboard');
                        // Focus may move before the key up event, so register the event on the document
                        // instead of the same element where the key down event occurred. Make it capturing so that it will trigger
                        // before stopPropagation from useKeyboard on a child element may happen and thus we can still call triggerPress for the parent element.
                        let originalTarget = e.currentTarget;
                        let pressUp = (e)=>{
                            if ($f6c31cce2adf654f$var$isValidKeyboardEvent(e, originalTarget) && !e.repeat && originalTarget.contains(e.target) && state.target) triggerPressUp($f6c31cce2adf654f$var$createEvent(state.target, e), 'keyboard');
                        };
                        addGlobalListener(($431fbd86ca7dc216$export$b204af158042fbac)(e.currentTarget), 'keyup', ($ff5963eb1fccf552$export$e08e3b67e392101e)(pressUp, onKeyUp), true);
                    }
                    if (shouldStopPropagation) e.stopPropagation();
                    // Keep track of the keydown events that occur while the Meta (e.g. Command) key is held.
                    // macOS has a bug where keyup events are not fired while the Meta key is down.
                    // When the Meta key itself is released we will get an event for that, and we'll act as if
                    // all of these other keys were released as well.
                    // https://bugs.chromium.org/p/chromium/issues/detail?id=1393524
                    // https://bugs.webkit.org/show_bug.cgi?id=55291
                    // https://bugzilla.mozilla.org/show_bug.cgi?id=1299553
                    if (e.metaKey && ($c87311424ea30a05$export$9ac100e40613ea10)()) (_state_metaKeyEvents = state.metaKeyEvents) === null || _state_metaKeyEvents === void 0 ? void 0 : _state_metaKeyEvents.set(e.key, e.nativeEvent);
                } else if (e.key === 'Meta') state.metaKeyEvents = new Map();
            },
            onClick (e) {
                if (e && !e.currentTarget.contains(e.target)) return;
                if (e && e.button === 0 && !state.isTriggeringEvent && !($ea8dcbcb9ea1b556$export$95185d699e05d4d7).isOpening) {
                    let shouldStopPropagation = true;
                    if (isDisabled) e.preventDefault();
                    // If triggered from a screen reader or by using element.click(),
                    // trigger as if it were a keyboard click.
                    if (!state.ignoreClickAfterPress && !state.ignoreEmulatedMouseEvents && !state.isPressed && (state.pointerType === 'virtual' || ($6a7db85432448f7f$export$60278871457622de)(e.nativeEvent))) {
                        // Ensure the element receives focus (VoiceOver on iOS does not do this)
                        if (!isDisabled && !preventFocusOnPress) ($7215afc6de606d6b$export$de79e2c695e052f3)(e.currentTarget);
                        let stopPressStart = triggerPressStart(e, 'virtual');
                        let stopPressUp = triggerPressUp(e, 'virtual');
                        let stopPressEnd = triggerPressEnd(e, 'virtual');
                        shouldStopPropagation = stopPressStart && stopPressUp && stopPressEnd;
                    }
                    state.ignoreEmulatedMouseEvents = false;
                    state.ignoreClickAfterPress = false;
                    if (shouldStopPropagation) e.stopPropagation();
                }
            }
        };
        let onKeyUp = (e)=>{
            var _state_metaKeyEvents;
            if (state.isPressed && state.target && $f6c31cce2adf654f$var$isValidKeyboardEvent(e, state.target)) {
                var _state_metaKeyEvents1;
                if ($f6c31cce2adf654f$var$shouldPreventDefaultKeyboard(e.target, e.key)) e.preventDefault();
                let target = e.target;
                triggerPressEnd($f6c31cce2adf654f$var$createEvent(state.target, e), 'keyboard', state.target.contains(target));
                removeAllGlobalListeners();
                // If a link was triggered with a key other than Enter, open the URL ourselves.
                // This means the link has a role override, and the default browser behavior
                // only applies when using the Enter key.
                if (e.key !== 'Enter' && $f6c31cce2adf654f$var$isHTMLAnchorLink(state.target) && state.target.contains(target) && !e[$f6c31cce2adf654f$var$LINK_CLICKED]) {
                    // Store a hidden property on the event so we only trigger link click once,
                    // even if there are multiple usePress instances attached to the element.
                    e[$f6c31cce2adf654f$var$LINK_CLICKED] = true;
                    ($ea8dcbcb9ea1b556$export$95185d699e05d4d7)(state.target, e, false);
                }
                state.isPressed = false;
                (_state_metaKeyEvents1 = state.metaKeyEvents) === null || _state_metaKeyEvents1 === void 0 ? void 0 : _state_metaKeyEvents1.delete(e.key);
            } else if (e.key === 'Meta' && ((_state_metaKeyEvents = state.metaKeyEvents) === null || _state_metaKeyEvents === void 0 ? void 0 : _state_metaKeyEvents.size)) {
                var _state_target;
                // If we recorded keydown events that occurred while the Meta key was pressed,
                // and those haven't received keyup events already, fire keyup events ourselves.
                // See comment above for more info about the macOS bug causing this.
                let events = state.metaKeyEvents;
                state.metaKeyEvents = undefined;
                for (let event of events.values())(_state_target = state.target) === null || _state_target === void 0 ? void 0 : _state_target.dispatchEvent(new KeyboardEvent('keyup', event));
            }
        };
        if (typeof PointerEvent !== 'undefined') {
            pressProps.onPointerDown = (e)=>{
                // Only handle left clicks, and ignore events that bubbled through portals.
                if (e.button !== 0 || !e.currentTarget.contains(e.target)) return;
                // iOS safari fires pointer events from VoiceOver with incorrect coordinates/target.
                // Ignore and let the onClick handler take care of it instead.
                // https://bugs.webkit.org/show_bug.cgi?id=222627
                // https://bugs.webkit.org/show_bug.cgi?id=223202
                if (($6a7db85432448f7f$export$29bf1b5f2c56cf63)(e.nativeEvent)) {
                    state.pointerType = 'virtual';
                    return;
                }
                // Due to browser inconsistencies, especially on mobile browsers, we prevent
                // default on pointer down and handle focusing the pressable element ourselves.
                if ($f6c31cce2adf654f$var$shouldPreventDefault(e.currentTarget)) e.preventDefault();
                state.pointerType = e.pointerType;
                let shouldStopPropagation = true;
                if (!state.isPressed) {
                    state.isPressed = true;
                    state.isOverTarget = true;
                    state.activePointerId = e.pointerId;
                    state.target = e.currentTarget;
                    if (!isDisabled && !preventFocusOnPress) ($7215afc6de606d6b$export$de79e2c695e052f3)(e.currentTarget);
                    if (!allowTextSelectionOnPress) ($14c0b72509d70225$export$16a4697467175487)(state.target);
                    shouldStopPropagation = triggerPressStart(e, state.pointerType);
                    addGlobalListener(($431fbd86ca7dc216$export$b204af158042fbac)(e.currentTarget), 'pointermove', onPointerMove, false);
                    addGlobalListener(($431fbd86ca7dc216$export$b204af158042fbac)(e.currentTarget), 'pointerup', onPointerUp, false);
                    addGlobalListener(($431fbd86ca7dc216$export$b204af158042fbac)(e.currentTarget), 'pointercancel', onPointerCancel, false);
                }
                if (shouldStopPropagation) e.stopPropagation();
            };
            pressProps.onMouseDown = (e)=>{
                if (!e.currentTarget.contains(e.target)) return;
                if (e.button === 0) {
                    // Chrome and Firefox on touch Windows devices require mouse down events
                    // to be canceled in addition to pointer events, or an extra asynchronous
                    // focus event will be fired.
                    if ($f6c31cce2adf654f$var$shouldPreventDefault(e.currentTarget)) e.preventDefault();
                    e.stopPropagation();
                }
            };
            pressProps.onPointerUp = (e)=>{
                // iOS fires pointerup with zero width and height, so check the pointerType recorded during pointerdown.
                if (!e.currentTarget.contains(e.target) || state.pointerType === 'virtual') return;
                // Only handle left clicks
                // Safari on iOS sometimes fires pointerup events, even
                // when the touch isn't over the target, so double check.
                if (e.button === 0 && $f6c31cce2adf654f$var$isOverTarget(e, e.currentTarget)) triggerPressUp(e, state.pointerType || e.pointerType);
            };
            // Safari on iOS < 13.2 does not implement pointerenter/pointerleave events correctly.
            // Use pointer move events instead to implement our own hit testing.
            // See https://bugs.webkit.org/show_bug.cgi?id=199803
            let onPointerMove = (e)=>{
                if (e.pointerId !== state.activePointerId) return;
                if (state.target && $f6c31cce2adf654f$var$isOverTarget(e, state.target)) {
                    if (!state.isOverTarget && state.pointerType != null) {
                        state.isOverTarget = true;
                        triggerPressStart($f6c31cce2adf654f$var$createEvent(state.target, e), state.pointerType);
                    }
                } else if (state.target && state.isOverTarget && state.pointerType != null) {
                    state.isOverTarget = false;
                    triggerPressEnd($f6c31cce2adf654f$var$createEvent(state.target, e), state.pointerType, false);
                    cancelOnPointerExit(e);
                }
            };
            let onPointerUp = (e)=>{
                if (e.pointerId === state.activePointerId && state.isPressed && e.button === 0 && state.target) {
                    if ($f6c31cce2adf654f$var$isOverTarget(e, state.target) && state.pointerType != null) triggerPressEnd($f6c31cce2adf654f$var$createEvent(state.target, e), state.pointerType);
                    else if (state.isOverTarget && state.pointerType != null) triggerPressEnd($f6c31cce2adf654f$var$createEvent(state.target, e), state.pointerType, false);
                    state.isPressed = false;
                    state.isOverTarget = false;
                    state.activePointerId = null;
                    state.pointerType = null;
                    removeAllGlobalListeners();
                    if (!allowTextSelectionOnPress) ($14c0b72509d70225$export$b0d6fa1ab32e3295)(state.target);
                }
            };
            let onPointerCancel = (e)=>{
                cancel(e);
            };
            pressProps.onDragStart = (e)=>{
                if (!e.currentTarget.contains(e.target)) return;
                // Safari does not call onPointerCancel when a drag starts, whereas Chrome and Firefox do.
                cancel(e);
            };
        } else {
            pressProps.onMouseDown = (e)=>{
                // Only handle left clicks
                if (e.button !== 0 || !e.currentTarget.contains(e.target)) return;
                // Due to browser inconsistencies, especially on mobile browsers, we prevent
                // default on mouse down and handle focusing the pressable element ourselves.
                if ($f6c31cce2adf654f$var$shouldPreventDefault(e.currentTarget)) e.preventDefault();
                if (state.ignoreEmulatedMouseEvents) {
                    e.stopPropagation();
                    return;
                }
                state.isPressed = true;
                state.isOverTarget = true;
                state.target = e.currentTarget;
                state.pointerType = ($6a7db85432448f7f$export$60278871457622de)(e.nativeEvent) ? 'virtual' : 'mouse';
                if (!isDisabled && !preventFocusOnPress) ($7215afc6de606d6b$export$de79e2c695e052f3)(e.currentTarget);
                let shouldStopPropagation = triggerPressStart(e, state.pointerType);
                if (shouldStopPropagation) e.stopPropagation();
                addGlobalListener(($431fbd86ca7dc216$export$b204af158042fbac)(e.currentTarget), 'mouseup', onMouseUp, false);
            };
            pressProps.onMouseEnter = (e)=>{
                if (!e.currentTarget.contains(e.target)) return;
                let shouldStopPropagation = true;
                if (state.isPressed && !state.ignoreEmulatedMouseEvents && state.pointerType != null) {
                    state.isOverTarget = true;
                    shouldStopPropagation = triggerPressStart(e, state.pointerType);
                }
                if (shouldStopPropagation) e.stopPropagation();
            };
            pressProps.onMouseLeave = (e)=>{
                if (!e.currentTarget.contains(e.target)) return;
                let shouldStopPropagation = true;
                if (state.isPressed && !state.ignoreEmulatedMouseEvents && state.pointerType != null) {
                    state.isOverTarget = false;
                    shouldStopPropagation = triggerPressEnd(e, state.pointerType, false);
                    cancelOnPointerExit(e);
                }
                if (shouldStopPropagation) e.stopPropagation();
            };
            pressProps.onMouseUp = (e)=>{
                if (!e.currentTarget.contains(e.target)) return;
                if (!state.ignoreEmulatedMouseEvents && e.button === 0) triggerPressUp(e, state.pointerType || 'mouse');
            };
            let onMouseUp = (e)=>{
                // Only handle left clicks
                if (e.button !== 0) return;
                state.isPressed = false;
                removeAllGlobalListeners();
                if (state.ignoreEmulatedMouseEvents) {
                    state.ignoreEmulatedMouseEvents = false;
                    return;
                }
                if (state.target && $f6c31cce2adf654f$var$isOverTarget(e, state.target) && state.pointerType != null) triggerPressEnd($f6c31cce2adf654f$var$createEvent(state.target, e), state.pointerType);
                else if (state.target && state.isOverTarget && state.pointerType != null) triggerPressEnd($f6c31cce2adf654f$var$createEvent(state.target, e), state.pointerType, false);
                state.isOverTarget = false;
            };
            pressProps.onTouchStart = (e)=>{
                if (!e.currentTarget.contains(e.target)) return;
                let touch = $f6c31cce2adf654f$var$getTouchFromEvent(e.nativeEvent);
                if (!touch) return;
                state.activePointerId = touch.identifier;
                state.ignoreEmulatedMouseEvents = true;
                state.isOverTarget = true;
                state.isPressed = true;
                state.target = e.currentTarget;
                state.pointerType = 'touch';
                // Due to browser inconsistencies, especially on mobile browsers, we prevent default
                // on the emulated mouse event and handle focusing the pressable element ourselves.
                if (!isDisabled && !preventFocusOnPress) ($7215afc6de606d6b$export$de79e2c695e052f3)(e.currentTarget);
                if (!allowTextSelectionOnPress) ($14c0b72509d70225$export$16a4697467175487)(state.target);
                let shouldStopPropagation = triggerPressStart($f6c31cce2adf654f$var$createTouchEvent(state.target, e), state.pointerType);
                if (shouldStopPropagation) e.stopPropagation();
                addGlobalListener(($431fbd86ca7dc216$export$f21a1ffae260145a)(e.currentTarget), 'scroll', onScroll, true);
            };
            pressProps.onTouchMove = (e)=>{
                if (!e.currentTarget.contains(e.target)) return;
                if (!state.isPressed) {
                    e.stopPropagation();
                    return;
                }
                let touch = $f6c31cce2adf654f$var$getTouchById(e.nativeEvent, state.activePointerId);
                let shouldStopPropagation = true;
                if (touch && $f6c31cce2adf654f$var$isOverTarget(touch, e.currentTarget)) {
                    if (!state.isOverTarget && state.pointerType != null) {
                        state.isOverTarget = true;
                        shouldStopPropagation = triggerPressStart($f6c31cce2adf654f$var$createTouchEvent(state.target, e), state.pointerType);
                    }
                } else if (state.isOverTarget && state.pointerType != null) {
                    state.isOverTarget = false;
                    shouldStopPropagation = triggerPressEnd($f6c31cce2adf654f$var$createTouchEvent(state.target, e), state.pointerType, false);
                    cancelOnPointerExit($f6c31cce2adf654f$var$createTouchEvent(state.target, e));
                }
                if (shouldStopPropagation) e.stopPropagation();
            };
            pressProps.onTouchEnd = (e)=>{
                if (!e.currentTarget.contains(e.target)) return;
                if (!state.isPressed) {
                    e.stopPropagation();
                    return;
                }
                let touch = $f6c31cce2adf654f$var$getTouchById(e.nativeEvent, state.activePointerId);
                let shouldStopPropagation = true;
                if (touch && $f6c31cce2adf654f$var$isOverTarget(touch, e.currentTarget) && state.pointerType != null) {
                    triggerPressUp($f6c31cce2adf654f$var$createTouchEvent(state.target, e), state.pointerType);
                    shouldStopPropagation = triggerPressEnd($f6c31cce2adf654f$var$createTouchEvent(state.target, e), state.pointerType);
                } else if (state.isOverTarget && state.pointerType != null) shouldStopPropagation = triggerPressEnd($f6c31cce2adf654f$var$createTouchEvent(state.target, e), state.pointerType, false);
                if (shouldStopPropagation) e.stopPropagation();
                state.isPressed = false;
                state.activePointerId = null;
                state.isOverTarget = false;
                state.ignoreEmulatedMouseEvents = true;
                if (state.target && !allowTextSelectionOnPress) ($14c0b72509d70225$export$b0d6fa1ab32e3295)(state.target);
                removeAllGlobalListeners();
            };
            pressProps.onTouchCancel = (e)=>{
                if (!e.currentTarget.contains(e.target)) return;
                e.stopPropagation();
                if (state.isPressed) cancel($f6c31cce2adf654f$var$createTouchEvent(state.target, e));
            };
            let onScroll = (e)=>{
                if (state.isPressed && e.target.contains(state.target)) cancel({
                    currentTarget: state.target,
                    shiftKey: false,
                    ctrlKey: false,
                    metaKey: false,
                    altKey: false
                });
            };
            pressProps.onDragStart = (e)=>{
                if (!e.currentTarget.contains(e.target)) return;
                cancel(e);
            };
        }
        return pressProps;
    }, [
        addGlobalListener,
        isDisabled,
        preventFocusOnPress,
        removeAllGlobalListeners,
        allowTextSelectionOnPress,
        cancel,
        cancelOnPointerExit,
        triggerPressEnd,
        triggerPressStart,
        triggerPressUp
    ]);
    // Remove user-select: none in case component unmounts immediately after pressStart
    // eslint-disable-next-line arrow-body-style
    (reactExports.useEffect)(()=>{
        return ()=>{
            var _ref_current_target;
            if (!allowTextSelectionOnPress) // eslint-disable-next-line react-hooks/exhaustive-deps
            ($14c0b72509d70225$export$b0d6fa1ab32e3295)((_ref_current_target = ref.current.target) !== null && _ref_current_target !== void 0 ? _ref_current_target : undefined);
        };
    }, [
        allowTextSelectionOnPress
    ]);
    return {
        isPressed: isPressedProp || isPressed,
        pressProps: ($3ef42575df84b30b$export$9d1611c77c2fe928)(domProps, pressProps)
    };
}
function $f6c31cce2adf654f$var$isHTMLAnchorLink(target) {
    return target.tagName === 'A' && target.hasAttribute('href');
}
function $f6c31cce2adf654f$var$isValidKeyboardEvent(event, currentTarget) {
    const { key: key, code: code } = event;
    const element = currentTarget;
    const role = element.getAttribute('role');
    // Accessibility for keyboards. Space and Enter only.
    // "Spacebar" is for IE 11
    return (key === 'Enter' || key === ' ' || key === 'Spacebar' || code === 'Space') && !(element instanceof ($431fbd86ca7dc216$export$f21a1ffae260145a)(element).HTMLInputElement && !$f6c31cce2adf654f$var$isValidInputKey(element, key) || element instanceof ($431fbd86ca7dc216$export$f21a1ffae260145a)(element).HTMLTextAreaElement || element.isContentEditable) && // Links should only trigger with Enter key
    !((role === 'link' || !role && $f6c31cce2adf654f$var$isHTMLAnchorLink(element)) && key !== 'Enter');
}
function $f6c31cce2adf654f$var$getTouchFromEvent(event) {
    const { targetTouches: targetTouches } = event;
    if (targetTouches.length > 0) return targetTouches[0];
    return null;
}
function $f6c31cce2adf654f$var$getTouchById(event, pointerId) {
    const changedTouches = event.changedTouches;
    for(let i = 0; i < changedTouches.length; i++){
        const touch = changedTouches[i];
        if (touch.identifier === pointerId) return touch;
    }
    return null;
}
function $f6c31cce2adf654f$var$createTouchEvent(target, e) {
    let clientX = 0;
    let clientY = 0;
    if (e.targetTouches && e.targetTouches.length === 1) {
        clientX = e.targetTouches[0].clientX;
        clientY = e.targetTouches[0].clientY;
    }
    return {
        currentTarget: target,
        shiftKey: e.shiftKey,
        ctrlKey: e.ctrlKey,
        metaKey: e.metaKey,
        altKey: e.altKey,
        clientX: clientX,
        clientY: clientY
    };
}
function $f6c31cce2adf654f$var$createEvent(target, e) {
    let clientX = e.clientX;
    let clientY = e.clientY;
    return {
        currentTarget: target,
        shiftKey: e.shiftKey,
        ctrlKey: e.ctrlKey,
        metaKey: e.metaKey,
        altKey: e.altKey,
        clientX: clientX,
        clientY: clientY
    };
}
function $f6c31cce2adf654f$var$getPointClientRect(point) {
    let offsetX = 0;
    let offsetY = 0;
    if (point.width !== undefined) offsetX = point.width / 2;
    else if (point.radiusX !== undefined) offsetX = point.radiusX;
    if (point.height !== undefined) offsetY = point.height / 2;
    else if (point.radiusY !== undefined) offsetY = point.radiusY;
    return {
        top: point.clientY - offsetY,
        right: point.clientX + offsetX,
        bottom: point.clientY + offsetY,
        left: point.clientX - offsetX
    };
}
function $f6c31cce2adf654f$var$areRectanglesOverlapping(a, b) {
    // check if they cannot overlap on x axis
    if (a.left > b.right || b.left > a.right) return false;
    // check if they cannot overlap on y axis
    if (a.top > b.bottom || b.top > a.bottom) return false;
    return true;
}
function $f6c31cce2adf654f$var$isOverTarget(point, target) {
    let rect = target.getBoundingClientRect();
    let pointRect = $f6c31cce2adf654f$var$getPointClientRect(point);
    return $f6c31cce2adf654f$var$areRectanglesOverlapping(rect, pointRect);
}
function $f6c31cce2adf654f$var$shouldPreventDefault(target) {
    // We cannot prevent default if the target is a draggable element.
    return !(target instanceof HTMLElement) || !target.hasAttribute('draggable');
}
function $f6c31cce2adf654f$var$shouldPreventDefaultKeyboard(target, key) {
    if (target instanceof HTMLInputElement) return !$f6c31cce2adf654f$var$isValidInputKey(target, key);
    if (target instanceof HTMLButtonElement) return target.type !== 'submit' && target.type !== 'reset';
    if ($f6c31cce2adf654f$var$isHTMLAnchorLink(target)) return false;
    return true;
}
const $f6c31cce2adf654f$var$nonTextInputTypes = new Set([
    'checkbox',
    'radio',
    'range',
    'color',
    'file',
    'image',
    'button',
    'submit',
    'reset'
]);
function $f6c31cce2adf654f$var$isValidInputKey(target, key) {
    // Only space should toggle checkboxes and radios, not enter.
    return target.type === 'checkbox' || target.type === 'radio' ? key === ' ' : $f6c31cce2adf654f$var$nonTextInputTypes.has(target.type);
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 


const $f1ab8c75478c6f73$export$3351871ee4b288b8 = /*#__PURE__*/ (React).forwardRef(({ children: children, ...props }, ref)=>{
    let isRegistered = (reactExports.useRef)(false);
    let prevContext = (reactExports.useContext)(($ae1eeba8b9eafd08$export$5165eccb35aaadb5));
    ref = ($df56164dff5785e2$export$4338b53315abf666)(ref || (prevContext === null || prevContext === void 0 ? void 0 : prevContext.ref));
    let context = ($3ef42575df84b30b$export$9d1611c77c2fe928)(prevContext || {}, {
        ...props,
        ref: ref,
        register () {
            isRegistered.current = true;
            if (prevContext) prevContext.register();
        }
    });
    ($e7801be82b4b2a53$export$4debdb1a3f0fa79e)(prevContext, ref);
    (reactExports.useEffect)(()=>{
        if (!isRegistered.current) {
            console.warn("A PressResponder was rendered without a pressable child. Either call the usePress hook, or wrap your DOM node with <Pressable> component.");
            isRegistered.current = true; // only warn once in strict mode.
        }
    }, []);
    return /*#__PURE__*/ (React).createElement(($ae1eeba8b9eafd08$export$5165eccb35aaadb5).Provider, {
        value: context
    }, children);
});
function $f1ab8c75478c6f73$export$cf75428e0b9ed1ea({ children: children }) {
    let context = (reactExports.useMemo)(()=>({
            register: ()=>{}
        }), []);
    return /*#__PURE__*/ (React).createElement(($ae1eeba8b9eafd08$export$5165eccb35aaadb5).Provider, {
        value: context
    }, children);
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 

class $8a9cb279dc87e130$export$905e7fc544a71f36 {
    isDefaultPrevented() {
        return this.nativeEvent.defaultPrevented;
    }
    preventDefault() {
        this.defaultPrevented = true;
        this.nativeEvent.preventDefault();
    }
    stopPropagation() {
        this.nativeEvent.stopPropagation();
        this.isPropagationStopped = ()=>true;
    }
    isPropagationStopped() {
        return false;
    }
    persist() {}
    constructor(type, nativeEvent){
        this.nativeEvent = nativeEvent;
        this.target = nativeEvent.target;
        this.currentTarget = nativeEvent.currentTarget;
        this.relatedTarget = nativeEvent.relatedTarget;
        this.bubbles = nativeEvent.bubbles;
        this.cancelable = nativeEvent.cancelable;
        this.defaultPrevented = nativeEvent.defaultPrevented;
        this.eventPhase = nativeEvent.eventPhase;
        this.isTrusted = nativeEvent.isTrusted;
        this.timeStamp = nativeEvent.timeStamp;
        this.type = type;
    }
}
function $8a9cb279dc87e130$export$715c682d09d639cc(onBlur) {
    let stateRef = (reactExports.useRef)({
        isFocused: false,
        observer: null
    });
    // Clean up MutationObserver on unmount. See below.
    // eslint-disable-next-line arrow-body-style
    ($f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(()=>{
        const state = stateRef.current;
        return ()=>{
            if (state.observer) {
                state.observer.disconnect();
                state.observer = null;
            }
        };
    }, []);
    let dispatchBlur = ($8ae05eaa5c114e9c$export$7f54fc3180508a52)((e)=>{
        onBlur === null || onBlur === void 0 ? void 0 : onBlur(e);
    });
    // This function is called during a React onFocus event.
    return (reactExports.useCallback)((e)=>{
        // React does not fire onBlur when an element is disabled. https://github.com/facebook/react/issues/9142
        // Most browsers fire a native focusout event in this case, except for Firefox. In that case, we use a
        // MutationObserver to watch for the disabled attribute, and dispatch these events ourselves.
        // For browsers that do, focusout fires before the MutationObserver, so onBlur should not fire twice.
        if (e.target instanceof HTMLButtonElement || e.target instanceof HTMLInputElement || e.target instanceof HTMLTextAreaElement || e.target instanceof HTMLSelectElement) {
            stateRef.current.isFocused = true;
            let target = e.target;
            let onBlurHandler = (e)=>{
                stateRef.current.isFocused = false;
                if (target.disabled) // For backward compatibility, dispatch a (fake) React synthetic event.
                dispatchBlur(new $8a9cb279dc87e130$export$905e7fc544a71f36('blur', e));
                // We no longer need the MutationObserver once the target is blurred.
                if (stateRef.current.observer) {
                    stateRef.current.observer.disconnect();
                    stateRef.current.observer = null;
                }
            };
            target.addEventListener('focusout', onBlurHandler, {
                once: true
            });
            stateRef.current.observer = new MutationObserver(()=>{
                if (stateRef.current.isFocused && target.disabled) {
                    var _stateRef_current_observer;
                    (_stateRef_current_observer = stateRef.current.observer) === null || _stateRef_current_observer === void 0 ? void 0 : _stateRef_current_observer.disconnect();
                    let relatedTargetEl = target === document.activeElement ? null : document.activeElement;
                    target.dispatchEvent(new FocusEvent('blur', {
                        relatedTarget: relatedTargetEl
                    }));
                    target.dispatchEvent(new FocusEvent('focusout', {
                        bubbles: true,
                        relatedTarget: relatedTargetEl
                    }));
                }
            });
            stateRef.current.observer.observe(target, {
                attributes: true,
                attributeFilter: [
                    'disabled'
                ]
            });
        }
    }, [
        dispatchBlur
    ]);
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ // Portions of the code in this file are based on code from react.
// Original licensing for the following can be found in the
// NOTICE file in the root directory of this source tree.
// See https://github.com/facebook/react/tree/cc7c1aece46a6b69b41958d731e0fd27c94bfc6c/packages/react-interactions



function $a1ea59d68270f0dd$export$f8168d8dd8fd66e6(props) {
    let { isDisabled: isDisabled, onFocus: onFocusProp, onBlur: onBlurProp, onFocusChange: onFocusChange } = props;
    const onBlur = (reactExports.useCallback)((e)=>{
        if (e.target === e.currentTarget) {
            if (onBlurProp) onBlurProp(e);
            if (onFocusChange) onFocusChange(false);
            return true;
        }
    }, [
        onBlurProp,
        onFocusChange
    ]);
    const onSyntheticFocus = ($8a9cb279dc87e130$export$715c682d09d639cc)(onBlur);
    const onFocus = (reactExports.useCallback)((e)=>{
        // Double check that document.activeElement actually matches e.target in case a previously chained
        // focus handler already moved focus somewhere else.
        const ownerDocument = ($431fbd86ca7dc216$export$b204af158042fbac)(e.target);
        if (e.target === e.currentTarget && ownerDocument.activeElement === e.target) {
            if (onFocusProp) onFocusProp(e);
            if (onFocusChange) onFocusChange(true);
            onSyntheticFocus(e);
        }
    }, [
        onFocusChange,
        onFocusProp,
        onSyntheticFocus
    ]);
    return {
        focusProps: {
            onFocus: !isDisabled && (onFocusProp || onFocusChange || onBlurProp) ? onFocus : undefined,
            onBlur: !isDisabled && (onBlurProp || onFocusChange) ? onBlur : undefined
        }
    };
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ // Portions of the code in this file are based on code from react.
// Original licensing for the following can be found in the
// NOTICE file in the root directory of this source tree.
// See https://github.com/facebook/react/tree/cc7c1aece46a6b69b41958d731e0fd27c94bfc6c/packages/react-interactions



let $507fabe10e71c6fb$var$currentModality = null;
let $507fabe10e71c6fb$var$changeHandlers = new Set();
let $507fabe10e71c6fb$export$d90243b58daecda7 = new Map(); // We use a map here to support setting event listeners across multiple document objects.
let $507fabe10e71c6fb$var$hasEventBeforeFocus = false;
let $507fabe10e71c6fb$var$hasBlurredWindowRecently = false;
// Only Tab or Esc keys will make focus visible on text input elements
const $507fabe10e71c6fb$var$FOCUS_VISIBLE_INPUT_KEYS = {
    Tab: true,
    Escape: true
};
function $507fabe10e71c6fb$var$triggerChangeHandlers(modality, e) {
    for (let handler of $507fabe10e71c6fb$var$changeHandlers)handler(modality, e);
}
/**
 * Helper function to determine if a KeyboardEvent is unmodified and could make keyboard focus styles visible.
 */ function $507fabe10e71c6fb$var$isValidKey(e) {
    // Control and Shift keys trigger when navigating back to the tab with keyboard.
    return !(e.metaKey || !($c87311424ea30a05$export$9ac100e40613ea10)() && e.altKey || e.ctrlKey || e.key === 'Control' || e.key === 'Shift' || e.key === 'Meta');
}
function $507fabe10e71c6fb$var$handleKeyboardEvent(e) {
    $507fabe10e71c6fb$var$hasEventBeforeFocus = true;
    if ($507fabe10e71c6fb$var$isValidKey(e)) {
        $507fabe10e71c6fb$var$currentModality = 'keyboard';
        $507fabe10e71c6fb$var$triggerChangeHandlers('keyboard', e);
    }
}
function $507fabe10e71c6fb$var$handlePointerEvent(e) {
    $507fabe10e71c6fb$var$currentModality = 'pointer';
    if (e.type === 'mousedown' || e.type === 'pointerdown') {
        $507fabe10e71c6fb$var$hasEventBeforeFocus = true;
        $507fabe10e71c6fb$var$triggerChangeHandlers('pointer', e);
    }
}
function $507fabe10e71c6fb$var$handleClickEvent(e) {
    if (($6a7db85432448f7f$export$60278871457622de)(e)) {
        $507fabe10e71c6fb$var$hasEventBeforeFocus = true;
        $507fabe10e71c6fb$var$currentModality = 'virtual';
    }
}
function $507fabe10e71c6fb$var$handleFocusEvent(e) {
    // Firefox fires two extra focus events when the user first clicks into an iframe:
    // first on the window, then on the document. We ignore these events so they don't
    // cause keyboard focus rings to appear.
    if (e.target === window || e.target === document) return;
    // If a focus event occurs without a preceding keyboard or pointer event, switch to virtual modality.
    // This occurs, for example, when navigating a form with the next/previous buttons on iOS.
    if (!$507fabe10e71c6fb$var$hasEventBeforeFocus && !$507fabe10e71c6fb$var$hasBlurredWindowRecently) {
        $507fabe10e71c6fb$var$currentModality = 'virtual';
        $507fabe10e71c6fb$var$triggerChangeHandlers('virtual', e);
    }
    $507fabe10e71c6fb$var$hasEventBeforeFocus = false;
    $507fabe10e71c6fb$var$hasBlurredWindowRecently = false;
}
function $507fabe10e71c6fb$var$handleWindowBlur() {
    // When the window is blurred, reset state. This is necessary when tabbing out of the window,
    // for example, since a subsequent focus event won't be fired.
    $507fabe10e71c6fb$var$hasEventBeforeFocus = false;
    $507fabe10e71c6fb$var$hasBlurredWindowRecently = true;
}
/**
 * Setup global event listeners to control when keyboard focus style should be visible.
 */ function $507fabe10e71c6fb$var$setupGlobalFocusEvents(element) {
    if (typeof window === 'undefined' || $507fabe10e71c6fb$export$d90243b58daecda7.get(($431fbd86ca7dc216$export$f21a1ffae260145a)(element))) return;
    const windowObject = ($431fbd86ca7dc216$export$f21a1ffae260145a)(element);
    const documentObject = ($431fbd86ca7dc216$export$b204af158042fbac)(element);
    // Programmatic focus() calls shouldn't affect the current input modality.
    // However, we need to detect other cases when a focus event occurs without
    // a preceding user event (e.g. screen reader focus). Overriding the focus
    // method on HTMLElement.prototype is a bit hacky, but works.
    let focus = windowObject.HTMLElement.prototype.focus;
    windowObject.HTMLElement.prototype.focus = function() {
        $507fabe10e71c6fb$var$hasEventBeforeFocus = true;
        focus.apply(this, arguments);
    };
    documentObject.addEventListener('keydown', $507fabe10e71c6fb$var$handleKeyboardEvent, true);
    documentObject.addEventListener('keyup', $507fabe10e71c6fb$var$handleKeyboardEvent, true);
    documentObject.addEventListener('click', $507fabe10e71c6fb$var$handleClickEvent, true);
    // Register focus events on the window so they are sure to happen
    // before React's event listeners (registered on the document).
    windowObject.addEventListener('focus', $507fabe10e71c6fb$var$handleFocusEvent, true);
    windowObject.addEventListener('blur', $507fabe10e71c6fb$var$handleWindowBlur, false);
    if (typeof PointerEvent !== 'undefined') {
        documentObject.addEventListener('pointerdown', $507fabe10e71c6fb$var$handlePointerEvent, true);
        documentObject.addEventListener('pointermove', $507fabe10e71c6fb$var$handlePointerEvent, true);
        documentObject.addEventListener('pointerup', $507fabe10e71c6fb$var$handlePointerEvent, true);
    } else {
        documentObject.addEventListener('mousedown', $507fabe10e71c6fb$var$handlePointerEvent, true);
        documentObject.addEventListener('mousemove', $507fabe10e71c6fb$var$handlePointerEvent, true);
        documentObject.addEventListener('mouseup', $507fabe10e71c6fb$var$handlePointerEvent, true);
    }
    // Add unmount handler
    windowObject.addEventListener('beforeunload', ()=>{
        $507fabe10e71c6fb$var$tearDownWindowFocusTracking(element);
    }, {
        once: true
    });
    $507fabe10e71c6fb$export$d90243b58daecda7.set(windowObject, {
        focus: focus
    });
}
const $507fabe10e71c6fb$var$tearDownWindowFocusTracking = (element, loadListener)=>{
    const windowObject = ($431fbd86ca7dc216$export$f21a1ffae260145a)(element);
    const documentObject = ($431fbd86ca7dc216$export$b204af158042fbac)(element);
    if (loadListener) documentObject.removeEventListener('DOMContentLoaded', loadListener);
    if (!$507fabe10e71c6fb$export$d90243b58daecda7.has(windowObject)) return;
    windowObject.HTMLElement.prototype.focus = $507fabe10e71c6fb$export$d90243b58daecda7.get(windowObject).focus;
    documentObject.removeEventListener('keydown', $507fabe10e71c6fb$var$handleKeyboardEvent, true);
    documentObject.removeEventListener('keyup', $507fabe10e71c6fb$var$handleKeyboardEvent, true);
    documentObject.removeEventListener('click', $507fabe10e71c6fb$var$handleClickEvent, true);
    windowObject.removeEventListener('focus', $507fabe10e71c6fb$var$handleFocusEvent, true);
    windowObject.removeEventListener('blur', $507fabe10e71c6fb$var$handleWindowBlur, false);
    if (typeof PointerEvent !== 'undefined') {
        documentObject.removeEventListener('pointerdown', $507fabe10e71c6fb$var$handlePointerEvent, true);
        documentObject.removeEventListener('pointermove', $507fabe10e71c6fb$var$handlePointerEvent, true);
        documentObject.removeEventListener('pointerup', $507fabe10e71c6fb$var$handlePointerEvent, true);
    } else {
        documentObject.removeEventListener('mousedown', $507fabe10e71c6fb$var$handlePointerEvent, true);
        documentObject.removeEventListener('mousemove', $507fabe10e71c6fb$var$handlePointerEvent, true);
        documentObject.removeEventListener('mouseup', $507fabe10e71c6fb$var$handlePointerEvent, true);
    }
    $507fabe10e71c6fb$export$d90243b58daecda7.delete(windowObject);
};
function $507fabe10e71c6fb$export$2f1888112f558a7d(element) {
    const documentObject = ($431fbd86ca7dc216$export$b204af158042fbac)(element);
    let loadListener;
    if (documentObject.readyState !== 'loading') $507fabe10e71c6fb$var$setupGlobalFocusEvents(element);
    else {
        loadListener = ()=>{
            $507fabe10e71c6fb$var$setupGlobalFocusEvents(element);
        };
        documentObject.addEventListener('DOMContentLoaded', loadListener);
    }
    return ()=>$507fabe10e71c6fb$var$tearDownWindowFocusTracking(element, loadListener);
}
// Server-side rendering does not have the document object defined
// eslint-disable-next-line no-restricted-globals
if (typeof document !== 'undefined') $507fabe10e71c6fb$export$2f1888112f558a7d();
function $507fabe10e71c6fb$export$b9b3dfddab17db27() {
    return $507fabe10e71c6fb$var$currentModality !== 'pointer';
}
function $507fabe10e71c6fb$export$630ff653c5ada6a9() {
    return $507fabe10e71c6fb$var$currentModality;
}
function $507fabe10e71c6fb$export$8397ddfc504fdb9a(modality) {
    $507fabe10e71c6fb$var$currentModality = modality;
    $507fabe10e71c6fb$var$triggerChangeHandlers(modality, null);
}
function $507fabe10e71c6fb$export$98e20ec92f614cfe() {
    $507fabe10e71c6fb$var$setupGlobalFocusEvents();
    let [modality, setModality] = (reactExports.useState)($507fabe10e71c6fb$var$currentModality);
    (reactExports.useEffect)(()=>{
        let handler = ()=>{
            setModality($507fabe10e71c6fb$var$currentModality);
        };
        $507fabe10e71c6fb$var$changeHandlers.add(handler);
        return ()=>{
            $507fabe10e71c6fb$var$changeHandlers.delete(handler);
        };
    }, []);
    return ($b5e257d569688ac6$export$535bd6ca7f90a273)() ? null : modality;
}
const $507fabe10e71c6fb$var$nonTextInputTypes = new Set([
    'checkbox',
    'radio',
    'range',
    'color',
    'file',
    'image',
    'button',
    'submit',
    'reset'
]);
/**
 * If this is attached to text input component, return if the event is a focus event (Tab/Escape keys pressed) so that
 * focus visible style can be properly set.
 */ function $507fabe10e71c6fb$var$isKeyboardFocusEvent(isTextInput, modality, e) {
    var _e_target;
    const IHTMLInputElement = typeof window !== 'undefined' ? ($431fbd86ca7dc216$export$f21a1ffae260145a)(e === null || e === void 0 ? void 0 : e.target).HTMLInputElement : HTMLInputElement;
    const IHTMLTextAreaElement = typeof window !== 'undefined' ? ($431fbd86ca7dc216$export$f21a1ffae260145a)(e === null || e === void 0 ? void 0 : e.target).HTMLTextAreaElement : HTMLTextAreaElement;
    const IHTMLElement = typeof window !== 'undefined' ? ($431fbd86ca7dc216$export$f21a1ffae260145a)(e === null || e === void 0 ? void 0 : e.target).HTMLElement : HTMLElement;
    const IKeyboardEvent = typeof window !== 'undefined' ? ($431fbd86ca7dc216$export$f21a1ffae260145a)(e === null || e === void 0 ? void 0 : e.target).KeyboardEvent : KeyboardEvent;
    isTextInput = isTextInput || (e === null || e === void 0 ? void 0 : e.target) instanceof IHTMLInputElement && !$507fabe10e71c6fb$var$nonTextInputTypes.has(e === null || e === void 0 ? void 0 : (_e_target = e.target) === null || _e_target === void 0 ? void 0 : _e_target.type) || (e === null || e === void 0 ? void 0 : e.target) instanceof IHTMLTextAreaElement || (e === null || e === void 0 ? void 0 : e.target) instanceof IHTMLElement && (e === null || e === void 0 ? void 0 : e.target.isContentEditable);
    return !(isTextInput && modality === 'keyboard' && e instanceof IKeyboardEvent && !$507fabe10e71c6fb$var$FOCUS_VISIBLE_INPUT_KEYS[e.key]);
}
function $507fabe10e71c6fb$export$ec71b4b83ac08ec3(fn, deps, opts) {
    $507fabe10e71c6fb$var$setupGlobalFocusEvents();
    (reactExports.useEffect)(()=>{
        let handler = (modality, e)=>{
            if (!$507fabe10e71c6fb$var$isKeyboardFocusEvent(!!(opts === null || opts === void 0 ? void 0 : opts.isTextInput), modality, e)) return;
            fn($507fabe10e71c6fb$export$b9b3dfddab17db27());
        };
        $507fabe10e71c6fb$var$changeHandlers.add(handler);
        return ()=>{
            $507fabe10e71c6fb$var$changeHandlers.delete(handler);
        };
    // eslint-disable-next-line react-hooks/exhaustive-deps
    }, deps);
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ // Portions of the code in this file are based on code from react.
// Original licensing for the following can be found in the
// NOTICE file in the root directory of this source tree.
// See https://github.com/facebook/react/tree/cc7c1aece46a6b69b41958d731e0fd27c94bfc6c/packages/react-interactions


function $9ab94262bd0047c7$export$420e68273165f4ec(props) {
    let { isDisabled: isDisabled, onBlurWithin: onBlurWithin, onFocusWithin: onFocusWithin, onFocusWithinChange: onFocusWithinChange } = props;
    let state = (reactExports.useRef)({
        isFocusWithin: false
    });
    let onBlur = (reactExports.useCallback)((e)=>{
        // We don't want to trigger onBlurWithin and then immediately onFocusWithin again
        // when moving focus inside the element. Only trigger if the currentTarget doesn't
        // include the relatedTarget (where focus is moving).
        if (state.current.isFocusWithin && !e.currentTarget.contains(e.relatedTarget)) {
            state.current.isFocusWithin = false;
            if (onBlurWithin) onBlurWithin(e);
            if (onFocusWithinChange) onFocusWithinChange(false);
        }
    }, [
        onBlurWithin,
        onFocusWithinChange,
        state
    ]);
    let onSyntheticFocus = ($8a9cb279dc87e130$export$715c682d09d639cc)(onBlur);
    let onFocus = (reactExports.useCallback)((e)=>{
        // Double check that document.activeElement actually matches e.target in case a previously chained
        // focus handler already moved focus somewhere else.
        if (!state.current.isFocusWithin && document.activeElement === e.target) {
            if (onFocusWithin) onFocusWithin(e);
            if (onFocusWithinChange) onFocusWithinChange(true);
            state.current.isFocusWithin = true;
            onSyntheticFocus(e);
        }
    }, [
        onFocusWithin,
        onFocusWithinChange,
        onSyntheticFocus
    ]);
    if (isDisabled) return {
        focusWithinProps: {
            // These should not have been null, that would conflict in mergeProps
            onFocus: undefined,
            onBlur: undefined
        }
    };
    return {
        focusWithinProps: {
            onFocus: onFocus,
            onBlur: onBlur
        }
    };
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ // Portions of the code in this file are based on code from react.
// Original licensing for the following can be found in the
// NOTICE file in the root directory of this source tree.
// See https://github.com/facebook/react/tree/cc7c1aece46a6b69b41958d731e0fd27c94bfc6c/packages/react-interactions

// iOS fires onPointerEnter twice: once with pointerType="touch" and again with pointerType="mouse".
// We want to ignore these emulated events so they do not trigger hover behavior.
// See https://bugs.webkit.org/show_bug.cgi?id=214609.
let $6179b936705e76d3$var$globalIgnoreEmulatedMouseEvents = false;
let $6179b936705e76d3$var$hoverCount = 0;
function $6179b936705e76d3$var$setGlobalIgnoreEmulatedMouseEvents() {
    $6179b936705e76d3$var$globalIgnoreEmulatedMouseEvents = true;
    // Clear globalIgnoreEmulatedMouseEvents after a short timeout. iOS fires onPointerEnter
    // with pointerType="mouse" immediately after onPointerUp and before onFocus. On other
    // devices that don't have this quirk, we don't want to ignore a mouse hover sometime in
    // the distant future because a user previously touched the element.
    setTimeout(()=>{
        $6179b936705e76d3$var$globalIgnoreEmulatedMouseEvents = false;
    }, 50);
}
function $6179b936705e76d3$var$handleGlobalPointerEvent(e) {
    if (e.pointerType === 'touch') $6179b936705e76d3$var$setGlobalIgnoreEmulatedMouseEvents();
}
function $6179b936705e76d3$var$setupGlobalTouchEvents() {
    if (typeof document === 'undefined') return;
    if (typeof PointerEvent !== 'undefined') document.addEventListener('pointerup', $6179b936705e76d3$var$handleGlobalPointerEvent);
    else document.addEventListener('touchend', $6179b936705e76d3$var$setGlobalIgnoreEmulatedMouseEvents);
    $6179b936705e76d3$var$hoverCount++;
    return ()=>{
        $6179b936705e76d3$var$hoverCount--;
        if ($6179b936705e76d3$var$hoverCount > 0) return;
        if (typeof PointerEvent !== 'undefined') document.removeEventListener('pointerup', $6179b936705e76d3$var$handleGlobalPointerEvent);
        else document.removeEventListener('touchend', $6179b936705e76d3$var$setGlobalIgnoreEmulatedMouseEvents);
    };
}
function $6179b936705e76d3$export$ae780daf29e6d456(props) {
    let { onHoverStart: onHoverStart, onHoverChange: onHoverChange, onHoverEnd: onHoverEnd, isDisabled: isDisabled } = props;
    let [isHovered, setHovered] = (reactExports.useState)(false);
    let state = (reactExports.useRef)({
        isHovered: false,
        ignoreEmulatedMouseEvents: false,
        pointerType: '',
        target: null
    }).current;
    (reactExports.useEffect)($6179b936705e76d3$var$setupGlobalTouchEvents, []);
    let { hoverProps: hoverProps, triggerHoverEnd: triggerHoverEnd } = (reactExports.useMemo)(()=>{
        let triggerHoverStart = (event, pointerType)=>{
            state.pointerType = pointerType;
            if (isDisabled || pointerType === 'touch' || state.isHovered || !event.currentTarget.contains(event.target)) return;
            state.isHovered = true;
            let target = event.currentTarget;
            state.target = target;
            if (onHoverStart) onHoverStart({
                type: 'hoverstart',
                target: target,
                pointerType: pointerType
            });
            if (onHoverChange) onHoverChange(true);
            setHovered(true);
        };
        let triggerHoverEnd = (event, pointerType)=>{
            state.pointerType = '';
            state.target = null;
            if (pointerType === 'touch' || !state.isHovered) return;
            state.isHovered = false;
            let target = event.currentTarget;
            if (onHoverEnd) onHoverEnd({
                type: 'hoverend',
                target: target,
                pointerType: pointerType
            });
            if (onHoverChange) onHoverChange(false);
            setHovered(false);
        };
        let hoverProps = {};
        if (typeof PointerEvent !== 'undefined') {
            hoverProps.onPointerEnter = (e)=>{
                if ($6179b936705e76d3$var$globalIgnoreEmulatedMouseEvents && e.pointerType === 'mouse') return;
                triggerHoverStart(e, e.pointerType);
            };
            hoverProps.onPointerLeave = (e)=>{
                if (!isDisabled && e.currentTarget.contains(e.target)) triggerHoverEnd(e, e.pointerType);
            };
        } else {
            hoverProps.onTouchStart = ()=>{
                state.ignoreEmulatedMouseEvents = true;
            };
            hoverProps.onMouseEnter = (e)=>{
                if (!state.ignoreEmulatedMouseEvents && !$6179b936705e76d3$var$globalIgnoreEmulatedMouseEvents) triggerHoverStart(e, 'mouse');
                state.ignoreEmulatedMouseEvents = false;
            };
            hoverProps.onMouseLeave = (e)=>{
                if (!isDisabled && e.currentTarget.contains(e.target)) triggerHoverEnd(e, 'mouse');
            };
        }
        return {
            hoverProps: hoverProps,
            triggerHoverEnd: triggerHoverEnd
        };
    }, [
        onHoverStart,
        onHoverChange,
        onHoverEnd,
        isDisabled,
        state
    ]);
    (reactExports.useEffect)(()=>{
        // Call the triggerHoverEnd as soon as isDisabled changes to true
        // Safe to call triggerHoverEnd, it will early return if we aren't currently hovering
        if (isDisabled) triggerHoverEnd({
            currentTarget: state.target
        }, state.pointerType);
    // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [
        isDisabled
    ]);
    return {
        hoverProps: hoverProps,
        isHovered: isHovered
    };
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ // Portions of the code in this file are based on code from react.
// Original licensing for the following can be found in the
// NOTICE file in the root directory of this source tree.
// See https://github.com/facebook/react/tree/cc7c1aece46a6b69b41958d731e0fd27c94bfc6c/packages/react-interactions


function $e0b6e0b68ec7f50f$export$872b660ac5a1ff98(props) {
    let { ref: ref, onInteractOutside: onInteractOutside, isDisabled: isDisabled, onInteractOutsideStart: onInteractOutsideStart } = props;
    let stateRef = (reactExports.useRef)({
        isPointerDown: false,
        ignoreEmulatedMouseEvents: false
    });
    let onPointerDown = ($8ae05eaa5c114e9c$export$7f54fc3180508a52)((e)=>{
        if (onInteractOutside && $e0b6e0b68ec7f50f$var$isValidEvent(e, ref)) {
            if (onInteractOutsideStart) onInteractOutsideStart(e);
            stateRef.current.isPointerDown = true;
        }
    });
    let triggerInteractOutside = ($8ae05eaa5c114e9c$export$7f54fc3180508a52)((e)=>{
        if (onInteractOutside) onInteractOutside(e);
    });
    (reactExports.useEffect)(()=>{
        let state = stateRef.current;
        if (isDisabled) return;
        const element = ref.current;
        const documentObject = ($431fbd86ca7dc216$export$b204af158042fbac)(element);
        // Use pointer events if available. Otherwise, fall back to mouse and touch events.
        if (typeof PointerEvent !== 'undefined') {
            let onPointerUp = (e)=>{
                if (state.isPointerDown && $e0b6e0b68ec7f50f$var$isValidEvent(e, ref)) triggerInteractOutside(e);
                state.isPointerDown = false;
            };
            // changing these to capture phase fixed combobox
            documentObject.addEventListener('pointerdown', onPointerDown, true);
            documentObject.addEventListener('pointerup', onPointerUp, true);
            return ()=>{
                documentObject.removeEventListener('pointerdown', onPointerDown, true);
                documentObject.removeEventListener('pointerup', onPointerUp, true);
            };
        } else {
            let onMouseUp = (e)=>{
                if (state.ignoreEmulatedMouseEvents) state.ignoreEmulatedMouseEvents = false;
                else if (state.isPointerDown && $e0b6e0b68ec7f50f$var$isValidEvent(e, ref)) triggerInteractOutside(e);
                state.isPointerDown = false;
            };
            let onTouchEnd = (e)=>{
                state.ignoreEmulatedMouseEvents = true;
                if (state.isPointerDown && $e0b6e0b68ec7f50f$var$isValidEvent(e, ref)) triggerInteractOutside(e);
                state.isPointerDown = false;
            };
            documentObject.addEventListener('mousedown', onPointerDown, true);
            documentObject.addEventListener('mouseup', onMouseUp, true);
            documentObject.addEventListener('touchstart', onPointerDown, true);
            documentObject.addEventListener('touchend', onTouchEnd, true);
            return ()=>{
                documentObject.removeEventListener('mousedown', onPointerDown, true);
                documentObject.removeEventListener('mouseup', onMouseUp, true);
                documentObject.removeEventListener('touchstart', onPointerDown, true);
                documentObject.removeEventListener('touchend', onTouchEnd, true);
            };
        }
    }, [
        ref,
        isDisabled,
        onPointerDown,
        triggerInteractOutside
    ]);
}
function $e0b6e0b68ec7f50f$var$isValidEvent(event, ref) {
    if (event.button > 0) return false;
    if (event.target) {
        // if the event target is no longer in the document, ignore
        const ownerDocument = event.target.ownerDocument;
        if (!ownerDocument || !ownerDocument.documentElement.contains(event.target)) return false;
        // If the target is within a top layer element (e.g. toasts), ignore.
        if (event.target.closest('[data-react-aria-top-layer]')) return false;
    }
    return ref.current && !ref.current.contains(event.target);
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ function $93925083ecbb358c$export$48d1ea6320830260(handler) {
    if (!handler) return undefined;
    let shouldStopPropagation = true;
    return (e)=>{
        let event = {
            ...e,
            preventDefault () {
                e.preventDefault();
            },
            isDefaultPrevented () {
                return e.isDefaultPrevented();
            },
            stopPropagation () {
                console.error('stopPropagation is now the default behavior for events in React Spectrum. You can use continuePropagation() to revert this behavior.');
            },
            continuePropagation () {
                shouldStopPropagation = false;
            }
        };
        handler(event);
        if (shouldStopPropagation) e.stopPropagation();
    };
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 
function $46d819fcbaf35654$export$8f71654801c2f7cd(props) {
    return {
        keyboardProps: props.isDisabled ? {} : {
            onKeyDown: ($93925083ecbb358c$export$48d1ea6320830260)(props.onKeyDown),
            onKeyUp: ($93925083ecbb358c$export$48d1ea6320830260)(props.onKeyUp)
        }
    };
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 


function $e8a7022cf87cba2a$export$36da96379f79f245(props) {
    let { onMoveStart: onMoveStart, onMove: onMove, onMoveEnd: onMoveEnd } = props;
    let state = (reactExports.useRef)({
        didMove: false,
        lastPosition: null,
        id: null
    });
    let { addGlobalListener: addGlobalListener, removeGlobalListener: removeGlobalListener } = ($03deb23ff14920c4$export$4eaf04e54aa8eed6)();
    let move = ($8ae05eaa5c114e9c$export$7f54fc3180508a52)((originalEvent, pointerType, deltaX, deltaY)=>{
        if (deltaX === 0 && deltaY === 0) return;
        if (!state.current.didMove) {
            state.current.didMove = true;
            onMoveStart === null || onMoveStart === void 0 ? void 0 : onMoveStart({
                type: 'movestart',
                pointerType: pointerType,
                shiftKey: originalEvent.shiftKey,
                metaKey: originalEvent.metaKey,
                ctrlKey: originalEvent.ctrlKey,
                altKey: originalEvent.altKey
            });
        }
        onMove === null || onMove === void 0 ? void 0 : onMove({
            type: 'move',
            pointerType: pointerType,
            deltaX: deltaX,
            deltaY: deltaY,
            shiftKey: originalEvent.shiftKey,
            metaKey: originalEvent.metaKey,
            ctrlKey: originalEvent.ctrlKey,
            altKey: originalEvent.altKey
        });
    });
    let end = ($8ae05eaa5c114e9c$export$7f54fc3180508a52)((originalEvent, pointerType)=>{
        ($14c0b72509d70225$export$b0d6fa1ab32e3295)();
        if (state.current.didMove) onMoveEnd === null || onMoveEnd === void 0 ? void 0 : onMoveEnd({
            type: 'moveend',
            pointerType: pointerType,
            shiftKey: originalEvent.shiftKey,
            metaKey: originalEvent.metaKey,
            ctrlKey: originalEvent.ctrlKey,
            altKey: originalEvent.altKey
        });
    });
    let moveProps = (reactExports.useMemo)(()=>{
        let moveProps = {};
        let start = ()=>{
            ($14c0b72509d70225$export$16a4697467175487)();
            state.current.didMove = false;
        };
        if (typeof PointerEvent === 'undefined') {
            let onMouseMove = (e)=>{
                if (e.button === 0) {
                    var _state_current_lastPosition, _state_current_lastPosition1;
                    var _state_current_lastPosition_pageX, _state_current_lastPosition_pageY;
                    move(e, 'mouse', e.pageX - ((_state_current_lastPosition_pageX = (_state_current_lastPosition = state.current.lastPosition) === null || _state_current_lastPosition === void 0 ? void 0 : _state_current_lastPosition.pageX) !== null && _state_current_lastPosition_pageX !== void 0 ? _state_current_lastPosition_pageX : 0), e.pageY - ((_state_current_lastPosition_pageY = (_state_current_lastPosition1 = state.current.lastPosition) === null || _state_current_lastPosition1 === void 0 ? void 0 : _state_current_lastPosition1.pageY) !== null && _state_current_lastPosition_pageY !== void 0 ? _state_current_lastPosition_pageY : 0));
                    state.current.lastPosition = {
                        pageX: e.pageX,
                        pageY: e.pageY
                    };
                }
            };
            let onMouseUp = (e)=>{
                if (e.button === 0) {
                    end(e, 'mouse');
                    removeGlobalListener(window, 'mousemove', onMouseMove, false);
                    removeGlobalListener(window, 'mouseup', onMouseUp, false);
                }
            };
            moveProps.onMouseDown = (e)=>{
                if (e.button === 0) {
                    start();
                    e.stopPropagation();
                    e.preventDefault();
                    state.current.lastPosition = {
                        pageX: e.pageX,
                        pageY: e.pageY
                    };
                    addGlobalListener(window, 'mousemove', onMouseMove, false);
                    addGlobalListener(window, 'mouseup', onMouseUp, false);
                }
            };
            let onTouchMove = (e)=>{
                let touch = [
                    ...e.changedTouches
                ].findIndex(({ identifier: identifier })=>identifier === state.current.id);
                if (touch >= 0) {
                    var _state_current_lastPosition, _state_current_lastPosition1;
                    let { pageX: pageX, pageY: pageY } = e.changedTouches[touch];
                    var _state_current_lastPosition_pageX, _state_current_lastPosition_pageY;
                    move(e, 'touch', pageX - ((_state_current_lastPosition_pageX = (_state_current_lastPosition = state.current.lastPosition) === null || _state_current_lastPosition === void 0 ? void 0 : _state_current_lastPosition.pageX) !== null && _state_current_lastPosition_pageX !== void 0 ? _state_current_lastPosition_pageX : 0), pageY - ((_state_current_lastPosition_pageY = (_state_current_lastPosition1 = state.current.lastPosition) === null || _state_current_lastPosition1 === void 0 ? void 0 : _state_current_lastPosition1.pageY) !== null && _state_current_lastPosition_pageY !== void 0 ? _state_current_lastPosition_pageY : 0));
                    state.current.lastPosition = {
                        pageX: pageX,
                        pageY: pageY
                    };
                }
            };
            let onTouchEnd = (e)=>{
                let touch = [
                    ...e.changedTouches
                ].findIndex(({ identifier: identifier })=>identifier === state.current.id);
                if (touch >= 0) {
                    end(e, 'touch');
                    state.current.id = null;
                    removeGlobalListener(window, 'touchmove', onTouchMove);
                    removeGlobalListener(window, 'touchend', onTouchEnd);
                    removeGlobalListener(window, 'touchcancel', onTouchEnd);
                }
            };
            moveProps.onTouchStart = (e)=>{
                if (e.changedTouches.length === 0 || state.current.id != null) return;
                let { pageX: pageX, pageY: pageY, identifier: identifier } = e.changedTouches[0];
                start();
                e.stopPropagation();
                e.preventDefault();
                state.current.lastPosition = {
                    pageX: pageX,
                    pageY: pageY
                };
                state.current.id = identifier;
                addGlobalListener(window, 'touchmove', onTouchMove, false);
                addGlobalListener(window, 'touchend', onTouchEnd, false);
                addGlobalListener(window, 'touchcancel', onTouchEnd, false);
            };
        } else {
            let onPointerMove = (e)=>{
                if (e.pointerId === state.current.id) {
                    var _state_current_lastPosition, _state_current_lastPosition1;
                    let pointerType = e.pointerType || 'mouse';
                    var _state_current_lastPosition_pageX, _state_current_lastPosition_pageY;
                    // Problems with PointerEvent#movementX/movementY:
                    // 1. it is always 0 on macOS Safari.
                    // 2. On Chrome Android, it's scaled by devicePixelRatio, but not on Chrome macOS
                    move(e, pointerType, e.pageX - ((_state_current_lastPosition_pageX = (_state_current_lastPosition = state.current.lastPosition) === null || _state_current_lastPosition === void 0 ? void 0 : _state_current_lastPosition.pageX) !== null && _state_current_lastPosition_pageX !== void 0 ? _state_current_lastPosition_pageX : 0), e.pageY - ((_state_current_lastPosition_pageY = (_state_current_lastPosition1 = state.current.lastPosition) === null || _state_current_lastPosition1 === void 0 ? void 0 : _state_current_lastPosition1.pageY) !== null && _state_current_lastPosition_pageY !== void 0 ? _state_current_lastPosition_pageY : 0));
                    state.current.lastPosition = {
                        pageX: e.pageX,
                        pageY: e.pageY
                    };
                }
            };
            let onPointerUp = (e)=>{
                if (e.pointerId === state.current.id) {
                    let pointerType = e.pointerType || 'mouse';
                    end(e, pointerType);
                    state.current.id = null;
                    removeGlobalListener(window, 'pointermove', onPointerMove, false);
                    removeGlobalListener(window, 'pointerup', onPointerUp, false);
                    removeGlobalListener(window, 'pointercancel', onPointerUp, false);
                }
            };
            moveProps.onPointerDown = (e)=>{
                if (e.button === 0 && state.current.id == null) {
                    start();
                    e.stopPropagation();
                    e.preventDefault();
                    state.current.lastPosition = {
                        pageX: e.pageX,
                        pageY: e.pageY
                    };
                    state.current.id = e.pointerId;
                    addGlobalListener(window, 'pointermove', onPointerMove, false);
                    addGlobalListener(window, 'pointerup', onPointerUp, false);
                    addGlobalListener(window, 'pointercancel', onPointerUp, false);
                }
            };
        }
        let triggerKeyboardMove = (e, deltaX, deltaY)=>{
            start();
            move(e, 'keyboard', deltaX, deltaY);
            end(e, 'keyboard');
        };
        moveProps.onKeyDown = (e)=>{
            switch(e.key){
                case 'Left':
                case 'ArrowLeft':
                    e.preventDefault();
                    e.stopPropagation();
                    triggerKeyboardMove(e, -1, 0);
                    break;
                case 'Right':
                case 'ArrowRight':
                    e.preventDefault();
                    e.stopPropagation();
                    triggerKeyboardMove(e, 1, 0);
                    break;
                case 'Up':
                case 'ArrowUp':
                    e.preventDefault();
                    e.stopPropagation();
                    triggerKeyboardMove(e, 0, -1);
                    break;
                case 'Down':
                case 'ArrowDown':
                    e.preventDefault();
                    e.stopPropagation();
                    triggerKeyboardMove(e, 0, 1);
                    break;
            }
        };
        return moveProps;
    }, [
        state,
        addGlobalListener,
        removeGlobalListener,
        move,
        end
    ]);
    return {
        moveProps: moveProps
    };
}

/*
 * Copyright 2021 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 

function $7d0a636d7a4dcefd$export$2123ff2b87c81ca(props, ref) {
    let { onScroll: onScroll, isDisabled: isDisabled } = props;
    let onScrollHandler = (reactExports.useCallback)((e)=>{
        // If the ctrlKey is pressed, this is a zoom event, do nothing.
        if (e.ctrlKey) return;
        // stop scrolling the page
        e.preventDefault();
        e.stopPropagation();
        if (onScroll) onScroll({
            deltaX: e.deltaX,
            deltaY: e.deltaY
        });
    }, [
        onScroll
    ]);
    ($e9faafb641e167db$export$90fc3a17d93f704c)(ref, 'wheel', isDisabled ? undefined : onScrollHandler);
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 


const $8a26561d2877236e$var$DEFAULT_THRESHOLD = 500;
function $8a26561d2877236e$export$c24ed0104d07eab9(props) {
    let { isDisabled: isDisabled, onLongPressStart: onLongPressStart, onLongPressEnd: onLongPressEnd, onLongPress: onLongPress, threshold: threshold = $8a26561d2877236e$var$DEFAULT_THRESHOLD, accessibilityDescription: accessibilityDescription } = props;
    const timeRef = (reactExports.useRef)(undefined);
    let { addGlobalListener: addGlobalListener, removeGlobalListener: removeGlobalListener } = ($03deb23ff14920c4$export$4eaf04e54aa8eed6)();
    let { pressProps: pressProps } = ($f6c31cce2adf654f$export$45712eceda6fad21)({
        isDisabled: isDisabled,
        onPressStart (e) {
            e.continuePropagation();
            if (e.pointerType === 'mouse' || e.pointerType === 'touch') {
                if (onLongPressStart) onLongPressStart({
                    ...e,
                    type: 'longpressstart'
                });
                timeRef.current = setTimeout(()=>{
                    // Prevent other usePress handlers from also handling this event.
                    e.target.dispatchEvent(new PointerEvent('pointercancel', {
                        bubbles: true
                    }));
                    if (onLongPress) onLongPress({
                        ...e,
                        type: 'longpress'
                    });
                    timeRef.current = undefined;
                }, threshold);
                // Prevent context menu, which may be opened on long press on touch devices
                if (e.pointerType === 'touch') {
                    let onContextMenu = (e)=>{
                        e.preventDefault();
                    };
                    addGlobalListener(e.target, 'contextmenu', onContextMenu, {
                        once: true
                    });
                    addGlobalListener(window, 'pointerup', ()=>{
                        // If no contextmenu event is fired quickly after pointerup, remove the handler
                        // so future context menu events outside a long press are not prevented.
                        setTimeout(()=>{
                            removeGlobalListener(e.target, 'contextmenu', onContextMenu);
                        }, 30);
                    }, {
                        once: true
                    });
                }
            }
        },
        onPressEnd (e) {
            if (timeRef.current) clearTimeout(timeRef.current);
            if (onLongPressEnd && (e.pointerType === 'mouse' || e.pointerType === 'touch')) onLongPressEnd({
                ...e,
                type: 'longpressend'
            });
        }
    });
    let descriptionProps = ($ef06256079686ba0$export$f8aeda7b10753fa1)(onLongPress && !isDisabled ? accessibilityDescription : undefined);
    return {
        longPressProps: ($3ef42575df84b30b$export$9d1611c77c2fe928)(pressProps, descriptionProps)
    };
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the 'License');
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 

function $6a99195332edec8b$export$80f3e147d781571c(element) {
    // If the user is interacting with a virtual cursor, e.g. screen reader, then
    // wait until after any animated transitions that are currently occurring on
    // the page before shifting focus. This avoids issues with VoiceOver on iOS
    // causing the page to scroll when moving focus if the element is transitioning
    // from off the screen.
    const ownerDocument = ($431fbd86ca7dc216$export$b204af158042fbac)(element);
    if (($507fabe10e71c6fb$export$630ff653c5ada6a9)() === 'virtual') {
        let lastFocusedElement = ownerDocument.activeElement;
        ($bbed8b41f857bcc0$export$24490316f764c430)(()=>{
            // If focus did not move and the element is still in the document, focus it.
            if (ownerDocument.activeElement === lastFocusedElement && element.isConnected) ($7215afc6de606d6b$export$de79e2c695e052f3)(element);
        });
    } else ($7215afc6de606d6b$export$de79e2c695e052f3)(element);
}

/*
 * Copyright 2021 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 
function $645f2e67b85a24c9$var$isStyleVisible(element) {
    const windowObject = ($431fbd86ca7dc216$export$f21a1ffae260145a)(element);
    if (!(element instanceof windowObject.HTMLElement) && !(element instanceof windowObject.SVGElement)) return false;
    let { display: display, visibility: visibility } = element.style;
    let isVisible = display !== 'none' && visibility !== 'hidden' && visibility !== 'collapse';
    if (isVisible) {
        const { getComputedStyle: getComputedStyle } = element.ownerDocument.defaultView;
        let { display: computedDisplay, visibility: computedVisibility } = getComputedStyle(element);
        isVisible = computedDisplay !== 'none' && computedVisibility !== 'hidden' && computedVisibility !== 'collapse';
    }
    return isVisible;
}
function $645f2e67b85a24c9$var$isAttributeVisible(element, childElement) {
    return !element.hasAttribute('hidden') && // Ignore HiddenSelect when tree walking.
    !element.hasAttribute('data-react-aria-prevent-focus') && (element.nodeName === 'DETAILS' && childElement && childElement.nodeName !== 'SUMMARY' ? element.hasAttribute('open') : true);
}
function $645f2e67b85a24c9$export$e989c0fffaa6b27a(element, childElement) {
    return element.nodeName !== '#comment' && $645f2e67b85a24c9$var$isStyleVisible(element) && $645f2e67b85a24c9$var$isAttributeVisible(element, childElement) && (!element.parentElement || $645f2e67b85a24c9$export$e989c0fffaa6b27a(element.parentElement, element));
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 



const $9bf71ea28793e738$var$FocusContext = /*#__PURE__*/ (React).createContext(null);
const $9bf71ea28793e738$var$RESTORE_FOCUS_EVENT = 'react-aria-focus-scope-restore';
let $9bf71ea28793e738$var$activeScope = null;
function $9bf71ea28793e738$export$20e40289641fbbb6(props) {
    let { children: children, contain: contain, restoreFocus: restoreFocus, autoFocus: autoFocus } = props;
    let startRef = (reactExports.useRef)(null);
    let endRef = (reactExports.useRef)(null);
    let scopeRef = (reactExports.useRef)([]);
    let { parentNode: parentNode } = (reactExports.useContext)($9bf71ea28793e738$var$FocusContext) || {};
    // Create a tree node here so we can add children to it even before it is added to the tree.
    let node = (reactExports.useMemo)(()=>new $9bf71ea28793e738$var$TreeNode({
            scopeRef: scopeRef
        }), [
        scopeRef
    ]);
    ($f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(()=>{
        // If a new scope mounts outside the active scope, (e.g. DialogContainer launched from a menu),
        // use the active scope as the parent instead of the parent from context. Layout effects run bottom
        // up, so if the parent is not yet added to the tree, don't do this. Only the outer-most FocusScope
        // that is being added should get the activeScope as its parent.
        let parent = parentNode || $9bf71ea28793e738$export$d06fae2ee68b101e.root;
        if ($9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(parent.scopeRef) && $9bf71ea28793e738$var$activeScope && !$9bf71ea28793e738$var$isAncestorScope($9bf71ea28793e738$var$activeScope, parent.scopeRef)) {
            let activeNode = $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode($9bf71ea28793e738$var$activeScope);
            if (activeNode) parent = activeNode;
        }
        // Add the node to the parent, and to the tree.
        parent.addChild(node);
        $9bf71ea28793e738$export$d06fae2ee68b101e.addNode(node);
    }, [
        node,
        parentNode
    ]);
    ($f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(()=>{
        let node = $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(scopeRef);
        if (node) node.contain = !!contain;
    }, [
        contain
    ]);
    ($f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(()=>{
        var _startRef_current;
        // Find all rendered nodes between the sentinels and add them to the scope.
        let node = (_startRef_current = startRef.current) === null || _startRef_current === void 0 ? void 0 : _startRef_current.nextSibling;
        let nodes = [];
        let stopPropagation = (e)=>e.stopPropagation();
        while(node && node !== endRef.current){
            nodes.push(node);
            // Stop custom restore focus event from propagating to parent focus scopes.
            node.addEventListener($9bf71ea28793e738$var$RESTORE_FOCUS_EVENT, stopPropagation);
            node = node.nextSibling;
        }
        scopeRef.current = nodes;
        return ()=>{
            for (let node of nodes)node.removeEventListener($9bf71ea28793e738$var$RESTORE_FOCUS_EVENT, stopPropagation);
        };
    }, [
        children
    ]);
    $9bf71ea28793e738$var$useActiveScopeTracker(scopeRef, restoreFocus, contain);
    $9bf71ea28793e738$var$useFocusContainment(scopeRef, contain);
    $9bf71ea28793e738$var$useRestoreFocus(scopeRef, restoreFocus, contain);
    $9bf71ea28793e738$var$useAutoFocus(scopeRef, autoFocus);
    // This needs to be an effect so that activeScope is updated after the FocusScope tree is complete.
    // It cannot be a useLayoutEffect because the parent of this node hasn't been attached in the tree yet.
    (reactExports.useEffect)(()=>{
        const activeElement = ($431fbd86ca7dc216$export$b204af158042fbac)(scopeRef.current ? scopeRef.current[0] : undefined).activeElement;
        let scope = null;
        if ($9bf71ea28793e738$var$isElementInScope(activeElement, scopeRef.current)) {
            // We need to traverse the focusScope tree and find the bottom most scope that
            // contains the active element and set that as the activeScope.
            for (let node of $9bf71ea28793e738$export$d06fae2ee68b101e.traverse())if (node.scopeRef && $9bf71ea28793e738$var$isElementInScope(activeElement, node.scopeRef.current)) scope = node;
            if (scope === $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(scopeRef)) $9bf71ea28793e738$var$activeScope = scope.scopeRef;
        }
    }, [
        scopeRef
    ]);
    // This layout effect cleanup is so that the tree node is removed synchronously with react before the RAF
    // in useRestoreFocus cleanup runs.
    ($f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(()=>{
        return ()=>{
            var _focusScopeTree_getTreeNode_parent, _focusScopeTree_getTreeNode;
            var _focusScopeTree_getTreeNode_parent_scopeRef;
            // Scope may have been re-parented.
            let parentScope = (_focusScopeTree_getTreeNode_parent_scopeRef = (_focusScopeTree_getTreeNode = $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(scopeRef)) === null || _focusScopeTree_getTreeNode === void 0 ? void 0 : (_focusScopeTree_getTreeNode_parent = _focusScopeTree_getTreeNode.parent) === null || _focusScopeTree_getTreeNode_parent === void 0 ? void 0 : _focusScopeTree_getTreeNode_parent.scopeRef) !== null && _focusScopeTree_getTreeNode_parent_scopeRef !== void 0 ? _focusScopeTree_getTreeNode_parent_scopeRef : null;
            if ((scopeRef === $9bf71ea28793e738$var$activeScope || $9bf71ea28793e738$var$isAncestorScope(scopeRef, $9bf71ea28793e738$var$activeScope)) && (!parentScope || $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(parentScope))) $9bf71ea28793e738$var$activeScope = parentScope;
            $9bf71ea28793e738$export$d06fae2ee68b101e.removeTreeNode(scopeRef);
        };
    }, [
        scopeRef
    ]);
    let focusManager = (reactExports.useMemo)(()=>$9bf71ea28793e738$var$createFocusManagerForScope(scopeRef), []);
    let value = (reactExports.useMemo)(()=>({
            focusManager: focusManager,
            parentNode: node
        }), [
        node,
        focusManager
    ]);
    return /*#__PURE__*/ (React).createElement($9bf71ea28793e738$var$FocusContext.Provider, {
        value: value
    }, /*#__PURE__*/ (React).createElement("span", {
        "data-focus-scope-start": true,
        hidden: true,
        ref: startRef
    }), children, /*#__PURE__*/ (React).createElement("span", {
        "data-focus-scope-end": true,
        hidden: true,
        ref: endRef
    }));
}
function $9bf71ea28793e738$var$createFocusManagerForScope(scopeRef) {
    return {
        focusNext (opts = {}) {
            let scope = scopeRef.current;
            let { from: from, tabbable: tabbable, wrap: wrap, accept: accept } = opts;
            let node = from || ($431fbd86ca7dc216$export$b204af158042fbac)(scope[0]).activeElement;
            let sentinel = scope[0].previousElementSibling;
            let scopeRoot = $9bf71ea28793e738$var$getScopeRoot(scope);
            let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa(scopeRoot, {
                tabbable: tabbable,
                accept: accept
            }, scope);
            walker.currentNode = $9bf71ea28793e738$var$isElementInScope(node, scope) ? node : sentinel;
            let nextNode = walker.nextNode();
            if (!nextNode && wrap) {
                walker.currentNode = sentinel;
                nextNode = walker.nextNode();
            }
            if (nextNode) $9bf71ea28793e738$var$focusElement(nextNode, true);
            return nextNode;
        },
        focusPrevious (opts = {}) {
            let scope = scopeRef.current;
            let { from: from, tabbable: tabbable, wrap: wrap, accept: accept } = opts;
            let node = from || ($431fbd86ca7dc216$export$b204af158042fbac)(scope[0]).activeElement;
            let sentinel = scope[scope.length - 1].nextElementSibling;
            let scopeRoot = $9bf71ea28793e738$var$getScopeRoot(scope);
            let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa(scopeRoot, {
                tabbable: tabbable,
                accept: accept
            }, scope);
            walker.currentNode = $9bf71ea28793e738$var$isElementInScope(node, scope) ? node : sentinel;
            let previousNode = walker.previousNode();
            if (!previousNode && wrap) {
                walker.currentNode = sentinel;
                previousNode = walker.previousNode();
            }
            if (previousNode) $9bf71ea28793e738$var$focusElement(previousNode, true);
            return previousNode;
        },
        focusFirst (opts = {}) {
            let scope = scopeRef.current;
            let { tabbable: tabbable, accept: accept } = opts;
            let scopeRoot = $9bf71ea28793e738$var$getScopeRoot(scope);
            let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa(scopeRoot, {
                tabbable: tabbable,
                accept: accept
            }, scope);
            walker.currentNode = scope[0].previousElementSibling;
            let nextNode = walker.nextNode();
            if (nextNode) $9bf71ea28793e738$var$focusElement(nextNode, true);
            return nextNode;
        },
        focusLast (opts = {}) {
            let scope = scopeRef.current;
            let { tabbable: tabbable, accept: accept } = opts;
            let scopeRoot = $9bf71ea28793e738$var$getScopeRoot(scope);
            let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa(scopeRoot, {
                tabbable: tabbable,
                accept: accept
            }, scope);
            walker.currentNode = scope[scope.length - 1].nextElementSibling;
            let previousNode = walker.previousNode();
            if (previousNode) $9bf71ea28793e738$var$focusElement(previousNode, true);
            return previousNode;
        }
    };
}
const $9bf71ea28793e738$var$focusableElements = [
    'input:not([disabled]):not([type=hidden])',
    'select:not([disabled])',
    'textarea:not([disabled])',
    'button:not([disabled])',
    'a[href]',
    'area[href]',
    'summary',
    'iframe',
    'object',
    'embed',
    'audio[controls]',
    'video[controls]',
    '[contenteditable]'
];
const $9bf71ea28793e738$var$FOCUSABLE_ELEMENT_SELECTOR = $9bf71ea28793e738$var$focusableElements.join(':not([hidden]),') + ',[tabindex]:not([disabled]):not([hidden])';
$9bf71ea28793e738$var$focusableElements.push('[tabindex]:not([tabindex="-1"]):not([disabled])');
const $9bf71ea28793e738$var$TABBABLE_ELEMENT_SELECTOR = $9bf71ea28793e738$var$focusableElements.join(':not([hidden]):not([tabindex="-1"]),');
function $9bf71ea28793e738$var$getScopeRoot(scope) {
    return scope[0].parentElement;
}
function $9bf71ea28793e738$var$shouldContainFocus(scopeRef) {
    let scope = $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode($9bf71ea28793e738$var$activeScope);
    while(scope && scope.scopeRef !== scopeRef){
        if (scope.contain) return false;
        scope = scope.parent;
    }
    return true;
}
function $9bf71ea28793e738$var$useFocusContainment(scopeRef, contain) {
    let focusedNode = (reactExports.useRef)(undefined);
    let raf = (reactExports.useRef)(undefined);
    ($f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(()=>{
        let scope = scopeRef.current;
        if (!contain) {
            // if contain was changed, then we should cancel any ongoing waits to pull focus back into containment
            if (raf.current) {
                cancelAnimationFrame(raf.current);
                raf.current = undefined;
            }
            return;
        }
        const ownerDocument = ($431fbd86ca7dc216$export$b204af158042fbac)(scope ? scope[0] : undefined);
        // Handle the Tab key to contain focus within the scope
        let onKeyDown = (e)=>{
            if (e.key !== 'Tab' || e.altKey || e.ctrlKey || e.metaKey || !$9bf71ea28793e738$var$shouldContainFocus(scopeRef) || e.isComposing) return;
            let focusedElement = ownerDocument.activeElement;
            let scope = scopeRef.current;
            if (!scope || !$9bf71ea28793e738$var$isElementInScope(focusedElement, scope)) return;
            let scopeRoot = $9bf71ea28793e738$var$getScopeRoot(scope);
            let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa(scopeRoot, {
                tabbable: true
            }, scope);
            if (!focusedElement) return;
            walker.currentNode = focusedElement;
            let nextElement = e.shiftKey ? walker.previousNode() : walker.nextNode();
            if (!nextElement) {
                walker.currentNode = e.shiftKey ? scope[scope.length - 1].nextElementSibling : scope[0].previousElementSibling;
                nextElement = e.shiftKey ? walker.previousNode() : walker.nextNode();
            }
            e.preventDefault();
            if (nextElement) $9bf71ea28793e738$var$focusElement(nextElement, true);
        };
        let onFocus = (e)=>{
            // If focusing an element in a child scope of the currently active scope, the child becomes active.
            // Moving out of the active scope to an ancestor is not allowed.
            if ((!$9bf71ea28793e738$var$activeScope || $9bf71ea28793e738$var$isAncestorScope($9bf71ea28793e738$var$activeScope, scopeRef)) && $9bf71ea28793e738$var$isElementInScope(e.target, scopeRef.current)) {
                $9bf71ea28793e738$var$activeScope = scopeRef;
                focusedNode.current = e.target;
            } else if ($9bf71ea28793e738$var$shouldContainFocus(scopeRef) && !$9bf71ea28793e738$var$isElementInChildScope(e.target, scopeRef)) {
                // If a focus event occurs outside the active scope (e.g. user tabs from browser location bar),
                // restore focus to the previously focused node or the first tabbable element in the active scope.
                if (focusedNode.current) focusedNode.current.focus();
                else if ($9bf71ea28793e738$var$activeScope && $9bf71ea28793e738$var$activeScope.current) $9bf71ea28793e738$var$focusFirstInScope($9bf71ea28793e738$var$activeScope.current);
            } else if ($9bf71ea28793e738$var$shouldContainFocus(scopeRef)) focusedNode.current = e.target;
        };
        let onBlur = (e)=>{
            // Firefox doesn't shift focus back to the Dialog properly without this
            if (raf.current) cancelAnimationFrame(raf.current);
            raf.current = requestAnimationFrame(()=>{
                // Use document.activeElement instead of e.relatedTarget so we can tell if user clicked into iframe
                if (ownerDocument.activeElement && $9bf71ea28793e738$var$shouldContainFocus(scopeRef) && !$9bf71ea28793e738$var$isElementInChildScope(ownerDocument.activeElement, scopeRef)) {
                    $9bf71ea28793e738$var$activeScope = scopeRef;
                    if (ownerDocument.body.contains(e.target)) {
                        var _focusedNode_current;
                        focusedNode.current = e.target;
                        (_focusedNode_current = focusedNode.current) === null || _focusedNode_current === void 0 ? void 0 : _focusedNode_current.focus();
                    } else if ($9bf71ea28793e738$var$activeScope.current) $9bf71ea28793e738$var$focusFirstInScope($9bf71ea28793e738$var$activeScope.current);
                }
            });
        };
        ownerDocument.addEventListener('keydown', onKeyDown, false);
        ownerDocument.addEventListener('focusin', onFocus, false);
        scope === null || scope === void 0 ? void 0 : scope.forEach((element)=>element.addEventListener('focusin', onFocus, false));
        scope === null || scope === void 0 ? void 0 : scope.forEach((element)=>element.addEventListener('focusout', onBlur, false));
        return ()=>{
            ownerDocument.removeEventListener('keydown', onKeyDown, false);
            ownerDocument.removeEventListener('focusin', onFocus, false);
            scope === null || scope === void 0 ? void 0 : scope.forEach((element)=>element.removeEventListener('focusin', onFocus, false));
            scope === null || scope === void 0 ? void 0 : scope.forEach((element)=>element.removeEventListener('focusout', onBlur, false));
        };
    }, [
        scopeRef,
        contain
    ]);
    // This is a useLayoutEffect so it is guaranteed to run before our async synthetic blur
    // eslint-disable-next-line arrow-body-style
    ($f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(()=>{
        return ()=>{
            if (raf.current) cancelAnimationFrame(raf.current);
        };
    }, [
        raf
    ]);
}
function $9bf71ea28793e738$var$isElementInAnyScope(element) {
    return $9bf71ea28793e738$var$isElementInChildScope(element);
}
function $9bf71ea28793e738$var$isElementInScope(element, scope) {
    if (!element) return false;
    if (!scope) return false;
    return scope.some((node)=>node.contains(element));
}
function $9bf71ea28793e738$var$isElementInChildScope(element, scope = null) {
    // If the element is within a top layer element (e.g. toasts), always allow moving focus there.
    if (element instanceof Element && element.closest('[data-react-aria-top-layer]')) return true;
    // node.contains in isElementInScope covers child scopes that are also DOM children,
    // but does not cover child scopes in portals.
    for (let { scopeRef: s } of $9bf71ea28793e738$export$d06fae2ee68b101e.traverse($9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(scope))){
        if (s && $9bf71ea28793e738$var$isElementInScope(element, s.current)) return true;
    }
    return false;
}
function $9bf71ea28793e738$export$1258395f99bf9cbf(element) {
    return $9bf71ea28793e738$var$isElementInChildScope(element, $9bf71ea28793e738$var$activeScope);
}
function $9bf71ea28793e738$var$isAncestorScope(ancestor, scope) {
    var _focusScopeTree_getTreeNode;
    let parent = (_focusScopeTree_getTreeNode = $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(scope)) === null || _focusScopeTree_getTreeNode === void 0 ? void 0 : _focusScopeTree_getTreeNode.parent;
    while(parent){
        if (parent.scopeRef === ancestor) return true;
        parent = parent.parent;
    }
    return false;
}
function $9bf71ea28793e738$var$focusElement(element, scroll = false) {
    if (element != null && !scroll) try {
        (0, $6a99195332edec8b$export$80f3e147d781571c)(element);
    } catch (err) {
    // ignore
    }
    else if (element != null) try {
        element.focus();
    } catch (err) {
    // ignore
    }
}
function $9bf71ea28793e738$var$getFirstInScope(scope, tabbable = true) {
    let sentinel = scope[0].previousElementSibling;
    let scopeRoot = $9bf71ea28793e738$var$getScopeRoot(scope);
    let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa(scopeRoot, {
        tabbable: tabbable
    }, scope);
    walker.currentNode = sentinel;
    let nextNode = walker.nextNode();
    // If the scope does not contain a tabbable element, use the first focusable element.
    if (tabbable && !nextNode) {
        scopeRoot = $9bf71ea28793e738$var$getScopeRoot(scope);
        walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa(scopeRoot, {
            tabbable: false
        }, scope);
        walker.currentNode = sentinel;
        nextNode = walker.nextNode();
    }
    return nextNode;
}
function $9bf71ea28793e738$var$focusFirstInScope(scope, tabbable = true) {
    $9bf71ea28793e738$var$focusElement($9bf71ea28793e738$var$getFirstInScope(scope, tabbable));
}
function $9bf71ea28793e738$var$useAutoFocus(scopeRef, autoFocus) {
    const autoFocusRef = (React).useRef(autoFocus);
    (reactExports.useEffect)(()=>{
        if (autoFocusRef.current) {
            $9bf71ea28793e738$var$activeScope = scopeRef;
            const ownerDocument = ($431fbd86ca7dc216$export$b204af158042fbac)(scopeRef.current ? scopeRef.current[0] : undefined);
            if (!$9bf71ea28793e738$var$isElementInScope(ownerDocument.activeElement, $9bf71ea28793e738$var$activeScope.current) && scopeRef.current) $9bf71ea28793e738$var$focusFirstInScope(scopeRef.current);
        }
        autoFocusRef.current = false;
    }, [
        scopeRef
    ]);
}
function $9bf71ea28793e738$var$useActiveScopeTracker(scopeRef, restore, contain) {
    // tracks the active scope, in case restore and contain are both false.
    // if either are true, this is tracked in useRestoreFocus or useFocusContainment.
    ($f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(()=>{
        if (restore || contain) return;
        let scope = scopeRef.current;
        const ownerDocument = ($431fbd86ca7dc216$export$b204af158042fbac)(scope ? scope[0] : undefined);
        let onFocus = (e)=>{
            let target = e.target;
            if ($9bf71ea28793e738$var$isElementInScope(target, scopeRef.current)) $9bf71ea28793e738$var$activeScope = scopeRef;
            else if (!$9bf71ea28793e738$var$isElementInAnyScope(target)) $9bf71ea28793e738$var$activeScope = null;
        };
        ownerDocument.addEventListener('focusin', onFocus, false);
        scope === null || scope === void 0 ? void 0 : scope.forEach((element)=>element.addEventListener('focusin', onFocus, false));
        return ()=>{
            ownerDocument.removeEventListener('focusin', onFocus, false);
            scope === null || scope === void 0 ? void 0 : scope.forEach((element)=>element.removeEventListener('focusin', onFocus, false));
        };
    }, [
        scopeRef,
        restore,
        contain
    ]);
}
function $9bf71ea28793e738$var$shouldRestoreFocus(scopeRef) {
    let scope = $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode($9bf71ea28793e738$var$activeScope);
    while(scope && scope.scopeRef !== scopeRef){
        if (scope.nodeToRestore) return false;
        scope = scope.parent;
    }
    return (scope === null || scope === void 0 ? void 0 : scope.scopeRef) === scopeRef;
}
function $9bf71ea28793e738$var$useRestoreFocus(scopeRef, restoreFocus, contain) {
    // create a ref during render instead of useLayoutEffect so the active element is saved before a child with autoFocus=true mounts.
    // eslint-disable-next-line no-restricted-globals
    const nodeToRestoreRef = (reactExports.useRef)(typeof document !== 'undefined' ? ($431fbd86ca7dc216$export$b204af158042fbac)(scopeRef.current ? scopeRef.current[0] : undefined).activeElement : null);
    // restoring scopes should all track if they are active regardless of contain, but contain already tracks it plus logic to contain the focus
    // restoring-non-containing scopes should only care if they become active so they can perform the restore
    ($f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(()=>{
        let scope = scopeRef.current;
        const ownerDocument = ($431fbd86ca7dc216$export$b204af158042fbac)(scope ? scope[0] : undefined);
        if (!restoreFocus || contain) return;
        let onFocus = ()=>{
            // If focusing an element in a child scope of the currently active scope, the child becomes active.
            // Moving out of the active scope to an ancestor is not allowed.
            if ((!$9bf71ea28793e738$var$activeScope || $9bf71ea28793e738$var$isAncestorScope($9bf71ea28793e738$var$activeScope, scopeRef)) && $9bf71ea28793e738$var$isElementInScope(ownerDocument.activeElement, scopeRef.current)) $9bf71ea28793e738$var$activeScope = scopeRef;
        };
        ownerDocument.addEventListener('focusin', onFocus, false);
        scope === null || scope === void 0 ? void 0 : scope.forEach((element)=>element.addEventListener('focusin', onFocus, false));
        return ()=>{
            ownerDocument.removeEventListener('focusin', onFocus, false);
            scope === null || scope === void 0 ? void 0 : scope.forEach((element)=>element.removeEventListener('focusin', onFocus, false));
        };
    // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [
        scopeRef,
        contain
    ]);
    ($f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(()=>{
        const ownerDocument = ($431fbd86ca7dc216$export$b204af158042fbac)(scopeRef.current ? scopeRef.current[0] : undefined);
        if (!restoreFocus) return;
        // Handle the Tab key so that tabbing out of the scope goes to the next element
        // after the node that had focus when the scope mounted. This is important when
        // using portals for overlays, so that focus goes to the expected element when
        // tabbing out of the overlay.
        let onKeyDown = (e)=>{
            if (e.key !== 'Tab' || e.altKey || e.ctrlKey || e.metaKey || !$9bf71ea28793e738$var$shouldContainFocus(scopeRef) || e.isComposing) return;
            let focusedElement = ownerDocument.activeElement;
            if (!$9bf71ea28793e738$var$isElementInScope(focusedElement, scopeRef.current)) return;
            let treeNode = $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(scopeRef);
            if (!treeNode) return;
            let nodeToRestore = treeNode.nodeToRestore;
            // Create a DOM tree walker that matches all tabbable elements
            let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa(ownerDocument.body, {
                tabbable: true
            });
            // Find the next tabbable element after the currently focused element
            walker.currentNode = focusedElement;
            let nextElement = e.shiftKey ? walker.previousNode() : walker.nextNode();
            if (!nodeToRestore || !ownerDocument.body.contains(nodeToRestore) || nodeToRestore === ownerDocument.body) {
                nodeToRestore = undefined;
                treeNode.nodeToRestore = undefined;
            }
            // If there is no next element, or it is outside the current scope, move focus to the
            // next element after the node to restore to instead.
            if ((!nextElement || !$9bf71ea28793e738$var$isElementInScope(nextElement, scopeRef.current)) && nodeToRestore) {
                walker.currentNode = nodeToRestore;
                // Skip over elements within the scope, in case the scope immediately follows the node to restore.
                do nextElement = e.shiftKey ? walker.previousNode() : walker.nextNode();
                while ($9bf71ea28793e738$var$isElementInScope(nextElement, scopeRef.current));
                e.preventDefault();
                e.stopPropagation();
                if (nextElement) $9bf71ea28793e738$var$focusElement(nextElement, true);
                else // If there is no next element and the nodeToRestore isn't within a FocusScope (i.e. we are leaving the top level focus scope)
                // then move focus to the body.
                // Otherwise restore focus to the nodeToRestore (e.g menu within a popover -> tabbing to close the menu should move focus to menu trigger)
                if (!$9bf71ea28793e738$var$isElementInAnyScope(nodeToRestore)) focusedElement.blur();
                else $9bf71ea28793e738$var$focusElement(nodeToRestore, true);
            }
        };
        if (!contain) ownerDocument.addEventListener('keydown', onKeyDown, true);
        return ()=>{
            if (!contain) ownerDocument.removeEventListener('keydown', onKeyDown, true);
        };
    }, [
        scopeRef,
        restoreFocus,
        contain
    ]);
    // useLayoutEffect instead of useEffect so the active element is saved synchronously instead of asynchronously.
    ($f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(()=>{
        const ownerDocument = ($431fbd86ca7dc216$export$b204af158042fbac)(scopeRef.current ? scopeRef.current[0] : undefined);
        if (!restoreFocus) return;
        let treeNode = $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(scopeRef);
        if (!treeNode) return;
        var _nodeToRestoreRef_current;
        treeNode.nodeToRestore = (_nodeToRestoreRef_current = nodeToRestoreRef.current) !== null && _nodeToRestoreRef_current !== void 0 ? _nodeToRestoreRef_current : undefined;
        return ()=>{
            let treeNode = $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(scopeRef);
            if (!treeNode) return;
            let nodeToRestore = treeNode.nodeToRestore;
            // if we already lost focus to the body and this was the active scope, then we should attempt to restore
            if (restoreFocus && nodeToRestore && // eslint-disable-next-line react-hooks/exhaustive-deps
            ($9bf71ea28793e738$var$isElementInScope(ownerDocument.activeElement, scopeRef.current) || ownerDocument.activeElement === ownerDocument.body && $9bf71ea28793e738$var$shouldRestoreFocus(scopeRef))) {
                // freeze the focusScopeTree so it persists after the raf, otherwise during unmount nodes are removed from it
                let clonedTree = $9bf71ea28793e738$export$d06fae2ee68b101e.clone();
                requestAnimationFrame(()=>{
                    // Only restore focus if we've lost focus to the body, the alternative is that focus has been purposefully moved elsewhere
                    if (ownerDocument.activeElement === ownerDocument.body) {
                        // look up the tree starting with our scope to find a nodeToRestore still in the DOM
                        let treeNode = clonedTree.getTreeNode(scopeRef);
                        while(treeNode){
                            if (treeNode.nodeToRestore && treeNode.nodeToRestore.isConnected) {
                                $9bf71ea28793e738$var$restoreFocusToElement(treeNode.nodeToRestore);
                                return;
                            }
                            treeNode = treeNode.parent;
                        }
                        // If no nodeToRestore was found, focus the first element in the nearest
                        // ancestor scope that is still in the tree.
                        treeNode = clonedTree.getTreeNode(scopeRef);
                        while(treeNode){
                            if (treeNode.scopeRef && treeNode.scopeRef.current && $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(treeNode.scopeRef)) {
                                let node = $9bf71ea28793e738$var$getFirstInScope(treeNode.scopeRef.current, true);
                                $9bf71ea28793e738$var$restoreFocusToElement(node);
                                return;
                            }
                            treeNode = treeNode.parent;
                        }
                    }
                });
            }
        };
    }, [
        scopeRef,
        restoreFocus
    ]);
}
function $9bf71ea28793e738$var$restoreFocusToElement(node) {
    // Dispatch a custom event that parent elements can intercept to customize focus restoration.
    // For example, virtualized collection components reuse DOM elements, so the original element
    // might still exist in the DOM but representing a different item.
    if (node.dispatchEvent(new CustomEvent($9bf71ea28793e738$var$RESTORE_FOCUS_EVENT, {
        bubbles: true,
        cancelable: true
    }))) $9bf71ea28793e738$var$focusElement(node);
}
function $9bf71ea28793e738$export$2d6ec8fc375ceafa(root, opts, scope) {
    let selector = (opts === null || opts === void 0 ? void 0 : opts.tabbable) ? $9bf71ea28793e738$var$TABBABLE_ELEMENT_SELECTOR : $9bf71ea28793e738$var$FOCUSABLE_ELEMENT_SELECTOR;
    let walker = ($431fbd86ca7dc216$export$b204af158042fbac)(root).createTreeWalker(root, NodeFilter.SHOW_ELEMENT, {
        acceptNode (node) {
            var _opts_from;
            // Skip nodes inside the starting node.
            if (opts === null || opts === void 0 ? void 0 : (_opts_from = opts.from) === null || _opts_from === void 0 ? void 0 : _opts_from.contains(node)) return NodeFilter.FILTER_REJECT;
            if (node.matches(selector) && ($645f2e67b85a24c9$export$e989c0fffaa6b27a)(node) && (!scope || $9bf71ea28793e738$var$isElementInScope(node, scope)) && (!(opts === null || opts === void 0 ? void 0 : opts.accept) || opts.accept(node))) return NodeFilter.FILTER_ACCEPT;
            return NodeFilter.FILTER_SKIP;
        }
    });
    if (opts === null || opts === void 0 ? void 0 : opts.from) walker.currentNode = opts.from;
    return walker;
}
function $9bf71ea28793e738$export$c5251b9e124bf29(ref, defaultOptions = {}) {
    return {
        focusNext (opts = {}) {
            let root = ref.current;
            if (!root) return null;
            let { from: from, tabbable: tabbable = defaultOptions.tabbable, wrap: wrap = defaultOptions.wrap, accept: accept = defaultOptions.accept } = opts;
            let node = from || ($431fbd86ca7dc216$export$b204af158042fbac)(root).activeElement;
            let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa(root, {
                tabbable: tabbable,
                accept: accept
            });
            if (root.contains(node)) walker.currentNode = node;
            let nextNode = walker.nextNode();
            if (!nextNode && wrap) {
                walker.currentNode = root;
                nextNode = walker.nextNode();
            }
            if (nextNode) $9bf71ea28793e738$var$focusElement(nextNode, true);
            return nextNode;
        },
        focusPrevious (opts = defaultOptions) {
            let root = ref.current;
            if (!root) return null;
            let { from: from, tabbable: tabbable = defaultOptions.tabbable, wrap: wrap = defaultOptions.wrap, accept: accept = defaultOptions.accept } = opts;
            let node = from || ($431fbd86ca7dc216$export$b204af158042fbac)(root).activeElement;
            let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa(root, {
                tabbable: tabbable,
                accept: accept
            });
            if (root.contains(node)) walker.currentNode = node;
            else {
                let next = $9bf71ea28793e738$var$last(walker);
                if (next) $9bf71ea28793e738$var$focusElement(next, true);
                return next !== null && next !== void 0 ? next : null;
            }
            let previousNode = walker.previousNode();
            if (!previousNode && wrap) {
                walker.currentNode = root;
                let lastNode = $9bf71ea28793e738$var$last(walker);
                if (!lastNode) // couldn't wrap
                return null;
                previousNode = lastNode;
            }
            if (previousNode) $9bf71ea28793e738$var$focusElement(previousNode, true);
            return previousNode !== null && previousNode !== void 0 ? previousNode : null;
        },
        focusFirst (opts = defaultOptions) {
            let root = ref.current;
            if (!root) return null;
            let { tabbable: tabbable = defaultOptions.tabbable, accept: accept = defaultOptions.accept } = opts;
            let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa(root, {
                tabbable: tabbable,
                accept: accept
            });
            let nextNode = walker.nextNode();
            if (nextNode) $9bf71ea28793e738$var$focusElement(nextNode, true);
            return nextNode;
        },
        focusLast (opts = defaultOptions) {
            let root = ref.current;
            if (!root) return null;
            let { tabbable: tabbable = defaultOptions.tabbable, accept: accept = defaultOptions.accept } = opts;
            let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa(root, {
                tabbable: tabbable,
                accept: accept
            });
            let next = $9bf71ea28793e738$var$last(walker);
            if (next) $9bf71ea28793e738$var$focusElement(next, true);
            return next !== null && next !== void 0 ? next : null;
        }
    };
}
function $9bf71ea28793e738$var$last(walker) {
    let next = undefined;
    let last;
    do {
        last = walker.lastChild();
        if (last) next = last;
    }while (last);
    return next;
}
class $9bf71ea28793e738$var$Tree {
    get size() {
        return this.fastMap.size;
    }
    getTreeNode(data) {
        return this.fastMap.get(data);
    }
    addTreeNode(scopeRef, parent, nodeToRestore) {
        let parentNode = this.fastMap.get(parent !== null && parent !== void 0 ? parent : null);
        if (!parentNode) return;
        let node = new $9bf71ea28793e738$var$TreeNode({
            scopeRef: scopeRef
        });
        parentNode.addChild(node);
        node.parent = parentNode;
        this.fastMap.set(scopeRef, node);
        if (nodeToRestore) node.nodeToRestore = nodeToRestore;
    }
    addNode(node) {
        this.fastMap.set(node.scopeRef, node);
    }
    removeTreeNode(scopeRef) {
        // never remove the root
        if (scopeRef === null) return;
        let node = this.fastMap.get(scopeRef);
        if (!node) return;
        let parentNode = node.parent;
        // when we remove a scope, check if any sibling scopes are trying to restore focus to something inside the scope we're removing
        // if we are, then replace the siblings restore with the restore from the scope we're removing
        for (let current of this.traverse())if (current !== node && node.nodeToRestore && current.nodeToRestore && node.scopeRef && node.scopeRef.current && $9bf71ea28793e738$var$isElementInScope(current.nodeToRestore, node.scopeRef.current)) current.nodeToRestore = node.nodeToRestore;
        let children = node.children;
        if (parentNode) {
            parentNode.removeChild(node);
            if (children.size > 0) children.forEach((child)=>parentNode && parentNode.addChild(child));
        }
        this.fastMap.delete(node.scopeRef);
    }
    // Pre Order Depth First
    *traverse(node = this.root) {
        if (node.scopeRef != null) yield node;
        if (node.children.size > 0) for (let child of node.children)yield* this.traverse(child);
    }
    clone() {
        var _node_parent;
        let newTree = new $9bf71ea28793e738$var$Tree();
        var _node_parent_scopeRef;
        for (let node of this.traverse())newTree.addTreeNode(node.scopeRef, (_node_parent_scopeRef = (_node_parent = node.parent) === null || _node_parent === void 0 ? void 0 : _node_parent.scopeRef) !== null && _node_parent_scopeRef !== void 0 ? _node_parent_scopeRef : null, node.nodeToRestore);
        return newTree;
    }
    constructor(){
        this.fastMap = new Map();
        this.root = new $9bf71ea28793e738$var$TreeNode({
            scopeRef: null
        });
        this.fastMap.set(null, this.root);
    }
}
class $9bf71ea28793e738$var$TreeNode {
    addChild(node) {
        this.children.add(node);
        node.parent = this;
    }
    removeChild(node) {
        this.children.delete(node);
        node.parent = undefined;
    }
    constructor(props){
        this.children = new Set();
        this.contain = false;
        this.scopeRef = props.scopeRef;
    }
}
let $9bf71ea28793e738$export$d06fae2ee68b101e = new $9bf71ea28793e738$var$Tree();

function $f7dceffc5ad7768b$export$4e328f61c538687f(props = {}) {
    let { autoFocus: autoFocus = false, isTextInput: isTextInput, within: within } = props;
    let state = (reactExports.useRef)({
        isFocused: false,
        isFocusVisible: autoFocus || ($507fabe10e71c6fb$export$b9b3dfddab17db27)()
    });
    let [isFocused, setFocused] = (reactExports.useState)(false);
    let [isFocusVisibleState, setFocusVisible] = (reactExports.useState)(()=>state.current.isFocused && state.current.isFocusVisible);
    let updateState = (reactExports.useCallback)(()=>setFocusVisible(state.current.isFocused && state.current.isFocusVisible), []);
    let onFocusChange = (reactExports.useCallback)((isFocused)=>{
        state.current.isFocused = isFocused;
        setFocused(isFocused);
        updateState();
    }, [
        updateState
    ]);
    ($507fabe10e71c6fb$export$ec71b4b83ac08ec3)((isFocusVisible)=>{
        state.current.isFocusVisible = isFocusVisible;
        updateState();
    }, [], {
        isTextInput: isTextInput
    });
    let { focusProps: focusProps } = ($a1ea59d68270f0dd$export$f8168d8dd8fd66e6)({
        isDisabled: within,
        onFocusChange: onFocusChange
    });
    let { focusWithinProps: focusWithinProps } = ($9ab94262bd0047c7$export$420e68273165f4ec)({
        isDisabled: !within,
        onFocusWithinChange: onFocusChange
    });
    return {
        isFocused: isFocused,
        isFocusVisible: isFocusVisibleState,
        focusProps: within ? focusWithinProps : focusProps
    };
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 



let $e6afbd83fe6ebbd2$var$FocusableContext = /*#__PURE__*/ (React).createContext(null);
function $e6afbd83fe6ebbd2$var$useFocusableContext(ref) {
    let context = (reactExports.useContext)($e6afbd83fe6ebbd2$var$FocusableContext) || {};
    ($e7801be82b4b2a53$export$4debdb1a3f0fa79e)(context, ref);
    // eslint-disable-next-line
    let { ref: _, ...otherProps } = context;
    return otherProps;
}
function $e6afbd83fe6ebbd2$export$4c014de7c8940b4c(props, domRef) {
    let { focusProps: focusProps } = ($a1ea59d68270f0dd$export$f8168d8dd8fd66e6)(props);
    let { keyboardProps: keyboardProps } = ($46d819fcbaf35654$export$8f71654801c2f7cd)(props);
    let interactions = ($3ef42575df84b30b$export$9d1611c77c2fe928)(focusProps, keyboardProps);
    let domProps = $e6afbd83fe6ebbd2$var$useFocusableContext(domRef);
    let interactionProps = props.isDisabled ? {} : domProps;
    let autoFocusRef = (reactExports.useRef)(props.autoFocus);
    (reactExports.useEffect)(()=>{
        if (autoFocusRef.current && domRef.current) ($6a99195332edec8b$export$80f3e147d781571c)(domRef.current);
        autoFocusRef.current = false;
    }, [
        domRef
    ]);
    return {
        focusableProps: ($3ef42575df84b30b$export$9d1611c77c2fe928)({
            ...interactions,
            tabIndex: props.excludeFromTabOrder && !props.isDisabled ? -1 : undefined
        }, interactionProps)
    };
}

/*
 * Copyright 2022 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 


function $83013635b024ae3d$export$eac1895992b9f3d6(ref, options) {
    let isDisabled = options === null || options === void 0 ? void 0 : options.isDisabled;
    let [hasTabbableChild, setHasTabbableChild] = (reactExports.useState)(false);
    ($f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(()=>{
        if ((ref === null || ref === void 0 ? void 0 : ref.current) && !isDisabled) {
            let update = ()=>{
                if (ref.current) {
                    let walker = ($9bf71ea28793e738$export$2d6ec8fc375ceafa)(ref.current, {
                        tabbable: true
                    });
                    setHasTabbableChild(!!walker.nextNode());
                }
            };
            update();
            // Update when new elements are inserted, or the tabIndex/disabled attribute updates.
            let observer = new MutationObserver(update);
            observer.observe(ref.current, {
                subtree: true,
                childList: true,
                attributes: true,
                attributeFilter: [
                    'tabIndex',
                    'disabled'
                ]
            });
            return ()=>{
                // Disconnect mutation observer when a React update occurs on the top-level component
                // so we update synchronously after re-rendering. Otherwise React will emit act warnings
                // in tests since mutation observers fire asynchronously. The mutation observer is necessary
                // so we also update if a child component re-renders and adds/removes something tabbable.
                observer.disconnect();
            };
        }
    });
    return isDisabled ? false : hasTabbableChild;
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 


function $298d61e98472621b$export$dcf14c9974fe2767(props, ref) {
    let { elementType: elementType = 'a', onPress: onPress, onPressStart: onPressStart, onPressEnd: onPressEnd, // @ts-ignore
    onClick: deprecatedOnClick, isDisabled: isDisabled, ...otherProps } = props;
    let linkProps = {};
    if (elementType !== 'a') linkProps = {
        role: 'link',
        tabIndex: !isDisabled ? 0 : undefined
    };
    let { focusableProps: focusableProps } = ($e6afbd83fe6ebbd2$export$4c014de7c8940b4c)(props, ref);
    let { pressProps: pressProps, isPressed: isPressed } = ($f6c31cce2adf654f$export$45712eceda6fad21)({
        onPress: onPress,
        onPressStart: onPressStart,
        onPressEnd: onPressEnd,
        isDisabled: isDisabled,
        ref: ref
    });
    let domProps = ($65484d02dcb7eb3e$export$457c3d6518dd4c6f)(otherProps, {
        labelable: true
    });
    let interactionHandlers = ($3ef42575df84b30b$export$9d1611c77c2fe928)(focusableProps, pressProps);
    let router = ($ea8dcbcb9ea1b556$export$9a302a45f65d0572)();
    let routerLinkProps = ($ea8dcbcb9ea1b556$export$7e924b3091a3bd18)(props);
    return {
        isPressed: isPressed,
        linkProps: ($3ef42575df84b30b$export$9d1611c77c2fe928)(domProps, routerLinkProps, {
            ...interactionHandlers,
            ...linkProps,
            'aria-disabled': isDisabled || undefined,
            'aria-current': props['aria-current'],
            onClick: (e)=>{
                var _pressProps_onClick;
                (_pressProps_onClick = pressProps.onClick) === null || _pressProps_onClick === void 0 ? void 0 : _pressProps_onClick.call(pressProps, e);
                if (deprecatedOnClick) {
                    deprecatedOnClick(e);
                    console.warn('onClick is deprecated, please use onPress');
                }
                // If a custom router is provided, prevent default and forward if this link should client navigate.
                if (!router.isNative && e.currentTarget instanceof HTMLAnchorElement && e.currentTarget.href && // If props are applied to a router Link component, it may have already prevented default.
                !e.isDefaultPrevented() && ($ea8dcbcb9ea1b556$export$efa8c9099e530235)(e.currentTarget, e) && props.href) {
                    e.preventDefault();
                    router.open(e.currentTarget, e, props.href, props.routerOptions);
                }
            }
        })
    };
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ // https://en.wikipedia.org/wiki/Right-to-left
const $148a7a147e38ea7f$var$RTL_SCRIPTS = new Set([
    'Arab',
    'Syrc',
    'Samr',
    'Mand',
    'Thaa',
    'Mend',
    'Nkoo',
    'Adlm',
    'Rohg',
    'Hebr'
]);
const $148a7a147e38ea7f$var$RTL_LANGS = new Set([
    'ae',
    'ar',
    'arc',
    'bcc',
    'bqi',
    'ckb',
    'dv',
    'fa',
    'glk',
    'he',
    'ku',
    'mzn',
    'nqo',
    'pnb',
    'ps',
    'sd',
    'ug',
    'ur',
    'yi'
]);
function $148a7a147e38ea7f$export$702d680b21cbd764(localeString) {
    // If the Intl.Locale API is available, use it to get the locale's text direction.
    // @ts-ignore
    if (Intl.Locale) {
        let locale = new Intl.Locale(localeString).maximize();
        // Use the text info object to get the direction if possible.
        // @ts-ignore - this was implemented as a property by some browsers before it was standardized as a function.
        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/getTextInfo
        let textInfo = typeof locale.getTextInfo === 'function' ? locale.getTextInfo() : locale.textInfo;
        if (textInfo) return textInfo.direction === 'rtl';
        // Fallback: guess using the script.
        // This is more accurate than guessing by language, since languages can be written in multiple scripts.
        if (locale.script) return $148a7a147e38ea7f$var$RTL_SCRIPTS.has(locale.script);
    }
    // If not, just guess by the language (first part of the locale)
    let lang = localeString.split('-')[0];
    return $148a7a147e38ea7f$var$RTL_LANGS.has(lang);
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 


// Locale passed from server by PackageLocalizationProvider.
const $1e5a04cdaf7d1af8$var$localeSymbol = Symbol.for('react-aria.i18n.locale');
function $1e5a04cdaf7d1af8$export$f09106e7c6677ec5() {
    let locale = typeof window !== 'undefined' && window[$1e5a04cdaf7d1af8$var$localeSymbol] || typeof navigator !== 'undefined' && (navigator.language || navigator.userLanguage) || 'en-US';
    try {
        // @ts-ignore
        Intl.DateTimeFormat.supportedLocalesOf([
            locale
        ]);
    } catch (_err) {
        locale = 'en-US';
    }
    return {
        locale: locale,
        direction: ($148a7a147e38ea7f$export$702d680b21cbd764)(locale) ? 'rtl' : 'ltr'
    };
}
let $1e5a04cdaf7d1af8$var$currentLocale = $1e5a04cdaf7d1af8$export$f09106e7c6677ec5();
let $1e5a04cdaf7d1af8$var$listeners = new Set();
function $1e5a04cdaf7d1af8$var$updateLocale() {
    $1e5a04cdaf7d1af8$var$currentLocale = $1e5a04cdaf7d1af8$export$f09106e7c6677ec5();
    for (let listener of $1e5a04cdaf7d1af8$var$listeners)listener($1e5a04cdaf7d1af8$var$currentLocale);
}
function $1e5a04cdaf7d1af8$export$188ec29ebc2bdc3a() {
    let isSSR = ($b5e257d569688ac6$export$535bd6ca7f90a273)();
    let [defaultLocale, setDefaultLocale] = (reactExports.useState)($1e5a04cdaf7d1af8$var$currentLocale);
    (reactExports.useEffect)(()=>{
        if ($1e5a04cdaf7d1af8$var$listeners.size === 0) window.addEventListener('languagechange', $1e5a04cdaf7d1af8$var$updateLocale);
        $1e5a04cdaf7d1af8$var$listeners.add(setDefaultLocale);
        return ()=>{
            $1e5a04cdaf7d1af8$var$listeners.delete(setDefaultLocale);
            if ($1e5a04cdaf7d1af8$var$listeners.size === 0) window.removeEventListener('languagechange', $1e5a04cdaf7d1af8$var$updateLocale);
        };
    }, []);
    // We cannot determine the browser's language on the server, so default to
    // en-US. This will be updated after hydration on the client to the correct value.
    if (isSSR) return {
        locale: 'en-US',
        direction: 'ltr'
    };
    return defaultLocale;
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 


const $18f2051aff69b9bf$var$I18nContext = /*#__PURE__*/ (React).createContext(null);
function $18f2051aff69b9bf$export$43bb16f9c6d9e3f7() {
    let defaultLocale = ($1e5a04cdaf7d1af8$export$188ec29ebc2bdc3a)();
    let context = (reactExports.useContext)($18f2051aff69b9bf$var$I18nContext);
    return context || defaultLocale;
}

/*
 * Copyright 2022 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ const $5b160d28a433310d$var$localeSymbol = Symbol.for('react-aria.i18n.locale');
const $5b160d28a433310d$var$stringsSymbol = Symbol.for('react-aria.i18n.strings');
let $5b160d28a433310d$var$cachedGlobalStrings = undefined;
class $5b160d28a433310d$export$c17fa47878dc55b6 {
    /** Returns a localized string for the given key and locale. */ getStringForLocale(key, locale) {
        let strings = this.getStringsForLocale(locale);
        let string = strings[key];
        if (!string) throw new Error(`Could not find intl message ${key} in ${locale} locale`);
        return string;
    }
    /** Returns all localized strings for the given locale. */ getStringsForLocale(locale) {
        let strings = this.strings[locale];
        if (!strings) {
            strings = $5b160d28a433310d$var$getStringsForLocale(locale, this.strings, this.defaultLocale);
            this.strings[locale] = strings;
        }
        return strings;
    }
    static getGlobalDictionaryForPackage(packageName) {
        if (typeof window === 'undefined') return null;
        let locale = window[$5b160d28a433310d$var$localeSymbol];
        if ($5b160d28a433310d$var$cachedGlobalStrings === undefined) {
            let globalStrings = window[$5b160d28a433310d$var$stringsSymbol];
            if (!globalStrings) return null;
            $5b160d28a433310d$var$cachedGlobalStrings = {};
            for(let pkg in globalStrings)$5b160d28a433310d$var$cachedGlobalStrings[pkg] = new $5b160d28a433310d$export$c17fa47878dc55b6({
                [locale]: globalStrings[pkg]
            }, locale);
        }
        let dictionary = $5b160d28a433310d$var$cachedGlobalStrings === null || $5b160d28a433310d$var$cachedGlobalStrings === void 0 ? void 0 : $5b160d28a433310d$var$cachedGlobalStrings[packageName];
        if (!dictionary) throw new Error(`Strings for package "${packageName}" were not included by LocalizedStringProvider. Please add it to the list passed to createLocalizedStringDictionary.`);
        return dictionary;
    }
    constructor(messages, defaultLocale = 'en-US'){
        // Clone messages so we don't modify the original object.
        // Filter out entries with falsy values which may have been caused by applying optimize-locales-plugin.
        this.strings = Object.fromEntries(Object.entries(messages).filter(([, v])=>v));
        this.defaultLocale = defaultLocale;
    }
}
function $5b160d28a433310d$var$getStringsForLocale(locale, strings, defaultLocale = 'en-US') {
    // If there is an exact match, use it.
    if (strings[locale]) return strings[locale];
    // Attempt to find the closest match by language.
    // For example, if the locale is fr-CA (French Canadian), but there is only
    // an fr-FR (France) set of strings, use that.
    // This could be replaced with Intl.LocaleMatcher once it is supported.
    // https://github.com/tc39/proposal-intl-localematcher
    let language = $5b160d28a433310d$var$getLanguage(locale);
    if (strings[language]) return strings[language];
    for(let key in strings){
        if (key.startsWith(language + '-')) return strings[key];
    }
    // Nothing close, use english.
    return strings[defaultLocale];
}
function $5b160d28a433310d$var$getLanguage(locale) {
    // @ts-ignore
    if (Intl.Locale) // @ts-ignore
    return new Intl.Locale(locale).language;
    return locale.split('-')[0];
}

/*
 * Copyright 2022 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ const $6db58dc88e78b024$var$pluralRulesCache = new Map();
const $6db58dc88e78b024$var$numberFormatCache = new Map();
class $6db58dc88e78b024$export$2f817fcdc4b89ae0 {
    /** Formats a localized string for the given key with the provided variables. */ format(key, variables) {
        let message = this.strings.getStringForLocale(key, this.locale);
        return typeof message === 'function' ? message(variables, this) : message;
    }
    plural(count, options, type = 'cardinal') {
        let opt = options['=' + count];
        if (opt) return typeof opt === 'function' ? opt() : opt;
        let key = this.locale + ':' + type;
        let pluralRules = $6db58dc88e78b024$var$pluralRulesCache.get(key);
        if (!pluralRules) {
            pluralRules = new Intl.PluralRules(this.locale, {
                type: type
            });
            $6db58dc88e78b024$var$pluralRulesCache.set(key, pluralRules);
        }
        let selected = pluralRules.select(count);
        opt = options[selected] || options.other;
        return typeof opt === 'function' ? opt() : opt;
    }
    number(value) {
        let numberFormat = $6db58dc88e78b024$var$numberFormatCache.get(this.locale);
        if (!numberFormat) {
            numberFormat = new Intl.NumberFormat(this.locale);
            $6db58dc88e78b024$var$numberFormatCache.set(this.locale, numberFormat);
        }
        return numberFormat.format(value);
    }
    select(options, value) {
        let opt = options[value] || options.other;
        return typeof opt === 'function' ? opt() : opt;
    }
    constructor(locale, strings){
        this.locale = locale;
        this.strings = strings;
    }
}

/*
 * Copyright 2022 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 


const $fca6afa0e843324b$var$cache = new WeakMap();
function $fca6afa0e843324b$var$getCachedDictionary(strings) {
    let dictionary = $fca6afa0e843324b$var$cache.get(strings);
    if (!dictionary) {
        dictionary = new ($5b160d28a433310d$export$c17fa47878dc55b6)(strings);
        $fca6afa0e843324b$var$cache.set(strings, dictionary);
    }
    return dictionary;
}
function $fca6afa0e843324b$export$87b761675e8eaa10(strings, packageName) {
    return packageName && ($5b160d28a433310d$export$c17fa47878dc55b6).getGlobalDictionaryForPackage(packageName) || $fca6afa0e843324b$var$getCachedDictionary(strings);
}
function $fca6afa0e843324b$export$f12b703ca79dfbb1(strings, packageName) {
    let { locale: locale } = ($18f2051aff69b9bf$export$43bb16f9c6d9e3f7)();
    let dictionary = $fca6afa0e843324b$export$87b761675e8eaa10(strings, packageName);
    return (reactExports.useMemo)(()=>new ($6db58dc88e78b024$export$2f817fcdc4b89ae0)(locale, dictionary), [
        locale,
        dictionary
    ]);
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 
function $2b4dce13dd5a17fa$export$842a2cf37af977e1(amount, numerator) {
    return amount - numerator * Math.floor(amount / numerator);
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ // Portions of the code in this file are based on code from ICU.
// Original licensing can be found in the NOTICE file in the root directory of this source tree.


const $3b62074eb05584b2$var$EPOCH = 1721426; // 001/01/03 Julian C.E.
function $3b62074eb05584b2$export$f297eb839006d339(era, year, month, day) {
    year = $3b62074eb05584b2$export$c36e0ecb2d4fa69d(era, year);
    let y1 = year - 1;
    let monthOffset = -2;
    if (month <= 2) monthOffset = 0;
    else if ($3b62074eb05584b2$export$553d7fa8e3805fc0(year)) monthOffset = -1;
    return $3b62074eb05584b2$var$EPOCH - 1 + 365 * y1 + Math.floor(y1 / 4) - Math.floor(y1 / 100) + Math.floor(y1 / 400) + Math.floor((367 * month - 362) / 12 + monthOffset + day);
}
function $3b62074eb05584b2$export$553d7fa8e3805fc0(year) {
    return year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0);
}
function $3b62074eb05584b2$export$c36e0ecb2d4fa69d(era, year) {
    return era === 'BC' ? 1 - year : year;
}
function $3b62074eb05584b2$export$4475b7e617eb123c(year) {
    let era = 'AD';
    if (year <= 0) {
        era = 'BC';
        year = 1 - year;
    }
    return [
        era,
        year
    ];
}
const $3b62074eb05584b2$var$daysInMonth = {
    standard: [
        31,
        28,
        31,
        30,
        31,
        30,
        31,
        31,
        30,
        31,
        30,
        31
    ],
    leapyear: [
        31,
        29,
        31,
        30,
        31,
        30,
        31,
        31,
        30,
        31,
        30,
        31
    ]
};
class $3b62074eb05584b2$export$80ee6245ec4f29ec {
    fromJulianDay(jd) {
        let jd0 = jd;
        let depoch = jd0 - $3b62074eb05584b2$var$EPOCH;
        let quadricent = Math.floor(depoch / 146097);
        let dqc = ($2b4dce13dd5a17fa$export$842a2cf37af977e1)(depoch, 146097);
        let cent = Math.floor(dqc / 36524);
        let dcent = ($2b4dce13dd5a17fa$export$842a2cf37af977e1)(dqc, 36524);
        let quad = Math.floor(dcent / 1461);
        let dquad = ($2b4dce13dd5a17fa$export$842a2cf37af977e1)(dcent, 1461);
        let yindex = Math.floor(dquad / 365);
        let extendedYear = quadricent * 400 + cent * 100 + quad * 4 + yindex + (cent !== 4 && yindex !== 4 ? 1 : 0);
        let [era, year] = $3b62074eb05584b2$export$4475b7e617eb123c(extendedYear);
        let yearDay = jd0 - $3b62074eb05584b2$export$f297eb839006d339(era, year, 1, 1);
        let leapAdj = 2;
        if (jd0 < $3b62074eb05584b2$export$f297eb839006d339(era, year, 3, 1)) leapAdj = 0;
        else if ($3b62074eb05584b2$export$553d7fa8e3805fc0(year)) leapAdj = 1;
        let month = Math.floor(((yearDay + leapAdj) * 12 + 373) / 367);
        let day = jd0 - $3b62074eb05584b2$export$f297eb839006d339(era, year, month, 1) + 1;
        return new ($35ea8db9cb2ccb90$export$99faa760c7908e4f)(era, year, month, day);
    }
    toJulianDay(date) {
        return $3b62074eb05584b2$export$f297eb839006d339(date.era, date.year, date.month, date.day);
    }
    getDaysInMonth(date) {
        return $3b62074eb05584b2$var$daysInMonth[$3b62074eb05584b2$export$553d7fa8e3805fc0(date.year) ? 'leapyear' : 'standard'][date.month - 1];
    }
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    getMonthsInYear(date) {
        return 12;
    }
    getDaysInYear(date) {
        return $3b62074eb05584b2$export$553d7fa8e3805fc0(date.year) ? 366 : 365;
    }
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    getYearsInEra(date) {
        return 9999;
    }
    getEras() {
        return [
            'BC',
            'AD'
        ];
    }
    isInverseEra(date) {
        return date.era === 'BC';
    }
    balanceDate(date) {
        if (date.year <= 0) {
            date.era = date.era === 'BC' ? 'AD' : 'BC';
            date.year = 1 - date.year;
        }
    }
    constructor(){
        this.identifier = 'gregory';
    }
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ // Data from https://github.com/unicode-cldr/cldr-core/blob/master/supplemental/weekData.json
// Locales starting on Sunday have been removed for compression.
const $2fe286d2fb449abb$export$7a5acbd77d414bd9 = {
    '001': 1,
    AD: 1,
    AE: 6,
    AF: 6,
    AI: 1,
    AL: 1,
    AM: 1,
    AN: 1,
    AR: 1,
    AT: 1,
    AU: 1,
    AX: 1,
    AZ: 1,
    BA: 1,
    BE: 1,
    BG: 1,
    BH: 6,
    BM: 1,
    BN: 1,
    BY: 1,
    CH: 1,
    CL: 1,
    CM: 1,
    CN: 1,
    CR: 1,
    CY: 1,
    CZ: 1,
    DE: 1,
    DJ: 6,
    DK: 1,
    DZ: 6,
    EC: 1,
    EE: 1,
    EG: 6,
    ES: 1,
    FI: 1,
    FJ: 1,
    FO: 1,
    FR: 1,
    GB: 1,
    GE: 1,
    GF: 1,
    GP: 1,
    GR: 1,
    HR: 1,
    HU: 1,
    IE: 1,
    IQ: 6,
    IR: 6,
    IS: 1,
    IT: 1,
    JO: 6,
    KG: 1,
    KW: 6,
    KZ: 1,
    LB: 1,
    LI: 1,
    LK: 1,
    LT: 1,
    LU: 1,
    LV: 1,
    LY: 6,
    MC: 1,
    MD: 1,
    ME: 1,
    MK: 1,
    MN: 1,
    MQ: 1,
    MV: 5,
    MY: 1,
    NL: 1,
    NO: 1,
    NZ: 1,
    OM: 6,
    PL: 1,
    QA: 6,
    RE: 1,
    RO: 1,
    RS: 1,
    RU: 1,
    SD: 6,
    SE: 1,
    SI: 1,
    SK: 1,
    SM: 1,
    SY: 6,
    TJ: 1,
    TM: 1,
    TR: 1,
    UA: 1,
    UY: 1,
    UZ: 1,
    VA: 1,
    VN: 1,
    XK: 1
};

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 

function $14e0f24ef4ac5c92$export$ea39ec197993aef0(a, b) {
    b = ($11d87f3f76e88657$export$b4a036af3fc0b032)(b, a.calendar);
    return a.era === b.era && a.year === b.year && a.month === b.month && a.day === b.day;
}
function $14e0f24ef4ac5c92$export$a18c89cbd24170ff(a, b) {
    b = ($11d87f3f76e88657$export$b4a036af3fc0b032)(b, a.calendar);
    // In the Japanese calendar, months can span multiple eras/years, so only compare the first of the month.
    a = $14e0f24ef4ac5c92$export$a5a3b454ada2268e(a);
    b = $14e0f24ef4ac5c92$export$a5a3b454ada2268e(b);
    return a.era === b.era && a.year === b.year && a.month === b.month;
}
function $14e0f24ef4ac5c92$export$91b62ebf2ba703ee(a, b) {
    return a.calendar.identifier === b.calendar.identifier && a.era === b.era && a.year === b.year && a.month === b.month && a.day === b.day;
}
function $14e0f24ef4ac5c92$export$629b0a497aa65267(date, timeZone) {
    return $14e0f24ef4ac5c92$export$ea39ec197993aef0(date, $14e0f24ef4ac5c92$export$d0bdf45af03a6ea3(timeZone));
}
function $14e0f24ef4ac5c92$export$2061056d06d7cdf7(date, locale) {
    let julian = date.calendar.toJulianDay(date);
    // If julian is negative, then julian % 7 will be negative, so we adjust
    // accordingly.  Julian day 0 is Monday.
    let dayOfWeek = Math.ceil(julian + 1 - $14e0f24ef4ac5c92$var$getWeekStart(locale)) % 7;
    if (dayOfWeek < 0) dayOfWeek += 7;
    return dayOfWeek;
}
function $14e0f24ef4ac5c92$export$461939dd4422153(timeZone) {
    return ($11d87f3f76e88657$export$1b96692a1ba042ac)(Date.now(), timeZone);
}
function $14e0f24ef4ac5c92$export$d0bdf45af03a6ea3(timeZone) {
    return ($11d87f3f76e88657$export$93522d1a439f3617)($14e0f24ef4ac5c92$export$461939dd4422153(timeZone));
}
function $14e0f24ef4ac5c92$export$68781ddf31c0090f(a, b) {
    return a.calendar.toJulianDay(a) - b.calendar.toJulianDay(b);
}
function $14e0f24ef4ac5c92$export$c19a80a9721b80f6(a, b) {
    return $14e0f24ef4ac5c92$var$timeToMs(a) - $14e0f24ef4ac5c92$var$timeToMs(b);
}
function $14e0f24ef4ac5c92$var$timeToMs(a) {
    return a.hour * 3600000 + a.minute * 60000 + a.second * 1000 + a.millisecond;
}
let $14e0f24ef4ac5c92$var$localTimeZone = null;
function $14e0f24ef4ac5c92$export$aa8b41735afcabd2() {
    // TODO: invalidate this somehow?
    if ($14e0f24ef4ac5c92$var$localTimeZone == null) $14e0f24ef4ac5c92$var$localTimeZone = new Intl.DateTimeFormat().resolvedOptions().timeZone;
    return $14e0f24ef4ac5c92$var$localTimeZone;
}
function $14e0f24ef4ac5c92$export$a5a3b454ada2268e(date) {
    // Use `subtract` instead of `set` so we don't get constrained in an era.
    return date.subtract({
        days: date.day - 1
    });
}
function $14e0f24ef4ac5c92$export$a2258d9c4118825c(date) {
    return date.add({
        days: date.calendar.getDaysInMonth(date) - date.day
    });
}
function $14e0f24ef4ac5c92$export$f91e89d3d0406102(date) {
    return $14e0f24ef4ac5c92$export$a5a3b454ada2268e(date.subtract({
        months: date.month - 1
    }));
}
function $14e0f24ef4ac5c92$export$5412ac11713b72ad(date) {
    if (date.calendar.getMinimumMonthInYear) return date.calendar.getMinimumMonthInYear(date);
    return 1;
}
function $14e0f24ef4ac5c92$export$b2f4953d301981d5(date) {
    if (date.calendar.getMinimumDayInMonth) return date.calendar.getMinimumDayInMonth(date);
    return 1;
}
function $14e0f24ef4ac5c92$export$42c81a444fbfb5d4(date, locale) {
    let dayOfWeek = $14e0f24ef4ac5c92$export$2061056d06d7cdf7(date, locale);
    return date.subtract({
        days: dayOfWeek
    });
}
function $14e0f24ef4ac5c92$export$ef8b6d9133084f4e(date, locale) {
    return $14e0f24ef4ac5c92$export$42c81a444fbfb5d4(date, locale).add({
        days: 6
    });
}
const $14e0f24ef4ac5c92$var$cachedRegions = new Map();
function $14e0f24ef4ac5c92$var$getRegion(locale) {
    // If the Intl.Locale API is available, use it to get the region for the locale.
    // @ts-ignore
    if (Intl.Locale) {
        // Constructing an Intl.Locale is expensive, so cache the result.
        let region = $14e0f24ef4ac5c92$var$cachedRegions.get(locale);
        if (!region) {
            // @ts-ignore
            region = new Intl.Locale(locale).maximize().region;
            if (region) $14e0f24ef4ac5c92$var$cachedRegions.set(locale, region);
        }
        return region;
    }
    // If not, just try splitting the string.
    // If the second part of the locale string is 'u',
    // then this is a unicode extension, so ignore it.
    // Otherwise, it should be the region.
    let part = locale.split('-')[1];
    return part === 'u' ? undefined : part;
}
function $14e0f24ef4ac5c92$var$getWeekStart(locale) {
    // TODO: use Intl.Locale for this once browsers support the weekInfo property
    // https://github.com/tc39/proposal-intl-locale-info
    let region = $14e0f24ef4ac5c92$var$getRegion(locale);
    return region ? ($2fe286d2fb449abb$export$7a5acbd77d414bd9)[region] || 0 : 0;
}
function $14e0f24ef4ac5c92$export$ccc1b2479e7dd654(date, locale) {
    let days = date.calendar.getDaysInMonth(date);
    return Math.ceil(($14e0f24ef4ac5c92$export$2061056d06d7cdf7($14e0f24ef4ac5c92$export$a5a3b454ada2268e(date), locale) + days) / 7);
}
function $14e0f24ef4ac5c92$export$5c333a116e949cdd(a, b) {
    if (a && b) return a.compare(b) <= 0 ? a : b;
    return a || b;
}
function $14e0f24ef4ac5c92$export$a75f2bff57811055(a, b) {
    if (a && b) return a.compare(b) >= 0 ? a : b;
    return a || b;
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ // Portions of the code in this file are based on code from the TC39 Temporal proposal.
// Original licensing can be found in the NOTICE file in the root directory of this source tree.




function $11d87f3f76e88657$export$bd4fb2bc8bb06fb(date) {
    date = $11d87f3f76e88657$export$b4a036af3fc0b032(date, new ($3b62074eb05584b2$export$80ee6245ec4f29ec)());
    let year = ($3b62074eb05584b2$export$c36e0ecb2d4fa69d)(date.era, date.year);
    return $11d87f3f76e88657$var$epochFromParts(year, date.month, date.day, date.hour, date.minute, date.second, date.millisecond);
}
function $11d87f3f76e88657$var$epochFromParts(year, month, day, hour, minute, second, millisecond) {
    // Note: Date.UTC() interprets one and two-digit years as being in the
    // 20th century, so don't use it
    let date = new Date();
    date.setUTCHours(hour, minute, second, millisecond);
    date.setUTCFullYear(year, month - 1, day);
    return date.getTime();
}
function $11d87f3f76e88657$export$59c99f3515d3493f(ms, timeZone) {
    // Fast path for UTC.
    if (timeZone === 'UTC') return 0;
    // Fast path: for local timezone after 1970, use native Date.
    if (ms > 0 && timeZone === ($14e0f24ef4ac5c92$export$aa8b41735afcabd2)()) return new Date(ms).getTimezoneOffset() * -60000;
    let { year: year, month: month, day: day, hour: hour, minute: minute, second: second } = $11d87f3f76e88657$var$getTimeZoneParts(ms, timeZone);
    let utc = $11d87f3f76e88657$var$epochFromParts(year, month, day, hour, minute, second, 0);
    return utc - Math.floor(ms / 1000) * 1000;
}
const $11d87f3f76e88657$var$formattersByTimeZone = new Map();
function $11d87f3f76e88657$var$getTimeZoneParts(ms, timeZone) {
    let formatter = $11d87f3f76e88657$var$formattersByTimeZone.get(timeZone);
    if (!formatter) {
        formatter = new Intl.DateTimeFormat('en-US', {
            timeZone: timeZone,
            hour12: false,
            era: 'short',
            year: 'numeric',
            month: 'numeric',
            day: 'numeric',
            hour: 'numeric',
            minute: 'numeric',
            second: 'numeric'
        });
        $11d87f3f76e88657$var$formattersByTimeZone.set(timeZone, formatter);
    }
    let parts = formatter.formatToParts(new Date(ms));
    let namedParts = {};
    for (let part of parts)if (part.type !== 'literal') namedParts[part.type] = part.value;
    return {
        // Firefox returns B instead of BC... https://bugzilla.mozilla.org/show_bug.cgi?id=1752253
        year: namedParts.era === 'BC' || namedParts.era === 'B' ? -namedParts.year + 1 : +namedParts.year,
        month: +namedParts.month,
        day: +namedParts.day,
        hour: namedParts.hour === '24' ? 0 : +namedParts.hour,
        minute: +namedParts.minute,
        second: +namedParts.second
    };
}
const $11d87f3f76e88657$var$DAYMILLIS = 86400000;
function $11d87f3f76e88657$var$getValidWallTimes(date, timeZone, earlier, later) {
    let found = earlier === later ? [
        earlier
    ] : [
        earlier,
        later
    ];
    return found.filter((absolute)=>$11d87f3f76e88657$var$isValidWallTime(date, timeZone, absolute));
}
function $11d87f3f76e88657$var$isValidWallTime(date, timeZone, absolute) {
    let parts = $11d87f3f76e88657$var$getTimeZoneParts(absolute, timeZone);
    return date.year === parts.year && date.month === parts.month && date.day === parts.day && date.hour === parts.hour && date.minute === parts.minute && date.second === parts.second;
}
function $11d87f3f76e88657$export$5107c82f94518f5c(date, timeZone, disambiguation = 'compatible') {
    let dateTime = $11d87f3f76e88657$export$b21e0b124e224484(date);
    // Fast path: if the time zone is UTC, use native Date.
    if (timeZone === 'UTC') return $11d87f3f76e88657$export$bd4fb2bc8bb06fb(dateTime);
    // Fast path: if the time zone is the local timezone and disambiguation is compatible, use native Date.
    if (timeZone === ($14e0f24ef4ac5c92$export$aa8b41735afcabd2)() && disambiguation === 'compatible') {
        dateTime = $11d87f3f76e88657$export$b4a036af3fc0b032(dateTime, new ($3b62074eb05584b2$export$80ee6245ec4f29ec)());
        // Don't use Date constructor here because two-digit years are interpreted in the 20th century.
        let date = new Date();
        let year = ($3b62074eb05584b2$export$c36e0ecb2d4fa69d)(dateTime.era, dateTime.year);
        date.setFullYear(year, dateTime.month - 1, dateTime.day);
        date.setHours(dateTime.hour, dateTime.minute, dateTime.second, dateTime.millisecond);
        return date.getTime();
    }
    let ms = $11d87f3f76e88657$export$bd4fb2bc8bb06fb(dateTime);
    let offsetBefore = $11d87f3f76e88657$export$59c99f3515d3493f(ms - $11d87f3f76e88657$var$DAYMILLIS, timeZone);
    let offsetAfter = $11d87f3f76e88657$export$59c99f3515d3493f(ms + $11d87f3f76e88657$var$DAYMILLIS, timeZone);
    let valid = $11d87f3f76e88657$var$getValidWallTimes(dateTime, timeZone, ms - offsetBefore, ms - offsetAfter);
    if (valid.length === 1) return valid[0];
    if (valid.length > 1) switch(disambiguation){
        // 'compatible' means 'earlier' for "fall back" transitions
        case 'compatible':
        case 'earlier':
            return valid[0];
        case 'later':
            return valid[valid.length - 1];
        case 'reject':
            throw new RangeError('Multiple possible absolute times found');
    }
    switch(disambiguation){
        case 'earlier':
            return Math.min(ms - offsetBefore, ms - offsetAfter);
        // 'compatible' means 'later' for "spring forward" transitions
        case 'compatible':
        case 'later':
            return Math.max(ms - offsetBefore, ms - offsetAfter);
        case 'reject':
            throw new RangeError('No such absolute time found');
    }
}
function $11d87f3f76e88657$export$e67a095c620b86fe(dateTime, timeZone, disambiguation = 'compatible') {
    return new Date($11d87f3f76e88657$export$5107c82f94518f5c(dateTime, timeZone, disambiguation));
}
function $11d87f3f76e88657$export$1b96692a1ba042ac(ms, timeZone) {
    let offset = $11d87f3f76e88657$export$59c99f3515d3493f(ms, timeZone);
    let date = new Date(ms + offset);
    let year = date.getUTCFullYear();
    let month = date.getUTCMonth() + 1;
    let day = date.getUTCDate();
    let hour = date.getUTCHours();
    let minute = date.getUTCMinutes();
    let second = date.getUTCSeconds();
    let millisecond = date.getUTCMilliseconds();
    return new ($35ea8db9cb2ccb90$export$d3b7288e7994edea)(year, month, day, timeZone, offset, hour, minute, second, millisecond);
}
function $11d87f3f76e88657$export$93522d1a439f3617(dateTime) {
    return new ($35ea8db9cb2ccb90$export$99faa760c7908e4f)(dateTime.calendar, dateTime.era, dateTime.year, dateTime.month, dateTime.day);
}
function $11d87f3f76e88657$export$b21e0b124e224484(date, time) {
    let hour = 0, minute = 0, second = 0, millisecond = 0;
    if ('timeZone' in date) ({ hour: hour, minute: minute, second: second, millisecond: millisecond } = date);
    else if ('hour' in date && !time) return date;
    if (time) ({ hour: hour, minute: minute, second: second, millisecond: millisecond } = time);
    return new ($35ea8db9cb2ccb90$export$ca871e8dbb80966f)(date.calendar, date.era, date.year, date.month, date.day, hour, minute, second, millisecond);
}
function $11d87f3f76e88657$export$d33f79e3ffc3dc83(dateTime) {
    return new ($35ea8db9cb2ccb90$export$680ea196effce5f)(dateTime.hour, dateTime.minute, dateTime.second, dateTime.millisecond);
}
function $11d87f3f76e88657$export$b4a036af3fc0b032(date, calendar) {
    if (date.calendar.identifier === calendar.identifier) return date;
    let calendarDate = calendar.fromJulianDay(date.calendar.toJulianDay(date));
    let copy = date.copy();
    copy.calendar = calendar;
    copy.era = calendarDate.era;
    copy.year = calendarDate.year;
    copy.month = calendarDate.month;
    copy.day = calendarDate.day;
    ($735220c2d4774dd3$export$c4e2ecac49351ef2)(copy);
    return copy;
}
function $11d87f3f76e88657$export$84c95a83c799e074(date, timeZone, disambiguation) {
    if (date instanceof ($35ea8db9cb2ccb90$export$d3b7288e7994edea)) {
        if (date.timeZone === timeZone) return date;
        return $11d87f3f76e88657$export$538b00033cc11c75(date, timeZone);
    }
    let ms = $11d87f3f76e88657$export$5107c82f94518f5c(date, timeZone, disambiguation);
    return $11d87f3f76e88657$export$1b96692a1ba042ac(ms, timeZone);
}
function $11d87f3f76e88657$export$83aac07b4c37b25(date) {
    let ms = $11d87f3f76e88657$export$bd4fb2bc8bb06fb(date) - date.offset;
    return new Date(ms);
}
function $11d87f3f76e88657$export$538b00033cc11c75(date, timeZone) {
    let ms = $11d87f3f76e88657$export$bd4fb2bc8bb06fb(date) - date.offset;
    return $11d87f3f76e88657$export$b4a036af3fc0b032($11d87f3f76e88657$export$1b96692a1ba042ac(ms, timeZone), date.calendar);
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 

const $735220c2d4774dd3$var$ONE_HOUR = 3600000;
function $735220c2d4774dd3$export$e16d8520af44a096(date, duration) {
    let mutableDate = date.copy();
    let days = 'hour' in mutableDate ? $735220c2d4774dd3$var$addTimeFields(mutableDate, duration) : 0;
    $735220c2d4774dd3$var$addYears(mutableDate, duration.years || 0);
    if (mutableDate.calendar.balanceYearMonth) mutableDate.calendar.balanceYearMonth(mutableDate, date);
    mutableDate.month += duration.months || 0;
    $735220c2d4774dd3$var$balanceYearMonth(mutableDate);
    $735220c2d4774dd3$var$constrainMonthDay(mutableDate);
    mutableDate.day += (duration.weeks || 0) * 7;
    mutableDate.day += duration.days || 0;
    mutableDate.day += days;
    $735220c2d4774dd3$var$balanceDay(mutableDate);
    if (mutableDate.calendar.balanceDate) mutableDate.calendar.balanceDate(mutableDate);
    // Constrain in case adding ended up with a date outside the valid range for the calendar system.
    // The behavior here is slightly different than when constraining in the `set` function in that
    // we adjust smaller fields to their minimum/maximum values rather than constraining each field
    // individually. This matches the general behavior of `add` vs `set` regarding how fields are balanced.
    if (mutableDate.year < 1) {
        mutableDate.year = 1;
        mutableDate.month = 1;
        mutableDate.day = 1;
    }
    let maxYear = mutableDate.calendar.getYearsInEra(mutableDate);
    if (mutableDate.year > maxYear) {
        var _mutableDate_calendar_isInverseEra, _mutableDate_calendar;
        let isInverseEra = (_mutableDate_calendar_isInverseEra = (_mutableDate_calendar = mutableDate.calendar).isInverseEra) === null || _mutableDate_calendar_isInverseEra === void 0 ? void 0 : _mutableDate_calendar_isInverseEra.call(_mutableDate_calendar, mutableDate);
        mutableDate.year = maxYear;
        mutableDate.month = isInverseEra ? 1 : mutableDate.calendar.getMonthsInYear(mutableDate);
        mutableDate.day = isInverseEra ? 1 : mutableDate.calendar.getDaysInMonth(mutableDate);
    }
    if (mutableDate.month < 1) {
        mutableDate.month = 1;
        mutableDate.day = 1;
    }
    let maxMonth = mutableDate.calendar.getMonthsInYear(mutableDate);
    if (mutableDate.month > maxMonth) {
        mutableDate.month = maxMonth;
        mutableDate.day = mutableDate.calendar.getDaysInMonth(mutableDate);
    }
    mutableDate.day = Math.max(1, Math.min(mutableDate.calendar.getDaysInMonth(mutableDate), mutableDate.day));
    return mutableDate;
}
function $735220c2d4774dd3$var$addYears(date, years) {
    var _date_calendar_isInverseEra, _date_calendar;
    if ((_date_calendar_isInverseEra = (_date_calendar = date.calendar).isInverseEra) === null || _date_calendar_isInverseEra === void 0 ? void 0 : _date_calendar_isInverseEra.call(_date_calendar, date)) years = -years;
    date.year += years;
}
function $735220c2d4774dd3$var$balanceYearMonth(date) {
    while(date.month < 1){
        $735220c2d4774dd3$var$addYears(date, -1);
        date.month += date.calendar.getMonthsInYear(date);
    }
    let monthsInYear = 0;
    while(date.month > (monthsInYear = date.calendar.getMonthsInYear(date))){
        date.month -= monthsInYear;
        $735220c2d4774dd3$var$addYears(date, 1);
    }
}
function $735220c2d4774dd3$var$balanceDay(date) {
    while(date.day < 1){
        date.month--;
        $735220c2d4774dd3$var$balanceYearMonth(date);
        date.day += date.calendar.getDaysInMonth(date);
    }
    while(date.day > date.calendar.getDaysInMonth(date)){
        date.day -= date.calendar.getDaysInMonth(date);
        date.month++;
        $735220c2d4774dd3$var$balanceYearMonth(date);
    }
}
function $735220c2d4774dd3$var$constrainMonthDay(date) {
    date.month = Math.max(1, Math.min(date.calendar.getMonthsInYear(date), date.month));
    date.day = Math.max(1, Math.min(date.calendar.getDaysInMonth(date), date.day));
}
function $735220c2d4774dd3$export$c4e2ecac49351ef2(date) {
    if (date.calendar.constrainDate) date.calendar.constrainDate(date);
    date.year = Math.max(1, Math.min(date.calendar.getYearsInEra(date), date.year));
    $735220c2d4774dd3$var$constrainMonthDay(date);
}
function $735220c2d4774dd3$export$3e2544e88a25bff8(duration) {
    let inverseDuration = {};
    for(let key in duration)if (typeof duration[key] === 'number') inverseDuration[key] = -duration[key];
    return inverseDuration;
}
function $735220c2d4774dd3$export$4e2d2ead65e5f7e3(date, duration) {
    return $735220c2d4774dd3$export$e16d8520af44a096(date, $735220c2d4774dd3$export$3e2544e88a25bff8(duration));
}
function $735220c2d4774dd3$export$adaa4cf7ef1b65be(date, fields) {
    let mutableDate = date.copy();
    if (fields.era != null) mutableDate.era = fields.era;
    if (fields.year != null) mutableDate.year = fields.year;
    if (fields.month != null) mutableDate.month = fields.month;
    if (fields.day != null) mutableDate.day = fields.day;
    $735220c2d4774dd3$export$c4e2ecac49351ef2(mutableDate);
    return mutableDate;
}
function $735220c2d4774dd3$export$e5d5e1c1822b6e56(value, fields) {
    let mutableValue = value.copy();
    if (fields.hour != null) mutableValue.hour = fields.hour;
    if (fields.minute != null) mutableValue.minute = fields.minute;
    if (fields.second != null) mutableValue.second = fields.second;
    if (fields.millisecond != null) mutableValue.millisecond = fields.millisecond;
    $735220c2d4774dd3$export$7555de1e070510cb(mutableValue);
    return mutableValue;
}
function $735220c2d4774dd3$var$balanceTime(time) {
    time.second += Math.floor(time.millisecond / 1000);
    time.millisecond = $735220c2d4774dd3$var$nonNegativeMod(time.millisecond, 1000);
    time.minute += Math.floor(time.second / 60);
    time.second = $735220c2d4774dd3$var$nonNegativeMod(time.second, 60);
    time.hour += Math.floor(time.minute / 60);
    time.minute = $735220c2d4774dd3$var$nonNegativeMod(time.minute, 60);
    let days = Math.floor(time.hour / 24);
    time.hour = $735220c2d4774dd3$var$nonNegativeMod(time.hour, 24);
    return days;
}
function $735220c2d4774dd3$export$7555de1e070510cb(time) {
    time.millisecond = Math.max(0, Math.min(time.millisecond, 1000));
    time.second = Math.max(0, Math.min(time.second, 59));
    time.minute = Math.max(0, Math.min(time.minute, 59));
    time.hour = Math.max(0, Math.min(time.hour, 23));
}
function $735220c2d4774dd3$var$nonNegativeMod(a, b) {
    let result = a % b;
    if (result < 0) result += b;
    return result;
}
function $735220c2d4774dd3$var$addTimeFields(time, duration) {
    time.hour += duration.hours || 0;
    time.minute += duration.minutes || 0;
    time.second += duration.seconds || 0;
    time.millisecond += duration.milliseconds || 0;
    return $735220c2d4774dd3$var$balanceTime(time);
}
function $735220c2d4774dd3$export$7ed87b6bc2506470(time, duration) {
    let res = time.copy();
    $735220c2d4774dd3$var$addTimeFields(res, duration);
    return res;
}
function $735220c2d4774dd3$export$fe34d3a381cd7501(time, duration) {
    return $735220c2d4774dd3$export$7ed87b6bc2506470(time, $735220c2d4774dd3$export$3e2544e88a25bff8(duration));
}
function $735220c2d4774dd3$export$d52ced6badfb9a4c(value, field, amount, options) {
    let mutable = value.copy();
    switch(field){
        case 'era':
            {
                let eras = value.calendar.getEras();
                let eraIndex = eras.indexOf(value.era);
                if (eraIndex < 0) throw new Error('Invalid era: ' + value.era);
                eraIndex = $735220c2d4774dd3$var$cycleValue(eraIndex, amount, 0, eras.length - 1, options === null || options === void 0 ? void 0 : options.round);
                mutable.era = eras[eraIndex];
                // Constrain the year and other fields within the era, so the era doesn't change when we balance below.
                $735220c2d4774dd3$export$c4e2ecac49351ef2(mutable);
                break;
            }
        case 'year':
            var _mutable_calendar_isInverseEra, _mutable_calendar;
            if ((_mutable_calendar_isInverseEra = (_mutable_calendar = mutable.calendar).isInverseEra) === null || _mutable_calendar_isInverseEra === void 0 ? void 0 : _mutable_calendar_isInverseEra.call(_mutable_calendar, mutable)) amount = -amount;
            // The year field should not cycle within the era as that can cause weird behavior affecting other fields.
            // We need to also allow values < 1 so that decrementing goes to the previous era. If we get -Infinity back
            // we know we wrapped around after reaching 9999 (the maximum), so set the year back to 1.
            mutable.year = $735220c2d4774dd3$var$cycleValue(value.year, amount, -Infinity, 9999, options === null || options === void 0 ? void 0 : options.round);
            if (mutable.year === -Infinity) mutable.year = 1;
            if (mutable.calendar.balanceYearMonth) mutable.calendar.balanceYearMonth(mutable, value);
            break;
        case 'month':
            mutable.month = $735220c2d4774dd3$var$cycleValue(value.month, amount, 1, value.calendar.getMonthsInYear(value), options === null || options === void 0 ? void 0 : options.round);
            break;
        case 'day':
            mutable.day = $735220c2d4774dd3$var$cycleValue(value.day, amount, 1, value.calendar.getDaysInMonth(value), options === null || options === void 0 ? void 0 : options.round);
            break;
        default:
            throw new Error('Unsupported field ' + field);
    }
    if (value.calendar.balanceDate) value.calendar.balanceDate(mutable);
    $735220c2d4774dd3$export$c4e2ecac49351ef2(mutable);
    return mutable;
}
function $735220c2d4774dd3$export$dd02b3e0007dfe28(value, field, amount, options) {
    let mutable = value.copy();
    switch(field){
        case 'hour':
            {
                let hours = value.hour;
                let min = 0;
                let max = 23;
                if ((options === null || options === void 0 ? void 0 : options.hourCycle) === 12) {
                    let isPM = hours >= 12;
                    min = isPM ? 12 : 0;
                    max = isPM ? 23 : 11;
                }
                mutable.hour = $735220c2d4774dd3$var$cycleValue(hours, amount, min, max, options === null || options === void 0 ? void 0 : options.round);
                break;
            }
        case 'minute':
            mutable.minute = $735220c2d4774dd3$var$cycleValue(value.minute, amount, 0, 59, options === null || options === void 0 ? void 0 : options.round);
            break;
        case 'second':
            mutable.second = $735220c2d4774dd3$var$cycleValue(value.second, amount, 0, 59, options === null || options === void 0 ? void 0 : options.round);
            break;
        case 'millisecond':
            mutable.millisecond = $735220c2d4774dd3$var$cycleValue(value.millisecond, amount, 0, 999, options === null || options === void 0 ? void 0 : options.round);
            break;
        default:
            throw new Error('Unsupported field ' + field);
    }
    return mutable;
}
function $735220c2d4774dd3$var$cycleValue(value, amount, min, max, round = false) {
    if (round) {
        value += Math.sign(amount);
        if (value < min) value = max;
        let div = Math.abs(amount);
        if (amount > 0) value = Math.ceil(value / div) * div;
        else value = Math.floor(value / div) * div;
        if (value > max) value = min;
    } else {
        value += amount;
        if (value < min) value = max - (min - value - 1);
        else if (value > max) value = min + (value - max - 1);
    }
    return value;
}
function $735220c2d4774dd3$export$96b1d28349274637(dateTime, duration) {
    let ms;
    if (duration.years != null && duration.years !== 0 || duration.months != null && duration.months !== 0 || duration.weeks != null && duration.weeks !== 0 || duration.days != null && duration.days !== 0) {
        let res = $735220c2d4774dd3$export$e16d8520af44a096(($11d87f3f76e88657$export$b21e0b124e224484)(dateTime), {
            years: duration.years,
            months: duration.months,
            weeks: duration.weeks,
            days: duration.days
        });
        // Changing the date may change the timezone offset, so we need to recompute
        // using the 'compatible' disambiguation.
        ms = ($11d87f3f76e88657$export$5107c82f94518f5c)(res, dateTime.timeZone);
    } else // Otherwise, preserve the offset of the original date.
    ms = ($11d87f3f76e88657$export$bd4fb2bc8bb06fb)(dateTime) - dateTime.offset;
    // Perform time manipulation in milliseconds rather than on the original time fields to account for DST.
    // For example, adding one hour during a DST transition may result in the hour field staying the same or
    // skipping an hour. This results in the offset field changing value instead of the specified field.
    ms += duration.milliseconds || 0;
    ms += (duration.seconds || 0) * 1000;
    ms += (duration.minutes || 0) * 60000;
    ms += (duration.hours || 0) * 3600000;
    let res = ($11d87f3f76e88657$export$1b96692a1ba042ac)(ms, dateTime.timeZone);
    return ($11d87f3f76e88657$export$b4a036af3fc0b032)(res, dateTime.calendar);
}
function $735220c2d4774dd3$export$6814caac34ca03c7(dateTime, duration) {
    return $735220c2d4774dd3$export$96b1d28349274637(dateTime, $735220c2d4774dd3$export$3e2544e88a25bff8(duration));
}
function $735220c2d4774dd3$export$9a297d111fc86b79(dateTime, field, amount, options) {
    // For date fields, we want the time to remain consistent and the UTC offset to potentially change to account for DST changes.
    // For time fields, we want the time to change by the amount given. This may result in the hour field staying the same, but the UTC
    // offset changing in the case of a backward DST transition, or skipping an hour in the case of a forward DST transition.
    switch(field){
        case 'hour':
            {
                let min = 0;
                let max = 23;
                if ((options === null || options === void 0 ? void 0 : options.hourCycle) === 12) {
                    let isPM = dateTime.hour >= 12;
                    min = isPM ? 12 : 0;
                    max = isPM ? 23 : 11;
                }
                // The minimum and maximum hour may be affected by daylight saving time.
                // For example, it might jump forward at midnight, and skip 1am.
                // Or it might end at midnight and repeat the 11pm hour. To handle this, we get
                // the possible absolute times for the min and max, and find the maximum range
                // that is within the current day.
                let plainDateTime = ($11d87f3f76e88657$export$b21e0b124e224484)(dateTime);
                let minDate = ($11d87f3f76e88657$export$b4a036af3fc0b032)($735220c2d4774dd3$export$e5d5e1c1822b6e56(plainDateTime, {
                    hour: min
                }), new ($3b62074eb05584b2$export$80ee6245ec4f29ec)());
                let minAbsolute = [
                    ($11d87f3f76e88657$export$5107c82f94518f5c)(minDate, dateTime.timeZone, 'earlier'),
                    ($11d87f3f76e88657$export$5107c82f94518f5c)(minDate, dateTime.timeZone, 'later')
                ].filter((ms)=>($11d87f3f76e88657$export$1b96692a1ba042ac)(ms, dateTime.timeZone).day === minDate.day)[0];
                let maxDate = ($11d87f3f76e88657$export$b4a036af3fc0b032)($735220c2d4774dd3$export$e5d5e1c1822b6e56(plainDateTime, {
                    hour: max
                }), new ($3b62074eb05584b2$export$80ee6245ec4f29ec)());
                let maxAbsolute = [
                    ($11d87f3f76e88657$export$5107c82f94518f5c)(maxDate, dateTime.timeZone, 'earlier'),
                    ($11d87f3f76e88657$export$5107c82f94518f5c)(maxDate, dateTime.timeZone, 'later')
                ].filter((ms)=>($11d87f3f76e88657$export$1b96692a1ba042ac)(ms, dateTime.timeZone).day === maxDate.day).pop();
                // Since hours may repeat, we need to operate on the absolute time in milliseconds.
                // This is done in hours from the Unix epoch so that cycleValue works correctly,
                // and then converted back to milliseconds.
                let ms = ($11d87f3f76e88657$export$bd4fb2bc8bb06fb)(dateTime) - dateTime.offset;
                let hours = Math.floor(ms / $735220c2d4774dd3$var$ONE_HOUR);
                let remainder = ms % $735220c2d4774dd3$var$ONE_HOUR;
                ms = $735220c2d4774dd3$var$cycleValue(hours, amount, Math.floor(minAbsolute / $735220c2d4774dd3$var$ONE_HOUR), Math.floor(maxAbsolute / $735220c2d4774dd3$var$ONE_HOUR), options === null || options === void 0 ? void 0 : options.round) * $735220c2d4774dd3$var$ONE_HOUR + remainder;
                // Now compute the new timezone offset, and convert the absolute time back to local time.
                return ($11d87f3f76e88657$export$b4a036af3fc0b032)(($11d87f3f76e88657$export$1b96692a1ba042ac)(ms, dateTime.timeZone), dateTime.calendar);
            }
        case 'minute':
        case 'second':
        case 'millisecond':
            // @ts-ignore
            return $735220c2d4774dd3$export$dd02b3e0007dfe28(dateTime, field, amount, options);
        case 'era':
        case 'year':
        case 'month':
        case 'day':
            {
                let res = $735220c2d4774dd3$export$d52ced6badfb9a4c(($11d87f3f76e88657$export$b21e0b124e224484)(dateTime), field, amount, options);
                let ms = ($11d87f3f76e88657$export$5107c82f94518f5c)(res, dateTime.timeZone);
                return ($11d87f3f76e88657$export$b4a036af3fc0b032)(($11d87f3f76e88657$export$1b96692a1ba042ac)(ms, dateTime.timeZone), dateTime.calendar);
            }
        default:
            throw new Error('Unsupported field ' + field);
    }
}
function $735220c2d4774dd3$export$31b5430eb18be4f8(dateTime, fields, disambiguation) {
    // Set the date/time fields, and recompute the UTC offset to account for DST changes.
    // We also need to validate by converting back to a local time in case hours are skipped during forward DST transitions.
    let plainDateTime = ($11d87f3f76e88657$export$b21e0b124e224484)(dateTime);
    let res = $735220c2d4774dd3$export$e5d5e1c1822b6e56($735220c2d4774dd3$export$adaa4cf7ef1b65be(plainDateTime, fields), fields);
    // If the resulting plain date time values are equal, return the original time.
    // We don't want to change the offset when setting the time to the same value.
    if (res.compare(plainDateTime) === 0) return dateTime;
    let ms = ($11d87f3f76e88657$export$5107c82f94518f5c)(res, dateTime.timeZone, disambiguation);
    return ($11d87f3f76e88657$export$b4a036af3fc0b032)(($11d87f3f76e88657$export$1b96692a1ba042ac)(ms, dateTime.timeZone), dateTime.calendar);
}

function $fae977aafc393c5c$export$f59dee82248f5ad4(time) {
    return `${String(time.hour).padStart(2, '0')}:${String(time.minute).padStart(2, '0')}:${String(time.second).padStart(2, '0')}${time.millisecond ? String(time.millisecond / 1000).slice(1) : ''}`;
}
function $fae977aafc393c5c$export$60dfd74aa96791bd(date) {
    let gregorianDate = ($11d87f3f76e88657$export$b4a036af3fc0b032)(date, new ($3b62074eb05584b2$export$80ee6245ec4f29ec)());
    return `${String(gregorianDate.year).padStart(4, '0')}-${String(gregorianDate.month).padStart(2, '0')}-${String(gregorianDate.day).padStart(2, '0')}`;
}
function $fae977aafc393c5c$export$4223de14708adc63(date) {
    // @ts-ignore
    return `${$fae977aafc393c5c$export$60dfd74aa96791bd(date)}T${$fae977aafc393c5c$export$f59dee82248f5ad4(date)}`;
}
function $fae977aafc393c5c$var$offsetToString(offset) {
    let sign = Math.sign(offset) < 0 ? '-' : '+';
    offset = Math.abs(offset);
    let offsetHours = Math.floor(offset / 3600000);
    let offsetMinutes = offset % 3600000 / 60000;
    return `${sign}${String(offsetHours).padStart(2, '0')}:${String(offsetMinutes).padStart(2, '0')}`;
}
function $fae977aafc393c5c$export$bf79f1ebf4b18792(date) {
    return `${$fae977aafc393c5c$export$4223de14708adc63(date)}${$fae977aafc393c5c$var$offsetToString(date.offset)}[${date.timeZone}]`;
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 





function $35ea8db9cb2ccb90$var$shiftArgs(args) {
    let calendar = typeof args[0] === 'object' ? args.shift() : new ($3b62074eb05584b2$export$80ee6245ec4f29ec)();
    let era;
    if (typeof args[0] === 'string') era = args.shift();
    else {
        let eras = calendar.getEras();
        era = eras[eras.length - 1];
    }
    let year = args.shift();
    let month = args.shift();
    let day = args.shift();
    return [
        calendar,
        era,
        year,
        month,
        day
    ];
}
var // This prevents TypeScript from allowing other types with the same fields to match.
// i.e. a ZonedDateTime should not be be passable to a parameter that expects CalendarDate.
// If that behavior is desired, use the AnyCalendarDate interface instead.
// @ts-ignore
$35ea8db9cb2ccb90$var$_type = /*#__PURE__*/ new WeakMap();
class $35ea8db9cb2ccb90$export$99faa760c7908e4f {
    /** Returns a copy of this date. */ copy() {
        if (this.era) return new $35ea8db9cb2ccb90$export$99faa760c7908e4f(this.calendar, this.era, this.year, this.month, this.day);
        else return new $35ea8db9cb2ccb90$export$99faa760c7908e4f(this.calendar, this.year, this.month, this.day);
    }
    /** Returns a new `CalendarDate` with the given duration added to it. */ add(duration) {
        return ($735220c2d4774dd3$export$e16d8520af44a096)(this, duration);
    }
    /** Returns a new `CalendarDate` with the given duration subtracted from it. */ subtract(duration) {
        return ($735220c2d4774dd3$export$4e2d2ead65e5f7e3)(this, duration);
    }
    /** Returns a new `CalendarDate` with the given fields set to the provided values. Other fields will be constrained accordingly. */ set(fields) {
        return ($735220c2d4774dd3$export$adaa4cf7ef1b65be)(this, fields);
    }
    /**
   * Returns a new `CalendarDate` with the given field adjusted by a specified amount.
   * When the resulting value reaches the limits of the field, it wraps around.
   */ cycle(field, amount, options) {
        return ($735220c2d4774dd3$export$d52ced6badfb9a4c)(this, field, amount, options);
    }
    /** Converts the date to a native JavaScript Date object, with the time set to midnight in the given time zone. */ toDate(timeZone) {
        return ($11d87f3f76e88657$export$e67a095c620b86fe)(this, timeZone);
    }
    /** Converts the date to an ISO 8601 formatted string. */ toString() {
        return ($fae977aafc393c5c$export$60dfd74aa96791bd)(this);
    }
    /** Compares this date with another. A negative result indicates that this date is before the given one, and a positive date indicates that it is after. */ compare(b) {
        return ($14e0f24ef4ac5c92$export$68781ddf31c0090f)(this, b);
    }
    constructor(...args){
        (_class_private_field_init)(this, $35ea8db9cb2ccb90$var$_type, {
            writable: true,
            value: void 0
        });
        let [calendar, era, year, month, day] = $35ea8db9cb2ccb90$var$shiftArgs(args);
        this.calendar = calendar;
        this.era = era;
        this.year = year;
        this.month = month;
        this.day = day;
        ($735220c2d4774dd3$export$c4e2ecac49351ef2)(this);
    }
}
var // This prevents TypeScript from allowing other types with the same fields to match.
// @ts-ignore
$35ea8db9cb2ccb90$var$_type1 = /*#__PURE__*/ new WeakMap();
class $35ea8db9cb2ccb90$export$680ea196effce5f {
    /** Returns a copy of this time. */ copy() {
        return new $35ea8db9cb2ccb90$export$680ea196effce5f(this.hour, this.minute, this.second, this.millisecond);
    }
    /** Returns a new `Time` with the given duration added to it. */ add(duration) {
        return ($735220c2d4774dd3$export$7ed87b6bc2506470)(this, duration);
    }
    /** Returns a new `Time` with the given duration subtracted from it. */ subtract(duration) {
        return ($735220c2d4774dd3$export$fe34d3a381cd7501)(this, duration);
    }
    /** Returns a new `Time` with the given fields set to the provided values. Other fields will be constrained accordingly. */ set(fields) {
        return ($735220c2d4774dd3$export$e5d5e1c1822b6e56)(this, fields);
    }
    /**
   * Returns a new `Time` with the given field adjusted by a specified amount.
   * When the resulting value reaches the limits of the field, it wraps around.
   */ cycle(field, amount, options) {
        return ($735220c2d4774dd3$export$dd02b3e0007dfe28)(this, field, amount, options);
    }
    /** Converts the time to an ISO 8601 formatted string. */ toString() {
        return ($fae977aafc393c5c$export$f59dee82248f5ad4)(this);
    }
    /** Compares this time with another. A negative result indicates that this time is before the given one, and a positive time indicates that it is after. */ compare(b) {
        return ($14e0f24ef4ac5c92$export$c19a80a9721b80f6)(this, b);
    }
    constructor(hour = 0, minute = 0, second = 0, millisecond = 0){
        (_class_private_field_init)(this, $35ea8db9cb2ccb90$var$_type1, {
            writable: true,
            value: void 0
        });
        this.hour = hour;
        this.minute = minute;
        this.second = second;
        this.millisecond = millisecond;
        ($735220c2d4774dd3$export$7555de1e070510cb)(this);
    }
}
var // This prevents TypeScript from allowing other types with the same fields to match.
// @ts-ignore
$35ea8db9cb2ccb90$var$_type2 = /*#__PURE__*/ new WeakMap();
class $35ea8db9cb2ccb90$export$ca871e8dbb80966f {
    /** Returns a copy of this date. */ copy() {
        if (this.era) return new $35ea8db9cb2ccb90$export$ca871e8dbb80966f(this.calendar, this.era, this.year, this.month, this.day, this.hour, this.minute, this.second, this.millisecond);
        else return new $35ea8db9cb2ccb90$export$ca871e8dbb80966f(this.calendar, this.year, this.month, this.day, this.hour, this.minute, this.second, this.millisecond);
    }
    /** Returns a new `CalendarDateTime` with the given duration added to it. */ add(duration) {
        return ($735220c2d4774dd3$export$e16d8520af44a096)(this, duration);
    }
    /** Returns a new `CalendarDateTime` with the given duration subtracted from it. */ subtract(duration) {
        return ($735220c2d4774dd3$export$4e2d2ead65e5f7e3)(this, duration);
    }
    /** Returns a new `CalendarDateTime` with the given fields set to the provided values. Other fields will be constrained accordingly. */ set(fields) {
        return ($735220c2d4774dd3$export$adaa4cf7ef1b65be)(($735220c2d4774dd3$export$e5d5e1c1822b6e56)(this, fields), fields);
    }
    /**
   * Returns a new `CalendarDateTime` with the given field adjusted by a specified amount.
   * When the resulting value reaches the limits of the field, it wraps around.
   */ cycle(field, amount, options) {
        switch(field){
            case 'era':
            case 'year':
            case 'month':
            case 'day':
                return ($735220c2d4774dd3$export$d52ced6badfb9a4c)(this, field, amount, options);
            default:
                return ($735220c2d4774dd3$export$dd02b3e0007dfe28)(this, field, amount, options);
        }
    }
    /** Converts the date to a native JavaScript Date object in the given time zone. */ toDate(timeZone, disambiguation) {
        return ($11d87f3f76e88657$export$e67a095c620b86fe)(this, timeZone, disambiguation);
    }
    /** Converts the date to an ISO 8601 formatted string. */ toString() {
        return ($fae977aafc393c5c$export$4223de14708adc63)(this);
    }
    /** Compares this date with another. A negative result indicates that this date is before the given one, and a positive date indicates that it is after. */ compare(b) {
        let res = ($14e0f24ef4ac5c92$export$68781ddf31c0090f)(this, b);
        if (res === 0) return ($14e0f24ef4ac5c92$export$c19a80a9721b80f6)(this, ($11d87f3f76e88657$export$b21e0b124e224484)(b));
        return res;
    }
    constructor(...args){
        (_class_private_field_init)(this, $35ea8db9cb2ccb90$var$_type2, {
            writable: true,
            value: void 0
        });
        let [calendar, era, year, month, day] = $35ea8db9cb2ccb90$var$shiftArgs(args);
        this.calendar = calendar;
        this.era = era;
        this.year = year;
        this.month = month;
        this.day = day;
        this.hour = args.shift() || 0;
        this.minute = args.shift() || 0;
        this.second = args.shift() || 0;
        this.millisecond = args.shift() || 0;
        ($735220c2d4774dd3$export$c4e2ecac49351ef2)(this);
    }
}
var // This prevents TypeScript from allowing other types with the same fields to match.
// @ts-ignore
$35ea8db9cb2ccb90$var$_type3 = /*#__PURE__*/ new WeakMap();
class $35ea8db9cb2ccb90$export$d3b7288e7994edea {
    /** Returns a copy of this date. */ copy() {
        if (this.era) return new $35ea8db9cb2ccb90$export$d3b7288e7994edea(this.calendar, this.era, this.year, this.month, this.day, this.timeZone, this.offset, this.hour, this.minute, this.second, this.millisecond);
        else return new $35ea8db9cb2ccb90$export$d3b7288e7994edea(this.calendar, this.year, this.month, this.day, this.timeZone, this.offset, this.hour, this.minute, this.second, this.millisecond);
    }
    /** Returns a new `ZonedDateTime` with the given duration added to it. */ add(duration) {
        return ($735220c2d4774dd3$export$96b1d28349274637)(this, duration);
    }
    /** Returns a new `ZonedDateTime` with the given duration subtracted from it. */ subtract(duration) {
        return ($735220c2d4774dd3$export$6814caac34ca03c7)(this, duration);
    }
    /** Returns a new `ZonedDateTime` with the given fields set to the provided values. Other fields will be constrained accordingly. */ set(fields, disambiguation) {
        return ($735220c2d4774dd3$export$31b5430eb18be4f8)(this, fields, disambiguation);
    }
    /**
   * Returns a new `ZonedDateTime` with the given field adjusted by a specified amount.
   * When the resulting value reaches the limits of the field, it wraps around.
   */ cycle(field, amount, options) {
        return ($735220c2d4774dd3$export$9a297d111fc86b79)(this, field, amount, options);
    }
    /** Converts the date to a native JavaScript Date object. */ toDate() {
        return ($11d87f3f76e88657$export$83aac07b4c37b25)(this);
    }
    /** Converts the date to an ISO 8601 formatted string, including the UTC offset and time zone identifier. */ toString() {
        return ($fae977aafc393c5c$export$bf79f1ebf4b18792)(this);
    }
    /** Converts the date to an ISO 8601 formatted string in UTC. */ toAbsoluteString() {
        return this.toDate().toISOString();
    }
    /** Compares this date with another. A negative result indicates that this date is before the given one, and a positive date indicates that it is after. */ compare(b) {
        // TODO: Is this a bad idea??
        return this.toDate().getTime() - ($11d87f3f76e88657$export$84c95a83c799e074)(b, this.timeZone).toDate().getTime();
    }
    constructor(...args){
        (_class_private_field_init)(this, $35ea8db9cb2ccb90$var$_type3, {
            writable: true,
            value: void 0
        });
        let [calendar, era, year, month, day] = $35ea8db9cb2ccb90$var$shiftArgs(args);
        let timeZone = args.shift();
        let offset = args.shift();
        this.calendar = calendar;
        this.era = era;
        this.year = year;
        this.month = month;
        this.day = day;
        this.timeZone = timeZone;
        this.offset = offset;
        this.hour = args.shift() || 0;
        this.minute = args.shift() || 0;
        this.second = args.shift() || 0;
        this.millisecond = args.shift() || 0;
        ($735220c2d4774dd3$export$c4e2ecac49351ef2)(this);
    }
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ // Portions of the code in this file are based on code from the TC39 Temporal proposal.
// Original licensing can be found in the NOTICE file in the root directory of this source tree.


const $62225008020f0a13$var$ERA_START_DATES = [
    [
        1868,
        9,
        8
    ],
    [
        1912,
        7,
        30
    ],
    [
        1926,
        12,
        25
    ],
    [
        1989,
        1,
        8
    ],
    [
        2019,
        5,
        1
    ]
];
const $62225008020f0a13$var$ERA_END_DATES = [
    [
        1912,
        7,
        29
    ],
    [
        1926,
        12,
        24
    ],
    [
        1989,
        1,
        7
    ],
    [
        2019,
        4,
        30
    ]
];
const $62225008020f0a13$var$ERA_ADDENDS = [
    1867,
    1911,
    1925,
    1988,
    2018
];
const $62225008020f0a13$var$ERA_NAMES = [
    'meiji',
    'taisho',
    'showa',
    'heisei',
    'reiwa'
];
function $62225008020f0a13$var$findEraFromGregorianDate(date) {
    const idx = $62225008020f0a13$var$ERA_START_DATES.findIndex(([year, month, day])=>{
        if (date.year < year) return true;
        if (date.year === year && date.month < month) return true;
        if (date.year === year && date.month === month && date.day < day) return true;
        return false;
    });
    if (idx === -1) return $62225008020f0a13$var$ERA_START_DATES.length - 1;
    if (idx === 0) return 0;
    return idx - 1;
}
function $62225008020f0a13$var$toGregorian(date) {
    let eraAddend = $62225008020f0a13$var$ERA_ADDENDS[$62225008020f0a13$var$ERA_NAMES.indexOf(date.era)];
    if (!eraAddend) throw new Error('Unknown era: ' + date.era);
    return new ($35ea8db9cb2ccb90$export$99faa760c7908e4f)(date.year + eraAddend, date.month, date.day);
}
class $62225008020f0a13$export$b746ab2b60cdffbf extends ($3b62074eb05584b2$export$80ee6245ec4f29ec) {
    fromJulianDay(jd) {
        let date = super.fromJulianDay(jd);
        let era = $62225008020f0a13$var$findEraFromGregorianDate(date);
        return new ($35ea8db9cb2ccb90$export$99faa760c7908e4f)(this, $62225008020f0a13$var$ERA_NAMES[era], date.year - $62225008020f0a13$var$ERA_ADDENDS[era], date.month, date.day);
    }
    toJulianDay(date) {
        return super.toJulianDay($62225008020f0a13$var$toGregorian(date));
    }
    balanceDate(date) {
        let gregorianDate = $62225008020f0a13$var$toGregorian(date);
        let era = $62225008020f0a13$var$findEraFromGregorianDate(gregorianDate);
        if ($62225008020f0a13$var$ERA_NAMES[era] !== date.era) {
            date.era = $62225008020f0a13$var$ERA_NAMES[era];
            date.year = gregorianDate.year - $62225008020f0a13$var$ERA_ADDENDS[era];
        }
        // Constrain in case we went before the first supported era.
        this.constrainDate(date);
    }
    constrainDate(date) {
        let idx = $62225008020f0a13$var$ERA_NAMES.indexOf(date.era);
        let end = $62225008020f0a13$var$ERA_END_DATES[idx];
        if (end != null) {
            let [endYear, endMonth, endDay] = end;
            // Constrain the year to the maximum possible value in the era.
            // Then constrain the month and day fields within that.
            let maxYear = endYear - $62225008020f0a13$var$ERA_ADDENDS[idx];
            date.year = Math.max(1, Math.min(maxYear, date.year));
            if (date.year === maxYear) {
                date.month = Math.min(endMonth, date.month);
                if (date.month === endMonth) date.day = Math.min(endDay, date.day);
            }
        }
        if (date.year === 1 && idx >= 0) {
            let [, startMonth, startDay] = $62225008020f0a13$var$ERA_START_DATES[idx];
            date.month = Math.max(startMonth, date.month);
            if (date.month === startMonth) date.day = Math.max(startDay, date.day);
        }
    }
    getEras() {
        return $62225008020f0a13$var$ERA_NAMES;
    }
    getYearsInEra(date) {
        // Get the number of years in the era, taking into account the date's month and day fields.
        let era = $62225008020f0a13$var$ERA_NAMES.indexOf(date.era);
        let cur = $62225008020f0a13$var$ERA_START_DATES[era];
        let next = $62225008020f0a13$var$ERA_START_DATES[era + 1];
        if (next == null) // 9999 gregorian is the maximum year allowed.
        return 9999 - cur[0] + 1;
        let years = next[0] - cur[0];
        if (date.month < next[1] || date.month === next[1] && date.day < next[2]) years++;
        return years;
    }
    getDaysInMonth(date) {
        return super.getDaysInMonth($62225008020f0a13$var$toGregorian(date));
    }
    getMinimumMonthInYear(date) {
        let start = $62225008020f0a13$var$getMinimums(date);
        return start ? start[1] : 1;
    }
    getMinimumDayInMonth(date) {
        let start = $62225008020f0a13$var$getMinimums(date);
        return start && date.month === start[1] ? start[2] : 1;
    }
    constructor(...args){
        super(...args);
        this.identifier = 'japanese';
    }
}
function $62225008020f0a13$var$getMinimums(date) {
    if (date.year === 1) {
        let idx = $62225008020f0a13$var$ERA_NAMES.indexOf(date.era);
        return $62225008020f0a13$var$ERA_START_DATES[idx];
    }
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ // Portions of the code in this file are based on code from ICU.
// Original licensing can be found in the NOTICE file in the root directory of this source tree.


const $8d73d47422ca7302$var$BUDDHIST_ERA_START = -543;
class $8d73d47422ca7302$export$42d20a78301dee44 extends ($3b62074eb05584b2$export$80ee6245ec4f29ec) {
    fromJulianDay(jd) {
        let gregorianDate = super.fromJulianDay(jd);
        let year = ($3b62074eb05584b2$export$c36e0ecb2d4fa69d)(gregorianDate.era, gregorianDate.year);
        return new ($35ea8db9cb2ccb90$export$99faa760c7908e4f)(this, year - $8d73d47422ca7302$var$BUDDHIST_ERA_START, gregorianDate.month, gregorianDate.day);
    }
    toJulianDay(date) {
        return super.toJulianDay($8d73d47422ca7302$var$toGregorian(date));
    }
    getEras() {
        return [
            'BE'
        ];
    }
    getDaysInMonth(date) {
        return super.getDaysInMonth($8d73d47422ca7302$var$toGregorian(date));
    }
    balanceDate() {}
    constructor(...args){
        super(...args);
        this.identifier = 'buddhist';
    }
}
function $8d73d47422ca7302$var$toGregorian(date) {
    let [era, year] = ($3b62074eb05584b2$export$4475b7e617eb123c)(date.year + $8d73d47422ca7302$var$BUDDHIST_ERA_START);
    return new ($35ea8db9cb2ccb90$export$99faa760c7908e4f)(era, year, date.month, date.day);
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ // Portions of the code in this file are based on code from ICU.
// Original licensing can be found in the NOTICE file in the root directory of this source tree.


const $5f31bd6f0c8940b2$var$TAIWAN_ERA_START = 1911;
function $5f31bd6f0c8940b2$var$gregorianYear(date) {
    return date.era === 'minguo' ? date.year + $5f31bd6f0c8940b2$var$TAIWAN_ERA_START : 1 - date.year + $5f31bd6f0c8940b2$var$TAIWAN_ERA_START;
}
function $5f31bd6f0c8940b2$var$gregorianToTaiwan(year) {
    let y = year - $5f31bd6f0c8940b2$var$TAIWAN_ERA_START;
    if (y > 0) return [
        'minguo',
        y
    ];
    else return [
        'before_minguo',
        1 - y
    ];
}
class $5f31bd6f0c8940b2$export$65e01080afcb0799 extends ($3b62074eb05584b2$export$80ee6245ec4f29ec) {
    fromJulianDay(jd) {
        let date = super.fromJulianDay(jd);
        let extendedYear = ($3b62074eb05584b2$export$c36e0ecb2d4fa69d)(date.era, date.year);
        let [era, year] = $5f31bd6f0c8940b2$var$gregorianToTaiwan(extendedYear);
        return new ($35ea8db9cb2ccb90$export$99faa760c7908e4f)(this, era, year, date.month, date.day);
    }
    toJulianDay(date) {
        return super.toJulianDay($5f31bd6f0c8940b2$var$toGregorian(date));
    }
    getEras() {
        return [
            'before_minguo',
            'minguo'
        ];
    }
    balanceDate(date) {
        let [era, year] = $5f31bd6f0c8940b2$var$gregorianToTaiwan($5f31bd6f0c8940b2$var$gregorianYear(date));
        date.era = era;
        date.year = year;
    }
    isInverseEra(date) {
        return date.era === 'before_minguo';
    }
    getDaysInMonth(date) {
        return super.getDaysInMonth($5f31bd6f0c8940b2$var$toGregorian(date));
    }
    getYearsInEra(date) {
        return date.era === 'before_minguo' ? 9999 : 9999 - $5f31bd6f0c8940b2$var$TAIWAN_ERA_START;
    }
    constructor(...args){
        super(...args);
        this.identifier = 'roc' // Republic of China
        ;
    }
}
function $5f31bd6f0c8940b2$var$toGregorian(date) {
    let [era, year] = ($3b62074eb05584b2$export$4475b7e617eb123c)($5f31bd6f0c8940b2$var$gregorianYear(date));
    return new ($35ea8db9cb2ccb90$export$99faa760c7908e4f)(era, year, date.month, date.day);
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ // Portions of the code in this file are based on code from ICU.
// Original licensing can be found in the NOTICE file in the root directory of this source tree.


const $f3ed2e4472ae7e25$var$PERSIAN_EPOCH = 1948320;
// Number of days from the start of the year to the start of each month.
const $f3ed2e4472ae7e25$var$MONTH_START = [
    0,
    31,
    62,
    93,
    124,
    155,
    186,
    216,
    246,
    276,
    306,
    336 // Esfand
];
class $f3ed2e4472ae7e25$export$37fccdbfd14c5939 {
    fromJulianDay(jd) {
        let daysSinceEpoch = jd - $f3ed2e4472ae7e25$var$PERSIAN_EPOCH;
        let year = 1 + Math.floor((33 * daysSinceEpoch + 3) / 12053);
        let farvardin1 = 365 * (year - 1) + Math.floor((8 * year + 21) / 33);
        let dayOfYear = daysSinceEpoch - farvardin1;
        let month = dayOfYear < 216 ? Math.floor(dayOfYear / 31) : Math.floor((dayOfYear - 6) / 30);
        let day = dayOfYear - $f3ed2e4472ae7e25$var$MONTH_START[month] + 1;
        return new ($35ea8db9cb2ccb90$export$99faa760c7908e4f)(this, year, month + 1, day);
    }
    toJulianDay(date) {
        let jd = $f3ed2e4472ae7e25$var$PERSIAN_EPOCH - 1 + 365 * (date.year - 1) + Math.floor((8 * date.year + 21) / 33);
        jd += $f3ed2e4472ae7e25$var$MONTH_START[date.month - 1];
        jd += date.day;
        return jd;
    }
    getMonthsInYear() {
        return 12;
    }
    getDaysInMonth(date) {
        if (date.month <= 6) return 31;
        if (date.month <= 11) return 30;
        let isLeapYear = ($2b4dce13dd5a17fa$export$842a2cf37af977e1)(25 * date.year + 11, 33) < 8;
        return isLeapYear ? 30 : 29;
    }
    getEras() {
        return [
            'AP'
        ];
    }
    getYearsInEra() {
        // 9378-10-10 persian is 9999-12-31 gregorian.
        // Round down to 9377 to set the maximum full year.
        return 9377;
    }
    constructor(){
        this.identifier = 'persian';
    }
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ // Portions of the code in this file are based on code from ICU.
// Original licensing can be found in the NOTICE file in the root directory of this source tree.


// Starts in 78 AD,
const $82c358003bdda0a8$var$INDIAN_ERA_START = 78;
// The Indian year starts 80 days later than the Gregorian year.
const $82c358003bdda0a8$var$INDIAN_YEAR_START = 80;
class $82c358003bdda0a8$export$39f31c639fa15726 extends ($3b62074eb05584b2$export$80ee6245ec4f29ec) {
    fromJulianDay(jd) {
        // Gregorian date for Julian day
        let date = super.fromJulianDay(jd);
        // Year in Saka era
        let indianYear = date.year - $82c358003bdda0a8$var$INDIAN_ERA_START;
        // Day number in Gregorian year (starting from 0)
        let yDay = jd - ($3b62074eb05584b2$export$f297eb839006d339)(date.era, date.year, 1, 1);
        let leapMonth;
        if (yDay < $82c358003bdda0a8$var$INDIAN_YEAR_START) {
            //  Day is at the end of the preceding Saka year
            indianYear--;
            // Days in leapMonth this year, previous Gregorian year
            leapMonth = ($3b62074eb05584b2$export$553d7fa8e3805fc0)(date.year - 1) ? 31 : 30;
            yDay += leapMonth + 155 + 90 + 10;
        } else {
            // Days in leapMonth this year
            leapMonth = ($3b62074eb05584b2$export$553d7fa8e3805fc0)(date.year) ? 31 : 30;
            yDay -= $82c358003bdda0a8$var$INDIAN_YEAR_START;
        }
        let indianMonth;
        let indianDay;
        if (yDay < leapMonth) {
            indianMonth = 1;
            indianDay = yDay + 1;
        } else {
            let mDay = yDay - leapMonth;
            if (mDay < 155) {
                indianMonth = Math.floor(mDay / 31) + 2;
                indianDay = mDay % 31 + 1;
            } else {
                mDay -= 155;
                indianMonth = Math.floor(mDay / 30) + 7;
                indianDay = mDay % 30 + 1;
            }
        }
        return new ($35ea8db9cb2ccb90$export$99faa760c7908e4f)(this, indianYear, indianMonth, indianDay);
    }
    toJulianDay(date) {
        let extendedYear = date.year + $82c358003bdda0a8$var$INDIAN_ERA_START;
        let [era, year] = ($3b62074eb05584b2$export$4475b7e617eb123c)(extendedYear);
        let leapMonth;
        let jd;
        if (($3b62074eb05584b2$export$553d7fa8e3805fc0)(year)) {
            leapMonth = 31;
            jd = ($3b62074eb05584b2$export$f297eb839006d339)(era, year, 3, 21);
        } else {
            leapMonth = 30;
            jd = ($3b62074eb05584b2$export$f297eb839006d339)(era, year, 3, 22);
        }
        if (date.month === 1) return jd + date.day - 1;
        jd += leapMonth + Math.min(date.month - 2, 5) * 31;
        if (date.month >= 8) jd += (date.month - 7) * 30;
        jd += date.day - 1;
        return jd;
    }
    getDaysInMonth(date) {
        if (date.month === 1 && ($3b62074eb05584b2$export$553d7fa8e3805fc0)(date.year + $82c358003bdda0a8$var$INDIAN_ERA_START)) return 31;
        if (date.month >= 2 && date.month <= 6) return 31;
        return 30;
    }
    getYearsInEra() {
        // 9999-12-31 gregorian is 9920-10-10 indian.
        // Round down to 9919 for the last full year.
        return 9919;
    }
    getEras() {
        return [
            'saka'
        ];
    }
    balanceDate() {}
    constructor(...args){
        super(...args);
        this.identifier = 'indian';
    }
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ // Portions of the code in this file are based on code from ICU.
// Original licensing can be found in the NOTICE file in the root directory of this source tree.

const $f2f3e0e3a817edbd$var$CIVIL_EPOC = 1948440; // CE 622 July 16 Friday (Julian calendar) / CE 622 July 19 (Gregorian calendar)
const $f2f3e0e3a817edbd$var$ASTRONOMICAL_EPOC = 1948439; // CE 622 July 15 Thursday (Julian calendar)
const $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START = 1300;
const $f2f3e0e3a817edbd$var$UMALQURA_YEAR_END = 1600;
const $f2f3e0e3a817edbd$var$UMALQURA_START_DAYS = 460322;
function $f2f3e0e3a817edbd$var$islamicToJulianDay(epoch, year, month, day) {
    return day + Math.ceil(29.5 * (month - 1)) + (year - 1) * 354 + Math.floor((3 + 11 * year) / 30) + epoch - 1;
}
function $f2f3e0e3a817edbd$var$julianDayToIslamic(calendar, epoch, jd) {
    let year = Math.floor((30 * (jd - epoch) + 10646) / 10631);
    let month = Math.min(12, Math.ceil((jd - (29 + $f2f3e0e3a817edbd$var$islamicToJulianDay(epoch, year, 1, 1))) / 29.5) + 1);
    let day = jd - $f2f3e0e3a817edbd$var$islamicToJulianDay(epoch, year, month, 1) + 1;
    return new ($35ea8db9cb2ccb90$export$99faa760c7908e4f)(calendar, year, month, day);
}
function $f2f3e0e3a817edbd$var$isLeapYear(year) {
    return (14 + 11 * year) % 30 < 11;
}
class $f2f3e0e3a817edbd$export$2066795aadd37bfc {
    fromJulianDay(jd) {
        return $f2f3e0e3a817edbd$var$julianDayToIslamic(this, $f2f3e0e3a817edbd$var$CIVIL_EPOC, jd);
    }
    toJulianDay(date) {
        return $f2f3e0e3a817edbd$var$islamicToJulianDay($f2f3e0e3a817edbd$var$CIVIL_EPOC, date.year, date.month, date.day);
    }
    getDaysInMonth(date) {
        let length = 29 + date.month % 2;
        if (date.month === 12 && $f2f3e0e3a817edbd$var$isLeapYear(date.year)) length++;
        return length;
    }
    getMonthsInYear() {
        return 12;
    }
    getDaysInYear(date) {
        return $f2f3e0e3a817edbd$var$isLeapYear(date.year) ? 355 : 354;
    }
    getYearsInEra() {
        // 9999 gregorian
        return 9665;
    }
    getEras() {
        return [
            'AH'
        ];
    }
    constructor(){
        this.identifier = 'islamic-civil';
    }
}
class $f2f3e0e3a817edbd$export$37f0887f2f9d22f7 extends $f2f3e0e3a817edbd$export$2066795aadd37bfc {
    fromJulianDay(jd) {
        return $f2f3e0e3a817edbd$var$julianDayToIslamic(this, $f2f3e0e3a817edbd$var$ASTRONOMICAL_EPOC, jd);
    }
    toJulianDay(date) {
        return $f2f3e0e3a817edbd$var$islamicToJulianDay($f2f3e0e3a817edbd$var$ASTRONOMICAL_EPOC, date.year, date.month, date.day);
    }
    constructor(...args){
        super(...args);
        this.identifier = 'islamic-tbla';
    }
}
// Generated by scripts/generate-umalqura.js
const $f2f3e0e3a817edbd$var$UMALQURA_DATA = 'qgpUDckO1AbqBmwDrQpVBakGkgepC9QF2gpcBS0NlQZKB1QLagutBa4ETwoXBYsGpQbVCtYCWwmdBE0KJg2VDawFtgm6AlsKKwWVCsoG6Qr0AnYJtgJWCcoKpAvSC9kF3AJtCU0FpQpSC6ULtAW2CVcFlwJLBaMGUgdlC2oFqworBZUMSg2lDcoF1gpXCasESwmlClILagt1BXYCtwhbBFUFqQW0BdoJ3QRuAjYJqgpUDbIN1QXaAlsJqwRVCkkLZAtxC7QFtQpVCiUNkg7JDtQG6QprCasEkwpJDaQNsg25CroEWworBZUKKgtVC1wFvQQ9Ah0JlQpKC1oLbQW2AjsJmwRVBqkGVAdqC2wFrQpVBSkLkgupC9QF2gpaBasKlQVJB2QHqgu1BbYCVgpNDiULUgtqC60FrgIvCZcESwalBqwG1gpdBZ0ETQoWDZUNqgW1BdoCWwmtBJUFygbkBuoK9QS2AlYJqgpUC9IL2QXqAm0JrQSVCkoLpQuyBbUJ1gSXCkcFkwZJB1ULagVrCisFiwpGDaMNygXWCtsEawJLCaUKUgtpC3UFdgG3CFsCKwVlBbQF2gntBG0BtgimClINqQ3UBdoKWwmrBFMGKQdiB6kLsgW1ClUFJQuSDckO0gbpCmsFqwRVCikNVA2qDbUJugQ7CpsETQqqCtUK2gJdCV4ELgqaDFUNsga5BroEXQotBZUKUguoC7QLuQXaAloJSgukDdEO6AZqC20FNQWVBkoNqA3UDdoGWwWdAisGFQtKC5ULqgWuCi4JjwwnBZUGqgbWCl0FnQI=';
let $f2f3e0e3a817edbd$var$UMALQURA_MONTHLENGTH;
let $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START_TABLE;
function $f2f3e0e3a817edbd$var$umalquraYearStart(year) {
    return $f2f3e0e3a817edbd$var$UMALQURA_START_DAYS + $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START_TABLE[year - $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START];
}
function $f2f3e0e3a817edbd$var$umalquraMonthLength(year, month) {
    let idx = year - $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START;
    let mask = 0x01 << 11 - (month - 1);
    if (($f2f3e0e3a817edbd$var$UMALQURA_MONTHLENGTH[idx] & mask) === 0) return 29;
    else return 30;
}
function $f2f3e0e3a817edbd$var$umalquraMonthStart(year, month) {
    let day = $f2f3e0e3a817edbd$var$umalquraYearStart(year);
    for(let i = 1; i < month; i++)day += $f2f3e0e3a817edbd$var$umalquraMonthLength(year, i);
    return day;
}
function $f2f3e0e3a817edbd$var$umalquraYearLength(year) {
    return $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START_TABLE[year + 1 - $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START] - $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START_TABLE[year - $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START];
}
class $f2f3e0e3a817edbd$export$5baab4758c231076 extends $f2f3e0e3a817edbd$export$2066795aadd37bfc {
    fromJulianDay(jd) {
        let days = jd - $f2f3e0e3a817edbd$var$CIVIL_EPOC;
        let startDays = $f2f3e0e3a817edbd$var$umalquraYearStart($f2f3e0e3a817edbd$var$UMALQURA_YEAR_START);
        let endDays = $f2f3e0e3a817edbd$var$umalquraYearStart($f2f3e0e3a817edbd$var$UMALQURA_YEAR_END);
        if (days < startDays || days > endDays) return super.fromJulianDay(jd);
        else {
            let y = $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START - 1;
            let m = 1;
            let d = 1;
            while(d > 0){
                y++;
                d = days - $f2f3e0e3a817edbd$var$umalquraYearStart(y) + 1;
                let yearLength = $f2f3e0e3a817edbd$var$umalquraYearLength(y);
                if (d === yearLength) {
                    m = 12;
                    break;
                } else if (d < yearLength) {
                    let monthLength = $f2f3e0e3a817edbd$var$umalquraMonthLength(y, m);
                    m = 1;
                    while(d > monthLength){
                        d -= monthLength;
                        m++;
                        monthLength = $f2f3e0e3a817edbd$var$umalquraMonthLength(y, m);
                    }
                    break;
                }
            }
            return new ($35ea8db9cb2ccb90$export$99faa760c7908e4f)(this, y, m, days - $f2f3e0e3a817edbd$var$umalquraMonthStart(y, m) + 1);
        }
    }
    toJulianDay(date) {
        if (date.year < $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START || date.year > $f2f3e0e3a817edbd$var$UMALQURA_YEAR_END) return super.toJulianDay(date);
        return $f2f3e0e3a817edbd$var$CIVIL_EPOC + $f2f3e0e3a817edbd$var$umalquraMonthStart(date.year, date.month) + (date.day - 1);
    }
    getDaysInMonth(date) {
        if (date.year < $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START || date.year > $f2f3e0e3a817edbd$var$UMALQURA_YEAR_END) return super.getDaysInMonth(date);
        return $f2f3e0e3a817edbd$var$umalquraMonthLength(date.year, date.month);
    }
    getDaysInYear(date) {
        if (date.year < $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START || date.year > $f2f3e0e3a817edbd$var$UMALQURA_YEAR_END) return super.getDaysInYear(date);
        return $f2f3e0e3a817edbd$var$umalquraYearLength(date.year);
    }
    constructor(){
        super();
        this.identifier = 'islamic-umalqura';
        if (!$f2f3e0e3a817edbd$var$UMALQURA_MONTHLENGTH) $f2f3e0e3a817edbd$var$UMALQURA_MONTHLENGTH = new Uint16Array(Uint8Array.from(atob($f2f3e0e3a817edbd$var$UMALQURA_DATA), (c)=>c.charCodeAt(0)).buffer);
        if (!$f2f3e0e3a817edbd$var$UMALQURA_YEAR_START_TABLE) {
            $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START_TABLE = new Uint32Array($f2f3e0e3a817edbd$var$UMALQURA_YEAR_END - $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START + 1);
            let yearStart = 0;
            for(let year = $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START; year <= $f2f3e0e3a817edbd$var$UMALQURA_YEAR_END; year++){
                $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START_TABLE[year - $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START] = yearStart;
                for(let i = 1; i <= 12; i++)yearStart += $f2f3e0e3a817edbd$var$umalquraMonthLength(year, i);
            }
        }
    }
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ // Portions of the code in this file are based on code from ICU.
// Original licensing can be found in the NOTICE file in the root directory of this source tree.


const $7c5f6fbf42389787$var$HEBREW_EPOCH = 347997;
// Hebrew date calculations are performed in terms of days, hours, and
// "parts" (or halakim), which are 1/1080 of an hour, or 3 1/3 seconds.
const $7c5f6fbf42389787$var$HOUR_PARTS = 1080;
const $7c5f6fbf42389787$var$DAY_PARTS = 24 * $7c5f6fbf42389787$var$HOUR_PARTS;
// An approximate value for the length of a lunar month.
// It is used to calculate the approximate year and month of a given
// absolute date.
const $7c5f6fbf42389787$var$MONTH_DAYS = 29;
const $7c5f6fbf42389787$var$MONTH_FRACT = 12 * $7c5f6fbf42389787$var$HOUR_PARTS + 793;
const $7c5f6fbf42389787$var$MONTH_PARTS = $7c5f6fbf42389787$var$MONTH_DAYS * $7c5f6fbf42389787$var$DAY_PARTS + $7c5f6fbf42389787$var$MONTH_FRACT;
function $7c5f6fbf42389787$var$isLeapYear(year) {
    return ($2b4dce13dd5a17fa$export$842a2cf37af977e1)(year * 7 + 1, 19) < 7;
}
// Test for delay of start of new year and to avoid
// Sunday, Wednesday, and Friday as start of the new year.
function $7c5f6fbf42389787$var$hebrewDelay1(year) {
    let months = Math.floor((235 * year - 234) / 19);
    let parts = 12084 + 13753 * months;
    let day = months * 29 + Math.floor(parts / 25920);
    if (($2b4dce13dd5a17fa$export$842a2cf37af977e1)(3 * (day + 1), 7) < 3) day += 1;
    return day;
}
// Check for delay in start of new year due to length of adjacent years
function $7c5f6fbf42389787$var$hebrewDelay2(year) {
    let last = $7c5f6fbf42389787$var$hebrewDelay1(year - 1);
    let present = $7c5f6fbf42389787$var$hebrewDelay1(year);
    let next = $7c5f6fbf42389787$var$hebrewDelay1(year + 1);
    if (next - present === 356) return 2;
    if (present - last === 382) return 1;
    return 0;
}
function $7c5f6fbf42389787$var$startOfYear(year) {
    return $7c5f6fbf42389787$var$hebrewDelay1(year) + $7c5f6fbf42389787$var$hebrewDelay2(year);
}
function $7c5f6fbf42389787$var$getDaysInYear(year) {
    return $7c5f6fbf42389787$var$startOfYear(year + 1) - $7c5f6fbf42389787$var$startOfYear(year);
}
function $7c5f6fbf42389787$var$getYearType(year) {
    let yearLength = $7c5f6fbf42389787$var$getDaysInYear(year);
    if (yearLength > 380) yearLength -= 30; // Subtract length of leap month.
    switch(yearLength){
        case 353:
            return 0; // deficient
        case 354:
            return 1; // normal
        case 355:
            return 2; // complete
    }
}
function $7c5f6fbf42389787$var$getDaysInMonth(year, month) {
    // Normalize month numbers from 1 - 13, even on non-leap years
    if (month >= 6 && !$7c5f6fbf42389787$var$isLeapYear(year)) month++;
    // First of all, dispose of fixed-length 29 day months
    if (month === 4 || month === 7 || month === 9 || month === 11 || month === 13) return 29;
    let yearType = $7c5f6fbf42389787$var$getYearType(year);
    // If it's Heshvan, days depend on length of year
    if (month === 2) return yearType === 2 ? 30 : 29;
    // Similarly, Kislev varies with the length of year
    if (month === 3) return yearType === 0 ? 29 : 30;
    // Adar I only exists in leap years
    if (month === 6) return $7c5f6fbf42389787$var$isLeapYear(year) ? 30 : 0;
    return 30;
}
class $7c5f6fbf42389787$export$ca405048b8fb5af {
    fromJulianDay(jd) {
        let d = jd - $7c5f6fbf42389787$var$HEBREW_EPOCH;
        let m = d * $7c5f6fbf42389787$var$DAY_PARTS / $7c5f6fbf42389787$var$MONTH_PARTS; // Months (approx)
        let year = Math.floor((19 * m + 234) / 235) + 1; // Years (approx)
        let ys = $7c5f6fbf42389787$var$startOfYear(year); // 1st day of year
        let dayOfYear = Math.floor(d - ys);
        // Because of the postponement rules, it's possible to guess wrong.  Fix it.
        while(dayOfYear < 1){
            year--;
            ys = $7c5f6fbf42389787$var$startOfYear(year);
            dayOfYear = Math.floor(d - ys);
        }
        // Now figure out which month we're in, and the date within that month
        let month = 1;
        let monthStart = 0;
        while(monthStart < dayOfYear){
            monthStart += $7c5f6fbf42389787$var$getDaysInMonth(year, month);
            month++;
        }
        month--;
        monthStart -= $7c5f6fbf42389787$var$getDaysInMonth(year, month);
        let day = dayOfYear - monthStart;
        return new ($35ea8db9cb2ccb90$export$99faa760c7908e4f)(this, year, month, day);
    }
    toJulianDay(date) {
        let jd = $7c5f6fbf42389787$var$startOfYear(date.year);
        for(let month = 1; month < date.month; month++)jd += $7c5f6fbf42389787$var$getDaysInMonth(date.year, month);
        return jd + date.day + $7c5f6fbf42389787$var$HEBREW_EPOCH;
    }
    getDaysInMonth(date) {
        return $7c5f6fbf42389787$var$getDaysInMonth(date.year, date.month);
    }
    getMonthsInYear(date) {
        return $7c5f6fbf42389787$var$isLeapYear(date.year) ? 13 : 12;
    }
    getDaysInYear(date) {
        return $7c5f6fbf42389787$var$getDaysInYear(date.year);
    }
    getYearsInEra() {
        // 6239 gregorian
        return 9999;
    }
    getEras() {
        return [
            'AM'
        ];
    }
    balanceYearMonth(date, previousDate) {
        // Keep date in the same month when switching between leap years and non leap years
        if (previousDate.year !== date.year) {
            if ($7c5f6fbf42389787$var$isLeapYear(previousDate.year) && !$7c5f6fbf42389787$var$isLeapYear(date.year) && previousDate.month > 6) date.month--;
            else if (!$7c5f6fbf42389787$var$isLeapYear(previousDate.year) && $7c5f6fbf42389787$var$isLeapYear(date.year) && previousDate.month > 6) date.month++;
        }
    }
    constructor(){
        this.identifier = 'hebrew';
    }
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ // Portions of the code in this file are based on code from ICU.
// Original licensing can be found in the NOTICE file in the root directory of this source tree.

const $b956b2d7a6cf451f$var$ETHIOPIC_EPOCH = 1723856;
const $b956b2d7a6cf451f$var$COPTIC_EPOCH = 1824665;
// The delta between Amete Alem 1 and Amete Mihret 1
// AA 5501 = AM 1
const $b956b2d7a6cf451f$var$AMETE_MIHRET_DELTA = 5500;
function $b956b2d7a6cf451f$var$ceToJulianDay(epoch, year, month, day) {
    return epoch // difference from Julian epoch to 1,1,1
     + 365 * year // number of days from years
     + Math.floor(year / 4) // extra day of leap year
     + 30 * (month - 1 // number of days from months (1 based)
    ) + day - 1 // number of days for present month (1 based)
    ;
}
function $b956b2d7a6cf451f$var$julianDayToCE(epoch, jd) {
    let year = Math.floor(4 * (jd - epoch) / 1461);
    let month = 1 + Math.floor((jd - $b956b2d7a6cf451f$var$ceToJulianDay(epoch, year, 1, 1)) / 30);
    let day = jd + 1 - $b956b2d7a6cf451f$var$ceToJulianDay(epoch, year, month, 1);
    return [
        year,
        month,
        day
    ];
}
function $b956b2d7a6cf451f$var$getLeapDay(year) {
    return Math.floor(year % 4 / 3);
}
function $b956b2d7a6cf451f$var$getDaysInMonth(year, month) {
    // The Ethiopian and Coptic calendars have 13 months, 12 of 30 days each and
    // an intercalary month at the end of the year of 5 or 6 days, depending whether
    // the year is a leap year or not. The Leap Year follows the same rules as the
    // Julian Calendar so that the extra month always has six days in the year before
    // a Julian Leap Year.
    if (month % 13 !== 0) // not intercalary month
    return 30;
    else // intercalary month 5 days + possible leap day
    return $b956b2d7a6cf451f$var$getLeapDay(year) + 5;
}
class $b956b2d7a6cf451f$export$26ba6eab5e20cd7d {
    fromJulianDay(jd) {
        let [year, month, day] = $b956b2d7a6cf451f$var$julianDayToCE($b956b2d7a6cf451f$var$ETHIOPIC_EPOCH, jd);
        let era = 'AM';
        if (year <= 0) {
            era = 'AA';
            year += $b956b2d7a6cf451f$var$AMETE_MIHRET_DELTA;
        }
        return new ($35ea8db9cb2ccb90$export$99faa760c7908e4f)(this, era, year, month, day);
    }
    toJulianDay(date) {
        let year = date.year;
        if (date.era === 'AA') year -= $b956b2d7a6cf451f$var$AMETE_MIHRET_DELTA;
        return $b956b2d7a6cf451f$var$ceToJulianDay($b956b2d7a6cf451f$var$ETHIOPIC_EPOCH, year, date.month, date.day);
    }
    getDaysInMonth(date) {
        return $b956b2d7a6cf451f$var$getDaysInMonth(date.year, date.month);
    }
    getMonthsInYear() {
        return 13;
    }
    getDaysInYear(date) {
        return 365 + $b956b2d7a6cf451f$var$getLeapDay(date.year);
    }
    getYearsInEra(date) {
        // 9999-12-31 gregorian is 9992-20-02 ethiopic.
        // Round down to 9991 for the last full year.
        // AA 9999-01-01 ethiopic is 4506-09-30 gregorian.
        return date.era === 'AA' ? 9999 : 9991;
    }
    getEras() {
        return [
            'AA',
            'AM'
        ];
    }
    constructor(){
        this.identifier = 'ethiopic';
    }
}
class $b956b2d7a6cf451f$export$d72e0c37005a4914 extends $b956b2d7a6cf451f$export$26ba6eab5e20cd7d {
    fromJulianDay(jd) {
        let [year, month, day] = $b956b2d7a6cf451f$var$julianDayToCE($b956b2d7a6cf451f$var$ETHIOPIC_EPOCH, jd);
        year += $b956b2d7a6cf451f$var$AMETE_MIHRET_DELTA;
        return new ($35ea8db9cb2ccb90$export$99faa760c7908e4f)(this, 'AA', year, month, day);
    }
    getEras() {
        return [
            'AA'
        ];
    }
    getYearsInEra() {
        // 9999-13-04 ethioaa is the maximum date, which is equivalent to 4506-09-29 gregorian.
        return 9999;
    }
    constructor(...args){
        super(...args);
        this.identifier = 'ethioaa' // also known as 'ethiopic-amete-alem' in ICU
        ;
    }
}
class $b956b2d7a6cf451f$export$fe6243cbe1a4b7c1 extends $b956b2d7a6cf451f$export$26ba6eab5e20cd7d {
    fromJulianDay(jd) {
        let [year, month, day] = $b956b2d7a6cf451f$var$julianDayToCE($b956b2d7a6cf451f$var$COPTIC_EPOCH, jd);
        let era = 'CE';
        if (year <= 0) {
            era = 'BCE';
            year = 1 - year;
        }
        return new ($35ea8db9cb2ccb90$export$99faa760c7908e4f)(this, era, year, month, day);
    }
    toJulianDay(date) {
        let year = date.year;
        if (date.era === 'BCE') year = 1 - year;
        return $b956b2d7a6cf451f$var$ceToJulianDay($b956b2d7a6cf451f$var$COPTIC_EPOCH, year, date.month, date.day);
    }
    getDaysInMonth(date) {
        let year = date.year;
        if (date.era === 'BCE') year = 1 - year;
        return $b956b2d7a6cf451f$var$getDaysInMonth(year, date.month);
    }
    isInverseEra(date) {
        return date.era === 'BCE';
    }
    balanceDate(date) {
        if (date.year <= 0) {
            date.era = date.era === 'BCE' ? 'CE' : 'BCE';
            date.year = 1 - date.year;
        }
    }
    getEras() {
        return [
            'BCE',
            'CE'
        ];
    }
    getYearsInEra(date) {
        // 9999-12-30 gregorian is 9716-02-20 coptic.
        // Round down to 9715 for the last full year.
        // BCE 9999-01-01 coptic is BC 9716-06-15 gregorian.
        return date.era === 'BCE' ? 9999 : 9715;
    }
    constructor(...args){
        super(...args);
        this.identifier = 'coptic';
    }
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 








function $64244302c3013299$export$dd0bbc9b26defe37(name) {
    switch(name){
        case 'buddhist':
            return new ($8d73d47422ca7302$export$42d20a78301dee44)();
        case 'ethiopic':
            return new ($b956b2d7a6cf451f$export$26ba6eab5e20cd7d)();
        case 'ethioaa':
            return new ($b956b2d7a6cf451f$export$d72e0c37005a4914)();
        case 'coptic':
            return new ($b956b2d7a6cf451f$export$fe6243cbe1a4b7c1)();
        case 'hebrew':
            return new ($7c5f6fbf42389787$export$ca405048b8fb5af)();
        case 'indian':
            return new ($82c358003bdda0a8$export$39f31c639fa15726)();
        case 'islamic-civil':
            return new ($f2f3e0e3a817edbd$export$2066795aadd37bfc)();
        case 'islamic-tbla':
            return new ($f2f3e0e3a817edbd$export$37f0887f2f9d22f7)();
        case 'islamic-umalqura':
            return new ($f2f3e0e3a817edbd$export$5baab4758c231076)();
        case 'japanese':
            return new ($62225008020f0a13$export$b746ab2b60cdffbf)();
        case 'persian':
            return new ($f3ed2e4472ae7e25$export$37fccdbfd14c5939)();
        case 'roc':
            return new ($5f31bd6f0c8940b2$export$65e01080afcb0799)();
        case 'gregory':
        default:
            return new ($3b62074eb05584b2$export$80ee6245ec4f29ec)();
    }
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ let $fb18d541ea1ad717$var$formatterCache = new Map();
class $fb18d541ea1ad717$export$ad991b66133851cf {
    /** Formats a date as a string according to the locale and format options passed to the constructor. */ format(value) {
        return this.formatter.format(value);
    }
    /** Formats a date to an array of parts such as separators, numbers, punctuation, and more. */ formatToParts(value) {
        return this.formatter.formatToParts(value);
    }
    /** Formats a date range as a string. */ formatRange(start, end) {
        // @ts-ignore
        if (typeof this.formatter.formatRange === 'function') // @ts-ignore
        return this.formatter.formatRange(start, end);
        if (end < start) throw new RangeError('End date must be >= start date');
        // Very basic fallback for old browsers.
        return `${this.formatter.format(start)} \u{2013} ${this.formatter.format(end)}`;
    }
    /** Formats a date range as an array of parts. */ formatRangeToParts(start, end) {
        // @ts-ignore
        if (typeof this.formatter.formatRangeToParts === 'function') // @ts-ignore
        return this.formatter.formatRangeToParts(start, end);
        if (end < start) throw new RangeError('End date must be >= start date');
        let startParts = this.formatter.formatToParts(start);
        let endParts = this.formatter.formatToParts(end);
        return [
            ...startParts.map((p)=>({
                    ...p,
                    source: 'startRange'
                })),
            {
                type: 'literal',
                value: " \u2013 ",
                source: 'shared'
            },
            ...endParts.map((p)=>({
                    ...p,
                    source: 'endRange'
                }))
        ];
    }
    /** Returns the resolved formatting options based on the values passed to the constructor. */ resolvedOptions() {
        let resolvedOptions = this.formatter.resolvedOptions();
        if ($fb18d541ea1ad717$var$hasBuggyResolvedHourCycle()) {
            if (!this.resolvedHourCycle) this.resolvedHourCycle = $fb18d541ea1ad717$var$getResolvedHourCycle(resolvedOptions.locale, this.options);
            resolvedOptions.hourCycle = this.resolvedHourCycle;
            resolvedOptions.hour12 = this.resolvedHourCycle === 'h11' || this.resolvedHourCycle === 'h12';
        }
        // Safari uses a different name for the Ethiopic (Amete Alem) calendar.
        // https://bugs.webkit.org/show_bug.cgi?id=241564
        if (resolvedOptions.calendar === 'ethiopic-amete-alem') resolvedOptions.calendar = 'ethioaa';
        return resolvedOptions;
    }
    constructor(locale, options = {}){
        this.formatter = $fb18d541ea1ad717$var$getCachedDateFormatter(locale, options);
        this.options = options;
    }
}
// There are multiple bugs involving the hour12 and hourCycle options in various browser engines.
//   - Chrome [1] (and the ECMA 402 spec [2]) resolve hour12: false in English and other locales to h24 (24:00 - 23:59)
//     rather than h23 (00:00 - 23:59). Same can happen with hour12: true in French, which Chrome resolves to h11 (00:00 - 11:59)
//     rather than h12 (12:00 - 11:59).
//   - WebKit returns an incorrect hourCycle resolved option in the French locale due to incorrect parsing of 'h' literal
//     in the resolved pattern. It also formats incorrectly when specifying the hourCycle option for the same reason. [3]
// [1] https://bugs.chromium.org/p/chromium/issues/detail?id=1045791
// [2] https://github.com/tc39/ecma402/issues/402
// [3] https://bugs.webkit.org/show_bug.cgi?id=229313
// https://github.com/unicode-org/cldr/blob/018b55eff7ceb389c7e3fc44e2f657eae3b10b38/common/supplemental/supplementalData.xml#L4774-L4802
const $fb18d541ea1ad717$var$hour12Preferences = {
    true: {
        // Only Japanese uses the h11 style for 12 hour time. All others use h12.
        ja: 'h11'
    },
    false: {
    }
};
function $fb18d541ea1ad717$var$getCachedDateFormatter(locale, options = {}) {
    // Work around buggy hour12 behavior in Chrome / ECMA 402 spec by using hourCycle instead.
    // Only apply the workaround if the issue is detected, because the hourCycle option is buggy in Safari.
    if (typeof options.hour12 === 'boolean' && $fb18d541ea1ad717$var$hasBuggyHour12Behavior()) {
        options = {
            ...options
        };
        let pref = $fb18d541ea1ad717$var$hour12Preferences[String(options.hour12)][locale.split('-')[0]];
        let defaultHourCycle = options.hour12 ? 'h12' : 'h23';
        options.hourCycle = pref !== null && pref !== void 0 ? pref : defaultHourCycle;
        delete options.hour12;
    }
    let cacheKey = locale + (options ? Object.entries(options).sort((a, b)=>a[0] < b[0] ? -1 : 1).join() : '');
    if ($fb18d541ea1ad717$var$formatterCache.has(cacheKey)) return $fb18d541ea1ad717$var$formatterCache.get(cacheKey);
    let numberFormatter = new Intl.DateTimeFormat(locale, options);
    $fb18d541ea1ad717$var$formatterCache.set(cacheKey, numberFormatter);
    return numberFormatter;
}
let $fb18d541ea1ad717$var$_hasBuggyHour12Behavior = null;
function $fb18d541ea1ad717$var$hasBuggyHour12Behavior() {
    if ($fb18d541ea1ad717$var$_hasBuggyHour12Behavior == null) $fb18d541ea1ad717$var$_hasBuggyHour12Behavior = new Intl.DateTimeFormat('en-US', {
        hour: 'numeric',
        hour12: false
    }).format(new Date(2020, 2, 3, 0)) === '24';
    return $fb18d541ea1ad717$var$_hasBuggyHour12Behavior;
}
let $fb18d541ea1ad717$var$_hasBuggyResolvedHourCycle = null;
function $fb18d541ea1ad717$var$hasBuggyResolvedHourCycle() {
    if ($fb18d541ea1ad717$var$_hasBuggyResolvedHourCycle == null) $fb18d541ea1ad717$var$_hasBuggyResolvedHourCycle = new Intl.DateTimeFormat('fr', {
        hour: 'numeric',
        hour12: false
    }).resolvedOptions().hourCycle === 'h12';
    return $fb18d541ea1ad717$var$_hasBuggyResolvedHourCycle;
}
function $fb18d541ea1ad717$var$getResolvedHourCycle(locale, options) {
    if (!options.timeStyle && !options.hour) return undefined;
    // Work around buggy results in resolved hourCycle and hour12 options in WebKit.
    // Format the minimum possible hour and maximum possible hour in a day and parse the results.
    locale = locale.replace(/(-u-)?-nu-[a-zA-Z0-9]+/, '');
    locale += (locale.includes('-u-') ? '' : '-u') + '-nu-latn';
    let formatter = $fb18d541ea1ad717$var$getCachedDateFormatter(locale, {
        ...options,
        timeZone: undefined // use local timezone
    });
    let min = parseInt(formatter.formatToParts(new Date(2020, 2, 3, 0)).find((p)=>p.type === 'hour').value, 10);
    let max = parseInt(formatter.formatToParts(new Date(2020, 2, 3, 23)).find((p)=>p.type === 'hour').value, 10);
    if (min === 0 && max === 23) return 'h23';
    if (min === 24 && max === 23) return 'h24';
    if (min === 0 && max === 11) return 'h11';
    if (min === 12 && max === 11) return 'h12';
    throw new Error('Unexpected hour cycle result');
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 



function $896ba0a80a8f4d36$export$85fd5fdf27bacc79(options) {
    // Reuse last options object if it is shallowly equal, which allows the useMemo result to also be reused.
    options = ($5a387cc49350e6db$export$722debc0e56fea39)(options !== null && options !== void 0 ? options : {}, $896ba0a80a8f4d36$var$isEqual);
    let { locale: locale } = ($18f2051aff69b9bf$export$43bb16f9c6d9e3f7)();
    return (reactExports.useMemo)(()=>new ($fb18d541ea1ad717$export$ad991b66133851cf)(locale, options), [
        locale,
        options
    ]);
}
function $896ba0a80a8f4d36$var$isEqual(a, b) {
    if (a === b) return true;
    let aKeys = Object.keys(a);
    let bKeys = Object.keys(b);
    if (aKeys.length !== bKeys.length) return false;
    for (let key of aKeys){
        if (b[key] !== a[key]) return false;
    }
    return true;
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ let $488c6ddbf4ef74c2$var$formatterCache = new Map();
let $488c6ddbf4ef74c2$var$supportsSignDisplay = false;
try {
    // @ts-ignore
    $488c6ddbf4ef74c2$var$supportsSignDisplay = new Intl.NumberFormat('de-DE', {
        signDisplay: 'exceptZero'
    }).resolvedOptions().signDisplay === 'exceptZero';
// eslint-disable-next-line no-empty
} catch (e) {}
let $488c6ddbf4ef74c2$var$supportsUnit = false;
try {
    // @ts-ignore
    $488c6ddbf4ef74c2$var$supportsUnit = new Intl.NumberFormat('de-DE', {
        style: 'unit',
        unit: 'degree'
    }).resolvedOptions().style === 'unit';
// eslint-disable-next-line no-empty
} catch (e) {}
// Polyfill for units since Safari doesn't support them yet. See https://bugs.webkit.org/show_bug.cgi?id=215438.
// Currently only polyfilling the unit degree in narrow format for ColorSlider in our supported locales.
// Values were determined by switching to each locale manually in Chrome.
const $488c6ddbf4ef74c2$var$UNITS = {
    degree: {
        narrow: {
            default: "\xb0",
            'ja-JP': " \u5EA6",
            'zh-TW': "\u5EA6",
            'sl-SI': " \xb0"
        }
    }
};
class $488c6ddbf4ef74c2$export$cc77c4ff7e8673c5 {
    /** Formats a number value as a string, according to the locale and options provided to the constructor. */ format(value) {
        let res = '';
        if (!$488c6ddbf4ef74c2$var$supportsSignDisplay && this.options.signDisplay != null) res = $488c6ddbf4ef74c2$export$711b50b3c525e0f2(this.numberFormatter, this.options.signDisplay, value);
        else res = this.numberFormatter.format(value);
        if (this.options.style === 'unit' && !$488c6ddbf4ef74c2$var$supportsUnit) {
            var _UNITS_unit;
            let { unit: unit, unitDisplay: unitDisplay = 'short', locale: locale } = this.resolvedOptions();
            if (!unit) return res;
            let values = (_UNITS_unit = $488c6ddbf4ef74c2$var$UNITS[unit]) === null || _UNITS_unit === void 0 ? void 0 : _UNITS_unit[unitDisplay];
            res += values[locale] || values.default;
        }
        return res;
    }
    /** Formats a number to an array of parts such as separators, digits, punctuation, and more. */ formatToParts(value) {
        // TODO: implement signDisplay for formatToParts
        // @ts-ignore
        return this.numberFormatter.formatToParts(value);
    }
    /** Formats a number range as a string. */ formatRange(start, end) {
        // @ts-ignore
        if (typeof this.numberFormatter.formatRange === 'function') // @ts-ignore
        return this.numberFormatter.formatRange(start, end);
        if (end < start) throw new RangeError('End date must be >= start date');
        // Very basic fallback for old browsers.
        return `${this.format(start)} \u{2013} ${this.format(end)}`;
    }
    /** Formats a number range as an array of parts. */ formatRangeToParts(start, end) {
        // @ts-ignore
        if (typeof this.numberFormatter.formatRangeToParts === 'function') // @ts-ignore
        return this.numberFormatter.formatRangeToParts(start, end);
        if (end < start) throw new RangeError('End date must be >= start date');
        let startParts = this.numberFormatter.formatToParts(start);
        let endParts = this.numberFormatter.formatToParts(end);
        return [
            ...startParts.map((p)=>({
                    ...p,
                    source: 'startRange'
                })),
            {
                type: 'literal',
                value: " \u2013 ",
                source: 'shared'
            },
            ...endParts.map((p)=>({
                    ...p,
                    source: 'endRange'
                }))
        ];
    }
    /** Returns the resolved formatting options based on the values passed to the constructor. */ resolvedOptions() {
        let options = this.numberFormatter.resolvedOptions();
        if (!$488c6ddbf4ef74c2$var$supportsSignDisplay && this.options.signDisplay != null) options = {
            ...options,
            signDisplay: this.options.signDisplay
        };
        if (!$488c6ddbf4ef74c2$var$supportsUnit && this.options.style === 'unit') options = {
            ...options,
            style: 'unit',
            unit: this.options.unit,
            unitDisplay: this.options.unitDisplay
        };
        return options;
    }
    constructor(locale, options = {}){
        this.numberFormatter = $488c6ddbf4ef74c2$var$getCachedNumberFormatter(locale, options);
        this.options = options;
    }
}
function $488c6ddbf4ef74c2$var$getCachedNumberFormatter(locale, options = {}) {
    let { numberingSystem: numberingSystem } = options;
    if (numberingSystem && locale.includes('-nu-')) {
        if (!locale.includes('-u-')) locale += '-u-';
        locale += `-nu-${numberingSystem}`;
    }
    if (options.style === 'unit' && !$488c6ddbf4ef74c2$var$supportsUnit) {
        var _UNITS_unit;
        let { unit: unit, unitDisplay: unitDisplay = 'short' } = options;
        if (!unit) throw new Error('unit option must be provided with style: "unit"');
        if (!((_UNITS_unit = $488c6ddbf4ef74c2$var$UNITS[unit]) === null || _UNITS_unit === void 0 ? void 0 : _UNITS_unit[unitDisplay])) throw new Error(`Unsupported unit ${unit} with unitDisplay = ${unitDisplay}`);
        options = {
            ...options,
            style: 'decimal'
        };
    }
    let cacheKey = locale + (options ? Object.entries(options).sort((a, b)=>a[0] < b[0] ? -1 : 1).join() : '');
    if ($488c6ddbf4ef74c2$var$formatterCache.has(cacheKey)) return $488c6ddbf4ef74c2$var$formatterCache.get(cacheKey);
    let numberFormatter = new Intl.NumberFormat(locale, options);
    $488c6ddbf4ef74c2$var$formatterCache.set(cacheKey, numberFormatter);
    return numberFormatter;
}
function $488c6ddbf4ef74c2$export$711b50b3c525e0f2(numberFormat, signDisplay, num) {
    if (signDisplay === 'auto') return numberFormat.format(num);
    else if (signDisplay === 'never') return numberFormat.format(Math.abs(num));
    else {
        let needsPositiveSign = false;
        if (signDisplay === 'always') needsPositiveSign = num > 0 || Object.is(num, 0);
        else if (signDisplay === 'exceptZero') {
            if (Object.is(num, -0) || Object.is(num, 0)) num = Math.abs(num);
            else needsPositiveSign = num > 0;
        }
        if (needsPositiveSign) {
            let negative = numberFormat.format(-num);
            let noSign = numberFormat.format(num);
            // ignore RTL/LTR marker character
            let minus = negative.replace(noSign, '').replace(/\u200e|\u061C/, '');
            if ([
                ...minus
            ].length !== 1) console.warn('@react-aria/i18n polyfill for NumberFormat signDisplay: Unsupported case');
            let positive = negative.replace(noSign, '!!!').replace(minus, '+').replace('!!!', noSign);
            return positive;
        } else return numberFormat.format(num);
    }
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 
const $6c7bd7858deea686$var$CURRENCY_SIGN_REGEX = new RegExp('^.*\\(.*\\).*$');
const $6c7bd7858deea686$var$NUMBERING_SYSTEMS = [
    'latn',
    'arab',
    'hanidec'
];
class $6c7bd7858deea686$export$cd11ab140839f11d {
    /**
   * Parses the given string to a number. Returns NaN if a valid number could not be parsed.
   */ parse(value) {
        return $6c7bd7858deea686$var$getNumberParserImpl(this.locale, this.options, value).parse(value);
    }
    /**
   * Returns whether the given string could potentially be a valid number. This should be used to
   * validate user input as the user types. If a `minValue` or `maxValue` is provided, the validity
   * of the minus/plus sign characters can be checked.
   */ isValidPartialNumber(value, minValue, maxValue) {
        return $6c7bd7858deea686$var$getNumberParserImpl(this.locale, this.options, value).isValidPartialNumber(value, minValue, maxValue);
    }
    /**
   * Returns a numbering system for which the given string is valid in the current locale.
   * If no numbering system could be detected, the default numbering system for the current
   * locale is returned.
   */ getNumberingSystem(value) {
        return $6c7bd7858deea686$var$getNumberParserImpl(this.locale, this.options, value).options.numberingSystem;
    }
    constructor(locale, options = {}){
        this.locale = locale;
        this.options = options;
    }
}
const $6c7bd7858deea686$var$numberParserCache = new Map();
function $6c7bd7858deea686$var$getNumberParserImpl(locale, options, value) {
    // First try the default numbering system for the provided locale
    let defaultParser = $6c7bd7858deea686$var$getCachedNumberParser(locale, options);
    // If that doesn't match, and the locale doesn't include a hard coded numbering system,
    // try each of the other supported numbering systems until we find one that matches.
    if (!locale.includes('-nu-') && !defaultParser.isValidPartialNumber(value)) {
        for (let numberingSystem of $6c7bd7858deea686$var$NUMBERING_SYSTEMS)if (numberingSystem !== defaultParser.options.numberingSystem) {
            let parser = $6c7bd7858deea686$var$getCachedNumberParser(locale + (locale.includes('-u-') ? '-nu-' : '-u-nu-') + numberingSystem, options);
            if (parser.isValidPartialNumber(value)) return parser;
        }
    }
    return defaultParser;
}
function $6c7bd7858deea686$var$getCachedNumberParser(locale, options) {
    let cacheKey = locale + (options ? Object.entries(options).sort((a, b)=>a[0] < b[0] ? -1 : 1).join() : '');
    let parser = $6c7bd7858deea686$var$numberParserCache.get(cacheKey);
    if (!parser) {
        parser = new $6c7bd7858deea686$var$NumberParserImpl(locale, options);
        $6c7bd7858deea686$var$numberParserCache.set(cacheKey, parser);
    }
    return parser;
}
// The actual number parser implementation. Instances of this class are cached
// based on the locale, options, and detected numbering system.
class $6c7bd7858deea686$var$NumberParserImpl {
    parse(value) {
        // to parse the number, we need to remove anything that isn't actually part of the number, for example we want '-10.40' not '-10.40 USD'
        let fullySanitizedValue = this.sanitize(value);
        if (this.symbols.group) // Remove group characters, and replace decimal points and numerals with ASCII values.
        fullySanitizedValue = $6c7bd7858deea686$var$replaceAll(fullySanitizedValue, this.symbols.group, '');
        if (this.symbols.decimal) fullySanitizedValue = fullySanitizedValue.replace(this.symbols.decimal, '.');
        if (this.symbols.minusSign) fullySanitizedValue = fullySanitizedValue.replace(this.symbols.minusSign, '-');
        fullySanitizedValue = fullySanitizedValue.replace(this.symbols.numeral, this.symbols.index);
        if (this.options.style === 'percent') {
            // javascript is bad at dividing by 100 and maintaining the same significant figures, so perform it on the string before parsing
            let isNegative = fullySanitizedValue.indexOf('-');
            fullySanitizedValue = fullySanitizedValue.replace('-', '');
            let index = fullySanitizedValue.indexOf('.');
            if (index === -1) index = fullySanitizedValue.length;
            fullySanitizedValue = fullySanitizedValue.replace('.', '');
            if (index - 2 === 0) fullySanitizedValue = `0.${fullySanitizedValue}`;
            else if (index - 2 === -1) fullySanitizedValue = `0.0${fullySanitizedValue}`;
            else if (index - 2 === -2) fullySanitizedValue = '0.00';
            else fullySanitizedValue = `${fullySanitizedValue.slice(0, index - 2)}.${fullySanitizedValue.slice(index - 2)}`;
            if (isNegative > -1) fullySanitizedValue = `-${fullySanitizedValue}`;
        }
        let newValue = fullySanitizedValue ? +fullySanitizedValue : NaN;
        if (isNaN(newValue)) return NaN;
        if (this.options.style === 'percent') {
            var _this_options_minimumFractionDigits, _this_options_maximumFractionDigits;
            // extra step for rounding percents to what our formatter would output
            let options = {
                ...this.options,
                style: 'decimal',
                minimumFractionDigits: Math.min(((_this_options_minimumFractionDigits = this.options.minimumFractionDigits) !== null && _this_options_minimumFractionDigits !== void 0 ? _this_options_minimumFractionDigits : 0) + 2, 20),
                maximumFractionDigits: Math.min(((_this_options_maximumFractionDigits = this.options.maximumFractionDigits) !== null && _this_options_maximumFractionDigits !== void 0 ? _this_options_maximumFractionDigits : 0) + 2, 20)
            };
            return new $6c7bd7858deea686$export$cd11ab140839f11d(this.locale, options).parse(new ($488c6ddbf4ef74c2$export$cc77c4ff7e8673c5)(this.locale, options).format(newValue));
        }
        // accounting will always be stripped to a positive number, so if it's accounting and has a () around everything, then we need to make it negative again
        if (this.options.currencySign === 'accounting' && $6c7bd7858deea686$var$CURRENCY_SIGN_REGEX.test(value)) newValue = -1 * newValue;
        return newValue;
    }
    sanitize(value) {
        // Remove literals and whitespace, which are allowed anywhere in the string
        value = value.replace(this.symbols.literals, '');
        // Replace the ASCII minus sign with the minus sign used in the current locale
        // so that both are allowed in case the user's keyboard doesn't have the locale's minus sign.
        if (this.symbols.minusSign) value = value.replace('-', this.symbols.minusSign);
        // In arab numeral system, their decimal character is 1643, but most keyboards don't type that
        // instead they use the , (44) character or apparently the (1548) character.
        if (this.options.numberingSystem === 'arab') {
            if (this.symbols.decimal) {
                value = value.replace(',', this.symbols.decimal);
                value = value.replace(String.fromCharCode(1548), this.symbols.decimal);
            }
            if (this.symbols.group) value = $6c7bd7858deea686$var$replaceAll(value, '.', this.symbols.group);
        }
        // fr-FR group character is char code 8239, but that's not a key on the french keyboard,
        // so allow 'period' as a group char and replace it with a space
        if (this.options.locale === 'fr-FR') value = $6c7bd7858deea686$var$replaceAll(value, '.', String.fromCharCode(8239));
        return value;
    }
    isValidPartialNumber(value, minValue = -Infinity, maxValue = Infinity) {
        value = this.sanitize(value);
        // Remove minus or plus sign, which must be at the start of the string.
        if (this.symbols.minusSign && value.startsWith(this.symbols.minusSign) && minValue < 0) value = value.slice(this.symbols.minusSign.length);
        else if (this.symbols.plusSign && value.startsWith(this.symbols.plusSign) && maxValue > 0) value = value.slice(this.symbols.plusSign.length);
        // Numbers cannot start with a group separator
        if (this.symbols.group && value.startsWith(this.symbols.group)) return false;
        // Numbers that can't have any decimal values fail if a decimal character is typed
        if (this.symbols.decimal && value.indexOf(this.symbols.decimal) > -1 && this.options.maximumFractionDigits === 0) return false;
        // Remove numerals, groups, and decimals
        if (this.symbols.group) value = $6c7bd7858deea686$var$replaceAll(value, this.symbols.group, '');
        value = value.replace(this.symbols.numeral, '');
        if (this.symbols.decimal) value = value.replace(this.symbols.decimal, '');
        // The number is valid if there are no remaining characters
        return value.length === 0;
    }
    constructor(locale, options = {}){
        this.locale = locale;
        this.formatter = new Intl.NumberFormat(locale, options);
        this.options = this.formatter.resolvedOptions();
        this.symbols = $6c7bd7858deea686$var$getSymbols(locale, this.formatter, this.options, options);
        var _this_options_minimumFractionDigits, _this_options_maximumFractionDigits;
        if (this.options.style === 'percent' && (((_this_options_minimumFractionDigits = this.options.minimumFractionDigits) !== null && _this_options_minimumFractionDigits !== void 0 ? _this_options_minimumFractionDigits : 0) > 18 || ((_this_options_maximumFractionDigits = this.options.maximumFractionDigits) !== null && _this_options_maximumFractionDigits !== void 0 ? _this_options_maximumFractionDigits : 0) > 18)) console.warn('NumberParser cannot handle percentages with greater than 18 decimal places, please reduce the number in your options.');
    }
}
const $6c7bd7858deea686$var$nonLiteralParts = new Set([
    'decimal',
    'fraction',
    'integer',
    'minusSign',
    'plusSign',
    'group'
]);
// This list is derived from https://www.unicode.org/cldr/charts/43/supplemental/language_plural_rules.html#comparison and includes
// all unique numbers which we need to check in order to determine all the plural forms for a given locale.
// See: https://github.com/adobe/react-spectrum/pull/5134/files#r1337037855 for used script
const $6c7bd7858deea686$var$pluralNumbers = [
    0,
    4,
    2,
    1,
    11,
    20,
    3,
    7,
    100,
    21,
    0.1,
    1.1
];
function $6c7bd7858deea686$var$getSymbols(locale, formatter, intlOptions, originalOptions) {
    var _allParts_find, _posAllParts_find, _decimalParts_find, _allParts_find1;
    // formatter needs access to all decimal places in order to generate the correct literal strings for the plural set
    let symbolFormatter = new Intl.NumberFormat(locale, {
        ...intlOptions,
        minimumSignificantDigits: 1,
        maximumSignificantDigits: 21
    });
    // Note: some locale's don't add a group symbol until there is a ten thousands place
    let allParts = symbolFormatter.formatToParts(-10000.111);
    let posAllParts = symbolFormatter.formatToParts(10000.111);
    let pluralParts = $6c7bd7858deea686$var$pluralNumbers.map((n)=>symbolFormatter.formatToParts(n));
    var _allParts_find_value;
    let minusSign = (_allParts_find_value = (_allParts_find = allParts.find((p)=>p.type === 'minusSign')) === null || _allParts_find === void 0 ? void 0 : _allParts_find.value) !== null && _allParts_find_value !== void 0 ? _allParts_find_value : '-';
    let plusSign = (_posAllParts_find = posAllParts.find((p)=>p.type === 'plusSign')) === null || _posAllParts_find === void 0 ? void 0 : _posAllParts_find.value;
    // Safari does not support the signDisplay option, but our number parser polyfills it.
    // If no plus sign was returned, but the original options contained signDisplay, default to the '+' character.
    // @ts-ignore
    if (!plusSign && ((originalOptions === null || originalOptions === void 0 ? void 0 : originalOptions.signDisplay) === 'exceptZero' || (originalOptions === null || originalOptions === void 0 ? void 0 : originalOptions.signDisplay) === 'always')) plusSign = '+';
    // If maximumSignificantDigits is 1 (the minimum) then we won't get decimal characters out of the above formatters
    // Percent also defaults to 0 fractionDigits, so we need to make a new one that isn't percent to get an accurate decimal
    let decimalParts = new Intl.NumberFormat(locale, {
        ...intlOptions,
        minimumFractionDigits: 2,
        maximumFractionDigits: 2
    }).formatToParts(0.001);
    let decimal = (_decimalParts_find = decimalParts.find((p)=>p.type === 'decimal')) === null || _decimalParts_find === void 0 ? void 0 : _decimalParts_find.value;
    let group = (_allParts_find1 = allParts.find((p)=>p.type === 'group')) === null || _allParts_find1 === void 0 ? void 0 : _allParts_find1.value;
    // this set is also for a regex, it's all literals that might be in the string we want to eventually parse that
    // don't contribute to the numerical value
    let allPartsLiterals = allParts.filter((p)=>!$6c7bd7858deea686$var$nonLiteralParts.has(p.type)).map((p)=>$6c7bd7858deea686$var$escapeRegex(p.value));
    let pluralPartsLiterals = pluralParts.flatMap((p)=>p.filter((p)=>!$6c7bd7858deea686$var$nonLiteralParts.has(p.type)).map((p)=>$6c7bd7858deea686$var$escapeRegex(p.value)));
    let sortedLiterals = [
        ...new Set([
            ...allPartsLiterals,
            ...pluralPartsLiterals
        ])
    ].sort((a, b)=>b.length - a.length);
    let literals = sortedLiterals.length === 0 ? new RegExp('[\\p{White_Space}]', 'gu') : new RegExp(`${sortedLiterals.join('|')}|[\\p{White_Space}]`, 'gu');
    // These are for replacing non-latn characters with the latn equivalent
    let numerals = [
        ...new Intl.NumberFormat(intlOptions.locale, {
            useGrouping: false
        }).format(9876543210)
    ].reverse();
    let indexes = new Map(numerals.map((d, i)=>[
            d,
            i
        ]));
    let numeral = new RegExp(`[${numerals.join('')}]`, 'g');
    let index = (d)=>String(indexes.get(d));
    return {
        minusSign: minusSign,
        plusSign: plusSign,
        decimal: decimal,
        group: group,
        literals: literals,
        numeral: numeral,
        index: index
    };
}
function $6c7bd7858deea686$var$replaceAll(str, find, replace) {
    // @ts-ignore
    if (str.replaceAll) // @ts-ignore
    return str.replaceAll(find, replace);
    return str.split(find).join(replace);
}
function $6c7bd7858deea686$var$escapeRegex(string) {
    return string.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 


function $a916eb452884faea$export$b7a616150fdb9f44(options = {}) {
    let { locale: locale } = ($18f2051aff69b9bf$export$43bb16f9c6d9e3f7)();
    return (reactExports.useMemo)(()=>new ($488c6ddbf4ef74c2$export$cc77c4ff7e8673c5)(locale, options), [
        locale,
        options
    ]);
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 
let $325a3faab7a68acd$var$cache = new Map();
function $325a3faab7a68acd$export$a16aca283550c30d(options) {
    let { locale: locale } = ($18f2051aff69b9bf$export$43bb16f9c6d9e3f7)();
    let cacheKey = locale + (options ? Object.entries(options).sort((a, b)=>a[0] < b[0] ? -1 : 1).join() : '');
    if ($325a3faab7a68acd$var$cache.has(cacheKey)) return $325a3faab7a68acd$var$cache.get(cacheKey);
    let formatter = new Intl.Collator(locale, options);
    $325a3faab7a68acd$var$cache.set(cacheKey, formatter);
    return formatter;
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 

function $bb77f239b46e8c72$export$3274cf84b703fff(options) {
    let collator = ($325a3faab7a68acd$export$a16aca283550c30d)({
        usage: 'search',
        ...options
    });
    // TODO(later): these methods don't currently support the ignorePunctuation option.
    let startsWith = (reactExports.useCallback)((string, substring)=>{
        if (substring.length === 0) return true;
        // Normalize both strings so we can slice safely
        // TODO: take into account the ignorePunctuation option as well...
        string = string.normalize('NFC');
        substring = substring.normalize('NFC');
        return collator.compare(string.slice(0, substring.length), substring) === 0;
    }, [
        collator
    ]);
    let endsWith = (reactExports.useCallback)((string, substring)=>{
        if (substring.length === 0) return true;
        string = string.normalize('NFC');
        substring = substring.normalize('NFC');
        return collator.compare(string.slice(-substring.length), substring) === 0;
    }, [
        collator
    ]);
    let contains = (reactExports.useCallback)((string, substring)=>{
        if (substring.length === 0) return true;
        string = string.normalize('NFC');
        substring = substring.normalize('NFC');
        let scan = 0;
        let sliceLen = substring.length;
        for(; scan + sliceLen <= string.length; scan++){
            let slice = string.slice(scan, scan + sliceLen);
            if (collator.compare(substring, slice) === 0) return true;
        }
        return false;
    }, [
        collator
    ]);
    return (reactExports.useMemo)(()=>({
            startsWith: startsWith,
            endsWith: endsWith,
            contains: contains
        }), [
        startsWith,
        endsWith,
        contains
    ]);
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 


function $701a24aa0da5b062$export$ea18c227d4417cc3(props, ref) {
    let { elementType: elementType = 'button', isDisabled: isDisabled, onPress: onPress, onPressStart: onPressStart, onPressEnd: onPressEnd, onPressUp: onPressUp, onPressChange: onPressChange, preventFocusOnPress: // @ts-ignore - undocumented
    preventFocusOnPress, allowFocusWhenDisabled: // @ts-ignore - undocumented
    allowFocusWhenDisabled, // @ts-ignore
    onClick: deprecatedOnClick, href: href, target: target, rel: rel, type: type = 'button' } = props;
    let additionalProps;
    if (elementType === 'button') additionalProps = {
        type: type,
        disabled: isDisabled
    };
    else additionalProps = {
        role: 'button',
        tabIndex: isDisabled ? undefined : 0,
        href: elementType === 'a' && isDisabled ? undefined : href,
        target: elementType === 'a' ? target : undefined,
        type: elementType === 'input' ? type : undefined,
        disabled: elementType === 'input' ? isDisabled : undefined,
        'aria-disabled': !isDisabled || elementType === 'input' ? undefined : isDisabled,
        rel: elementType === 'a' ? rel : undefined
    };
    let { pressProps: pressProps, isPressed: isPressed } = ($f6c31cce2adf654f$export$45712eceda6fad21)({
        onPressStart: onPressStart,
        onPressEnd: onPressEnd,
        onPressChange: onPressChange,
        onPress: onPress,
        onPressUp: onPressUp,
        isDisabled: isDisabled,
        preventFocusOnPress: preventFocusOnPress,
        ref: ref
    });
    let { focusableProps: focusableProps } = ($e6afbd83fe6ebbd2$export$4c014de7c8940b4c)(props, ref);
    if (allowFocusWhenDisabled) focusableProps.tabIndex = isDisabled ? -1 : focusableProps.tabIndex;
    let buttonProps = ($3ef42575df84b30b$export$9d1611c77c2fe928)(focusableProps, pressProps, ($65484d02dcb7eb3e$export$457c3d6518dd4c6f)(props, {
        labelable: true
    }));
    return {
        isPressed: isPressed,
        buttonProps: ($3ef42575df84b30b$export$9d1611c77c2fe928)(additionalProps, buttonProps, {
            'aria-haspopup': props['aria-haspopup'],
            'aria-expanded': props['aria-expanded'],
            'aria-controls': props['aria-controls'],
            'aria-pressed': props['aria-pressed'],
            onClick: (e)=>{
                if (deprecatedOnClick) {
                    deprecatedOnClick(e);
                    console.warn('onClick is deprecated, please use onPress');
                }
            }
        })
    };
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 

function $55f54f7887471b58$export$51e84d46ca0bc451(props, state, ref) {
    const { isSelected: isSelected } = state;
    const { isPressed: isPressed, buttonProps: buttonProps } = ($701a24aa0da5b062$export$ea18c227d4417cc3)({
        ...props,
        onPress: ($ff5963eb1fccf552$export$e08e3b67e392101e)(state.toggle, props.onPress)
    }, ref);
    return {
        isPressed: isPressed,
        buttonProps: ($3ef42575df84b30b$export$9d1611c77c2fe928)(buttonProps, {
            'aria-pressed': isSelected
        })
    };
}

var $39324ace0d945f59$exports = {};
$39324ace0d945f59$exports = {
    "dateRange": (args)=>`${args.startDate} \u{625}\u{644}\u{649} ${args.endDate}`,
    "dateSelected": (args)=>`${args.date} \u{627}\u{644}\u{645}\u{62D}\u{62F}\u{62F}`,
    "finishRangeSelectionPrompt": `\u{627}\u{646}\u{642}\u{631} \u{644}\u{625}\u{646}\u{647}\u{627}\u{621} \u{639}\u{645}\u{644}\u{64A}\u{629} \u{62A}\u{62D}\u{62F}\u{64A}\u{62F} \u{646}\u{637}\u{627}\u{642} \u{627}\u{644}\u{62A}\u{627}\u{631}\u{64A}\u{62E}`,
    "maximumDate": `\u{622}\u{62E}\u{631} \u{62A}\u{627}\u{631}\u{64A}\u{62E} \u{645}\u{62A}\u{627}\u{62D}`,
    "minimumDate": `\u{623}\u{648}\u{644} \u{62A}\u{627}\u{631}\u{64A}\u{62E} \u{645}\u{62A}\u{627}\u{62D}`,
    "next": `\u{627}\u{644}\u{62A}\u{627}\u{644}\u{64A}`,
    "previous": `\u{627}\u{644}\u{633}\u{627}\u{628}\u{642}`,
    "selectedDateDescription": (args)=>`\u{62A}\u{627}\u{631}\u{64A}\u{62E} \u{645}\u{62D}\u{62F}\u{62F}: ${args.date}`,
    "selectedRangeDescription": (args)=>`\u{627}\u{644}\u{645}\u{62F}\u{649} \u{627}\u{644}\u{632}\u{645}\u{646}\u{64A} \u{627}\u{644}\u{645}\u{62D}\u{62F}\u{62F}: ${args.dateRange}`,
    "startRangeSelectionPrompt": `\u{627}\u{646}\u{642}\u{631} \u{644}\u{628}\u{62F}\u{621} \u{639}\u{645}\u{644}\u{64A}\u{629} \u{62A}\u{62D}\u{62F}\u{64A}\u{62F} \u{646}\u{637}\u{627}\u{642} \u{627}\u{644}\u{62A}\u{627}\u{631}\u{64A}\u{62E}`,
    "todayDate": (args)=>`\u{627}\u{644}\u{64A}\u{648}\u{645}\u{60C} ${args.date}`,
    "todayDateSelected": (args)=>`\u{627}\u{644}\u{64A}\u{648}\u{645}\u{60C} ${args.date} \u{645}\u{62D}\u{62F}\u{62F}`
};

var $1830a539e98c7baf$exports = {};
$1830a539e98c7baf$exports = {
    "dateRange": (args)=>`${args.startDate} \u{434}\u{43E} ${args.endDate}`,
    "dateSelected": (args)=>`\u{418}\u{437}\u{431}\u{440}\u{430}\u{43D}\u{43E} \u{435} ${args.date}`,
    "finishRangeSelectionPrompt": `\u{41D}\u{430}\u{442}\u{438}\u{441}\u{43D}\u{435}\u{442}\u{435}, \u{437}\u{430} \u{434}\u{430} \u{434}\u{43E}\u{432}\u{44A}\u{440}\u{448}\u{438}\u{442}\u{435} \u{438}\u{437}\u{431}\u{43E}\u{440}\u{430} \u{43D}\u{430} \u{432}\u{440}\u{435}\u{43C}\u{435}\u{432}\u{438} \u{438}\u{43D}\u{442}\u{435}\u{440}\u{432}\u{430}\u{43B}`,
    "maximumDate": `\u{41F}\u{43E}\u{441}\u{43B}\u{435}\u{434}\u{43D}\u{430} \u{43D}\u{430}\u{43B}\u{438}\u{447}\u{43D}\u{430} \u{434}\u{430}\u{442}\u{430}`,
    "minimumDate": `\u{41F}\u{44A}\u{440}\u{432}\u{430} \u{43D}\u{430}\u{43B}\u{438}\u{447}\u{43D}\u{430} \u{434}\u{430}\u{442}\u{430}`,
    "next": `\u{41D}\u{430}\u{43F}\u{440}\u{435}\u{434}`,
    "previous": `\u{41D}\u{430}\u{437}\u{430}\u{434}`,
    "selectedDateDescription": (args)=>`\u{418}\u{437}\u{431}\u{440}\u{430}\u{43D}\u{430} \u{434}\u{430}\u{442}\u{430}: ${args.date}`,
    "selectedRangeDescription": (args)=>`\u{418}\u{437}\u{431}\u{440}\u{430}\u{43D} \u{434}\u{438}\u{430}\u{43F}\u{430}\u{437}\u{43E}\u{43D}: ${args.dateRange}`,
    "startRangeSelectionPrompt": `\u{41D}\u{430}\u{442}\u{438}\u{441}\u{43D}\u{435}\u{442}\u{435}, \u{437}\u{430} \u{434}\u{430} \u{43F}\u{440}\u{438}\u{441}\u{442}\u{44A}\u{43F}\u{438}\u{442}\u{435} \u{43A}\u{44A}\u{43C} \u{438}\u{437}\u{431}\u{43E}\u{440}\u{430} \u{43D}\u{430} \u{432}\u{440}\u{435}\u{43C}\u{435}\u{432}\u{438} \u{438}\u{43D}\u{442}\u{435}\u{440}\u{432}\u{430}\u{43B}`,
    "todayDate": (args)=>`\u{414}\u{43D}\u{435}\u{441}, ${args.date}`,
    "todayDateSelected": (args)=>`\u{414}\u{43D}\u{435}\u{441}, ${args.date} \u{441}\u{430} \u{438}\u{437}\u{431}\u{440}\u{430}\u{43D}\u{438}`
};

var $f4b92528965aab97$exports = {};
$f4b92528965aab97$exports = {
    "dateRange": (args)=>`${args.startDate} a\u{17E} ${args.endDate}`,
    "dateSelected": (args)=>`Vybr\xe1no ${args.date}`,
    "finishRangeSelectionPrompt": `Kliknut\xedm dokon\u{10D}\xedte v\xfdb\u{11B}r rozsahu dat`,
    "maximumDate": `Posledn\xed dostupn\xe9 datum`,
    "minimumDate": `Prvn\xed dostupn\xe9 datum`,
    "next": `Dal\u{161}\xed`,
    "previous": `P\u{159}edchoz\xed`,
    "selectedDateDescription": (args)=>`Vybran\xe9 datum: ${args.date}`,
    "selectedRangeDescription": (args)=>`Vybran\xe9 obdob\xed: ${args.dateRange}`,
    "startRangeSelectionPrompt": `Kliknut\xedm zah\xe1j\xedte v\xfdb\u{11B}r rozsahu dat`,
    "todayDate": (args)=>`Dnes, ${args.date}`,
    "todayDateSelected": (args)=>`Dnes, vybr\xe1no ${args.date}`
};

var $1cd578ef0547c8f1$exports = {};
$1cd578ef0547c8f1$exports = {
    "dateRange": (args)=>`${args.startDate} til ${args.endDate}`,
    "dateSelected": (args)=>`${args.date} valgt`,
    "finishRangeSelectionPrompt": `Klik for at fuldf\xf8re valg af datoomr\xe5de`,
    "maximumDate": `Sidste ledige dato`,
    "minimumDate": `F\xf8rste ledige dato`,
    "next": `N\xe6ste`,
    "previous": `Forrige`,
    "selectedDateDescription": (args)=>`Valgt dato: ${args.date}`,
    "selectedRangeDescription": (args)=>`Valgt interval: ${args.dateRange}`,
    "startRangeSelectionPrompt": `Klik for at starte valg af datoomr\xe5de`,
    "todayDate": (args)=>`I dag, ${args.date}`,
    "todayDateSelected": (args)=>`I dag, ${args.date} valgt`
};

var $db55a8973925d619$exports = {};
$db55a8973925d619$exports = {
    "dateRange": (args)=>`${args.startDate} bis ${args.endDate}`,
    "dateSelected": (args)=>`${args.date} ausgew\xe4hlt`,
    "finishRangeSelectionPrompt": `Klicken, um die Auswahl des Datumsbereichs zu beenden`,
    "maximumDate": `Letztes verf\xfcgbares Datum`,
    "minimumDate": `Erstes verf\xfcgbares Datum`,
    "next": `Weiter`,
    "previous": `Zur\xfcck`,
    "selectedDateDescription": (args)=>`Ausgew\xe4hltes Datum: ${args.date}`,
    "selectedRangeDescription": (args)=>`Ausgew\xe4hlter Bereich: ${args.dateRange}`,
    "startRangeSelectionPrompt": `Klicken, um die Auswahl des Datumsbereichs zu beginnen`,
    "todayDate": (args)=>`Heute, ${args.date}`,
    "todayDateSelected": (args)=>`Heute, ${args.date} ausgew\xe4hlt`
};

var $ec6937d58566d443$exports = {};
$ec6937d58566d443$exports = {
    "dateRange": (args)=>`${args.startDate} \u{3AD}\u{3C9}\u{3C2} ${args.endDate}`,
    "dateSelected": (args)=>`\u{395}\u{3C0}\u{3B9}\u{3BB}\u{3AD}\u{3C7}\u{3B8}\u{3B7}\u{3BA}\u{3B5} ${args.date}`,
    "finishRangeSelectionPrompt": `\u{39A}\u{3AC}\u{3BD}\u{3C4}\u{3B5} \u{3BA}\u{3BB}\u{3B9}\u{3BA} \u{3B3}\u{3B9}\u{3B1} \u{3BD}\u{3B1} \u{3BF}\u{3BB}\u{3BF}\u{3BA}\u{3BB}\u{3B7}\u{3C1}\u{3CE}\u{3C3}\u{3B5}\u{3C4}\u{3B5} \u{3C4}\u{3B7}\u{3BD} \u{3B5}\u{3C0}\u{3B9}\u{3BB}\u{3BF}\u{3B3}\u{3AE} \u{3B5}\u{3CD}\u{3C1}\u{3BF}\u{3C5}\u{3C2} \u{3B7}\u{3BC}\u{3B5}\u{3C1}\u{3BF}\u{3BC}\u{3B7}\u{3BD}\u{3B9}\u{3CE}\u{3BD}`,
    "maximumDate": `\u{3A4}\u{3B5}\u{3BB}\u{3B5}\u{3C5}\u{3C4}\u{3B1}\u{3AF}\u{3B1} \u{3B4}\u{3B9}\u{3B1}\u{3B8}\u{3AD}\u{3C3}\u{3B9}\u{3BC}\u{3B7} \u{3B7}\u{3BC}\u{3B5}\u{3C1}\u{3BF}\u{3BC}\u{3B7}\u{3BD}\u{3AF}\u{3B1}`,
    "minimumDate": `\u{3A0}\u{3C1}\u{3CE}\u{3C4}\u{3B7} \u{3B4}\u{3B9}\u{3B1}\u{3B8}\u{3AD}\u{3C3}\u{3B9}\u{3BC}\u{3B7} \u{3B7}\u{3BC}\u{3B5}\u{3C1}\u{3BF}\u{3BC}\u{3B7}\u{3BD}\u{3AF}\u{3B1}`,
    "next": `\u{395}\u{3C0}\u{3CC}\u{3BC}\u{3B5}\u{3BD}\u{3BF}`,
    "previous": `\u{3A0}\u{3C1}\u{3BF}\u{3B7}\u{3B3}\u{3BF}\u{3CD}\u{3BC}\u{3B5}\u{3BD}\u{3BF}`,
    "selectedDateDescription": (args)=>`\u{395}\u{3C0}\u{3B9}\u{3BB}\u{3B5}\u{3B3}\u{3BC}\u{3AD}\u{3BD}\u{3B7} \u{3B7}\u{3BC}\u{3B5}\u{3C1}\u{3BF}\u{3BC}\u{3B7}\u{3BD}\u{3AF}\u{3B1}: ${args.date}`,
    "selectedRangeDescription": (args)=>`\u{395}\u{3C0}\u{3B9}\u{3BB}\u{3B5}\u{3B3}\u{3BC}\u{3AD}\u{3BD}\u{3BF} \u{3B5}\u{3CD}\u{3C1}\u{3BF}\u{3C2}: ${args.dateRange}`,
    "startRangeSelectionPrompt": `\u{39A}\u{3AC}\u{3BD}\u{3C4}\u{3B5} \u{3BA}\u{3BB}\u{3B9}\u{3BA} \u{3B3}\u{3B9}\u{3B1} \u{3BD}\u{3B1} \u{3BE}\u{3B5}\u{3BA}\u{3B9}\u{3BD}\u{3AE}\u{3C3}\u{3B5}\u{3C4}\u{3B5} \u{3C4}\u{3B7}\u{3BD} \u{3B5}\u{3C0}\u{3B9}\u{3BB}\u{3BF}\u{3B3}\u{3AE} \u{3B5}\u{3CD}\u{3C1}\u{3BF}\u{3C5}\u{3C2} \u{3B7}\u{3BC}\u{3B5}\u{3C1}\u{3BF}\u{3BC}\u{3B7}\u{3BD}\u{3B9}\u{3CE}\u{3BD}`,
    "todayDate": (args)=>`\u{3A3}\u{3AE}\u{3BC}\u{3B5}\u{3C1}\u{3B1}, ${args.date}`,
    "todayDateSelected": (args)=>`\u{3A3}\u{3AE}\u{3BC}\u{3B5}\u{3C1}\u{3B1}, \u{3B5}\u{3C0}\u{3B9}\u{3BB}\u{3AD}\u{3C7}\u{3C4}\u{3B7}\u{3BA}\u{3B5} ${args.date}`
};

var $1f5cea0742dc284a$exports = {};
$1f5cea0742dc284a$exports = {
    "previous": `Previous`,
    "next": `Next`,
    "selectedDateDescription": (args)=>`Selected Date: ${args.date}`,
    "selectedRangeDescription": (args)=>`Selected Range: ${args.dateRange}`,
    "todayDate": (args)=>`Today, ${args.date}`,
    "todayDateSelected": (args)=>`Today, ${args.date} selected`,
    "dateSelected": (args)=>`${args.date} selected`,
    "startRangeSelectionPrompt": `Click to start selecting date range`,
    "finishRangeSelectionPrompt": `Click to finish selecting date range`,
    "minimumDate": `First available date`,
    "maximumDate": `Last available date`,
    "dateRange": (args)=>`${args.startDate} to ${args.endDate}`
};

var $2ca7ea366384817b$exports = {};
$2ca7ea366384817b$exports = {
    "dateRange": (args)=>`${args.startDate} a ${args.endDate}`,
    "dateSelected": (args)=>`${args.date} seleccionado`,
    "finishRangeSelectionPrompt": `Haga clic para terminar de seleccionar rango de fechas`,
    "maximumDate": `\xdaltima fecha disponible`,
    "minimumDate": `Primera fecha disponible`,
    "next": `Siguiente`,
    "previous": `Anterior`,
    "selectedDateDescription": (args)=>`Fecha seleccionada: ${args.date}`,
    "selectedRangeDescription": (args)=>`Intervalo seleccionado: ${args.dateRange}`,
    "startRangeSelectionPrompt": `Haga clic para comenzar a seleccionar un rango de fechas`,
    "todayDate": (args)=>`Hoy, ${args.date}`,
    "todayDateSelected": (args)=>`Hoy, ${args.date} seleccionado`
};

var $97874a7fe9cd091f$exports = {};
$97874a7fe9cd091f$exports = {
    "dateRange": (args)=>`${args.startDate} kuni ${args.endDate}`,
    "dateSelected": (args)=>`${args.date} valitud`,
    "finishRangeSelectionPrompt": `Kl\xf5psake kuup\xe4evavahemiku valimise l\xf5petamiseks`,
    "maximumDate": `Viimane saadaolev kuup\xe4ev`,
    "minimumDate": `Esimene saadaolev kuup\xe4ev`,
    "next": `J\xe4rgmine`,
    "previous": `Eelmine`,
    "selectedDateDescription": (args)=>`Valitud kuup\xe4ev: ${args.date}`,
    "selectedRangeDescription": (args)=>`Valitud vahemik: ${args.dateRange}`,
    "startRangeSelectionPrompt": `Kl\xf5psake kuup\xe4evavahemiku valimiseks`,
    "todayDate": (args)=>`T\xe4na, ${args.date}`,
    "todayDateSelected": (args)=>`T\xe4na, ${args.date} valitud`
};

var $5d376b7fce1a45b2$exports = {};
$5d376b7fce1a45b2$exports = {
    "dateRange": (args)=>`${args.startDate} \u{2013} ${args.endDate}`,
    "dateSelected": (args)=>`${args.date} valittu`,
    "finishRangeSelectionPrompt": `Lopeta p\xe4iv\xe4m\xe4\xe4r\xe4alueen valinta napsauttamalla t\xe4t\xe4.`,
    "maximumDate": `Viimeinen varattavissa oleva p\xe4iv\xe4m\xe4\xe4r\xe4`,
    "minimumDate": `Ensimm\xe4inen varattavissa oleva p\xe4iv\xe4m\xe4\xe4r\xe4`,
    "next": `Seuraava`,
    "previous": `Edellinen`,
    "selectedDateDescription": (args)=>`Valittu p\xe4iv\xe4m\xe4\xe4r\xe4: ${args.date}`,
    "selectedRangeDescription": (args)=>`Valittu aikav\xe4li: ${args.dateRange}`,
    "startRangeSelectionPrompt": `Aloita p\xe4iv\xe4m\xe4\xe4r\xe4alueen valinta napsauttamalla t\xe4t\xe4.`,
    "todayDate": (args)=>`T\xe4n\xe4\xe4n, ${args.date}`,
    "todayDateSelected": (args)=>`T\xe4n\xe4\xe4n, ${args.date} valittu`
};

var $3bf722b362aaf54d$exports = {};
$3bf722b362aaf54d$exports = {
    "dateRange": (args)=>`${args.startDate} \xe0 ${args.endDate}`,
    "dateSelected": (args)=>`${args.date} s\xe9lectionn\xe9`,
    "finishRangeSelectionPrompt": `Cliquer pour finir de s\xe9lectionner la plage de dates`,
    "maximumDate": `Derni\xe8re date disponible`,
    "minimumDate": `Premi\xe8re date disponible`,
    "next": `Suivant`,
    "previous": `Pr\xe9c\xe9dent`,
    "selectedDateDescription": (args)=>`Date s\xe9lectionn\xe9e\xa0: ${args.date}`,
    "selectedRangeDescription": (args)=>`Plage s\xe9lectionn\xe9e\xa0: ${args.dateRange}`,
    "startRangeSelectionPrompt": `Cliquer pour commencer \xe0 s\xe9lectionner la plage de dates`,
    "todayDate": (args)=>`Aujourd'hui, ${args.date}`,
    "todayDateSelected": (args)=>`Aujourd\u{2019}hui, ${args.date} s\xe9lectionn\xe9`
};

var $38c43f8322316031$exports = {};
$38c43f8322316031$exports = {
    "dateRange": (args)=>`${args.startDate} \u{5E2}\u{5D3} ${args.endDate}`,
    "dateSelected": (args)=>`${args.date} \u{5E0}\u{5D1}\u{5D7}\u{5E8}`,
    "finishRangeSelectionPrompt": `\u{5D7}\u{5E5} \u{5DB}\u{5D3}\u{5D9} \u{5DC}\u{5E1}\u{5D9}\u{5D9}\u{5DD} \u{5D0}\u{5EA} \u{5D1}\u{5D7}\u{5D9}\u{5E8}\u{5EA} \u{5D8}\u{5D5}\u{5D5}\u{5D7} \u{5D4}\u{5EA}\u{5D0}\u{5E8}\u{5D9}\u{5DB}\u{5D9}\u{5DD}`,
    "maximumDate": `\u{5EA}\u{5D0}\u{5E8}\u{5D9}\u{5DA} \u{5E4}\u{5E0}\u{5D5}\u{5D9} \u{5D0}\u{5D7}\u{5E8}\u{5D5}\u{5DF}`,
    "minimumDate": `\u{5EA}\u{5D0}\u{5E8}\u{5D9}\u{5DA} \u{5E4}\u{5E0}\u{5D5}\u{5D9} \u{5E8}\u{5D0}\u{5E9}\u{5D5}\u{5DF}`,
    "next": `\u{5D4}\u{5D1}\u{5D0}`,
    "previous": `\u{5D4}\u{5E7}\u{5D5}\u{5D3}\u{5DD}`,
    "selectedDateDescription": (args)=>`\u{5EA}\u{5D0}\u{5E8}\u{5D9}\u{5DA} \u{5E0}\u{5D1}\u{5D7}\u{5E8}: ${args.date}`,
    "selectedRangeDescription": (args)=>`\u{5D8}\u{5D5}\u{5D5}\u{5D7} \u{5E0}\u{5D1}\u{5D7}\u{5E8}: ${args.dateRange}`,
    "startRangeSelectionPrompt": `\u{5DC}\u{5D7}\u{5E5} \u{5DB}\u{5D3}\u{5D9} \u{5DC}\u{5D4}\u{5EA}\u{5D7}\u{5D9}\u{5DC} \u{5D1}\u{5D1}\u{5D7}\u{5D9}\u{5E8}\u{5EA} \u{5D8}\u{5D5}\u{5D5}\u{5D7} \u{5D4}\u{5EA}\u{5D0}\u{5E8}\u{5D9}\u{5DB}\u{5D9}\u{5DD}`,
    "todayDate": (args)=>`\u{5D4}\u{5D9}\u{5D5}\u{5DD}, ${args.date}`,
    "todayDateSelected": (args)=>`\u{5D4}\u{5D9}\u{5D5}\u{5DD}, ${args.date} \u{5E0}\u{5D1}\u{5D7}\u{5E8}`
};

var $c90e0f32b44630bf$exports = {};
$c90e0f32b44630bf$exports = {
    "dateRange": (args)=>`${args.startDate} do ${args.endDate}`,
    "dateSelected": (args)=>`${args.date} odabran`,
    "finishRangeSelectionPrompt": `Kliknite da dovr\u{161}ite raspon odabranih datuma`,
    "maximumDate": `Posljednji raspolo\u{17E}ivi datum`,
    "minimumDate": `Prvi raspolo\u{17E}ivi datum`,
    "next": `Sljede\u{107}i`,
    "previous": `Prethodni`,
    "selectedDateDescription": (args)=>`Odabrani datum: ${args.date}`,
    "selectedRangeDescription": (args)=>`Odabrani raspon: ${args.dateRange}`,
    "startRangeSelectionPrompt": `Kliknite da zapo\u{10D}nete raspon odabranih datuma`,
    "todayDate": (args)=>`Danas, ${args.date}`,
    "todayDateSelected": (args)=>`Danas, odabran ${args.date}`
};

var $715875e6e7a338f4$exports = {};
$715875e6e7a338f4$exports = {
    "dateRange": (args)=>`${args.startDate}\u{2013}${args.endDate}`,
    "dateSelected": (args)=>`${args.date} kiv\xe1lasztva`,
    "finishRangeSelectionPrompt": `Kattintson a d\xe1tumtartom\xe1ny kijel\xf6l\xe9s\xe9nek befejez\xe9s\xe9hez`,
    "maximumDate": `Utols\xf3 el\xe9rhet\u{151} d\xe1tum`,
    "minimumDate": `Az els\u{151} el\xe9rhet\u{151} d\xe1tum`,
    "next": `K\xf6vetkez\u{151}`,
    "previous": `El\u{151}z\u{151}`,
    "selectedDateDescription": (args)=>`Kijel\xf6lt d\xe1tum: ${args.date}`,
    "selectedRangeDescription": (args)=>`Kijel\xf6lt tartom\xe1ny: ${args.dateRange}`,
    "startRangeSelectionPrompt": `Kattintson a d\xe1tumtartom\xe1ny kijel\xf6l\xe9s\xe9nek ind\xedt\xe1s\xe1hoz`,
    "todayDate": (args)=>`Ma, ${args.date}`,
    "todayDateSelected": (args)=>`Ma, ${args.date} kijel\xf6lve`
};

var $37d77c66e34daccf$exports = {};
$37d77c66e34daccf$exports = {
    "dateRange": (args)=>`Da ${args.startDate} a ${args.endDate}`,
    "dateSelected": (args)=>`${args.date} selezionata`,
    "finishRangeSelectionPrompt": `Fai clic per completare la selezione dell\u{2019}intervallo di date`,
    "maximumDate": `Ultima data disponibile`,
    "minimumDate": `Prima data disponibile`,
    "next": `Successivo`,
    "previous": `Precedente`,
    "selectedDateDescription": (args)=>`Data selezionata: ${args.date}`,
    "selectedRangeDescription": (args)=>`Intervallo selezionato: ${args.dateRange}`,
    "startRangeSelectionPrompt": `Fai clic per selezionare l\u{2019}intervallo di date`,
    "todayDate": (args)=>`Oggi, ${args.date}`,
    "todayDateSelected": (args)=>`Oggi, ${args.date} selezionata`
};

var $542f39aee29303c3$exports = {};
$542f39aee29303c3$exports = {
    "dateRange": (args)=>`${args.startDate} \u{304B}\u{3089} ${args.endDate}`,
    "dateSelected": (args)=>`${args.date} \u{3092}\u{9078}\u{629E}`,
    "finishRangeSelectionPrompt": `\u{30AF}\u{30EA}\u{30C3}\u{30AF}\u{3057}\u{3066}\u{65E5}\u{4ED8}\u{7BC4}\u{56F2}\u{306E}\u{9078}\u{629E}\u{3092}\u{7D42}\u{4E86}`,
    "maximumDate": `\u{6700}\u{7D42}\u{5229}\u{7528}\u{53EF}\u{80FD}\u{65E5}`,
    "minimumDate": `\u{6700}\u{521D}\u{306E}\u{5229}\u{7528}\u{53EF}\u{80FD}\u{65E5}`,
    "next": `\u{6B21}\u{3078}`,
    "previous": `\u{524D}\u{3078}`,
    "selectedDateDescription": (args)=>`\u{9078}\u{629E}\u{3057}\u{305F}\u{65E5}\u{4ED8} : ${args.date}`,
    "selectedRangeDescription": (args)=>`\u{9078}\u{629E}\u{7BC4}\u{56F2} : ${args.dateRange}`,
    "startRangeSelectionPrompt": `\u{30AF}\u{30EA}\u{30C3}\u{30AF}\u{3057}\u{3066}\u{65E5}\u{4ED8}\u{7BC4}\u{56F2}\u{306E}\u{9078}\u{629E}\u{3092}\u{958B}\u{59CB}`,
    "todayDate": (args)=>`\u{672C}\u{65E5}\u{3001}${args.date}`,
    "todayDateSelected": (args)=>`\u{672C}\u{65E5}\u{3001}${args.date} \u{3092}\u{9078}\u{629E}`
};

var $22a5f0623ea73e4f$exports = {};
$22a5f0623ea73e4f$exports = {
    "dateRange": (args)=>`${args.startDate} ~ ${args.endDate}`,
    "dateSelected": (args)=>`${args.date} \u{C120}\u{D0DD}\u{B428}`,
    "finishRangeSelectionPrompt": `\u{B0A0}\u{C9DC} \u{BC94}\u{C704} \u{C120}\u{D0DD}\u{C744} \u{C644}\u{B8CC}\u{D558}\u{B824}\u{BA74} \u{D074}\u{B9AD}\u{D558}\u{C2ED}\u{C2DC}\u{C624}.`,
    "maximumDate": `\u{B9C8}\u{C9C0}\u{B9C9}\u{C73C}\u{B85C} \u{C0AC}\u{C6A9} \u{AC00}\u{B2A5}\u{D55C} \u{C77C}\u{C790}`,
    "minimumDate": `\u{CC98}\u{C74C}\u{C73C}\u{B85C} \u{C0AC}\u{C6A9} \u{AC00}\u{B2A5}\u{D55C} \u{C77C}\u{C790}`,
    "next": `\u{B2E4}\u{C74C}`,
    "previous": `\u{C774}\u{C804}`,
    "selectedDateDescription": (args)=>`\u{C120}\u{D0DD} \u{C77C}\u{C790}: ${args.date}`,
    "selectedRangeDescription": (args)=>`\u{C120}\u{D0DD} \u{BC94}\u{C704}: ${args.dateRange}`,
    "startRangeSelectionPrompt": `\u{B0A0}\u{C9DC} \u{BC94}\u{C704} \u{C120}\u{D0DD}\u{C744} \u{C2DC}\u{C791}\u{D558}\u{B824}\u{BA74} \u{D074}\u{B9AD}\u{D558}\u{C2ED}\u{C2DC}\u{C624}.`,
    "todayDate": (args)=>`\u{C624}\u{B298}, ${args.date}`,
    "todayDateSelected": (args)=>`\u{C624}\u{B298}, ${args.date} \u{C120}\u{D0DD}\u{B428}`
};

var $522380d13d62cba0$exports = {};
$522380d13d62cba0$exports = {
    "dateRange": (args)=>`Nuo ${args.startDate} iki ${args.endDate}`,
    "dateSelected": (args)=>`Pasirinkta ${args.date}`,
    "finishRangeSelectionPrompt": `Spustel\u{117}kite, kad baigtum\u{117}te pasirinkti dat\u{173} interval\u{105}`,
    "maximumDate": `Paskutin\u{117} galima data`,
    "minimumDate": `Pirmoji galima data`,
    "next": `Paskesnis`,
    "previous": `Ankstesnis`,
    "selectedDateDescription": (args)=>`Pasirinkta data: ${args.date}`,
    "selectedRangeDescription": (args)=>`Pasirinktas intervalas: ${args.dateRange}`,
    "startRangeSelectionPrompt": `Spustel\u{117}kite, kad prad\u{117}tum\u{117}te pasirinkti dat\u{173} interval\u{105}`,
    "todayDate": (args)=>`\u{160}iandien, ${args.date}`,
    "todayDateSelected": (args)=>`\u{160}iandien, pasirinkta ${args.date}`
};

var $8a7bc830b2fe6485$exports = {};
$8a7bc830b2fe6485$exports = {
    "dateRange": (args)=>`No ${args.startDate} l\u{12B}dz ${args.endDate}`,
    "dateSelected": (args)=>`Atlas\u{12B}ts: ${args.date}`,
    "finishRangeSelectionPrompt": `Noklik\u{161}\u{137}iniet, lai pabeigtu datumu diapazona atlasi`,
    "maximumDate": `P\u{113}d\u{113}jais pieejamais datums`,
    "minimumDate": `Pirmais pieejamais datums`,
    "next": `T\u{101}l\u{101}k`,
    "previous": `Atpaka\u{13C}`,
    "selectedDateDescription": (args)=>`Atlas\u{12B}tais datums: ${args.date}`,
    "selectedRangeDescription": (args)=>`Atlas\u{12B}tais diapazons: ${args.dateRange}`,
    "startRangeSelectionPrompt": `Noklik\u{161}\u{137}iniet, lai s\u{101}ktu datumu diapazona atlasi`,
    "todayDate": (args)=>`\u{160}odien, ${args.date}`,
    "todayDateSelected": (args)=>`Atlas\u{12B}ta \u{161}odiena, ${args.date}`
};

var $9fac9c044470683b$exports = {};
$9fac9c044470683b$exports = {
    "dateRange": (args)=>`${args.startDate} til ${args.endDate}`,
    "dateSelected": (args)=>`${args.date} valgt`,
    "finishRangeSelectionPrompt": `Klikk for \xe5 fullf\xf8re valg av datoomr\xe5de`,
    "maximumDate": `Siste tilgjengelige dato`,
    "minimumDate": `F\xf8rste tilgjengelige dato`,
    "next": `Neste`,
    "previous": `Forrige`,
    "selectedDateDescription": (args)=>`Valgt dato: ${args.date}`,
    "selectedRangeDescription": (args)=>`Valgt omr\xe5de: ${args.dateRange}`,
    "startRangeSelectionPrompt": `Klikk for \xe5 starte valg av datoomr\xe5de`,
    "todayDate": (args)=>`I dag, ${args.date}`,
    "todayDateSelected": (args)=>`I dag, ${args.date} valgt`
};

var $b127d3569efb1449$exports = {};
$b127d3569efb1449$exports = {
    "dateRange": (args)=>`${args.startDate} tot ${args.endDate}`,
    "dateSelected": (args)=>`${args.date} geselecteerd`,
    "finishRangeSelectionPrompt": `Klik om de selectie van het datumbereik te voltooien`,
    "maximumDate": `Laatste beschikbare datum`,
    "minimumDate": `Eerste beschikbare datum`,
    "next": `Volgende`,
    "previous": `Vorige`,
    "selectedDateDescription": (args)=>`Geselecteerde datum: ${args.date}`,
    "selectedRangeDescription": (args)=>`Geselecteerd bereik: ${args.dateRange}`,
    "startRangeSelectionPrompt": `Klik om het datumbereik te selecteren`,
    "todayDate": (args)=>`Vandaag, ${args.date}`,
    "todayDateSelected": (args)=>`Vandaag, ${args.date} geselecteerd`
};

var $51404a4090633490$exports = {};
$51404a4090633490$exports = {
    "dateRange": (args)=>`${args.startDate} do ${args.endDate}`,
    "dateSelected": (args)=>`Wybrano ${args.date}`,
    "finishRangeSelectionPrompt": `Kliknij, aby zako\u{144}czy\u{107} wyb\xf3r zakresu dat`,
    "maximumDate": `Ostatnia dost\u{119}pna data`,
    "minimumDate": `Pierwsza dost\u{119}pna data`,
    "next": `Dalej`,
    "previous": `Wstecz`,
    "selectedDateDescription": (args)=>`Wybrana data: ${args.date}`,
    "selectedRangeDescription": (args)=>`Wybrany zakres: ${args.dateRange}`,
    "startRangeSelectionPrompt": `Kliknij, aby rozpocz\u{105}\u{107} wyb\xf3r zakresu dat`,
    "todayDate": (args)=>`Dzisiaj, ${args.date}`,
    "todayDateSelected": (args)=>`Dzisiaj wybrano ${args.date}`
};

var $e5e6a3fe3b4527df$exports = {};
$e5e6a3fe3b4527df$exports = {
    "dateRange": (args)=>`${args.startDate} a ${args.endDate}`,
    "dateSelected": (args)=>`${args.date} selecionado`,
    "finishRangeSelectionPrompt": `Clique para concluir a sele\xe7\xe3o do intervalo de datas`,
    "maximumDate": `\xdaltima data dispon\xedvel`,
    "minimumDate": `Primeira data dispon\xedvel`,
    "next": `Pr\xf3ximo`,
    "previous": `Anterior`,
    "selectedDateDescription": (args)=>`Data selecionada: ${args.date}`,
    "selectedRangeDescription": (args)=>`Intervalo selecionado: ${args.dateRange}`,
    "startRangeSelectionPrompt": `Clique para iniciar a sele\xe7\xe3o do intervalo de datas`,
    "todayDate": (args)=>`Hoje, ${args.date}`,
    "todayDateSelected": (args)=>`Hoje, ${args.date} selecionado`
};

var $c519dcadcbb1ee47$exports = {};
$c519dcadcbb1ee47$exports = {
    "dateRange": (args)=>`${args.startDate} a ${args.endDate}`,
    "dateSelected": (args)=>`${args.date} selecionado`,
    "finishRangeSelectionPrompt": `Clique para terminar de selecionar o intervalo de datas`,
    "maximumDate": `\xdaltima data dispon\xedvel`,
    "minimumDate": `Primeira data dispon\xedvel`,
    "next": `Pr\xf3ximo`,
    "previous": `Anterior`,
    "selectedDateDescription": (args)=>`Data selecionada: ${args.date}`,
    "selectedRangeDescription": (args)=>`Intervalo selecionado: ${args.dateRange}`,
    "startRangeSelectionPrompt": `Clique para come\xe7ar a selecionar o intervalo de datas`,
    "todayDate": (args)=>`Hoje, ${args.date}`,
    "todayDateSelected": (args)=>`Hoje, ${args.date} selecionado`
};

var $e5aa0186ca7889c6$exports = {};
$e5aa0186ca7889c6$exports = {
    "dateRange": (args)=>`De la ${args.startDate} p\xe2n\u{103} la ${args.endDate}`,
    "dateSelected": (args)=>`${args.date} selectat\u{103}`,
    "finishRangeSelectionPrompt": `Ap\u{103}sa\u{163}i pentru a finaliza selec\u{163}ia razei pentru dat\u{103}`,
    "maximumDate": `Ultima dat\u{103} disponibil\u{103}`,
    "minimumDate": `Prima dat\u{103} disponibil\u{103}`,
    "next": `Urm\u{103}torul`,
    "previous": `\xcenainte`,
    "selectedDateDescription": (args)=>`Dat\u{103} selectat\u{103}: ${args.date}`,
    "selectedRangeDescription": (args)=>`Interval selectat: ${args.dateRange}`,
    "startRangeSelectionPrompt": `Ap\u{103}sa\u{163}i pentru a \xeencepe selec\u{163}ia razei pentru dat\u{103}`,
    "todayDate": (args)=>`Ast\u{103}zi, ${args.date}`,
    "todayDateSelected": (args)=>`Azi, ${args.date} selectat\u{103}`
};

var $5b907f5fa3eee652$exports = {};
$5b907f5fa3eee652$exports = {
    "dateRange": (args)=>`\u{421} ${args.startDate} \u{43F}\u{43E} ${args.endDate}`,
    "dateSelected": (args)=>`\u{412}\u{44B}\u{431}\u{440}\u{430}\u{43D}\u{43E} ${args.date}`,
    "finishRangeSelectionPrompt": `\u{429}\u{435}\u{43B}\u{43A}\u{43D}\u{438}\u{442}\u{435}, \u{447}\u{442}\u{43E}\u{431}\u{44B} \u{437}\u{430}\u{432}\u{435}\u{440}\u{448}\u{438}\u{442}\u{44C} \u{432}\u{44B}\u{431}\u{43E}\u{440} \u{434}\u{438}\u{430}\u{43F}\u{430}\u{437}\u{43E}\u{43D}\u{430} \u{434}\u{430}\u{442}`,
    "maximumDate": `\u{41F}\u{43E}\u{441}\u{43B}\u{435}\u{434}\u{43D}\u{44F}\u{44F} \u{434}\u{43E}\u{441}\u{442}\u{443}\u{43F}\u{43D}\u{430}\u{44F} \u{434}\u{430}\u{442}\u{430}`,
    "minimumDate": `\u{41F}\u{435}\u{440}\u{432}\u{430}\u{44F} \u{434}\u{43E}\u{441}\u{442}\u{443}\u{43F}\u{43D}\u{430}\u{44F} \u{434}\u{430}\u{442}\u{430}`,
    "next": `\u{414}\u{430}\u{43B}\u{435}\u{435}`,
    "previous": `\u{41D}\u{430}\u{437}\u{430}\u{434}`,
    "selectedDateDescription": (args)=>`\u{412}\u{44B}\u{431}\u{440}\u{430}\u{43D}\u{43D}\u{430}\u{44F} \u{434}\u{430}\u{442}\u{430}: ${args.date}`,
    "selectedRangeDescription": (args)=>`\u{412}\u{44B}\u{431}\u{440}\u{430}\u{43D}\u{43D}\u{44B}\u{439} \u{434}\u{438}\u{430}\u{43F}\u{430}\u{437}\u{43E}\u{43D}: ${args.dateRange}`,
    "startRangeSelectionPrompt": `\u{429}\u{435}\u{43B}\u{43A}\u{43D}\u{438}\u{442}\u{435}, \u{447}\u{442}\u{43E}\u{431}\u{44B} \u{43D}\u{430}\u{447}\u{430}\u{442}\u{44C} \u{432}\u{44B}\u{431}\u{43E}\u{440} \u{434}\u{438}\u{430}\u{43F}\u{430}\u{437}\u{43E}\u{43D}\u{430} \u{434}\u{430}\u{442}`,
    "todayDate": (args)=>`\u{421}\u{435}\u{433}\u{43E}\u{434}\u{43D}\u{44F}, ${args.date}`,
    "todayDateSelected": (args)=>`\u{421}\u{435}\u{433}\u{43E}\u{434}\u{43D}\u{44F}, \u{432}\u{44B}\u{431}\u{440}\u{430}\u{43D}\u{43E} ${args.date}`
};

var $1b4c51359c99cf79$exports = {};
$1b4c51359c99cf79$exports = {
    "dateRange": (args)=>`Od ${args.startDate} do ${args.endDate}`,
    "dateSelected": (args)=>`Vybrat\xfd d\xe1tum ${args.date}`,
    "finishRangeSelectionPrompt": `Kliknut\xedm dokon\u{10D}\xedte v\xfdber rozsahu d\xe1tumov`,
    "maximumDate": `Posledn\xfd dostupn\xfd d\xe1tum`,
    "minimumDate": `Prv\xfd dostupn\xfd d\xe1tum`,
    "next": `Nasleduj\xface`,
    "previous": `Predch\xe1dzaj\xface`,
    "selectedDateDescription": (args)=>`Vybrat\xfd d\xe1tum: ${args.date}`,
    "selectedRangeDescription": (args)=>`Vybrat\xfd rozsah: ${args.dateRange}`,
    "startRangeSelectionPrompt": `Kliknut\xedm spust\xedte v\xfdber rozsahu d\xe1tumov`,
    "todayDate": (args)=>`Dnes ${args.date}`,
    "todayDateSelected": (args)=>`Vybrat\xfd dne\u{161}n\xfd d\xe1tum ${args.date}`
};

var $02e4e6a4608cc6f3$exports = {};
$02e4e6a4608cc6f3$exports = {
    "dateRange": (args)=>`${args.startDate} do ${args.endDate}`,
    "dateSelected": (args)=>`${args.date} izbrano`,
    "finishRangeSelectionPrompt": `Kliknite za dokon\u{10D}anje izbire datumskega obsega`,
    "maximumDate": `Zadnji razpolo\u{17E}ljivi datum`,
    "minimumDate": `Prvi razpolo\u{17E}ljivi datum`,
    "next": `Naprej`,
    "previous": `Nazaj`,
    "selectedDateDescription": (args)=>`Izbrani datum: ${args.date}`,
    "selectedRangeDescription": (args)=>`Izbrano obmo\u{10D}je: ${args.dateRange}`,
    "startRangeSelectionPrompt": `Kliknite za za\u{10D}etek izbire datumskega obsega`,
    "todayDate": (args)=>`Danes, ${args.date}`,
    "todayDateSelected": (args)=>`Danes, ${args.date} izbrano`
};

var $6dd2fbaad93b6878$exports = {};
$6dd2fbaad93b6878$exports = {
    "dateRange": (args)=>`${args.startDate} do ${args.endDate}`,
    "dateSelected": (args)=>`${args.date} izabran`,
    "finishRangeSelectionPrompt": `Kliknite da dovr\u{161}ite opseg izabranih datuma`,
    "maximumDate": `Zadnji raspolo\u{17E}ivi datum`,
    "minimumDate": `Prvi raspolo\u{17E}ivi datum`,
    "next": `Slede\u{107}i`,
    "previous": `Prethodni`,
    "selectedDateDescription": (args)=>`Izabrani datum: ${args.date}`,
    "selectedRangeDescription": (args)=>`Izabrani period: ${args.dateRange}`,
    "startRangeSelectionPrompt": `Kliknite da zapo\u{10D}nete opseg izabranih datuma`,
    "todayDate": (args)=>`Danas, ${args.date}`,
    "todayDateSelected": (args)=>`Danas, izabran ${args.date}`
};

var $33ea59bfe6e804e0$exports = {};
$33ea59bfe6e804e0$exports = {
    "dateRange": (args)=>`${args.startDate} till ${args.endDate}`,
    "dateSelected": (args)=>`${args.date} har valts`,
    "finishRangeSelectionPrompt": `Klicka f\xf6r att avsluta val av datumintervall`,
    "maximumDate": `Sista tillg\xe4ngliga datum`,
    "minimumDate": `F\xf6rsta tillg\xe4ngliga datum`,
    "next": `N\xe4sta`,
    "previous": `F\xf6reg\xe5ende`,
    "selectedDateDescription": (args)=>`Valt datum: ${args.date}`,
    "selectedRangeDescription": (args)=>`Valt intervall: ${args.dateRange}`,
    "startRangeSelectionPrompt": `Klicka f\xf6r att v\xe4lja datumintervall`,
    "todayDate": (args)=>`Idag, ${args.date}`,
    "todayDateSelected": (args)=>`Idag, ${args.date} har valts`
};

var $4603b0d0246969b2$exports = {};
$4603b0d0246969b2$exports = {
    "dateRange": (args)=>`${args.startDate} - ${args.endDate}`,
    "dateSelected": (args)=>`${args.date} se\xe7ildi`,
    "finishRangeSelectionPrompt": `Tarih aral\u{131}\u{11F}\u{131} se\xe7imini tamamlamak i\xe7in t\u{131}klay\u{131}n`,
    "maximumDate": `Son m\xfcsait tarih`,
    "minimumDate": `\u{130}lk m\xfcsait tarih`,
    "next": `Sonraki`,
    "previous": `\xd6nceki`,
    "selectedDateDescription": (args)=>`Se\xe7ilen Tarih: ${args.date}`,
    "selectedRangeDescription": (args)=>`Se\xe7ilen Aral\u{131}k: ${args.dateRange}`,
    "startRangeSelectionPrompt": `Tarih aral\u{131}\u{11F}\u{131} se\xe7imini ba\u{15F}latmak i\xe7in t\u{131}klay\u{131}n`,
    "todayDate": (args)=>`Bug\xfcn, ${args.date}`,
    "todayDateSelected": (args)=>`Bug\xfcn, ${args.date} se\xe7ildi`
};

var $82649816f530bb1b$exports = {};
$82649816f530bb1b$exports = {
    "dateRange": (args)=>`${args.startDate} \u{2014} ${args.endDate}`,
    "dateSelected": (args)=>`\u{412}\u{438}\u{431}\u{440}\u{430}\u{43D}\u{43E} ${args.date}`,
    "finishRangeSelectionPrompt": `\u{41D}\u{430}\u{442}\u{438}\u{441}\u{43D}\u{456}\u{442}\u{44C}, \u{449}\u{43E}\u{431} \u{437}\u{430}\u{432}\u{435}\u{440}\u{448}\u{438}\u{442}\u{438} \u{432}\u{438}\u{431}\u{456}\u{440} \u{434}\u{456}\u{430}\u{43F}\u{430}\u{437}\u{43E}\u{43D}\u{443} \u{434}\u{430}\u{442}`,
    "maximumDate": `\u{41E}\u{441}\u{442}\u{430}\u{43D}\u{43D}\u{44F} \u{434}\u{43E}\u{441}\u{442}\u{443}\u{43F}\u{43D}\u{430} \u{434}\u{430}\u{442}\u{430}`,
    "minimumDate": `\u{41F}\u{435}\u{440}\u{448}\u{430} \u{434}\u{43E}\u{441}\u{442}\u{443}\u{43F}\u{43D}\u{430} \u{434}\u{430}\u{442}\u{430}`,
    "next": `\u{41D}\u{430}\u{441}\u{442}\u{443}\u{43F}\u{43D}\u{438}\u{439}`,
    "previous": `\u{41F}\u{43E}\u{43F}\u{435}\u{440}\u{435}\u{434}\u{43D}\u{456}\u{439}`,
    "selectedDateDescription": (args)=>`\u{412}\u{438}\u{431}\u{440}\u{430}\u{43D}\u{430} \u{434}\u{430}\u{442}\u{430}: ${args.date}`,
    "selectedRangeDescription": (args)=>`\u{412}\u{438}\u{431}\u{440}\u{430}\u{43D}\u{438}\u{439} \u{434}\u{456}\u{430}\u{43F}\u{430}\u{437}\u{43E}\u{43D}: ${args.dateRange}`,
    "startRangeSelectionPrompt": `\u{41D}\u{430}\u{442}\u{438}\u{441}\u{43D}\u{456}\u{442}\u{44C}, \u{449}\u{43E}\u{431} \u{43F}\u{43E}\u{447}\u{430}\u{442}\u{438} \u{432}\u{438}\u{431}\u{456}\u{440} \u{434}\u{456}\u{430}\u{43F}\u{430}\u{437}\u{43E}\u{43D}\u{443} \u{434}\u{430}\u{442}`,
    "todayDate": (args)=>`\u{421}\u{44C}\u{43E}\u{433}\u{43E}\u{434}\u{43D}\u{456}, ${args.date}`,
    "todayDateSelected": (args)=>`\u{421}\u{44C}\u{43E}\u{433}\u{43E}\u{434}\u{43D}\u{456}, \u{432}\u{438}\u{431}\u{440}\u{430}\u{43D}\u{43E} ${args.date}`
};

var $628e140a43dfb330$exports = {};
$628e140a43dfb330$exports = {
    "dateRange": (args)=>`${args.startDate} \u{81F3} ${args.endDate}`,
    "dateSelected": (args)=>`\u{5DF2}\u{9009}\u{62E9} ${args.date}`,
    "finishRangeSelectionPrompt": `\u{5355}\u{51FB}\u{4EE5}\u{5B8C}\u{6210}\u{9009}\u{62E9}\u{65E5}\u{671F}\u{8303}\u{56F4}`,
    "maximumDate": `\u{6700}\u{540E}\u{4E00}\u{4E2A}\u{53EF}\u{7528}\u{65E5}\u{671F}`,
    "minimumDate": `\u{7B2C}\u{4E00}\u{4E2A}\u{53EF}\u{7528}\u{65E5}\u{671F}`,
    "next": `\u{4E0B}\u{4E00}\u{9875}`,
    "previous": `\u{4E0A}\u{4E00}\u{9875}`,
    "selectedDateDescription": (args)=>`\u{9009}\u{5B9A}\u{7684}\u{65E5}\u{671F}\u{FF1A}${args.date}`,
    "selectedRangeDescription": (args)=>`\u{9009}\u{5B9A}\u{7684}\u{8303}\u{56F4}\u{FF1A}${args.dateRange}`,
    "startRangeSelectionPrompt": `\u{5355}\u{51FB}\u{4EE5}\u{5F00}\u{59CB}\u{9009}\u{62E9}\u{65E5}\u{671F}\u{8303}\u{56F4}`,
    "todayDate": (args)=>`\u{4ECA}\u{5929}\u{FF0C}\u{5373} ${args.date}`,
    "todayDateSelected": (args)=>`\u{5DF2}\u{9009}\u{62E9}\u{4ECA}\u{5929}\u{FF0C}\u{5373} ${args.date}`
};

var $745937250cd4679c$exports = {};
$745937250cd4679c$exports = {
    "dateRange": (args)=>`${args.startDate} \u{81F3} ${args.endDate}`,
    "dateSelected": (args)=>`\u{5DF2}\u{9078}\u{53D6} ${args.date}`,
    "finishRangeSelectionPrompt": `\u{6309}\u{4E00}\u{4E0B}\u{4EE5}\u{5B8C}\u{6210}\u{9078}\u{53D6}\u{65E5}\u{671F}\u{7BC4}\u{570D}`,
    "maximumDate": `\u{6700}\u{5F8C}\u{4E00}\u{500B}\u{53EF}\u{7528}\u{65E5}\u{671F}`,
    "minimumDate": `\u{7B2C}\u{4E00}\u{500B}\u{53EF}\u{7528}\u{65E5}\u{671F}`,
    "next": `\u{4E0B}\u{4E00}\u{9801}`,
    "previous": `\u{4E0A}\u{4E00}\u{9801}`,
    "selectedDateDescription": (args)=>`\u{9078}\u{5B9A}\u{7684}\u{65E5}\u{671F}\u{FF1A}${args.date}`,
    "selectedRangeDescription": (args)=>`\u{9078}\u{5B9A}\u{7684}\u{7BC4}\u{570D}\u{FF1A}${args.dateRange}`,
    "startRangeSelectionPrompt": `\u{6309}\u{4E00}\u{4E0B}\u{4EE5}\u{958B}\u{59CB}\u{9078}\u{53D6}\u{65E5}\u{671F}\u{7BC4}\u{570D}`,
    "todayDate": (args)=>`\u{4ECA}\u{5929}\u{FF0C}${args.date}`,
    "todayDateSelected": (args)=>`\u{5DF2}\u{9078}\u{53D6}\u{4ECA}\u{5929}\u{FF0C}${args.date}`
};

var $3904726b442bd9b2$exports = {};


































$3904726b442bd9b2$exports = {
    "ar-AE": $39324ace0d945f59$exports,
    "bg-BG": $1830a539e98c7baf$exports,
    "cs-CZ": $f4b92528965aab97$exports,
    "da-DK": $1cd578ef0547c8f1$exports,
    "de-DE": $db55a8973925d619$exports,
    "el-GR": $ec6937d58566d443$exports,
    "en-US": $1f5cea0742dc284a$exports,
    "es-ES": $2ca7ea366384817b$exports,
    "et-EE": $97874a7fe9cd091f$exports,
    "fi-FI": $5d376b7fce1a45b2$exports,
    "fr-FR": $3bf722b362aaf54d$exports,
    "he-IL": $38c43f8322316031$exports,
    "hr-HR": $c90e0f32b44630bf$exports,
    "hu-HU": $715875e6e7a338f4$exports,
    "it-IT": $37d77c66e34daccf$exports,
    "ja-JP": $542f39aee29303c3$exports,
    "ko-KR": $22a5f0623ea73e4f$exports,
    "lt-LT": $522380d13d62cba0$exports,
    "lv-LV": $8a7bc830b2fe6485$exports,
    "nb-NO": $9fac9c044470683b$exports,
    "nl-NL": $b127d3569efb1449$exports,
    "pl-PL": $51404a4090633490$exports,
    "pt-BR": $e5e6a3fe3b4527df$exports,
    "pt-PT": $c519dcadcbb1ee47$exports,
    "ro-RO": $e5aa0186ca7889c6$exports,
    "ru-RU": $5b907f5fa3eee652$exports,
    "sk-SK": $1b4c51359c99cf79$exports,
    "sl-SI": $02e4e6a4608cc6f3$exports,
    "sr-SP": $6dd2fbaad93b6878$exports,
    "sv-SE": $33ea59bfe6e804e0$exports,
    "tr-TR": $4603b0d0246969b2$exports,
    "uk-UA": $82649816f530bb1b$exports,
    "zh-CN": $628e140a43dfb330$exports,
    "zh-TW": $745937250cd4679c$exports
};

function $parcel$interopDefault$p(a) {
  return a && a.__esModule ? a.default : a;
}
/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 



const $a074e1e2d0f0a665$export$653eddfc964b0f8a = new WeakMap();
function $a074e1e2d0f0a665$export$134cbb7fb09a9522(date) {
    return (date === null || date === void 0 ? void 0 : date.calendar.identifier) === 'gregory' && date.era === 'BC' ? 'short' : undefined;
}
function $a074e1e2d0f0a665$export$b6df97c887c38e1a(state) {
    let stringFormatter = ($fca6afa0e843324b$export$f12b703ca79dfbb1)((($parcel$interopDefault$p($3904726b442bd9b2$exports))), '@react-aria/calendar');
    let start, end;
    if ('highlightedRange' in state) ({ start: start, end: end } = state.highlightedRange || {});
    else start = end = state.value;
    let dateFormatter = ($896ba0a80a8f4d36$export$85fd5fdf27bacc79)({
        weekday: 'long',
        month: 'long',
        year: 'numeric',
        day: 'numeric',
        era: $a074e1e2d0f0a665$export$134cbb7fb09a9522(start) || $a074e1e2d0f0a665$export$134cbb7fb09a9522(end),
        timeZone: state.timeZone
    });
    let anchorDate = 'anchorDate' in state ? state.anchorDate : null;
    return (reactExports.useMemo)(()=>{
        // No message if currently selecting a range, or there is nothing highlighted.
        if (!anchorDate && start && end) {
            // Use a single date message if the start and end dates are the same day,
            // otherwise include both dates.
            if (($14e0f24ef4ac5c92$export$ea39ec197993aef0)(start, end)) {
                let date = dateFormatter.format(start.toDate(state.timeZone));
                return stringFormatter.format('selectedDateDescription', {
                    date: date
                });
            } else {
                let dateRange = $a074e1e2d0f0a665$var$formatRange(dateFormatter, stringFormatter, start, end, state.timeZone);
                return stringFormatter.format('selectedRangeDescription', {
                    dateRange: dateRange
                });
            }
        }
        return '';
    }, [
        start,
        end,
        anchorDate,
        state.timeZone,
        stringFormatter,
        dateFormatter
    ]);
}
function $a074e1e2d0f0a665$export$31afe65d91ef6e8(startDate, endDate, timeZone, isAria) {
    let stringFormatter = ($fca6afa0e843324b$export$f12b703ca79dfbb1)((($parcel$interopDefault$p($3904726b442bd9b2$exports))), '@react-aria/calendar');
    let era = $a074e1e2d0f0a665$export$134cbb7fb09a9522(startDate) || $a074e1e2d0f0a665$export$134cbb7fb09a9522(endDate);
    let monthFormatter = ($896ba0a80a8f4d36$export$85fd5fdf27bacc79)({
        month: 'long',
        year: 'numeric',
        era: era,
        calendar: startDate.calendar.identifier,
        timeZone: timeZone
    });
    let dateFormatter = ($896ba0a80a8f4d36$export$85fd5fdf27bacc79)({
        month: 'long',
        year: 'numeric',
        day: 'numeric',
        era: era,
        calendar: startDate.calendar.identifier,
        timeZone: timeZone
    });
    return (reactExports.useMemo)(()=>{
        // Special case for month granularity. Format as a single month if only a
        // single month is visible, otherwise format as a range of months.
        if (($14e0f24ef4ac5c92$export$ea39ec197993aef0)(startDate, ($14e0f24ef4ac5c92$export$a5a3b454ada2268e)(startDate))) {
            if (($14e0f24ef4ac5c92$export$ea39ec197993aef0)(endDate, ($14e0f24ef4ac5c92$export$a2258d9c4118825c)(startDate))) return monthFormatter.format(startDate.toDate(timeZone));
            else if (($14e0f24ef4ac5c92$export$ea39ec197993aef0)(endDate, ($14e0f24ef4ac5c92$export$a2258d9c4118825c)(endDate))) return isAria ? $a074e1e2d0f0a665$var$formatRange(monthFormatter, stringFormatter, startDate, endDate, timeZone) : monthFormatter.formatRange(startDate.toDate(timeZone), endDate.toDate(timeZone));
        }
        return isAria ? $a074e1e2d0f0a665$var$formatRange(dateFormatter, stringFormatter, startDate, endDate, timeZone) : dateFormatter.formatRange(startDate.toDate(timeZone), endDate.toDate(timeZone));
    }, [
        startDate,
        endDate,
        monthFormatter,
        dateFormatter,
        stringFormatter,
        timeZone,
        isAria
    ]);
}
function $a074e1e2d0f0a665$var$formatRange(dateFormatter, stringFormatter, start, end, timeZone) {
    let parts = dateFormatter.formatRangeToParts(start.toDate(timeZone), end.toDate(timeZone));
    // Find the separator between the start and end date. This is determined
    // by finding the last shared literal before the end range.
    let separatorIndex = -1;
    for(let i = 0; i < parts.length; i++){
        let part = parts[i];
        if (part.source === 'shared' && part.type === 'literal') separatorIndex = i;
        else if (part.source === 'endRange') break;
    }
    // Now we can combine the parts into start and end strings.
    let startValue = '';
    let endValue = '';
    for(let i = 0; i < parts.length; i++){
        if (i < separatorIndex) startValue += parts[i].value;
        else if (i > separatorIndex) endValue += parts[i].value;
    }
    return stringFormatter.format('dateRange', {
        startDate: startValue,
        endDate: endValue
    });
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ /* Inspired by https://github.com/AlmeroSteyn/react-aria-live */ const $319e236875307eab$var$LIVEREGION_TIMEOUT_DELAY = 7000;
let $319e236875307eab$var$liveAnnouncer = null;
function $319e236875307eab$export$a9b970dcc4ae71a9(message, assertiveness = 'assertive', timeout = $319e236875307eab$var$LIVEREGION_TIMEOUT_DELAY) {
    if (!$319e236875307eab$var$liveAnnouncer) $319e236875307eab$var$liveAnnouncer = new $319e236875307eab$var$LiveAnnouncer();
    $319e236875307eab$var$liveAnnouncer.announce(message, assertiveness, timeout);
}
function $319e236875307eab$export$d10ae4f68404609a(assertiveness) {
    if ($319e236875307eab$var$liveAnnouncer) $319e236875307eab$var$liveAnnouncer.clear(assertiveness);
}
// LiveAnnouncer is implemented using vanilla DOM, not React. That's because as of React 18
// ReactDOM.render is deprecated, and the replacement, ReactDOM.createRoot is moved into a
// subpath import `react-dom/client`. That makes it hard for us to support multiple React versions.
// As a global API, we can't use portals without introducing a breaking API change. LiveAnnouncer
// is simple enough to implement without React, so that's what we do here.
// See this discussion for more details: https://github.com/reactwg/react-18/discussions/125#discussioncomment-2382638
class $319e236875307eab$var$LiveAnnouncer {
    createLog(ariaLive) {
        let node = document.createElement('div');
        node.setAttribute('role', 'log');
        node.setAttribute('aria-live', ariaLive);
        node.setAttribute('aria-relevant', 'additions');
        return node;
    }
    destroy() {
        if (!this.node) return;
        document.body.removeChild(this.node);
        this.node = null;
    }
    announce(message, assertiveness = 'assertive', timeout = $319e236875307eab$var$LIVEREGION_TIMEOUT_DELAY) {
        if (!this.node) return;
        let node = document.createElement('div');
        node.textContent = message;
        if (assertiveness === 'assertive') this.assertiveLog.appendChild(node);
        else this.politeLog.appendChild(node);
        if (message !== '') setTimeout(()=>{
            node.remove();
        }, timeout);
    }
    clear(assertiveness) {
        if (!this.node) return;
        if (!assertiveness || assertiveness === 'assertive') this.assertiveLog.innerHTML = '';
        if (!assertiveness || assertiveness === 'polite') this.politeLog.innerHTML = '';
    }
    constructor(){
        this.node = document.createElement('div');
        this.node.dataset.liveAnnouncer = 'true';
        // copied from VisuallyHidden
        Object.assign(this.node.style, {
            border: 0,
            clip: 'rect(0 0 0 0)',
            clipPath: 'inset(50%)',
            height: '1px',
            margin: '-1px',
            overflow: 'hidden',
            padding: 0,
            position: 'absolute',
            width: '1px',
            whiteSpace: 'nowrap'
        });
        this.assertiveLog = this.createLog('assertive');
        this.node.appendChild(this.assertiveLog);
        this.politeLog = this.createLog('polite');
        this.node.appendChild(this.politeLog);
        document.body.prepend(this.node);
    }
}

function $parcel$interopDefault$o(a) {
  return a && a.__esModule ? a.default : a;
}
/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 





function $c4acc1de3ab169cf$export$d652b3ea2d672d5b(props, state) {
    let stringFormatter = ($fca6afa0e843324b$export$f12b703ca79dfbb1)((($parcel$interopDefault$o($3904726b442bd9b2$exports))), '@react-aria/calendar');
    let domProps = ($65484d02dcb7eb3e$export$457c3d6518dd4c6f)(props);
    let title = ($a074e1e2d0f0a665$export$31afe65d91ef6e8)(state.visibleRange.start, state.visibleRange.end, state.timeZone, false);
    let visibleRangeDescription = ($a074e1e2d0f0a665$export$31afe65d91ef6e8)(state.visibleRange.start, state.visibleRange.end, state.timeZone, true);
    // Announce when the visible date range changes
    ($4f58c5f72bcf79f7$export$496315a1608d9602)(()=>{
        // only when pressing the Previous or Next button
        if (!state.isFocused) ($319e236875307eab$export$a9b970dcc4ae71a9)(visibleRangeDescription);
    }, [
        visibleRangeDescription
    ]);
    // Announce when the selected value changes
    let selectedDateDescription = ($a074e1e2d0f0a665$export$b6df97c887c38e1a)(state);
    ($4f58c5f72bcf79f7$export$496315a1608d9602)(()=>{
        if (selectedDateDescription) ($319e236875307eab$export$a9b970dcc4ae71a9)(selectedDateDescription, 'polite', 4000);
    // handle an update to the caption that describes the currently selected range, to announce the new value
    }, [
        selectedDateDescription
    ]);
    let errorMessageId = ($bdb11010cef70236$export$b4cc09c592e8fdb8)([
        Boolean(props.errorMessage),
        props.isInvalid,
        props.validationState
    ]);
    // Pass the label to the child grid elements.
    ($a074e1e2d0f0a665$export$653eddfc964b0f8a).set(state, {
        ariaLabel: props['aria-label'],
        ariaLabelledBy: props['aria-labelledby'],
        errorMessageId: errorMessageId,
        selectedDateDescription: selectedDateDescription
    });
    // If the next or previous buttons become disabled while they are focused, move focus to the calendar body.
    let [nextFocused, setNextFocused] = (reactExports.useState)(false);
    let nextDisabled = props.isDisabled || state.isNextVisibleRangeInvalid();
    if (nextDisabled && nextFocused) {
        setNextFocused(false);
        state.setFocused(true);
    }
    let [previousFocused, setPreviousFocused] = (reactExports.useState)(false);
    let previousDisabled = props.isDisabled || state.isPreviousVisibleRangeInvalid();
    if (previousDisabled && previousFocused) {
        setPreviousFocused(false);
        state.setFocused(true);
    }
    let labelProps = ($313b98861ee5dd6c$export$d6875122194c7b44)({
        id: props['id'],
        'aria-label': [
            props['aria-label'],
            visibleRangeDescription
        ].filter(Boolean).join(', '),
        'aria-labelledby': props['aria-labelledby']
    });
    return {
        calendarProps: ($3ef42575df84b30b$export$9d1611c77c2fe928)(domProps, labelProps, {
            role: 'application',
            'aria-describedby': props['aria-describedby'] || undefined
        }),
        nextButtonProps: {
            onPress: ()=>state.focusNextPage(),
            'aria-label': stringFormatter.format('next'),
            isDisabled: nextDisabled,
            onFocusChange: setNextFocused
        },
        prevButtonProps: {
            onPress: ()=>state.focusPreviousPage(),
            'aria-label': stringFormatter.format('previous'),
            isDisabled: previousDisabled,
            onFocusChange: setPreviousFocused
        },
        errorMessageProps: {
            id: errorMessageId
        },
        title: title
    };
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 
function $9942cad8a072a530$export$3ee915f8151bd4f1(props, state) {
    return ($c4acc1de3ab169cf$export$d652b3ea2d672d5b)(props, state);
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 


function $46a4342aab3d8076$export$87e0539f600c24e5(props, state, ref) {
    let res = ($c4acc1de3ab169cf$export$d652b3ea2d672d5b)(props, state);
    // We need to ignore virtual pointer events from VoiceOver due to these bugs.
    // https://bugs.webkit.org/show_bug.cgi?id=222627
    // https://bugs.webkit.org/show_bug.cgi?id=223202
    // usePress also does this and waits for the following click event before firing.
    // We need to match that here otherwise this will fire before the press event in
    // useCalendarCell, causing range selection to not work properly.
    let isVirtualClick = (reactExports.useRef)(false);
    let windowRef = (reactExports.useRef)(typeof window !== 'undefined' ? window : null);
    ($e9faafb641e167db$export$90fc3a17d93f704c)(windowRef, 'pointerdown', (e)=>{
        isVirtualClick.current = e.width === 0 && e.height === 0;
    });
    // Stop range selection when pressing or releasing a pointer outside the calendar body,
    // except when pressing the next or previous buttons to switch months.
    let endDragging = (e)=>{
        if (isVirtualClick.current) {
            isVirtualClick.current = false;
            return;
        }
        state.setDragging(false);
        if (!state.anchorDate) return;
        let target = e.target;
        if (ref.current && ref.current.contains(document.activeElement) && (!ref.current.contains(target) || !target.closest('button, [role="button"]'))) state.selectFocusedDate();
    };
    ($e9faafb641e167db$export$90fc3a17d93f704c)(windowRef, 'pointerup', endDragging);
    // Also stop range selection on blur, e.g. tabbing away from the calendar.
    res.calendarProps.onBlur = (e)=>{
        if (!ref.current) return;
        if ((!e.relatedTarget || !ref.current.contains(e.relatedTarget)) && state.anchorDate) state.selectFocusedDate();
    };
    // Prevent touch scrolling while dragging
    ($e9faafb641e167db$export$90fc3a17d93f704c)(ref, 'touchmove', (e)=>{
        if (state.isDragging) e.preventDefault();
    }, {
        passive: false,
        capture: true
    });
    return res;
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 




function $e3031d1f8c9d64eb$export$cb95147730a423f5(props, state) {
    let { startDate: startDate = state.visibleRange.start, endDate: endDate = state.visibleRange.end } = props;
    let { direction: direction } = ($18f2051aff69b9bf$export$43bb16f9c6d9e3f7)();
    let onKeyDown = (e)=>{
        switch(e.key){
            case 'Enter':
            case ' ':
                e.preventDefault();
                state.selectFocusedDate();
                break;
            case 'PageUp':
                e.preventDefault();
                e.stopPropagation();
                state.focusPreviousSection(e.shiftKey);
                break;
            case 'PageDown':
                e.preventDefault();
                e.stopPropagation();
                state.focusNextSection(e.shiftKey);
                break;
            case 'End':
                e.preventDefault();
                e.stopPropagation();
                state.focusSectionEnd();
                break;
            case 'Home':
                e.preventDefault();
                e.stopPropagation();
                state.focusSectionStart();
                break;
            case 'ArrowLeft':
                e.preventDefault();
                e.stopPropagation();
                if (direction === 'rtl') state.focusNextDay();
                else state.focusPreviousDay();
                break;
            case 'ArrowUp':
                e.preventDefault();
                e.stopPropagation();
                state.focusPreviousRow();
                break;
            case 'ArrowRight':
                e.preventDefault();
                e.stopPropagation();
                if (direction === 'rtl') state.focusPreviousDay();
                else state.focusNextDay();
                break;
            case 'ArrowDown':
                e.preventDefault();
                e.stopPropagation();
                state.focusNextRow();
                break;
            case 'Escape':
                // Cancel the selection.
                if ('setAnchorDate' in state) {
                    e.preventDefault();
                    state.setAnchorDate(null);
                }
                break;
        }
    };
    let visibleRangeDescription = ($a074e1e2d0f0a665$export$31afe65d91ef6e8)(startDate, endDate, state.timeZone, true);
    let { ariaLabel: ariaLabel, ariaLabelledBy: ariaLabelledBy } = ($a074e1e2d0f0a665$export$653eddfc964b0f8a).get(state);
    let labelProps = ($313b98861ee5dd6c$export$d6875122194c7b44)({
        'aria-label': [
            ariaLabel,
            visibleRangeDescription
        ].filter(Boolean).join(', '),
        'aria-labelledby': ariaLabelledBy
    });
    let dayFormatter = ($896ba0a80a8f4d36$export$85fd5fdf27bacc79)({
        weekday: props.weekdayStyle || 'narrow',
        timeZone: state.timeZone
    });
    let { locale: locale } = ($18f2051aff69b9bf$export$43bb16f9c6d9e3f7)();
    let weekDays = (reactExports.useMemo)(()=>{
        let weekStart = ($14e0f24ef4ac5c92$export$42c81a444fbfb5d4)(($14e0f24ef4ac5c92$export$d0bdf45af03a6ea3)(state.timeZone), locale);
        return [
            ...new Array(7).keys()
        ].map((index)=>{
            let date = weekStart.add({
                days: index
            });
            let dateDay = date.toDate(state.timeZone);
            return dayFormatter.format(dateDay);
        });
    }, [
        locale,
        state.timeZone,
        dayFormatter
    ]);
    return {
        gridProps: ($3ef42575df84b30b$export$9d1611c77c2fe928)(labelProps, {
            role: 'grid',
            'aria-readonly': state.isReadOnly || null,
            'aria-disabled': state.isDisabled || null,
            'aria-multiselectable': 'highlightedRange' in state || undefined,
            onKeyDown: onKeyDown,
            onFocus: ()=>state.setFocused(true),
            onBlur: ()=>state.setFocused(false)
        }),
        headerProps: {
            // Column headers are hidden to screen readers to make navigating with a touch screen reader easier.
            // The day names are already included in the label of each cell, so there's no need to announce them twice.
            'aria-hidden': true
        },
        weekDays: weekDays
    };
}

function $parcel$interopDefault$n(a) {
  return a && a.__esModule ? a.default : a;
}
/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 






function $36a0ac60f04457c5$export$136073280381448e(props, state, ref) {
    let { date: date, isDisabled: isDisabled } = props;
    let { errorMessageId: errorMessageId, selectedDateDescription: selectedDateDescription } = ($a074e1e2d0f0a665$export$653eddfc964b0f8a).get(state);
    let stringFormatter = ($fca6afa0e843324b$export$f12b703ca79dfbb1)((($parcel$interopDefault$n($3904726b442bd9b2$exports))), '@react-aria/calendar');
    let dateFormatter = ($896ba0a80a8f4d36$export$85fd5fdf27bacc79)({
        weekday: 'long',
        day: 'numeric',
        month: 'long',
        year: 'numeric',
        era: ($a074e1e2d0f0a665$export$134cbb7fb09a9522)(date),
        timeZone: state.timeZone
    });
    let isSelected = state.isSelected(date);
    let isFocused = state.isCellFocused(date);
    isDisabled = isDisabled || state.isCellDisabled(date);
    let isUnavailable = state.isCellUnavailable(date);
    let isSelectable = !isDisabled && !isUnavailable;
    let isInvalid = state.isValueInvalid && ('highlightedRange' in state ? !state.anchorDate && state.highlightedRange && date.compare(state.highlightedRange.start) >= 0 && date.compare(state.highlightedRange.end) <= 0 : state.value && ($14e0f24ef4ac5c92$export$ea39ec197993aef0)(state.value, date));
    if (isInvalid) isSelected = true;
    // For performance, reuse the same date object as before if the new date prop is the same.
    // This allows subsequent useMemo results to be reused.
    date = ($5a387cc49350e6db$export$722debc0e56fea39)(date, ($14e0f24ef4ac5c92$export$91b62ebf2ba703ee));
    let nativeDate = (reactExports.useMemo)(()=>date.toDate(state.timeZone), [
        date,
        state.timeZone
    ]);
    // aria-label should be localize Day of week, Month, Day and Year without Time.
    let isDateToday = ($14e0f24ef4ac5c92$export$629b0a497aa65267)(date, state.timeZone);
    let label = (reactExports.useMemo)(()=>{
        let label = '';
        // If this is a range calendar, add a description of the full selected range
        // to the first and last selected date.
        if ('highlightedRange' in state && state.value && !state.anchorDate && (($14e0f24ef4ac5c92$export$ea39ec197993aef0)(date, state.value.start) || ($14e0f24ef4ac5c92$export$ea39ec197993aef0)(date, state.value.end))) label = selectedDateDescription + ', ';
        label += dateFormatter.format(nativeDate);
        if (isDateToday) // If date is today, set appropriate string depending on selected state:
        label = stringFormatter.format(isSelected ? 'todayDateSelected' : 'todayDate', {
            date: label
        });
        else if (isSelected) // If date is selected but not today:
        label = stringFormatter.format('dateSelected', {
            date: label
        });
        if (state.minValue && ($14e0f24ef4ac5c92$export$ea39ec197993aef0)(date, state.minValue)) label += ', ' + stringFormatter.format('minimumDate');
        else if (state.maxValue && ($14e0f24ef4ac5c92$export$ea39ec197993aef0)(date, state.maxValue)) label += ', ' + stringFormatter.format('maximumDate');
        return label;
    }, [
        dateFormatter,
        nativeDate,
        stringFormatter,
        isSelected,
        isDateToday,
        date,
        state,
        selectedDateDescription
    ]);
    // When a cell is focused and this is a range calendar, add a prompt to help
    // screenreader users know that they are in a range selection mode.
    let rangeSelectionPrompt = '';
    if ('anchorDate' in state && isFocused && !state.isReadOnly && isSelectable) {
        // If selection has started add "click to finish selecting range"
        if (state.anchorDate) rangeSelectionPrompt = stringFormatter.format('finishRangeSelectionPrompt');
        else rangeSelectionPrompt = stringFormatter.format('startRangeSelectionPrompt');
    }
    let descriptionProps = ($ef06256079686ba0$export$f8aeda7b10753fa1)(rangeSelectionPrompt);
    let isAnchorPressed = (reactExports.useRef)(false);
    let isRangeBoundaryPressed = (reactExports.useRef)(false);
    let touchDragTimerRef = (reactExports.useRef)(null);
    let { pressProps: pressProps, isPressed: isPressed } = ($f6c31cce2adf654f$export$45712eceda6fad21)({
        // When dragging to select a range, we don't want dragging over the original anchor
        // again to trigger onPressStart. Cancel presses immediately when the pointer exits.
        shouldCancelOnPointerExit: 'anchorDate' in state && !!state.anchorDate,
        preventFocusOnPress: true,
        isDisabled: !isSelectable || state.isReadOnly,
        onPressStart (e) {
            if (state.isReadOnly) {
                state.setFocusedDate(date);
                return;
            }
            if ('highlightedRange' in state && !state.anchorDate && (e.pointerType === 'mouse' || e.pointerType === 'touch')) {
                // Allow dragging the start or end date of a range to modify it
                // rather than starting a new selection.
                // Don't allow dragging when invalid, or weird jumping behavior may occur as date ranges
                // are constrained to available dates. The user will need to select a new range in this case.
                if (state.highlightedRange && !isInvalid) {
                    if (($14e0f24ef4ac5c92$export$ea39ec197993aef0)(date, state.highlightedRange.start)) {
                        state.setAnchorDate(state.highlightedRange.end);
                        state.setFocusedDate(date);
                        state.setDragging(true);
                        isRangeBoundaryPressed.current = true;
                        return;
                    } else if (($14e0f24ef4ac5c92$export$ea39ec197993aef0)(date, state.highlightedRange.end)) {
                        state.setAnchorDate(state.highlightedRange.start);
                        state.setFocusedDate(date);
                        state.setDragging(true);
                        isRangeBoundaryPressed.current = true;
                        return;
                    }
                }
                let startDragging = ()=>{
                    state.setDragging(true);
                    touchDragTimerRef.current = null;
                    state.selectDate(date);
                    state.setFocusedDate(date);
                    isAnchorPressed.current = true;
                };
                // Start selection on mouse/touch down so users can drag to select a range.
                // On touch, delay dragging to determine if the user really meant to scroll.
                if (e.pointerType === 'touch') touchDragTimerRef.current = setTimeout(startDragging, 200);
                else startDragging();
            }
        },
        onPressEnd () {
            isRangeBoundaryPressed.current = false;
            isAnchorPressed.current = false;
            clearTimeout(touchDragTimerRef.current);
            touchDragTimerRef.current = null;
        },
        onPress () {
            // For non-range selection, always select on press up.
            if (!('anchorDate' in state) && !state.isReadOnly) {
                state.selectDate(date);
                state.setFocusedDate(date);
            }
        },
        onPressUp (e) {
            if (state.isReadOnly) return;
            // If the user tapped quickly, the date won't be selected yet and the
            // timer will still be in progress. In this case, select the date on touch up.
            // Timer is cleared in onPressEnd.
            if ('anchorDate' in state && touchDragTimerRef.current) {
                state.selectDate(date);
                state.setFocusedDate(date);
            }
            if ('anchorDate' in state) {
                if (isRangeBoundaryPressed.current) // When clicking on the start or end date of an already selected range,
                // start a new selection on press up to also allow dragging the date to
                // change the existing range.
                state.setAnchorDate(date);
                else if (state.anchorDate && !isAnchorPressed.current) {
                    // When releasing a drag or pressing the end date of a range, select it.
                    state.selectDate(date);
                    state.setFocusedDate(date);
                } else if (e.pointerType === 'keyboard' && !state.anchorDate) {
                    // For range selection, auto-advance the focused date by one if using keyboard.
                    // This gives an indication that you're selecting a range rather than a single date.
                    // For mouse, this is unnecessary because users will see the indication on hover. For screen readers,
                    // there will be an announcement to "click to finish selecting range" (above).
                    state.selectDate(date);
                    let nextDay = date.add({
                        days: 1
                    });
                    if (state.isInvalid(nextDay)) nextDay = date.subtract({
                        days: 1
                    });
                    if (!state.isInvalid(nextDay)) state.setFocusedDate(nextDay);
                } else if (e.pointerType === 'virtual') {
                    // For screen readers, just select the date on click.
                    state.selectDate(date);
                    state.setFocusedDate(date);
                }
            }
        }
    });
    let tabIndex = null;
    if (!isDisabled) tabIndex = ($14e0f24ef4ac5c92$export$ea39ec197993aef0)(date, state.focusedDate) ? 0 : -1;
    // Focus the button in the DOM when the state updates.
    (reactExports.useEffect)(()=>{
        if (isFocused && ref.current) {
            ($7215afc6de606d6b$export$de79e2c695e052f3)(ref.current);
            // Scroll into view if navigating with a keyboard, otherwise
            // try not to shift the view under the user's mouse/finger.
            // If in a overlay, scrollIntoViewport will only cause scrolling
            // up to the overlay scroll body to prevent overlay shifting.
            // Also only scroll into view if the cell actually got focused.
            // There are some cases where the cell might be disabled or inside,
            // an inert container and we don't want to scroll then.
            if (($507fabe10e71c6fb$export$630ff653c5ada6a9)() !== 'pointer' && document.activeElement === ref.current) ($2f04cbc44ee30ce0$export$c826860796309d1b)(ref.current, {
                containingElement: ($62d8ded9296f3872$export$cfa2225e87938781)(ref.current)
            });
        }
    }, [
        isFocused,
        ref
    ]);
    let cellDateFormatter = ($896ba0a80a8f4d36$export$85fd5fdf27bacc79)({
        day: 'numeric',
        timeZone: state.timeZone,
        calendar: date.calendar.identifier
    });
    let formattedDate = (reactExports.useMemo)(()=>cellDateFormatter.formatToParts(nativeDate).find((part)=>part.type === 'day').value, [
        cellDateFormatter,
        nativeDate
    ]);
    return {
        cellProps: {
            role: 'gridcell',
            'aria-disabled': !isSelectable || null,
            'aria-selected': isSelected || null,
            'aria-invalid': isInvalid || null
        },
        buttonProps: ($3ef42575df84b30b$export$9d1611c77c2fe928)(pressProps, {
            onFocus () {
                if (!isDisabled) state.setFocusedDate(date);
            },
            tabIndex: tabIndex,
            role: 'button',
            'aria-disabled': !isSelectable || null,
            'aria-label': label,
            'aria-invalid': isInvalid || null,
            'aria-describedby': [
                isInvalid ? errorMessageId : null,
                descriptionProps['aria-describedby']
            ].filter(Boolean).join(' ') || undefined,
            onPointerEnter (e) {
                // Highlight the date on hover or drag over a date when selecting a range.
                if ('highlightDate' in state && (e.pointerType !== 'touch' || state.isDragging) && isSelectable) state.highlightDate(date);
            },
            onPointerDown (e) {
                // This is necessary on touch devices to allow dragging
                // outside the original pressed element.
                // (JSDOM does not support this)
                if ('releasePointerCapture' in e.target) e.target.releasePointerCapture(e.pointerId);
            },
            onContextMenu (e) {
                // Prevent context menu on long press.
                e.preventDefault();
            }
        }),
        isPressed: isPressed,
        isFocused: isFocused,
        isSelected: isSelected,
        isDisabled: isDisabled,
        isUnavailable: isUnavailable,
        isOutsideVisibleRange: date.compare(state.visibleRange.start) < 0 || date.compare(state.visibleRange.end) > 0,
        isInvalid: isInvalid,
        formattedDate: formattedDate
    };
}

/*
 * Copyright 2023 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 


function $e93e671b31057976$export$b8473d3665f3a75a(props, state, ref) {
    let { validationBehavior: validationBehavior, focus: focus } = props;
    // This is a useLayoutEffect so that it runs before the useEffect in useFormValidationState, which commits the validation change.
    ($f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(()=>{
        if (validationBehavior === 'native' && (ref === null || ref === void 0 ? void 0 : ref.current)) {
            let errorMessage = state.realtimeValidation.isInvalid ? state.realtimeValidation.validationErrors.join(' ') || 'Invalid value.' : '';
            ref.current.setCustomValidity(errorMessage);
            // Prevent default tooltip for validation message.
            // https://bugzilla.mozilla.org/show_bug.cgi?id=605277
            if (!ref.current.hasAttribute('title')) ref.current.title = '';
            if (!state.realtimeValidation.isInvalid) state.updateValidation($e93e671b31057976$var$getNativeValidity(ref.current));
        }
    });
    let onReset = ($8ae05eaa5c114e9c$export$7f54fc3180508a52)(()=>{
        state.resetValidation();
    });
    let onInvalid = ($8ae05eaa5c114e9c$export$7f54fc3180508a52)((e)=>{
        var _ref_current;
        // Only commit validation if we are not already displaying one.
        // This avoids clearing server errors that the user didn't actually fix.
        if (!state.displayValidation.isInvalid) state.commitValidation();
        // Auto focus the first invalid input in a form, unless the error already had its default prevented.
        let form = ref === null || ref === void 0 ? void 0 : (_ref_current = ref.current) === null || _ref_current === void 0 ? void 0 : _ref_current.form;
        if (!e.defaultPrevented && ref && form && $e93e671b31057976$var$getFirstInvalidInput(form) === ref.current) {
            var _ref_current1;
            if (focus) focus();
            else (_ref_current1 = ref.current) === null || _ref_current1 === void 0 ? void 0 : _ref_current1.focus();
            // Always show focus ring.
            ($507fabe10e71c6fb$export$8397ddfc504fdb9a)('keyboard');
        }
        // Prevent default browser error UI from appearing.
        e.preventDefault();
    });
    let onChange = ($8ae05eaa5c114e9c$export$7f54fc3180508a52)(()=>{
        state.commitValidation();
    });
    (reactExports.useEffect)(()=>{
        let input = ref === null || ref === void 0 ? void 0 : ref.current;
        if (!input) return;
        let form = input.form;
        input.addEventListener('invalid', onInvalid);
        input.addEventListener('change', onChange);
        form === null || form === void 0 ? void 0 : form.addEventListener('reset', onReset);
        return ()=>{
            input.removeEventListener('invalid', onInvalid);
            input.removeEventListener('change', onChange);
            form === null || form === void 0 ? void 0 : form.removeEventListener('reset', onReset);
        };
    }, [
        ref,
        onInvalid,
        onChange,
        onReset,
        validationBehavior
    ]);
}
function $e93e671b31057976$var$getValidity(input) {
    // The native ValidityState object is live, meaning each property is a getter that returns the current state.
    // We need to create a snapshot of the validity state at the time this function is called to avoid unpredictable React renders.
    let validity = input.validity;
    return {
        badInput: validity.badInput,
        customError: validity.customError,
        patternMismatch: validity.patternMismatch,
        rangeOverflow: validity.rangeOverflow,
        rangeUnderflow: validity.rangeUnderflow,
        stepMismatch: validity.stepMismatch,
        tooLong: validity.tooLong,
        tooShort: validity.tooShort,
        typeMismatch: validity.typeMismatch,
        valueMissing: validity.valueMissing,
        valid: validity.valid
    };
}
function $e93e671b31057976$var$getNativeValidity(input) {
    return {
        isInvalid: !input.validity.valid,
        validationDetails: $e93e671b31057976$var$getValidity(input),
        validationErrors: input.validationMessage ? [
            input.validationMessage
        ] : []
    };
}
function $e93e671b31057976$var$getFirstInvalidInput(form) {
    for(let i = 0; i < form.elements.length; i++){
        let element = form.elements[i];
        if (!element.validity.valid) return element;
    }
    return null;
}

/*
 * Copyright 2023 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 
const $e5be200c675c3b3a$export$aca958c65c314e6c = {
    badInput: false,
    customError: false,
    patternMismatch: false,
    rangeOverflow: false,
    rangeUnderflow: false,
    stepMismatch: false,
    tooLong: false,
    tooShort: false,
    typeMismatch: false,
    valueMissing: false,
    valid: true
};
const $e5be200c675c3b3a$var$CUSTOM_VALIDITY_STATE = {
    ...$e5be200c675c3b3a$export$aca958c65c314e6c,
    customError: true,
    valid: false
};
const $e5be200c675c3b3a$export$dad6ae84456c676a = {
    isInvalid: false,
    validationDetails: $e5be200c675c3b3a$export$aca958c65c314e6c,
    validationErrors: []
};
const $e5be200c675c3b3a$export$571b5131b7e65c11 = (reactExports.createContext)({});
const $e5be200c675c3b3a$export$a763b9476acd3eb = '__formValidationState' + Date.now();
function $e5be200c675c3b3a$export$fc1a364ae1f3ff10(props) {
    // Private prop for parent components to pass state to children.
    if (props[$e5be200c675c3b3a$export$a763b9476acd3eb]) {
        let { realtimeValidation: realtimeValidation, displayValidation: displayValidation, updateValidation: updateValidation, resetValidation: resetValidation, commitValidation: commitValidation } = props[$e5be200c675c3b3a$export$a763b9476acd3eb];
        return {
            realtimeValidation: realtimeValidation,
            displayValidation: displayValidation,
            updateValidation: updateValidation,
            resetValidation: resetValidation,
            commitValidation: commitValidation
        };
    }
    // eslint-disable-next-line react-hooks/rules-of-hooks
    return $e5be200c675c3b3a$var$useFormValidationStateImpl(props);
}
function $e5be200c675c3b3a$var$useFormValidationStateImpl(props) {
    let { isInvalid: isInvalid, validationState: validationState, name: name, value: value, builtinValidation: builtinValidation, validate: validate, validationBehavior: validationBehavior = 'aria' } = props;
    // backward compatibility.
    if (validationState) isInvalid || (isInvalid = validationState === 'invalid');
    // If the isInvalid prop is controlled, update validation result in realtime.
    let controlledError = isInvalid !== undefined ? {
        isInvalid: isInvalid,
        validationErrors: [],
        validationDetails: $e5be200c675c3b3a$var$CUSTOM_VALIDITY_STATE
    } : null;
    // Perform custom client side validation.
    let clientError = (reactExports.useMemo)(()=>$e5be200c675c3b3a$var$getValidationResult($e5be200c675c3b3a$var$runValidate(validate, value)), [
        validate,
        value
    ]);
    if (builtinValidation === null || builtinValidation === void 0 ? void 0 : builtinValidation.validationDetails.valid) builtinValidation = null;
    // Get relevant server errors from the form.
    let serverErrors = (reactExports.useContext)($e5be200c675c3b3a$export$571b5131b7e65c11);
    let serverErrorMessages = (reactExports.useMemo)(()=>{
        if (name) return Array.isArray(name) ? name.flatMap((name)=>$e5be200c675c3b3a$var$asArray(serverErrors[name])) : $e5be200c675c3b3a$var$asArray(serverErrors[name]);
        return [];
    }, [
        serverErrors,
        name
    ]);
    // Show server errors when the form gets a new value, and clear when the user changes the value.
    let [lastServerErrors, setLastServerErrors] = (reactExports.useState)(serverErrors);
    let [isServerErrorCleared, setServerErrorCleared] = (reactExports.useState)(false);
    if (serverErrors !== lastServerErrors) {
        setLastServerErrors(serverErrors);
        setServerErrorCleared(false);
    }
    let serverError = (reactExports.useMemo)(()=>$e5be200c675c3b3a$var$getValidationResult(isServerErrorCleared ? [] : serverErrorMessages), [
        isServerErrorCleared,
        serverErrorMessages
    ]);
    // Track the next validation state in a ref until commitValidation is called.
    let nextValidation = (reactExports.useRef)($e5be200c675c3b3a$export$dad6ae84456c676a);
    let [currentValidity, setCurrentValidity] = (reactExports.useState)($e5be200c675c3b3a$export$dad6ae84456c676a);
    let lastError = (reactExports.useRef)($e5be200c675c3b3a$export$dad6ae84456c676a);
    let commitValidation = ()=>{
        if (!commitQueued) return;
        setCommitQueued(false);
        let error = clientError || builtinValidation || nextValidation.current;
        if (!$e5be200c675c3b3a$var$isEqualValidation(error, lastError.current)) {
            lastError.current = error;
            setCurrentValidity(error);
        }
    };
    let [commitQueued, setCommitQueued] = (reactExports.useState)(false);
    (reactExports.useEffect)(commitValidation);
    // realtimeValidation is used to update the native input element's state based on custom validation logic.
    // displayValidation is the currently displayed validation state that the user sees (e.g. on input change/form submit).
    // With validationBehavior="aria", all errors are displayed in realtime rather than on submit.
    let realtimeValidation = controlledError || serverError || clientError || builtinValidation || $e5be200c675c3b3a$export$dad6ae84456c676a;
    let displayValidation = validationBehavior === 'native' ? controlledError || serverError || currentValidity : controlledError || serverError || clientError || builtinValidation || currentValidity;
    return {
        realtimeValidation: realtimeValidation,
        displayValidation: displayValidation,
        updateValidation (value) {
            // If validationBehavior is 'aria', update in realtime. Otherwise, store in a ref until commit.
            if (validationBehavior === 'aria' && !$e5be200c675c3b3a$var$isEqualValidation(currentValidity, value)) setCurrentValidity(value);
            else nextValidation.current = value;
        },
        resetValidation () {
            // Update the currently displayed validation state to valid on form reset,
            // even if the native validity says it isn't. It'll show again on the next form submit.
            let error = $e5be200c675c3b3a$export$dad6ae84456c676a;
            if (!$e5be200c675c3b3a$var$isEqualValidation(error, lastError.current)) {
                lastError.current = error;
                setCurrentValidity(error);
            }
            // Do not commit validation after the next render. This avoids a condition where
            // useSelect calls commitValidation inside an onReset handler.
            if (validationBehavior === 'native') setCommitQueued(false);
            setServerErrorCleared(true);
        },
        commitValidation () {
            // Commit validation state so the user sees it on blur/change/submit. Also clear any server errors.
            // Wait until after the next render to commit so that the latest value has been validated.
            if (validationBehavior === 'native') setCommitQueued(true);
            setServerErrorCleared(true);
        }
    };
}
function $e5be200c675c3b3a$var$asArray(v) {
    if (!v) return [];
    return Array.isArray(v) ? v : [
        v
    ];
}
function $e5be200c675c3b3a$var$runValidate(validate, value) {
    if (typeof validate === 'function') {
        let e = validate(value);
        if (e && typeof e !== 'boolean') return $e5be200c675c3b3a$var$asArray(e);
    }
    return [];
}
function $e5be200c675c3b3a$var$getValidationResult(errors) {
    return errors.length ? {
        isInvalid: true,
        validationErrors: errors,
        validationDetails: $e5be200c675c3b3a$var$CUSTOM_VALIDITY_STATE
    } : null;
}
function $e5be200c675c3b3a$var$isEqualValidation(a, b) {
    if (a === b) return true;
    return a && b && a.isInvalid === b.isInvalid && a.validationErrors.length === b.validationErrors.length && a.validationErrors.every((a, i)=>a === b.validationErrors[i]) && Object.entries(a.validationDetails).every(([k, v])=>b.validationDetails[k] === v);
}
function $e5be200c675c3b3a$export$75ee7c75d68f5b0e(...results) {
    let errors = new Set();
    let isInvalid = false;
    let validationDetails = {
        ...$e5be200c675c3b3a$export$aca958c65c314e6c
    };
    for (let v of results){
        var _validationDetails, _key;
        for (let e of v.validationErrors)errors.add(e);
        // Only these properties apply for checkboxes.
        isInvalid || (isInvalid = v.isInvalid);
        for(let key in validationDetails)(_validationDetails = validationDetails)[_key = key] || (_validationDetails[_key] = v.validationDetails[key]);
    }
    validationDetails.valid = !isInvalid;
    return {
        isInvalid: isInvalid,
        validationErrors: [
            ...errors
        ],
        validationDetails: validationDetails
    };
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 


function $d2c8e2b0480f3f34$export$cbe85ee05b554577(props, state, ref) {
    let { isDisabled: isDisabled = false, isReadOnly: isReadOnly = false, value: value, name: name, children: children, 'aria-label': ariaLabel, 'aria-labelledby': ariaLabelledby, validationState: validationState = 'valid', isInvalid: isInvalid } = props;
    let onChange = (e)=>{
        // since we spread props on label, onChange will end up there as well as in here.
        // so we have to stop propagation at the lowest level that we care about
        e.stopPropagation();
        state.setSelected(e.target.checked);
    };
    let hasChildren = children != null;
    let hasAriaLabel = ariaLabel != null || ariaLabelledby != null;
    if (!hasChildren && !hasAriaLabel) console.warn('If you do not provide children, you must specify an aria-label for accessibility');
    // This handles focusing the input on pointer down, which Safari does not do by default.
    let { pressProps: pressProps, isPressed: isPressed } = ($f6c31cce2adf654f$export$45712eceda6fad21)({
        isDisabled: isDisabled
    });
    // iOS does not toggle checkboxes if you drag off and back onto the label, so handle it ourselves.
    let { pressProps: labelProps, isPressed: isLabelPressed } = ($f6c31cce2adf654f$export$45712eceda6fad21)({
        isDisabled: isDisabled || isReadOnly,
        onPress () {
            state.toggle();
        }
    });
    let { focusableProps: focusableProps } = ($e6afbd83fe6ebbd2$export$4c014de7c8940b4c)(props, ref);
    let interactions = ($3ef42575df84b30b$export$9d1611c77c2fe928)(pressProps, focusableProps);
    let domProps = ($65484d02dcb7eb3e$export$457c3d6518dd4c6f)(props, {
        labelable: true
    });
    ($99facab73266f662$export$5add1d006293d136)(ref, state.isSelected, state.setSelected);
    return {
        labelProps: ($3ef42575df84b30b$export$9d1611c77c2fe928)(labelProps, {
            onClick: (e)=>e.preventDefault()
        }),
        inputProps: ($3ef42575df84b30b$export$9d1611c77c2fe928)(domProps, {
            'aria-invalid': isInvalid || validationState === 'invalid' || undefined,
            'aria-errormessage': props['aria-errormessage'],
            'aria-controls': props['aria-controls'],
            'aria-readonly': isReadOnly || undefined,
            onChange: onChange,
            disabled: isDisabled,
            ...value == null ? {} : {
                value: value
            },
            name: name,
            type: 'checkbox',
            ...interactions
        }),
        isSelected: state.isSelected,
        isPressed: isPressed || isLabelPressed,
        isDisabled: isDisabled,
        isReadOnly: isReadOnly,
        isInvalid: isInvalid || validationState === 'invalid'
    };
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 



function $406796ff087fe49b$export$e375f10ce42261c5(props, state, inputRef) {
    // Create validation state here because it doesn't make sense to add to general useToggleState.
    let validationState = ($e5be200c675c3b3a$export$fc1a364ae1f3ff10)({
        ...props,
        value: state.isSelected
    });
    let { isInvalid: isInvalid, validationErrors: validationErrors, validationDetails: validationDetails } = validationState.displayValidation;
    let { labelProps: labelProps, inputProps: inputProps, isSelected: isSelected, isPressed: isPressed, isDisabled: isDisabled, isReadOnly: isReadOnly } = ($d2c8e2b0480f3f34$export$cbe85ee05b554577)({
        ...props,
        isInvalid: isInvalid
    }, state, inputRef);
    ($e93e671b31057976$export$b8473d3665f3a75a)(props, validationState, inputRef);
    let { isIndeterminate: isIndeterminate, isRequired: isRequired, validationBehavior: validationBehavior = 'aria' } = props;
    (reactExports.useEffect)(()=>{
        // indeterminate is a property, but it can only be set via javascript
        // https://css-tricks.com/indeterminate-checkboxes/
        if (inputRef.current) inputRef.current.indeterminate = !!isIndeterminate;
    });
    return {
        labelProps: labelProps,
        inputProps: {
            ...inputProps,
            checked: isSelected,
            'aria-required': isRequired && validationBehavior === 'aria' || undefined,
            required: isRequired && validationBehavior === 'native'
        },
        isSelected: isSelected,
        isPressed: isPressed,
        isDisabled: isDisabled,
        isReadOnly: isReadOnly,
        isInvalid: isInvalid,
        validationErrors: validationErrors,
        validationDetails: validationDetails
    };
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ const $1ae600c947479353$export$ec98120685d4f57d = new WeakMap();

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 
function $d191a55c9702f145$export$8467354a121f1b9f(props) {
    let { id: id, label: label, 'aria-labelledby': ariaLabelledby, 'aria-label': ariaLabel, labelElementType: labelElementType = 'label' } = props;
    id = ($bdb11010cef70236$export$f680877a34711e37)(id);
    let labelId = ($bdb11010cef70236$export$f680877a34711e37)();
    let labelProps = {};
    if (label) {
        ariaLabelledby = ariaLabelledby ? `${labelId} ${ariaLabelledby}` : labelId;
        labelProps = {
            id: labelId,
            htmlFor: labelElementType === 'label' ? id : undefined
        };
    } else if (!ariaLabelledby && !ariaLabel) console.warn('If you do not provide a visible label, you must specify an aria-label or aria-labelledby attribute for accessibility');
    let fieldProps = ($313b98861ee5dd6c$export$d6875122194c7b44)({
        id: id,
        'aria-label': ariaLabel,
        'aria-labelledby': ariaLabelledby
    });
    return {
        labelProps: labelProps,
        fieldProps: fieldProps
    };
}

/*
 * Copyright 2021 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 

function $2baaea4c71418dea$export$294aa081a6c6f55d(props) {
    let { description: description, errorMessage: errorMessage, isInvalid: isInvalid, validationState: validationState } = props;
    let { labelProps: labelProps, fieldProps: fieldProps } = ($d191a55c9702f145$export$8467354a121f1b9f)(props);
    let descriptionId = ($bdb11010cef70236$export$b4cc09c592e8fdb8)([
        Boolean(description),
        Boolean(errorMessage),
        isInvalid,
        validationState
    ]);
    let errorMessageId = ($bdb11010cef70236$export$b4cc09c592e8fdb8)([
        Boolean(description),
        Boolean(errorMessage),
        isInvalid,
        validationState
    ]);
    fieldProps = ($3ef42575df84b30b$export$9d1611c77c2fe928)(fieldProps, {
        'aria-describedby': [
            descriptionId,
            // Use aria-describedby for error message because aria-errormessage is unsupported using VoiceOver or NVDA. See https://github.com/adobe/react-spectrum/issues/1346#issuecomment-740136268
            errorMessageId,
            props['aria-describedby']
        ].filter(Boolean).join(' ') || undefined
    });
    return {
        labelProps: labelProps,
        fieldProps: fieldProps,
        descriptionProps: {
            id: descriptionId
        },
        errorMessageProps: {
            id: errorMessageId
        }
    };
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 



function $1e9fce0cfacc738b$export$49ff6f28c54f1cbe(props, state) {
    let { isDisabled: isDisabled, name: name, validationBehavior: validationBehavior = 'aria' } = props;
    let { isInvalid: isInvalid, validationErrors: validationErrors, validationDetails: validationDetails } = state.displayValidation;
    let { labelProps: labelProps, fieldProps: fieldProps, descriptionProps: descriptionProps, errorMessageProps: errorMessageProps } = ($2baaea4c71418dea$export$294aa081a6c6f55d)({
        ...props,
        // Checkbox group is not an HTML input element so it
        // shouldn't be labeled by a <label> element.
        labelElementType: 'span',
        isInvalid: isInvalid,
        errorMessage: props.errorMessage || validationErrors
    });
    ($1ae600c947479353$export$ec98120685d4f57d).set(state, {
        name: name,
        descriptionId: descriptionProps.id,
        errorMessageId: errorMessageProps.id,
        validationBehavior: validationBehavior
    });
    let domProps = ($65484d02dcb7eb3e$export$457c3d6518dd4c6f)(props, {
        labelable: true
    });
    let { focusWithinProps: focusWithinProps } = ($9ab94262bd0047c7$export$420e68273165f4ec)({
        onBlurWithin: props.onBlur,
        onFocusWithin: props.onFocus,
        onFocusWithinChange: props.onFocusChange
    });
    return {
        groupProps: ($3ef42575df84b30b$export$9d1611c77c2fe928)(domProps, {
            role: 'group',
            'aria-disabled': isDisabled || undefined,
            ...fieldProps,
            ...focusWithinProps
        }),
        labelProps: labelProps,
        descriptionProps: descriptionProps,
        errorMessageProps: errorMessageProps,
        isInvalid: isInvalid,
        validationErrors: validationErrors,
        validationDetails: validationDetails
    };
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 
function $3017fa7ffdddec74$export$8042c6c013fd5226(props = {}) {
    let { isReadOnly: isReadOnly } = props;
    // have to provide an empty function so useControlledState doesn't throw a fit
    // can't use useControlledState's prop calling because we need the event object from the change
    let [isSelected, setSelected] = ($458b0a5536c1a7cf$export$40bfa8c7b0832715)(props.isSelected, props.defaultSelected || false, props.onChange);
    function updateSelected(value) {
        if (!isReadOnly) setSelected(value);
    }
    function toggleState() {
        if (!isReadOnly) setSelected(!isSelected);
    }
    return {
        isSelected: isSelected,
        setSelected: updateSelected,
        toggle: toggleState
    };
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 




function $fba3e38d5ca8983f$export$353b32fc6898d37d(props, state, inputRef) {
    const toggleState = ($3017fa7ffdddec74$export$8042c6c013fd5226)({
        isReadOnly: props.isReadOnly || state.isReadOnly,
        isSelected: state.isSelected(props.value),
        onChange (isSelected) {
            if (isSelected) state.addValue(props.value);
            else state.removeValue(props.value);
            if (props.onChange) props.onChange(isSelected);
        }
    });
    let { name: name, descriptionId: descriptionId, errorMessageId: errorMessageId, validationBehavior: validationBehavior } = ($1ae600c947479353$export$ec98120685d4f57d).get(state);
    var _props_validationBehavior;
    validationBehavior = (_props_validationBehavior = props.validationBehavior) !== null && _props_validationBehavior !== void 0 ? _props_validationBehavior : validationBehavior;
    // Local validation for this checkbox.
    let { realtimeValidation: realtimeValidation } = ($e5be200c675c3b3a$export$fc1a364ae1f3ff10)({
        ...props,
        value: toggleState.isSelected,
        // Server validation is handled at the group level.
        name: undefined,
        validationBehavior: 'aria'
    });
    // Update the checkbox group state when realtime validation changes.
    let nativeValidation = (reactExports.useRef)(($e5be200c675c3b3a$export$dad6ae84456c676a));
    let updateValidation = ()=>{
        state.setInvalid(props.value, realtimeValidation.isInvalid ? realtimeValidation : nativeValidation.current);
    };
    (reactExports.useEffect)(updateValidation);
    // Combine group and checkbox level validation.
    let combinedRealtimeValidation = state.realtimeValidation.isInvalid ? state.realtimeValidation : realtimeValidation;
    let displayValidation = validationBehavior === 'native' ? state.displayValidation : combinedRealtimeValidation;
    var _props_isRequired;
    let res = ($406796ff087fe49b$export$e375f10ce42261c5)({
        ...props,
        isReadOnly: props.isReadOnly || state.isReadOnly,
        isDisabled: props.isDisabled || state.isDisabled,
        name: props.name || name,
        isRequired: (_props_isRequired = props.isRequired) !== null && _props_isRequired !== void 0 ? _props_isRequired : state.isRequired,
        validationBehavior: validationBehavior,
        [($e5be200c675c3b3a$export$a763b9476acd3eb)]: {
            realtimeValidation: combinedRealtimeValidation,
            displayValidation: displayValidation,
            resetValidation: state.resetValidation,
            commitValidation: state.commitValidation,
            updateValidation (v) {
                nativeValidation.current = v;
                updateValidation();
            }
        }
    }, toggleState, inputRef);
    return {
        ...res,
        inputProps: {
            ...res.inputProps,
            'aria-describedby': [
                props['aria-describedby'],
                state.isInvalid ? errorMessageId : null,
                descriptionId
            ].filter(Boolean).join(' ') || undefined
        }
    };
}

var $02cb4c75c506befe$exports = {};
$02cb4c75c506befe$exports = {
    "buttonLabel": `\u{639}\u{631}\u{636} \u{627}\u{644}\u{645}\u{642}\u{62A}\u{631}\u{62D}\u{627}\u{62A}`,
    "countAnnouncement": (args, formatter)=>`${formatter.plural(args.optionCount, {
            one: ()=>`${formatter.number(args.optionCount)} \u{62E}\u{64A}\u{627}\u{631}`,
            other: ()=>`${formatter.number(args.optionCount)} \u{62E}\u{64A}\u{627}\u{631}\u{627}\u{62A}`
        })} \u{645}\u{62A}\u{627}\u{62D}\u{629}.`,
    "focusAnnouncement": (args, formatter)=>`${formatter.select({
            true: ()=>`\u{627}\u{644}\u{645}\u{62C}\u{645}\u{648}\u{639}\u{629} \u{627}\u{644}\u{645}\u{62F}\u{62E}\u{644}\u{629} ${args.groupTitle}, \u{645}\u{639} ${formatter.plural(args.groupCount, {
                    one: ()=>`${formatter.number(args.groupCount)} \u{62E}\u{64A}\u{627}\u{631}`,
                    other: ()=>`${formatter.number(args.groupCount)} \u{62E}\u{64A}\u{627}\u{631}\u{627}\u{62A}`
                })}. `,
            other: ``
        }, args.isGroupChange)}${args.optionText}${formatter.select({
            true: `, \u{645}\u{62D}\u{62F}\u{62F}`,
            other: ``
        }, args.isSelected)}`,
    "listboxLabel": `\u{645}\u{642}\u{62A}\u{631}\u{62D}\u{627}\u{62A}`,
    "selectedAnnouncement": (args)=>`${args.optionText}\u{60C} \u{645}\u{62D}\u{62F}\u{62F}`
};

var $568b8163f1e56faf$exports = {};
$568b8163f1e56faf$exports = {
    "buttonLabel": `\u{41F}\u{43E}\u{43A}\u{430}\u{436}\u{438} \u{43F}\u{440}\u{435}\u{434}\u{43B}\u{43E}\u{436}\u{435}\u{43D}\u{438}\u{44F}`,
    "countAnnouncement": (args, formatter)=>`${formatter.plural(args.optionCount, {
            one: ()=>`${formatter.number(args.optionCount)} \u{43E}\u{43F}\u{446}\u{438}\u{44F}`,
            other: ()=>`${formatter.number(args.optionCount)} \u{43E}\u{43F}\u{446}\u{438}\u{438}`
        })} \u{43D}\u{430} \u{440}\u{430}\u{437}\u{43F}\u{43E}\u{43B}\u{43E}\u{436}\u{435}\u{43D}\u{438}\u{435}.`,
    "focusAnnouncement": (args, formatter)=>`${formatter.select({
            true: ()=>`\u{412}\u{44A}\u{432}\u{435}\u{434}\u{435}\u{43D}\u{430} \u{433}\u{440}\u{443}\u{43F}\u{430} ${args.groupTitle}, \u{441} ${formatter.plural(args.groupCount, {
                    one: ()=>`${formatter.number(args.groupCount)} \u{43E}\u{43F}\u{446}\u{438}\u{44F}`,
                    other: ()=>`${formatter.number(args.groupCount)} \u{43E}\u{43F}\u{446}\u{438}\u{438}`
                })}. `,
            other: ``
        }, args.isGroupChange)}${args.optionText}${formatter.select({
            true: `, \u{438}\u{437}\u{431}\u{440}\u{430}\u{43D}\u{438}`,
            other: ``
        }, args.isSelected)}`,
    "listboxLabel": `\u{41F}\u{440}\u{435}\u{434}\u{43B}\u{43E}\u{436}\u{435}\u{43D}\u{438}\u{44F}`,
    "selectedAnnouncement": (args)=>`${args.optionText}, \u{438}\u{437}\u{431}\u{440}\u{430}\u{43D}\u{438}`
};

var $87581c0202d106b8$exports = {};
$87581c0202d106b8$exports = {
    "buttonLabel": `Zobrazit doporu\u{10D}en\xed`,
    "countAnnouncement": (args, formatter)=>`K dispozici ${formatter.plural(args.optionCount, {
            one: ()=>`je ${formatter.number(args.optionCount)} mo\u{17E}nost`,
            other: ()=>`jsou/je ${formatter.number(args.optionCount)} mo\u{17E}nosti/-\xed`
        })}.`,
    "focusAnnouncement": (args, formatter)=>`${formatter.select({
            true: ()=>`Zadan\xe1 skupina \u{201E}${args.groupTitle}\u{201C} ${formatter.plural(args.groupCount, {
                    one: ()=>`s ${formatter.number(args.groupCount)} mo\u{17E}nost\xed`,
                    other: ()=>`se ${formatter.number(args.groupCount)} mo\u{17E}nostmi`
                })}. `,
            other: ``
        }, args.isGroupChange)}${args.optionText}${formatter.select({
            true: ` (vybr\xe1no)`,
            other: ``
        }, args.isSelected)}`,
    "listboxLabel": `N\xe1vrhy`,
    "selectedAnnouncement": (args)=>`${args.optionText}, vybr\xe1no`
};

var $a10a0369f5433ed1$exports = {};
$a10a0369f5433ed1$exports = {
    "buttonLabel": `Vis forslag`,
    "countAnnouncement": (args, formatter)=>`${formatter.plural(args.optionCount, {
            one: ()=>`${formatter.number(args.optionCount)} mulighed tilg\xe6ngelig`,
            other: ()=>`${formatter.number(args.optionCount)} muligheder tilg\xe6ngelige`
        })}.`,
    "focusAnnouncement": (args, formatter)=>`${formatter.select({
            true: ()=>`Angivet gruppe ${args.groupTitle}, med ${formatter.plural(args.groupCount, {
                    one: ()=>`${formatter.number(args.groupCount)} mulighed`,
                    other: ()=>`${formatter.number(args.groupCount)} muligheder`
                })}. `,
            other: ``
        }, args.isGroupChange)}${args.optionText}${formatter.select({
            true: `, valgt`,
            other: ``
        }, args.isSelected)}`,
    "listboxLabel": `Forslag`,
    "selectedAnnouncement": (args)=>`${args.optionText}, valgt`
};

var $bfd288727d5cb166$exports = {};
$bfd288727d5cb166$exports = {
    "buttonLabel": `Empfehlungen anzeigen`,
    "countAnnouncement": (args, formatter)=>`${formatter.plural(args.optionCount, {
            one: ()=>`${formatter.number(args.optionCount)} Option`,
            other: ()=>`${formatter.number(args.optionCount)} Optionen`
        })} verf\xfcgbar.`,
    "focusAnnouncement": (args, formatter)=>`${formatter.select({
            true: ()=>`Eingetretene Gruppe ${args.groupTitle}, mit ${formatter.plural(args.groupCount, {
                    one: ()=>`${formatter.number(args.groupCount)} Option`,
                    other: ()=>`${formatter.number(args.groupCount)} Optionen`
                })}. `,
            other: ``
        }, args.isGroupChange)}${args.optionText}${formatter.select({
            true: `, ausgew\xe4hlt`,
            other: ``
        }, args.isSelected)}`,
    "listboxLabel": `Empfehlungen`,
    "selectedAnnouncement": (args)=>`${args.optionText}, ausgew\xe4hlt`
};

var $ca177778f9a74e3c$exports = {};
$ca177778f9a74e3c$exports = {
    "buttonLabel": `\u{3A0}\u{3C1}\u{3BF}\u{3B2}\u{3BF}\u{3BB}\u{3AE} \u{3C0}\u{3C1}\u{3BF}\u{3C4}\u{3AC}\u{3C3}\u{3B5}\u{3C9}\u{3BD}`,
    "countAnnouncement": (args, formatter)=>`${formatter.plural(args.optionCount, {
            one: ()=>`${formatter.number(args.optionCount)} \u{3B5}\u{3C0}\u{3B9}\u{3BB}\u{3BF}\u{3B3}\u{3AE}`,
            other: ()=>`${formatter.number(args.optionCount)} \u{3B5}\u{3C0}\u{3B9}\u{3BB}\u{3BF}\u{3B3}\u{3AD}\u{3C2} `
        })} \u{3B4}\u{3B9}\u{3B1}\u{3B8}\u{3AD}\u{3C3}\u{3B9}\u{3BC}\u{3B5}\u{3C2}.`,
    "focusAnnouncement": (args, formatter)=>`${formatter.select({
            true: ()=>`\u{395}\u{3B9}\u{3C3}\u{3B1}\u{3B3}\u{3BC}\u{3AD}\u{3BD}\u{3B7} \u{3BF}\u{3BC}\u{3AC}\u{3B4}\u{3B1} ${args.groupTitle}, \u{3BC}\u{3B5} ${formatter.plural(args.groupCount, {
                    one: ()=>`${formatter.number(args.groupCount)} \u{3B5}\u{3C0}\u{3B9}\u{3BB}\u{3BF}\u{3B3}\u{3AE}`,
                    other: ()=>`${formatter.number(args.groupCount)} \u{3B5}\u{3C0}\u{3B9}\u{3BB}\u{3BF}\u{3B3}\u{3AD}\u{3C2}`
                })}. `,
            other: ``
        }, args.isGroupChange)}${args.optionText}${formatter.select({
            true: `, \u{3B5}\u{3C0}\u{3B9}\u{3BB}\u{3B5}\u{3B3}\u{3BC}\u{3AD}\u{3BD}\u{3BF}`,
            other: ``
        }, args.isSelected)}`,
    "listboxLabel": `\u{3A0}\u{3C1}\u{3BF}\u{3C4}\u{3AC}\u{3C3}\u{3B5}\u{3B9}\u{3C2}`,
    "selectedAnnouncement": (args)=>`${args.optionText}, \u{3B5}\u{3C0}\u{3B9}\u{3BB}\u{3AD}\u{3C7}\u{3B8}\u{3B7}\u{3BA}\u{3B5}`
};

var $9b5aa79ef84beb6c$exports = {};
$9b5aa79ef84beb6c$exports = {
    "focusAnnouncement": (args, formatter)=>`${formatter.select({
            true: ()=>`Entered group ${args.groupTitle}, with ${formatter.plural(args.groupCount, {
                    one: ()=>`${formatter.number(args.groupCount)} option`,
                    other: ()=>`${formatter.number(args.groupCount)} options`
                })}. `,
            other: ``
        }, args.isGroupChange)}${args.optionText}${formatter.select({
            true: `, selected`,
            other: ``
        }, args.isSelected)}`,
    "countAnnouncement": (args, formatter)=>`${formatter.plural(args.optionCount, {
            one: ()=>`${formatter.number(args.optionCount)} option`,
            other: ()=>`${formatter.number(args.optionCount)} options`
        })} available.`,
    "selectedAnnouncement": (args)=>`${args.optionText}, selected`,
    "buttonLabel": `Show suggestions`,
    "listboxLabel": `Suggestions`
};

var $57968e8209de2557$exports = {};
$57968e8209de2557$exports = {
    "buttonLabel": `Mostrar sugerencias`,
    "countAnnouncement": (args, formatter)=>`${formatter.plural(args.optionCount, {
            one: ()=>`${formatter.number(args.optionCount)} opci\xf3n`,
            other: ()=>`${formatter.number(args.optionCount)} opciones`
        })} disponible(s).`,
    "focusAnnouncement": (args, formatter)=>`${formatter.select({
            true: ()=>`Se ha unido al grupo ${args.groupTitle}, con ${formatter.plural(args.groupCount, {
                    one: ()=>`${formatter.number(args.groupCount)} opci\xf3n`,
                    other: ()=>`${formatter.number(args.groupCount)} opciones`
                })}. `,
            other: ``
        }, args.isGroupChange)}${args.optionText}${formatter.select({
            true: `, seleccionado`,
            other: ``
        }, args.isSelected)}`,
    "listboxLabel": `Sugerencias`,
    "selectedAnnouncement": (args)=>`${args.optionText}, seleccionado`
};

var $60690790bf4c1c6a$exports = {};
$60690790bf4c1c6a$exports = {
    "buttonLabel": `Kuva soovitused`,
    "countAnnouncement": (args, formatter)=>`${formatter.plural(args.optionCount, {
            one: ()=>`${formatter.number(args.optionCount)} valik`,
            other: ()=>`${formatter.number(args.optionCount)} valikud`
        })} saadaval.`,
    "focusAnnouncement": (args, formatter)=>`${formatter.select({
            true: ()=>`Sisestatud r\xfchm ${args.groupTitle}, valikuga ${formatter.plural(args.groupCount, {
                    one: ()=>`${formatter.number(args.groupCount)} valik`,
                    other: ()=>`${formatter.number(args.groupCount)} valikud`
                })}. `,
            other: ``
        }, args.isGroupChange)}${args.optionText}${formatter.select({
            true: `, valitud`,
            other: ``
        }, args.isSelected)}`,
    "listboxLabel": `Soovitused`,
    "selectedAnnouncement": (args)=>`${args.optionText}, valitud`
};

var $1101246e8c7d9357$exports = {};
$1101246e8c7d9357$exports = {
    "buttonLabel": `N\xe4yt\xe4 ehdotukset`,
    "countAnnouncement": (args, formatter)=>`${formatter.plural(args.optionCount, {
            one: ()=>`${formatter.number(args.optionCount)} vaihtoehto`,
            other: ()=>`${formatter.number(args.optionCount)} vaihtoehdot`
        })} saatavilla.`,
    "focusAnnouncement": (args, formatter)=>`${formatter.select({
            true: ()=>`Mentiin ryhm\xe4\xe4n ${args.groupTitle}, ${formatter.plural(args.groupCount, {
                    one: ()=>`${formatter.number(args.groupCount)} vaihtoehdon`,
                    other: ()=>`${formatter.number(args.groupCount)} vaihtoehdon`
                })} kanssa.`,
            other: ``
        }, args.isGroupChange)}${args.optionText}${formatter.select({
            true: `, valittu`,
            other: ``
        }, args.isSelected)}`,
    "listboxLabel": `Ehdotukset`,
    "selectedAnnouncement": (args)=>`${args.optionText}, valittu`
};

var $6404b5cb5b241730$exports = {};
$6404b5cb5b241730$exports = {
    "buttonLabel": `Afficher les suggestions`,
    "countAnnouncement": (args, formatter)=>`${formatter.plural(args.optionCount, {
            one: ()=>`${formatter.number(args.optionCount)} option`,
            other: ()=>`${formatter.number(args.optionCount)} options`
        })} disponible(s).`,
    "focusAnnouncement": (args, formatter)=>`${formatter.select({
            true: ()=>`Groupe ${args.groupTitle} rejoint, avec ${formatter.plural(args.groupCount, {
                    one: ()=>`${formatter.number(args.groupCount)} option`,
                    other: ()=>`${formatter.number(args.groupCount)} options`
                })}. `,
            other: ``
        }, args.isGroupChange)}${args.optionText}${formatter.select({
            true: `, s\xe9lectionn\xe9(s)`,
            other: ``
        }, args.isSelected)}`,
    "listboxLabel": `Suggestions`,
    "selectedAnnouncement": (args)=>`${args.optionText}, s\xe9lectionn\xe9`
};

var $dfeafa702e92e31f$exports = {};
$dfeafa702e92e31f$exports = {
    "buttonLabel": `\u{5D4}\u{5E6}\u{5D2} \u{5D4}\u{5E6}\u{5E2}\u{5D5}\u{5EA}`,
    "countAnnouncement": (args, formatter)=>`${formatter.plural(args.optionCount, {
            one: ()=>`\u{5D0}\u{5E4}\u{5E9}\u{5E8}\u{5D5}\u{5EA} ${formatter.number(args.optionCount)}`,
            other: ()=>`${formatter.number(args.optionCount)} \u{5D0}\u{5E4}\u{5E9}\u{5E8}\u{5D5}\u{5D9}\u{5D5}\u{5EA}`
        })} \u{5D1}\u{5DE}\u{5E6}\u{5D1} \u{5D6}\u{5DE}\u{5D9}\u{5DF}.`,
    "focusAnnouncement": (args, formatter)=>`${formatter.select({
            true: ()=>`\u{5E0}\u{5DB}\u{5E0}\u{5E1} \u{5DC}\u{5E7}\u{5D1}\u{5D5}\u{5E6}\u{5D4} ${args.groupTitle}, \u{5E2}\u{5DD} ${formatter.plural(args.groupCount, {
                    one: ()=>`\u{5D0}\u{5E4}\u{5E9}\u{5E8}\u{5D5}\u{5EA} ${formatter.number(args.groupCount)}`,
                    other: ()=>`${formatter.number(args.groupCount)} \u{5D0}\u{5E4}\u{5E9}\u{5E8}\u{5D5}\u{5D9}\u{5D5}\u{5EA}`
                })}. `,
            other: ``
        }, args.isGroupChange)}${args.optionText}${formatter.select({
            true: `, \u{5E0}\u{5D1}\u{5D7}\u{5E8}`,
            other: ``
        }, args.isSelected)}`,
    "listboxLabel": `\u{5D4}\u{5E6}\u{5E2}\u{5D5}\u{5EA}`,
    "selectedAnnouncement": (args)=>`${args.optionText}, \u{5E0}\u{5D1}\u{5D7}\u{5E8}`
};

var $2d125e0b34676352$exports = {};
$2d125e0b34676352$exports = {
    "buttonLabel": `Prika\u{17E}i prijedloge`,
    "countAnnouncement": (args, formatter)=>`Dostupno jo\u{161}: ${formatter.plural(args.optionCount, {
            one: ()=>`${formatter.number(args.optionCount)} opcija`,
            other: ()=>`${formatter.number(args.optionCount)} opcije/a`
        })}.`,
    "focusAnnouncement": (args, formatter)=>`${formatter.select({
            true: ()=>`Unesena skupina ${args.groupTitle}, s ${formatter.plural(args.groupCount, {
                    one: ()=>`${formatter.number(args.groupCount)} opcijom`,
                    other: ()=>`${formatter.number(args.groupCount)} opcije/a`
                })}. `,
            other: ``
        }, args.isGroupChange)}${args.optionText}${formatter.select({
            true: `, odabranih`,
            other: ``
        }, args.isSelected)}`,
    "listboxLabel": `Prijedlozi`,
    "selectedAnnouncement": (args)=>`${args.optionText}, odabrano`
};

var $ea029611d7634059$exports = {};
$ea029611d7634059$exports = {
    "buttonLabel": `Javaslatok megjelen\xedt\xe9se`,
    "countAnnouncement": (args, formatter)=>`${formatter.plural(args.optionCount, {
            one: ()=>`${formatter.number(args.optionCount)} lehet\u{151}s\xe9g`,
            other: ()=>`${formatter.number(args.optionCount)} lehet\u{151}s\xe9g`
        })} \xe1ll rendelkez\xe9sre.`,
    "focusAnnouncement": (args, formatter)=>`${formatter.select({
            true: ()=>`Bel\xe9pett a(z) ${args.groupTitle} csoportba, amely ${formatter.plural(args.groupCount, {
                    one: ()=>`${formatter.number(args.groupCount)} lehet\u{151}s\xe9get`,
                    other: ()=>`${formatter.number(args.groupCount)} lehet\u{151}s\xe9get`
                })} tartalmaz. `,
            other: ``
        }, args.isGroupChange)}${args.optionText}${formatter.select({
            true: `, kijel\xf6lve`,
            other: ``
        }, args.isSelected)}`,
    "listboxLabel": `Javaslatok`,
    "selectedAnnouncement": (args)=>`${args.optionText}, kijel\xf6lve`
};

var $77f075bb86ad7091$exports = {};
$77f075bb86ad7091$exports = {
    "buttonLabel": `Mostra suggerimenti`,
    "countAnnouncement": (args, formatter)=>`${formatter.plural(args.optionCount, {
            one: ()=>`${formatter.number(args.optionCount)} opzione disponibile`,
            other: ()=>`${formatter.number(args.optionCount)} opzioni disponibili`
        })}.`,
    "focusAnnouncement": (args, formatter)=>`${formatter.select({
            true: ()=>`Ingresso nel gruppo ${args.groupTitle}, con ${formatter.plural(args.groupCount, {
                    one: ()=>`${formatter.number(args.groupCount)} opzione`,
                    other: ()=>`${formatter.number(args.groupCount)} opzioni`
                })}. `,
            other: ``
        }, args.isGroupChange)}${args.optionText}${formatter.select({
            true: `, selezionato`,
            other: ``
        }, args.isSelected)}`,
    "listboxLabel": `Suggerimenti`,
    "selectedAnnouncement": (args)=>`${args.optionText}, selezionato`
};

var $6e87462e84907983$exports = {};
$6e87462e84907983$exports = {
    "buttonLabel": `\u{5019}\u{88DC}\u{3092}\u{8868}\u{793A}`,
    "countAnnouncement": (args, formatter)=>`${formatter.plural(args.optionCount, {
            one: ()=>`${formatter.number(args.optionCount)} \u{500B}\u{306E}\u{30AA}\u{30D7}\u{30B7}\u{30E7}\u{30F3}`,
            other: ()=>`${formatter.number(args.optionCount)} \u{500B}\u{306E}\u{30AA}\u{30D7}\u{30B7}\u{30E7}\u{30F3}`
        })}\u{3092}\u{5229}\u{7528}\u{3067}\u{304D}\u{307E}\u{3059}\u{3002}`,
    "focusAnnouncement": (args, formatter)=>`${formatter.select({
            true: ()=>`\u{5165}\u{529B}\u{3055}\u{308C}\u{305F}\u{30B0}\u{30EB}\u{30FC}\u{30D7} ${args.groupTitle}\u{3001}${formatter.plural(args.groupCount, {
                    one: ()=>`${formatter.number(args.groupCount)} \u{500B}\u{306E}\u{30AA}\u{30D7}\u{30B7}\u{30E7}\u{30F3}`,
                    other: ()=>`${formatter.number(args.groupCount)} \u{500B}\u{306E}\u{30AA}\u{30D7}\u{30B7}\u{30E7}\u{30F3}`
                })}\u{3092}\u{542B}\u{3080}\u{3002}`,
            other: ``
        }, args.isGroupChange)}${args.optionText}${formatter.select({
            true: `\u{3001}\u{9078}\u{629E}\u{6E08}\u{307F}`,
            other: ``
        }, args.isSelected)}`,
    "listboxLabel": `\u{5019}\u{88DC}`,
    "selectedAnnouncement": (args)=>`${args.optionText}\u{3001}\u{9078}\u{629E}\u{6E08}\u{307F}`
};

var $9246f2c6edc6b232$exports = {};
$9246f2c6edc6b232$exports = {
    "buttonLabel": `\u{C81C}\u{C548} \u{C0AC}\u{D56D} \u{D45C}\u{C2DC}`,
    "countAnnouncement": (args, formatter)=>`${formatter.plural(args.optionCount, {
            one: ()=>`${formatter.number(args.optionCount)}\u{AC1C} \u{C635}\u{C158}`,
            other: ()=>`${formatter.number(args.optionCount)}\u{AC1C} \u{C635}\u{C158}`
        })}\u{C744} \u{C0AC}\u{C6A9}\u{D560} \u{C218} \u{C788}\u{C2B5}\u{B2C8}\u{B2E4}.`,
    "focusAnnouncement": (args, formatter)=>`${formatter.select({
            true: ()=>`\u{C785}\u{B825}\u{D55C} \u{ADF8}\u{B8F9} ${args.groupTitle}, ${formatter.plural(args.groupCount, {
                    one: ()=>`${formatter.number(args.groupCount)}\u{AC1C} \u{C635}\u{C158}`,
                    other: ()=>`${formatter.number(args.groupCount)}\u{AC1C} \u{C635}\u{C158}`
                })}. `,
            other: ``
        }, args.isGroupChange)}${args.optionText}${formatter.select({
            true: `, \u{C120}\u{D0DD}\u{B428}`,
            other: ``
        }, args.isSelected)}`,
    "listboxLabel": `\u{C81C}\u{C548}`,
    "selectedAnnouncement": (args)=>`${args.optionText}, \u{C120}\u{D0DD}\u{B428}`
};

var $e587accc6c0a434c$exports = {};
$e587accc6c0a434c$exports = {
    "buttonLabel": `Rodyti pasi\u{16B}lymus`,
    "countAnnouncement": (args, formatter)=>`Yra ${formatter.plural(args.optionCount, {
            one: ()=>`${formatter.number(args.optionCount)} parinktis`,
            other: ()=>`${formatter.number(args.optionCount)} parinktys (-i\u{173})`
        })}.`,
    "focusAnnouncement": (args, formatter)=>`${formatter.select({
            true: ()=>`\u{12E}vesta grup\u{117} ${args.groupTitle}, su ${formatter.plural(args.groupCount, {
                    one: ()=>`${formatter.number(args.groupCount)} parinktimi`,
                    other: ()=>`${formatter.number(args.groupCount)} parinktimis (-i\u{173})`
                })}. `,
            other: ``
        }, args.isGroupChange)}${args.optionText}${formatter.select({
            true: `, pasirinkta`,
            other: ``
        }, args.isSelected)}`,
    "listboxLabel": `Pasi\u{16B}lymai`,
    "selectedAnnouncement": (args)=>`${args.optionText}, pasirinkta`
};

var $03a1900e7400b5ab$exports = {};
$03a1900e7400b5ab$exports = {
    "buttonLabel": `R\u{101}d\u{12B}t ieteikumus`,
    "countAnnouncement": (args, formatter)=>`Pieejamo opciju skaits: ${formatter.plural(args.optionCount, {
            one: ()=>`${formatter.number(args.optionCount)} opcija`,
            other: ()=>`${formatter.number(args.optionCount)} opcijas`
        })}.`,
    "focusAnnouncement": (args, formatter)=>`${formatter.select({
            true: ()=>`Ievad\u{12B}ta grupa ${args.groupTitle}, ar ${formatter.plural(args.groupCount, {
                    one: ()=>`${formatter.number(args.groupCount)} opciju`,
                    other: ()=>`${formatter.number(args.groupCount)} opcij\u{101}m`
                })}. `,
            other: ``
        }, args.isGroupChange)}${args.optionText}${formatter.select({
            true: `, atlas\u{12B}ta`,
            other: ``
        }, args.isSelected)}`,
    "listboxLabel": `Ieteikumi`,
    "selectedAnnouncement": (args)=>`${args.optionText}, atlas\u{12B}ta`
};

var $1387676441be6cf6$exports = {};
$1387676441be6cf6$exports = {
    "buttonLabel": `Vis forslag`,
    "countAnnouncement": (args, formatter)=>`${formatter.plural(args.optionCount, {
            one: ()=>`${formatter.number(args.optionCount)} alternativ`,
            other: ()=>`${formatter.number(args.optionCount)} alternativer`
        })} finnes.`,
    "focusAnnouncement": (args, formatter)=>`${formatter.select({
            true: ()=>`Angitt gruppe ${args.groupTitle}, med ${formatter.plural(args.groupCount, {
                    one: ()=>`${formatter.number(args.groupCount)} alternativ`,
                    other: ()=>`${formatter.number(args.groupCount)} alternativer`
                })}. `,
            other: ``
        }, args.isGroupChange)}${args.optionText}${formatter.select({
            true: `, valgt`,
            other: ``
        }, args.isSelected)}`,
    "listboxLabel": `Forslag`,
    "selectedAnnouncement": (args)=>`${args.optionText}, valgt`
};

var $17e82ebf0f8ab91f$exports = {};
$17e82ebf0f8ab91f$exports = {
    "buttonLabel": `Suggesties weergeven`,
    "countAnnouncement": (args, formatter)=>`${formatter.plural(args.optionCount, {
            one: ()=>`${formatter.number(args.optionCount)} optie`,
            other: ()=>`${formatter.number(args.optionCount)} opties`
        })} beschikbaar.`,
    "focusAnnouncement": (args, formatter)=>`${formatter.select({
            true: ()=>`Groep ${args.groupTitle} ingevoerd met ${formatter.plural(args.groupCount, {
                    one: ()=>`${formatter.number(args.groupCount)} optie`,
                    other: ()=>`${formatter.number(args.groupCount)} opties`
                })}. `,
            other: ``
        }, args.isGroupChange)}${args.optionText}${formatter.select({
            true: `, geselecteerd`,
            other: ``
        }, args.isSelected)}`,
    "listboxLabel": `Suggesties`,
    "selectedAnnouncement": (args)=>`${args.optionText}, geselecteerd`
};

var $2f5377d3471630e5$exports = {};
$2f5377d3471630e5$exports = {
    "buttonLabel": `Wy\u{15B}wietlaj sugestie`,
    "countAnnouncement": (args, formatter)=>`dost\u{119}pna/dost\u{119}pne(-nych) ${formatter.plural(args.optionCount, {
            one: ()=>`${formatter.number(args.optionCount)} opcja`,
            other: ()=>`${formatter.number(args.optionCount)} opcje(-i)`
        })}.`,
    "focusAnnouncement": (args, formatter)=>`${formatter.select({
            true: ()=>`Do\u{142}\u{105}czono do grupy ${args.groupTitle}, z ${formatter.plural(args.groupCount, {
                    one: ()=>`${formatter.number(args.groupCount)} opcj\u{105}`,
                    other: ()=>`${formatter.number(args.groupCount)} opcjami`
                })}. `,
            other: ``
        }, args.isGroupChange)}${args.optionText}${formatter.select({
            true: `, wybrano`,
            other: ``
        }, args.isSelected)}`,
    "listboxLabel": `Sugestie`,
    "selectedAnnouncement": (args)=>`${args.optionText}, wybrano`
};

var $dee9868b6fa95ffe$exports = {};
$dee9868b6fa95ffe$exports = {
    "buttonLabel": `Mostrar sugest\xf5es`,
    "countAnnouncement": (args, formatter)=>`${formatter.plural(args.optionCount, {
            one: ()=>`${formatter.number(args.optionCount)} op\xe7\xe3o`,
            other: ()=>`${formatter.number(args.optionCount)} op\xe7\xf5es`
        })} dispon\xedvel.`,
    "focusAnnouncement": (args, formatter)=>`${formatter.select({
            true: ()=>`Grupo inserido ${args.groupTitle}, com ${formatter.plural(args.groupCount, {
                    one: ()=>`${formatter.number(args.groupCount)} op\xe7\xe3o`,
                    other: ()=>`${formatter.number(args.groupCount)} op\xe7\xf5es`
                })}. `,
            other: ``
        }, args.isGroupChange)}${args.optionText}${formatter.select({
            true: `, selecionado`,
            other: ``
        }, args.isSelected)}`,
    "listboxLabel": `Sugest\xf5es`,
    "selectedAnnouncement": (args)=>`${args.optionText}, selecionado`
};

var $f8b2e63637cbb5a6$exports = {};
$f8b2e63637cbb5a6$exports = {
    "buttonLabel": `Apresentar sugest\xf5es`,
    "countAnnouncement": (args, formatter)=>`${formatter.plural(args.optionCount, {
            one: ()=>`${formatter.number(args.optionCount)} op\xe7\xe3o`,
            other: ()=>`${formatter.number(args.optionCount)} op\xe7\xf5es`
        })} dispon\xedvel.`,
    "focusAnnouncement": (args, formatter)=>`${formatter.select({
            true: ()=>`Grupo introduzido ${args.groupTitle}, com ${formatter.plural(args.groupCount, {
                    one: ()=>`${formatter.number(args.groupCount)} op\xe7\xe3o`,
                    other: ()=>`${formatter.number(args.groupCount)} op\xe7\xf5es`
                })}. `,
            other: ``
        }, args.isGroupChange)}${args.optionText}${formatter.select({
            true: `, selecionado`,
            other: ``
        }, args.isSelected)}`,
    "listboxLabel": `Sugest\xf5es`,
    "selectedAnnouncement": (args)=>`${args.optionText}, selecionado`
};

var $46a885db3b44ea95$exports = {};
$46a885db3b44ea95$exports = {
    "buttonLabel": `Afi\u{219}are sugestii`,
    "countAnnouncement": (args, formatter)=>`${formatter.plural(args.optionCount, {
            one: ()=>`${formatter.number(args.optionCount)} op\u{21B}iune`,
            other: ()=>`${formatter.number(args.optionCount)} op\u{21B}iuni`
        })} disponibile.`,
    "focusAnnouncement": (args, formatter)=>`${formatter.select({
            true: ()=>`Grup ${args.groupTitle} introdus, cu ${formatter.plural(args.groupCount, {
                    one: ()=>`${formatter.number(args.groupCount)} op\u{21B}iune`,
                    other: ()=>`${formatter.number(args.groupCount)} op\u{21B}iuni`
                })}. `,
            other: ``
        }, args.isGroupChange)}${args.optionText}${formatter.select({
            true: `, selectat`,
            other: ``
        }, args.isSelected)}`,
    "listboxLabel": `Sugestii`,
    "selectedAnnouncement": (args)=>`${args.optionText}, selectat`
};

var $50d8a8f0afa9dee5$exports = {};
$50d8a8f0afa9dee5$exports = {
    "buttonLabel": `\u{41F}\u{43E}\u{43A}\u{430}\u{437}\u{430}\u{442}\u{44C} \u{43F}\u{440}\u{435}\u{434}\u{43B}\u{43E}\u{436}\u{435}\u{43D}\u{438}\u{44F}`,
    "countAnnouncement": (args, formatter)=>`${formatter.plural(args.optionCount, {
            one: ()=>`${formatter.number(args.optionCount)} \u{43F}\u{430}\u{440}\u{430}\u{43C}\u{435}\u{442}\u{440}`,
            other: ()=>`${formatter.number(args.optionCount)} \u{43F}\u{430}\u{440}\u{430}\u{43C}\u{435}\u{442}\u{440}\u{43E}\u{432}`
        })} \u{434}\u{43E}\u{441}\u{442}\u{443}\u{43F}\u{43D}\u{43E}.`,
    "focusAnnouncement": (args, formatter)=>`${formatter.select({
            true: ()=>`\u{412}\u{432}\u{435}\u{434}\u{435}\u{43D}\u{43D}\u{430}\u{44F} \u{433}\u{440}\u{443}\u{43F}\u{43F}\u{430} ${args.groupTitle}, \u{441} ${formatter.plural(args.groupCount, {
                    one: ()=>`${formatter.number(args.groupCount)} \u{43F}\u{430}\u{440}\u{430}\u{43C}\u{435}\u{442}\u{440}\u{43E}\u{43C}`,
                    other: ()=>`${formatter.number(args.groupCount)} \u{43F}\u{430}\u{440}\u{430}\u{43C}\u{435}\u{442}\u{440}\u{430}\u{43C}\u{438}`
                })}. `,
            other: ``
        }, args.isGroupChange)}${args.optionText}${formatter.select({
            true: `, \u{432}\u{44B}\u{431}\u{440}\u{430}\u{43D}\u{43D}\u{44B}\u{43C}\u{438}`,
            other: ``
        }, args.isSelected)}`,
    "listboxLabel": `\u{41F}\u{440}\u{435}\u{434}\u{43B}\u{43E}\u{436}\u{435}\u{43D}\u{438}\u{44F}`,
    "selectedAnnouncement": (args)=>`${args.optionText}, \u{432}\u{44B}\u{431}\u{440}\u{430}\u{43D}\u{43E}`
};

var $2867ee6173245507$exports = {};
$2867ee6173245507$exports = {
    "buttonLabel": `Zobrazi\u{165} n\xe1vrhy`,
    "countAnnouncement": (args, formatter)=>`${formatter.plural(args.optionCount, {
            one: ()=>`${formatter.number(args.optionCount)} mo\u{17E}nos\u{165}`,
            other: ()=>`${formatter.number(args.optionCount)} mo\u{17E}nosti/-\xed`
        })} k dispoz\xedcii.`,
    "focusAnnouncement": (args, formatter)=>`${formatter.select({
            true: ()=>`Zadan\xe1 skupina ${args.groupTitle}, s ${formatter.plural(args.groupCount, {
                    one: ()=>`${formatter.number(args.groupCount)} mo\u{17E}nos\u{165}ou`,
                    other: ()=>`${formatter.number(args.groupCount)} mo\u{17E}nos\u{165}ami`
                })}. `,
            other: ``
        }, args.isGroupChange)}${args.optionText}${formatter.select({
            true: `, vybrat\xe9`,
            other: ``
        }, args.isSelected)}`,
    "listboxLabel": `N\xe1vrhy`,
    "selectedAnnouncement": (args)=>`${args.optionText}, vybrat\xe9`
};

var $0631b65beeb09b50$exports = {};
$0631b65beeb09b50$exports = {
    "buttonLabel": `Prika\u{17E}i predloge`,
    "countAnnouncement": (args, formatter)=>`Na voljo je ${formatter.plural(args.optionCount, {
            one: ()=>`${formatter.number(args.optionCount)} opcija`,
            other: ()=>`${formatter.number(args.optionCount)} opcije`
        })}.`,
    "focusAnnouncement": (args, formatter)=>`${formatter.select({
            true: ()=>`Vnesena skupina ${args.groupTitle}, z ${formatter.plural(args.groupCount, {
                    one: ()=>`${formatter.number(args.groupCount)} opcija`,
                    other: ()=>`${formatter.number(args.groupCount)} opcije`
                })}. `,
            other: ``
        }, args.isGroupChange)}${args.optionText}${formatter.select({
            true: `, izbrano`,
            other: ``
        }, args.isSelected)}`,
    "listboxLabel": `Predlogi`,
    "selectedAnnouncement": (args)=>`${args.optionText}, izbrano`
};

var $65fc749265dcd686$exports = {};
$65fc749265dcd686$exports = {
    "buttonLabel": `Prika\u{17E}i predloge`,
    "countAnnouncement": (args, formatter)=>`Dostupno jo\u{161}: ${formatter.plural(args.optionCount, {
            one: ()=>`${formatter.number(args.optionCount)} opcija`,
            other: ()=>`${formatter.number(args.optionCount)} opcije/a`
        })}.`,
    "focusAnnouncement": (args, formatter)=>`${formatter.select({
            true: ()=>`Unesena grupa ${args.groupTitle}, s ${formatter.plural(args.groupCount, {
                    one: ()=>`${formatter.number(args.groupCount)} opcijom`,
                    other: ()=>`${formatter.number(args.groupCount)} optione/a`
                })}. `,
            other: ``
        }, args.isGroupChange)}${args.optionText}${formatter.select({
            true: `, izabranih`,
            other: ``
        }, args.isSelected)}`,
    "listboxLabel": `Predlozi`,
    "selectedAnnouncement": (args)=>`${args.optionText}, izabrano`
};

var $69ba655c7853c08e$exports = {};
$69ba655c7853c08e$exports = {
    "buttonLabel": `Visa f\xf6rslag`,
    "countAnnouncement": (args, formatter)=>`${formatter.plural(args.optionCount, {
            one: ()=>`${formatter.number(args.optionCount)} alternativ`,
            other: ()=>`${formatter.number(args.optionCount)} alternativ`
        })} tillg\xe4ngliga.`,
    "focusAnnouncement": (args, formatter)=>`${formatter.select({
            true: ()=>`Ingick i gruppen ${args.groupTitle} med ${formatter.plural(args.groupCount, {
                    one: ()=>`${formatter.number(args.groupCount)} alternativ`,
                    other: ()=>`${formatter.number(args.groupCount)} alternativ`
                })}. `,
            other: ``
        }, args.isGroupChange)}${args.optionText}${formatter.select({
            true: `, valda`,
            other: ``
        }, args.isSelected)}`,
    "listboxLabel": `F\xf6rslag`,
    "selectedAnnouncement": (args)=>`${args.optionText}, valda`
};

var $a79794784d61577c$exports = {};
$a79794784d61577c$exports = {
    "buttonLabel": `\xd6nerileri g\xf6ster`,
    "countAnnouncement": (args, formatter)=>`${formatter.plural(args.optionCount, {
            one: ()=>`${formatter.number(args.optionCount)} se\xe7enek`,
            other: ()=>`${formatter.number(args.optionCount)} se\xe7enekler`
        })} kullan\u{131}labilir.`,
    "focusAnnouncement": (args, formatter)=>`${formatter.select({
            true: ()=>`Girilen grup ${args.groupTitle}, ile ${formatter.plural(args.groupCount, {
                    one: ()=>`${formatter.number(args.groupCount)} se\xe7enek`,
                    other: ()=>`${formatter.number(args.groupCount)} se\xe7enekler`
                })}. `,
            other: ``
        }, args.isGroupChange)}${args.optionText}${formatter.select({
            true: `, se\xe7ildi`,
            other: ``
        }, args.isSelected)}`,
    "listboxLabel": `\xd6neriler`,
    "selectedAnnouncement": (args)=>`${args.optionText}, se\xe7ildi`
};

var $c2845791417ebaf4$exports = {};
$c2845791417ebaf4$exports = {
    "buttonLabel": `\u{41F}\u{43E}\u{43A}\u{430}\u{437}\u{430}\u{442}\u{438} \u{43F}\u{440}\u{43E}\u{43F}\u{43E}\u{437}\u{438}\u{446}\u{456}\u{457}`,
    "countAnnouncement": (args, formatter)=>`${formatter.plural(args.optionCount, {
            one: ()=>`${formatter.number(args.optionCount)} \u{43F}\u{430}\u{440}\u{430}\u{43C}\u{435}\u{442}\u{440}`,
            other: ()=>`${formatter.number(args.optionCount)} \u{43F}\u{430}\u{440}\u{430}\u{43C}\u{435}\u{442}\u{440}\u{438}(-\u{456}\u{432})`
        })} \u{434}\u{43E}\u{441}\u{442}\u{443}\u{43F}\u{43D}\u{43E}.`,
    "focusAnnouncement": (args, formatter)=>`${formatter.select({
            true: ()=>`\u{412}\u{432}\u{435}\u{434}\u{435}\u{43D}\u{430} \u{433}\u{440}\u{443}\u{43F}\u{430} ${args.groupTitle}, \u{437} ${formatter.plural(args.groupCount, {
                    one: ()=>`${formatter.number(args.groupCount)} \u{43F}\u{430}\u{440}\u{430}\u{43C}\u{435}\u{442}\u{440}`,
                    other: ()=>`${formatter.number(args.groupCount)} \u{43F}\u{430}\u{440}\u{430}\u{43C}\u{435}\u{442}\u{440}\u{438}(-\u{456}\u{432})`
                })}. `,
            other: ``
        }, args.isGroupChange)}${args.optionText}${formatter.select({
            true: `, \u{432}\u{438}\u{431}\u{440}\u{430}\u{43D}\u{43E}`,
            other: ``
        }, args.isSelected)}`,
    "listboxLabel": `\u{41F}\u{440}\u{43E}\u{43F}\u{43E}\u{437}\u{438}\u{446}\u{456}\u{457}`,
    "selectedAnnouncement": (args)=>`${args.optionText}, \u{432}\u{438}\u{431}\u{440}\u{430}\u{43D}\u{43E}`
};

var $29b642d0025cc7a4$exports = {};
$29b642d0025cc7a4$exports = {
    "buttonLabel": `\u{663E}\u{793A}\u{5EFA}\u{8BAE}`,
    "countAnnouncement": (args, formatter)=>`\u{6709} ${formatter.plural(args.optionCount, {
            one: ()=>`${formatter.number(args.optionCount)} \u{4E2A}\u{9009}\u{9879}`,
            other: ()=>`${formatter.number(args.optionCount)} \u{4E2A}\u{9009}\u{9879}`
        })}\u{53EF}\u{7528}\u{3002}`,
    "focusAnnouncement": (args, formatter)=>`${formatter.select({
            true: ()=>`\u{8FDB}\u{5165}\u{4E86} ${args.groupTitle} \u{7EC4}\u{FF0C}\u{5176}\u{4E2D}\u{6709} ${formatter.plural(args.groupCount, {
                    one: ()=>`${formatter.number(args.groupCount)} \u{4E2A}\u{9009}\u{9879}`,
                    other: ()=>`${formatter.number(args.groupCount)} \u{4E2A}\u{9009}\u{9879}`
                })}. `,
            other: ``
        }, args.isGroupChange)}${args.optionText}${formatter.select({
            true: `, \u{5DF2}\u{9009}\u{62E9}`,
            other: ``
        }, args.isSelected)}`,
    "listboxLabel": `\u{5EFA}\u{8BAE}`,
    "selectedAnnouncement": (args)=>`${args.optionText}, \u{5DF2}\u{9009}\u{62E9}`
};

var $cd36dd33f9d46936$exports = {};
$cd36dd33f9d46936$exports = {
    "buttonLabel": `\u{986F}\u{793A}\u{5EFA}\u{8B70}`,
    "countAnnouncement": (args, formatter)=>`${formatter.plural(args.optionCount, {
            one: ()=>`${formatter.number(args.optionCount)} \u{9078}\u{9805}`,
            other: ()=>`${formatter.number(args.optionCount)} \u{9078}\u{9805}`
        })} \u{53EF}\u{7528}\u{3002}`,
    "focusAnnouncement": (args, formatter)=>`${formatter.select({
            true: ()=>`\u{8F38}\u{5165}\u{7684}\u{7FA4}\u{7D44} ${args.groupTitle}, \u{6709} ${formatter.plural(args.groupCount, {
                    one: ()=>`${formatter.number(args.groupCount)} \u{9078}\u{9805}`,
                    other: ()=>`${formatter.number(args.groupCount)} \u{9078}\u{9805}`
                })}. `,
            other: ``
        }, args.isGroupChange)}${args.optionText}${formatter.select({
            true: `, \u{5DF2}\u{9078}\u{53D6}`,
            other: ``
        }, args.isSelected)}`,
    "listboxLabel": `\u{5EFA}\u{8B70}`,
    "selectedAnnouncement": (args)=>`${args.optionText}, \u{5DF2}\u{9078}\u{53D6}`
};

var $de5926a92e8ebc5b$exports = {};


































$de5926a92e8ebc5b$exports = {
    "ar-AE": $02cb4c75c506befe$exports,
    "bg-BG": $568b8163f1e56faf$exports,
    "cs-CZ": $87581c0202d106b8$exports,
    "da-DK": $a10a0369f5433ed1$exports,
    "de-DE": $bfd288727d5cb166$exports,
    "el-GR": $ca177778f9a74e3c$exports,
    "en-US": $9b5aa79ef84beb6c$exports,
    "es-ES": $57968e8209de2557$exports,
    "et-EE": $60690790bf4c1c6a$exports,
    "fi-FI": $1101246e8c7d9357$exports,
    "fr-FR": $6404b5cb5b241730$exports,
    "he-IL": $dfeafa702e92e31f$exports,
    "hr-HR": $2d125e0b34676352$exports,
    "hu-HU": $ea029611d7634059$exports,
    "it-IT": $77f075bb86ad7091$exports,
    "ja-JP": $6e87462e84907983$exports,
    "ko-KR": $9246f2c6edc6b232$exports,
    "lt-LT": $e587accc6c0a434c$exports,
    "lv-LV": $03a1900e7400b5ab$exports,
    "nb-NO": $1387676441be6cf6$exports,
    "nl-NL": $17e82ebf0f8ab91f$exports,
    "pl-PL": $2f5377d3471630e5$exports,
    "pt-BR": $dee9868b6fa95ffe$exports,
    "pt-PT": $f8b2e63637cbb5a6$exports,
    "ro-RO": $46a885db3b44ea95$exports,
    "ru-RU": $50d8a8f0afa9dee5$exports,
    "sk-SK": $2867ee6173245507$exports,
    "sl-SI": $0631b65beeb09b50$exports,
    "sr-SP": $65fc749265dcd686$exports,
    "sv-SE": $69ba655c7853c08e$exports,
    "tr-TR": $a79794784d61577c$exports,
    "uk-UA": $c2845791417ebaf4$exports,
    "zh-CN": $29b642d0025cc7a4$exports,
    "zh-TW": $cd36dd33f9d46936$exports
};

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 
const $edcf132a9284368a$var$AXIS = {
    top: 'top',
    bottom: 'top',
    left: 'left',
    right: 'left'
};
const $edcf132a9284368a$var$FLIPPED_DIRECTION = {
    top: 'bottom',
    bottom: 'top',
    left: 'right',
    right: 'left'
};
const $edcf132a9284368a$var$CROSS_AXIS = {
    top: 'left',
    left: 'top'
};
const $edcf132a9284368a$var$AXIS_SIZE = {
    top: 'height',
    left: 'width'
};
const $edcf132a9284368a$var$TOTAL_SIZE = {
    width: 'totalWidth',
    height: 'totalHeight'
};
const $edcf132a9284368a$var$PARSED_PLACEMENT_CACHE = {};
// @ts-ignore
let $edcf132a9284368a$var$visualViewport = typeof document !== 'undefined' && window.visualViewport;
function $edcf132a9284368a$var$getContainerDimensions(containerNode) {
    let width = 0, height = 0, totalWidth = 0, totalHeight = 0, top = 0, left = 0;
    let scroll = {};
    let isPinchZoomedIn = ($edcf132a9284368a$var$visualViewport === null || $edcf132a9284368a$var$visualViewport === void 0 ? void 0 : $edcf132a9284368a$var$visualViewport.scale) > 1;
    if (containerNode.tagName === 'BODY') {
        let documentElement = document.documentElement;
        totalWidth = documentElement.clientWidth;
        totalHeight = documentElement.clientHeight;
        var _visualViewport_width;
        width = (_visualViewport_width = $edcf132a9284368a$var$visualViewport === null || $edcf132a9284368a$var$visualViewport === void 0 ? void 0 : $edcf132a9284368a$var$visualViewport.width) !== null && _visualViewport_width !== void 0 ? _visualViewport_width : totalWidth;
        var _visualViewport_height;
        height = (_visualViewport_height = $edcf132a9284368a$var$visualViewport === null || $edcf132a9284368a$var$visualViewport === void 0 ? void 0 : $edcf132a9284368a$var$visualViewport.height) !== null && _visualViewport_height !== void 0 ? _visualViewport_height : totalHeight;
        scroll.top = documentElement.scrollTop || containerNode.scrollTop;
        scroll.left = documentElement.scrollLeft || containerNode.scrollLeft;
        // The goal of the below is to get a top/left value that represents the top/left of the visual viewport with
        // respect to the layout viewport origin. This combined with the scrollTop/scrollLeft will allow us to calculate
        // coordinates/values with respect to the visual viewport or with respect to the layout viewport.
        if ($edcf132a9284368a$var$visualViewport) {
            top = $edcf132a9284368a$var$visualViewport.offsetTop;
            left = $edcf132a9284368a$var$visualViewport.offsetLeft;
        }
    } else {
        ({ width: width, height: height, top: top, left: left } = $edcf132a9284368a$var$getOffset(containerNode));
        scroll.top = containerNode.scrollTop;
        scroll.left = containerNode.scrollLeft;
        totalWidth = width;
        totalHeight = height;
    }
    if (($c87311424ea30a05$export$78551043582a6a98)() && (containerNode.tagName === 'BODY' || containerNode.tagName === 'HTML') && isPinchZoomedIn) {
        // Safari will report a non-zero scrollTop/Left for the non-scrolling body/HTML element when pinch zoomed in unlike other browsers.
        // Set to zero for parity calculations so we get consistent positioning of overlays across all browsers.
        // Also switch to visualViewport.pageTop/pageLeft so that we still accomodate for scroll positioning for body/HTML elements that are actually scrollable
        // before pinch zoom happens
        scroll.top = 0;
        scroll.left = 0;
        top = $edcf132a9284368a$var$visualViewport.pageTop;
        left = $edcf132a9284368a$var$visualViewport.pageLeft;
    }
    return {
        width: width,
        height: height,
        totalWidth: totalWidth,
        totalHeight: totalHeight,
        scroll: scroll,
        top: top,
        left: left
    };
}
function $edcf132a9284368a$var$getScroll(node) {
    return {
        top: node.scrollTop,
        left: node.scrollLeft,
        width: node.scrollWidth,
        height: node.scrollHeight
    };
}
// Determines the amount of space required when moving the overlay to ensure it remains in the boundary
function $edcf132a9284368a$var$getDelta(axis, offset, size, // The dimensions of the boundary element that the popover is
// positioned within (most of the time this is the <body>).
boundaryDimensions, // The dimensions of the containing block element that the popover is
// positioned relative to (e.g. parent with position: relative).
// Usually this is the same as the boundary element, but if the popover
// is portaled somewhere other than the body and has an ancestor with
// position: relative/absolute, it will be different.
containerDimensions, padding, containerOffsetWithBoundary) {
    let containerScroll = containerDimensions.scroll[axis];
    // The height/width of the boundary. Matches the axis along which we are adjusting the overlay position
    let boundarySize = boundaryDimensions[$edcf132a9284368a$var$AXIS_SIZE[axis]];
    // Calculate the edges of the boundary (accomodating for the boundary padding) and the edges of the overlay.
    // Note that these values are with respect to the visual viewport (aka 0,0 is the top left of the viewport)
    let boundaryStartEdge = boundaryDimensions.scroll[$edcf132a9284368a$var$AXIS[axis]] + padding;
    let boundaryEndEdge = boundarySize + boundaryDimensions.scroll[$edcf132a9284368a$var$AXIS[axis]] - padding;
    let startEdgeOffset = offset - containerScroll + containerOffsetWithBoundary[axis] - boundaryDimensions[$edcf132a9284368a$var$AXIS[axis]];
    let endEdgeOffset = offset - containerScroll + size + containerOffsetWithBoundary[axis] - boundaryDimensions[$edcf132a9284368a$var$AXIS[axis]];
    // If any of the overlay edges falls outside of the boundary, shift the overlay the required amount to align one of the overlay's
    // edges with the closest boundary edge.
    if (startEdgeOffset < boundaryStartEdge) return boundaryStartEdge - startEdgeOffset;
    else if (endEdgeOffset > boundaryEndEdge) return Math.max(boundaryEndEdge - endEdgeOffset, boundaryStartEdge - startEdgeOffset);
    else return 0;
}
function $edcf132a9284368a$var$getMargins(node) {
    let style = window.getComputedStyle(node);
    return {
        top: parseInt(style.marginTop, 10) || 0,
        bottom: parseInt(style.marginBottom, 10) || 0,
        left: parseInt(style.marginLeft, 10) || 0,
        right: parseInt(style.marginRight, 10) || 0
    };
}
function $edcf132a9284368a$var$parsePlacement(input) {
    if ($edcf132a9284368a$var$PARSED_PLACEMENT_CACHE[input]) return $edcf132a9284368a$var$PARSED_PLACEMENT_CACHE[input];
    let [placement, crossPlacement] = input.split(' ');
    let axis = $edcf132a9284368a$var$AXIS[placement] || 'right';
    let crossAxis = $edcf132a9284368a$var$CROSS_AXIS[axis];
    if (!$edcf132a9284368a$var$AXIS[crossPlacement]) crossPlacement = 'center';
    let size = $edcf132a9284368a$var$AXIS_SIZE[axis];
    let crossSize = $edcf132a9284368a$var$AXIS_SIZE[crossAxis];
    $edcf132a9284368a$var$PARSED_PLACEMENT_CACHE[input] = {
        placement: placement,
        crossPlacement: crossPlacement,
        axis: axis,
        crossAxis: crossAxis,
        size: size,
        crossSize: crossSize
    };
    return $edcf132a9284368a$var$PARSED_PLACEMENT_CACHE[input];
}
function $edcf132a9284368a$var$computePosition(childOffset, boundaryDimensions, overlaySize, placementInfo, offset, crossOffset, containerOffsetWithBoundary, isContainerPositioned, arrowSize, arrowBoundaryOffset) {
    let { placement: placement, crossPlacement: crossPlacement, axis: axis, crossAxis: crossAxis, size: size, crossSize: crossSize } = placementInfo;
    let position = {};
    // button position
    position[crossAxis] = childOffset[crossAxis];
    if (crossPlacement === 'center') //  + (button size / 2) - (overlay size / 2)
    // at this point the overlay center should match the button center
    position[crossAxis] += (childOffset[crossSize] - overlaySize[crossSize]) / 2;
    else if (crossPlacement !== crossAxis) //  + (button size) - (overlay size)
    // at this point the overlay bottom should match the button bottom
    position[crossAxis] += childOffset[crossSize] - overlaySize[crossSize];
     /* else {
    the overlay top should match the button top
  } */ 
    position[crossAxis] += crossOffset;
    // overlay top overlapping arrow with button bottom
    const minPosition = childOffset[crossAxis] - overlaySize[crossSize] + arrowSize + arrowBoundaryOffset;
    // overlay bottom overlapping arrow with button top
    const maxPosition = childOffset[crossAxis] + childOffset[crossSize] - arrowSize - arrowBoundaryOffset;
    position[crossAxis] = ($9446cca9a3875146$export$7d15b64cf5a3a4c4)(position[crossAxis], minPosition, maxPosition);
    // Floor these so the position isn't placed on a partial pixel, only whole pixels. Shouldn't matter if it was floored or ceiled, so chose one.
    if (placement === axis) {
        // If the container is positioned (non-static), then we use the container's actual
        // height, as `bottom` will be relative to this height.  But if the container is static,
        // then it can only be the `document.body`, and `bottom` will be relative to _its_
        // container, which should be as large as boundaryDimensions.
        const containerHeight = isContainerPositioned ? containerOffsetWithBoundary[size] : boundaryDimensions[$edcf132a9284368a$var$TOTAL_SIZE[size]];
        position[$edcf132a9284368a$var$FLIPPED_DIRECTION[axis]] = Math.floor(containerHeight - childOffset[axis] + offset);
    } else position[axis] = Math.floor(childOffset[axis] + childOffset[size] + offset);
    return position;
}
function $edcf132a9284368a$var$getMaxHeight(position, boundaryDimensions, containerOffsetWithBoundary, isContainerPositioned, margins, padding, overlayHeight, heightGrowthDirection) {
    const containerHeight = isContainerPositioned ? containerOffsetWithBoundary.height : boundaryDimensions[$edcf132a9284368a$var$TOTAL_SIZE.height];
    // For cases where position is set via "bottom" instead of "top", we need to calculate the true overlay top with respect to the boundary. Reverse calculate this with the same method
    // used in computePosition.
    let overlayTop = position.top != null ? containerOffsetWithBoundary.top + position.top : containerOffsetWithBoundary.top + (containerHeight - position.bottom - overlayHeight);
    let maxHeight = heightGrowthDirection !== 'top' ? // We want the distance between the top of the overlay to the bottom of the boundary
    Math.max(0, boundaryDimensions.height + boundaryDimensions.top + boundaryDimensions.scroll.top // this is the bottom of the boundary
     - overlayTop // this is the top of the overlay
     - (margins.top + margins.bottom + padding // save additional space for margin and padding
    )) : Math.max(0, overlayTop + overlayHeight // this is the bottom of the overlay
     - (boundaryDimensions.top + boundaryDimensions.scroll.top // this is the top of the boundary
    ) - (margins.top + margins.bottom + padding // save additional space for margin and padding
    ));
    return Math.min(boundaryDimensions.height - padding * 2, maxHeight);
}
function $edcf132a9284368a$var$getAvailableSpace(boundaryDimensions, containerOffsetWithBoundary, childOffset, margins, padding, placementInfo) {
    let { placement: placement, axis: axis, size: size } = placementInfo;
    if (placement === axis) return Math.max(0, childOffset[axis] - boundaryDimensions[axis] - boundaryDimensions.scroll[axis] + containerOffsetWithBoundary[axis] - margins[axis] - margins[$edcf132a9284368a$var$FLIPPED_DIRECTION[axis]] - padding);
    return Math.max(0, boundaryDimensions[size] + boundaryDimensions[axis] + boundaryDimensions.scroll[axis] - containerOffsetWithBoundary[axis] - childOffset[axis] - childOffset[size] - margins[axis] - margins[$edcf132a9284368a$var$FLIPPED_DIRECTION[axis]] - padding);
}
function $edcf132a9284368a$export$6839422d1f33cee9(placementInput, childOffset, overlaySize, scrollSize, margins, padding, flip, boundaryDimensions, containerDimensions, containerOffsetWithBoundary, offset, crossOffset, isContainerPositioned, userSetMaxHeight, arrowSize, arrowBoundaryOffset) {
    let placementInfo = $edcf132a9284368a$var$parsePlacement(placementInput);
    let { size: size, crossAxis: crossAxis, crossSize: crossSize, placement: placement, crossPlacement: crossPlacement } = placementInfo;
    let position = $edcf132a9284368a$var$computePosition(childOffset, boundaryDimensions, overlaySize, placementInfo, offset, crossOffset, containerOffsetWithBoundary, isContainerPositioned, arrowSize, arrowBoundaryOffset);
    let normalizedOffset = offset;
    let space = $edcf132a9284368a$var$getAvailableSpace(boundaryDimensions, containerOffsetWithBoundary, childOffset, margins, padding + offset, placementInfo);
    // Check if the scroll size of the overlay is greater than the available space to determine if we need to flip
    if (flip && scrollSize[size] > space) {
        let flippedPlacementInfo = $edcf132a9284368a$var$parsePlacement(`${$edcf132a9284368a$var$FLIPPED_DIRECTION[placement]} ${crossPlacement}`);
        let flippedPosition = $edcf132a9284368a$var$computePosition(childOffset, boundaryDimensions, overlaySize, flippedPlacementInfo, offset, crossOffset, containerOffsetWithBoundary, isContainerPositioned, arrowSize, arrowBoundaryOffset);
        let flippedSpace = $edcf132a9284368a$var$getAvailableSpace(boundaryDimensions, containerOffsetWithBoundary, childOffset, margins, padding + offset, flippedPlacementInfo);
        // If the available space for the flipped position is greater than the original available space, flip.
        if (flippedSpace > space) {
            placementInfo = flippedPlacementInfo;
            position = flippedPosition;
            normalizedOffset = offset;
        }
    }
    // Determine the direction the height of the overlay can grow so that we can choose how to calculate the max height
    let heightGrowthDirection = 'bottom';
    if (placementInfo.axis === 'top') {
        if (placementInfo.placement === 'top') heightGrowthDirection = 'top';
        else if (placementInfo.placement === 'bottom') heightGrowthDirection = 'bottom';
    } else if (placementInfo.crossAxis === 'top') {
        if (placementInfo.crossPlacement === 'top') heightGrowthDirection = 'bottom';
        else if (placementInfo.crossPlacement === 'bottom') heightGrowthDirection = 'top';
    }
    let delta = $edcf132a9284368a$var$getDelta(crossAxis, position[crossAxis], overlaySize[crossSize], boundaryDimensions, containerDimensions, padding, containerOffsetWithBoundary);
    position[crossAxis] += delta;
    let maxHeight = $edcf132a9284368a$var$getMaxHeight(position, boundaryDimensions, containerOffsetWithBoundary, isContainerPositioned, margins, padding, overlaySize.height, heightGrowthDirection);
    if (userSetMaxHeight && userSetMaxHeight < maxHeight) maxHeight = userSetMaxHeight;
    overlaySize.height = Math.min(overlaySize.height, maxHeight);
    position = $edcf132a9284368a$var$computePosition(childOffset, boundaryDimensions, overlaySize, placementInfo, normalizedOffset, crossOffset, containerOffsetWithBoundary, isContainerPositioned, arrowSize, arrowBoundaryOffset);
    delta = $edcf132a9284368a$var$getDelta(crossAxis, position[crossAxis], overlaySize[crossSize], boundaryDimensions, containerDimensions, padding, containerOffsetWithBoundary);
    position[crossAxis] += delta;
    let arrowPosition = {};
    // All values are transformed so that 0 is at the top/left of the overlay depending on the orientation
    // Prefer the arrow being in the center of the trigger/overlay anchor element
    // childOffset[crossAxis] + .5 * childOffset[crossSize] = absolute position with respect to the trigger's coordinate system that would place the arrow in the center of the trigger
    // position[crossAxis] - margins[AXIS[crossAxis]] = value use to transform the position to a value with respect to the overlay's coordinate system. A child element's (aka arrow) position absolute's "0"
    // is positioned after the margin of its parent (aka overlay) so we need to subtract it to get the proper coordinate transform
    let preferredArrowPosition = childOffset[crossAxis] + .5 * childOffset[crossSize] - position[crossAxis] - margins[$edcf132a9284368a$var$AXIS[crossAxis]];
    // Min/Max position limits for the arrow with respect to the overlay
    const arrowMinPosition = arrowSize / 2 + arrowBoundaryOffset;
    // overlaySize[crossSize] - margins = true size of the overlay
    const overlayMargin = $edcf132a9284368a$var$AXIS[crossAxis] === 'left' ? margins.left + margins.right : margins.top + margins.bottom;
    const arrowMaxPosition = overlaySize[crossSize] - overlayMargin - arrowSize / 2 - arrowBoundaryOffset;
    // Min/Max position limits for the arrow with respect to the trigger/overlay anchor element
    // Same margin accomodation done here as well as for the preferredArrowPosition
    const arrowOverlappingChildMinEdge = childOffset[crossAxis] + arrowSize / 2 - (position[crossAxis] + margins[$edcf132a9284368a$var$AXIS[crossAxis]]);
    const arrowOverlappingChildMaxEdge = childOffset[crossAxis] + childOffset[crossSize] - arrowSize / 2 - (position[crossAxis] + margins[$edcf132a9284368a$var$AXIS[crossAxis]]);
    // Clamp the arrow positioning so that it always is within the bounds of the anchor and the overlay
    const arrowPositionOverlappingChild = ($9446cca9a3875146$export$7d15b64cf5a3a4c4)(preferredArrowPosition, arrowOverlappingChildMinEdge, arrowOverlappingChildMaxEdge);
    arrowPosition[crossAxis] = ($9446cca9a3875146$export$7d15b64cf5a3a4c4)(arrowPositionOverlappingChild, arrowMinPosition, arrowMaxPosition);
    return {
        position: position,
        maxHeight: maxHeight,
        arrowOffsetLeft: arrowPosition.left,
        arrowOffsetTop: arrowPosition.top,
        placement: placementInfo.placement
    };
}
function $edcf132a9284368a$export$b3ceb0cbf1056d98(opts) {
    let { placement: placement, targetNode: targetNode, overlayNode: overlayNode, scrollNode: scrollNode, padding: padding, shouldFlip: shouldFlip, boundaryElement: boundaryElement, offset: offset, crossOffset: crossOffset, maxHeight: maxHeight, arrowSize: arrowSize = 0, arrowBoundaryOffset: arrowBoundaryOffset = 0 } = opts;
    let container = overlayNode instanceof HTMLElement ? $edcf132a9284368a$var$getContainingBlock(overlayNode) : document.documentElement;
    let isViewportContainer = container === document.documentElement;
    const containerPositionStyle = window.getComputedStyle(container).position;
    let isContainerPositioned = !!containerPositionStyle && containerPositionStyle !== 'static';
    let childOffset = isViewportContainer ? $edcf132a9284368a$var$getOffset(targetNode) : $edcf132a9284368a$var$getPosition(targetNode, container);
    if (!isViewportContainer) {
        let { marginTop: marginTop, marginLeft: marginLeft } = window.getComputedStyle(targetNode);
        childOffset.top += parseInt(marginTop, 10) || 0;
        childOffset.left += parseInt(marginLeft, 10) || 0;
    }
    let overlaySize = $edcf132a9284368a$var$getOffset(overlayNode);
    let margins = $edcf132a9284368a$var$getMargins(overlayNode);
    overlaySize.width += margins.left + margins.right;
    overlaySize.height += margins.top + margins.bottom;
    let scrollSize = $edcf132a9284368a$var$getScroll(scrollNode);
    let boundaryDimensions = $edcf132a9284368a$var$getContainerDimensions(boundaryElement);
    let containerDimensions = $edcf132a9284368a$var$getContainerDimensions(container);
    // If the container is the HTML element wrapping the body element, the retrieved scrollTop/scrollLeft will be equal to the
    // body element's scroll. Set the container's scroll values to 0 since the overlay's edge position value in getDelta don't then need to be further offset
    // by the container scroll since they are essentially the same containing element and thus in the same coordinate system
    let containerOffsetWithBoundary = boundaryElement.tagName === 'BODY' ? $edcf132a9284368a$var$getOffset(container) : $edcf132a9284368a$var$getPosition(container, boundaryElement);
    if (container.tagName === 'HTML' && boundaryElement.tagName === 'BODY') {
        containerDimensions.scroll.top = 0;
        containerDimensions.scroll.left = 0;
    }
    return $edcf132a9284368a$export$6839422d1f33cee9(placement, childOffset, overlaySize, scrollSize, margins, padding, shouldFlip, boundaryDimensions, containerDimensions, containerOffsetWithBoundary, offset, crossOffset, isContainerPositioned, maxHeight, arrowSize, arrowBoundaryOffset);
}
function $edcf132a9284368a$var$getOffset(node) {
    let { top: top, left: left, width: width, height: height } = node.getBoundingClientRect();
    let { scrollTop: scrollTop, scrollLeft: scrollLeft, clientTop: clientTop, clientLeft: clientLeft } = document.documentElement;
    return {
        top: top + scrollTop - clientTop,
        left: left + scrollLeft - clientLeft,
        width: width,
        height: height
    };
}
function $edcf132a9284368a$var$getPosition(node, parent) {
    let style = window.getComputedStyle(node);
    let offset;
    if (style.position === 'fixed') {
        let { top: top, left: left, width: width, height: height } = node.getBoundingClientRect();
        offset = {
            top: top,
            left: left,
            width: width,
            height: height
        };
    } else {
        offset = $edcf132a9284368a$var$getOffset(node);
        let parentOffset = $edcf132a9284368a$var$getOffset(parent);
        let parentStyle = window.getComputedStyle(parent);
        parentOffset.top += (parseInt(parentStyle.borderTopWidth, 10) || 0) - parent.scrollTop;
        parentOffset.left += (parseInt(parentStyle.borderLeftWidth, 10) || 0) - parent.scrollLeft;
        offset.top -= parentOffset.top;
        offset.left -= parentOffset.left;
    }
    offset.top -= parseInt(style.marginTop, 10) || 0;
    offset.left -= parseInt(style.marginLeft, 10) || 0;
    return offset;
}
// Returns the containing block of an element, which is the element that
// this element will be positioned relative to.
// https://developer.mozilla.org/en-US/docs/Web/CSS/Containing_block
function $edcf132a9284368a$var$getContainingBlock(node) {
    // The offsetParent of an element in most cases equals the containing block.
    // https://w3c.github.io/csswg-drafts/cssom-view/#dom-htmlelement-offsetparent
    let offsetParent = node.offsetParent;
    // The offsetParent algorithm terminates at the document body,
    // even if the body is not a containing block. Double check that
    // and use the documentElement if so.
    if (offsetParent && offsetParent === document.body && window.getComputedStyle(offsetParent).position === 'static' && !$edcf132a9284368a$var$isContainingBlock(offsetParent)) offsetParent = document.documentElement;
    // TODO(later): handle table elements?
    // The offsetParent can be null if the element has position: fixed, or a few other cases.
    // We have to walk up the tree manually in this case because fixed positioned elements
    // are still positioned relative to their containing block, which is not always the viewport.
    if (offsetParent == null) {
        offsetParent = node.parentElement;
        while(offsetParent && !$edcf132a9284368a$var$isContainingBlock(offsetParent))offsetParent = offsetParent.parentElement;
    }
    // Fall back to the viewport.
    return offsetParent || document.documentElement;
}
// https://developer.mozilla.org/en-US/docs/Web/CSS/Containing_block#identifying_the_containing_block
function $edcf132a9284368a$var$isContainingBlock(node) {
    let style = window.getComputedStyle(node);
    return style.transform !== 'none' || /transform|perspective/.test(style.willChange) || style.filter !== 'none' || style.contain === 'paint' || // @ts-ignore
    'backdropFilter' in style && style.backdropFilter !== 'none' || // @ts-ignore
    'WebkitBackdropFilter' in style && style.WebkitBackdropFilter !== 'none';
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 
const $dd149f63282afbbf$export$f6211563215e3b37 = new WeakMap();
function $dd149f63282afbbf$export$18fc8428861184da(opts) {
    let { triggerRef: triggerRef, isOpen: isOpen, onClose: onClose } = opts;
    (reactExports.useEffect)(()=>{
        if (!isOpen || onClose === null) return;
        let onScroll = (e)=>{
            // Ignore if scrolling an scrollable region outside the trigger's tree.
            let target = e.target;
            // window is not a Node and doesn't have contain, but window contains everything
            if (!triggerRef.current || target instanceof Node && !target.contains(triggerRef.current)) return;
            // Ignore scroll events on any input or textarea as the cursor position can cause it to scroll
            // such as in a combobox. Clicking the dropdown button places focus on the input, and if the
            // text inside the input extends beyond the 'end', then it will scroll so the cursor is visible at the end.
            if (e.target instanceof HTMLInputElement || e.target instanceof HTMLTextAreaElement) return;
            let onCloseHandler = onClose || $dd149f63282afbbf$export$f6211563215e3b37.get(triggerRef.current);
            if (onCloseHandler) onCloseHandler();
        };
        window.addEventListener('scroll', onScroll, true);
        return ()=>{
            window.removeEventListener('scroll', onScroll, true);
        };
    }, [
        isOpen,
        onClose,
        triggerRef
    ]);
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 




// @ts-ignore
let $2a41e45df1593e64$var$visualViewport = typeof document !== 'undefined' && window.visualViewport;
function $2a41e45df1593e64$export$d39e1813b3bdd0e1(props) {
    let { direction: direction } = ($18f2051aff69b9bf$export$43bb16f9c6d9e3f7)();
    let { arrowSize: arrowSize = 0, targetRef: targetRef, overlayRef: overlayRef, scrollRef: scrollRef = overlayRef, placement: placement = 'bottom', containerPadding: containerPadding = 12, shouldFlip: shouldFlip = true, boundaryElement: boundaryElement = typeof document !== 'undefined' ? document.body : null, offset: offset = 0, crossOffset: crossOffset = 0, shouldUpdatePosition: shouldUpdatePosition = true, isOpen: isOpen = true, onClose: onClose, maxHeight: maxHeight, arrowBoundaryOffset: arrowBoundaryOffset = 0 } = props;
    let [position, setPosition] = (reactExports.useState)({
        position: {},
        arrowOffsetLeft: undefined,
        arrowOffsetTop: undefined,
        maxHeight: undefined,
        placement: undefined
    });
    let deps = [
        shouldUpdatePosition,
        placement,
        overlayRef.current,
        targetRef.current,
        scrollRef.current,
        containerPadding,
        shouldFlip,
        boundaryElement,
        offset,
        crossOffset,
        isOpen,
        direction,
        maxHeight,
        arrowBoundaryOffset,
        arrowSize
    ];
    // Note, the position freezing breaks if body sizes itself dynamicly with the visual viewport but that might
    // just be a non-realistic use case
    // Upon opening a overlay, record the current visual viewport scale so we can freeze the overlay styles
    let lastScale = (reactExports.useRef)($2a41e45df1593e64$var$visualViewport === null || $2a41e45df1593e64$var$visualViewport === void 0 ? void 0 : $2a41e45df1593e64$var$visualViewport.scale);
    (reactExports.useEffect)(()=>{
        if (isOpen) lastScale.current = $2a41e45df1593e64$var$visualViewport === null || $2a41e45df1593e64$var$visualViewport === void 0 ? void 0 : $2a41e45df1593e64$var$visualViewport.scale;
    }, [
        isOpen
    ]);
    let updatePosition = (reactExports.useCallback)(()=>{
        if (shouldUpdatePosition === false || !isOpen || !overlayRef.current || !targetRef.current || !boundaryElement) return;
        if (($2a41e45df1593e64$var$visualViewport === null || $2a41e45df1593e64$var$visualViewport === void 0 ? void 0 : $2a41e45df1593e64$var$visualViewport.scale) !== lastScale.current) return;
        // Determine a scroll anchor based on the focused element.
        // This stores the offset of the anchor element from the scroll container
        // so it can be restored after repositioning. This way if the overlay height
        // changes, the focused element appears to stay in the same position.
        let anchor = null;
        if (scrollRef.current && scrollRef.current.contains(document.activeElement)) {
            let anchorRect = document.activeElement.getBoundingClientRect();
            let scrollRect = scrollRef.current.getBoundingClientRect();
            // Anchor from the top if the offset is in the top half of the scrollable element,
            // otherwise anchor from the bottom.
            anchor = {
                type: 'top',
                offset: anchorRect.top - scrollRect.top
            };
            if (anchor.offset > scrollRect.height / 2) {
                anchor.type = 'bottom';
                anchor.offset = anchorRect.bottom - scrollRect.bottom;
            }
        }
        // Always reset the overlay's previous max height if not defined by the user so that we can compensate for
        // RAC collections populating after a second render and properly set a correct max height + positioning when it populates.
        let overlay = overlayRef.current;
        if (!maxHeight && overlayRef.current) {
            var _window_visualViewport;
            overlay.style.top = '0px';
            overlay.style.bottom = '';
            var _window_visualViewport_height;
            overlay.style.maxHeight = ((_window_visualViewport_height = (_window_visualViewport = window.visualViewport) === null || _window_visualViewport === void 0 ? void 0 : _window_visualViewport.height) !== null && _window_visualViewport_height !== void 0 ? _window_visualViewport_height : window.innerHeight) + 'px';
        }
        let position = ($edcf132a9284368a$export$b3ceb0cbf1056d98)({
            placement: $2a41e45df1593e64$var$translateRTL(placement, direction),
            overlayNode: overlayRef.current,
            targetNode: targetRef.current,
            scrollNode: scrollRef.current || overlayRef.current,
            padding: containerPadding,
            shouldFlip: shouldFlip,
            boundaryElement: boundaryElement,
            offset: offset,
            crossOffset: crossOffset,
            maxHeight: maxHeight,
            arrowSize: arrowSize,
            arrowBoundaryOffset: arrowBoundaryOffset
        });
        // Modify overlay styles directly so positioning happens immediately without the need of a second render
        // This is so we don't have to delay autoFocus scrolling or delay applying preventScroll for popovers
        overlay.style.top = '';
        overlay.style.bottom = '';
        overlay.style.left = '';
        overlay.style.right = '';
        Object.keys(position.position).forEach((key)=>overlay.style[key] = position.position[key] + 'px');
        overlay.style.maxHeight = position.maxHeight != null ? position.maxHeight + 'px' : undefined;
        // Restore scroll position relative to anchor element.
        if (anchor) {
            let anchorRect = document.activeElement.getBoundingClientRect();
            let scrollRect = scrollRef.current.getBoundingClientRect();
            let newOffset = anchorRect[anchor.type] - scrollRect[anchor.type];
            scrollRef.current.scrollTop += newOffset - anchor.offset;
        }
        // Trigger a set state for a second render anyway for arrow positioning
        setPosition(position);
    // eslint-disable-next-line react-hooks/exhaustive-deps
    }, deps);
    // Update position when anything changes
    // eslint-disable-next-line react-hooks/exhaustive-deps
    ($f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(updatePosition, deps);
    // Update position on window resize
    $2a41e45df1593e64$var$useResize(updatePosition);
    // Update position when the overlay changes size (might need to flip).
    ($9daab02d461809db$export$683480f191c0e3ea)({
        ref: overlayRef,
        onResize: updatePosition
    });
    // Update position when the target changes size (might need to flip).
    ($9daab02d461809db$export$683480f191c0e3ea)({
        ref: targetRef,
        onResize: updatePosition
    });
    // Reposition the overlay and do not close on scroll while the visual viewport is resizing.
    // This will ensure that overlays adjust their positioning when the iOS virtual keyboard appears.
    let isResizing = (reactExports.useRef)(false);
    ($f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(()=>{
        let timeout;
        let onResize = ()=>{
            isResizing.current = true;
            clearTimeout(timeout);
            timeout = setTimeout(()=>{
                isResizing.current = false;
            }, 500);
            updatePosition();
        };
        // Only reposition the overlay if a scroll event happens immediately as a result of resize (aka the virtual keyboard has appears)
        // We don't want to reposition the overlay if the user has pinch zoomed in and is scrolling the viewport around.
        let onScroll = ()=>{
            if (isResizing.current) onResize();
        };
        $2a41e45df1593e64$var$visualViewport === null || $2a41e45df1593e64$var$visualViewport === void 0 ? void 0 : $2a41e45df1593e64$var$visualViewport.addEventListener('resize', onResize);
        $2a41e45df1593e64$var$visualViewport === null || $2a41e45df1593e64$var$visualViewport === void 0 ? void 0 : $2a41e45df1593e64$var$visualViewport.addEventListener('scroll', onScroll);
        return ()=>{
            $2a41e45df1593e64$var$visualViewport === null || $2a41e45df1593e64$var$visualViewport === void 0 ? void 0 : $2a41e45df1593e64$var$visualViewport.removeEventListener('resize', onResize);
            $2a41e45df1593e64$var$visualViewport === null || $2a41e45df1593e64$var$visualViewport === void 0 ? void 0 : $2a41e45df1593e64$var$visualViewport.removeEventListener('scroll', onScroll);
        };
    }, [
        updatePosition
    ]);
    let close = (reactExports.useCallback)(()=>{
        if (!isResizing.current) onClose();
    }, [
        onClose,
        isResizing
    ]);
    // When scrolling a parent scrollable region of the trigger (other than the body),
    // we hide the popover. Otherwise, its position would be incorrect.
    ($dd149f63282afbbf$export$18fc8428861184da)({
        triggerRef: targetRef,
        isOpen: isOpen,
        onClose: onClose && close
    });
    var _position_maxHeight;
    return {
        overlayProps: {
            style: {
                position: 'absolute',
                zIndex: 100000,
                ...position.position,
                maxHeight: (_position_maxHeight = position.maxHeight) !== null && _position_maxHeight !== void 0 ? _position_maxHeight : '100vh'
            }
        },
        placement: position.placement,
        arrowProps: {
            'aria-hidden': 'true',
            role: 'presentation',
            style: {
                left: position.arrowOffsetLeft,
                top: position.arrowOffsetTop
            }
        },
        updatePosition: updatePosition
    };
}
function $2a41e45df1593e64$var$useResize(onResize) {
    ($f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(()=>{
        window.addEventListener('resize', onResize, false);
        return ()=>{
            window.removeEventListener('resize', onResize, false);
        };
    }, [
        onResize
    ]);
}
function $2a41e45df1593e64$var$translateRTL(position, direction) {
    if (direction === 'rtl') return position.replace('start', 'right').replace('end', 'left');
    return position.replace('start', 'left').replace('end', 'right');
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 


const $a11501f3d1d39e6c$var$visibleOverlays = [];
function $a11501f3d1d39e6c$export$ea8f71083e90600f(props, ref) {
    let { onClose: onClose, shouldCloseOnBlur: shouldCloseOnBlur, isOpen: isOpen, isDismissable: isDismissable = false, isKeyboardDismissDisabled: isKeyboardDismissDisabled = false, shouldCloseOnInteractOutside: shouldCloseOnInteractOutside } = props;
    // Add the overlay ref to the stack of visible overlays on mount, and remove on unmount.
    (reactExports.useEffect)(()=>{
        if (isOpen) $a11501f3d1d39e6c$var$visibleOverlays.push(ref);
        return ()=>{
            let index = $a11501f3d1d39e6c$var$visibleOverlays.indexOf(ref);
            if (index >= 0) $a11501f3d1d39e6c$var$visibleOverlays.splice(index, 1);
        };
    }, [
        isOpen,
        ref
    ]);
    // Only hide the overlay when it is the topmost visible overlay in the stack
    let onHide = ()=>{
        if ($a11501f3d1d39e6c$var$visibleOverlays[$a11501f3d1d39e6c$var$visibleOverlays.length - 1] === ref && onClose) onClose();
    };
    let onInteractOutsideStart = (e)=>{
        if (!shouldCloseOnInteractOutside || shouldCloseOnInteractOutside(e.target)) {
            if ($a11501f3d1d39e6c$var$visibleOverlays[$a11501f3d1d39e6c$var$visibleOverlays.length - 1] === ref) {
                e.stopPropagation();
                e.preventDefault();
            }
        }
    };
    let onInteractOutside = (e)=>{
        if (!shouldCloseOnInteractOutside || shouldCloseOnInteractOutside(e.target)) {
            if ($a11501f3d1d39e6c$var$visibleOverlays[$a11501f3d1d39e6c$var$visibleOverlays.length - 1] === ref) {
                e.stopPropagation();
                e.preventDefault();
            }
            onHide();
        }
    };
    // Handle the escape key
    let onKeyDown = (e)=>{
        if (e.key === 'Escape' && !isKeyboardDismissDisabled && !e.nativeEvent.isComposing) {
            e.stopPropagation();
            e.preventDefault();
            onHide();
        }
    };
    // Handle clicking outside the overlay to close it
    ($e0b6e0b68ec7f50f$export$872b660ac5a1ff98)({
        ref: ref,
        onInteractOutside: isDismissable && isOpen ? onInteractOutside : null,
        onInteractOutsideStart: onInteractOutsideStart
    });
    let { focusWithinProps: focusWithinProps } = ($9ab94262bd0047c7$export$420e68273165f4ec)({
        isDisabled: !shouldCloseOnBlur,
        onBlurWithin: (e)=>{
            // Do not close if relatedTarget is null, which means focus is lost to the body.
            // That can happen when switching tabs, or due to a VoiceOver/Chrome bug with Control+Option+Arrow navigation.
            // Clicking on the body to close the overlay should already be handled by useInteractOutside.
            // https://github.com/adobe/react-spectrum/issues/4130
            // https://github.com/adobe/react-spectrum/issues/4922
            //
            // If focus is moving into a child focus scope (e.g. menu inside a dialog),
            // do not close the outer overlay. At this point, the active scope should
            // still be the outer overlay, since blur events run before focus.
            if (!e.relatedTarget || ($9bf71ea28793e738$export$1258395f99bf9cbf)(e.relatedTarget)) return;
            if (!shouldCloseOnInteractOutside || shouldCloseOnInteractOutside(e.relatedTarget)) onClose();
        }
    });
    let onPointerDownUnderlay = (e)=>{
        // fixes a firefox issue that starts text selection https://bugzilla.mozilla.org/show_bug.cgi?id=1675846
        if (e.target === e.currentTarget) e.preventDefault();
    };
    return {
        overlayProps: {
            onKeyDown: onKeyDown,
            ...focusWithinProps
        },
        underlayProps: {
            onPointerDown: onPointerDownUnderlay
        }
    };
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 


function $628037886ba31236$export$f9d5c8beee7d008d(props, state, ref) {
    let { type: type } = props;
    let { isOpen: isOpen } = state;
    // Backward compatibility. Share state close function with useOverlayPosition so it can close on scroll
    // without forcing users to pass onClose.
    (reactExports.useEffect)(()=>{
        if (ref && ref.current) ($dd149f63282afbbf$export$f6211563215e3b37).set(ref.current, state.close);
    });
    // Aria 1.1 supports multiple values for aria-haspopup other than just menus.
    // https://www.w3.org/TR/wai-aria-1.1/#aria-haspopup
    // However, we only add it for menus for now because screen readers often
    // announce it as a menu even for other values.
    let ariaHasPopup = undefined;
    if (type === 'menu') ariaHasPopup = true;
    else if (type === 'listbox') ariaHasPopup = 'listbox';
    let overlayId = ($bdb11010cef70236$export$f680877a34711e37)();
    return {
        triggerProps: {
            'aria-haspopup': ariaHasPopup,
            'aria-expanded': isOpen,
            'aria-controls': isOpen ? overlayId : null,
            onPress: state.toggle
        },
        overlayProps: {
            id: overlayId
        }
    };
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 
// @ts-ignore
const $49c51c25361d4cd2$var$visualViewport = typeof document !== 'undefined' && window.visualViewport;
// HTML input types that do not cause the software keyboard to appear.
const $49c51c25361d4cd2$var$nonTextInputTypes = new Set([
    'checkbox',
    'radio',
    'range',
    'color',
    'file',
    'image',
    'button',
    'submit',
    'reset'
]);
// The number of active usePreventScroll calls. Used to determine whether to revert back to the original page style/scroll position
let $49c51c25361d4cd2$var$preventScrollCount = 0;
let $49c51c25361d4cd2$var$restore;
function $49c51c25361d4cd2$export$ee0f7cc6afcd1c18(options = {}) {
    let { isDisabled: isDisabled } = options;
    ($f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(()=>{
        if (isDisabled) return;
        $49c51c25361d4cd2$var$preventScrollCount++;
        if ($49c51c25361d4cd2$var$preventScrollCount === 1) {
            if (($c87311424ea30a05$export$fedb369cb70207f1)()) $49c51c25361d4cd2$var$restore = $49c51c25361d4cd2$var$preventScrollMobileSafari();
            else $49c51c25361d4cd2$var$restore = $49c51c25361d4cd2$var$preventScrollStandard();
        }
        return ()=>{
            $49c51c25361d4cd2$var$preventScrollCount--;
            if ($49c51c25361d4cd2$var$preventScrollCount === 0) $49c51c25361d4cd2$var$restore();
        };
    }, [
        isDisabled
    ]);
}
// For most browsers, all we need to do is set `overflow: hidden` on the root element, and
// add some padding to prevent the page from shifting when the scrollbar is hidden.
function $49c51c25361d4cd2$var$preventScrollStandard() {
    return ($ff5963eb1fccf552$export$e08e3b67e392101e)($49c51c25361d4cd2$var$setStyle(document.documentElement, 'paddingRight', `${window.innerWidth - document.documentElement.clientWidth}px`), $49c51c25361d4cd2$var$setStyle(document.documentElement, 'overflow', 'hidden'));
}
// Mobile Safari is a whole different beast. Even with overflow: hidden,
// it still scrolls the page in many situations:
//
// 1. When the bottom toolbar and address bar are collapsed, page scrolling is always allowed.
// 2. When the keyboard is visible, the viewport does not resize. Instead, the keyboard covers part of
//    it, so it becomes scrollable.
// 3. When tapping on an input, the page always scrolls so that the input is centered in the visual viewport.
//    This may cause even fixed position elements to scroll off the screen.
// 4. When using the next/previous buttons in the keyboard to navigate between inputs, the whole page always
//    scrolls, even if the input is inside a nested scrollable element that could be scrolled instead.
//
// In order to work around these cases, and prevent scrolling without jankiness, we do a few things:
//
// 1. Prevent default on `touchmove` events that are not in a scrollable element. This prevents touch scrolling
//    on the window.
// 2. Set `overscroll-behavior: contain` on nested scrollable regions so they do not scroll the page when at
//    the top or bottom. Work around a bug where this does not work when the element does not actually overflow
//    by preventing default in a `touchmove` event.
// 3. Prevent default on `touchend` events on input elements and handle focusing the element ourselves.
// 4. When focusing an input, apply a transform to trick Safari into thinking the input is at the top
//    of the page, which prevents it from scrolling the page. After the input is focused, scroll the element
//    into view ourselves, without scrolling the whole page.
// 5. Offset the body by the scroll position using a negative margin and scroll to the top. This should appear the
//    same visually, but makes the actual scroll position always zero. This is required to make all of the
//    above work or Safari will still try to scroll the page when focusing an input.
// 6. As a last resort, handle window scroll events, and scroll back to the top. This can happen when attempting
//    to navigate to an input with the next/previous buttons that's outside a modal.
function $49c51c25361d4cd2$var$preventScrollMobileSafari() {
    let scrollable;
    let restoreScrollableStyles;
    let onTouchStart = (e)=>{
        // Store the nearest scrollable parent element from the element that the user touched.
        scrollable = ($62d8ded9296f3872$export$cfa2225e87938781)(e.target, true);
        if (scrollable === document.documentElement && scrollable === document.body) return;
        // Prevent scrolling up when at the top and scrolling down when at the bottom
        // of a nested scrollable area, otherwise mobile Safari will start scrolling
        // the window instead.
        if (scrollable instanceof HTMLElement && window.getComputedStyle(scrollable).overscrollBehavior === 'auto') restoreScrollableStyles = $49c51c25361d4cd2$var$setStyle(scrollable, 'overscrollBehavior', 'contain');
    };
    let onTouchMove = (e)=>{
        // Prevent scrolling the window.
        if (!scrollable || scrollable === document.documentElement || scrollable === document.body) {
            e.preventDefault();
            return;
        }
        // overscroll-behavior should prevent scroll chaining, but currently does not
        // if the element doesn't actually overflow. https://bugs.webkit.org/show_bug.cgi?id=243452
        // This checks that both the width and height do not overflow, otherwise we might
        // block horizontal scrolling too. In that case, adding `touch-action: pan-x` to
        // the element will prevent vertical page scrolling. We can't add that automatically
        // because it must be set before the touchstart event.
        if (scrollable.scrollHeight === scrollable.clientHeight && scrollable.scrollWidth === scrollable.clientWidth) e.preventDefault();
    };
    let onTouchEnd = (e)=>{
        let target = e.target;
        // Apply this change if we're not already focused on the target element
        if ($49c51c25361d4cd2$var$willOpenKeyboard(target) && target !== document.activeElement) {
            e.preventDefault();
            setupStyles();
            // Apply a transform to trick Safari into thinking the input is at the top of the page
            // so it doesn't try to scroll it into view. When tapping on an input, this needs to
            // be done before the "focus" event, so we have to focus the element ourselves.
            target.style.transform = 'translateY(-2000px)';
            target.focus();
            requestAnimationFrame(()=>{
                target.style.transform = '';
            });
        }
        if (restoreScrollableStyles) restoreScrollableStyles();
    };
    let onFocus = (e)=>{
        let target = e.target;
        if ($49c51c25361d4cd2$var$willOpenKeyboard(target)) {
            setupStyles();
            // Transform also needs to be applied in the focus event in cases where focus moves
            // other than tapping on an input directly, e.g. the next/previous buttons in the
            // software keyboard. In these cases, it seems applying the transform in the focus event
            // is good enough, whereas when tapping an input, it must be done before the focus event. 🤷‍♂️
            target.style.transform = 'translateY(-2000px)';
            requestAnimationFrame(()=>{
                target.style.transform = '';
                // This will have prevented the browser from scrolling the focused element into view,
                // so we need to do this ourselves in a way that doesn't cause the whole page to scroll.
                if ($49c51c25361d4cd2$var$visualViewport) {
                    if ($49c51c25361d4cd2$var$visualViewport.height < window.innerHeight) // If the keyboard is already visible, do this after one additional frame
                    // to wait for the transform to be removed.
                    requestAnimationFrame(()=>{
                        $49c51c25361d4cd2$var$scrollIntoView(target);
                    });
                    else // Otherwise, wait for the visual viewport to resize before scrolling so we can
                    // measure the correct position to scroll to.
                    $49c51c25361d4cd2$var$visualViewport.addEventListener('resize', ()=>$49c51c25361d4cd2$var$scrollIntoView(target), {
                        once: true
                    });
                }
            });
        }
    };
    let restoreStyles = null;
    let setupStyles = ()=>{
        if (restoreStyles) return;
        let onWindowScroll = ()=>{
            // Last resort. If the window scrolled, scroll it back to the top.
            // It should always be at the top because the body will have a negative margin (see below).
            window.scrollTo(0, 0);
        };
        // Record the original scroll position so we can restore it.
        // Then apply a negative margin to the body to offset it by the scroll position. This will
        // enable us to scroll the window to the top, which is required for the rest of this to work.
        let scrollX = window.pageXOffset;
        let scrollY = window.pageYOffset;
        restoreStyles = ($ff5963eb1fccf552$export$e08e3b67e392101e)($49c51c25361d4cd2$var$addEvent(window, 'scroll', onWindowScroll), $49c51c25361d4cd2$var$setStyle(document.documentElement, 'paddingRight', `${window.innerWidth - document.documentElement.clientWidth}px`), $49c51c25361d4cd2$var$setStyle(document.documentElement, 'overflow', 'hidden'), $49c51c25361d4cd2$var$setStyle(document.body, 'marginTop', `-${scrollY}px`), ()=>{
            window.scrollTo(scrollX, scrollY);
        });
        // Scroll to the top. The negative margin on the body will make this appear the same.
        window.scrollTo(0, 0);
    };
    let removeEvents = ($ff5963eb1fccf552$export$e08e3b67e392101e)($49c51c25361d4cd2$var$addEvent(document, 'touchstart', onTouchStart, {
        passive: false,
        capture: true
    }), $49c51c25361d4cd2$var$addEvent(document, 'touchmove', onTouchMove, {
        passive: false,
        capture: true
    }), $49c51c25361d4cd2$var$addEvent(document, 'touchend', onTouchEnd, {
        passive: false,
        capture: true
    }), $49c51c25361d4cd2$var$addEvent(document, 'focus', onFocus, true));
    return ()=>{
        // Restore styles and scroll the page back to where it was.
        restoreScrollableStyles === null || restoreScrollableStyles === void 0 ? void 0 : restoreScrollableStyles();
        restoreStyles === null || restoreStyles === void 0 ? void 0 : restoreStyles();
        removeEvents();
    };
}
// Sets a CSS property on an element, and returns a function to revert it to the previous value.
function $49c51c25361d4cd2$var$setStyle(element, style, value) {
    let cur = element.style[style];
    element.style[style] = value;
    return ()=>{
        element.style[style] = cur;
    };
}
// Adds an event listener to an element, and returns a function to remove it.
function $49c51c25361d4cd2$var$addEvent(target, event, handler, options) {
    target.addEventListener(event, handler, options);
    return ()=>{
        target.removeEventListener(event, handler, options);
    };
}
function $49c51c25361d4cd2$var$scrollIntoView(target) {
    let root = document.scrollingElement || document.documentElement;
    while(target && target !== root){
        // Find the parent scrollable element and adjust the scroll position if the target is not already in view.
        let scrollable = ($62d8ded9296f3872$export$cfa2225e87938781)(target);
        if (scrollable !== document.documentElement && scrollable !== document.body && scrollable !== target) {
            let scrollableTop = scrollable.getBoundingClientRect().top;
            let targetTop = target.getBoundingClientRect().top;
            if (targetTop > scrollableTop + target.clientHeight) scrollable.scrollTop += targetTop - scrollableTop;
        }
        target = scrollable.parentElement;
    }
}
function $49c51c25361d4cd2$var$willOpenKeyboard(target) {
    return target instanceof HTMLInputElement && !$49c51c25361d4cd2$var$nonTextInputTypes.has(target.type) || target instanceof HTMLTextAreaElement || target instanceof HTMLElement && target.isContentEditable;
}

var reactDom = {exports: {}};

var reactDom_production_min = {};

var scheduler = {exports: {}};

var scheduler_production_min = {};

/**
 * @license React
 * scheduler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var hasRequiredScheduler_production_min;

function requireScheduler_production_min () {
	if (hasRequiredScheduler_production_min) return scheduler_production_min;
	hasRequiredScheduler_production_min = 1;
	(function (exports) {
function f(a,b){var c=a.length;a.push(b);a:for(;0<c;){var d=c-1>>>1,e=a[d];if(0<g(e,b))a[d]=b,a[c]=e,c=d;else break a}}function h(a){return 0===a.length?null:a[0]}function k(a){if(0===a.length)return null;var b=a[0],c=a.pop();if(c!==b){a[0]=c;a:for(var d=0,e=a.length,w=e>>>1;d<w;){var m=2*(d+1)-1,C=a[m],n=m+1,x=a[n];if(0>g(C,c))n<e&&0>g(x,C)?(a[d]=x,a[n]=c,d=n):(a[d]=C,a[m]=c,d=m);else if(n<e&&0>g(x,c))a[d]=x,a[n]=c,d=n;else break a}}return b}
		function g(a,b){var c=a.sortIndex-b.sortIndex;return 0!==c?c:a.id-b.id}if("object"===typeof performance&&"function"===typeof performance.now){var l=performance;exports.unstable_now=function(){return l.now()};}else {var p=Date,q=p.now();exports.unstable_now=function(){return p.now()-q};}var r=[],t=[],u=1,v=null,y=3,z=!1,A=!1,B=!1,D="function"===typeof setTimeout?setTimeout:null,E="function"===typeof clearTimeout?clearTimeout:null,F="undefined"!==typeof setImmediate?setImmediate:null;
		"undefined"!==typeof navigator&&void 0!==navigator.scheduling&&void 0!==navigator.scheduling.isInputPending&&navigator.scheduling.isInputPending.bind(navigator.scheduling);function G(a){for(var b=h(t);null!==b;){if(null===b.callback)k(t);else if(b.startTime<=a)k(t),b.sortIndex=b.expirationTime,f(r,b);else break;b=h(t);}}function H(a){B=!1;G(a);if(!A)if(null!==h(r))A=!0,I(J);else {var b=h(t);null!==b&&K(H,b.startTime-a);}}
		function J(a,b){A=!1;B&&(B=!1,E(L),L=-1);z=!0;var c=y;try{G(b);for(v=h(r);null!==v&&(!(v.expirationTime>b)||a&&!M());){var d=v.callback;if("function"===typeof d){v.callback=null;y=v.priorityLevel;var e=d(v.expirationTime<=b);b=exports.unstable_now();"function"===typeof e?v.callback=e:v===h(r)&&k(r);G(b);}else k(r);v=h(r);}if(null!==v)var w=!0;else {var m=h(t);null!==m&&K(H,m.startTime-b);w=!1;}return w}finally{v=null,y=c,z=!1;}}var N=!1,O=null,L=-1,P=5,Q=-1;
		function M(){return exports.unstable_now()-Q<P?!1:!0}function R(){if(null!==O){var a=exports.unstable_now();Q=a;var b=!0;try{b=O(!0,a);}finally{b?S():(N=!1,O=null);}}else N=!1;}var S;if("function"===typeof F)S=function(){F(R);};else if("undefined"!==typeof MessageChannel){var T=new MessageChannel,U=T.port2;T.port1.onmessage=R;S=function(){U.postMessage(null);};}else S=function(){D(R,0);};function I(a){O=a;N||(N=!0,S());}function K(a,b){L=D(function(){a(exports.unstable_now());},b);}
		exports.unstable_IdlePriority=5;exports.unstable_ImmediatePriority=1;exports.unstable_LowPriority=4;exports.unstable_NormalPriority=3;exports.unstable_Profiling=null;exports.unstable_UserBlockingPriority=2;exports.unstable_cancelCallback=function(a){a.callback=null;};exports.unstable_continueExecution=function(){A||z||(A=!0,I(J));};
		exports.unstable_forceFrameRate=function(a){0>a||125<a?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):P=0<a?Math.floor(1E3/a):5;};exports.unstable_getCurrentPriorityLevel=function(){return y};exports.unstable_getFirstCallbackNode=function(){return h(r)};exports.unstable_next=function(a){switch(y){case 1:case 2:case 3:var b=3;break;default:b=y;}var c=y;y=b;try{return a()}finally{y=c;}};exports.unstable_pauseExecution=function(){};
		exports.unstable_requestPaint=function(){};exports.unstable_runWithPriority=function(a,b){switch(a){case 1:case 2:case 3:case 4:case 5:break;default:a=3;}var c=y;y=a;try{return b()}finally{y=c;}};
		exports.unstable_scheduleCallback=function(a,b,c){var d=exports.unstable_now();"object"===typeof c&&null!==c?(c=c.delay,c="number"===typeof c&&0<c?d+c:d):c=d;switch(a){case 1:var e=-1;break;case 2:e=250;break;case 5:e=1073741823;break;case 4:e=1E4;break;default:e=5E3;}e=c+e;a={id:u++,callback:b,priorityLevel:a,startTime:c,expirationTime:e,sortIndex:-1};c>d?(a.sortIndex=c,f(t,a),null===h(r)&&a===h(t)&&(B?(E(L),L=-1):B=!0,K(H,c-d))):(a.sortIndex=e,f(r,a),A||z||(A=!0,I(J)));return a};
		exports.unstable_shouldYield=M;exports.unstable_wrapCallback=function(a){var b=y;return function(){var c=y;y=b;try{return a.apply(this,arguments)}finally{y=c;}}}; 
	} (scheduler_production_min));
	return scheduler_production_min;
}

var scheduler_development = {};

/**
 * @license React
 * scheduler.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var hasRequiredScheduler_development;

function requireScheduler_development () {
	if (hasRequiredScheduler_development) return scheduler_development;
	hasRequiredScheduler_development = 1;
	(function (exports) {

		if (process.env.NODE_ENV !== "production") {
		  (function() {

		/* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */
		if (
		  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' &&
		  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart ===
		    'function'
		) {
		  __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
		}
		          var enableSchedulerDebugging = false;
		var enableProfiling = false;
		var frameYieldMs = 5;

		function push(heap, node) {
		  var index = heap.length;
		  heap.push(node);
		  siftUp(heap, node, index);
		}
		function peek(heap) {
		  return heap.length === 0 ? null : heap[0];
		}
		function pop(heap) {
		  if (heap.length === 0) {
		    return null;
		  }

		  var first = heap[0];
		  var last = heap.pop();

		  if (last !== first) {
		    heap[0] = last;
		    siftDown(heap, last, 0);
		  }

		  return first;
		}

		function siftUp(heap, node, i) {
		  var index = i;

		  while (index > 0) {
		    var parentIndex = index - 1 >>> 1;
		    var parent = heap[parentIndex];

		    if (compare(parent, node) > 0) {
		      // The parent is larger. Swap positions.
		      heap[parentIndex] = node;
		      heap[index] = parent;
		      index = parentIndex;
		    } else {
		      // The parent is smaller. Exit.
		      return;
		    }
		  }
		}

		function siftDown(heap, node, i) {
		  var index = i;
		  var length = heap.length;
		  var halfLength = length >>> 1;

		  while (index < halfLength) {
		    var leftIndex = (index + 1) * 2 - 1;
		    var left = heap[leftIndex];
		    var rightIndex = leftIndex + 1;
		    var right = heap[rightIndex]; // If the left or right node is smaller, swap with the smaller of those.

		    if (compare(left, node) < 0) {
		      if (rightIndex < length && compare(right, left) < 0) {
		        heap[index] = right;
		        heap[rightIndex] = node;
		        index = rightIndex;
		      } else {
		        heap[index] = left;
		        heap[leftIndex] = node;
		        index = leftIndex;
		      }
		    } else if (rightIndex < length && compare(right, node) < 0) {
		      heap[index] = right;
		      heap[rightIndex] = node;
		      index = rightIndex;
		    } else {
		      // Neither child is smaller. Exit.
		      return;
		    }
		  }
		}

		function compare(a, b) {
		  // Compare sort index first, then task id.
		  var diff = a.sortIndex - b.sortIndex;
		  return diff !== 0 ? diff : a.id - b.id;
		}

		// TODO: Use symbols?
		var ImmediatePriority = 1;
		var UserBlockingPriority = 2;
		var NormalPriority = 3;
		var LowPriority = 4;
		var IdlePriority = 5;

		function markTaskErrored(task, ms) {
		}

		/* eslint-disable no-var */

		var hasPerformanceNow = typeof performance === 'object' && typeof performance.now === 'function';

		if (hasPerformanceNow) {
		  var localPerformance = performance;

		  exports.unstable_now = function () {
		    return localPerformance.now();
		  };
		} else {
		  var localDate = Date;
		  var initialTime = localDate.now();

		  exports.unstable_now = function () {
		    return localDate.now() - initialTime;
		  };
		} // Max 31 bit integer. The max integer size in V8 for 32-bit systems.
		// Math.pow(2, 30) - 1
		// 0b111111111111111111111111111111


		var maxSigned31BitInt = 1073741823; // Times out immediately

		var IMMEDIATE_PRIORITY_TIMEOUT = -1; // Eventually times out

		var USER_BLOCKING_PRIORITY_TIMEOUT = 250;
		var NORMAL_PRIORITY_TIMEOUT = 5000;
		var LOW_PRIORITY_TIMEOUT = 10000; // Never times out

		var IDLE_PRIORITY_TIMEOUT = maxSigned31BitInt; // Tasks are stored on a min heap

		var taskQueue = [];
		var timerQueue = []; // Incrementing id counter. Used to maintain insertion order.

		var taskIdCounter = 1; // Pausing the scheduler is useful for debugging.
		var currentTask = null;
		var currentPriorityLevel = NormalPriority; // This is set while performing work, to prevent re-entrance.

		var isPerformingWork = false;
		var isHostCallbackScheduled = false;
		var isHostTimeoutScheduled = false; // Capture local references to native APIs, in case a polyfill overrides them.

		var localSetTimeout = typeof setTimeout === 'function' ? setTimeout : null;
		var localClearTimeout = typeof clearTimeout === 'function' ? clearTimeout : null;
		var localSetImmediate = typeof setImmediate !== 'undefined' ? setImmediate : null; // IE and Node.js + jsdom

		typeof navigator !== 'undefined' && navigator.scheduling !== undefined && navigator.scheduling.isInputPending !== undefined ? navigator.scheduling.isInputPending.bind(navigator.scheduling) : null;

		function advanceTimers(currentTime) {
		  // Check for tasks that are no longer delayed and add them to the queue.
		  var timer = peek(timerQueue);

		  while (timer !== null) {
		    if (timer.callback === null) {
		      // Timer was cancelled.
		      pop(timerQueue);
		    } else if (timer.startTime <= currentTime) {
		      // Timer fired. Transfer to the task queue.
		      pop(timerQueue);
		      timer.sortIndex = timer.expirationTime;
		      push(taskQueue, timer);
		    } else {
		      // Remaining timers are pending.
		      return;
		    }

		    timer = peek(timerQueue);
		  }
		}

		function handleTimeout(currentTime) {
		  isHostTimeoutScheduled = false;
		  advanceTimers(currentTime);

		  if (!isHostCallbackScheduled) {
		    if (peek(taskQueue) !== null) {
		      isHostCallbackScheduled = true;
		      requestHostCallback(flushWork);
		    } else {
		      var firstTimer = peek(timerQueue);

		      if (firstTimer !== null) {
		        requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
		      }
		    }
		  }
		}

		function flushWork(hasTimeRemaining, initialTime) {


		  isHostCallbackScheduled = false;

		  if (isHostTimeoutScheduled) {
		    // We scheduled a timeout but it's no longer needed. Cancel it.
		    isHostTimeoutScheduled = false;
		    cancelHostTimeout();
		  }

		  isPerformingWork = true;
		  var previousPriorityLevel = currentPriorityLevel;

		  try {
		    var currentTime; if (enableProfiling) ; else {
		      // No catch in prod code path.
		      return workLoop(hasTimeRemaining, initialTime);
		    }
		  } finally {
		    currentTask = null;
		    currentPriorityLevel = previousPriorityLevel;
		    isPerformingWork = false;
		  }
		}

		function workLoop(hasTimeRemaining, initialTime) {
		  var currentTime = initialTime;
		  advanceTimers(currentTime);
		  currentTask = peek(taskQueue);

		  while (currentTask !== null && !(enableSchedulerDebugging )) {
		    if (currentTask.expirationTime > currentTime && (!hasTimeRemaining || shouldYieldToHost())) {
		      // This currentTask hasn't expired, and we've reached the deadline.
		      break;
		    }

		    var callback = currentTask.callback;

		    if (typeof callback === 'function') {
		      currentTask.callback = null;
		      currentPriorityLevel = currentTask.priorityLevel;
		      var didUserCallbackTimeout = currentTask.expirationTime <= currentTime;

		      var continuationCallback = callback(didUserCallbackTimeout);
		      currentTime = exports.unstable_now();

		      if (typeof continuationCallback === 'function') {
		        currentTask.callback = continuationCallback;
		      } else {

		        if (currentTask === peek(taskQueue)) {
		          pop(taskQueue);
		        }
		      }

		      advanceTimers(currentTime);
		    } else {
		      pop(taskQueue);
		    }

		    currentTask = peek(taskQueue);
		  } // Return whether there's additional work


		  if (currentTask !== null) {
		    return true;
		  } else {
		    var firstTimer = peek(timerQueue);

		    if (firstTimer !== null) {
		      requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
		    }

		    return false;
		  }
		}

		function unstable_runWithPriority(priorityLevel, eventHandler) {
		  switch (priorityLevel) {
		    case ImmediatePriority:
		    case UserBlockingPriority:
		    case NormalPriority:
		    case LowPriority:
		    case IdlePriority:
		      break;

		    default:
		      priorityLevel = NormalPriority;
		  }

		  var previousPriorityLevel = currentPriorityLevel;
		  currentPriorityLevel = priorityLevel;

		  try {
		    return eventHandler();
		  } finally {
		    currentPriorityLevel = previousPriorityLevel;
		  }
		}

		function unstable_next(eventHandler) {
		  var priorityLevel;

		  switch (currentPriorityLevel) {
		    case ImmediatePriority:
		    case UserBlockingPriority:
		    case NormalPriority:
		      // Shift down to normal priority
		      priorityLevel = NormalPriority;
		      break;

		    default:
		      // Anything lower than normal priority should remain at the current level.
		      priorityLevel = currentPriorityLevel;
		      break;
		  }

		  var previousPriorityLevel = currentPriorityLevel;
		  currentPriorityLevel = priorityLevel;

		  try {
		    return eventHandler();
		  } finally {
		    currentPriorityLevel = previousPriorityLevel;
		  }
		}

		function unstable_wrapCallback(callback) {
		  var parentPriorityLevel = currentPriorityLevel;
		  return function () {
		    // This is a fork of runWithPriority, inlined for performance.
		    var previousPriorityLevel = currentPriorityLevel;
		    currentPriorityLevel = parentPriorityLevel;

		    try {
		      return callback.apply(this, arguments);
		    } finally {
		      currentPriorityLevel = previousPriorityLevel;
		    }
		  };
		}

		function unstable_scheduleCallback(priorityLevel, callback, options) {
		  var currentTime = exports.unstable_now();
		  var startTime;

		  if (typeof options === 'object' && options !== null) {
		    var delay = options.delay;

		    if (typeof delay === 'number' && delay > 0) {
		      startTime = currentTime + delay;
		    } else {
		      startTime = currentTime;
		    }
		  } else {
		    startTime = currentTime;
		  }

		  var timeout;

		  switch (priorityLevel) {
		    case ImmediatePriority:
		      timeout = IMMEDIATE_PRIORITY_TIMEOUT;
		      break;

		    case UserBlockingPriority:
		      timeout = USER_BLOCKING_PRIORITY_TIMEOUT;
		      break;

		    case IdlePriority:
		      timeout = IDLE_PRIORITY_TIMEOUT;
		      break;

		    case LowPriority:
		      timeout = LOW_PRIORITY_TIMEOUT;
		      break;

		    case NormalPriority:
		    default:
		      timeout = NORMAL_PRIORITY_TIMEOUT;
		      break;
		  }

		  var expirationTime = startTime + timeout;
		  var newTask = {
		    id: taskIdCounter++,
		    callback: callback,
		    priorityLevel: priorityLevel,
		    startTime: startTime,
		    expirationTime: expirationTime,
		    sortIndex: -1
		  };

		  if (startTime > currentTime) {
		    // This is a delayed task.
		    newTask.sortIndex = startTime;
		    push(timerQueue, newTask);

		    if (peek(taskQueue) === null && newTask === peek(timerQueue)) {
		      // All tasks are delayed, and this is the task with the earliest delay.
		      if (isHostTimeoutScheduled) {
		        // Cancel an existing timeout.
		        cancelHostTimeout();
		      } else {
		        isHostTimeoutScheduled = true;
		      } // Schedule a timeout.


		      requestHostTimeout(handleTimeout, startTime - currentTime);
		    }
		  } else {
		    newTask.sortIndex = expirationTime;
		    push(taskQueue, newTask);
		    // wait until the next time we yield.


		    if (!isHostCallbackScheduled && !isPerformingWork) {
		      isHostCallbackScheduled = true;
		      requestHostCallback(flushWork);
		    }
		  }

		  return newTask;
		}

		function unstable_pauseExecution() {
		}

		function unstable_continueExecution() {

		  if (!isHostCallbackScheduled && !isPerformingWork) {
		    isHostCallbackScheduled = true;
		    requestHostCallback(flushWork);
		  }
		}

		function unstable_getFirstCallbackNode() {
		  return peek(taskQueue);
		}

		function unstable_cancelCallback(task) {
		  // remove from the queue because you can't remove arbitrary nodes from an
		  // array based heap, only the first one.)


		  task.callback = null;
		}

		function unstable_getCurrentPriorityLevel() {
		  return currentPriorityLevel;
		}

		var isMessageLoopRunning = false;
		var scheduledHostCallback = null;
		var taskTimeoutID = -1; // Scheduler periodically yields in case there is other work on the main
		// thread, like user events. By default, it yields multiple times per frame.
		// It does not attempt to align with frame boundaries, since most tasks don't
		// need to be frame aligned; for those that do, use requestAnimationFrame.

		var frameInterval = frameYieldMs;
		var startTime = -1;

		function shouldYieldToHost() {
		  var timeElapsed = exports.unstable_now() - startTime;

		  if (timeElapsed < frameInterval) {
		    // The main thread has only been blocked for a really short amount of time;
		    // smaller than a single frame. Don't yield yet.
		    return false;
		  } // The main thread has been blocked for a non-negligible amount of time. We


		  return true;
		}

		function requestPaint() {

		}

		function forceFrameRate(fps) {
		  if (fps < 0 || fps > 125) {
		    // Using console['error'] to evade Babel and ESLint
		    console['error']('forceFrameRate takes a positive int between 0 and 125, ' + 'forcing frame rates higher than 125 fps is not supported');
		    return;
		  }

		  if (fps > 0) {
		    frameInterval = Math.floor(1000 / fps);
		  } else {
		    // reset the framerate
		    frameInterval = frameYieldMs;
		  }
		}

		var performWorkUntilDeadline = function () {
		  if (scheduledHostCallback !== null) {
		    var currentTime = exports.unstable_now(); // Keep track of the start time so we can measure how long the main thread
		    // has been blocked.

		    startTime = currentTime;
		    var hasTimeRemaining = true; // If a scheduler task throws, exit the current browser task so the
		    // error can be observed.
		    //
		    // Intentionally not using a try-catch, since that makes some debugging
		    // techniques harder. Instead, if `scheduledHostCallback` errors, then
		    // `hasMoreWork` will remain true, and we'll continue the work loop.

		    var hasMoreWork = true;

		    try {
		      hasMoreWork = scheduledHostCallback(hasTimeRemaining, currentTime);
		    } finally {
		      if (hasMoreWork) {
		        // If there's more work, schedule the next message event at the end
		        // of the preceding one.
		        schedulePerformWorkUntilDeadline();
		      } else {
		        isMessageLoopRunning = false;
		        scheduledHostCallback = null;
		      }
		    }
		  } else {
		    isMessageLoopRunning = false;
		  } // Yielding to the browser will give it a chance to paint, so we can
		};

		var schedulePerformWorkUntilDeadline;

		if (typeof localSetImmediate === 'function') {
		  // Node.js and old IE.
		  // There's a few reasons for why we prefer setImmediate.
		  //
		  // Unlike MessageChannel, it doesn't prevent a Node.js process from exiting.
		  // (Even though this is a DOM fork of the Scheduler, you could get here
		  // with a mix of Node.js 15+, which has a MessageChannel, and jsdom.)
		  // https://github.com/facebook/react/issues/20756
		  //
		  // But also, it runs earlier which is the semantic we want.
		  // If other browsers ever implement it, it's better to use it.
		  // Although both of these would be inferior to native scheduling.
		  schedulePerformWorkUntilDeadline = function () {
		    localSetImmediate(performWorkUntilDeadline);
		  };
		} else if (typeof MessageChannel !== 'undefined') {
		  // DOM and Worker environments.
		  // We prefer MessageChannel because of the 4ms setTimeout clamping.
		  var channel = new MessageChannel();
		  var port = channel.port2;
		  channel.port1.onmessage = performWorkUntilDeadline;

		  schedulePerformWorkUntilDeadline = function () {
		    port.postMessage(null);
		  };
		} else {
		  // We should only fallback here in non-browser environments.
		  schedulePerformWorkUntilDeadline = function () {
		    localSetTimeout(performWorkUntilDeadline, 0);
		  };
		}

		function requestHostCallback(callback) {
		  scheduledHostCallback = callback;

		  if (!isMessageLoopRunning) {
		    isMessageLoopRunning = true;
		    schedulePerformWorkUntilDeadline();
		  }
		}

		function requestHostTimeout(callback, ms) {
		  taskTimeoutID = localSetTimeout(function () {
		    callback(exports.unstable_now());
		  }, ms);
		}

		function cancelHostTimeout() {
		  localClearTimeout(taskTimeoutID);
		  taskTimeoutID = -1;
		}

		var unstable_requestPaint = requestPaint;
		var unstable_Profiling =  null;

		exports.unstable_IdlePriority = IdlePriority;
		exports.unstable_ImmediatePriority = ImmediatePriority;
		exports.unstable_LowPriority = LowPriority;
		exports.unstable_NormalPriority = NormalPriority;
		exports.unstable_Profiling = unstable_Profiling;
		exports.unstable_UserBlockingPriority = UserBlockingPriority;
		exports.unstable_cancelCallback = unstable_cancelCallback;
		exports.unstable_continueExecution = unstable_continueExecution;
		exports.unstable_forceFrameRate = forceFrameRate;
		exports.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;
		exports.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;
		exports.unstable_next = unstable_next;
		exports.unstable_pauseExecution = unstable_pauseExecution;
		exports.unstable_requestPaint = unstable_requestPaint;
		exports.unstable_runWithPriority = unstable_runWithPriority;
		exports.unstable_scheduleCallback = unstable_scheduleCallback;
		exports.unstable_shouldYield = shouldYieldToHost;
		exports.unstable_wrapCallback = unstable_wrapCallback;
		          /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */
		if (
		  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' &&
		  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop ===
		    'function'
		) {
		  __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
		}
		        
		  })();
		} 
	} (scheduler_development));
	return scheduler_development;
}

var hasRequiredScheduler;

function requireScheduler () {
	if (hasRequiredScheduler) return scheduler.exports;
	hasRequiredScheduler = 1;

	if (process.env.NODE_ENV === 'production') {
	  scheduler.exports = requireScheduler_production_min();
	} else {
	  scheduler.exports = requireScheduler_development();
	}
	return scheduler.exports;
}

/**
 * @license React
 * react-dom.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var hasRequiredReactDom_production_min;

function requireReactDom_production_min () {
	if (hasRequiredReactDom_production_min) return reactDom_production_min;
	hasRequiredReactDom_production_min = 1;
var aa=reactExports,ca=requireScheduler();function p(a){for(var b="https://reactjs.org/docs/error-decoder.html?invariant="+a,c=1;c<arguments.length;c++)b+="&args[]="+encodeURIComponent(arguments[c]);return "Minified React error #"+a+"; visit "+b+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var da=new Set,ea={};function fa(a,b){ha(a,b);ha(a+"Capture",b);}
	function ha(a,b){ea[a]=b;for(a=0;a<b.length;a++)da.add(b[a]);}
	var ia=!("undefined"===typeof window||"undefined"===typeof window.document||"undefined"===typeof window.document.createElement),ja=Object.prototype.hasOwnProperty,ka=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,la=
	{},ma={};function oa(a){if(ja.call(ma,a))return !0;if(ja.call(la,a))return !1;if(ka.test(a))return ma[a]=!0;la[a]=!0;return !1}function pa(a,b,c,d){if(null!==c&&0===c.type)return !1;switch(typeof b){case "function":case "symbol":return !0;case "boolean":if(d)return !1;if(null!==c)return !c.acceptsBooleans;a=a.toLowerCase().slice(0,5);return "data-"!==a&&"aria-"!==a;default:return !1}}
	function qa(a,b,c,d){if(null===b||"undefined"===typeof b||pa(a,b,c,d))return !0;if(d)return !1;if(null!==c)switch(c.type){case 3:return !b;case 4:return !1===b;case 5:return isNaN(b);case 6:return isNaN(b)||1>b}return !1}function v(a,b,c,d,e,f,g){this.acceptsBooleans=2===b||3===b||4===b;this.attributeName=d;this.attributeNamespace=e;this.mustUseProperty=c;this.propertyName=a;this.type=b;this.sanitizeURL=f;this.removeEmptyString=g;}var z={};
	"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach(function(a){z[a]=new v(a,0,!1,a,null,!1,!1);});[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach(function(a){var b=a[0];z[b]=new v(b,1,!1,a[1],null,!1,!1);});["contentEditable","draggable","spellCheck","value"].forEach(function(a){z[a]=new v(a,2,!1,a.toLowerCase(),null,!1,!1);});
	["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach(function(a){z[a]=new v(a,2,!1,a,null,!1,!1);});"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function(a){z[a]=new v(a,3,!1,a.toLowerCase(),null,!1,!1);});
	["checked","multiple","muted","selected"].forEach(function(a){z[a]=new v(a,3,!0,a,null,!1,!1);});["capture","download"].forEach(function(a){z[a]=new v(a,4,!1,a,null,!1,!1);});["cols","rows","size","span"].forEach(function(a){z[a]=new v(a,6,!1,a,null,!1,!1);});["rowSpan","start"].forEach(function(a){z[a]=new v(a,5,!1,a.toLowerCase(),null,!1,!1);});var ra=/[\-:]([a-z])/g;function sa(a){return a[1].toUpperCase()}
	"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function(a){var b=a.replace(ra,
	sa);z[b]=new v(b,1,!1,a,null,!1,!1);});"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function(a){var b=a.replace(ra,sa);z[b]=new v(b,1,!1,a,"http://www.w3.org/1999/xlink",!1,!1);});["xml:base","xml:lang","xml:space"].forEach(function(a){var b=a.replace(ra,sa);z[b]=new v(b,1,!1,a,"http://www.w3.org/XML/1998/namespace",!1,!1);});["tabIndex","crossOrigin"].forEach(function(a){z[a]=new v(a,1,!1,a.toLowerCase(),null,!1,!1);});
	z.xlinkHref=new v("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1);["src","href","action","formAction"].forEach(function(a){z[a]=new v(a,1,!1,a.toLowerCase(),null,!0,!0);});
	function ta(a,b,c,d){var e=z.hasOwnProperty(b)?z[b]:null;if(null!==e?0!==e.type:d||!(2<b.length)||"o"!==b[0]&&"O"!==b[0]||"n"!==b[1]&&"N"!==b[1])qa(b,c,e,d)&&(c=null),d||null===e?oa(b)&&(null===c?a.removeAttribute(b):a.setAttribute(b,""+c)):e.mustUseProperty?a[e.propertyName]=null===c?3===e.type?!1:"":c:(b=e.attributeName,d=e.attributeNamespace,null===c?a.removeAttribute(b):(e=e.type,c=3===e||4===e&&!0===c?"":""+c,d?a.setAttributeNS(d,b,c):a.setAttribute(b,c)));}
	var ua=aa.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,va=Symbol.for("react.element"),wa=Symbol.for("react.portal"),ya=Symbol.for("react.fragment"),za=Symbol.for("react.strict_mode"),Aa=Symbol.for("react.profiler"),Ba=Symbol.for("react.provider"),Ca=Symbol.for("react.context"),Da=Symbol.for("react.forward_ref"),Ea=Symbol.for("react.suspense"),Fa=Symbol.for("react.suspense_list"),Ga=Symbol.for("react.memo"),Ha=Symbol.for("react.lazy");	var Ia=Symbol.for("react.offscreen");var Ja=Symbol.iterator;function Ka(a){if(null===a||"object"!==typeof a)return null;a=Ja&&a[Ja]||a["@@iterator"];return "function"===typeof a?a:null}var A=Object.assign,La;function Ma(a){if(void 0===La)try{throw Error();}catch(c){var b=c.stack.trim().match(/\n( *(at )?)/);La=b&&b[1]||"";}return "\n"+La+a}var Na=!1;
	function Oa(a,b){if(!a||Na)return "";Na=!0;var c=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(b)if(b=function(){throw Error();},Object.defineProperty(b.prototype,"props",{set:function(){throw Error();}}),"object"===typeof Reflect&&Reflect.construct){try{Reflect.construct(b,[]);}catch(l){var d=l;}Reflect.construct(a,[],b);}else {try{b.call();}catch(l){d=l;}a.call(b.prototype);}else {try{throw Error();}catch(l){d=l;}a();}}catch(l){if(l&&d&&"string"===typeof l.stack){for(var e=l.stack.split("\n"),
	f=d.stack.split("\n"),g=e.length-1,h=f.length-1;1<=g&&0<=h&&e[g]!==f[h];)h--;for(;1<=g&&0<=h;g--,h--)if(e[g]!==f[h]){if(1!==g||1!==h){do if(g--,h--,0>h||e[g]!==f[h]){var k="\n"+e[g].replace(" at new "," at ");a.displayName&&k.includes("<anonymous>")&&(k=k.replace("<anonymous>",a.displayName));return k}while(1<=g&&0<=h)}break}}}finally{Na=!1,Error.prepareStackTrace=c;}return (a=a?a.displayName||a.name:"")?Ma(a):""}
	function Pa(a){switch(a.tag){case 5:return Ma(a.type);case 16:return Ma("Lazy");case 13:return Ma("Suspense");case 19:return Ma("SuspenseList");case 0:case 2:case 15:return a=Oa(a.type,!1),a;case 11:return a=Oa(a.type.render,!1),a;case 1:return a=Oa(a.type,!0),a;default:return ""}}
	function Qa(a){if(null==a)return null;if("function"===typeof a)return a.displayName||a.name||null;if("string"===typeof a)return a;switch(a){case ya:return "Fragment";case wa:return "Portal";case Aa:return "Profiler";case za:return "StrictMode";case Ea:return "Suspense";case Fa:return "SuspenseList"}if("object"===typeof a)switch(a.$$typeof){case Ca:return (a.displayName||"Context")+".Consumer";case Ba:return (a._context.displayName||"Context")+".Provider";case Da:var b=a.render;a=a.displayName;a||(a=b.displayName||
	b.name||"",a=""!==a?"ForwardRef("+a+")":"ForwardRef");return a;case Ga:return b=a.displayName||null,null!==b?b:Qa(a.type)||"Memo";case Ha:b=a._payload;a=a._init;try{return Qa(a(b))}catch(c){}}return null}
	function Ra(a){var b=a.type;switch(a.tag){case 24:return "Cache";case 9:return (b.displayName||"Context")+".Consumer";case 10:return (b._context.displayName||"Context")+".Provider";case 18:return "DehydratedFragment";case 11:return a=b.render,a=a.displayName||a.name||"",b.displayName||(""!==a?"ForwardRef("+a+")":"ForwardRef");case 7:return "Fragment";case 5:return b;case 4:return "Portal";case 3:return "Root";case 6:return "Text";case 16:return Qa(b);case 8:return b===za?"StrictMode":"Mode";case 22:return "Offscreen";
	case 12:return "Profiler";case 21:return "Scope";case 13:return "Suspense";case 19:return "SuspenseList";case 25:return "TracingMarker";case 1:case 0:case 17:case 2:case 14:case 15:if("function"===typeof b)return b.displayName||b.name||null;if("string"===typeof b)return b}return null}function Sa(a){switch(typeof a){case "boolean":case "number":case "string":case "undefined":return a;case "object":return a;default:return ""}}
	function Ta(a){var b=a.type;return (a=a.nodeName)&&"input"===a.toLowerCase()&&("checkbox"===b||"radio"===b)}
	function Ua(a){var b=Ta(a)?"checked":"value",c=Object.getOwnPropertyDescriptor(a.constructor.prototype,b),d=""+a[b];if(!a.hasOwnProperty(b)&&"undefined"!==typeof c&&"function"===typeof c.get&&"function"===typeof c.set){var e=c.get,f=c.set;Object.defineProperty(a,b,{configurable:!0,get:function(){return e.call(this)},set:function(a){d=""+a;f.call(this,a);}});Object.defineProperty(a,b,{enumerable:c.enumerable});return {getValue:function(){return d},setValue:function(a){d=""+a;},stopTracking:function(){a._valueTracker=
	null;delete a[b];}}}}function Va(a){a._valueTracker||(a._valueTracker=Ua(a));}function Wa(a){if(!a)return !1;var b=a._valueTracker;if(!b)return !0;var c=b.getValue();var d="";a&&(d=Ta(a)?a.checked?"true":"false":a.value);a=d;return a!==c?(b.setValue(a),!0):!1}function Xa(a){a=a||("undefined"!==typeof document?document:void 0);if("undefined"===typeof a)return null;try{return a.activeElement||a.body}catch(b){return a.body}}
	function Ya(a,b){var c=b.checked;return A({},b,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=c?c:a._wrapperState.initialChecked})}function Za(a,b){var c=null==b.defaultValue?"":b.defaultValue,d=null!=b.checked?b.checked:b.defaultChecked;c=Sa(null!=b.value?b.value:c);a._wrapperState={initialChecked:d,initialValue:c,controlled:"checkbox"===b.type||"radio"===b.type?null!=b.checked:null!=b.value};}function ab(a,b){b=b.checked;null!=b&&ta(a,"checked",b,!1);}
	function bb(a,b){ab(a,b);var c=Sa(b.value),d=b.type;if(null!=c)if("number"===d){if(0===c&&""===a.value||a.value!=c)a.value=""+c;}else a.value!==""+c&&(a.value=""+c);else if("submit"===d||"reset"===d){a.removeAttribute("value");return}b.hasOwnProperty("value")?cb(a,b.type,c):b.hasOwnProperty("defaultValue")&&cb(a,b.type,Sa(b.defaultValue));null==b.checked&&null!=b.defaultChecked&&(a.defaultChecked=!!b.defaultChecked);}
	function db(a,b,c){if(b.hasOwnProperty("value")||b.hasOwnProperty("defaultValue")){var d=b.type;if(!("submit"!==d&&"reset"!==d||void 0!==b.value&&null!==b.value))return;b=""+a._wrapperState.initialValue;c||b===a.value||(a.value=b);a.defaultValue=b;}c=a.name;""!==c&&(a.name="");a.defaultChecked=!!a._wrapperState.initialChecked;""!==c&&(a.name=c);}
	function cb(a,b,c){if("number"!==b||Xa(a.ownerDocument)!==a)null==c?a.defaultValue=""+a._wrapperState.initialValue:a.defaultValue!==""+c&&(a.defaultValue=""+c);}var eb=Array.isArray;
	function fb(a,b,c,d){a=a.options;if(b){b={};for(var e=0;e<c.length;e++)b["$"+c[e]]=!0;for(c=0;c<a.length;c++)e=b.hasOwnProperty("$"+a[c].value),a[c].selected!==e&&(a[c].selected=e),e&&d&&(a[c].defaultSelected=!0);}else {c=""+Sa(c);b=null;for(e=0;e<a.length;e++){if(a[e].value===c){a[e].selected=!0;d&&(a[e].defaultSelected=!0);return}null!==b||a[e].disabled||(b=a[e]);}null!==b&&(b.selected=!0);}}
	function gb(a,b){if(null!=b.dangerouslySetInnerHTML)throw Error(p(91));return A({},b,{value:void 0,defaultValue:void 0,children:""+a._wrapperState.initialValue})}function hb(a,b){var c=b.value;if(null==c){c=b.children;b=b.defaultValue;if(null!=c){if(null!=b)throw Error(p(92));if(eb(c)){if(1<c.length)throw Error(p(93));c=c[0];}b=c;}null==b&&(b="");c=b;}a._wrapperState={initialValue:Sa(c)};}
	function ib(a,b){var c=Sa(b.value),d=Sa(b.defaultValue);null!=c&&(c=""+c,c!==a.value&&(a.value=c),null==b.defaultValue&&a.defaultValue!==c&&(a.defaultValue=c));null!=d&&(a.defaultValue=""+d);}function jb(a){var b=a.textContent;b===a._wrapperState.initialValue&&""!==b&&null!==b&&(a.value=b);}function kb(a){switch(a){case "svg":return "http://www.w3.org/2000/svg";case "math":return "http://www.w3.org/1998/Math/MathML";default:return "http://www.w3.org/1999/xhtml"}}
	function lb(a,b){return null==a||"http://www.w3.org/1999/xhtml"===a?kb(b):"http://www.w3.org/2000/svg"===a&&"foreignObject"===b?"http://www.w3.org/1999/xhtml":a}
	var mb,nb=function(a){return "undefined"!==typeof MSApp&&MSApp.execUnsafeLocalFunction?function(b,c,d,e){MSApp.execUnsafeLocalFunction(function(){return a(b,c,d,e)});}:a}(function(a,b){if("http://www.w3.org/2000/svg"!==a.namespaceURI||"innerHTML"in a)a.innerHTML=b;else {mb=mb||document.createElement("div");mb.innerHTML="<svg>"+b.valueOf().toString()+"</svg>";for(b=mb.firstChild;a.firstChild;)a.removeChild(a.firstChild);for(;b.firstChild;)a.appendChild(b.firstChild);}});
	function ob(a,b){if(b){var c=a.firstChild;if(c&&c===a.lastChild&&3===c.nodeType){c.nodeValue=b;return}}a.textContent=b;}
	var pb={animationIterationCount:!0,aspectRatio:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,
	zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},qb=["Webkit","ms","Moz","O"];Object.keys(pb).forEach(function(a){qb.forEach(function(b){b=b+a.charAt(0).toUpperCase()+a.substring(1);pb[b]=pb[a];});});function rb(a,b,c){return null==b||"boolean"===typeof b||""===b?"":c||"number"!==typeof b||0===b||pb.hasOwnProperty(a)&&pb[a]?(""+b).trim():b+"px"}
	function sb(a,b){a=a.style;for(var c in b)if(b.hasOwnProperty(c)){var d=0===c.indexOf("--"),e=rb(c,b[c],d);"float"===c&&(c="cssFloat");d?a.setProperty(c,e):a[c]=e;}}var tb=A({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});
	function ub(a,b){if(b){if(tb[a]&&(null!=b.children||null!=b.dangerouslySetInnerHTML))throw Error(p(137,a));if(null!=b.dangerouslySetInnerHTML){if(null!=b.children)throw Error(p(60));if("object"!==typeof b.dangerouslySetInnerHTML||!("__html"in b.dangerouslySetInnerHTML))throw Error(p(61));}if(null!=b.style&&"object"!==typeof b.style)throw Error(p(62));}}
	function vb(a,b){if(-1===a.indexOf("-"))return "string"===typeof b.is;switch(a){case "annotation-xml":case "color-profile":case "font-face":case "font-face-src":case "font-face-uri":case "font-face-format":case "font-face-name":case "missing-glyph":return !1;default:return !0}}var wb=null;function xb(a){a=a.target||a.srcElement||window;a.correspondingUseElement&&(a=a.correspondingUseElement);return 3===a.nodeType?a.parentNode:a}var yb=null,zb=null,Ab=null;
	function Bb(a){if(a=Cb(a)){if("function"!==typeof yb)throw Error(p(280));var b=a.stateNode;b&&(b=Db(b),yb(a.stateNode,a.type,b));}}function Eb(a){zb?Ab?Ab.push(a):Ab=[a]:zb=a;}function Fb(){if(zb){var a=zb,b=Ab;Ab=zb=null;Bb(a);if(b)for(a=0;a<b.length;a++)Bb(b[a]);}}function Gb(a,b){return a(b)}function Hb(){}var Ib=!1;function Jb(a,b,c){if(Ib)return a(b,c);Ib=!0;try{return Gb(a,b,c)}finally{if(Ib=!1,null!==zb||null!==Ab)Hb(),Fb();}}
	function Kb(a,b){var c=a.stateNode;if(null===c)return null;var d=Db(c);if(null===d)return null;c=d[b];a:switch(b){case "onClick":case "onClickCapture":case "onDoubleClick":case "onDoubleClickCapture":case "onMouseDown":case "onMouseDownCapture":case "onMouseMove":case "onMouseMoveCapture":case "onMouseUp":case "onMouseUpCapture":case "onMouseEnter":(d=!d.disabled)||(a=a.type,d=!("button"===a||"input"===a||"select"===a||"textarea"===a));a=!d;break a;default:a=!1;}if(a)return null;if(c&&"function"!==
	typeof c)throw Error(p(231,b,typeof c));return c}var Lb=!1;if(ia)try{var Mb={};Object.defineProperty(Mb,"passive",{get:function(){Lb=!0;}});window.addEventListener("test",Mb,Mb);window.removeEventListener("test",Mb,Mb);}catch(a){Lb=!1;}function Nb(a,b,c,d,e,f,g,h,k){var l=Array.prototype.slice.call(arguments,3);try{b.apply(c,l);}catch(m){this.onError(m);}}var Ob=!1,Pb=null,Qb=!1,Rb=null,Sb={onError:function(a){Ob=!0;Pb=a;}};function Tb(a,b,c,d,e,f,g,h,k){Ob=!1;Pb=null;Nb.apply(Sb,arguments);}
	function Ub(a,b,c,d,e,f,g,h,k){Tb.apply(this,arguments);if(Ob){if(Ob){var l=Pb;Ob=!1;Pb=null;}else throw Error(p(198));Qb||(Qb=!0,Rb=l);}}function Vb(a){var b=a,c=a;if(a.alternate)for(;b.return;)b=b.return;else {a=b;do b=a,0!==(b.flags&4098)&&(c=b.return),a=b.return;while(a)}return 3===b.tag?c:null}function Wb(a){if(13===a.tag){var b=a.memoizedState;null===b&&(a=a.alternate,null!==a&&(b=a.memoizedState));if(null!==b)return b.dehydrated}return null}function Xb(a){if(Vb(a)!==a)throw Error(p(188));}
	function Yb(a){var b=a.alternate;if(!b){b=Vb(a);if(null===b)throw Error(p(188));return b!==a?null:a}for(var c=a,d=b;;){var e=c.return;if(null===e)break;var f=e.alternate;if(null===f){d=e.return;if(null!==d){c=d;continue}break}if(e.child===f.child){for(f=e.child;f;){if(f===c)return Xb(e),a;if(f===d)return Xb(e),b;f=f.sibling;}throw Error(p(188));}if(c.return!==d.return)c=e,d=f;else {for(var g=!1,h=e.child;h;){if(h===c){g=!0;c=e;d=f;break}if(h===d){g=!0;d=e;c=f;break}h=h.sibling;}if(!g){for(h=f.child;h;){if(h===
	c){g=!0;c=f;d=e;break}if(h===d){g=!0;d=f;c=e;break}h=h.sibling;}if(!g)throw Error(p(189));}}if(c.alternate!==d)throw Error(p(190));}if(3!==c.tag)throw Error(p(188));return c.stateNode.current===c?a:b}function Zb(a){a=Yb(a);return null!==a?$b(a):null}function $b(a){if(5===a.tag||6===a.tag)return a;for(a=a.child;null!==a;){var b=$b(a);if(null!==b)return b;a=a.sibling;}return null}
	var ac=ca.unstable_scheduleCallback,bc=ca.unstable_cancelCallback,cc=ca.unstable_shouldYield,dc=ca.unstable_requestPaint,B=ca.unstable_now,ec=ca.unstable_getCurrentPriorityLevel,fc=ca.unstable_ImmediatePriority,gc=ca.unstable_UserBlockingPriority,hc=ca.unstable_NormalPriority,ic=ca.unstable_LowPriority,jc=ca.unstable_IdlePriority,kc=null,lc=null;function mc(a){if(lc&&"function"===typeof lc.onCommitFiberRoot)try{lc.onCommitFiberRoot(kc,a,void 0,128===(a.current.flags&128));}catch(b){}}
	var oc=Math.clz32?Math.clz32:nc,pc=Math.log,qc=Math.LN2;function nc(a){a>>>=0;return 0===a?32:31-(pc(a)/qc|0)|0}var rc=64,sc=4194304;
	function tc(a){switch(a&-a){case 1:return 1;case 2:return 2;case 4:return 4;case 8:return 8;case 16:return 16;case 32:return 32;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return a&4194240;case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:return a&130023424;case 134217728:return 134217728;case 268435456:return 268435456;case 536870912:return 536870912;case 1073741824:return 1073741824;
	default:return a}}function uc(a,b){var c=a.pendingLanes;if(0===c)return 0;var d=0,e=a.suspendedLanes,f=a.pingedLanes,g=c&268435455;if(0!==g){var h=g&~e;0!==h?d=tc(h):(f&=g,0!==f&&(d=tc(f)));}else g=c&~e,0!==g?d=tc(g):0!==f&&(d=tc(f));if(0===d)return 0;if(0!==b&&b!==d&&0===(b&e)&&(e=d&-d,f=b&-b,e>=f||16===e&&0!==(f&4194240)))return b;0!==(d&4)&&(d|=c&16);b=a.entangledLanes;if(0!==b)for(a=a.entanglements,b&=d;0<b;)c=31-oc(b),e=1<<c,d|=a[c],b&=~e;return d}
	function vc(a,b){switch(a){case 1:case 2:case 4:return b+250;case 8:case 16:case 32:case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return b+5E3;case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:return -1;case 134217728:case 268435456:case 536870912:case 1073741824:return -1;default:return -1}}
	function wc(a,b){for(var c=a.suspendedLanes,d=a.pingedLanes,e=a.expirationTimes,f=a.pendingLanes;0<f;){var g=31-oc(f),h=1<<g,k=e[g];if(-1===k){if(0===(h&c)||0!==(h&d))e[g]=vc(h,b);}else k<=b&&(a.expiredLanes|=h);f&=~h;}}function xc(a){a=a.pendingLanes&-1073741825;return 0!==a?a:a&1073741824?1073741824:0}function yc(){var a=rc;rc<<=1;0===(rc&4194240)&&(rc=64);return a}function zc(a){for(var b=[],c=0;31>c;c++)b.push(a);return b}
	function Ac(a,b,c){a.pendingLanes|=b;536870912!==b&&(a.suspendedLanes=0,a.pingedLanes=0);a=a.eventTimes;b=31-oc(b);a[b]=c;}function Bc(a,b){var c=a.pendingLanes&~b;a.pendingLanes=b;a.suspendedLanes=0;a.pingedLanes=0;a.expiredLanes&=b;a.mutableReadLanes&=b;a.entangledLanes&=b;b=a.entanglements;var d=a.eventTimes;for(a=a.expirationTimes;0<c;){var e=31-oc(c),f=1<<e;b[e]=0;d[e]=-1;a[e]=-1;c&=~f;}}
	function Cc(a,b){var c=a.entangledLanes|=b;for(a=a.entanglements;c;){var d=31-oc(c),e=1<<d;e&b|a[d]&b&&(a[d]|=b);c&=~e;}}var C=0;function Dc(a){a&=-a;return 1<a?4<a?0!==(a&268435455)?16:536870912:4:1}var Ec,Fc,Gc,Hc,Ic,Jc=!1,Kc=[],Lc=null,Mc=null,Nc=null,Oc=new Map,Pc=new Map,Qc=[],Rc="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");
	function Sc(a,b){switch(a){case "focusin":case "focusout":Lc=null;break;case "dragenter":case "dragleave":Mc=null;break;case "mouseover":case "mouseout":Nc=null;break;case "pointerover":case "pointerout":Oc.delete(b.pointerId);break;case "gotpointercapture":case "lostpointercapture":Pc.delete(b.pointerId);}}
	function Tc(a,b,c,d,e,f){if(null===a||a.nativeEvent!==f)return a={blockedOn:b,domEventName:c,eventSystemFlags:d,nativeEvent:f,targetContainers:[e]},null!==b&&(b=Cb(b),null!==b&&Fc(b)),a;a.eventSystemFlags|=d;b=a.targetContainers;null!==e&&-1===b.indexOf(e)&&b.push(e);return a}
	function Uc(a,b,c,d,e){switch(b){case "focusin":return Lc=Tc(Lc,a,b,c,d,e),!0;case "dragenter":return Mc=Tc(Mc,a,b,c,d,e),!0;case "mouseover":return Nc=Tc(Nc,a,b,c,d,e),!0;case "pointerover":var f=e.pointerId;Oc.set(f,Tc(Oc.get(f)||null,a,b,c,d,e));return !0;case "gotpointercapture":return f=e.pointerId,Pc.set(f,Tc(Pc.get(f)||null,a,b,c,d,e)),!0}return !1}
	function Vc(a){var b=Wc(a.target);if(null!==b){var c=Vb(b);if(null!==c)if(b=c.tag,13===b){if(b=Wb(c),null!==b){a.blockedOn=b;Ic(a.priority,function(){Gc(c);});return}}else if(3===b&&c.stateNode.current.memoizedState.isDehydrated){a.blockedOn=3===c.tag?c.stateNode.containerInfo:null;return}}a.blockedOn=null;}
	function Xc(a){if(null!==a.blockedOn)return !1;for(var b=a.targetContainers;0<b.length;){var c=Yc(a.domEventName,a.eventSystemFlags,b[0],a.nativeEvent);if(null===c){c=a.nativeEvent;var d=new c.constructor(c.type,c);wb=d;c.target.dispatchEvent(d);wb=null;}else return b=Cb(c),null!==b&&Fc(b),a.blockedOn=c,!1;b.shift();}return !0}function Zc(a,b,c){Xc(a)&&c.delete(b);}function $c(){Jc=!1;null!==Lc&&Xc(Lc)&&(Lc=null);null!==Mc&&Xc(Mc)&&(Mc=null);null!==Nc&&Xc(Nc)&&(Nc=null);Oc.forEach(Zc);Pc.forEach(Zc);}
	function ad(a,b){a.blockedOn===b&&(a.blockedOn=null,Jc||(Jc=!0,ca.unstable_scheduleCallback(ca.unstable_NormalPriority,$c)));}
	function bd(a){function b(b){return ad(b,a)}if(0<Kc.length){ad(Kc[0],a);for(var c=1;c<Kc.length;c++){var d=Kc[c];d.blockedOn===a&&(d.blockedOn=null);}}null!==Lc&&ad(Lc,a);null!==Mc&&ad(Mc,a);null!==Nc&&ad(Nc,a);Oc.forEach(b);Pc.forEach(b);for(c=0;c<Qc.length;c++)d=Qc[c],d.blockedOn===a&&(d.blockedOn=null);for(;0<Qc.length&&(c=Qc[0],null===c.blockedOn);)Vc(c),null===c.blockedOn&&Qc.shift();}var cd=ua.ReactCurrentBatchConfig,dd=!0;
	function ed(a,b,c,d){var e=C,f=cd.transition;cd.transition=null;try{C=1,fd(a,b,c,d);}finally{C=e,cd.transition=f;}}function gd(a,b,c,d){var e=C,f=cd.transition;cd.transition=null;try{C=4,fd(a,b,c,d);}finally{C=e,cd.transition=f;}}
	function fd(a,b,c,d){if(dd){var e=Yc(a,b,c,d);if(null===e)hd(a,b,d,id,c),Sc(a,d);else if(Uc(e,a,b,c,d))d.stopPropagation();else if(Sc(a,d),b&4&&-1<Rc.indexOf(a)){for(;null!==e;){var f=Cb(e);null!==f&&Ec(f);f=Yc(a,b,c,d);null===f&&hd(a,b,d,id,c);if(f===e)break;e=f;}null!==e&&d.stopPropagation();}else hd(a,b,d,null,c);}}var id=null;
	function Yc(a,b,c,d){id=null;a=xb(d);a=Wc(a);if(null!==a)if(b=Vb(a),null===b)a=null;else if(c=b.tag,13===c){a=Wb(b);if(null!==a)return a;a=null;}else if(3===c){if(b.stateNode.current.memoizedState.isDehydrated)return 3===b.tag?b.stateNode.containerInfo:null;a=null;}else b!==a&&(a=null);id=a;return null}
	function jd(a){switch(a){case "cancel":case "click":case "close":case "contextmenu":case "copy":case "cut":case "auxclick":case "dblclick":case "dragend":case "dragstart":case "drop":case "focusin":case "focusout":case "input":case "invalid":case "keydown":case "keypress":case "keyup":case "mousedown":case "mouseup":case "paste":case "pause":case "play":case "pointercancel":case "pointerdown":case "pointerup":case "ratechange":case "reset":case "resize":case "seeked":case "submit":case "touchcancel":case "touchend":case "touchstart":case "volumechange":case "change":case "selectionchange":case "textInput":case "compositionstart":case "compositionend":case "compositionupdate":case "beforeblur":case "afterblur":case "beforeinput":case "blur":case "fullscreenchange":case "focus":case "hashchange":case "popstate":case "select":case "selectstart":return 1;case "drag":case "dragenter":case "dragexit":case "dragleave":case "dragover":case "mousemove":case "mouseout":case "mouseover":case "pointermove":case "pointerout":case "pointerover":case "scroll":case "toggle":case "touchmove":case "wheel":case "mouseenter":case "mouseleave":case "pointerenter":case "pointerleave":return 4;
	case "message":switch(ec()){case fc:return 1;case gc:return 4;case hc:case ic:return 16;case jc:return 536870912;default:return 16}default:return 16}}var kd=null,ld=null,md=null;function nd(){if(md)return md;var a,b=ld,c=b.length,d,e="value"in kd?kd.value:kd.textContent,f=e.length;for(a=0;a<c&&b[a]===e[a];a++);var g=c-a;for(d=1;d<=g&&b[c-d]===e[f-d];d++);return md=e.slice(a,1<d?1-d:void 0)}
	function od(a){var b=a.keyCode;"charCode"in a?(a=a.charCode,0===a&&13===b&&(a=13)):a=b;10===a&&(a=13);return 32<=a||13===a?a:0}function pd(){return !0}function qd(){return !1}
	function rd(a){function b(b,d,e,f,g){this._reactName=b;this._targetInst=e;this.type=d;this.nativeEvent=f;this.target=g;this.currentTarget=null;for(var c in a)a.hasOwnProperty(c)&&(b=a[c],this[c]=b?b(f):f[c]);this.isDefaultPrevented=(null!=f.defaultPrevented?f.defaultPrevented:!1===f.returnValue)?pd:qd;this.isPropagationStopped=qd;return this}A(b.prototype,{preventDefault:function(){this.defaultPrevented=!0;var a=this.nativeEvent;a&&(a.preventDefault?a.preventDefault():"unknown"!==typeof a.returnValue&&
	(a.returnValue=!1),this.isDefaultPrevented=pd);},stopPropagation:function(){var a=this.nativeEvent;a&&(a.stopPropagation?a.stopPropagation():"unknown"!==typeof a.cancelBubble&&(a.cancelBubble=!0),this.isPropagationStopped=pd);},persist:function(){},isPersistent:pd});return b}
	var sd={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(a){return a.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},td=rd(sd),ud=A({},sd,{view:0,detail:0}),vd=rd(ud),wd,xd,yd,Ad=A({},ud,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:zd,button:0,buttons:0,relatedTarget:function(a){return void 0===a.relatedTarget?a.fromElement===a.srcElement?a.toElement:a.fromElement:a.relatedTarget},movementX:function(a){if("movementX"in
	a)return a.movementX;a!==yd&&(yd&&"mousemove"===a.type?(wd=a.screenX-yd.screenX,xd=a.screenY-yd.screenY):xd=wd=0,yd=a);return wd},movementY:function(a){return "movementY"in a?a.movementY:xd}}),Bd=rd(Ad),Cd=A({},Ad,{dataTransfer:0}),Dd=rd(Cd),Ed=A({},ud,{relatedTarget:0}),Fd=rd(Ed),Gd=A({},sd,{animationName:0,elapsedTime:0,pseudoElement:0}),Hd=rd(Gd),Id=A({},sd,{clipboardData:function(a){return "clipboardData"in a?a.clipboardData:window.clipboardData}}),Jd=rd(Id),Kd=A({},sd,{data:0}),Ld=rd(Kd),Md={Esc:"Escape",
	Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},Nd={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",
	119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},Od={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Pd(a){var b=this.nativeEvent;return b.getModifierState?b.getModifierState(a):(a=Od[a])?!!b[a]:!1}function zd(){return Pd}
	var Qd=A({},ud,{key:function(a){if(a.key){var b=Md[a.key]||a.key;if("Unidentified"!==b)return b}return "keypress"===a.type?(a=od(a),13===a?"Enter":String.fromCharCode(a)):"keydown"===a.type||"keyup"===a.type?Nd[a.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:zd,charCode:function(a){return "keypress"===a.type?od(a):0},keyCode:function(a){return "keydown"===a.type||"keyup"===a.type?a.keyCode:0},which:function(a){return "keypress"===
	a.type?od(a):"keydown"===a.type||"keyup"===a.type?a.keyCode:0}}),Rd=rd(Qd),Sd=A({},Ad,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0}),Td=rd(Sd),Ud=A({},ud,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:zd}),Vd=rd(Ud),Wd=A({},sd,{propertyName:0,elapsedTime:0,pseudoElement:0}),Xd=rd(Wd),Yd=A({},Ad,{deltaX:function(a){return "deltaX"in a?a.deltaX:"wheelDeltaX"in a?-a.wheelDeltaX:0},
	deltaY:function(a){return "deltaY"in a?a.deltaY:"wheelDeltaY"in a?-a.wheelDeltaY:"wheelDelta"in a?-a.wheelDelta:0},deltaZ:0,deltaMode:0}),Zd=rd(Yd),$d=[9,13,27,32],ae=ia&&"CompositionEvent"in window,be=null;ia&&"documentMode"in document&&(be=document.documentMode);var ce=ia&&"TextEvent"in window&&!be,de=ia&&(!ae||be&&8<be&&11>=be),ee=String.fromCharCode(32),fe=!1;
	function ge(a,b){switch(a){case "keyup":return -1!==$d.indexOf(b.keyCode);case "keydown":return 229!==b.keyCode;case "keypress":case "mousedown":case "focusout":return !0;default:return !1}}function he(a){a=a.detail;return "object"===typeof a&&"data"in a?a.data:null}var ie=!1;function je(a,b){switch(a){case "compositionend":return he(b);case "keypress":if(32!==b.which)return null;fe=!0;return ee;case "textInput":return a=b.data,a===ee&&fe?null:a;default:return null}}
	function ke(a,b){if(ie)return "compositionend"===a||!ae&&ge(a,b)?(a=nd(),md=ld=kd=null,ie=!1,a):null;switch(a){case "paste":return null;case "keypress":if(!(b.ctrlKey||b.altKey||b.metaKey)||b.ctrlKey&&b.altKey){if(b.char&&1<b.char.length)return b.char;if(b.which)return String.fromCharCode(b.which)}return null;case "compositionend":return de&&"ko"!==b.locale?null:b.data;default:return null}}
	var le={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function me(a){var b=a&&a.nodeName&&a.nodeName.toLowerCase();return "input"===b?!!le[a.type]:"textarea"===b?!0:!1}function ne(a,b,c,d){Eb(d);b=oe(b,"onChange");0<b.length&&(c=new td("onChange","change",null,c,d),a.push({event:c,listeners:b}));}var pe=null,qe=null;function re(a){se(a,0);}function te(a){var b=ue(a);if(Wa(b))return a}
	function ve(a,b){if("change"===a)return b}var we=!1;if(ia){var xe;if(ia){var ye="oninput"in document;if(!ye){var ze=document.createElement("div");ze.setAttribute("oninput","return;");ye="function"===typeof ze.oninput;}xe=ye;}else xe=!1;we=xe&&(!document.documentMode||9<document.documentMode);}function Ae(){pe&&(pe.detachEvent("onpropertychange",Be),qe=pe=null);}function Be(a){if("value"===a.propertyName&&te(qe)){var b=[];ne(b,qe,a,xb(a));Jb(re,b);}}
	function Ce(a,b,c){"focusin"===a?(Ae(),pe=b,qe=c,pe.attachEvent("onpropertychange",Be)):"focusout"===a&&Ae();}function De(a){if("selectionchange"===a||"keyup"===a||"keydown"===a)return te(qe)}function Ee(a,b){if("click"===a)return te(b)}function Fe(a,b){if("input"===a||"change"===a)return te(b)}function Ge(a,b){return a===b&&(0!==a||1/a===1/b)||a!==a&&b!==b}var He="function"===typeof Object.is?Object.is:Ge;
	function Ie(a,b){if(He(a,b))return !0;if("object"!==typeof a||null===a||"object"!==typeof b||null===b)return !1;var c=Object.keys(a),d=Object.keys(b);if(c.length!==d.length)return !1;for(d=0;d<c.length;d++){var e=c[d];if(!ja.call(b,e)||!He(a[e],b[e]))return !1}return !0}function Je(a){for(;a&&a.firstChild;)a=a.firstChild;return a}
	function Ke(a,b){var c=Je(a);a=0;for(var d;c;){if(3===c.nodeType){d=a+c.textContent.length;if(a<=b&&d>=b)return {node:c,offset:b-a};a=d;}a:{for(;c;){if(c.nextSibling){c=c.nextSibling;break a}c=c.parentNode;}c=void 0;}c=Je(c);}}function Le(a,b){return a&&b?a===b?!0:a&&3===a.nodeType?!1:b&&3===b.nodeType?Le(a,b.parentNode):"contains"in a?a.contains(b):a.compareDocumentPosition?!!(a.compareDocumentPosition(b)&16):!1:!1}
	function Me(){for(var a=window,b=Xa();b instanceof a.HTMLIFrameElement;){try{var c="string"===typeof b.contentWindow.location.href;}catch(d){c=!1;}if(c)a=b.contentWindow;else break;b=Xa(a.document);}return b}function Ne(a){var b=a&&a.nodeName&&a.nodeName.toLowerCase();return b&&("input"===b&&("text"===a.type||"search"===a.type||"tel"===a.type||"url"===a.type||"password"===a.type)||"textarea"===b||"true"===a.contentEditable)}
	function Oe(a){var b=Me(),c=a.focusedElem,d=a.selectionRange;if(b!==c&&c&&c.ownerDocument&&Le(c.ownerDocument.documentElement,c)){if(null!==d&&Ne(c))if(b=d.start,a=d.end,void 0===a&&(a=b),"selectionStart"in c)c.selectionStart=b,c.selectionEnd=Math.min(a,c.value.length);else if(a=(b=c.ownerDocument||document)&&b.defaultView||window,a.getSelection){a=a.getSelection();var e=c.textContent.length,f=Math.min(d.start,e);d=void 0===d.end?f:Math.min(d.end,e);!a.extend&&f>d&&(e=d,d=f,f=e);e=Ke(c,f);var g=Ke(c,
	d);e&&g&&(1!==a.rangeCount||a.anchorNode!==e.node||a.anchorOffset!==e.offset||a.focusNode!==g.node||a.focusOffset!==g.offset)&&(b=b.createRange(),b.setStart(e.node,e.offset),a.removeAllRanges(),f>d?(a.addRange(b),a.extend(g.node,g.offset)):(b.setEnd(g.node,g.offset),a.addRange(b)));}b=[];for(a=c;a=a.parentNode;)1===a.nodeType&&b.push({element:a,left:a.scrollLeft,top:a.scrollTop});"function"===typeof c.focus&&c.focus();for(c=0;c<b.length;c++)a=b[c],a.element.scrollLeft=a.left,a.element.scrollTop=a.top;}}
	var Pe=ia&&"documentMode"in document&&11>=document.documentMode,Qe=null,Re=null,Se=null,Te=!1;
	function Ue(a,b,c){var d=c.window===c?c.document:9===c.nodeType?c:c.ownerDocument;Te||null==Qe||Qe!==Xa(d)||(d=Qe,"selectionStart"in d&&Ne(d)?d={start:d.selectionStart,end:d.selectionEnd}:(d=(d.ownerDocument&&d.ownerDocument.defaultView||window).getSelection(),d={anchorNode:d.anchorNode,anchorOffset:d.anchorOffset,focusNode:d.focusNode,focusOffset:d.focusOffset}),Se&&Ie(Se,d)||(Se=d,d=oe(Re,"onSelect"),0<d.length&&(b=new td("onSelect","select",null,b,c),a.push({event:b,listeners:d}),b.target=Qe)));}
	function Ve(a,b){var c={};c[a.toLowerCase()]=b.toLowerCase();c["Webkit"+a]="webkit"+b;c["Moz"+a]="moz"+b;return c}var We={animationend:Ve("Animation","AnimationEnd"),animationiteration:Ve("Animation","AnimationIteration"),animationstart:Ve("Animation","AnimationStart"),transitionend:Ve("Transition","TransitionEnd")},Xe={},Ye={};
	ia&&(Ye=document.createElement("div").style,"AnimationEvent"in window||(delete We.animationend.animation,delete We.animationiteration.animation,delete We.animationstart.animation),"TransitionEvent"in window||delete We.transitionend.transition);function Ze(a){if(Xe[a])return Xe[a];if(!We[a])return a;var b=We[a],c;for(c in b)if(b.hasOwnProperty(c)&&c in Ye)return Xe[a]=b[c];return a}var $e=Ze("animationend"),af=Ze("animationiteration"),bf=Ze("animationstart"),cf=Ze("transitionend"),df=new Map,ef="abort auxClick cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(" ");
	function ff(a,b){df.set(a,b);fa(b,[a]);}for(var gf=0;gf<ef.length;gf++){var hf=ef[gf],jf=hf.toLowerCase(),kf=hf[0].toUpperCase()+hf.slice(1);ff(jf,"on"+kf);}ff($e,"onAnimationEnd");ff(af,"onAnimationIteration");ff(bf,"onAnimationStart");ff("dblclick","onDoubleClick");ff("focusin","onFocus");ff("focusout","onBlur");ff(cf,"onTransitionEnd");ha("onMouseEnter",["mouseout","mouseover"]);ha("onMouseLeave",["mouseout","mouseover"]);ha("onPointerEnter",["pointerout","pointerover"]);
	ha("onPointerLeave",["pointerout","pointerover"]);fa("onChange","change click focusin focusout input keydown keyup selectionchange".split(" "));fa("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" "));fa("onBeforeInput",["compositionend","keypress","textInput","paste"]);fa("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" "));fa("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" "));
	fa("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var lf="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),mf=new Set("cancel close invalid load scroll toggle".split(" ").concat(lf));
	function nf(a,b,c){var d=a.type||"unknown-event";a.currentTarget=c;Ub(d,b,void 0,a);a.currentTarget=null;}
	function se(a,b){b=0!==(b&4);for(var c=0;c<a.length;c++){var d=a[c],e=d.event;d=d.listeners;a:{var f=void 0;if(b)for(var g=d.length-1;0<=g;g--){var h=d[g],k=h.instance,l=h.currentTarget;h=h.listener;if(k!==f&&e.isPropagationStopped())break a;nf(e,h,l);f=k;}else for(g=0;g<d.length;g++){h=d[g];k=h.instance;l=h.currentTarget;h=h.listener;if(k!==f&&e.isPropagationStopped())break a;nf(e,h,l);f=k;}}}if(Qb)throw a=Rb,Qb=!1,Rb=null,a;}
	function D(a,b){var c=b[of];void 0===c&&(c=b[of]=new Set);var d=a+"__bubble";c.has(d)||(pf(b,a,2,!1),c.add(d));}function qf(a,b,c){var d=0;b&&(d|=4);pf(c,a,d,b);}var rf="_reactListening"+Math.random().toString(36).slice(2);function sf(a){if(!a[rf]){a[rf]=!0;da.forEach(function(b){"selectionchange"!==b&&(mf.has(b)||qf(b,!1,a),qf(b,!0,a));});var b=9===a.nodeType?a:a.ownerDocument;null===b||b[rf]||(b[rf]=!0,qf("selectionchange",!1,b));}}
	function pf(a,b,c,d){switch(jd(b)){case 1:var e=ed;break;case 4:e=gd;break;default:e=fd;}c=e.bind(null,b,c,a);e=void 0;!Lb||"touchstart"!==b&&"touchmove"!==b&&"wheel"!==b||(e=!0);d?void 0!==e?a.addEventListener(b,c,{capture:!0,passive:e}):a.addEventListener(b,c,!0):void 0!==e?a.addEventListener(b,c,{passive:e}):a.addEventListener(b,c,!1);}
	function hd(a,b,c,d,e){var f=d;if(0===(b&1)&&0===(b&2)&&null!==d)a:for(;;){if(null===d)return;var g=d.tag;if(3===g||4===g){var h=d.stateNode.containerInfo;if(h===e||8===h.nodeType&&h.parentNode===e)break;if(4===g)for(g=d.return;null!==g;){var k=g.tag;if(3===k||4===k)if(k=g.stateNode.containerInfo,k===e||8===k.nodeType&&k.parentNode===e)return;g=g.return;}for(;null!==h;){g=Wc(h);if(null===g)return;k=g.tag;if(5===k||6===k){d=f=g;continue a}h=h.parentNode;}}d=d.return;}Jb(function(){var d=f,e=xb(c),g=[];
	a:{var h=df.get(a);if(void 0!==h){var k=td,n=a;switch(a){case "keypress":if(0===od(c))break a;case "keydown":case "keyup":k=Rd;break;case "focusin":n="focus";k=Fd;break;case "focusout":n="blur";k=Fd;break;case "beforeblur":case "afterblur":k=Fd;break;case "click":if(2===c.button)break a;case "auxclick":case "dblclick":case "mousedown":case "mousemove":case "mouseup":case "mouseout":case "mouseover":case "contextmenu":k=Bd;break;case "drag":case "dragend":case "dragenter":case "dragexit":case "dragleave":case "dragover":case "dragstart":case "drop":k=
	Dd;break;case "touchcancel":case "touchend":case "touchmove":case "touchstart":k=Vd;break;case $e:case af:case bf:k=Hd;break;case cf:k=Xd;break;case "scroll":k=vd;break;case "wheel":k=Zd;break;case "copy":case "cut":case "paste":k=Jd;break;case "gotpointercapture":case "lostpointercapture":case "pointercancel":case "pointerdown":case "pointermove":case "pointerout":case "pointerover":case "pointerup":k=Td;}var t=0!==(b&4),J=!t&&"scroll"===a,x=t?null!==h?h+"Capture":null:h;t=[];for(var w=d,u;null!==
	w;){u=w;var F=u.stateNode;5===u.tag&&null!==F&&(u=F,null!==x&&(F=Kb(w,x),null!=F&&t.push(tf(w,F,u))));if(J)break;w=w.return;}0<t.length&&(h=new k(h,n,null,c,e),g.push({event:h,listeners:t}));}}if(0===(b&7)){a:{h="mouseover"===a||"pointerover"===a;k="mouseout"===a||"pointerout"===a;if(h&&c!==wb&&(n=c.relatedTarget||c.fromElement)&&(Wc(n)||n[uf]))break a;if(k||h){h=e.window===e?e:(h=e.ownerDocument)?h.defaultView||h.parentWindow:window;if(k){if(n=c.relatedTarget||c.toElement,k=d,n=n?Wc(n):null,null!==
	n&&(J=Vb(n),n!==J||5!==n.tag&&6!==n.tag))n=null;}else k=null,n=d;if(k!==n){t=Bd;F="onMouseLeave";x="onMouseEnter";w="mouse";if("pointerout"===a||"pointerover"===a)t=Td,F="onPointerLeave",x="onPointerEnter",w="pointer";J=null==k?h:ue(k);u=null==n?h:ue(n);h=new t(F,w+"leave",k,c,e);h.target=J;h.relatedTarget=u;F=null;Wc(e)===d&&(t=new t(x,w+"enter",n,c,e),t.target=u,t.relatedTarget=J,F=t);J=F;if(k&&n)b:{t=k;x=n;w=0;for(u=t;u;u=vf(u))w++;u=0;for(F=x;F;F=vf(F))u++;for(;0<w-u;)t=vf(t),w--;for(;0<u-w;)x=
	vf(x),u--;for(;w--;){if(t===x||null!==x&&t===x.alternate)break b;t=vf(t);x=vf(x);}t=null;}else t=null;null!==k&&wf(g,h,k,t,!1);null!==n&&null!==J&&wf(g,J,n,t,!0);}}}a:{h=d?ue(d):window;k=h.nodeName&&h.nodeName.toLowerCase();if("select"===k||"input"===k&&"file"===h.type)var na=ve;else if(me(h))if(we)na=Fe;else {na=De;var xa=Ce;}else (k=h.nodeName)&&"input"===k.toLowerCase()&&("checkbox"===h.type||"radio"===h.type)&&(na=Ee);if(na&&(na=na(a,d))){ne(g,na,c,e);break a}xa&&xa(a,h,d);"focusout"===a&&(xa=h._wrapperState)&&
	xa.controlled&&"number"===h.type&&cb(h,"number",h.value);}xa=d?ue(d):window;switch(a){case "focusin":if(me(xa)||"true"===xa.contentEditable)Qe=xa,Re=d,Se=null;break;case "focusout":Se=Re=Qe=null;break;case "mousedown":Te=!0;break;case "contextmenu":case "mouseup":case "dragend":Te=!1;Ue(g,c,e);break;case "selectionchange":if(Pe)break;case "keydown":case "keyup":Ue(g,c,e);}var $a;if(ae)b:{switch(a){case "compositionstart":var ba="onCompositionStart";break b;case "compositionend":ba="onCompositionEnd";
	break b;case "compositionupdate":ba="onCompositionUpdate";break b}ba=void 0;}else ie?ge(a,c)&&(ba="onCompositionEnd"):"keydown"===a&&229===c.keyCode&&(ba="onCompositionStart");ba&&(de&&"ko"!==c.locale&&(ie||"onCompositionStart"!==ba?"onCompositionEnd"===ba&&ie&&($a=nd()):(kd=e,ld="value"in kd?kd.value:kd.textContent,ie=!0)),xa=oe(d,ba),0<xa.length&&(ba=new Ld(ba,a,null,c,e),g.push({event:ba,listeners:xa}),$a?ba.data=$a:($a=he(c),null!==$a&&(ba.data=$a))));if($a=ce?je(a,c):ke(a,c))d=oe(d,"onBeforeInput"),
	0<d.length&&(e=new Ld("onBeforeInput","beforeinput",null,c,e),g.push({event:e,listeners:d}),e.data=$a);}se(g,b);});}function tf(a,b,c){return {instance:a,listener:b,currentTarget:c}}function oe(a,b){for(var c=b+"Capture",d=[];null!==a;){var e=a,f=e.stateNode;5===e.tag&&null!==f&&(e=f,f=Kb(a,c),null!=f&&d.unshift(tf(a,f,e)),f=Kb(a,b),null!=f&&d.push(tf(a,f,e)));a=a.return;}return d}function vf(a){if(null===a)return null;do a=a.return;while(a&&5!==a.tag);return a?a:null}
	function wf(a,b,c,d,e){for(var f=b._reactName,g=[];null!==c&&c!==d;){var h=c,k=h.alternate,l=h.stateNode;if(null!==k&&k===d)break;5===h.tag&&null!==l&&(h=l,e?(k=Kb(c,f),null!=k&&g.unshift(tf(c,k,h))):e||(k=Kb(c,f),null!=k&&g.push(tf(c,k,h))));c=c.return;}0!==g.length&&a.push({event:b,listeners:g});}var xf=/\r\n?/g,yf=/\u0000|\uFFFD/g;function zf(a){return ("string"===typeof a?a:""+a).replace(xf,"\n").replace(yf,"")}function Af(a,b,c){b=zf(b);if(zf(a)!==b&&c)throw Error(p(425));}function Bf(){}
	var Cf=null,Df=null;function Ef(a,b){return "textarea"===a||"noscript"===a||"string"===typeof b.children||"number"===typeof b.children||"object"===typeof b.dangerouslySetInnerHTML&&null!==b.dangerouslySetInnerHTML&&null!=b.dangerouslySetInnerHTML.__html}
	var Ff="function"===typeof setTimeout?setTimeout:void 0,Gf="function"===typeof clearTimeout?clearTimeout:void 0,Hf="function"===typeof Promise?Promise:void 0,Jf="function"===typeof queueMicrotask?queueMicrotask:"undefined"!==typeof Hf?function(a){return Hf.resolve(null).then(a).catch(If)}:Ff;function If(a){setTimeout(function(){throw a;});}
	function Kf(a,b){var c=b,d=0;do{var e=c.nextSibling;a.removeChild(c);if(e&&8===e.nodeType)if(c=e.data,"/$"===c){if(0===d){a.removeChild(e);bd(b);return}d--;}else "$"!==c&&"$?"!==c&&"$!"!==c||d++;c=e;}while(c);bd(b);}function Lf(a){for(;null!=a;a=a.nextSibling){var b=a.nodeType;if(1===b||3===b)break;if(8===b){b=a.data;if("$"===b||"$!"===b||"$?"===b)break;if("/$"===b)return null}}return a}
	function Mf(a){a=a.previousSibling;for(var b=0;a;){if(8===a.nodeType){var c=a.data;if("$"===c||"$!"===c||"$?"===c){if(0===b)return a;b--;}else "/$"===c&&b++;}a=a.previousSibling;}return null}var Nf=Math.random().toString(36).slice(2),Of="__reactFiber$"+Nf,Pf="__reactProps$"+Nf,uf="__reactContainer$"+Nf,of="__reactEvents$"+Nf,Qf="__reactListeners$"+Nf,Rf="__reactHandles$"+Nf;
	function Wc(a){var b=a[Of];if(b)return b;for(var c=a.parentNode;c;){if(b=c[uf]||c[Of]){c=b.alternate;if(null!==b.child||null!==c&&null!==c.child)for(a=Mf(a);null!==a;){if(c=a[Of])return c;a=Mf(a);}return b}a=c;c=a.parentNode;}return null}function Cb(a){a=a[Of]||a[uf];return !a||5!==a.tag&&6!==a.tag&&13!==a.tag&&3!==a.tag?null:a}function ue(a){if(5===a.tag||6===a.tag)return a.stateNode;throw Error(p(33));}function Db(a){return a[Pf]||null}var Sf=[],Tf=-1;function Uf(a){return {current:a}}
	function E(a){0>Tf||(a.current=Sf[Tf],Sf[Tf]=null,Tf--);}function G(a,b){Tf++;Sf[Tf]=a.current;a.current=b;}var Vf={},H=Uf(Vf),Wf=Uf(!1),Xf=Vf;function Yf(a,b){var c=a.type.contextTypes;if(!c)return Vf;var d=a.stateNode;if(d&&d.__reactInternalMemoizedUnmaskedChildContext===b)return d.__reactInternalMemoizedMaskedChildContext;var e={},f;for(f in c)e[f]=b[f];d&&(a=a.stateNode,a.__reactInternalMemoizedUnmaskedChildContext=b,a.__reactInternalMemoizedMaskedChildContext=e);return e}
	function Zf(a){a=a.childContextTypes;return null!==a&&void 0!==a}function $f(){E(Wf);E(H);}function ag(a,b,c){if(H.current!==Vf)throw Error(p(168));G(H,b);G(Wf,c);}function bg(a,b,c){var d=a.stateNode;b=b.childContextTypes;if("function"!==typeof d.getChildContext)return c;d=d.getChildContext();for(var e in d)if(!(e in b))throw Error(p(108,Ra(a)||"Unknown",e));return A({},c,d)}
	function cg(a){a=(a=a.stateNode)&&a.__reactInternalMemoizedMergedChildContext||Vf;Xf=H.current;G(H,a);G(Wf,Wf.current);return !0}function dg(a,b,c){var d=a.stateNode;if(!d)throw Error(p(169));c?(a=bg(a,b,Xf),d.__reactInternalMemoizedMergedChildContext=a,E(Wf),E(H),G(H,a)):E(Wf);G(Wf,c);}var eg=null,fg=!1,gg=!1;function hg(a){null===eg?eg=[a]:eg.push(a);}function ig(a){fg=!0;hg(a);}
	function jg(){if(!gg&&null!==eg){gg=!0;var a=0,b=C;try{var c=eg;for(C=1;a<c.length;a++){var d=c[a];do d=d(!0);while(null!==d)}eg=null;fg=!1;}catch(e){throw null!==eg&&(eg=eg.slice(a+1)),ac(fc,jg),e;}finally{C=b,gg=!1;}}return null}var kg=[],lg=0,mg=null,ng=0,og=[],pg=0,qg=null,rg=1,sg="";function tg(a,b){kg[lg++]=ng;kg[lg++]=mg;mg=a;ng=b;}
	function ug(a,b,c){og[pg++]=rg;og[pg++]=sg;og[pg++]=qg;qg=a;var d=rg;a=sg;var e=32-oc(d)-1;d&=~(1<<e);c+=1;var f=32-oc(b)+e;if(30<f){var g=e-e%5;f=(d&(1<<g)-1).toString(32);d>>=g;e-=g;rg=1<<32-oc(b)+e|c<<e|d;sg=f+a;}else rg=1<<f|c<<e|d,sg=a;}function vg(a){null!==a.return&&(tg(a,1),ug(a,1,0));}function wg(a){for(;a===mg;)mg=kg[--lg],kg[lg]=null,ng=kg[--lg],kg[lg]=null;for(;a===qg;)qg=og[--pg],og[pg]=null,sg=og[--pg],og[pg]=null,rg=og[--pg],og[pg]=null;}var xg=null,yg=null,I=!1,zg=null;
	function Ag(a,b){var c=Bg(5,null,null,0);c.elementType="DELETED";c.stateNode=b;c.return=a;b=a.deletions;null===b?(a.deletions=[c],a.flags|=16):b.push(c);}
	function Cg(a,b){switch(a.tag){case 5:var c=a.type;b=1!==b.nodeType||c.toLowerCase()!==b.nodeName.toLowerCase()?null:b;return null!==b?(a.stateNode=b,xg=a,yg=Lf(b.firstChild),!0):!1;case 6:return b=""===a.pendingProps||3!==b.nodeType?null:b,null!==b?(a.stateNode=b,xg=a,yg=null,!0):!1;case 13:return b=8!==b.nodeType?null:b,null!==b?(c=null!==qg?{id:rg,overflow:sg}:null,a.memoizedState={dehydrated:b,treeContext:c,retryLane:1073741824},c=Bg(18,null,null,0),c.stateNode=b,c.return=a,a.child=c,xg=a,yg=
	null,!0):!1;default:return !1}}function Dg(a){return 0!==(a.mode&1)&&0===(a.flags&128)}function Eg(a){if(I){var b=yg;if(b){var c=b;if(!Cg(a,b)){if(Dg(a))throw Error(p(418));b=Lf(c.nextSibling);var d=xg;b&&Cg(a,b)?Ag(d,c):(a.flags=a.flags&-4097|2,I=!1,xg=a);}}else {if(Dg(a))throw Error(p(418));a.flags=a.flags&-4097|2;I=!1;xg=a;}}}function Fg(a){for(a=a.return;null!==a&&5!==a.tag&&3!==a.tag&&13!==a.tag;)a=a.return;xg=a;}
	function Gg(a){if(a!==xg)return !1;if(!I)return Fg(a),I=!0,!1;var b;(b=3!==a.tag)&&!(b=5!==a.tag)&&(b=a.type,b="head"!==b&&"body"!==b&&!Ef(a.type,a.memoizedProps));if(b&&(b=yg)){if(Dg(a))throw Hg(),Error(p(418));for(;b;)Ag(a,b),b=Lf(b.nextSibling);}Fg(a);if(13===a.tag){a=a.memoizedState;a=null!==a?a.dehydrated:null;if(!a)throw Error(p(317));a:{a=a.nextSibling;for(b=0;a;){if(8===a.nodeType){var c=a.data;if("/$"===c){if(0===b){yg=Lf(a.nextSibling);break a}b--;}else "$"!==c&&"$!"!==c&&"$?"!==c||b++;}a=a.nextSibling;}yg=
	null;}}else yg=xg?Lf(a.stateNode.nextSibling):null;return !0}function Hg(){for(var a=yg;a;)a=Lf(a.nextSibling);}function Ig(){yg=xg=null;I=!1;}function Jg(a){null===zg?zg=[a]:zg.push(a);}var Kg=ua.ReactCurrentBatchConfig;
	function Lg(a,b,c){a=c.ref;if(null!==a&&"function"!==typeof a&&"object"!==typeof a){if(c._owner){c=c._owner;if(c){if(1!==c.tag)throw Error(p(309));var d=c.stateNode;}if(!d)throw Error(p(147,a));var e=d,f=""+a;if(null!==b&&null!==b.ref&&"function"===typeof b.ref&&b.ref._stringRef===f)return b.ref;b=function(a){var b=e.refs;null===a?delete b[f]:b[f]=a;};b._stringRef=f;return b}if("string"!==typeof a)throw Error(p(284));if(!c._owner)throw Error(p(290,a));}return a}
	function Mg(a,b){a=Object.prototype.toString.call(b);throw Error(p(31,"[object Object]"===a?"object with keys {"+Object.keys(b).join(", ")+"}":a));}function Ng(a){var b=a._init;return b(a._payload)}
	function Og(a){function b(b,c){if(a){var d=b.deletions;null===d?(b.deletions=[c],b.flags|=16):d.push(c);}}function c(c,d){if(!a)return null;for(;null!==d;)b(c,d),d=d.sibling;return null}function d(a,b){for(a=new Map;null!==b;)null!==b.key?a.set(b.key,b):a.set(b.index,b),b=b.sibling;return a}function e(a,b){a=Pg(a,b);a.index=0;a.sibling=null;return a}function f(b,c,d){b.index=d;if(!a)return b.flags|=1048576,c;d=b.alternate;if(null!==d)return d=d.index,d<c?(b.flags|=2,c):d;b.flags|=2;return c}function g(b){a&&
	null===b.alternate&&(b.flags|=2);return b}function h(a,b,c,d){if(null===b||6!==b.tag)return b=Qg(c,a.mode,d),b.return=a,b;b=e(b,c);b.return=a;return b}function k(a,b,c,d){var f=c.type;if(f===ya)return m(a,b,c.props.children,d,c.key);if(null!==b&&(b.elementType===f||"object"===typeof f&&null!==f&&f.$$typeof===Ha&&Ng(f)===b.type))return d=e(b,c.props),d.ref=Lg(a,b,c),d.return=a,d;d=Rg(c.type,c.key,c.props,null,a.mode,d);d.ref=Lg(a,b,c);d.return=a;return d}function l(a,b,c,d){if(null===b||4!==b.tag||
	b.stateNode.containerInfo!==c.containerInfo||b.stateNode.implementation!==c.implementation)return b=Sg(c,a.mode,d),b.return=a,b;b=e(b,c.children||[]);b.return=a;return b}function m(a,b,c,d,f){if(null===b||7!==b.tag)return b=Tg(c,a.mode,d,f),b.return=a,b;b=e(b,c);b.return=a;return b}function q(a,b,c){if("string"===typeof b&&""!==b||"number"===typeof b)return b=Qg(""+b,a.mode,c),b.return=a,b;if("object"===typeof b&&null!==b){switch(b.$$typeof){case va:return c=Rg(b.type,b.key,b.props,null,a.mode,c),
	c.ref=Lg(a,null,b),c.return=a,c;case wa:return b=Sg(b,a.mode,c),b.return=a,b;case Ha:var d=b._init;return q(a,d(b._payload),c)}if(eb(b)||Ka(b))return b=Tg(b,a.mode,c,null),b.return=a,b;Mg(a,b);}return null}function r(a,b,c,d){var e=null!==b?b.key:null;if("string"===typeof c&&""!==c||"number"===typeof c)return null!==e?null:h(a,b,""+c,d);if("object"===typeof c&&null!==c){switch(c.$$typeof){case va:return c.key===e?k(a,b,c,d):null;case wa:return c.key===e?l(a,b,c,d):null;case Ha:return e=c._init,r(a,
	b,e(c._payload),d)}if(eb(c)||Ka(c))return null!==e?null:m(a,b,c,d,null);Mg(a,c);}return null}function y(a,b,c,d,e){if("string"===typeof d&&""!==d||"number"===typeof d)return a=a.get(c)||null,h(b,a,""+d,e);if("object"===typeof d&&null!==d){switch(d.$$typeof){case va:return a=a.get(null===d.key?c:d.key)||null,k(b,a,d,e);case wa:return a=a.get(null===d.key?c:d.key)||null,l(b,a,d,e);case Ha:var f=d._init;return y(a,b,c,f(d._payload),e)}if(eb(d)||Ka(d))return a=a.get(c)||null,m(b,a,d,e,null);Mg(b,d);}return null}
	function n(e,g,h,k){for(var l=null,m=null,u=g,w=g=0,x=null;null!==u&&w<h.length;w++){u.index>w?(x=u,u=null):x=u.sibling;var n=r(e,u,h[w],k);if(null===n){null===u&&(u=x);break}a&&u&&null===n.alternate&&b(e,u);g=f(n,g,w);null===m?l=n:m.sibling=n;m=n;u=x;}if(w===h.length)return c(e,u),I&&tg(e,w),l;if(null===u){for(;w<h.length;w++)u=q(e,h[w],k),null!==u&&(g=f(u,g,w),null===m?l=u:m.sibling=u,m=u);I&&tg(e,w);return l}for(u=d(e,u);w<h.length;w++)x=y(u,e,w,h[w],k),null!==x&&(a&&null!==x.alternate&&u.delete(null===
	x.key?w:x.key),g=f(x,g,w),null===m?l=x:m.sibling=x,m=x);a&&u.forEach(function(a){return b(e,a)});I&&tg(e,w);return l}function t(e,g,h,k){var l=Ka(h);if("function"!==typeof l)throw Error(p(150));h=l.call(h);if(null==h)throw Error(p(151));for(var u=l=null,m=g,w=g=0,x=null,n=h.next();null!==m&&!n.done;w++,n=h.next()){m.index>w?(x=m,m=null):x=m.sibling;var t=r(e,m,n.value,k);if(null===t){null===m&&(m=x);break}a&&m&&null===t.alternate&&b(e,m);g=f(t,g,w);null===u?l=t:u.sibling=t;u=t;m=x;}if(n.done)return c(e,
	m),I&&tg(e,w),l;if(null===m){for(;!n.done;w++,n=h.next())n=q(e,n.value,k),null!==n&&(g=f(n,g,w),null===u?l=n:u.sibling=n,u=n);I&&tg(e,w);return l}for(m=d(e,m);!n.done;w++,n=h.next())n=y(m,e,w,n.value,k),null!==n&&(a&&null!==n.alternate&&m.delete(null===n.key?w:n.key),g=f(n,g,w),null===u?l=n:u.sibling=n,u=n);a&&m.forEach(function(a){return b(e,a)});I&&tg(e,w);return l}function J(a,d,f,h){"object"===typeof f&&null!==f&&f.type===ya&&null===f.key&&(f=f.props.children);if("object"===typeof f&&null!==f){switch(f.$$typeof){case va:a:{for(var k=
	f.key,l=d;null!==l;){if(l.key===k){k=f.type;if(k===ya){if(7===l.tag){c(a,l.sibling);d=e(l,f.props.children);d.return=a;a=d;break a}}else if(l.elementType===k||"object"===typeof k&&null!==k&&k.$$typeof===Ha&&Ng(k)===l.type){c(a,l.sibling);d=e(l,f.props);d.ref=Lg(a,l,f);d.return=a;a=d;break a}c(a,l);break}else b(a,l);l=l.sibling;}f.type===ya?(d=Tg(f.props.children,a.mode,h,f.key),d.return=a,a=d):(h=Rg(f.type,f.key,f.props,null,a.mode,h),h.ref=Lg(a,d,f),h.return=a,a=h);}return g(a);case wa:a:{for(l=f.key;null!==
	d;){if(d.key===l)if(4===d.tag&&d.stateNode.containerInfo===f.containerInfo&&d.stateNode.implementation===f.implementation){c(a,d.sibling);d=e(d,f.children||[]);d.return=a;a=d;break a}else {c(a,d);break}else b(a,d);d=d.sibling;}d=Sg(f,a.mode,h);d.return=a;a=d;}return g(a);case Ha:return l=f._init,J(a,d,l(f._payload),h)}if(eb(f))return n(a,d,f,h);if(Ka(f))return t(a,d,f,h);Mg(a,f);}return "string"===typeof f&&""!==f||"number"===typeof f?(f=""+f,null!==d&&6===d.tag?(c(a,d.sibling),d=e(d,f),d.return=a,a=d):
	(c(a,d),d=Qg(f,a.mode,h),d.return=a,a=d),g(a)):c(a,d)}return J}var Ug=Og(!0),Vg=Og(!1),Wg=Uf(null),Xg=null,Yg=null,Zg=null;function $g(){Zg=Yg=Xg=null;}function ah(a){var b=Wg.current;E(Wg);a._currentValue=b;}function bh(a,b,c){for(;null!==a;){var d=a.alternate;(a.childLanes&b)!==b?(a.childLanes|=b,null!==d&&(d.childLanes|=b)):null!==d&&(d.childLanes&b)!==b&&(d.childLanes|=b);if(a===c)break;a=a.return;}}
	function ch(a,b){Xg=a;Zg=Yg=null;a=a.dependencies;null!==a&&null!==a.firstContext&&(0!==(a.lanes&b)&&(dh=!0),a.firstContext=null);}function eh(a){var b=a._currentValue;if(Zg!==a)if(a={context:a,memoizedValue:b,next:null},null===Yg){if(null===Xg)throw Error(p(308));Yg=a;Xg.dependencies={lanes:0,firstContext:a};}else Yg=Yg.next=a;return b}var fh=null;function gh(a){null===fh?fh=[a]:fh.push(a);}
	function hh(a,b,c,d){var e=b.interleaved;null===e?(c.next=c,gh(b)):(c.next=e.next,e.next=c);b.interleaved=c;return ih(a,d)}function ih(a,b){a.lanes|=b;var c=a.alternate;null!==c&&(c.lanes|=b);c=a;for(a=a.return;null!==a;)a.childLanes|=b,c=a.alternate,null!==c&&(c.childLanes|=b),c=a,a=a.return;return 3===c.tag?c.stateNode:null}var jh=!1;function kh(a){a.updateQueue={baseState:a.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null,interleaved:null,lanes:0},effects:null};}
	function lh(a,b){a=a.updateQueue;b.updateQueue===a&&(b.updateQueue={baseState:a.baseState,firstBaseUpdate:a.firstBaseUpdate,lastBaseUpdate:a.lastBaseUpdate,shared:a.shared,effects:a.effects});}function mh(a,b){return {eventTime:a,lane:b,tag:0,payload:null,callback:null,next:null}}
	function nh(a,b,c){var d=a.updateQueue;if(null===d)return null;d=d.shared;if(0!==(K&2)){var e=d.pending;null===e?b.next=b:(b.next=e.next,e.next=b);d.pending=b;return ih(a,c)}e=d.interleaved;null===e?(b.next=b,gh(d)):(b.next=e.next,e.next=b);d.interleaved=b;return ih(a,c)}function oh(a,b,c){b=b.updateQueue;if(null!==b&&(b=b.shared,0!==(c&4194240))){var d=b.lanes;d&=a.pendingLanes;c|=d;b.lanes=c;Cc(a,c);}}
	function ph(a,b){var c=a.updateQueue,d=a.alternate;if(null!==d&&(d=d.updateQueue,c===d)){var e=null,f=null;c=c.firstBaseUpdate;if(null!==c){do{var g={eventTime:c.eventTime,lane:c.lane,tag:c.tag,payload:c.payload,callback:c.callback,next:null};null===f?e=f=g:f=f.next=g;c=c.next;}while(null!==c);null===f?e=f=b:f=f.next=b;}else e=f=b;c={baseState:d.baseState,firstBaseUpdate:e,lastBaseUpdate:f,shared:d.shared,effects:d.effects};a.updateQueue=c;return}a=c.lastBaseUpdate;null===a?c.firstBaseUpdate=b:a.next=
	b;c.lastBaseUpdate=b;}
	function qh(a,b,c,d){var e=a.updateQueue;jh=!1;var f=e.firstBaseUpdate,g=e.lastBaseUpdate,h=e.shared.pending;if(null!==h){e.shared.pending=null;var k=h,l=k.next;k.next=null;null===g?f=l:g.next=l;g=k;var m=a.alternate;null!==m&&(m=m.updateQueue,h=m.lastBaseUpdate,h!==g&&(null===h?m.firstBaseUpdate=l:h.next=l,m.lastBaseUpdate=k));}if(null!==f){var q=e.baseState;g=0;m=l=k=null;h=f;do{var r=h.lane,y=h.eventTime;if((d&r)===r){null!==m&&(m=m.next={eventTime:y,lane:0,tag:h.tag,payload:h.payload,callback:h.callback,
	next:null});a:{var n=a,t=h;r=b;y=c;switch(t.tag){case 1:n=t.payload;if("function"===typeof n){q=n.call(y,q,r);break a}q=n;break a;case 3:n.flags=n.flags&-65537|128;case 0:n=t.payload;r="function"===typeof n?n.call(y,q,r):n;if(null===r||void 0===r)break a;q=A({},q,r);break a;case 2:jh=!0;}}null!==h.callback&&0!==h.lane&&(a.flags|=64,r=e.effects,null===r?e.effects=[h]:r.push(h));}else y={eventTime:y,lane:r,tag:h.tag,payload:h.payload,callback:h.callback,next:null},null===m?(l=m=y,k=q):m=m.next=y,g|=r;
	h=h.next;if(null===h)if(h=e.shared.pending,null===h)break;else r=h,h=r.next,r.next=null,e.lastBaseUpdate=r,e.shared.pending=null;}while(1);null===m&&(k=q);e.baseState=k;e.firstBaseUpdate=l;e.lastBaseUpdate=m;b=e.shared.interleaved;if(null!==b){e=b;do g|=e.lane,e=e.next;while(e!==b)}else null===f&&(e.shared.lanes=0);rh|=g;a.lanes=g;a.memoizedState=q;}}
	function sh(a,b,c){a=b.effects;b.effects=null;if(null!==a)for(b=0;b<a.length;b++){var d=a[b],e=d.callback;if(null!==e){d.callback=null;d=c;if("function"!==typeof e)throw Error(p(191,e));e.call(d);}}}var th={},uh=Uf(th),vh=Uf(th),wh=Uf(th);function xh(a){if(a===th)throw Error(p(174));return a}
	function yh(a,b){G(wh,b);G(vh,a);G(uh,th);a=b.nodeType;switch(a){case 9:case 11:b=(b=b.documentElement)?b.namespaceURI:lb(null,"");break;default:a=8===a?b.parentNode:b,b=a.namespaceURI||null,a=a.tagName,b=lb(b,a);}E(uh);G(uh,b);}function zh(){E(uh);E(vh);E(wh);}function Ah(a){xh(wh.current);var b=xh(uh.current);var c=lb(b,a.type);b!==c&&(G(vh,a),G(uh,c));}function Bh(a){vh.current===a&&(E(uh),E(vh));}var L=Uf(0);
	function Ch(a){for(var b=a;null!==b;){if(13===b.tag){var c=b.memoizedState;if(null!==c&&(c=c.dehydrated,null===c||"$?"===c.data||"$!"===c.data))return b}else if(19===b.tag&&void 0!==b.memoizedProps.revealOrder){if(0!==(b.flags&128))return b}else if(null!==b.child){b.child.return=b;b=b.child;continue}if(b===a)break;for(;null===b.sibling;){if(null===b.return||b.return===a)return null;b=b.return;}b.sibling.return=b.return;b=b.sibling;}return null}var Dh=[];
	function Eh(){for(var a=0;a<Dh.length;a++)Dh[a]._workInProgressVersionPrimary=null;Dh.length=0;}var Fh=ua.ReactCurrentDispatcher,Gh=ua.ReactCurrentBatchConfig,Hh=0,M=null,N=null,O=null,Ih=!1,Jh=!1,Kh=0,Lh=0;function P(){throw Error(p(321));}function Mh(a,b){if(null===b)return !1;for(var c=0;c<b.length&&c<a.length;c++)if(!He(a[c],b[c]))return !1;return !0}
	function Nh(a,b,c,d,e,f){Hh=f;M=b;b.memoizedState=null;b.updateQueue=null;b.lanes=0;Fh.current=null===a||null===a.memoizedState?Oh:Ph;a=c(d,e);if(Jh){f=0;do{Jh=!1;Kh=0;if(25<=f)throw Error(p(301));f+=1;O=N=null;b.updateQueue=null;Fh.current=Qh;a=c(d,e);}while(Jh)}Fh.current=Rh;b=null!==N&&null!==N.next;Hh=0;O=N=M=null;Ih=!1;if(b)throw Error(p(300));return a}function Sh(){var a=0!==Kh;Kh=0;return a}
	function Th(){var a={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};null===O?M.memoizedState=O=a:O=O.next=a;return O}function Uh(){if(null===N){var a=M.alternate;a=null!==a?a.memoizedState:null;}else a=N.next;var b=null===O?M.memoizedState:O.next;if(null!==b)O=b,N=a;else {if(null===a)throw Error(p(310));N=a;a={memoizedState:N.memoizedState,baseState:N.baseState,baseQueue:N.baseQueue,queue:N.queue,next:null};null===O?M.memoizedState=O=a:O=O.next=a;}return O}
	function Vh(a,b){return "function"===typeof b?b(a):b}
	function Wh(a){var b=Uh(),c=b.queue;if(null===c)throw Error(p(311));c.lastRenderedReducer=a;var d=N,e=d.baseQueue,f=c.pending;if(null!==f){if(null!==e){var g=e.next;e.next=f.next;f.next=g;}d.baseQueue=e=f;c.pending=null;}if(null!==e){f=e.next;d=d.baseState;var h=g=null,k=null,l=f;do{var m=l.lane;if((Hh&m)===m)null!==k&&(k=k.next={lane:0,action:l.action,hasEagerState:l.hasEagerState,eagerState:l.eagerState,next:null}),d=l.hasEagerState?l.eagerState:a(d,l.action);else {var q={lane:m,action:l.action,hasEagerState:l.hasEagerState,
	eagerState:l.eagerState,next:null};null===k?(h=k=q,g=d):k=k.next=q;M.lanes|=m;rh|=m;}l=l.next;}while(null!==l&&l!==f);null===k?g=d:k.next=h;He(d,b.memoizedState)||(dh=!0);b.memoizedState=d;b.baseState=g;b.baseQueue=k;c.lastRenderedState=d;}a=c.interleaved;if(null!==a){e=a;do f=e.lane,M.lanes|=f,rh|=f,e=e.next;while(e!==a)}else null===e&&(c.lanes=0);return [b.memoizedState,c.dispatch]}
	function Xh(a){var b=Uh(),c=b.queue;if(null===c)throw Error(p(311));c.lastRenderedReducer=a;var d=c.dispatch,e=c.pending,f=b.memoizedState;if(null!==e){c.pending=null;var g=e=e.next;do f=a(f,g.action),g=g.next;while(g!==e);He(f,b.memoizedState)||(dh=!0);b.memoizedState=f;null===b.baseQueue&&(b.baseState=f);c.lastRenderedState=f;}return [f,d]}function Yh(){}
	function Zh(a,b){var c=M,d=Uh(),e=b(),f=!He(d.memoizedState,e);f&&(d.memoizedState=e,dh=!0);d=d.queue;$h(ai.bind(null,c,d,a),[a]);if(d.getSnapshot!==b||f||null!==O&&O.memoizedState.tag&1){c.flags|=2048;bi(9,ci.bind(null,c,d,e,b),void 0,null);if(null===Q)throw Error(p(349));0!==(Hh&30)||di(c,b,e);}return e}function di(a,b,c){a.flags|=16384;a={getSnapshot:b,value:c};b=M.updateQueue;null===b?(b={lastEffect:null,stores:null},M.updateQueue=b,b.stores=[a]):(c=b.stores,null===c?b.stores=[a]:c.push(a));}
	function ci(a,b,c,d){b.value=c;b.getSnapshot=d;ei(b)&&fi(a);}function ai(a,b,c){return c(function(){ei(b)&&fi(a);})}function ei(a){var b=a.getSnapshot;a=a.value;try{var c=b();return !He(a,c)}catch(d){return !0}}function fi(a){var b=ih(a,1);null!==b&&gi(b,a,1,-1);}
	function hi(a){var b=Th();"function"===typeof a&&(a=a());b.memoizedState=b.baseState=a;a={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:Vh,lastRenderedState:a};b.queue=a;a=a.dispatch=ii.bind(null,M,a);return [b.memoizedState,a]}
	function bi(a,b,c,d){a={tag:a,create:b,destroy:c,deps:d,next:null};b=M.updateQueue;null===b?(b={lastEffect:null,stores:null},M.updateQueue=b,b.lastEffect=a.next=a):(c=b.lastEffect,null===c?b.lastEffect=a.next=a:(d=c.next,c.next=a,a.next=d,b.lastEffect=a));return a}function ji(){return Uh().memoizedState}function ki(a,b,c,d){var e=Th();M.flags|=a;e.memoizedState=bi(1|b,c,void 0,void 0===d?null:d);}
	function li(a,b,c,d){var e=Uh();d=void 0===d?null:d;var f=void 0;if(null!==N){var g=N.memoizedState;f=g.destroy;if(null!==d&&Mh(d,g.deps)){e.memoizedState=bi(b,c,f,d);return}}M.flags|=a;e.memoizedState=bi(1|b,c,f,d);}function mi(a,b){return ki(8390656,8,a,b)}function $h(a,b){return li(2048,8,a,b)}function ni(a,b){return li(4,2,a,b)}function oi(a,b){return li(4,4,a,b)}
	function pi(a,b){if("function"===typeof b)return a=a(),b(a),function(){b(null);};if(null!==b&&void 0!==b)return a=a(),b.current=a,function(){b.current=null;}}function qi(a,b,c){c=null!==c&&void 0!==c?c.concat([a]):null;return li(4,4,pi.bind(null,b,a),c)}function ri(){}function si(a,b){var c=Uh();b=void 0===b?null:b;var d=c.memoizedState;if(null!==d&&null!==b&&Mh(b,d[1]))return d[0];c.memoizedState=[a,b];return a}
	function ti(a,b){var c=Uh();b=void 0===b?null:b;var d=c.memoizedState;if(null!==d&&null!==b&&Mh(b,d[1]))return d[0];a=a();c.memoizedState=[a,b];return a}function ui(a,b,c){if(0===(Hh&21))return a.baseState&&(a.baseState=!1,dh=!0),a.memoizedState=c;He(c,b)||(c=yc(),M.lanes|=c,rh|=c,a.baseState=!0);return b}function vi(a,b){var c=C;C=0!==c&&4>c?c:4;a(!0);var d=Gh.transition;Gh.transition={};try{a(!1),b();}finally{C=c,Gh.transition=d;}}function wi(){return Uh().memoizedState}
	function xi(a,b,c){var d=yi(a);c={lane:d,action:c,hasEagerState:!1,eagerState:null,next:null};if(zi(a))Ai(b,c);else if(c=hh(a,b,c,d),null!==c){var e=R();gi(c,a,d,e);Bi(c,b,d);}}
	function ii(a,b,c){var d=yi(a),e={lane:d,action:c,hasEagerState:!1,eagerState:null,next:null};if(zi(a))Ai(b,e);else {var f=a.alternate;if(0===a.lanes&&(null===f||0===f.lanes)&&(f=b.lastRenderedReducer,null!==f))try{var g=b.lastRenderedState,h=f(g,c);e.hasEagerState=!0;e.eagerState=h;if(He(h,g)){var k=b.interleaved;null===k?(e.next=e,gh(b)):(e.next=k.next,k.next=e);b.interleaved=e;return}}catch(l){}finally{}c=hh(a,b,e,d);null!==c&&(e=R(),gi(c,a,d,e),Bi(c,b,d));}}
	function zi(a){var b=a.alternate;return a===M||null!==b&&b===M}function Ai(a,b){Jh=Ih=!0;var c=a.pending;null===c?b.next=b:(b.next=c.next,c.next=b);a.pending=b;}function Bi(a,b,c){if(0!==(c&4194240)){var d=b.lanes;d&=a.pendingLanes;c|=d;b.lanes=c;Cc(a,c);}}
	var Rh={readContext:eh,useCallback:P,useContext:P,useEffect:P,useImperativeHandle:P,useInsertionEffect:P,useLayoutEffect:P,useMemo:P,useReducer:P,useRef:P,useState:P,useDebugValue:P,useDeferredValue:P,useTransition:P,useMutableSource:P,useSyncExternalStore:P,useId:P,unstable_isNewReconciler:!1},Oh={readContext:eh,useCallback:function(a,b){Th().memoizedState=[a,void 0===b?null:b];return a},useContext:eh,useEffect:mi,useImperativeHandle:function(a,b,c){c=null!==c&&void 0!==c?c.concat([a]):null;return ki(4194308,
	4,pi.bind(null,b,a),c)},useLayoutEffect:function(a,b){return ki(4194308,4,a,b)},useInsertionEffect:function(a,b){return ki(4,2,a,b)},useMemo:function(a,b){var c=Th();b=void 0===b?null:b;a=a();c.memoizedState=[a,b];return a},useReducer:function(a,b,c){var d=Th();b=void 0!==c?c(b):b;d.memoizedState=d.baseState=b;a={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:a,lastRenderedState:b};d.queue=a;a=a.dispatch=xi.bind(null,M,a);return [d.memoizedState,a]},useRef:function(a){var b=
	Th();a={current:a};return b.memoizedState=a},useState:hi,useDebugValue:ri,useDeferredValue:function(a){return Th().memoizedState=a},useTransition:function(){var a=hi(!1),b=a[0];a=vi.bind(null,a[1]);Th().memoizedState=a;return [b,a]},useMutableSource:function(){},useSyncExternalStore:function(a,b,c){var d=M,e=Th();if(I){if(void 0===c)throw Error(p(407));c=c();}else {c=b();if(null===Q)throw Error(p(349));0!==(Hh&30)||di(d,b,c);}e.memoizedState=c;var f={value:c,getSnapshot:b};e.queue=f;mi(ai.bind(null,d,
	f,a),[a]);d.flags|=2048;bi(9,ci.bind(null,d,f,c,b),void 0,null);return c},useId:function(){var a=Th(),b=Q.identifierPrefix;if(I){var c=sg;var d=rg;c=(d&~(1<<32-oc(d)-1)).toString(32)+c;b=":"+b+"R"+c;c=Kh++;0<c&&(b+="H"+c.toString(32));b+=":";}else c=Lh++,b=":"+b+"r"+c.toString(32)+":";return a.memoizedState=b},unstable_isNewReconciler:!1},Ph={readContext:eh,useCallback:si,useContext:eh,useEffect:$h,useImperativeHandle:qi,useInsertionEffect:ni,useLayoutEffect:oi,useMemo:ti,useReducer:Wh,useRef:ji,useState:function(){return Wh(Vh)},
	useDebugValue:ri,useDeferredValue:function(a){var b=Uh();return ui(b,N.memoizedState,a)},useTransition:function(){var a=Wh(Vh)[0],b=Uh().memoizedState;return [a,b]},useMutableSource:Yh,useSyncExternalStore:Zh,useId:wi,unstable_isNewReconciler:!1},Qh={readContext:eh,useCallback:si,useContext:eh,useEffect:$h,useImperativeHandle:qi,useInsertionEffect:ni,useLayoutEffect:oi,useMemo:ti,useReducer:Xh,useRef:ji,useState:function(){return Xh(Vh)},useDebugValue:ri,useDeferredValue:function(a){var b=Uh();return null===
	N?b.memoizedState=a:ui(b,N.memoizedState,a)},useTransition:function(){var a=Xh(Vh)[0],b=Uh().memoizedState;return [a,b]},useMutableSource:Yh,useSyncExternalStore:Zh,useId:wi,unstable_isNewReconciler:!1};function Ci(a,b){if(a&&a.defaultProps){b=A({},b);a=a.defaultProps;for(var c in a)void 0===b[c]&&(b[c]=a[c]);return b}return b}function Di(a,b,c,d){b=a.memoizedState;c=c(d,b);c=null===c||void 0===c?b:A({},b,c);a.memoizedState=c;0===a.lanes&&(a.updateQueue.baseState=c);}
	var Ei={isMounted:function(a){return (a=a._reactInternals)?Vb(a)===a:!1},enqueueSetState:function(a,b,c){a=a._reactInternals;var d=R(),e=yi(a),f=mh(d,e);f.payload=b;void 0!==c&&null!==c&&(f.callback=c);b=nh(a,f,e);null!==b&&(gi(b,a,e,d),oh(b,a,e));},enqueueReplaceState:function(a,b,c){a=a._reactInternals;var d=R(),e=yi(a),f=mh(d,e);f.tag=1;f.payload=b;void 0!==c&&null!==c&&(f.callback=c);b=nh(a,f,e);null!==b&&(gi(b,a,e,d),oh(b,a,e));},enqueueForceUpdate:function(a,b){a=a._reactInternals;var c=R(),d=
	yi(a),e=mh(c,d);e.tag=2;void 0!==b&&null!==b&&(e.callback=b);b=nh(a,e,d);null!==b&&(gi(b,a,d,c),oh(b,a,d));}};function Fi(a,b,c,d,e,f,g){a=a.stateNode;return "function"===typeof a.shouldComponentUpdate?a.shouldComponentUpdate(d,f,g):b.prototype&&b.prototype.isPureReactComponent?!Ie(c,d)||!Ie(e,f):!0}
	function Gi(a,b,c){var d=!1,e=Vf;var f=b.contextType;"object"===typeof f&&null!==f?f=eh(f):(e=Zf(b)?Xf:H.current,d=b.contextTypes,f=(d=null!==d&&void 0!==d)?Yf(a,e):Vf);b=new b(c,f);a.memoizedState=null!==b.state&&void 0!==b.state?b.state:null;b.updater=Ei;a.stateNode=b;b._reactInternals=a;d&&(a=a.stateNode,a.__reactInternalMemoizedUnmaskedChildContext=e,a.__reactInternalMemoizedMaskedChildContext=f);return b}
	function Hi(a,b,c,d){a=b.state;"function"===typeof b.componentWillReceiveProps&&b.componentWillReceiveProps(c,d);"function"===typeof b.UNSAFE_componentWillReceiveProps&&b.UNSAFE_componentWillReceiveProps(c,d);b.state!==a&&Ei.enqueueReplaceState(b,b.state,null);}
	function Ii(a,b,c,d){var e=a.stateNode;e.props=c;e.state=a.memoizedState;e.refs={};kh(a);var f=b.contextType;"object"===typeof f&&null!==f?e.context=eh(f):(f=Zf(b)?Xf:H.current,e.context=Yf(a,f));e.state=a.memoizedState;f=b.getDerivedStateFromProps;"function"===typeof f&&(Di(a,b,f,c),e.state=a.memoizedState);"function"===typeof b.getDerivedStateFromProps||"function"===typeof e.getSnapshotBeforeUpdate||"function"!==typeof e.UNSAFE_componentWillMount&&"function"!==typeof e.componentWillMount||(b=e.state,
	"function"===typeof e.componentWillMount&&e.componentWillMount(),"function"===typeof e.UNSAFE_componentWillMount&&e.UNSAFE_componentWillMount(),b!==e.state&&Ei.enqueueReplaceState(e,e.state,null),qh(a,c,e,d),e.state=a.memoizedState);"function"===typeof e.componentDidMount&&(a.flags|=4194308);}function Ji(a,b){try{var c="",d=b;do c+=Pa(d),d=d.return;while(d);var e=c;}catch(f){e="\nError generating stack: "+f.message+"\n"+f.stack;}return {value:a,source:b,stack:e,digest:null}}
	function Ki(a,b,c){return {value:a,source:null,stack:null!=c?c:null,digest:null!=b?b:null}}function Li(a,b){try{console.error(b.value);}catch(c){setTimeout(function(){throw c;});}}var Mi="function"===typeof WeakMap?WeakMap:Map;function Ni(a,b,c){c=mh(-1,c);c.tag=3;c.payload={element:null};var d=b.value;c.callback=function(){Oi||(Oi=!0,Pi=d);Li(a,b);};return c}
	function Qi(a,b,c){c=mh(-1,c);c.tag=3;var d=a.type.getDerivedStateFromError;if("function"===typeof d){var e=b.value;c.payload=function(){return d(e)};c.callback=function(){Li(a,b);};}var f=a.stateNode;null!==f&&"function"===typeof f.componentDidCatch&&(c.callback=function(){Li(a,b);"function"!==typeof d&&(null===Ri?Ri=new Set([this]):Ri.add(this));var c=b.stack;this.componentDidCatch(b.value,{componentStack:null!==c?c:""});});return c}
	function Si(a,b,c){var d=a.pingCache;if(null===d){d=a.pingCache=new Mi;var e=new Set;d.set(b,e);}else e=d.get(b),void 0===e&&(e=new Set,d.set(b,e));e.has(c)||(e.add(c),a=Ti.bind(null,a,b,c),b.then(a,a));}function Ui(a){do{var b;if(b=13===a.tag)b=a.memoizedState,b=null!==b?null!==b.dehydrated?!0:!1:!0;if(b)return a;a=a.return;}while(null!==a);return null}
	function Vi(a,b,c,d,e){if(0===(a.mode&1))return a===b?a.flags|=65536:(a.flags|=128,c.flags|=131072,c.flags&=-52805,1===c.tag&&(null===c.alternate?c.tag=17:(b=mh(-1,1),b.tag=2,nh(c,b,1))),c.lanes|=1),a;a.flags|=65536;a.lanes=e;return a}var Wi=ua.ReactCurrentOwner,dh=!1;function Xi(a,b,c,d){b.child=null===a?Vg(b,null,c,d):Ug(b,a.child,c,d);}
	function Yi(a,b,c,d,e){c=c.render;var f=b.ref;ch(b,e);d=Nh(a,b,c,d,f,e);c=Sh();if(null!==a&&!dh)return b.updateQueue=a.updateQueue,b.flags&=-2053,a.lanes&=~e,Zi(a,b,e);I&&c&&vg(b);b.flags|=1;Xi(a,b,d,e);return b.child}
	function $i(a,b,c,d,e){if(null===a){var f=c.type;if("function"===typeof f&&!aj(f)&&void 0===f.defaultProps&&null===c.compare&&void 0===c.defaultProps)return b.tag=15,b.type=f,bj(a,b,f,d,e);a=Rg(c.type,null,d,b,b.mode,e);a.ref=b.ref;a.return=b;return b.child=a}f=a.child;if(0===(a.lanes&e)){var g=f.memoizedProps;c=c.compare;c=null!==c?c:Ie;if(c(g,d)&&a.ref===b.ref)return Zi(a,b,e)}b.flags|=1;a=Pg(f,d);a.ref=b.ref;a.return=b;return b.child=a}
	function bj(a,b,c,d,e){if(null!==a){var f=a.memoizedProps;if(Ie(f,d)&&a.ref===b.ref)if(dh=!1,b.pendingProps=d=f,0!==(a.lanes&e))0!==(a.flags&131072)&&(dh=!0);else return b.lanes=a.lanes,Zi(a,b,e)}return cj(a,b,c,d,e)}
	function dj(a,b,c){var d=b.pendingProps,e=d.children,f=null!==a?a.memoizedState:null;if("hidden"===d.mode)if(0===(b.mode&1))b.memoizedState={baseLanes:0,cachePool:null,transitions:null},G(ej,fj),fj|=c;else {if(0===(c&1073741824))return a=null!==f?f.baseLanes|c:c,b.lanes=b.childLanes=1073741824,b.memoizedState={baseLanes:a,cachePool:null,transitions:null},b.updateQueue=null,G(ej,fj),fj|=a,null;b.memoizedState={baseLanes:0,cachePool:null,transitions:null};d=null!==f?f.baseLanes:c;G(ej,fj);fj|=d;}else null!==
	f?(d=f.baseLanes|c,b.memoizedState=null):d=c,G(ej,fj),fj|=d;Xi(a,b,e,c);return b.child}function gj(a,b){var c=b.ref;if(null===a&&null!==c||null!==a&&a.ref!==c)b.flags|=512,b.flags|=2097152;}function cj(a,b,c,d,e){var f=Zf(c)?Xf:H.current;f=Yf(b,f);ch(b,e);c=Nh(a,b,c,d,f,e);d=Sh();if(null!==a&&!dh)return b.updateQueue=a.updateQueue,b.flags&=-2053,a.lanes&=~e,Zi(a,b,e);I&&d&&vg(b);b.flags|=1;Xi(a,b,c,e);return b.child}
	function hj(a,b,c,d,e){if(Zf(c)){var f=!0;cg(b);}else f=!1;ch(b,e);if(null===b.stateNode)ij(a,b),Gi(b,c,d),Ii(b,c,d,e),d=!0;else if(null===a){var g=b.stateNode,h=b.memoizedProps;g.props=h;var k=g.context,l=c.contextType;"object"===typeof l&&null!==l?l=eh(l):(l=Zf(c)?Xf:H.current,l=Yf(b,l));var m=c.getDerivedStateFromProps,q="function"===typeof m||"function"===typeof g.getSnapshotBeforeUpdate;q||"function"!==typeof g.UNSAFE_componentWillReceiveProps&&"function"!==typeof g.componentWillReceiveProps||
	(h!==d||k!==l)&&Hi(b,g,d,l);jh=!1;var r=b.memoizedState;g.state=r;qh(b,d,g,e);k=b.memoizedState;h!==d||r!==k||Wf.current||jh?("function"===typeof m&&(Di(b,c,m,d),k=b.memoizedState),(h=jh||Fi(b,c,h,d,r,k,l))?(q||"function"!==typeof g.UNSAFE_componentWillMount&&"function"!==typeof g.componentWillMount||("function"===typeof g.componentWillMount&&g.componentWillMount(),"function"===typeof g.UNSAFE_componentWillMount&&g.UNSAFE_componentWillMount()),"function"===typeof g.componentDidMount&&(b.flags|=4194308)):
	("function"===typeof g.componentDidMount&&(b.flags|=4194308),b.memoizedProps=d,b.memoizedState=k),g.props=d,g.state=k,g.context=l,d=h):("function"===typeof g.componentDidMount&&(b.flags|=4194308),d=!1);}else {g=b.stateNode;lh(a,b);h=b.memoizedProps;l=b.type===b.elementType?h:Ci(b.type,h);g.props=l;q=b.pendingProps;r=g.context;k=c.contextType;"object"===typeof k&&null!==k?k=eh(k):(k=Zf(c)?Xf:H.current,k=Yf(b,k));var y=c.getDerivedStateFromProps;(m="function"===typeof y||"function"===typeof g.getSnapshotBeforeUpdate)||
	"function"!==typeof g.UNSAFE_componentWillReceiveProps&&"function"!==typeof g.componentWillReceiveProps||(h!==q||r!==k)&&Hi(b,g,d,k);jh=!1;r=b.memoizedState;g.state=r;qh(b,d,g,e);var n=b.memoizedState;h!==q||r!==n||Wf.current||jh?("function"===typeof y&&(Di(b,c,y,d),n=b.memoizedState),(l=jh||Fi(b,c,l,d,r,n,k)||!1)?(m||"function"!==typeof g.UNSAFE_componentWillUpdate&&"function"!==typeof g.componentWillUpdate||("function"===typeof g.componentWillUpdate&&g.componentWillUpdate(d,n,k),"function"===typeof g.UNSAFE_componentWillUpdate&&
	g.UNSAFE_componentWillUpdate(d,n,k)),"function"===typeof g.componentDidUpdate&&(b.flags|=4),"function"===typeof g.getSnapshotBeforeUpdate&&(b.flags|=1024)):("function"!==typeof g.componentDidUpdate||h===a.memoizedProps&&r===a.memoizedState||(b.flags|=4),"function"!==typeof g.getSnapshotBeforeUpdate||h===a.memoizedProps&&r===a.memoizedState||(b.flags|=1024),b.memoizedProps=d,b.memoizedState=n),g.props=d,g.state=n,g.context=k,d=l):("function"!==typeof g.componentDidUpdate||h===a.memoizedProps&&r===
	a.memoizedState||(b.flags|=4),"function"!==typeof g.getSnapshotBeforeUpdate||h===a.memoizedProps&&r===a.memoizedState||(b.flags|=1024),d=!1);}return jj(a,b,c,d,f,e)}
	function jj(a,b,c,d,e,f){gj(a,b);var g=0!==(b.flags&128);if(!d&&!g)return e&&dg(b,c,!1),Zi(a,b,f);d=b.stateNode;Wi.current=b;var h=g&&"function"!==typeof c.getDerivedStateFromError?null:d.render();b.flags|=1;null!==a&&g?(b.child=Ug(b,a.child,null,f),b.child=Ug(b,null,h,f)):Xi(a,b,h,f);b.memoizedState=d.state;e&&dg(b,c,!0);return b.child}function kj(a){var b=a.stateNode;b.pendingContext?ag(a,b.pendingContext,b.pendingContext!==b.context):b.context&&ag(a,b.context,!1);yh(a,b.containerInfo);}
	function lj(a,b,c,d,e){Ig();Jg(e);b.flags|=256;Xi(a,b,c,d);return b.child}var mj={dehydrated:null,treeContext:null,retryLane:0};function nj(a){return {baseLanes:a,cachePool:null,transitions:null}}
	function oj(a,b,c){var d=b.pendingProps,e=L.current,f=!1,g=0!==(b.flags&128),h;(h=g)||(h=null!==a&&null===a.memoizedState?!1:0!==(e&2));if(h)f=!0,b.flags&=-129;else if(null===a||null!==a.memoizedState)e|=1;G(L,e&1);if(null===a){Eg(b);a=b.memoizedState;if(null!==a&&(a=a.dehydrated,null!==a))return 0===(b.mode&1)?b.lanes=1:"$!"===a.data?b.lanes=8:b.lanes=1073741824,null;g=d.children;a=d.fallback;return f?(d=b.mode,f=b.child,g={mode:"hidden",children:g},0===(d&1)&&null!==f?(f.childLanes=0,f.pendingProps=
	g):f=pj(g,d,0,null),a=Tg(a,d,c,null),f.return=b,a.return=b,f.sibling=a,b.child=f,b.child.memoizedState=nj(c),b.memoizedState=mj,a):qj(b,g)}e=a.memoizedState;if(null!==e&&(h=e.dehydrated,null!==h))return rj(a,b,g,d,h,e,c);if(f){f=d.fallback;g=b.mode;e=a.child;h=e.sibling;var k={mode:"hidden",children:d.children};0===(g&1)&&b.child!==e?(d=b.child,d.childLanes=0,d.pendingProps=k,b.deletions=null):(d=Pg(e,k),d.subtreeFlags=e.subtreeFlags&14680064);null!==h?f=Pg(h,f):(f=Tg(f,g,c,null),f.flags|=2);f.return=
	b;d.return=b;d.sibling=f;b.child=d;d=f;f=b.child;g=a.child.memoizedState;g=null===g?nj(c):{baseLanes:g.baseLanes|c,cachePool:null,transitions:g.transitions};f.memoizedState=g;f.childLanes=a.childLanes&~c;b.memoizedState=mj;return d}f=a.child;a=f.sibling;d=Pg(f,{mode:"visible",children:d.children});0===(b.mode&1)&&(d.lanes=c);d.return=b;d.sibling=null;null!==a&&(c=b.deletions,null===c?(b.deletions=[a],b.flags|=16):c.push(a));b.child=d;b.memoizedState=null;return d}
	function qj(a,b){b=pj({mode:"visible",children:b},a.mode,0,null);b.return=a;return a.child=b}function sj(a,b,c,d){null!==d&&Jg(d);Ug(b,a.child,null,c);a=qj(b,b.pendingProps.children);a.flags|=2;b.memoizedState=null;return a}
	function rj(a,b,c,d,e,f,g){if(c){if(b.flags&256)return b.flags&=-257,d=Ki(Error(p(422))),sj(a,b,g,d);if(null!==b.memoizedState)return b.child=a.child,b.flags|=128,null;f=d.fallback;e=b.mode;d=pj({mode:"visible",children:d.children},e,0,null);f=Tg(f,e,g,null);f.flags|=2;d.return=b;f.return=b;d.sibling=f;b.child=d;0!==(b.mode&1)&&Ug(b,a.child,null,g);b.child.memoizedState=nj(g);b.memoizedState=mj;return f}if(0===(b.mode&1))return sj(a,b,g,null);if("$!"===e.data){d=e.nextSibling&&e.nextSibling.dataset;
	if(d)var h=d.dgst;d=h;f=Error(p(419));d=Ki(f,d,void 0);return sj(a,b,g,d)}h=0!==(g&a.childLanes);if(dh||h){d=Q;if(null!==d){switch(g&-g){case 4:e=2;break;case 16:e=8;break;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:e=32;break;case 536870912:e=268435456;break;default:e=0;}e=0!==(e&(d.suspendedLanes|g))?0:e;
	0!==e&&e!==f.retryLane&&(f.retryLane=e,ih(a,e),gi(d,a,e,-1));}tj();d=Ki(Error(p(421)));return sj(a,b,g,d)}if("$?"===e.data)return b.flags|=128,b.child=a.child,b=uj.bind(null,a),e._reactRetry=b,null;a=f.treeContext;yg=Lf(e.nextSibling);xg=b;I=!0;zg=null;null!==a&&(og[pg++]=rg,og[pg++]=sg,og[pg++]=qg,rg=a.id,sg=a.overflow,qg=b);b=qj(b,d.children);b.flags|=4096;return b}function vj(a,b,c){a.lanes|=b;var d=a.alternate;null!==d&&(d.lanes|=b);bh(a.return,b,c);}
	function wj(a,b,c,d,e){var f=a.memoizedState;null===f?a.memoizedState={isBackwards:b,rendering:null,renderingStartTime:0,last:d,tail:c,tailMode:e}:(f.isBackwards=b,f.rendering=null,f.renderingStartTime=0,f.last=d,f.tail=c,f.tailMode=e);}
	function xj(a,b,c){var d=b.pendingProps,e=d.revealOrder,f=d.tail;Xi(a,b,d.children,c);d=L.current;if(0!==(d&2))d=d&1|2,b.flags|=128;else {if(null!==a&&0!==(a.flags&128))a:for(a=b.child;null!==a;){if(13===a.tag)null!==a.memoizedState&&vj(a,c,b);else if(19===a.tag)vj(a,c,b);else if(null!==a.child){a.child.return=a;a=a.child;continue}if(a===b)break a;for(;null===a.sibling;){if(null===a.return||a.return===b)break a;a=a.return;}a.sibling.return=a.return;a=a.sibling;}d&=1;}G(L,d);if(0===(b.mode&1))b.memoizedState=
	null;else switch(e){case "forwards":c=b.child;for(e=null;null!==c;)a=c.alternate,null!==a&&null===Ch(a)&&(e=c),c=c.sibling;c=e;null===c?(e=b.child,b.child=null):(e=c.sibling,c.sibling=null);wj(b,!1,e,c,f);break;case "backwards":c=null;e=b.child;for(b.child=null;null!==e;){a=e.alternate;if(null!==a&&null===Ch(a)){b.child=e;break}a=e.sibling;e.sibling=c;c=e;e=a;}wj(b,!0,c,null,f);break;case "together":wj(b,!1,null,null,void 0);break;default:b.memoizedState=null;}return b.child}
	function ij(a,b){0===(b.mode&1)&&null!==a&&(a.alternate=null,b.alternate=null,b.flags|=2);}function Zi(a,b,c){null!==a&&(b.dependencies=a.dependencies);rh|=b.lanes;if(0===(c&b.childLanes))return null;if(null!==a&&b.child!==a.child)throw Error(p(153));if(null!==b.child){a=b.child;c=Pg(a,a.pendingProps);b.child=c;for(c.return=b;null!==a.sibling;)a=a.sibling,c=c.sibling=Pg(a,a.pendingProps),c.return=b;c.sibling=null;}return b.child}
	function yj(a,b,c){switch(b.tag){case 3:kj(b);Ig();break;case 5:Ah(b);break;case 1:Zf(b.type)&&cg(b);break;case 4:yh(b,b.stateNode.containerInfo);break;case 10:var d=b.type._context,e=b.memoizedProps.value;G(Wg,d._currentValue);d._currentValue=e;break;case 13:d=b.memoizedState;if(null!==d){if(null!==d.dehydrated)return G(L,L.current&1),b.flags|=128,null;if(0!==(c&b.child.childLanes))return oj(a,b,c);G(L,L.current&1);a=Zi(a,b,c);return null!==a?a.sibling:null}G(L,L.current&1);break;case 19:d=0!==(c&
	b.childLanes);if(0!==(a.flags&128)){if(d)return xj(a,b,c);b.flags|=128;}e=b.memoizedState;null!==e&&(e.rendering=null,e.tail=null,e.lastEffect=null);G(L,L.current);if(d)break;else return null;case 22:case 23:return b.lanes=0,dj(a,b,c)}return Zi(a,b,c)}var zj,Aj,Bj,Cj;
	zj=function(a,b){for(var c=b.child;null!==c;){if(5===c.tag||6===c.tag)a.appendChild(c.stateNode);else if(4!==c.tag&&null!==c.child){c.child.return=c;c=c.child;continue}if(c===b)break;for(;null===c.sibling;){if(null===c.return||c.return===b)return;c=c.return;}c.sibling.return=c.return;c=c.sibling;}};Aj=function(){};
	Bj=function(a,b,c,d){var e=a.memoizedProps;if(e!==d){a=b.stateNode;xh(uh.current);var f=null;switch(c){case "input":e=Ya(a,e);d=Ya(a,d);f=[];break;case "select":e=A({},e,{value:void 0});d=A({},d,{value:void 0});f=[];break;case "textarea":e=gb(a,e);d=gb(a,d);f=[];break;default:"function"!==typeof e.onClick&&"function"===typeof d.onClick&&(a.onclick=Bf);}ub(c,d);var g;c=null;for(l in e)if(!d.hasOwnProperty(l)&&e.hasOwnProperty(l)&&null!=e[l])if("style"===l){var h=e[l];for(g in h)h.hasOwnProperty(g)&&
	(c||(c={}),c[g]="");}else "dangerouslySetInnerHTML"!==l&&"children"!==l&&"suppressContentEditableWarning"!==l&&"suppressHydrationWarning"!==l&&"autoFocus"!==l&&(ea.hasOwnProperty(l)?f||(f=[]):(f=f||[]).push(l,null));for(l in d){var k=d[l];h=null!=e?e[l]:void 0;if(d.hasOwnProperty(l)&&k!==h&&(null!=k||null!=h))if("style"===l)if(h){for(g in h)!h.hasOwnProperty(g)||k&&k.hasOwnProperty(g)||(c||(c={}),c[g]="");for(g in k)k.hasOwnProperty(g)&&h[g]!==k[g]&&(c||(c={}),c[g]=k[g]);}else c||(f||(f=[]),f.push(l,
	c)),c=k;else "dangerouslySetInnerHTML"===l?(k=k?k.__html:void 0,h=h?h.__html:void 0,null!=k&&h!==k&&(f=f||[]).push(l,k)):"children"===l?"string"!==typeof k&&"number"!==typeof k||(f=f||[]).push(l,""+k):"suppressContentEditableWarning"!==l&&"suppressHydrationWarning"!==l&&(ea.hasOwnProperty(l)?(null!=k&&"onScroll"===l&&D("scroll",a),f||h===k||(f=[])):(f=f||[]).push(l,k));}c&&(f=f||[]).push("style",c);var l=f;if(b.updateQueue=l)b.flags|=4;}};Cj=function(a,b,c,d){c!==d&&(b.flags|=4);};
	function Dj(a,b){if(!I)switch(a.tailMode){case "hidden":b=a.tail;for(var c=null;null!==b;)null!==b.alternate&&(c=b),b=b.sibling;null===c?a.tail=null:c.sibling=null;break;case "collapsed":c=a.tail;for(var d=null;null!==c;)null!==c.alternate&&(d=c),c=c.sibling;null===d?b||null===a.tail?a.tail=null:a.tail.sibling=null:d.sibling=null;}}
	function S(a){var b=null!==a.alternate&&a.alternate.child===a.child,c=0,d=0;if(b)for(var e=a.child;null!==e;)c|=e.lanes|e.childLanes,d|=e.subtreeFlags&14680064,d|=e.flags&14680064,e.return=a,e=e.sibling;else for(e=a.child;null!==e;)c|=e.lanes|e.childLanes,d|=e.subtreeFlags,d|=e.flags,e.return=a,e=e.sibling;a.subtreeFlags|=d;a.childLanes=c;return b}
	function Ej(a,b,c){var d=b.pendingProps;wg(b);switch(b.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return S(b),null;case 1:return Zf(b.type)&&$f(),S(b),null;case 3:d=b.stateNode;zh();E(Wf);E(H);Eh();d.pendingContext&&(d.context=d.pendingContext,d.pendingContext=null);if(null===a||null===a.child)Gg(b)?b.flags|=4:null===a||a.memoizedState.isDehydrated&&0===(b.flags&256)||(b.flags|=1024,null!==zg&&(Fj(zg),zg=null));Aj(a,b);S(b);return null;case 5:Bh(b);var e=xh(wh.current);
	c=b.type;if(null!==a&&null!=b.stateNode)Bj(a,b,c,d,e),a.ref!==b.ref&&(b.flags|=512,b.flags|=2097152);else {if(!d){if(null===b.stateNode)throw Error(p(166));S(b);return null}a=xh(uh.current);if(Gg(b)){d=b.stateNode;c=b.type;var f=b.memoizedProps;d[Of]=b;d[Pf]=f;a=0!==(b.mode&1);switch(c){case "dialog":D("cancel",d);D("close",d);break;case "iframe":case "object":case "embed":D("load",d);break;case "video":case "audio":for(e=0;e<lf.length;e++)D(lf[e],d);break;case "source":D("error",d);break;case "img":case "image":case "link":D("error",
	d);D("load",d);break;case "details":D("toggle",d);break;case "input":Za(d,f);D("invalid",d);break;case "select":d._wrapperState={wasMultiple:!!f.multiple};D("invalid",d);break;case "textarea":hb(d,f),D("invalid",d);}ub(c,f);e=null;for(var g in f)if(f.hasOwnProperty(g)){var h=f[g];"children"===g?"string"===typeof h?d.textContent!==h&&(!0!==f.suppressHydrationWarning&&Af(d.textContent,h,a),e=["children",h]):"number"===typeof h&&d.textContent!==""+h&&(!0!==f.suppressHydrationWarning&&Af(d.textContent,
	h,a),e=["children",""+h]):ea.hasOwnProperty(g)&&null!=h&&"onScroll"===g&&D("scroll",d);}switch(c){case "input":Va(d);db(d,f,!0);break;case "textarea":Va(d);jb(d);break;case "select":case "option":break;default:"function"===typeof f.onClick&&(d.onclick=Bf);}d=e;b.updateQueue=d;null!==d&&(b.flags|=4);}else {g=9===e.nodeType?e:e.ownerDocument;"http://www.w3.org/1999/xhtml"===a&&(a=kb(c));"http://www.w3.org/1999/xhtml"===a?"script"===c?(a=g.createElement("div"),a.innerHTML="<script>\x3c/script>",a=a.removeChild(a.firstChild)):
	"string"===typeof d.is?a=g.createElement(c,{is:d.is}):(a=g.createElement(c),"select"===c&&(g=a,d.multiple?g.multiple=!0:d.size&&(g.size=d.size))):a=g.createElementNS(a,c);a[Of]=b;a[Pf]=d;zj(a,b,!1,!1);b.stateNode=a;a:{g=vb(c,d);switch(c){case "dialog":D("cancel",a);D("close",a);e=d;break;case "iframe":case "object":case "embed":D("load",a);e=d;break;case "video":case "audio":for(e=0;e<lf.length;e++)D(lf[e],a);e=d;break;case "source":D("error",a);e=d;break;case "img":case "image":case "link":D("error",
	a);D("load",a);e=d;break;case "details":D("toggle",a);e=d;break;case "input":Za(a,d);e=Ya(a,d);D("invalid",a);break;case "option":e=d;break;case "select":a._wrapperState={wasMultiple:!!d.multiple};e=A({},d,{value:void 0});D("invalid",a);break;case "textarea":hb(a,d);e=gb(a,d);D("invalid",a);break;default:e=d;}ub(c,e);h=e;for(f in h)if(h.hasOwnProperty(f)){var k=h[f];"style"===f?sb(a,k):"dangerouslySetInnerHTML"===f?(k=k?k.__html:void 0,null!=k&&nb(a,k)):"children"===f?"string"===typeof k?("textarea"!==
	c||""!==k)&&ob(a,k):"number"===typeof k&&ob(a,""+k):"suppressContentEditableWarning"!==f&&"suppressHydrationWarning"!==f&&"autoFocus"!==f&&(ea.hasOwnProperty(f)?null!=k&&"onScroll"===f&&D("scroll",a):null!=k&&ta(a,f,k,g));}switch(c){case "input":Va(a);db(a,d,!1);break;case "textarea":Va(a);jb(a);break;case "option":null!=d.value&&a.setAttribute("value",""+Sa(d.value));break;case "select":a.multiple=!!d.multiple;f=d.value;null!=f?fb(a,!!d.multiple,f,!1):null!=d.defaultValue&&fb(a,!!d.multiple,d.defaultValue,
	!0);break;default:"function"===typeof e.onClick&&(a.onclick=Bf);}switch(c){case "button":case "input":case "select":case "textarea":d=!!d.autoFocus;break a;case "img":d=!0;break a;default:d=!1;}}d&&(b.flags|=4);}null!==b.ref&&(b.flags|=512,b.flags|=2097152);}S(b);return null;case 6:if(a&&null!=b.stateNode)Cj(a,b,a.memoizedProps,d);else {if("string"!==typeof d&&null===b.stateNode)throw Error(p(166));c=xh(wh.current);xh(uh.current);if(Gg(b)){d=b.stateNode;c=b.memoizedProps;d[Of]=b;if(f=d.nodeValue!==c)if(a=
	xg,null!==a)switch(a.tag){case 3:Af(d.nodeValue,c,0!==(a.mode&1));break;case 5:!0!==a.memoizedProps.suppressHydrationWarning&&Af(d.nodeValue,c,0!==(a.mode&1));}f&&(b.flags|=4);}else d=(9===c.nodeType?c:c.ownerDocument).createTextNode(d),d[Of]=b,b.stateNode=d;}S(b);return null;case 13:E(L);d=b.memoizedState;if(null===a||null!==a.memoizedState&&null!==a.memoizedState.dehydrated){if(I&&null!==yg&&0!==(b.mode&1)&&0===(b.flags&128))Hg(),Ig(),b.flags|=98560,f=!1;else if(f=Gg(b),null!==d&&null!==d.dehydrated){if(null===
	a){if(!f)throw Error(p(318));f=b.memoizedState;f=null!==f?f.dehydrated:null;if(!f)throw Error(p(317));f[Of]=b;}else Ig(),0===(b.flags&128)&&(b.memoizedState=null),b.flags|=4;S(b);f=!1;}else null!==zg&&(Fj(zg),zg=null),f=!0;if(!f)return b.flags&65536?b:null}if(0!==(b.flags&128))return b.lanes=c,b;d=null!==d;d!==(null!==a&&null!==a.memoizedState)&&d&&(b.child.flags|=8192,0!==(b.mode&1)&&(null===a||0!==(L.current&1)?0===T&&(T=3):tj()));null!==b.updateQueue&&(b.flags|=4);S(b);return null;case 4:return zh(),
	Aj(a,b),null===a&&sf(b.stateNode.containerInfo),S(b),null;case 10:return ah(b.type._context),S(b),null;case 17:return Zf(b.type)&&$f(),S(b),null;case 19:E(L);f=b.memoizedState;if(null===f)return S(b),null;d=0!==(b.flags&128);g=f.rendering;if(null===g)if(d)Dj(f,!1);else {if(0!==T||null!==a&&0!==(a.flags&128))for(a=b.child;null!==a;){g=Ch(a);if(null!==g){b.flags|=128;Dj(f,!1);d=g.updateQueue;null!==d&&(b.updateQueue=d,b.flags|=4);b.subtreeFlags=0;d=c;for(c=b.child;null!==c;)f=c,a=d,f.flags&=14680066,
	g=f.alternate,null===g?(f.childLanes=0,f.lanes=a,f.child=null,f.subtreeFlags=0,f.memoizedProps=null,f.memoizedState=null,f.updateQueue=null,f.dependencies=null,f.stateNode=null):(f.childLanes=g.childLanes,f.lanes=g.lanes,f.child=g.child,f.subtreeFlags=0,f.deletions=null,f.memoizedProps=g.memoizedProps,f.memoizedState=g.memoizedState,f.updateQueue=g.updateQueue,f.type=g.type,a=g.dependencies,f.dependencies=null===a?null:{lanes:a.lanes,firstContext:a.firstContext}),c=c.sibling;G(L,L.current&1|2);return b.child}a=
	a.sibling;}null!==f.tail&&B()>Gj&&(b.flags|=128,d=!0,Dj(f,!1),b.lanes=4194304);}else {if(!d)if(a=Ch(g),null!==a){if(b.flags|=128,d=!0,c=a.updateQueue,null!==c&&(b.updateQueue=c,b.flags|=4),Dj(f,!0),null===f.tail&&"hidden"===f.tailMode&&!g.alternate&&!I)return S(b),null}else 2*B()-f.renderingStartTime>Gj&&1073741824!==c&&(b.flags|=128,d=!0,Dj(f,!1),b.lanes=4194304);f.isBackwards?(g.sibling=b.child,b.child=g):(c=f.last,null!==c?c.sibling=g:b.child=g,f.last=g);}if(null!==f.tail)return b=f.tail,f.rendering=
	b,f.tail=b.sibling,f.renderingStartTime=B(),b.sibling=null,c=L.current,G(L,d?c&1|2:c&1),b;S(b);return null;case 22:case 23:return Hj(),d=null!==b.memoizedState,null!==a&&null!==a.memoizedState!==d&&(b.flags|=8192),d&&0!==(b.mode&1)?0!==(fj&1073741824)&&(S(b),b.subtreeFlags&6&&(b.flags|=8192)):S(b),null;case 24:return null;case 25:return null}throw Error(p(156,b.tag));}
	function Ij(a,b){wg(b);switch(b.tag){case 1:return Zf(b.type)&&$f(),a=b.flags,a&65536?(b.flags=a&-65537|128,b):null;case 3:return zh(),E(Wf),E(H),Eh(),a=b.flags,0!==(a&65536)&&0===(a&128)?(b.flags=a&-65537|128,b):null;case 5:return Bh(b),null;case 13:E(L);a=b.memoizedState;if(null!==a&&null!==a.dehydrated){if(null===b.alternate)throw Error(p(340));Ig();}a=b.flags;return a&65536?(b.flags=a&-65537|128,b):null;case 19:return E(L),null;case 4:return zh(),null;case 10:return ah(b.type._context),null;case 22:case 23:return Hj(),
	null;case 24:return null;default:return null}}var Jj=!1,U=!1,Kj="function"===typeof WeakSet?WeakSet:Set,V=null;function Lj(a,b){var c=a.ref;if(null!==c)if("function"===typeof c)try{c(null);}catch(d){W(a,b,d);}else c.current=null;}function Mj(a,b,c){try{c();}catch(d){W(a,b,d);}}var Nj=!1;
	function Oj(a,b){Cf=dd;a=Me();if(Ne(a)){if("selectionStart"in a)var c={start:a.selectionStart,end:a.selectionEnd};else a:{c=(c=a.ownerDocument)&&c.defaultView||window;var d=c.getSelection&&c.getSelection();if(d&&0!==d.rangeCount){c=d.anchorNode;var e=d.anchorOffset,f=d.focusNode;d=d.focusOffset;try{c.nodeType,f.nodeType;}catch(F){c=null;break a}var g=0,h=-1,k=-1,l=0,m=0,q=a,r=null;b:for(;;){for(var y;;){q!==c||0!==e&&3!==q.nodeType||(h=g+e);q!==f||0!==d&&3!==q.nodeType||(k=g+d);3===q.nodeType&&(g+=
	q.nodeValue.length);if(null===(y=q.firstChild))break;r=q;q=y;}for(;;){if(q===a)break b;r===c&&++l===e&&(h=g);r===f&&++m===d&&(k=g);if(null!==(y=q.nextSibling))break;q=r;r=q.parentNode;}q=y;}c=-1===h||-1===k?null:{start:h,end:k};}else c=null;}c=c||{start:0,end:0};}else c=null;Df={focusedElem:a,selectionRange:c};dd=!1;for(V=b;null!==V;)if(b=V,a=b.child,0!==(b.subtreeFlags&1028)&&null!==a)a.return=b,V=a;else for(;null!==V;){b=V;try{var n=b.alternate;if(0!==(b.flags&1024))switch(b.tag){case 0:case 11:case 15:break;
	case 1:if(null!==n){var t=n.memoizedProps,J=n.memoizedState,x=b.stateNode,w=x.getSnapshotBeforeUpdate(b.elementType===b.type?t:Ci(b.type,t),J);x.__reactInternalSnapshotBeforeUpdate=w;}break;case 3:var u=b.stateNode.containerInfo;1===u.nodeType?u.textContent="":9===u.nodeType&&u.documentElement&&u.removeChild(u.documentElement);break;case 5:case 6:case 4:case 17:break;default:throw Error(p(163));}}catch(F){W(b,b.return,F);}a=b.sibling;if(null!==a){a.return=b.return;V=a;break}V=b.return;}n=Nj;Nj=!1;return n}
	function Pj(a,b,c){var d=b.updateQueue;d=null!==d?d.lastEffect:null;if(null!==d){var e=d=d.next;do{if((e.tag&a)===a){var f=e.destroy;e.destroy=void 0;void 0!==f&&Mj(b,c,f);}e=e.next;}while(e!==d)}}function Qj(a,b){b=b.updateQueue;b=null!==b?b.lastEffect:null;if(null!==b){var c=b=b.next;do{if((c.tag&a)===a){var d=c.create;c.destroy=d();}c=c.next;}while(c!==b)}}function Rj(a){var b=a.ref;if(null!==b){var c=a.stateNode;switch(a.tag){case 5:a=c;break;default:a=c;}"function"===typeof b?b(a):b.current=a;}}
	function Sj(a){var b=a.alternate;null!==b&&(a.alternate=null,Sj(b));a.child=null;a.deletions=null;a.sibling=null;5===a.tag&&(b=a.stateNode,null!==b&&(delete b[Of],delete b[Pf],delete b[of],delete b[Qf],delete b[Rf]));a.stateNode=null;a.return=null;a.dependencies=null;a.memoizedProps=null;a.memoizedState=null;a.pendingProps=null;a.stateNode=null;a.updateQueue=null;}function Tj(a){return 5===a.tag||3===a.tag||4===a.tag}
	function Uj(a){a:for(;;){for(;null===a.sibling;){if(null===a.return||Tj(a.return))return null;a=a.return;}a.sibling.return=a.return;for(a=a.sibling;5!==a.tag&&6!==a.tag&&18!==a.tag;){if(a.flags&2)continue a;if(null===a.child||4===a.tag)continue a;else a.child.return=a,a=a.child;}if(!(a.flags&2))return a.stateNode}}
	function Vj(a,b,c){var d=a.tag;if(5===d||6===d)a=a.stateNode,b?8===c.nodeType?c.parentNode.insertBefore(a,b):c.insertBefore(a,b):(8===c.nodeType?(b=c.parentNode,b.insertBefore(a,c)):(b=c,b.appendChild(a)),c=c._reactRootContainer,null!==c&&void 0!==c||null!==b.onclick||(b.onclick=Bf));else if(4!==d&&(a=a.child,null!==a))for(Vj(a,b,c),a=a.sibling;null!==a;)Vj(a,b,c),a=a.sibling;}
	function Wj(a,b,c){var d=a.tag;if(5===d||6===d)a=a.stateNode,b?c.insertBefore(a,b):c.appendChild(a);else if(4!==d&&(a=a.child,null!==a))for(Wj(a,b,c),a=a.sibling;null!==a;)Wj(a,b,c),a=a.sibling;}var X=null,Xj=!1;function Yj(a,b,c){for(c=c.child;null!==c;)Zj(a,b,c),c=c.sibling;}
	function Zj(a,b,c){if(lc&&"function"===typeof lc.onCommitFiberUnmount)try{lc.onCommitFiberUnmount(kc,c);}catch(h){}switch(c.tag){case 5:U||Lj(c,b);case 6:var d=X,e=Xj;X=null;Yj(a,b,c);X=d;Xj=e;null!==X&&(Xj?(a=X,c=c.stateNode,8===a.nodeType?a.parentNode.removeChild(c):a.removeChild(c)):X.removeChild(c.stateNode));break;case 18:null!==X&&(Xj?(a=X,c=c.stateNode,8===a.nodeType?Kf(a.parentNode,c):1===a.nodeType&&Kf(a,c),bd(a)):Kf(X,c.stateNode));break;case 4:d=X;e=Xj;X=c.stateNode.containerInfo;Xj=!0;
	Yj(a,b,c);X=d;Xj=e;break;case 0:case 11:case 14:case 15:if(!U&&(d=c.updateQueue,null!==d&&(d=d.lastEffect,null!==d))){e=d=d.next;do{var f=e,g=f.destroy;f=f.tag;void 0!==g&&(0!==(f&2)?Mj(c,b,g):0!==(f&4)&&Mj(c,b,g));e=e.next;}while(e!==d)}Yj(a,b,c);break;case 1:if(!U&&(Lj(c,b),d=c.stateNode,"function"===typeof d.componentWillUnmount))try{d.props=c.memoizedProps,d.state=c.memoizedState,d.componentWillUnmount();}catch(h){W(c,b,h);}Yj(a,b,c);break;case 21:Yj(a,b,c);break;case 22:c.mode&1?(U=(d=U)||null!==
	c.memoizedState,Yj(a,b,c),U=d):Yj(a,b,c);break;default:Yj(a,b,c);}}function ak(a){var b=a.updateQueue;if(null!==b){a.updateQueue=null;var c=a.stateNode;null===c&&(c=a.stateNode=new Kj);b.forEach(function(b){var d=bk.bind(null,a,b);c.has(b)||(c.add(b),b.then(d,d));});}}
	function ck(a,b){var c=b.deletions;if(null!==c)for(var d=0;d<c.length;d++){var e=c[d];try{var f=a,g=b,h=g;a:for(;null!==h;){switch(h.tag){case 5:X=h.stateNode;Xj=!1;break a;case 3:X=h.stateNode.containerInfo;Xj=!0;break a;case 4:X=h.stateNode.containerInfo;Xj=!0;break a}h=h.return;}if(null===X)throw Error(p(160));Zj(f,g,e);X=null;Xj=!1;var k=e.alternate;null!==k&&(k.return=null);e.return=null;}catch(l){W(e,b,l);}}if(b.subtreeFlags&12854)for(b=b.child;null!==b;)dk(b,a),b=b.sibling;}
	function dk(a,b){var c=a.alternate,d=a.flags;switch(a.tag){case 0:case 11:case 14:case 15:ck(b,a);ek(a);if(d&4){try{Pj(3,a,a.return),Qj(3,a);}catch(t){W(a,a.return,t);}try{Pj(5,a,a.return);}catch(t){W(a,a.return,t);}}break;case 1:ck(b,a);ek(a);d&512&&null!==c&&Lj(c,c.return);break;case 5:ck(b,a);ek(a);d&512&&null!==c&&Lj(c,c.return);if(a.flags&32){var e=a.stateNode;try{ob(e,"");}catch(t){W(a,a.return,t);}}if(d&4&&(e=a.stateNode,null!=e)){var f=a.memoizedProps,g=null!==c?c.memoizedProps:f,h=a.type,k=a.updateQueue;
	a.updateQueue=null;if(null!==k)try{"input"===h&&"radio"===f.type&&null!=f.name&&ab(e,f);vb(h,g);var l=vb(h,f);for(g=0;g<k.length;g+=2){var m=k[g],q=k[g+1];"style"===m?sb(e,q):"dangerouslySetInnerHTML"===m?nb(e,q):"children"===m?ob(e,q):ta(e,m,q,l);}switch(h){case "input":bb(e,f);break;case "textarea":ib(e,f);break;case "select":var r=e._wrapperState.wasMultiple;e._wrapperState.wasMultiple=!!f.multiple;var y=f.value;null!=y?fb(e,!!f.multiple,y,!1):r!==!!f.multiple&&(null!=f.defaultValue?fb(e,!!f.multiple,
	f.defaultValue,!0):fb(e,!!f.multiple,f.multiple?[]:"",!1));}e[Pf]=f;}catch(t){W(a,a.return,t);}}break;case 6:ck(b,a);ek(a);if(d&4){if(null===a.stateNode)throw Error(p(162));e=a.stateNode;f=a.memoizedProps;try{e.nodeValue=f;}catch(t){W(a,a.return,t);}}break;case 3:ck(b,a);ek(a);if(d&4&&null!==c&&c.memoizedState.isDehydrated)try{bd(b.containerInfo);}catch(t){W(a,a.return,t);}break;case 4:ck(b,a);ek(a);break;case 13:ck(b,a);ek(a);e=a.child;e.flags&8192&&(f=null!==e.memoizedState,e.stateNode.isHidden=f,!f||
	null!==e.alternate&&null!==e.alternate.memoizedState||(fk=B()));d&4&&ak(a);break;case 22:m=null!==c&&null!==c.memoizedState;a.mode&1?(U=(l=U)||m,ck(b,a),U=l):ck(b,a);ek(a);if(d&8192){l=null!==a.memoizedState;if((a.stateNode.isHidden=l)&&!m&&0!==(a.mode&1))for(V=a,m=a.child;null!==m;){for(q=V=m;null!==V;){r=V;y=r.child;switch(r.tag){case 0:case 11:case 14:case 15:Pj(4,r,r.return);break;case 1:Lj(r,r.return);var n=r.stateNode;if("function"===typeof n.componentWillUnmount){d=r;c=r.return;try{b=d,n.props=
	b.memoizedProps,n.state=b.memoizedState,n.componentWillUnmount();}catch(t){W(d,c,t);}}break;case 5:Lj(r,r.return);break;case 22:if(null!==r.memoizedState){gk(q);continue}}null!==y?(y.return=r,V=y):gk(q);}m=m.sibling;}a:for(m=null,q=a;;){if(5===q.tag){if(null===m){m=q;try{e=q.stateNode,l?(f=e.style,"function"===typeof f.setProperty?f.setProperty("display","none","important"):f.display="none"):(h=q.stateNode,k=q.memoizedProps.style,g=void 0!==k&&null!==k&&k.hasOwnProperty("display")?k.display:null,h.style.display=
	rb("display",g));}catch(t){W(a,a.return,t);}}}else if(6===q.tag){if(null===m)try{q.stateNode.nodeValue=l?"":q.memoizedProps;}catch(t){W(a,a.return,t);}}else if((22!==q.tag&&23!==q.tag||null===q.memoizedState||q===a)&&null!==q.child){q.child.return=q;q=q.child;continue}if(q===a)break a;for(;null===q.sibling;){if(null===q.return||q.return===a)break a;m===q&&(m=null);q=q.return;}m===q&&(m=null);q.sibling.return=q.return;q=q.sibling;}}break;case 19:ck(b,a);ek(a);d&4&&ak(a);break;case 21:break;default:ck(b,
	a),ek(a);}}function ek(a){var b=a.flags;if(b&2){try{a:{for(var c=a.return;null!==c;){if(Tj(c)){var d=c;break a}c=c.return;}throw Error(p(160));}switch(d.tag){case 5:var e=d.stateNode;d.flags&32&&(ob(e,""),d.flags&=-33);var f=Uj(a);Wj(a,f,e);break;case 3:case 4:var g=d.stateNode.containerInfo,h=Uj(a);Vj(a,h,g);break;default:throw Error(p(161));}}catch(k){W(a,a.return,k);}a.flags&=-3;}b&4096&&(a.flags&=-4097);}function hk(a,b,c){V=a;ik(a);}
	function ik(a,b,c){for(var d=0!==(a.mode&1);null!==V;){var e=V,f=e.child;if(22===e.tag&&d){var g=null!==e.memoizedState||Jj;if(!g){var h=e.alternate,k=null!==h&&null!==h.memoizedState||U;h=Jj;var l=U;Jj=g;if((U=k)&&!l)for(V=e;null!==V;)g=V,k=g.child,22===g.tag&&null!==g.memoizedState?jk(e):null!==k?(k.return=g,V=k):jk(e);for(;null!==f;)V=f,ik(f),f=f.sibling;V=e;Jj=h;U=l;}kk(a);}else 0!==(e.subtreeFlags&8772)&&null!==f?(f.return=e,V=f):kk(a);}}
	function kk(a){for(;null!==V;){var b=V;if(0!==(b.flags&8772)){var c=b.alternate;try{if(0!==(b.flags&8772))switch(b.tag){case 0:case 11:case 15:U||Qj(5,b);break;case 1:var d=b.stateNode;if(b.flags&4&&!U)if(null===c)d.componentDidMount();else {var e=b.elementType===b.type?c.memoizedProps:Ci(b.type,c.memoizedProps);d.componentDidUpdate(e,c.memoizedState,d.__reactInternalSnapshotBeforeUpdate);}var f=b.updateQueue;null!==f&&sh(b,f,d);break;case 3:var g=b.updateQueue;if(null!==g){c=null;if(null!==b.child)switch(b.child.tag){case 5:c=
	b.child.stateNode;break;case 1:c=b.child.stateNode;}sh(b,g,c);}break;case 5:var h=b.stateNode;if(null===c&&b.flags&4){c=h;var k=b.memoizedProps;switch(b.type){case "button":case "input":case "select":case "textarea":k.autoFocus&&c.focus();break;case "img":k.src&&(c.src=k.src);}}break;case 6:break;case 4:break;case 12:break;case 13:if(null===b.memoizedState){var l=b.alternate;if(null!==l){var m=l.memoizedState;if(null!==m){var q=m.dehydrated;null!==q&&bd(q);}}}break;case 19:case 17:case 21:case 22:case 23:case 25:break;
	default:throw Error(p(163));}U||b.flags&512&&Rj(b);}catch(r){W(b,b.return,r);}}if(b===a){V=null;break}c=b.sibling;if(null!==c){c.return=b.return;V=c;break}V=b.return;}}function gk(a){for(;null!==V;){var b=V;if(b===a){V=null;break}var c=b.sibling;if(null!==c){c.return=b.return;V=c;break}V=b.return;}}
	function jk(a){for(;null!==V;){var b=V;try{switch(b.tag){case 0:case 11:case 15:var c=b.return;try{Qj(4,b);}catch(k){W(b,c,k);}break;case 1:var d=b.stateNode;if("function"===typeof d.componentDidMount){var e=b.return;try{d.componentDidMount();}catch(k){W(b,e,k);}}var f=b.return;try{Rj(b);}catch(k){W(b,f,k);}break;case 5:var g=b.return;try{Rj(b);}catch(k){W(b,g,k);}}}catch(k){W(b,b.return,k);}if(b===a){V=null;break}var h=b.sibling;if(null!==h){h.return=b.return;V=h;break}V=b.return;}}
	var lk=Math.ceil,mk=ua.ReactCurrentDispatcher,nk=ua.ReactCurrentOwner,ok=ua.ReactCurrentBatchConfig,K=0,Q=null,Y=null,Z=0,fj=0,ej=Uf(0),T=0,pk=null,rh=0,qk=0,rk=0,sk=null,tk=null,fk=0,Gj=Infinity,uk=null,Oi=!1,Pi=null,Ri=null,vk=!1,wk=null,xk=0,yk=0,zk=null,Ak=-1,Bk=0;function R(){return 0!==(K&6)?B():-1!==Ak?Ak:Ak=B()}
	function yi(a){if(0===(a.mode&1))return 1;if(0!==(K&2)&&0!==Z)return Z&-Z;if(null!==Kg.transition)return 0===Bk&&(Bk=yc()),Bk;a=C;if(0!==a)return a;a=window.event;a=void 0===a?16:jd(a.type);return a}function gi(a,b,c,d){if(50<yk)throw yk=0,zk=null,Error(p(185));Ac(a,c,d);if(0===(K&2)||a!==Q)a===Q&&(0===(K&2)&&(qk|=c),4===T&&Ck(a,Z)),Dk(a,d),1===c&&0===K&&0===(b.mode&1)&&(Gj=B()+500,fg&&jg());}
	function Dk(a,b){var c=a.callbackNode;wc(a,b);var d=uc(a,a===Q?Z:0);if(0===d)null!==c&&bc(c),a.callbackNode=null,a.callbackPriority=0;else if(b=d&-d,a.callbackPriority!==b){null!=c&&bc(c);if(1===b)0===a.tag?ig(Ek.bind(null,a)):hg(Ek.bind(null,a)),Jf(function(){0===(K&6)&&jg();}),c=null;else {switch(Dc(d)){case 1:c=fc;break;case 4:c=gc;break;case 16:c=hc;break;case 536870912:c=jc;break;default:c=hc;}c=Fk(c,Gk.bind(null,a));}a.callbackPriority=b;a.callbackNode=c;}}
	function Gk(a,b){Ak=-1;Bk=0;if(0!==(K&6))throw Error(p(327));var c=a.callbackNode;if(Hk()&&a.callbackNode!==c)return null;var d=uc(a,a===Q?Z:0);if(0===d)return null;if(0!==(d&30)||0!==(d&a.expiredLanes)||b)b=Ik(a,d);else {b=d;var e=K;K|=2;var f=Jk();if(Q!==a||Z!==b)uk=null,Gj=B()+500,Kk(a,b);do try{Lk();break}catch(h){Mk(a,h);}while(1);$g();mk.current=f;K=e;null!==Y?b=0:(Q=null,Z=0,b=T);}if(0!==b){2===b&&(e=xc(a),0!==e&&(d=e,b=Nk(a,e)));if(1===b)throw c=pk,Kk(a,0),Ck(a,d),Dk(a,B()),c;if(6===b)Ck(a,d);
	else {e=a.current.alternate;if(0===(d&30)&&!Ok(e)&&(b=Ik(a,d),2===b&&(f=xc(a),0!==f&&(d=f,b=Nk(a,f))),1===b))throw c=pk,Kk(a,0),Ck(a,d),Dk(a,B()),c;a.finishedWork=e;a.finishedLanes=d;switch(b){case 0:case 1:throw Error(p(345));case 2:Pk(a,tk,uk);break;case 3:Ck(a,d);if((d&130023424)===d&&(b=fk+500-B(),10<b)){if(0!==uc(a,0))break;e=a.suspendedLanes;if((e&d)!==d){R();a.pingedLanes|=a.suspendedLanes&e;break}a.timeoutHandle=Ff(Pk.bind(null,a,tk,uk),b);break}Pk(a,tk,uk);break;case 4:Ck(a,d);if((d&4194240)===
	d)break;b=a.eventTimes;for(e=-1;0<d;){var g=31-oc(d);f=1<<g;g=b[g];g>e&&(e=g);d&=~f;}d=e;d=B()-d;d=(120>d?120:480>d?480:1080>d?1080:1920>d?1920:3E3>d?3E3:4320>d?4320:1960*lk(d/1960))-d;if(10<d){a.timeoutHandle=Ff(Pk.bind(null,a,tk,uk),d);break}Pk(a,tk,uk);break;case 5:Pk(a,tk,uk);break;default:throw Error(p(329));}}}Dk(a,B());return a.callbackNode===c?Gk.bind(null,a):null}
	function Nk(a,b){var c=sk;a.current.memoizedState.isDehydrated&&(Kk(a,b).flags|=256);a=Ik(a,b);2!==a&&(b=tk,tk=c,null!==b&&Fj(b));return a}function Fj(a){null===tk?tk=a:tk.push.apply(tk,a);}
	function Ok(a){for(var b=a;;){if(b.flags&16384){var c=b.updateQueue;if(null!==c&&(c=c.stores,null!==c))for(var d=0;d<c.length;d++){var e=c[d],f=e.getSnapshot;e=e.value;try{if(!He(f(),e))return !1}catch(g){return !1}}}c=b.child;if(b.subtreeFlags&16384&&null!==c)c.return=b,b=c;else {if(b===a)break;for(;null===b.sibling;){if(null===b.return||b.return===a)return !0;b=b.return;}b.sibling.return=b.return;b=b.sibling;}}return !0}
	function Ck(a,b){b&=~rk;b&=~qk;a.suspendedLanes|=b;a.pingedLanes&=~b;for(a=a.expirationTimes;0<b;){var c=31-oc(b),d=1<<c;a[c]=-1;b&=~d;}}function Ek(a){if(0!==(K&6))throw Error(p(327));Hk();var b=uc(a,0);if(0===(b&1))return Dk(a,B()),null;var c=Ik(a,b);if(0!==a.tag&&2===c){var d=xc(a);0!==d&&(b=d,c=Nk(a,d));}if(1===c)throw c=pk,Kk(a,0),Ck(a,b),Dk(a,B()),c;if(6===c)throw Error(p(345));a.finishedWork=a.current.alternate;a.finishedLanes=b;Pk(a,tk,uk);Dk(a,B());return null}
	function Qk(a,b){var c=K;K|=1;try{return a(b)}finally{K=c,0===K&&(Gj=B()+500,fg&&jg());}}function Rk(a){null!==wk&&0===wk.tag&&0===(K&6)&&Hk();var b=K;K|=1;var c=ok.transition,d=C;try{if(ok.transition=null,C=1,a)return a()}finally{C=d,ok.transition=c,K=b,0===(K&6)&&jg();}}function Hj(){fj=ej.current;E(ej);}
	function Kk(a,b){a.finishedWork=null;a.finishedLanes=0;var c=a.timeoutHandle;-1!==c&&(a.timeoutHandle=-1,Gf(c));if(null!==Y)for(c=Y.return;null!==c;){var d=c;wg(d);switch(d.tag){case 1:d=d.type.childContextTypes;null!==d&&void 0!==d&&$f();break;case 3:zh();E(Wf);E(H);Eh();break;case 5:Bh(d);break;case 4:zh();break;case 13:E(L);break;case 19:E(L);break;case 10:ah(d.type._context);break;case 22:case 23:Hj();}c=c.return;}Q=a;Y=a=Pg(a.current,null);Z=fj=b;T=0;pk=null;rk=qk=rh=0;tk=sk=null;if(null!==fh){for(b=
	0;b<fh.length;b++)if(c=fh[b],d=c.interleaved,null!==d){c.interleaved=null;var e=d.next,f=c.pending;if(null!==f){var g=f.next;f.next=e;d.next=g;}c.pending=d;}fh=null;}return a}
	function Mk(a,b){do{var c=Y;try{$g();Fh.current=Rh;if(Ih){for(var d=M.memoizedState;null!==d;){var e=d.queue;null!==e&&(e.pending=null);d=d.next;}Ih=!1;}Hh=0;O=N=M=null;Jh=!1;Kh=0;nk.current=null;if(null===c||null===c.return){T=1;pk=b;Y=null;break}a:{var f=a,g=c.return,h=c,k=b;b=Z;h.flags|=32768;if(null!==k&&"object"===typeof k&&"function"===typeof k.then){var l=k,m=h,q=m.tag;if(0===(m.mode&1)&&(0===q||11===q||15===q)){var r=m.alternate;r?(m.updateQueue=r.updateQueue,m.memoizedState=r.memoizedState,
	m.lanes=r.lanes):(m.updateQueue=null,m.memoizedState=null);}var y=Ui(g);if(null!==y){y.flags&=-257;Vi(y,g,h,f,b);y.mode&1&&Si(f,l,b);b=y;k=l;var n=b.updateQueue;if(null===n){var t=new Set;t.add(k);b.updateQueue=t;}else n.add(k);break a}else {if(0===(b&1)){Si(f,l,b);tj();break a}k=Error(p(426));}}else if(I&&h.mode&1){var J=Ui(g);if(null!==J){0===(J.flags&65536)&&(J.flags|=256);Vi(J,g,h,f,b);Jg(Ji(k,h));break a}}f=k=Ji(k,h);4!==T&&(T=2);null===sk?sk=[f]:sk.push(f);f=g;do{switch(f.tag){case 3:f.flags|=65536;
	b&=-b;f.lanes|=b;var x=Ni(f,k,b);ph(f,x);break a;case 1:h=k;var w=f.type,u=f.stateNode;if(0===(f.flags&128)&&("function"===typeof w.getDerivedStateFromError||null!==u&&"function"===typeof u.componentDidCatch&&(null===Ri||!Ri.has(u)))){f.flags|=65536;b&=-b;f.lanes|=b;var F=Qi(f,h,b);ph(f,F);break a}}f=f.return;}while(null!==f)}Sk(c);}catch(na){b=na;Y===c&&null!==c&&(Y=c=c.return);continue}break}while(1)}function Jk(){var a=mk.current;mk.current=Rh;return null===a?Rh:a}
	function tj(){if(0===T||3===T||2===T)T=4;null===Q||0===(rh&268435455)&&0===(qk&268435455)||Ck(Q,Z);}function Ik(a,b){var c=K;K|=2;var d=Jk();if(Q!==a||Z!==b)uk=null,Kk(a,b);do try{Tk();break}catch(e){Mk(a,e);}while(1);$g();K=c;mk.current=d;if(null!==Y)throw Error(p(261));Q=null;Z=0;return T}function Tk(){for(;null!==Y;)Uk(Y);}function Lk(){for(;null!==Y&&!cc();)Uk(Y);}function Uk(a){var b=Vk(a.alternate,a,fj);a.memoizedProps=a.pendingProps;null===b?Sk(a):Y=b;nk.current=null;}
	function Sk(a){var b=a;do{var c=b.alternate;a=b.return;if(0===(b.flags&32768)){if(c=Ej(c,b,fj),null!==c){Y=c;return}}else {c=Ij(c,b);if(null!==c){c.flags&=32767;Y=c;return}if(null!==a)a.flags|=32768,a.subtreeFlags=0,a.deletions=null;else {T=6;Y=null;return}}b=b.sibling;if(null!==b){Y=b;return}Y=b=a;}while(null!==b);0===T&&(T=5);}function Pk(a,b,c){var d=C,e=ok.transition;try{ok.transition=null,C=1,Wk(a,b,c,d);}finally{ok.transition=e,C=d;}return null}
	function Wk(a,b,c,d){do Hk();while(null!==wk);if(0!==(K&6))throw Error(p(327));c=a.finishedWork;var e=a.finishedLanes;if(null===c)return null;a.finishedWork=null;a.finishedLanes=0;if(c===a.current)throw Error(p(177));a.callbackNode=null;a.callbackPriority=0;var f=c.lanes|c.childLanes;Bc(a,f);a===Q&&(Y=Q=null,Z=0);0===(c.subtreeFlags&2064)&&0===(c.flags&2064)||vk||(vk=!0,Fk(hc,function(){Hk();return null}));f=0!==(c.flags&15990);if(0!==(c.subtreeFlags&15990)||f){f=ok.transition;ok.transition=null;
	var g=C;C=1;var h=K;K|=4;nk.current=null;Oj(a,c);dk(c,a);Oe(Df);dd=!!Cf;Df=Cf=null;a.current=c;hk(c);dc();K=h;C=g;ok.transition=f;}else a.current=c;vk&&(vk=!1,wk=a,xk=e);f=a.pendingLanes;0===f&&(Ri=null);mc(c.stateNode);Dk(a,B());if(null!==b)for(d=a.onRecoverableError,c=0;c<b.length;c++)e=b[c],d(e.value,{componentStack:e.stack,digest:e.digest});if(Oi)throw Oi=!1,a=Pi,Pi=null,a;0!==(xk&1)&&0!==a.tag&&Hk();f=a.pendingLanes;0!==(f&1)?a===zk?yk++:(yk=0,zk=a):yk=0;jg();return null}
	function Hk(){if(null!==wk){var a=Dc(xk),b=ok.transition,c=C;try{ok.transition=null;C=16>a?16:a;if(null===wk)var d=!1;else {a=wk;wk=null;xk=0;if(0!==(K&6))throw Error(p(331));var e=K;K|=4;for(V=a.current;null!==V;){var f=V,g=f.child;if(0!==(V.flags&16)){var h=f.deletions;if(null!==h){for(var k=0;k<h.length;k++){var l=h[k];for(V=l;null!==V;){var m=V;switch(m.tag){case 0:case 11:case 15:Pj(8,m,f);}var q=m.child;if(null!==q)q.return=m,V=q;else for(;null!==V;){m=V;var r=m.sibling,y=m.return;Sj(m);if(m===
	l){V=null;break}if(null!==r){r.return=y;V=r;break}V=y;}}}var n=f.alternate;if(null!==n){var t=n.child;if(null!==t){n.child=null;do{var J=t.sibling;t.sibling=null;t=J;}while(null!==t)}}V=f;}}if(0!==(f.subtreeFlags&2064)&&null!==g)g.return=f,V=g;else b:for(;null!==V;){f=V;if(0!==(f.flags&2048))switch(f.tag){case 0:case 11:case 15:Pj(9,f,f.return);}var x=f.sibling;if(null!==x){x.return=f.return;V=x;break b}V=f.return;}}var w=a.current;for(V=w;null!==V;){g=V;var u=g.child;if(0!==(g.subtreeFlags&2064)&&null!==
	u)u.return=g,V=u;else b:for(g=w;null!==V;){h=V;if(0!==(h.flags&2048))try{switch(h.tag){case 0:case 11:case 15:Qj(9,h);}}catch(na){W(h,h.return,na);}if(h===g){V=null;break b}var F=h.sibling;if(null!==F){F.return=h.return;V=F;break b}V=h.return;}}K=e;jg();if(lc&&"function"===typeof lc.onPostCommitFiberRoot)try{lc.onPostCommitFiberRoot(kc,a);}catch(na){}d=!0;}return d}finally{C=c,ok.transition=b;}}return !1}function Xk(a,b,c){b=Ji(c,b);b=Ni(a,b,1);a=nh(a,b,1);b=R();null!==a&&(Ac(a,1,b),Dk(a,b));}
	function W(a,b,c){if(3===a.tag)Xk(a,a,c);else for(;null!==b;){if(3===b.tag){Xk(b,a,c);break}else if(1===b.tag){var d=b.stateNode;if("function"===typeof b.type.getDerivedStateFromError||"function"===typeof d.componentDidCatch&&(null===Ri||!Ri.has(d))){a=Ji(c,a);a=Qi(b,a,1);b=nh(b,a,1);a=R();null!==b&&(Ac(b,1,a),Dk(b,a));break}}b=b.return;}}
	function Ti(a,b,c){var d=a.pingCache;null!==d&&d.delete(b);b=R();a.pingedLanes|=a.suspendedLanes&c;Q===a&&(Z&c)===c&&(4===T||3===T&&(Z&130023424)===Z&&500>B()-fk?Kk(a,0):rk|=c);Dk(a,b);}function Yk(a,b){0===b&&(0===(a.mode&1)?b=1:(b=sc,sc<<=1,0===(sc&130023424)&&(sc=4194304)));var c=R();a=ih(a,b);null!==a&&(Ac(a,b,c),Dk(a,c));}function uj(a){var b=a.memoizedState,c=0;null!==b&&(c=b.retryLane);Yk(a,c);}
	function bk(a,b){var c=0;switch(a.tag){case 13:var d=a.stateNode;var e=a.memoizedState;null!==e&&(c=e.retryLane);break;case 19:d=a.stateNode;break;default:throw Error(p(314));}null!==d&&d.delete(b);Yk(a,c);}var Vk;
	Vk=function(a,b,c){if(null!==a)if(a.memoizedProps!==b.pendingProps||Wf.current)dh=!0;else {if(0===(a.lanes&c)&&0===(b.flags&128))return dh=!1,yj(a,b,c);dh=0!==(a.flags&131072)?!0:!1;}else dh=!1,I&&0!==(b.flags&1048576)&&ug(b,ng,b.index);b.lanes=0;switch(b.tag){case 2:var d=b.type;ij(a,b);a=b.pendingProps;var e=Yf(b,H.current);ch(b,c);e=Nh(null,b,d,a,e,c);var f=Sh();b.flags|=1;"object"===typeof e&&null!==e&&"function"===typeof e.render&&void 0===e.$$typeof?(b.tag=1,b.memoizedState=null,b.updateQueue=
	null,Zf(d)?(f=!0,cg(b)):f=!1,b.memoizedState=null!==e.state&&void 0!==e.state?e.state:null,kh(b),e.updater=Ei,b.stateNode=e,e._reactInternals=b,Ii(b,d,a,c),b=jj(null,b,d,!0,f,c)):(b.tag=0,I&&f&&vg(b),Xi(null,b,e,c),b=b.child);return b;case 16:d=b.elementType;a:{ij(a,b);a=b.pendingProps;e=d._init;d=e(d._payload);b.type=d;e=b.tag=Zk(d);a=Ci(d,a);switch(e){case 0:b=cj(null,b,d,a,c);break a;case 1:b=hj(null,b,d,a,c);break a;case 11:b=Yi(null,b,d,a,c);break a;case 14:b=$i(null,b,d,Ci(d.type,a),c);break a}throw Error(p(306,
	d,""));}return b;case 0:return d=b.type,e=b.pendingProps,e=b.elementType===d?e:Ci(d,e),cj(a,b,d,e,c);case 1:return d=b.type,e=b.pendingProps,e=b.elementType===d?e:Ci(d,e),hj(a,b,d,e,c);case 3:a:{kj(b);if(null===a)throw Error(p(387));d=b.pendingProps;f=b.memoizedState;e=f.element;lh(a,b);qh(b,d,null,c);var g=b.memoizedState;d=g.element;if(f.isDehydrated)if(f={element:d,isDehydrated:!1,cache:g.cache,pendingSuspenseBoundaries:g.pendingSuspenseBoundaries,transitions:g.transitions},b.updateQueue.baseState=
	f,b.memoizedState=f,b.flags&256){e=Ji(Error(p(423)),b);b=lj(a,b,d,c,e);break a}else if(d!==e){e=Ji(Error(p(424)),b);b=lj(a,b,d,c,e);break a}else for(yg=Lf(b.stateNode.containerInfo.firstChild),xg=b,I=!0,zg=null,c=Vg(b,null,d,c),b.child=c;c;)c.flags=c.flags&-3|4096,c=c.sibling;else {Ig();if(d===e){b=Zi(a,b,c);break a}Xi(a,b,d,c);}b=b.child;}return b;case 5:return Ah(b),null===a&&Eg(b),d=b.type,e=b.pendingProps,f=null!==a?a.memoizedProps:null,g=e.children,Ef(d,e)?g=null:null!==f&&Ef(d,f)&&(b.flags|=32),
	gj(a,b),Xi(a,b,g,c),b.child;case 6:return null===a&&Eg(b),null;case 13:return oj(a,b,c);case 4:return yh(b,b.stateNode.containerInfo),d=b.pendingProps,null===a?b.child=Ug(b,null,d,c):Xi(a,b,d,c),b.child;case 11:return d=b.type,e=b.pendingProps,e=b.elementType===d?e:Ci(d,e),Yi(a,b,d,e,c);case 7:return Xi(a,b,b.pendingProps,c),b.child;case 8:return Xi(a,b,b.pendingProps.children,c),b.child;case 12:return Xi(a,b,b.pendingProps.children,c),b.child;case 10:a:{d=b.type._context;e=b.pendingProps;f=b.memoizedProps;
	g=e.value;G(Wg,d._currentValue);d._currentValue=g;if(null!==f)if(He(f.value,g)){if(f.children===e.children&&!Wf.current){b=Zi(a,b,c);break a}}else for(f=b.child,null!==f&&(f.return=b);null!==f;){var h=f.dependencies;if(null!==h){g=f.child;for(var k=h.firstContext;null!==k;){if(k.context===d){if(1===f.tag){k=mh(-1,c&-c);k.tag=2;var l=f.updateQueue;if(null!==l){l=l.shared;var m=l.pending;null===m?k.next=k:(k.next=m.next,m.next=k);l.pending=k;}}f.lanes|=c;k=f.alternate;null!==k&&(k.lanes|=c);bh(f.return,
	c,b);h.lanes|=c;break}k=k.next;}}else if(10===f.tag)g=f.type===b.type?null:f.child;else if(18===f.tag){g=f.return;if(null===g)throw Error(p(341));g.lanes|=c;h=g.alternate;null!==h&&(h.lanes|=c);bh(g,c,b);g=f.sibling;}else g=f.child;if(null!==g)g.return=f;else for(g=f;null!==g;){if(g===b){g=null;break}f=g.sibling;if(null!==f){f.return=g.return;g=f;break}g=g.return;}f=g;}Xi(a,b,e.children,c);b=b.child;}return b;case 9:return e=b.type,d=b.pendingProps.children,ch(b,c),e=eh(e),d=d(e),b.flags|=1,Xi(a,b,d,c),
	b.child;case 14:return d=b.type,e=Ci(d,b.pendingProps),e=Ci(d.type,e),$i(a,b,d,e,c);case 15:return bj(a,b,b.type,b.pendingProps,c);case 17:return d=b.type,e=b.pendingProps,e=b.elementType===d?e:Ci(d,e),ij(a,b),b.tag=1,Zf(d)?(a=!0,cg(b)):a=!1,ch(b,c),Gi(b,d,e),Ii(b,d,e,c),jj(null,b,d,!0,a,c);case 19:return xj(a,b,c);case 22:return dj(a,b,c)}throw Error(p(156,b.tag));};function Fk(a,b){return ac(a,b)}
	function $k(a,b,c,d){this.tag=a;this.key=c;this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null;this.index=0;this.ref=null;this.pendingProps=b;this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null;this.mode=d;this.subtreeFlags=this.flags=0;this.deletions=null;this.childLanes=this.lanes=0;this.alternate=null;}function Bg(a,b,c,d){return new $k(a,b,c,d)}function aj(a){a=a.prototype;return !(!a||!a.isReactComponent)}
	function Zk(a){if("function"===typeof a)return aj(a)?1:0;if(void 0!==a&&null!==a){a=a.$$typeof;if(a===Da)return 11;if(a===Ga)return 14}return 2}
	function Pg(a,b){var c=a.alternate;null===c?(c=Bg(a.tag,b,a.key,a.mode),c.elementType=a.elementType,c.type=a.type,c.stateNode=a.stateNode,c.alternate=a,a.alternate=c):(c.pendingProps=b,c.type=a.type,c.flags=0,c.subtreeFlags=0,c.deletions=null);c.flags=a.flags&14680064;c.childLanes=a.childLanes;c.lanes=a.lanes;c.child=a.child;c.memoizedProps=a.memoizedProps;c.memoizedState=a.memoizedState;c.updateQueue=a.updateQueue;b=a.dependencies;c.dependencies=null===b?null:{lanes:b.lanes,firstContext:b.firstContext};
	c.sibling=a.sibling;c.index=a.index;c.ref=a.ref;return c}
	function Rg(a,b,c,d,e,f){var g=2;d=a;if("function"===typeof a)aj(a)&&(g=1);else if("string"===typeof a)g=5;else a:switch(a){case ya:return Tg(c.children,e,f,b);case za:g=8;e|=8;break;case Aa:return a=Bg(12,c,b,e|2),a.elementType=Aa,a.lanes=f,a;case Ea:return a=Bg(13,c,b,e),a.elementType=Ea,a.lanes=f,a;case Fa:return a=Bg(19,c,b,e),a.elementType=Fa,a.lanes=f,a;case Ia:return pj(c,e,f,b);default:if("object"===typeof a&&null!==a)switch(a.$$typeof){case Ba:g=10;break a;case Ca:g=9;break a;case Da:g=11;
	break a;case Ga:g=14;break a;case Ha:g=16;d=null;break a}throw Error(p(130,null==a?a:typeof a,""));}b=Bg(g,c,b,e);b.elementType=a;b.type=d;b.lanes=f;return b}function Tg(a,b,c,d){a=Bg(7,a,d,b);a.lanes=c;return a}function pj(a,b,c,d){a=Bg(22,a,d,b);a.elementType=Ia;a.lanes=c;a.stateNode={isHidden:!1};return a}function Qg(a,b,c){a=Bg(6,a,null,b);a.lanes=c;return a}
	function Sg(a,b,c){b=Bg(4,null!==a.children?a.children:[],a.key,b);b.lanes=c;b.stateNode={containerInfo:a.containerInfo,pendingChildren:null,implementation:a.implementation};return b}
	function al(a,b,c,d,e){this.tag=b;this.containerInfo=a;this.finishedWork=this.pingCache=this.current=this.pendingChildren=null;this.timeoutHandle=-1;this.callbackNode=this.pendingContext=this.context=null;this.callbackPriority=0;this.eventTimes=zc(0);this.expirationTimes=zc(-1);this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0;this.entanglements=zc(0);this.identifierPrefix=d;this.onRecoverableError=e;this.mutableSourceEagerHydrationData=
	null;}function bl(a,b,c,d,e,f,g,h,k){a=new al(a,b,c,h,k);1===b?(b=1,!0===f&&(b|=8)):b=0;f=Bg(3,null,null,b);a.current=f;f.stateNode=a;f.memoizedState={element:d,isDehydrated:c,cache:null,transitions:null,pendingSuspenseBoundaries:null};kh(f);return a}function cl(a,b,c){var d=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return {$$typeof:wa,key:null==d?null:""+d,children:a,containerInfo:b,implementation:c}}
	function dl(a){if(!a)return Vf;a=a._reactInternals;a:{if(Vb(a)!==a||1!==a.tag)throw Error(p(170));var b=a;do{switch(b.tag){case 3:b=b.stateNode.context;break a;case 1:if(Zf(b.type)){b=b.stateNode.__reactInternalMemoizedMergedChildContext;break a}}b=b.return;}while(null!==b);throw Error(p(171));}if(1===a.tag){var c=a.type;if(Zf(c))return bg(a,c,b)}return b}
	function el(a,b,c,d,e,f,g,h,k){a=bl(c,d,!0,a,e,f,g,h,k);a.context=dl(null);c=a.current;d=R();e=yi(c);f=mh(d,e);f.callback=void 0!==b&&null!==b?b:null;nh(c,f,e);a.current.lanes=e;Ac(a,e,d);Dk(a,d);return a}function fl(a,b,c,d){var e=b.current,f=R(),g=yi(e);c=dl(c);null===b.context?b.context=c:b.pendingContext=c;b=mh(f,g);b.payload={element:a};d=void 0===d?null:d;null!==d&&(b.callback=d);a=nh(e,b,g);null!==a&&(gi(a,e,g,f),oh(a,e,g));return g}
	function gl(a){a=a.current;if(!a.child)return null;switch(a.child.tag){case 5:return a.child.stateNode;default:return a.child.stateNode}}function hl(a,b){a=a.memoizedState;if(null!==a&&null!==a.dehydrated){var c=a.retryLane;a.retryLane=0!==c&&c<b?c:b;}}function il(a,b){hl(a,b);(a=a.alternate)&&hl(a,b);}function jl(){return null}var kl="function"===typeof reportError?reportError:function(a){console.error(a);};function ll(a){this._internalRoot=a;}
	ml.prototype.render=ll.prototype.render=function(a){var b=this._internalRoot;if(null===b)throw Error(p(409));fl(a,b,null,null);};ml.prototype.unmount=ll.prototype.unmount=function(){var a=this._internalRoot;if(null!==a){this._internalRoot=null;var b=a.containerInfo;Rk(function(){fl(null,a,null,null);});b[uf]=null;}};function ml(a){this._internalRoot=a;}
	ml.prototype.unstable_scheduleHydration=function(a){if(a){var b=Hc();a={blockedOn:null,target:a,priority:b};for(var c=0;c<Qc.length&&0!==b&&b<Qc[c].priority;c++);Qc.splice(c,0,a);0===c&&Vc(a);}};function nl(a){return !(!a||1!==a.nodeType&&9!==a.nodeType&&11!==a.nodeType)}function ol(a){return !(!a||1!==a.nodeType&&9!==a.nodeType&&11!==a.nodeType&&(8!==a.nodeType||" react-mount-point-unstable "!==a.nodeValue))}function pl(){}
	function ql(a,b,c,d,e){if(e){if("function"===typeof d){var f=d;d=function(){var a=gl(g);f.call(a);};}var g=el(b,d,a,0,null,!1,!1,"",pl);a._reactRootContainer=g;a[uf]=g.current;sf(8===a.nodeType?a.parentNode:a);Rk();return g}for(;e=a.lastChild;)a.removeChild(e);if("function"===typeof d){var h=d;d=function(){var a=gl(k);h.call(a);};}var k=bl(a,0,!1,null,null,!1,!1,"",pl);a._reactRootContainer=k;a[uf]=k.current;sf(8===a.nodeType?a.parentNode:a);Rk(function(){fl(b,k,c,d);});return k}
	function rl(a,b,c,d,e){var f=c._reactRootContainer;if(f){var g=f;if("function"===typeof e){var h=e;e=function(){var a=gl(g);h.call(a);};}fl(b,g,a,e);}else g=ql(c,b,a,e,d);return gl(g)}Ec=function(a){switch(a.tag){case 3:var b=a.stateNode;if(b.current.memoizedState.isDehydrated){var c=tc(b.pendingLanes);0!==c&&(Cc(b,c|1),Dk(b,B()),0===(K&6)&&(Gj=B()+500,jg()));}break;case 13:Rk(function(){var b=ih(a,1);if(null!==b){var c=R();gi(b,a,1,c);}}),il(a,1);}};
	Fc=function(a){if(13===a.tag){var b=ih(a,134217728);if(null!==b){var c=R();gi(b,a,134217728,c);}il(a,134217728);}};Gc=function(a){if(13===a.tag){var b=yi(a),c=ih(a,b);if(null!==c){var d=R();gi(c,a,b,d);}il(a,b);}};Hc=function(){return C};Ic=function(a,b){var c=C;try{return C=a,b()}finally{C=c;}};
	yb=function(a,b,c){switch(b){case "input":bb(a,c);b=c.name;if("radio"===c.type&&null!=b){for(c=a;c.parentNode;)c=c.parentNode;c=c.querySelectorAll("input[name="+JSON.stringify(""+b)+'][type="radio"]');for(b=0;b<c.length;b++){var d=c[b];if(d!==a&&d.form===a.form){var e=Db(d);if(!e)throw Error(p(90));Wa(d);bb(d,e);}}}break;case "textarea":ib(a,c);break;case "select":b=c.value,null!=b&&fb(a,!!c.multiple,b,!1);}};Gb=Qk;Hb=Rk;
	var sl={usingClientEntryPoint:!1,Events:[Cb,ue,Db,Eb,Fb,Qk]},tl={findFiberByHostInstance:Wc,bundleType:0,version:"18.3.1",rendererPackageName:"react-dom"};
	var ul={bundleType:tl.bundleType,version:tl.version,rendererPackageName:tl.rendererPackageName,rendererConfig:tl.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setErrorHandler:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:ua.ReactCurrentDispatcher,findHostInstanceByFiber:function(a){a=Zb(a);return null===a?null:a.stateNode},findFiberByHostInstance:tl.findFiberByHostInstance||
	jl,findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null,reconcilerVersion:"18.3.1-next-f1338f8080-20240426"};if("undefined"!==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var vl=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!vl.isDisabled&&vl.supportsFiber)try{kc=vl.inject(ul),lc=vl;}catch(a){}}reactDom_production_min.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=sl;
	reactDom_production_min.createPortal=function(a,b){var c=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!nl(b))throw Error(p(200));return cl(a,b,null,c)};reactDom_production_min.createRoot=function(a,b){if(!nl(a))throw Error(p(299));var c=!1,d="",e=kl;null!==b&&void 0!==b&&(!0===b.unstable_strictMode&&(c=!0),void 0!==b.identifierPrefix&&(d=b.identifierPrefix),void 0!==b.onRecoverableError&&(e=b.onRecoverableError));b=bl(a,1,!1,null,null,c,!1,d,e);a[uf]=b.current;sf(8===a.nodeType?a.parentNode:a);return new ll(b)};
	reactDom_production_min.findDOMNode=function(a){if(null==a)return null;if(1===a.nodeType)return a;var b=a._reactInternals;if(void 0===b){if("function"===typeof a.render)throw Error(p(188));a=Object.keys(a).join(",");throw Error(p(268,a));}a=Zb(b);a=null===a?null:a.stateNode;return a};reactDom_production_min.flushSync=function(a){return Rk(a)};reactDom_production_min.hydrate=function(a,b,c){if(!ol(b))throw Error(p(200));return rl(null,a,b,!0,c)};
	reactDom_production_min.hydrateRoot=function(a,b,c){if(!nl(a))throw Error(p(405));var d=null!=c&&c.hydratedSources||null,e=!1,f="",g=kl;null!==c&&void 0!==c&&(!0===c.unstable_strictMode&&(e=!0),void 0!==c.identifierPrefix&&(f=c.identifierPrefix),void 0!==c.onRecoverableError&&(g=c.onRecoverableError));b=el(b,null,a,1,null!=c?c:null,e,!1,f,g);a[uf]=b.current;sf(a);if(d)for(a=0;a<d.length;a++)c=d[a],e=c._getVersion,e=e(c._source),null==b.mutableSourceEagerHydrationData?b.mutableSourceEagerHydrationData=[c,e]:b.mutableSourceEagerHydrationData.push(c,
	e);return new ml(b)};reactDom_production_min.render=function(a,b,c){if(!ol(b))throw Error(p(200));return rl(null,a,b,!1,c)};reactDom_production_min.unmountComponentAtNode=function(a){if(!ol(a))throw Error(p(40));return a._reactRootContainer?(Rk(function(){rl(null,null,a,!1,function(){a._reactRootContainer=null;a[uf]=null;});}),!0):!1};reactDom_production_min.unstable_batchedUpdates=Qk;
	reactDom_production_min.unstable_renderSubtreeIntoContainer=function(a,b,c,d){if(!ol(c))throw Error(p(200));if(null==a||void 0===a._reactInternals)throw Error(p(38));return rl(a,b,c,!1,d)};reactDom_production_min.version="18.3.1-next-f1338f8080-20240426";
	return reactDom_production_min;
}

var reactDom_development = {};

/**
 * @license React
 * react-dom.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var hasRequiredReactDom_development;

function requireReactDom_development () {
	if (hasRequiredReactDom_development) return reactDom_development;
	hasRequiredReactDom_development = 1;

	if (process.env.NODE_ENV !== "production") {
	  (function() {

	/* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */
	if (
	  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' &&
	  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart ===
	    'function'
	) {
	  __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
	}
	          var React = reactExports;
	var Scheduler = requireScheduler();

	var ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;

	var suppressWarning = false;
	function setSuppressWarning(newSuppressWarning) {
	  {
	    suppressWarning = newSuppressWarning;
	  }
	} // In DEV, calls to console.warn and console.error get replaced
	// by calls to these methods by a Babel plugin.
	//
	// In PROD (or in packages without access to React internals),
	// they are left as they are instead.

	function warn(format) {
	  {
	    if (!suppressWarning) {
	      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	        args[_key - 1] = arguments[_key];
	      }

	      printWarning('warn', format, args);
	    }
	  }
	}
	function error(format) {
	  {
	    if (!suppressWarning) {
	      for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
	        args[_key2 - 1] = arguments[_key2];
	      }

	      printWarning('error', format, args);
	    }
	  }
	}

	function printWarning(level, format, args) {
	  // When changing this logic, you might want to also
	  // update consoleWithStackDev.www.js as well.
	  {
	    var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
	    var stack = ReactDebugCurrentFrame.getStackAddendum();

	    if (stack !== '') {
	      format += '%s';
	      args = args.concat([stack]);
	    } // eslint-disable-next-line react-internal/safe-string-coercion


	    var argsWithFormat = args.map(function (item) {
	      return String(item);
	    }); // Careful: RN currently depends on this prefix

	    argsWithFormat.unshift('Warning: ' + format); // We intentionally don't use spread (or .apply) directly because it
	    // breaks IE9: https://github.com/facebook/react/issues/13610
	    // eslint-disable-next-line react-internal/no-production-logging

	    Function.prototype.apply.call(console[level], console, argsWithFormat);
	  }
	}

	var FunctionComponent = 0;
	var ClassComponent = 1;
	var IndeterminateComponent = 2; // Before we know whether it is function or class

	var HostRoot = 3; // Root of a host tree. Could be nested inside another node.

	var HostPortal = 4; // A subtree. Could be an entry point to a different renderer.

	var HostComponent = 5;
	var HostText = 6;
	var Fragment = 7;
	var Mode = 8;
	var ContextConsumer = 9;
	var ContextProvider = 10;
	var ForwardRef = 11;
	var Profiler = 12;
	var SuspenseComponent = 13;
	var MemoComponent = 14;
	var SimpleMemoComponent = 15;
	var LazyComponent = 16;
	var IncompleteClassComponent = 17;
	var DehydratedFragment = 18;
	var SuspenseListComponent = 19;
	var ScopeComponent = 21;
	var OffscreenComponent = 22;
	var LegacyHiddenComponent = 23;
	var CacheComponent = 24;
	var TracingMarkerComponent = 25;

	// -----------------------------------------------------------------------------

	var enableClientRenderFallbackOnTextMismatch = true; // TODO: Need to review this code one more time before landing
	// the react-reconciler package.

	var enableNewReconciler = false; // Support legacy Primer support on internal FB www

	var enableLazyContextPropagation = false; // FB-only usage. The new API has different semantics.

	var enableLegacyHidden = false; // Enables unstable_avoidThisFallback feature in Fiber

	var enableSuspenseAvoidThisFallback = false; // Enables unstable_avoidThisFallback feature in Fizz
	// React DOM Chopping Block
	//
	// Similar to main Chopping Block but only flags related to React DOM. These are
	// grouped because we will likely batch all of them into a single major release.
	// -----------------------------------------------------------------------------
	// Disable support for comment nodes as React DOM containers. Already disabled
	// in open source, but www codebase still relies on it. Need to remove.

	var disableCommentsAsDOMContainers = true; // Disable javascript: URL strings in href for XSS protection.
	// and client rendering, mostly to allow JSX attributes to apply to the custom
	// element's object properties instead of only HTML attributes.
	// https://github.com/facebook/react/issues/11347

	var enableCustomElementPropertySupport = false; // Disables children for <textarea> elements
	var warnAboutStringRefs = true; // -----------------------------------------------------------------------------
	// Debugging and DevTools
	// -----------------------------------------------------------------------------
	// Adds user timing marks for e.g. state updates, suspense, and work loop stuff,
	// for an experimental timeline tool.

	var enableSchedulingProfiler = true; // Helps identify side effects in render-phase lifecycle hooks and setState

	var enableProfilerTimer = true; // Record durations for commit and passive effects phases.

	var enableProfilerCommitHooks = true; // Phase param passed to onRender callback differentiates between an "update" and a "cascading-update".

	var allNativeEvents = new Set();
	/**
	 * Mapping from registration name to event name
	 */


	var registrationNameDependencies = {};
	/**
	 * Mapping from lowercase registration names to the properly cased version,
	 * used to warn in the case of missing event handlers. Available
	 * only in true.
	 * @type {Object}
	 */

	var possibleRegistrationNames =  {} ; // Trust the developer to only use possibleRegistrationNames in true

	function registerTwoPhaseEvent(registrationName, dependencies) {
	  registerDirectEvent(registrationName, dependencies);
	  registerDirectEvent(registrationName + 'Capture', dependencies);
	}
	function registerDirectEvent(registrationName, dependencies) {
	  {
	    if (registrationNameDependencies[registrationName]) {
	      error('EventRegistry: More than one plugin attempted to publish the same ' + 'registration name, `%s`.', registrationName);
	    }
	  }

	  registrationNameDependencies[registrationName] = dependencies;

	  {
	    var lowerCasedName = registrationName.toLowerCase();
	    possibleRegistrationNames[lowerCasedName] = registrationName;

	    if (registrationName === 'onDoubleClick') {
	      possibleRegistrationNames.ondblclick = registrationName;
	    }
	  }

	  for (var i = 0; i < dependencies.length; i++) {
	    allNativeEvents.add(dependencies[i]);
	  }
	}

	var canUseDOM = !!(typeof window !== 'undefined' && typeof window.document !== 'undefined' && typeof window.document.createElement !== 'undefined');

	var hasOwnProperty = Object.prototype.hasOwnProperty;

	/*
	 * The `'' + value` pattern (used in in perf-sensitive code) throws for Symbol
	 * and Temporal.* types. See https://github.com/facebook/react/pull/22064.
	 *
	 * The functions in this module will throw an easier-to-understand,
	 * easier-to-debug exception with a clear errors message message explaining the
	 * problem. (Instead of a confusing exception thrown inside the implementation
	 * of the `value` object).
	 */
	// $FlowFixMe only called in DEV, so void return is not possible.
	function typeName(value) {
	  {
	    // toStringTag is needed for namespaced types like Temporal.Instant
	    var hasToStringTag = typeof Symbol === 'function' && Symbol.toStringTag;
	    var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || 'Object';
	    return type;
	  }
	} // $FlowFixMe only called in DEV, so void return is not possible.


	function willCoercionThrow(value) {
	  {
	    try {
	      testStringCoercion(value);
	      return false;
	    } catch (e) {
	      return true;
	    }
	  }
	}

	function testStringCoercion(value) {
	  // If you ended up here by following an exception call stack, here's what's
	  // happened: you supplied an object or symbol value to React (as a prop, key,
	  // DOM attribute, CSS property, string ref, etc.) and when React tried to
	  // coerce it to a string using `'' + value`, an exception was thrown.
	  //
	  // The most common types that will cause this exception are `Symbol` instances
	  // and Temporal objects like `Temporal.Instant`. But any object that has a
	  // `valueOf` or `[Symbol.toPrimitive]` method that throws will also cause this
	  // exception. (Library authors do this to prevent users from using built-in
	  // numeric operators like `+` or comparison operators like `>=` because custom
	  // methods are needed to perform accurate arithmetic or comparison.)
	  //
	  // To fix the problem, coerce this object or symbol value to a string before
	  // passing it to React. The most reliable way is usually `String(value)`.
	  //
	  // To find which value is throwing, check the browser or debugger console.
	  // Before this exception was thrown, there should be `console.error` output
	  // that shows the type (Symbol, Temporal.PlainDate, etc.) that caused the
	  // problem and how that type was used: key, atrribute, input value prop, etc.
	  // In most cases, this console output also shows the component and its
	  // ancestor components where the exception happened.
	  //
	  // eslint-disable-next-line react-internal/safe-string-coercion
	  return '' + value;
	}

	function checkAttributeStringCoercion(value, attributeName) {
	  {
	    if (willCoercionThrow(value)) {
	      error('The provided `%s` attribute is an unsupported type %s.' + ' This value must be coerced to a string before before using it here.', attributeName, typeName(value));

	      return testStringCoercion(value); // throw (to help callers find troubleshooting comments)
	    }
	  }
	}
	function checkKeyStringCoercion(value) {
	  {
	    if (willCoercionThrow(value)) {
	      error('The provided key is an unsupported type %s.' + ' This value must be coerced to a string before before using it here.', typeName(value));

	      return testStringCoercion(value); // throw (to help callers find troubleshooting comments)
	    }
	  }
	}
	function checkPropStringCoercion(value, propName) {
	  {
	    if (willCoercionThrow(value)) {
	      error('The provided `%s` prop is an unsupported type %s.' + ' This value must be coerced to a string before before using it here.', propName, typeName(value));

	      return testStringCoercion(value); // throw (to help callers find troubleshooting comments)
	    }
	  }
	}
	function checkCSSPropertyStringCoercion(value, propName) {
	  {
	    if (willCoercionThrow(value)) {
	      error('The provided `%s` CSS property is an unsupported type %s.' + ' This value must be coerced to a string before before using it here.', propName, typeName(value));

	      return testStringCoercion(value); // throw (to help callers find troubleshooting comments)
	    }
	  }
	}
	function checkHtmlStringCoercion(value) {
	  {
	    if (willCoercionThrow(value)) {
	      error('The provided HTML markup uses a value of unsupported type %s.' + ' This value must be coerced to a string before before using it here.', typeName(value));

	      return testStringCoercion(value); // throw (to help callers find troubleshooting comments)
	    }
	  }
	}
	function checkFormFieldValueStringCoercion(value) {
	  {
	    if (willCoercionThrow(value)) {
	      error('Form field values (value, checked, defaultValue, or defaultChecked props)' + ' must be strings, not %s.' + ' This value must be coerced to a string before before using it here.', typeName(value));

	      return testStringCoercion(value); // throw (to help callers find troubleshooting comments)
	    }
	  }
	}

	// A reserved attribute.
	// It is handled by React separately and shouldn't be written to the DOM.
	var RESERVED = 0; // A simple string attribute.
	// Attributes that aren't in the filter are presumed to have this type.

	var STRING = 1; // A string attribute that accepts booleans in React. In HTML, these are called
	// "enumerated" attributes with "true" and "false" as possible values.
	// When true, it should be set to a "true" string.
	// When false, it should be set to a "false" string.

	var BOOLEANISH_STRING = 2; // A real boolean attribute.
	// When true, it should be present (set either to an empty string or its name).
	// When false, it should be omitted.

	var BOOLEAN = 3; // An attribute that can be used as a flag as well as with a value.
	// When true, it should be present (set either to an empty string or its name).
	// When false, it should be omitted.
	// For any other value, should be present with that value.

	var OVERLOADED_BOOLEAN = 4; // An attribute that must be numeric or parse as a numeric.
	// When falsy, it should be removed.

	var NUMERIC = 5; // An attribute that must be positive numeric or parse as a positive numeric.
	// When falsy, it should be removed.

	var POSITIVE_NUMERIC = 6;

	/* eslint-disable max-len */
	var ATTRIBUTE_NAME_START_CHAR = ":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD";
	/* eslint-enable max-len */

	var ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + "\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040";
	var VALID_ATTRIBUTE_NAME_REGEX = new RegExp('^[' + ATTRIBUTE_NAME_START_CHAR + '][' + ATTRIBUTE_NAME_CHAR + ']*$');
	var illegalAttributeNameCache = {};
	var validatedAttributeNameCache = {};
	function isAttributeNameSafe(attributeName) {
	  if (hasOwnProperty.call(validatedAttributeNameCache, attributeName)) {
	    return true;
	  }

	  if (hasOwnProperty.call(illegalAttributeNameCache, attributeName)) {
	    return false;
	  }

	  if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
	    validatedAttributeNameCache[attributeName] = true;
	    return true;
	  }

	  illegalAttributeNameCache[attributeName] = true;

	  {
	    error('Invalid attribute name: `%s`', attributeName);
	  }

	  return false;
	}
	function shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag) {
	  if (propertyInfo !== null) {
	    return propertyInfo.type === RESERVED;
	  }

	  if (isCustomComponentTag) {
	    return false;
	  }

	  if (name.length > 2 && (name[0] === 'o' || name[0] === 'O') && (name[1] === 'n' || name[1] === 'N')) {
	    return true;
	  }

	  return false;
	}
	function shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag) {
	  if (propertyInfo !== null && propertyInfo.type === RESERVED) {
	    return false;
	  }

	  switch (typeof value) {
	    case 'function': // $FlowIssue symbol is perfectly valid here

	    case 'symbol':
	      // eslint-disable-line
	      return true;

	    case 'boolean':
	      {
	        if (isCustomComponentTag) {
	          return false;
	        }

	        if (propertyInfo !== null) {
	          return !propertyInfo.acceptsBooleans;
	        } else {
	          var prefix = name.toLowerCase().slice(0, 5);
	          return prefix !== 'data-' && prefix !== 'aria-';
	        }
	      }

	    default:
	      return false;
	  }
	}
	function shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag) {
	  if (value === null || typeof value === 'undefined') {
	    return true;
	  }

	  if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag)) {
	    return true;
	  }

	  if (isCustomComponentTag) {

	    return false;
	  }

	  if (propertyInfo !== null) {

	    switch (propertyInfo.type) {
	      case BOOLEAN:
	        return !value;

	      case OVERLOADED_BOOLEAN:
	        return value === false;

	      case NUMERIC:
	        return isNaN(value);

	      case POSITIVE_NUMERIC:
	        return isNaN(value) || value < 1;
	    }
	  }

	  return false;
	}
	function getPropertyInfo(name) {
	  return properties.hasOwnProperty(name) ? properties[name] : null;
	}

	function PropertyInfoRecord(name, type, mustUseProperty, attributeName, attributeNamespace, sanitizeURL, removeEmptyString) {
	  this.acceptsBooleans = type === BOOLEANISH_STRING || type === BOOLEAN || type === OVERLOADED_BOOLEAN;
	  this.attributeName = attributeName;
	  this.attributeNamespace = attributeNamespace;
	  this.mustUseProperty = mustUseProperty;
	  this.propertyName = name;
	  this.type = type;
	  this.sanitizeURL = sanitizeURL;
	  this.removeEmptyString = removeEmptyString;
	} // When adding attributes to this list, be sure to also add them to
	// the `possibleStandardNames` module to ensure casing and incorrect
	// name warnings.


	var properties = {}; // These props are reserved by React. They shouldn't be written to the DOM.

	var reservedProps = ['children', 'dangerouslySetInnerHTML', // TODO: This prevents the assignment of defaultValue to regular
	// elements (not just inputs). Now that ReactDOMInput assigns to the
	// defaultValue property -- do we need this?
	'defaultValue', 'defaultChecked', 'innerHTML', 'suppressContentEditableWarning', 'suppressHydrationWarning', 'style'];

	reservedProps.forEach(function (name) {
	  properties[name] = new PropertyInfoRecord(name, RESERVED, false, // mustUseProperty
	  name, // attributeName
	  null, // attributeNamespace
	  false, // sanitizeURL
	  false);
	}); // A few React string attributes have a different name.
	// This is a mapping from React prop names to the attribute names.

	[['acceptCharset', 'accept-charset'], ['className', 'class'], ['htmlFor', 'for'], ['httpEquiv', 'http-equiv']].forEach(function (_ref) {
	  var name = _ref[0],
	      attributeName = _ref[1];
	  properties[name] = new PropertyInfoRecord(name, STRING, false, // mustUseProperty
	  attributeName, // attributeName
	  null, // attributeNamespace
	  false, // sanitizeURL
	  false);
	}); // These are "enumerated" HTML attributes that accept "true" and "false".
	// In React, we let users pass `true` and `false` even though technically
	// these aren't boolean attributes (they are coerced to strings).

	['contentEditable', 'draggable', 'spellCheck', 'value'].forEach(function (name) {
	  properties[name] = new PropertyInfoRecord(name, BOOLEANISH_STRING, false, // mustUseProperty
	  name.toLowerCase(), // attributeName
	  null, // attributeNamespace
	  false, // sanitizeURL
	  false);
	}); // These are "enumerated" SVG attributes that accept "true" and "false".
	// In React, we let users pass `true` and `false` even though technically
	// these aren't boolean attributes (they are coerced to strings).
	// Since these are SVG attributes, their attribute names are case-sensitive.

	['autoReverse', 'externalResourcesRequired', 'focusable', 'preserveAlpha'].forEach(function (name) {
	  properties[name] = new PropertyInfoRecord(name, BOOLEANISH_STRING, false, // mustUseProperty
	  name, // attributeName
	  null, // attributeNamespace
	  false, // sanitizeURL
	  false);
	}); // These are HTML boolean attributes.

	['allowFullScreen', 'async', // Note: there is a special case that prevents it from being written to the DOM
	// on the client side because the browsers are inconsistent. Instead we call focus().
	'autoFocus', 'autoPlay', 'controls', 'default', 'defer', 'disabled', 'disablePictureInPicture', 'disableRemotePlayback', 'formNoValidate', 'hidden', 'loop', 'noModule', 'noValidate', 'open', 'playsInline', 'readOnly', 'required', 'reversed', 'scoped', 'seamless', // Microdata
	'itemScope'].forEach(function (name) {
	  properties[name] = new PropertyInfoRecord(name, BOOLEAN, false, // mustUseProperty
	  name.toLowerCase(), // attributeName
	  null, // attributeNamespace
	  false, // sanitizeURL
	  false);
	}); // These are the few React props that we set as DOM properties
	// rather than attributes. These are all booleans.

	['checked', // Note: `option.selected` is not updated if `select.multiple` is
	// disabled with `removeAttribute`. We have special logic for handling this.
	'multiple', 'muted', 'selected' // NOTE: if you add a camelCased prop to this list,
	// you'll need to set attributeName to name.toLowerCase()
	// instead in the assignment below.
	].forEach(function (name) {
	  properties[name] = new PropertyInfoRecord(name, BOOLEAN, true, // mustUseProperty
	  name, // attributeName
	  null, // attributeNamespace
	  false, // sanitizeURL
	  false);
	}); // These are HTML attributes that are "overloaded booleans": they behave like
	// booleans, but can also accept a string value.

	['capture', 'download' // NOTE: if you add a camelCased prop to this list,
	// you'll need to set attributeName to name.toLowerCase()
	// instead in the assignment below.
	].forEach(function (name) {
	  properties[name] = new PropertyInfoRecord(name, OVERLOADED_BOOLEAN, false, // mustUseProperty
	  name, // attributeName
	  null, // attributeNamespace
	  false, // sanitizeURL
	  false);
	}); // These are HTML attributes that must be positive numbers.

	['cols', 'rows', 'size', 'span' // NOTE: if you add a camelCased prop to this list,
	// you'll need to set attributeName to name.toLowerCase()
	// instead in the assignment below.
	].forEach(function (name) {
	  properties[name] = new PropertyInfoRecord(name, POSITIVE_NUMERIC, false, // mustUseProperty
	  name, // attributeName
	  null, // attributeNamespace
	  false, // sanitizeURL
	  false);
	}); // These are HTML attributes that must be numbers.

	['rowSpan', 'start'].forEach(function (name) {
	  properties[name] = new PropertyInfoRecord(name, NUMERIC, false, // mustUseProperty
	  name.toLowerCase(), // attributeName
	  null, // attributeNamespace
	  false, // sanitizeURL
	  false);
	});
	var CAMELIZE = /[\-\:]([a-z])/g;

	var capitalize = function (token) {
	  return token[1].toUpperCase();
	}; // This is a list of all SVG attributes that need special casing, namespacing,
	// or boolean value assignment. Regular attributes that just accept strings
	// and have the same names are omitted, just like in the HTML attribute filter.
	// Some of these attributes can be hard to find. This list was created by
	// scraping the MDN documentation.


	['accent-height', 'alignment-baseline', 'arabic-form', 'baseline-shift', 'cap-height', 'clip-path', 'clip-rule', 'color-interpolation', 'color-interpolation-filters', 'color-profile', 'color-rendering', 'dominant-baseline', 'enable-background', 'fill-opacity', 'fill-rule', 'flood-color', 'flood-opacity', 'font-family', 'font-size', 'font-size-adjust', 'font-stretch', 'font-style', 'font-variant', 'font-weight', 'glyph-name', 'glyph-orientation-horizontal', 'glyph-orientation-vertical', 'horiz-adv-x', 'horiz-origin-x', 'image-rendering', 'letter-spacing', 'lighting-color', 'marker-end', 'marker-mid', 'marker-start', 'overline-position', 'overline-thickness', 'paint-order', 'panose-1', 'pointer-events', 'rendering-intent', 'shape-rendering', 'stop-color', 'stop-opacity', 'strikethrough-position', 'strikethrough-thickness', 'stroke-dasharray', 'stroke-dashoffset', 'stroke-linecap', 'stroke-linejoin', 'stroke-miterlimit', 'stroke-opacity', 'stroke-width', 'text-anchor', 'text-decoration', 'text-rendering', 'underline-position', 'underline-thickness', 'unicode-bidi', 'unicode-range', 'units-per-em', 'v-alphabetic', 'v-hanging', 'v-ideographic', 'v-mathematical', 'vector-effect', 'vert-adv-y', 'vert-origin-x', 'vert-origin-y', 'word-spacing', 'writing-mode', 'xmlns:xlink', 'x-height' // NOTE: if you add a camelCased prop to this list,
	// you'll need to set attributeName to name.toLowerCase()
	// instead in the assignment below.
	].forEach(function (attributeName) {
	  var name = attributeName.replace(CAMELIZE, capitalize);
	  properties[name] = new PropertyInfoRecord(name, STRING, false, // mustUseProperty
	  attributeName, null, // attributeNamespace
	  false, // sanitizeURL
	  false);
	}); // String SVG attributes with the xlink namespace.

	['xlink:actuate', 'xlink:arcrole', 'xlink:role', 'xlink:show', 'xlink:title', 'xlink:type' // NOTE: if you add a camelCased prop to this list,
	// you'll need to set attributeName to name.toLowerCase()
	// instead in the assignment below.
	].forEach(function (attributeName) {
	  var name = attributeName.replace(CAMELIZE, capitalize);
	  properties[name] = new PropertyInfoRecord(name, STRING, false, // mustUseProperty
	  attributeName, 'http://www.w3.org/1999/xlink', false, // sanitizeURL
	  false);
	}); // String SVG attributes with the xml namespace.

	['xml:base', 'xml:lang', 'xml:space' // NOTE: if you add a camelCased prop to this list,
	// you'll need to set attributeName to name.toLowerCase()
	// instead in the assignment below.
	].forEach(function (attributeName) {
	  var name = attributeName.replace(CAMELIZE, capitalize);
	  properties[name] = new PropertyInfoRecord(name, STRING, false, // mustUseProperty
	  attributeName, 'http://www.w3.org/XML/1998/namespace', false, // sanitizeURL
	  false);
	}); // These attribute exists both in HTML and SVG.
	// The attribute name is case-sensitive in SVG so we can't just use
	// the React name like we do for attributes that exist only in HTML.

	['tabIndex', 'crossOrigin'].forEach(function (attributeName) {
	  properties[attributeName] = new PropertyInfoRecord(attributeName, STRING, false, // mustUseProperty
	  attributeName.toLowerCase(), // attributeName
	  null, // attributeNamespace
	  false, // sanitizeURL
	  false);
	}); // These attributes accept URLs. These must not allow javascript: URLS.
	// These will also need to accept Trusted Types object in the future.

	var xlinkHref = 'xlinkHref';
	properties[xlinkHref] = new PropertyInfoRecord('xlinkHref', STRING, false, // mustUseProperty
	'xlink:href', 'http://www.w3.org/1999/xlink', true, // sanitizeURL
	false);
	['src', 'href', 'action', 'formAction'].forEach(function (attributeName) {
	  properties[attributeName] = new PropertyInfoRecord(attributeName, STRING, false, // mustUseProperty
	  attributeName.toLowerCase(), // attributeName
	  null, // attributeNamespace
	  true, // sanitizeURL
	  true);
	});

	// and any newline or tab are filtered out as if they're not part of the URL.
	// https://url.spec.whatwg.org/#url-parsing
	// Tab or newline are defined as \r\n\t:
	// https://infra.spec.whatwg.org/#ascii-tab-or-newline
	// A C0 control is a code point in the range \u0000 NULL to \u001F
	// INFORMATION SEPARATOR ONE, inclusive:
	// https://infra.spec.whatwg.org/#c0-control-or-space

	/* eslint-disable max-len */

	var isJavaScriptProtocol = /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*\:/i;
	var didWarn = false;

	function sanitizeURL(url) {
	  {
	    if (!didWarn && isJavaScriptProtocol.test(url)) {
	      didWarn = true;

	      error('A future version of React will block javascript: URLs as a security precaution. ' + 'Use event handlers instead if you can. If you need to generate unsafe HTML try ' + 'using dangerouslySetInnerHTML instead. React was passed %s.', JSON.stringify(url));
	    }
	  }
	}

	/**
	 * Get the value for a property on a node. Only used in DEV for SSR validation.
	 * The "expected" argument is used as a hint of what the expected value is.
	 * Some properties have multiple equivalent values.
	 */
	function getValueForProperty(node, name, expected, propertyInfo) {
	  {
	    if (propertyInfo.mustUseProperty) {
	      var propertyName = propertyInfo.propertyName;
	      return node[propertyName];
	    } else {
	      // This check protects multiple uses of `expected`, which is why the
	      // react-internal/safe-string-coercion rule is disabled in several spots
	      // below.
	      {
	        checkAttributeStringCoercion(expected, name);
	      }

	      if ( propertyInfo.sanitizeURL) {
	        // If we haven't fully disabled javascript: URLs, and if
	        // the hydration is successful of a javascript: URL, we
	        // still want to warn on the client.
	        // eslint-disable-next-line react-internal/safe-string-coercion
	        sanitizeURL('' + expected);
	      }

	      var attributeName = propertyInfo.attributeName;
	      var stringValue = null;

	      if (propertyInfo.type === OVERLOADED_BOOLEAN) {
	        if (node.hasAttribute(attributeName)) {
	          var value = node.getAttribute(attributeName);

	          if (value === '') {
	            return true;
	          }

	          if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
	            return value;
	          } // eslint-disable-next-line react-internal/safe-string-coercion


	          if (value === '' + expected) {
	            return expected;
	          }

	          return value;
	        }
	      } else if (node.hasAttribute(attributeName)) {
	        if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
	          // We had an attribute but shouldn't have had one, so read it
	          // for the error message.
	          return node.getAttribute(attributeName);
	        }

	        if (propertyInfo.type === BOOLEAN) {
	          // If this was a boolean, it doesn't matter what the value is
	          // the fact that we have it is the same as the expected.
	          return expected;
	        } // Even if this property uses a namespace we use getAttribute
	        // because we assume its namespaced name is the same as our config.
	        // To use getAttributeNS we need the local name which we don't have
	        // in our config atm.


	        stringValue = node.getAttribute(attributeName);
	      }

	      if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
	        return stringValue === null ? expected : stringValue; // eslint-disable-next-line react-internal/safe-string-coercion
	      } else if (stringValue === '' + expected) {
	        return expected;
	      } else {
	        return stringValue;
	      }
	    }
	  }
	}
	/**
	 * Get the value for a attribute on a node. Only used in DEV for SSR validation.
	 * The third argument is used as a hint of what the expected value is. Some
	 * attributes have multiple equivalent values.
	 */

	function getValueForAttribute(node, name, expected, isCustomComponentTag) {
	  {
	    if (!isAttributeNameSafe(name)) {
	      return;
	    }

	    if (!node.hasAttribute(name)) {
	      return expected === undefined ? undefined : null;
	    }

	    var value = node.getAttribute(name);

	    {
	      checkAttributeStringCoercion(expected, name);
	    }

	    if (value === '' + expected) {
	      return expected;
	    }

	    return value;
	  }
	}
	/**
	 * Sets the value for a property on a node.
	 *
	 * @param {DOMElement} node
	 * @param {string} name
	 * @param {*} value
	 */

	function setValueForProperty(node, name, value, isCustomComponentTag) {
	  var propertyInfo = getPropertyInfo(name);

	  if (shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag)) {
	    return;
	  }

	  if (shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag)) {
	    value = null;
	  }


	  if (isCustomComponentTag || propertyInfo === null) {
	    if (isAttributeNameSafe(name)) {
	      var _attributeName = name;

	      if (value === null) {
	        node.removeAttribute(_attributeName);
	      } else {
	        {
	          checkAttributeStringCoercion(value, name);
	        }

	        node.setAttribute(_attributeName,  '' + value);
	      }
	    }

	    return;
	  }

	  var mustUseProperty = propertyInfo.mustUseProperty;

	  if (mustUseProperty) {
	    var propertyName = propertyInfo.propertyName;

	    if (value === null) {
	      var type = propertyInfo.type;
	      node[propertyName] = type === BOOLEAN ? false : '';
	    } else {
	      // Contrary to `setAttribute`, object properties are properly
	      // `toString`ed by IE8/9.
	      node[propertyName] = value;
	    }

	    return;
	  } // The rest are treated as attributes with special cases.


	  var attributeName = propertyInfo.attributeName,
	      attributeNamespace = propertyInfo.attributeNamespace;

	  if (value === null) {
	    node.removeAttribute(attributeName);
	  } else {
	    var _type = propertyInfo.type;
	    var attributeValue;

	    if (_type === BOOLEAN || _type === OVERLOADED_BOOLEAN && value === true) {
	      // If attribute type is boolean, we know for sure it won't be an execution sink
	      // and we won't require Trusted Type here.
	      attributeValue = '';
	    } else {
	      // `setAttribute` with objects becomes only `[object]` in IE8/9,
	      // ('' + value) makes it output the correct toString()-value.
	      {
	        {
	          checkAttributeStringCoercion(value, attributeName);
	        }

	        attributeValue = '' + value;
	      }

	      if (propertyInfo.sanitizeURL) {
	        sanitizeURL(attributeValue.toString());
	      }
	    }

	    if (attributeNamespace) {
	      node.setAttributeNS(attributeNamespace, attributeName, attributeValue);
	    } else {
	      node.setAttribute(attributeName, attributeValue);
	    }
	  }
	}

	// ATTENTION
	// When adding new symbols to this file,
	// Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'
	// The Symbol used to tag the ReactElement-like types.
	var REACT_ELEMENT_TYPE = Symbol.for('react.element');
	var REACT_PORTAL_TYPE = Symbol.for('react.portal');
	var REACT_FRAGMENT_TYPE = Symbol.for('react.fragment');
	var REACT_STRICT_MODE_TYPE = Symbol.for('react.strict_mode');
	var REACT_PROFILER_TYPE = Symbol.for('react.profiler');
	var REACT_PROVIDER_TYPE = Symbol.for('react.provider');
	var REACT_CONTEXT_TYPE = Symbol.for('react.context');
	var REACT_FORWARD_REF_TYPE = Symbol.for('react.forward_ref');
	var REACT_SUSPENSE_TYPE = Symbol.for('react.suspense');
	var REACT_SUSPENSE_LIST_TYPE = Symbol.for('react.suspense_list');
	var REACT_MEMO_TYPE = Symbol.for('react.memo');
	var REACT_LAZY_TYPE = Symbol.for('react.lazy');
	var REACT_SCOPE_TYPE = Symbol.for('react.scope');
	var REACT_DEBUG_TRACING_MODE_TYPE = Symbol.for('react.debug_trace_mode');
	var REACT_OFFSCREEN_TYPE = Symbol.for('react.offscreen');
	var REACT_LEGACY_HIDDEN_TYPE = Symbol.for('react.legacy_hidden');
	var REACT_CACHE_TYPE = Symbol.for('react.cache');
	var REACT_TRACING_MARKER_TYPE = Symbol.for('react.tracing_marker');
	var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
	var FAUX_ITERATOR_SYMBOL = '@@iterator';
	function getIteratorFn(maybeIterable) {
	  if (maybeIterable === null || typeof maybeIterable !== 'object') {
	    return null;
	  }

	  var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];

	  if (typeof maybeIterator === 'function') {
	    return maybeIterator;
	  }

	  return null;
	}

	var assign = Object.assign;

	// Helpers to patch console.logs to avoid logging during side-effect free
	// replaying on render function. This currently only patches the object
	// lazily which won't cover if the log function was extracted eagerly.
	// We could also eagerly patch the method.
	var disabledDepth = 0;
	var prevLog;
	var prevInfo;
	var prevWarn;
	var prevError;
	var prevGroup;
	var prevGroupCollapsed;
	var prevGroupEnd;

	function disabledLog() {}

	disabledLog.__reactDisabledLog = true;
	function disableLogs() {
	  {
	    if (disabledDepth === 0) {
	      /* eslint-disable react-internal/no-production-logging */
	      prevLog = console.log;
	      prevInfo = console.info;
	      prevWarn = console.warn;
	      prevError = console.error;
	      prevGroup = console.group;
	      prevGroupCollapsed = console.groupCollapsed;
	      prevGroupEnd = console.groupEnd; // https://github.com/facebook/react/issues/19099

	      var props = {
	        configurable: true,
	        enumerable: true,
	        value: disabledLog,
	        writable: true
	      }; // $FlowFixMe Flow thinks console is immutable.

	      Object.defineProperties(console, {
	        info: props,
	        log: props,
	        warn: props,
	        error: props,
	        group: props,
	        groupCollapsed: props,
	        groupEnd: props
	      });
	      /* eslint-enable react-internal/no-production-logging */
	    }

	    disabledDepth++;
	  }
	}
	function reenableLogs() {
	  {
	    disabledDepth--;

	    if (disabledDepth === 0) {
	      /* eslint-disable react-internal/no-production-logging */
	      var props = {
	        configurable: true,
	        enumerable: true,
	        writable: true
	      }; // $FlowFixMe Flow thinks console is immutable.

	      Object.defineProperties(console, {
	        log: assign({}, props, {
	          value: prevLog
	        }),
	        info: assign({}, props, {
	          value: prevInfo
	        }),
	        warn: assign({}, props, {
	          value: prevWarn
	        }),
	        error: assign({}, props, {
	          value: prevError
	        }),
	        group: assign({}, props, {
	          value: prevGroup
	        }),
	        groupCollapsed: assign({}, props, {
	          value: prevGroupCollapsed
	        }),
	        groupEnd: assign({}, props, {
	          value: prevGroupEnd
	        })
	      });
	      /* eslint-enable react-internal/no-production-logging */
	    }

	    if (disabledDepth < 0) {
	      error('disabledDepth fell below zero. ' + 'This is a bug in React. Please file an issue.');
	    }
	  }
	}

	var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
	var prefix;
	function describeBuiltInComponentFrame(name, source, ownerFn) {
	  {
	    if (prefix === undefined) {
	      // Extract the VM specific prefix used by each line.
	      try {
	        throw Error();
	      } catch (x) {
	        var match = x.stack.trim().match(/\n( *(at )?)/);
	        prefix = match && match[1] || '';
	      }
	    } // We use the prefix to ensure our stacks line up with native stack frames.


	    return '\n' + prefix + name;
	  }
	}
	var reentry = false;
	var componentFrameCache;

	{
	  var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;
	  componentFrameCache = new PossiblyWeakMap();
	}

	function describeNativeComponentFrame(fn, construct) {
	  // If something asked for a stack inside a fake render, it should get ignored.
	  if ( !fn || reentry) {
	    return '';
	  }

	  {
	    var frame = componentFrameCache.get(fn);

	    if (frame !== undefined) {
	      return frame;
	    }
	  }

	  var control;
	  reentry = true;
	  var previousPrepareStackTrace = Error.prepareStackTrace; // $FlowFixMe It does accept undefined.

	  Error.prepareStackTrace = undefined;
	  var previousDispatcher;

	  {
	    previousDispatcher = ReactCurrentDispatcher.current; // Set the dispatcher in DEV because this might be call in the render function
	    // for warnings.

	    ReactCurrentDispatcher.current = null;
	    disableLogs();
	  }

	  try {
	    // This should throw.
	    if (construct) {
	      // Something should be setting the props in the constructor.
	      var Fake = function () {
	        throw Error();
	      }; // $FlowFixMe


	      Object.defineProperty(Fake.prototype, 'props', {
	        set: function () {
	          // We use a throwing setter instead of frozen or non-writable props
	          // because that won't throw in a non-strict mode function.
	          throw Error();
	        }
	      });

	      if (typeof Reflect === 'object' && Reflect.construct) {
	        // We construct a different control for this case to include any extra
	        // frames added by the construct call.
	        try {
	          Reflect.construct(Fake, []);
	        } catch (x) {
	          control = x;
	        }

	        Reflect.construct(fn, [], Fake);
	      } else {
	        try {
	          Fake.call();
	        } catch (x) {
	          control = x;
	        }

	        fn.call(Fake.prototype);
	      }
	    } else {
	      try {
	        throw Error();
	      } catch (x) {
	        control = x;
	      }

	      fn();
	    }
	  } catch (sample) {
	    // This is inlined manually because closure doesn't do it for us.
	    if (sample && control && typeof sample.stack === 'string') {
	      // This extracts the first frame from the sample that isn't also in the control.
	      // Skipping one frame that we assume is the frame that calls the two.
	      var sampleLines = sample.stack.split('\n');
	      var controlLines = control.stack.split('\n');
	      var s = sampleLines.length - 1;
	      var c = controlLines.length - 1;

	      while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
	        // We expect at least one stack frame to be shared.
	        // Typically this will be the root most one. However, stack frames may be
	        // cut off due to maximum stack limits. In this case, one maybe cut off
	        // earlier than the other. We assume that the sample is longer or the same
	        // and there for cut off earlier. So we should find the root most frame in
	        // the sample somewhere in the control.
	        c--;
	      }

	      for (; s >= 1 && c >= 0; s--, c--) {
	        // Next we find the first one that isn't the same which should be the
	        // frame that called our sample function and the control.
	        if (sampleLines[s] !== controlLines[c]) {
	          // In V8, the first line is describing the message but other VMs don't.
	          // If we're about to return the first line, and the control is also on the same
	          // line, that's a pretty good indicator that our sample threw at same line as
	          // the control. I.e. before we entered the sample frame. So we ignore this result.
	          // This can happen if you passed a class to function component, or non-function.
	          if (s !== 1 || c !== 1) {
	            do {
	              s--;
	              c--; // We may still have similar intermediate frames from the construct call.
	              // The next one that isn't the same should be our match though.

	              if (c < 0 || sampleLines[s] !== controlLines[c]) {
	                // V8 adds a "new" prefix for native classes. Let's remove it to make it prettier.
	                var _frame = '\n' + sampleLines[s].replace(' at new ', ' at '); // If our component frame is labeled "<anonymous>"
	                // but we have a user-provided "displayName"
	                // splice it in to make the stack more readable.


	                if (fn.displayName && _frame.includes('<anonymous>')) {
	                  _frame = _frame.replace('<anonymous>', fn.displayName);
	                }

	                {
	                  if (typeof fn === 'function') {
	                    componentFrameCache.set(fn, _frame);
	                  }
	                } // Return the line we found.


	                return _frame;
	              }
	            } while (s >= 1 && c >= 0);
	          }

	          break;
	        }
	      }
	    }
	  } finally {
	    reentry = false;

	    {
	      ReactCurrentDispatcher.current = previousDispatcher;
	      reenableLogs();
	    }

	    Error.prepareStackTrace = previousPrepareStackTrace;
	  } // Fallback to just using the name if we couldn't make it throw.


	  var name = fn ? fn.displayName || fn.name : '';
	  var syntheticFrame = name ? describeBuiltInComponentFrame(name) : '';

	  {
	    if (typeof fn === 'function') {
	      componentFrameCache.set(fn, syntheticFrame);
	    }
	  }

	  return syntheticFrame;
	}

	function describeClassComponentFrame(ctor, source, ownerFn) {
	  {
	    return describeNativeComponentFrame(ctor, true);
	  }
	}
	function describeFunctionComponentFrame(fn, source, ownerFn) {
	  {
	    return describeNativeComponentFrame(fn, false);
	  }
	}

	function shouldConstruct(Component) {
	  var prototype = Component.prototype;
	  return !!(prototype && prototype.isReactComponent);
	}

	function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {

	  if (type == null) {
	    return '';
	  }

	  if (typeof type === 'function') {
	    {
	      return describeNativeComponentFrame(type, shouldConstruct(type));
	    }
	  }

	  if (typeof type === 'string') {
	    return describeBuiltInComponentFrame(type);
	  }

	  switch (type) {
	    case REACT_SUSPENSE_TYPE:
	      return describeBuiltInComponentFrame('Suspense');

	    case REACT_SUSPENSE_LIST_TYPE:
	      return describeBuiltInComponentFrame('SuspenseList');
	  }

	  if (typeof type === 'object') {
	    switch (type.$$typeof) {
	      case REACT_FORWARD_REF_TYPE:
	        return describeFunctionComponentFrame(type.render);

	      case REACT_MEMO_TYPE:
	        // Memo may contain any component type so we recursively resolve it.
	        return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);

	      case REACT_LAZY_TYPE:
	        {
	          var lazyComponent = type;
	          var payload = lazyComponent._payload;
	          var init = lazyComponent._init;

	          try {
	            // Lazy may contain any component type so we recursively resolve it.
	            return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
	          } catch (x) {}
	        }
	    }
	  }

	  return '';
	}

	function describeFiber(fiber) {
	  fiber._debugOwner ? fiber._debugOwner.type : null ;
	  fiber._debugSource ;

	  switch (fiber.tag) {
	    case HostComponent:
	      return describeBuiltInComponentFrame(fiber.type);

	    case LazyComponent:
	      return describeBuiltInComponentFrame('Lazy');

	    case SuspenseComponent:
	      return describeBuiltInComponentFrame('Suspense');

	    case SuspenseListComponent:
	      return describeBuiltInComponentFrame('SuspenseList');

	    case FunctionComponent:
	    case IndeterminateComponent:
	    case SimpleMemoComponent:
	      return describeFunctionComponentFrame(fiber.type);

	    case ForwardRef:
	      return describeFunctionComponentFrame(fiber.type.render);

	    case ClassComponent:
	      return describeClassComponentFrame(fiber.type);

	    default:
	      return '';
	  }
	}

	function getStackByFiberInDevAndProd(workInProgress) {
	  try {
	    var info = '';
	    var node = workInProgress;

	    do {
	      info += describeFiber(node);
	      node = node.return;
	    } while (node);

	    return info;
	  } catch (x) {
	    return '\nError generating stack: ' + x.message + '\n' + x.stack;
	  }
	}

	function getWrappedName(outerType, innerType, wrapperName) {
	  var displayName = outerType.displayName;

	  if (displayName) {
	    return displayName;
	  }

	  var functionName = innerType.displayName || innerType.name || '';
	  return functionName !== '' ? wrapperName + "(" + functionName + ")" : wrapperName;
	} // Keep in sync with react-reconciler/getComponentNameFromFiber


	function getContextName(type) {
	  return type.displayName || 'Context';
	} // Note that the reconciler package should generally prefer to use getComponentNameFromFiber() instead.


	function getComponentNameFromType(type) {
	  if (type == null) {
	    // Host root, text node or just invalid type.
	    return null;
	  }

	  {
	    if (typeof type.tag === 'number') {
	      error('Received an unexpected object in getComponentNameFromType(). ' + 'This is likely a bug in React. Please file an issue.');
	    }
	  }

	  if (typeof type === 'function') {
	    return type.displayName || type.name || null;
	  }

	  if (typeof type === 'string') {
	    return type;
	  }

	  switch (type) {
	    case REACT_FRAGMENT_TYPE:
	      return 'Fragment';

	    case REACT_PORTAL_TYPE:
	      return 'Portal';

	    case REACT_PROFILER_TYPE:
	      return 'Profiler';

	    case REACT_STRICT_MODE_TYPE:
	      return 'StrictMode';

	    case REACT_SUSPENSE_TYPE:
	      return 'Suspense';

	    case REACT_SUSPENSE_LIST_TYPE:
	      return 'SuspenseList';

	  }

	  if (typeof type === 'object') {
	    switch (type.$$typeof) {
	      case REACT_CONTEXT_TYPE:
	        var context = type;
	        return getContextName(context) + '.Consumer';

	      case REACT_PROVIDER_TYPE:
	        var provider = type;
	        return getContextName(provider._context) + '.Provider';

	      case REACT_FORWARD_REF_TYPE:
	        return getWrappedName(type, type.render, 'ForwardRef');

	      case REACT_MEMO_TYPE:
	        var outerName = type.displayName || null;

	        if (outerName !== null) {
	          return outerName;
	        }

	        return getComponentNameFromType(type.type) || 'Memo';

	      case REACT_LAZY_TYPE:
	        {
	          var lazyComponent = type;
	          var payload = lazyComponent._payload;
	          var init = lazyComponent._init;

	          try {
	            return getComponentNameFromType(init(payload));
	          } catch (x) {
	            return null;
	          }
	        }

	      // eslint-disable-next-line no-fallthrough
	    }
	  }

	  return null;
	}

	function getWrappedName$1(outerType, innerType, wrapperName) {
	  var functionName = innerType.displayName || innerType.name || '';
	  return outerType.displayName || (functionName !== '' ? wrapperName + "(" + functionName + ")" : wrapperName);
	} // Keep in sync with shared/getComponentNameFromType


	function getContextName$1(type) {
	  return type.displayName || 'Context';
	}

	function getComponentNameFromFiber(fiber) {
	  var tag = fiber.tag,
	      type = fiber.type;

	  switch (tag) {
	    case CacheComponent:
	      return 'Cache';

	    case ContextConsumer:
	      var context = type;
	      return getContextName$1(context) + '.Consumer';

	    case ContextProvider:
	      var provider = type;
	      return getContextName$1(provider._context) + '.Provider';

	    case DehydratedFragment:
	      return 'DehydratedFragment';

	    case ForwardRef:
	      return getWrappedName$1(type, type.render, 'ForwardRef');

	    case Fragment:
	      return 'Fragment';

	    case HostComponent:
	      // Host component type is the display name (e.g. "div", "View")
	      return type;

	    case HostPortal:
	      return 'Portal';

	    case HostRoot:
	      return 'Root';

	    case HostText:
	      return 'Text';

	    case LazyComponent:
	      // Name comes from the type in this case; we don't have a tag.
	      return getComponentNameFromType(type);

	    case Mode:
	      if (type === REACT_STRICT_MODE_TYPE) {
	        // Don't be less specific than shared/getComponentNameFromType
	        return 'StrictMode';
	      }

	      return 'Mode';

	    case OffscreenComponent:
	      return 'Offscreen';

	    case Profiler:
	      return 'Profiler';

	    case ScopeComponent:
	      return 'Scope';

	    case SuspenseComponent:
	      return 'Suspense';

	    case SuspenseListComponent:
	      return 'SuspenseList';

	    case TracingMarkerComponent:
	      return 'TracingMarker';
	    // The display name for this tags come from the user-provided type:

	    case ClassComponent:
	    case FunctionComponent:
	    case IncompleteClassComponent:
	    case IndeterminateComponent:
	    case MemoComponent:
	    case SimpleMemoComponent:
	      if (typeof type === 'function') {
	        return type.displayName || type.name || null;
	      }

	      if (typeof type === 'string') {
	        return type;
	      }

	      break;

	  }

	  return null;
	}

	var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
	var current = null;
	var isRendering = false;
	function getCurrentFiberOwnerNameInDevOrNull() {
	  {
	    if (current === null) {
	      return null;
	    }

	    var owner = current._debugOwner;

	    if (owner !== null && typeof owner !== 'undefined') {
	      return getComponentNameFromFiber(owner);
	    }
	  }

	  return null;
	}

	function getCurrentFiberStackInDev() {
	  {
	    if (current === null) {
	      return '';
	    } // Safe because if current fiber exists, we are reconciling,
	    // and it is guaranteed to be the work-in-progress version.


	    return getStackByFiberInDevAndProd(current);
	  }
	}

	function resetCurrentFiber() {
	  {
	    ReactDebugCurrentFrame.getCurrentStack = null;
	    current = null;
	    isRendering = false;
	  }
	}
	function setCurrentFiber(fiber) {
	  {
	    ReactDebugCurrentFrame.getCurrentStack = fiber === null ? null : getCurrentFiberStackInDev;
	    current = fiber;
	    isRendering = false;
	  }
	}
	function getCurrentFiber() {
	  {
	    return current;
	  }
	}
	function setIsRendering(rendering) {
	  {
	    isRendering = rendering;
	  }
	}

	// Flow does not allow string concatenation of most non-string types. To work
	// around this limitation, we use an opaque type that can only be obtained by
	// passing the value through getToStringValue first.
	function toString(value) {
	  // The coercion safety check is performed in getToStringValue().
	  // eslint-disable-next-line react-internal/safe-string-coercion
	  return '' + value;
	}
	function getToStringValue(value) {
	  switch (typeof value) {
	    case 'boolean':
	    case 'number':
	    case 'string':
	    case 'undefined':
	      return value;

	    case 'object':
	      {
	        checkFormFieldValueStringCoercion(value);
	      }

	      return value;

	    default:
	      // function, symbol are assigned as empty strings
	      return '';
	  }
	}

	var hasReadOnlyValue = {
	  button: true,
	  checkbox: true,
	  image: true,
	  hidden: true,
	  radio: true,
	  reset: true,
	  submit: true
	};
	function checkControlledValueProps(tagName, props) {
	  {
	    if (!(hasReadOnlyValue[props.type] || props.onChange || props.onInput || props.readOnly || props.disabled || props.value == null)) {
	      error('You provided a `value` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultValue`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
	    }

	    if (!(props.onChange || props.readOnly || props.disabled || props.checked == null)) {
	      error('You provided a `checked` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultChecked`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
	    }
	  }
	}

	function isCheckable(elem) {
	  var type = elem.type;
	  var nodeName = elem.nodeName;
	  return nodeName && nodeName.toLowerCase() === 'input' && (type === 'checkbox' || type === 'radio');
	}

	function getTracker(node) {
	  return node._valueTracker;
	}

	function detachTracker(node) {
	  node._valueTracker = null;
	}

	function getValueFromNode(node) {
	  var value = '';

	  if (!node) {
	    return value;
	  }

	  if (isCheckable(node)) {
	    value = node.checked ? 'true' : 'false';
	  } else {
	    value = node.value;
	  }

	  return value;
	}

	function trackValueOnNode(node) {
	  var valueField = isCheckable(node) ? 'checked' : 'value';
	  var descriptor = Object.getOwnPropertyDescriptor(node.constructor.prototype, valueField);

	  {
	    checkFormFieldValueStringCoercion(node[valueField]);
	  }

	  var currentValue = '' + node[valueField]; // if someone has already defined a value or Safari, then bail
	  // and don't track value will cause over reporting of changes,
	  // but it's better then a hard failure
	  // (needed for certain tests that spyOn input values and Safari)

	  if (node.hasOwnProperty(valueField) || typeof descriptor === 'undefined' || typeof descriptor.get !== 'function' || typeof descriptor.set !== 'function') {
	    return;
	  }

	  var get = descriptor.get,
	      set = descriptor.set;
	  Object.defineProperty(node, valueField, {
	    configurable: true,
	    get: function () {
	      return get.call(this);
	    },
	    set: function (value) {
	      {
	        checkFormFieldValueStringCoercion(value);
	      }

	      currentValue = '' + value;
	      set.call(this, value);
	    }
	  }); // We could've passed this the first time
	  // but it triggers a bug in IE11 and Edge 14/15.
	  // Calling defineProperty() again should be equivalent.
	  // https://github.com/facebook/react/issues/11768

	  Object.defineProperty(node, valueField, {
	    enumerable: descriptor.enumerable
	  });
	  var tracker = {
	    getValue: function () {
	      return currentValue;
	    },
	    setValue: function (value) {
	      {
	        checkFormFieldValueStringCoercion(value);
	      }

	      currentValue = '' + value;
	    },
	    stopTracking: function () {
	      detachTracker(node);
	      delete node[valueField];
	    }
	  };
	  return tracker;
	}

	function track(node) {
	  if (getTracker(node)) {
	    return;
	  } // TODO: Once it's just Fiber we can move this to node._wrapperState


	  node._valueTracker = trackValueOnNode(node);
	}
	function updateValueIfChanged(node) {
	  if (!node) {
	    return false;
	  }

	  var tracker = getTracker(node); // if there is no tracker at this point it's unlikely
	  // that trying again will succeed

	  if (!tracker) {
	    return true;
	  }

	  var lastValue = tracker.getValue();
	  var nextValue = getValueFromNode(node);

	  if (nextValue !== lastValue) {
	    tracker.setValue(nextValue);
	    return true;
	  }

	  return false;
	}

	function getActiveElement(doc) {
	  doc = doc || (typeof document !== 'undefined' ? document : undefined);

	  if (typeof doc === 'undefined') {
	    return null;
	  }

	  try {
	    return doc.activeElement || doc.body;
	  } catch (e) {
	    return doc.body;
	  }
	}

	var didWarnValueDefaultValue = false;
	var didWarnCheckedDefaultChecked = false;
	var didWarnControlledToUncontrolled = false;
	var didWarnUncontrolledToControlled = false;

	function isControlled(props) {
	  var usesChecked = props.type === 'checkbox' || props.type === 'radio';
	  return usesChecked ? props.checked != null : props.value != null;
	}
	/**
	 * Implements an <input> host component that allows setting these optional
	 * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.
	 *
	 * If `checked` or `value` are not supplied (or null/undefined), user actions
	 * that affect the checked state or value will trigger updates to the element.
	 *
	 * If they are supplied (and not null/undefined), the rendered element will not
	 * trigger updates to the element. Instead, the props must change in order for
	 * the rendered element to be updated.
	 *
	 * The rendered element will be initialized as unchecked (or `defaultChecked`)
	 * with an empty value (or `defaultValue`).
	 *
	 * See http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html
	 */


	function getHostProps(element, props) {
	  var node = element;
	  var checked = props.checked;
	  var hostProps = assign({}, props, {
	    defaultChecked: undefined,
	    defaultValue: undefined,
	    value: undefined,
	    checked: checked != null ? checked : node._wrapperState.initialChecked
	  });
	  return hostProps;
	}
	function initWrapperState(element, props) {
	  {
	    checkControlledValueProps('input', props);

	    if (props.checked !== undefined && props.defaultChecked !== undefined && !didWarnCheckedDefaultChecked) {
	      error('%s contains an input of type %s with both checked and defaultChecked props. ' + 'Input elements must be either controlled or uncontrolled ' + '(specify either the checked prop, or the defaultChecked prop, but not ' + 'both). Decide between using a controlled or uncontrolled input ' + 'element and remove one of these props. More info: ' + 'https://reactjs.org/link/controlled-components', getCurrentFiberOwnerNameInDevOrNull() || 'A component', props.type);

	      didWarnCheckedDefaultChecked = true;
	    }

	    if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue) {
	      error('%s contains an input of type %s with both value and defaultValue props. ' + 'Input elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled input ' + 'element and remove one of these props. More info: ' + 'https://reactjs.org/link/controlled-components', getCurrentFiberOwnerNameInDevOrNull() || 'A component', props.type);

	      didWarnValueDefaultValue = true;
	    }
	  }

	  var node = element;
	  var defaultValue = props.defaultValue == null ? '' : props.defaultValue;
	  node._wrapperState = {
	    initialChecked: props.checked != null ? props.checked : props.defaultChecked,
	    initialValue: getToStringValue(props.value != null ? props.value : defaultValue),
	    controlled: isControlled(props)
	  };
	}
	function updateChecked(element, props) {
	  var node = element;
	  var checked = props.checked;

	  if (checked != null) {
	    setValueForProperty(node, 'checked', checked, false);
	  }
	}
	function updateWrapper(element, props) {
	  var node = element;

	  {
	    var controlled = isControlled(props);

	    if (!node._wrapperState.controlled && controlled && !didWarnUncontrolledToControlled) {
	      error('A component is changing an uncontrolled input to be controlled. ' + 'This is likely caused by the value changing from undefined to ' + 'a defined value, which should not happen. ' + 'Decide between using a controlled or uncontrolled input ' + 'element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components');

	      didWarnUncontrolledToControlled = true;
	    }

	    if (node._wrapperState.controlled && !controlled && !didWarnControlledToUncontrolled) {
	      error('A component is changing a controlled input to be uncontrolled. ' + 'This is likely caused by the value changing from a defined to ' + 'undefined, which should not happen. ' + 'Decide between using a controlled or uncontrolled input ' + 'element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components');

	      didWarnControlledToUncontrolled = true;
	    }
	  }

	  updateChecked(element, props);
	  var value = getToStringValue(props.value);
	  var type = props.type;

	  if (value != null) {
	    if (type === 'number') {
	      if (value === 0 && node.value === '' || // We explicitly want to coerce to number here if possible.
	      // eslint-disable-next-line
	      node.value != value) {
	        node.value = toString(value);
	      }
	    } else if (node.value !== toString(value)) {
	      node.value = toString(value);
	    }
	  } else if (type === 'submit' || type === 'reset') {
	    // Submit/reset inputs need the attribute removed completely to avoid
	    // blank-text buttons.
	    node.removeAttribute('value');
	    return;
	  }

	  {
	    // When syncing the value attribute, the value comes from a cascade of
	    // properties:
	    //  1. The value React property
	    //  2. The defaultValue React property
	    //  3. Otherwise there should be no change
	    if (props.hasOwnProperty('value')) {
	      setDefaultValue(node, props.type, value);
	    } else if (props.hasOwnProperty('defaultValue')) {
	      setDefaultValue(node, props.type, getToStringValue(props.defaultValue));
	    }
	  }

	  {
	    // When syncing the checked attribute, it only changes when it needs
	    // to be removed, such as transitioning from a checkbox into a text input
	    if (props.checked == null && props.defaultChecked != null) {
	      node.defaultChecked = !!props.defaultChecked;
	    }
	  }
	}
	function postMountWrapper(element, props, isHydrating) {
	  var node = element; // Do not assign value if it is already set. This prevents user text input
	  // from being lost during SSR hydration.

	  if (props.hasOwnProperty('value') || props.hasOwnProperty('defaultValue')) {
	    var type = props.type;
	    var isButton = type === 'submit' || type === 'reset'; // Avoid setting value attribute on submit/reset inputs as it overrides the
	    // default value provided by the browser. See: #12872

	    if (isButton && (props.value === undefined || props.value === null)) {
	      return;
	    }

	    var initialValue = toString(node._wrapperState.initialValue); // Do not assign value if it is already set. This prevents user text input
	    // from being lost during SSR hydration.

	    if (!isHydrating) {
	      {
	        // When syncing the value attribute, the value property should use
	        // the wrapperState._initialValue property. This uses:
	        //
	        //   1. The value React property when present
	        //   2. The defaultValue React property when present
	        //   3. An empty string
	        if (initialValue !== node.value) {
	          node.value = initialValue;
	        }
	      }
	    }

	    {
	      // Otherwise, the value attribute is synchronized to the property,
	      // so we assign defaultValue to the same thing as the value property
	      // assignment step above.
	      node.defaultValue = initialValue;
	    }
	  } // Normally, we'd just do `node.checked = node.checked` upon initial mount, less this bug
	  // this is needed to work around a chrome bug where setting defaultChecked
	  // will sometimes influence the value of checked (even after detachment).
	  // Reference: https://bugs.chromium.org/p/chromium/issues/detail?id=608416
	  // We need to temporarily unset name to avoid disrupting radio button groups.


	  var name = node.name;

	  if (name !== '') {
	    node.name = '';
	  }

	  {
	    // When syncing the checked attribute, both the checked property and
	    // attribute are assigned at the same time using defaultChecked. This uses:
	    //
	    //   1. The checked React property when present
	    //   2. The defaultChecked React property when present
	    //   3. Otherwise, false
	    node.defaultChecked = !node.defaultChecked;
	    node.defaultChecked = !!node._wrapperState.initialChecked;
	  }

	  if (name !== '') {
	    node.name = name;
	  }
	}
	function restoreControlledState(element, props) {
	  var node = element;
	  updateWrapper(node, props);
	  updateNamedCousins(node, props);
	}

	function updateNamedCousins(rootNode, props) {
	  var name = props.name;

	  if (props.type === 'radio' && name != null) {
	    var queryRoot = rootNode;

	    while (queryRoot.parentNode) {
	      queryRoot = queryRoot.parentNode;
	    } // If `rootNode.form` was non-null, then we could try `form.elements`,
	    // but that sometimes behaves strangely in IE8. We could also try using
	    // `form.getElementsByName`, but that will only return direct children
	    // and won't include inputs that use the HTML5 `form=` attribute. Since
	    // the input might not even be in a form. It might not even be in the
	    // document. Let's just use the local `querySelectorAll` to ensure we don't
	    // miss anything.


	    {
	      checkAttributeStringCoercion(name, 'name');
	    }

	    var group = queryRoot.querySelectorAll('input[name=' + JSON.stringify('' + name) + '][type="radio"]');

	    for (var i = 0; i < group.length; i++) {
	      var otherNode = group[i];

	      if (otherNode === rootNode || otherNode.form !== rootNode.form) {
	        continue;
	      } // This will throw if radio buttons rendered by different copies of React
	      // and the same name are rendered into the same form (same as #1939).
	      // That's probably okay; we don't support it just as we don't support
	      // mixing React radio buttons with non-React ones.


	      var otherProps = getFiberCurrentPropsFromNode(otherNode);

	      if (!otherProps) {
	        throw new Error('ReactDOMInput: Mixing React and non-React radio inputs with the ' + 'same `name` is not supported.');
	      } // We need update the tracked value on the named cousin since the value
	      // was changed but the input saw no event or value set


	      updateValueIfChanged(otherNode); // If this is a controlled radio button group, forcing the input that
	      // was previously checked to update will cause it to be come re-checked
	      // as appropriate.

	      updateWrapper(otherNode, otherProps);
	    }
	  }
	} // In Chrome, assigning defaultValue to certain input types triggers input validation.
	// For number inputs, the display value loses trailing decimal points. For email inputs,
	// Chrome raises "The specified value <x> is not a valid email address".
	//
	// Here we check to see if the defaultValue has actually changed, avoiding these problems
	// when the user is inputting text
	//
	// https://github.com/facebook/react/issues/7253


	function setDefaultValue(node, type, value) {
	  if ( // Focused number inputs synchronize on blur. See ChangeEventPlugin.js
	  type !== 'number' || getActiveElement(node.ownerDocument) !== node) {
	    if (value == null) {
	      node.defaultValue = toString(node._wrapperState.initialValue);
	    } else if (node.defaultValue !== toString(value)) {
	      node.defaultValue = toString(value);
	    }
	  }
	}

	var didWarnSelectedSetOnOption = false;
	var didWarnInvalidChild = false;
	var didWarnInvalidInnerHTML = false;
	/**
	 * Implements an <option> host component that warns when `selected` is set.
	 */

	function validateProps(element, props) {
	  {
	    // If a value is not provided, then the children must be simple.
	    if (props.value == null) {
	      if (typeof props.children === 'object' && props.children !== null) {
	        React.Children.forEach(props.children, function (child) {
	          if (child == null) {
	            return;
	          }

	          if (typeof child === 'string' || typeof child === 'number') {
	            return;
	          }

	          if (!didWarnInvalidChild) {
	            didWarnInvalidChild = true;

	            error('Cannot infer the option value of complex children. ' + 'Pass a `value` prop or use a plain string as children to <option>.');
	          }
	        });
	      } else if (props.dangerouslySetInnerHTML != null) {
	        if (!didWarnInvalidInnerHTML) {
	          didWarnInvalidInnerHTML = true;

	          error('Pass a `value` prop if you set dangerouslyInnerHTML so React knows ' + 'which value should be selected.');
	        }
	      }
	    } // TODO: Remove support for `selected` in <option>.


	    if (props.selected != null && !didWarnSelectedSetOnOption) {
	      error('Use the `defaultValue` or `value` props on <select> instead of ' + 'setting `selected` on <option>.');

	      didWarnSelectedSetOnOption = true;
	    }
	  }
	}
	function postMountWrapper$1(element, props) {
	  // value="" should make a value attribute (#6219)
	  if (props.value != null) {
	    element.setAttribute('value', toString(getToStringValue(props.value)));
	  }
	}

	var isArrayImpl = Array.isArray; // eslint-disable-next-line no-redeclare

	function isArray(a) {
	  return isArrayImpl(a);
	}

	var didWarnValueDefaultValue$1;

	{
	  didWarnValueDefaultValue$1 = false;
	}

	function getDeclarationErrorAddendum() {
	  var ownerName = getCurrentFiberOwnerNameInDevOrNull();

	  if (ownerName) {
	    return '\n\nCheck the render method of `' + ownerName + '`.';
	  }

	  return '';
	}

	var valuePropNames = ['value', 'defaultValue'];
	/**
	 * Validation function for `value` and `defaultValue`.
	 */

	function checkSelectPropTypes(props) {
	  {
	    checkControlledValueProps('select', props);

	    for (var i = 0; i < valuePropNames.length; i++) {
	      var propName = valuePropNames[i];

	      if (props[propName] == null) {
	        continue;
	      }

	      var propNameIsArray = isArray(props[propName]);

	      if (props.multiple && !propNameIsArray) {
	        error('The `%s` prop supplied to <select> must be an array if ' + '`multiple` is true.%s', propName, getDeclarationErrorAddendum());
	      } else if (!props.multiple && propNameIsArray) {
	        error('The `%s` prop supplied to <select> must be a scalar ' + 'value if `multiple` is false.%s', propName, getDeclarationErrorAddendum());
	      }
	    }
	  }
	}

	function updateOptions(node, multiple, propValue, setDefaultSelected) {
	  var options = node.options;

	  if (multiple) {
	    var selectedValues = propValue;
	    var selectedValue = {};

	    for (var i = 0; i < selectedValues.length; i++) {
	      // Prefix to avoid chaos with special keys.
	      selectedValue['$' + selectedValues[i]] = true;
	    }

	    for (var _i = 0; _i < options.length; _i++) {
	      var selected = selectedValue.hasOwnProperty('$' + options[_i].value);

	      if (options[_i].selected !== selected) {
	        options[_i].selected = selected;
	      }

	      if (selected && setDefaultSelected) {
	        options[_i].defaultSelected = true;
	      }
	    }
	  } else {
	    // Do not set `select.value` as exact behavior isn't consistent across all
	    // browsers for all cases.
	    var _selectedValue = toString(getToStringValue(propValue));

	    var defaultSelected = null;

	    for (var _i2 = 0; _i2 < options.length; _i2++) {
	      if (options[_i2].value === _selectedValue) {
	        options[_i2].selected = true;

	        if (setDefaultSelected) {
	          options[_i2].defaultSelected = true;
	        }

	        return;
	      }

	      if (defaultSelected === null && !options[_i2].disabled) {
	        defaultSelected = options[_i2];
	      }
	    }

	    if (defaultSelected !== null) {
	      defaultSelected.selected = true;
	    }
	  }
	}
	/**
	 * Implements a <select> host component that allows optionally setting the
	 * props `value` and `defaultValue`. If `multiple` is false, the prop must be a
	 * stringable. If `multiple` is true, the prop must be an array of stringables.
	 *
	 * If `value` is not supplied (or null/undefined), user actions that change the
	 * selected option will trigger updates to the rendered options.
	 *
	 * If it is supplied (and not null/undefined), the rendered options will not
	 * update in response to user actions. Instead, the `value` prop must change in
	 * order for the rendered options to update.
	 *
	 * If `defaultValue` is provided, any options with the supplied values will be
	 * selected.
	 */


	function getHostProps$1(element, props) {
	  return assign({}, props, {
	    value: undefined
	  });
	}
	function initWrapperState$1(element, props) {
	  var node = element;

	  {
	    checkSelectPropTypes(props);
	  }

	  node._wrapperState = {
	    wasMultiple: !!props.multiple
	  };

	  {
	    if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue$1) {
	      error('Select elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled select ' + 'element and remove one of these props. More info: ' + 'https://reactjs.org/link/controlled-components');

	      didWarnValueDefaultValue$1 = true;
	    }
	  }
	}
	function postMountWrapper$2(element, props) {
	  var node = element;
	  node.multiple = !!props.multiple;
	  var value = props.value;

	  if (value != null) {
	    updateOptions(node, !!props.multiple, value, false);
	  } else if (props.defaultValue != null) {
	    updateOptions(node, !!props.multiple, props.defaultValue, true);
	  }
	}
	function postUpdateWrapper(element, props) {
	  var node = element;
	  var wasMultiple = node._wrapperState.wasMultiple;
	  node._wrapperState.wasMultiple = !!props.multiple;
	  var value = props.value;

	  if (value != null) {
	    updateOptions(node, !!props.multiple, value, false);
	  } else if (wasMultiple !== !!props.multiple) {
	    // For simplicity, reapply `defaultValue` if `multiple` is toggled.
	    if (props.defaultValue != null) {
	      updateOptions(node, !!props.multiple, props.defaultValue, true);
	    } else {
	      // Revert the select back to its default unselected state.
	      updateOptions(node, !!props.multiple, props.multiple ? [] : '', false);
	    }
	  }
	}
	function restoreControlledState$1(element, props) {
	  var node = element;
	  var value = props.value;

	  if (value != null) {
	    updateOptions(node, !!props.multiple, value, false);
	  }
	}

	var didWarnValDefaultVal = false;

	/**
	 * Implements a <textarea> host component that allows setting `value`, and
	 * `defaultValue`. This differs from the traditional DOM API because value is
	 * usually set as PCDATA children.
	 *
	 * If `value` is not supplied (or null/undefined), user actions that affect the
	 * value will trigger updates to the element.
	 *
	 * If `value` is supplied (and not null/undefined), the rendered element will
	 * not trigger updates to the element. Instead, the `value` prop must change in
	 * order for the rendered element to be updated.
	 *
	 * The rendered element will be initialized with an empty value, the prop
	 * `defaultValue` if specified, or the children content (deprecated).
	 */
	function getHostProps$2(element, props) {
	  var node = element;

	  if (props.dangerouslySetInnerHTML != null) {
	    throw new Error('`dangerouslySetInnerHTML` does not make sense on <textarea>.');
	  } // Always set children to the same thing. In IE9, the selection range will
	  // get reset if `textContent` is mutated.  We could add a check in setTextContent
	  // to only set the value if/when the value differs from the node value (which would
	  // completely solve this IE9 bug), but Sebastian+Sophie seemed to like this
	  // solution. The value can be a boolean or object so that's why it's forced
	  // to be a string.


	  var hostProps = assign({}, props, {
	    value: undefined,
	    defaultValue: undefined,
	    children: toString(node._wrapperState.initialValue)
	  });

	  return hostProps;
	}
	function initWrapperState$2(element, props) {
	  var node = element;

	  {
	    checkControlledValueProps('textarea', props);

	    if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValDefaultVal) {
	      error('%s contains a textarea with both value and defaultValue props. ' + 'Textarea elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled textarea ' + 'and remove one of these props. More info: ' + 'https://reactjs.org/link/controlled-components', getCurrentFiberOwnerNameInDevOrNull() || 'A component');

	      didWarnValDefaultVal = true;
	    }
	  }

	  var initialValue = props.value; // Only bother fetching default value if we're going to use it

	  if (initialValue == null) {
	    var children = props.children,
	        defaultValue = props.defaultValue;

	    if (children != null) {
	      {
	        error('Use the `defaultValue` or `value` props instead of setting ' + 'children on <textarea>.');
	      }

	      {
	        if (defaultValue != null) {
	          throw new Error('If you supply `defaultValue` on a <textarea>, do not pass children.');
	        }

	        if (isArray(children)) {
	          if (children.length > 1) {
	            throw new Error('<textarea> can only have at most one child.');
	          }

	          children = children[0];
	        }

	        defaultValue = children;
	      }
	    }

	    if (defaultValue == null) {
	      defaultValue = '';
	    }

	    initialValue = defaultValue;
	  }

	  node._wrapperState = {
	    initialValue: getToStringValue(initialValue)
	  };
	}
	function updateWrapper$1(element, props) {
	  var node = element;
	  var value = getToStringValue(props.value);
	  var defaultValue = getToStringValue(props.defaultValue);

	  if (value != null) {
	    // Cast `value` to a string to ensure the value is set correctly. While
	    // browsers typically do this as necessary, jsdom doesn't.
	    var newValue = toString(value); // To avoid side effects (such as losing text selection), only set value if changed

	    if (newValue !== node.value) {
	      node.value = newValue;
	    }

	    if (props.defaultValue == null && node.defaultValue !== newValue) {
	      node.defaultValue = newValue;
	    }
	  }

	  if (defaultValue != null) {
	    node.defaultValue = toString(defaultValue);
	  }
	}
	function postMountWrapper$3(element, props) {
	  var node = element; // This is in postMount because we need access to the DOM node, which is not
	  // available until after the component has mounted.

	  var textContent = node.textContent; // Only set node.value if textContent is equal to the expected
	  // initial value. In IE10/IE11 there is a bug where the placeholder attribute
	  // will populate textContent as well.
	  // https://developer.microsoft.com/microsoft-edge/platform/issues/101525/

	  if (textContent === node._wrapperState.initialValue) {
	    if (textContent !== '' && textContent !== null) {
	      node.value = textContent;
	    }
	  }
	}
	function restoreControlledState$2(element, props) {
	  // DOM component is still mounted; update
	  updateWrapper$1(element, props);
	}

	var HTML_NAMESPACE = 'http://www.w3.org/1999/xhtml';
	var MATH_NAMESPACE = 'http://www.w3.org/1998/Math/MathML';
	var SVG_NAMESPACE = 'http://www.w3.org/2000/svg'; // Assumes there is no parent namespace.

	function getIntrinsicNamespace(type) {
	  switch (type) {
	    case 'svg':
	      return SVG_NAMESPACE;

	    case 'math':
	      return MATH_NAMESPACE;

	    default:
	      return HTML_NAMESPACE;
	  }
	}
	function getChildNamespace(parentNamespace, type) {
	  if (parentNamespace == null || parentNamespace === HTML_NAMESPACE) {
	    // No (or default) parent namespace: potential entry point.
	    return getIntrinsicNamespace(type);
	  }

	  if (parentNamespace === SVG_NAMESPACE && type === 'foreignObject') {
	    // We're leaving SVG.
	    return HTML_NAMESPACE;
	  } // By default, pass namespace below.


	  return parentNamespace;
	}

	/* globals MSApp */

	/**
	 * Create a function which has 'unsafe' privileges (required by windows8 apps)
	 */
	var createMicrosoftUnsafeLocalFunction = function (func) {
	  if (typeof MSApp !== 'undefined' && MSApp.execUnsafeLocalFunction) {
	    return function (arg0, arg1, arg2, arg3) {
	      MSApp.execUnsafeLocalFunction(function () {
	        return func(arg0, arg1, arg2, arg3);
	      });
	    };
	  } else {
	    return func;
	  }
	};

	var reusableSVGContainer;
	/**
	 * Set the innerHTML property of a node
	 *
	 * @param {DOMElement} node
	 * @param {string} html
	 * @internal
	 */

	var setInnerHTML = createMicrosoftUnsafeLocalFunction(function (node, html) {
	  if (node.namespaceURI === SVG_NAMESPACE) {

	    if (!('innerHTML' in node)) {
	      // IE does not have innerHTML for SVG nodes, so instead we inject the
	      // new markup in a temp node and then move the child nodes across into
	      // the target node
	      reusableSVGContainer = reusableSVGContainer || document.createElement('div');
	      reusableSVGContainer.innerHTML = '<svg>' + html.valueOf().toString() + '</svg>';
	      var svgNode = reusableSVGContainer.firstChild;

	      while (node.firstChild) {
	        node.removeChild(node.firstChild);
	      }

	      while (svgNode.firstChild) {
	        node.appendChild(svgNode.firstChild);
	      }

	      return;
	    }
	  }

	  node.innerHTML = html;
	});

	/**
	 * HTML nodeType values that represent the type of the node
	 */
	var ELEMENT_NODE = 1;
	var TEXT_NODE = 3;
	var COMMENT_NODE = 8;
	var DOCUMENT_NODE = 9;
	var DOCUMENT_FRAGMENT_NODE = 11;

	/**
	 * Set the textContent property of a node. For text updates, it's faster
	 * to set the `nodeValue` of the Text node directly instead of using
	 * `.textContent` which will remove the existing node and create a new one.
	 *
	 * @param {DOMElement} node
	 * @param {string} text
	 * @internal
	 */

	var setTextContent = function (node, text) {
	  if (text) {
	    var firstChild = node.firstChild;

	    if (firstChild && firstChild === node.lastChild && firstChild.nodeType === TEXT_NODE) {
	      firstChild.nodeValue = text;
	      return;
	    }
	  }

	  node.textContent = text;
	};

	// List derived from Gecko source code:
	// https://github.com/mozilla/gecko-dev/blob/4e638efc71/layout/style/test/property_database.js
	var shorthandToLonghand = {
	  animation: ['animationDelay', 'animationDirection', 'animationDuration', 'animationFillMode', 'animationIterationCount', 'animationName', 'animationPlayState', 'animationTimingFunction'],
	  background: ['backgroundAttachment', 'backgroundClip', 'backgroundColor', 'backgroundImage', 'backgroundOrigin', 'backgroundPositionX', 'backgroundPositionY', 'backgroundRepeat', 'backgroundSize'],
	  backgroundPosition: ['backgroundPositionX', 'backgroundPositionY'],
	  border: ['borderBottomColor', 'borderBottomStyle', 'borderBottomWidth', 'borderImageOutset', 'borderImageRepeat', 'borderImageSlice', 'borderImageSource', 'borderImageWidth', 'borderLeftColor', 'borderLeftStyle', 'borderLeftWidth', 'borderRightColor', 'borderRightStyle', 'borderRightWidth', 'borderTopColor', 'borderTopStyle', 'borderTopWidth'],
	  borderBlockEnd: ['borderBlockEndColor', 'borderBlockEndStyle', 'borderBlockEndWidth'],
	  borderBlockStart: ['borderBlockStartColor', 'borderBlockStartStyle', 'borderBlockStartWidth'],
	  borderBottom: ['borderBottomColor', 'borderBottomStyle', 'borderBottomWidth'],
	  borderColor: ['borderBottomColor', 'borderLeftColor', 'borderRightColor', 'borderTopColor'],
	  borderImage: ['borderImageOutset', 'borderImageRepeat', 'borderImageSlice', 'borderImageSource', 'borderImageWidth'],
	  borderInlineEnd: ['borderInlineEndColor', 'borderInlineEndStyle', 'borderInlineEndWidth'],
	  borderInlineStart: ['borderInlineStartColor', 'borderInlineStartStyle', 'borderInlineStartWidth'],
	  borderLeft: ['borderLeftColor', 'borderLeftStyle', 'borderLeftWidth'],
	  borderRadius: ['borderBottomLeftRadius', 'borderBottomRightRadius', 'borderTopLeftRadius', 'borderTopRightRadius'],
	  borderRight: ['borderRightColor', 'borderRightStyle', 'borderRightWidth'],
	  borderStyle: ['borderBottomStyle', 'borderLeftStyle', 'borderRightStyle', 'borderTopStyle'],
	  borderTop: ['borderTopColor', 'borderTopStyle', 'borderTopWidth'],
	  borderWidth: ['borderBottomWidth', 'borderLeftWidth', 'borderRightWidth', 'borderTopWidth'],
	  columnRule: ['columnRuleColor', 'columnRuleStyle', 'columnRuleWidth'],
	  columns: ['columnCount', 'columnWidth'],
	  flex: ['flexBasis', 'flexGrow', 'flexShrink'],
	  flexFlow: ['flexDirection', 'flexWrap'],
	  font: ['fontFamily', 'fontFeatureSettings', 'fontKerning', 'fontLanguageOverride', 'fontSize', 'fontSizeAdjust', 'fontStretch', 'fontStyle', 'fontVariant', 'fontVariantAlternates', 'fontVariantCaps', 'fontVariantEastAsian', 'fontVariantLigatures', 'fontVariantNumeric', 'fontVariantPosition', 'fontWeight', 'lineHeight'],
	  fontVariant: ['fontVariantAlternates', 'fontVariantCaps', 'fontVariantEastAsian', 'fontVariantLigatures', 'fontVariantNumeric', 'fontVariantPosition'],
	  gap: ['columnGap', 'rowGap'],
	  grid: ['gridAutoColumns', 'gridAutoFlow', 'gridAutoRows', 'gridTemplateAreas', 'gridTemplateColumns', 'gridTemplateRows'],
	  gridArea: ['gridColumnEnd', 'gridColumnStart', 'gridRowEnd', 'gridRowStart'],
	  gridColumn: ['gridColumnEnd', 'gridColumnStart'],
	  gridColumnGap: ['columnGap'],
	  gridGap: ['columnGap', 'rowGap'],
	  gridRow: ['gridRowEnd', 'gridRowStart'],
	  gridRowGap: ['rowGap'],
	  gridTemplate: ['gridTemplateAreas', 'gridTemplateColumns', 'gridTemplateRows'],
	  listStyle: ['listStyleImage', 'listStylePosition', 'listStyleType'],
	  margin: ['marginBottom', 'marginLeft', 'marginRight', 'marginTop'],
	  marker: ['markerEnd', 'markerMid', 'markerStart'],
	  mask: ['maskClip', 'maskComposite', 'maskImage', 'maskMode', 'maskOrigin', 'maskPositionX', 'maskPositionY', 'maskRepeat', 'maskSize'],
	  maskPosition: ['maskPositionX', 'maskPositionY'],
	  outline: ['outlineColor', 'outlineStyle', 'outlineWidth'],
	  overflow: ['overflowX', 'overflowY'],
	  padding: ['paddingBottom', 'paddingLeft', 'paddingRight', 'paddingTop'],
	  placeContent: ['alignContent', 'justifyContent'],
	  placeItems: ['alignItems', 'justifyItems'],
	  placeSelf: ['alignSelf', 'justifySelf'],
	  textDecoration: ['textDecorationColor', 'textDecorationLine', 'textDecorationStyle'],
	  textEmphasis: ['textEmphasisColor', 'textEmphasisStyle'],
	  transition: ['transitionDelay', 'transitionDuration', 'transitionProperty', 'transitionTimingFunction'],
	  wordWrap: ['overflowWrap']
	};

	/**
	 * CSS properties which accept numbers but are not in units of "px".
	 */
	var isUnitlessNumber = {
	  animationIterationCount: true,
	  aspectRatio: true,
	  borderImageOutset: true,
	  borderImageSlice: true,
	  borderImageWidth: true,
	  boxFlex: true,
	  boxFlexGroup: true,
	  boxOrdinalGroup: true,
	  columnCount: true,
	  columns: true,
	  flex: true,
	  flexGrow: true,
	  flexPositive: true,
	  flexShrink: true,
	  flexNegative: true,
	  flexOrder: true,
	  gridArea: true,
	  gridRow: true,
	  gridRowEnd: true,
	  gridRowSpan: true,
	  gridRowStart: true,
	  gridColumn: true,
	  gridColumnEnd: true,
	  gridColumnSpan: true,
	  gridColumnStart: true,
	  fontWeight: true,
	  lineClamp: true,
	  lineHeight: true,
	  opacity: true,
	  order: true,
	  orphans: true,
	  tabSize: true,
	  widows: true,
	  zIndex: true,
	  zoom: true,
	  // SVG-related properties
	  fillOpacity: true,
	  floodOpacity: true,
	  stopOpacity: true,
	  strokeDasharray: true,
	  strokeDashoffset: true,
	  strokeMiterlimit: true,
	  strokeOpacity: true,
	  strokeWidth: true
	};
	/**
	 * @param {string} prefix vendor-specific prefix, eg: Webkit
	 * @param {string} key style name, eg: transitionDuration
	 * @return {string} style name prefixed with `prefix`, properly camelCased, eg:
	 * WebkitTransitionDuration
	 */

	function prefixKey(prefix, key) {
	  return prefix + key.charAt(0).toUpperCase() + key.substring(1);
	}
	/**
	 * Support style names that may come passed in prefixed by adding permutations
	 * of vendor prefixes.
	 */


	var prefixes = ['Webkit', 'ms', 'Moz', 'O']; // Using Object.keys here, or else the vanilla for-in loop makes IE8 go into an
	// infinite loop, because it iterates over the newly added props too.

	Object.keys(isUnitlessNumber).forEach(function (prop) {
	  prefixes.forEach(function (prefix) {
	    isUnitlessNumber[prefixKey(prefix, prop)] = isUnitlessNumber[prop];
	  });
	});

	/**
	 * Convert a value into the proper css writable value. The style name `name`
	 * should be logical (no hyphens), as specified
	 * in `CSSProperty.isUnitlessNumber`.
	 *
	 * @param {string} name CSS property name such as `topMargin`.
	 * @param {*} value CSS property value such as `10px`.
	 * @return {string} Normalized style value with dimensions applied.
	 */

	function dangerousStyleValue(name, value, isCustomProperty) {
	  // Note that we've removed escapeTextForBrowser() calls here since the
	  // whole string will be escaped when the attribute is injected into
	  // the markup. If you provide unsafe user data here they can inject
	  // arbitrary CSS which may be problematic (I couldn't repro this):
	  // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet
	  // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/
	  // This is not an XSS hole but instead a potential CSS injection issue
	  // which has lead to a greater discussion about how we're going to
	  // trust URLs moving forward. See #2115901
	  var isEmpty = value == null || typeof value === 'boolean' || value === '';

	  if (isEmpty) {
	    return '';
	  }

	  if (!isCustomProperty && typeof value === 'number' && value !== 0 && !(isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name])) {
	    return value + 'px'; // Presumes implicit 'px' suffix for unitless numbers
	  }

	  {
	    checkCSSPropertyStringCoercion(value, name);
	  }

	  return ('' + value).trim();
	}

	var uppercasePattern = /([A-Z])/g;
	var msPattern = /^ms-/;
	/**
	 * Hyphenates a camelcased CSS property name, for example:
	 *
	 *   > hyphenateStyleName('backgroundColor')
	 *   < "background-color"
	 *   > hyphenateStyleName('MozTransition')
	 *   < "-moz-transition"
	 *   > hyphenateStyleName('msTransition')
	 *   < "-ms-transition"
	 *
	 * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix
	 * is converted to `-ms-`.
	 */

	function hyphenateStyleName(name) {
	  return name.replace(uppercasePattern, '-$1').toLowerCase().replace(msPattern, '-ms-');
	}

	var warnValidStyle = function () {};

	{
	  // 'msTransform' is correct, but the other prefixes should be capitalized
	  var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;
	  var msPattern$1 = /^-ms-/;
	  var hyphenPattern = /-(.)/g; // style values shouldn't contain a semicolon

	  var badStyleValueWithSemicolonPattern = /;\s*$/;
	  var warnedStyleNames = {};
	  var warnedStyleValues = {};
	  var warnedForNaNValue = false;
	  var warnedForInfinityValue = false;

	  var camelize = function (string) {
	    return string.replace(hyphenPattern, function (_, character) {
	      return character.toUpperCase();
	    });
	  };

	  var warnHyphenatedStyleName = function (name) {
	    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
	      return;
	    }

	    warnedStyleNames[name] = true;

	    error('Unsupported style property %s. Did you mean %s?', name, // As Andi Smith suggests
	    // (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
	    // is converted to lowercase `ms`.
	    camelize(name.replace(msPattern$1, 'ms-')));
	  };

	  var warnBadVendoredStyleName = function (name) {
	    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
	      return;
	    }

	    warnedStyleNames[name] = true;

	    error('Unsupported vendor-prefixed style property %s. Did you mean %s?', name, name.charAt(0).toUpperCase() + name.slice(1));
	  };

	  var warnStyleValueWithSemicolon = function (name, value) {
	    if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
	      return;
	    }

	    warnedStyleValues[value] = true;

	    error("Style property values shouldn't contain a semicolon. " + 'Try "%s: %s" instead.', name, value.replace(badStyleValueWithSemicolonPattern, ''));
	  };

	  var warnStyleValueIsNaN = function (name, value) {
	    if (warnedForNaNValue) {
	      return;
	    }

	    warnedForNaNValue = true;

	    error('`NaN` is an invalid value for the `%s` css style property.', name);
	  };

	  var warnStyleValueIsInfinity = function (name, value) {
	    if (warnedForInfinityValue) {
	      return;
	    }

	    warnedForInfinityValue = true;

	    error('`Infinity` is an invalid value for the `%s` css style property.', name);
	  };

	  warnValidStyle = function (name, value) {
	    if (name.indexOf('-') > -1) {
	      warnHyphenatedStyleName(name);
	    } else if (badVendoredStyleNamePattern.test(name)) {
	      warnBadVendoredStyleName(name);
	    } else if (badStyleValueWithSemicolonPattern.test(value)) {
	      warnStyleValueWithSemicolon(name, value);
	    }

	    if (typeof value === 'number') {
	      if (isNaN(value)) {
	        warnStyleValueIsNaN(name, value);
	      } else if (!isFinite(value)) {
	        warnStyleValueIsInfinity(name, value);
	      }
	    }
	  };
	}

	var warnValidStyle$1 = warnValidStyle;

	/**
	 * Operations for dealing with CSS properties.
	 */

	/**
	 * This creates a string that is expected to be equivalent to the style
	 * attribute generated by server-side rendering. It by-passes warnings and
	 * security checks so it's not safe to use this value for anything other than
	 * comparison. It is only used in DEV for SSR validation.
	 */

	function createDangerousStringForStyles(styles) {
	  {
	    var serialized = '';
	    var delimiter = '';

	    for (var styleName in styles) {
	      if (!styles.hasOwnProperty(styleName)) {
	        continue;
	      }

	      var styleValue = styles[styleName];

	      if (styleValue != null) {
	        var isCustomProperty = styleName.indexOf('--') === 0;
	        serialized += delimiter + (isCustomProperty ? styleName : hyphenateStyleName(styleName)) + ':';
	        serialized += dangerousStyleValue(styleName, styleValue, isCustomProperty);
	        delimiter = ';';
	      }
	    }

	    return serialized || null;
	  }
	}
	/**
	 * Sets the value for multiple styles on a node.  If a value is specified as
	 * '' (empty string), the corresponding style property will be unset.
	 *
	 * @param {DOMElement} node
	 * @param {object} styles
	 */

	function setValueForStyles(node, styles) {
	  var style = node.style;

	  for (var styleName in styles) {
	    if (!styles.hasOwnProperty(styleName)) {
	      continue;
	    }

	    var isCustomProperty = styleName.indexOf('--') === 0;

	    {
	      if (!isCustomProperty) {
	        warnValidStyle$1(styleName, styles[styleName]);
	      }
	    }

	    var styleValue = dangerousStyleValue(styleName, styles[styleName], isCustomProperty);

	    if (styleName === 'float') {
	      styleName = 'cssFloat';
	    }

	    if (isCustomProperty) {
	      style.setProperty(styleName, styleValue);
	    } else {
	      style[styleName] = styleValue;
	    }
	  }
	}

	function isValueEmpty(value) {
	  return value == null || typeof value === 'boolean' || value === '';
	}
	/**
	 * Given {color: 'red', overflow: 'hidden'} returns {
	 *   color: 'color',
	 *   overflowX: 'overflow',
	 *   overflowY: 'overflow',
	 * }. This can be read as "the overflowY property was set by the overflow
	 * shorthand". That is, the values are the property that each was derived from.
	 */


	function expandShorthandMap(styles) {
	  var expanded = {};

	  for (var key in styles) {
	    var longhands = shorthandToLonghand[key] || [key];

	    for (var i = 0; i < longhands.length; i++) {
	      expanded[longhands[i]] = key;
	    }
	  }

	  return expanded;
	}
	/**
	 * When mixing shorthand and longhand property names, we warn during updates if
	 * we expect an incorrect result to occur. In particular, we warn for:
	 *
	 * Updating a shorthand property (longhand gets overwritten):
	 *   {font: 'foo', fontVariant: 'bar'} -> {font: 'baz', fontVariant: 'bar'}
	 *   becomes .style.font = 'baz'
	 * Removing a shorthand property (longhand gets lost too):
	 *   {font: 'foo', fontVariant: 'bar'} -> {fontVariant: 'bar'}
	 *   becomes .style.font = ''
	 * Removing a longhand property (should revert to shorthand; doesn't):
	 *   {font: 'foo', fontVariant: 'bar'} -> {font: 'foo'}
	 *   becomes .style.fontVariant = ''
	 */


	function validateShorthandPropertyCollisionInDev(styleUpdates, nextStyles) {
	  {
	    if (!nextStyles) {
	      return;
	    }

	    var expandedUpdates = expandShorthandMap(styleUpdates);
	    var expandedStyles = expandShorthandMap(nextStyles);
	    var warnedAbout = {};

	    for (var key in expandedUpdates) {
	      var originalKey = expandedUpdates[key];
	      var correctOriginalKey = expandedStyles[key];

	      if (correctOriginalKey && originalKey !== correctOriginalKey) {
	        var warningKey = originalKey + ',' + correctOriginalKey;

	        if (warnedAbout[warningKey]) {
	          continue;
	        }

	        warnedAbout[warningKey] = true;

	        error('%s a style property during rerender (%s) when a ' + 'conflicting property is set (%s) can lead to styling bugs. To ' + "avoid this, don't mix shorthand and non-shorthand properties " + 'for the same value; instead, replace the shorthand with ' + 'separate values.', isValueEmpty(styleUpdates[originalKey]) ? 'Removing' : 'Updating', originalKey, correctOriginalKey);
	      }
	    }
	  }
	}

	// For HTML, certain tags should omit their close tag. We keep a list for
	// those special-case tags.
	var omittedCloseTags = {
	  area: true,
	  base: true,
	  br: true,
	  col: true,
	  embed: true,
	  hr: true,
	  img: true,
	  input: true,
	  keygen: true,
	  link: true,
	  meta: true,
	  param: true,
	  source: true,
	  track: true,
	  wbr: true // NOTE: menuitem's close tag should be omitted, but that causes problems.

	};

	// `omittedCloseTags` except that `menuitem` should still have its closing tag.

	var voidElementTags = assign({
	  menuitem: true
	}, omittedCloseTags);

	var HTML = '__html';

	function assertValidProps(tag, props) {
	  if (!props) {
	    return;
	  } // Note the use of `==` which checks for null or undefined.


	  if (voidElementTags[tag]) {
	    if (props.children != null || props.dangerouslySetInnerHTML != null) {
	      throw new Error(tag + " is a void element tag and must neither have `children` nor " + 'use `dangerouslySetInnerHTML`.');
	    }
	  }

	  if (props.dangerouslySetInnerHTML != null) {
	    if (props.children != null) {
	      throw new Error('Can only set one of `children` or `props.dangerouslySetInnerHTML`.');
	    }

	    if (typeof props.dangerouslySetInnerHTML !== 'object' || !(HTML in props.dangerouslySetInnerHTML)) {
	      throw new Error('`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. ' + 'Please visit https://reactjs.org/link/dangerously-set-inner-html ' + 'for more information.');
	    }
	  }

	  {
	    if (!props.suppressContentEditableWarning && props.contentEditable && props.children != null) {
	      error('A component is `contentEditable` and contains `children` managed by ' + 'React. It is now your responsibility to guarantee that none of ' + 'those nodes are unexpectedly modified or duplicated. This is ' + 'probably not intentional.');
	    }
	  }

	  if (props.style != null && typeof props.style !== 'object') {
	    throw new Error('The `style` prop expects a mapping from style properties to values, ' + "not a string. For example, style={{marginRight: spacing + 'em'}} when " + 'using JSX.');
	  }
	}

	function isCustomComponent(tagName, props) {
	  if (tagName.indexOf('-') === -1) {
	    return typeof props.is === 'string';
	  }

	  switch (tagName) {
	    // These are reserved SVG and MathML elements.
	    // We don't mind this list too much because we expect it to never grow.
	    // The alternative is to track the namespace in a few places which is convoluted.
	    // https://w3c.github.io/webcomponents/spec/custom/#custom-elements-core-concepts
	    case 'annotation-xml':
	    case 'color-profile':
	    case 'font-face':
	    case 'font-face-src':
	    case 'font-face-uri':
	    case 'font-face-format':
	    case 'font-face-name':
	    case 'missing-glyph':
	      return false;

	    default:
	      return true;
	  }
	}

	// When adding attributes to the HTML or SVG allowed attribute list, be sure to
	// also add them to this module to ensure casing and incorrect name
	// warnings.
	var possibleStandardNames = {
	  // HTML
	  accept: 'accept',
	  acceptcharset: 'acceptCharset',
	  'accept-charset': 'acceptCharset',
	  accesskey: 'accessKey',
	  action: 'action',
	  allowfullscreen: 'allowFullScreen',
	  alt: 'alt',
	  as: 'as',
	  async: 'async',
	  autocapitalize: 'autoCapitalize',
	  autocomplete: 'autoComplete',
	  autocorrect: 'autoCorrect',
	  autofocus: 'autoFocus',
	  autoplay: 'autoPlay',
	  autosave: 'autoSave',
	  capture: 'capture',
	  cellpadding: 'cellPadding',
	  cellspacing: 'cellSpacing',
	  challenge: 'challenge',
	  charset: 'charSet',
	  checked: 'checked',
	  children: 'children',
	  cite: 'cite',
	  class: 'className',
	  classid: 'classID',
	  classname: 'className',
	  cols: 'cols',
	  colspan: 'colSpan',
	  content: 'content',
	  contenteditable: 'contentEditable',
	  contextmenu: 'contextMenu',
	  controls: 'controls',
	  controlslist: 'controlsList',
	  coords: 'coords',
	  crossorigin: 'crossOrigin',
	  dangerouslysetinnerhtml: 'dangerouslySetInnerHTML',
	  data: 'data',
	  datetime: 'dateTime',
	  default: 'default',
	  defaultchecked: 'defaultChecked',
	  defaultvalue: 'defaultValue',
	  defer: 'defer',
	  dir: 'dir',
	  disabled: 'disabled',
	  disablepictureinpicture: 'disablePictureInPicture',
	  disableremoteplayback: 'disableRemotePlayback',
	  download: 'download',
	  draggable: 'draggable',
	  enctype: 'encType',
	  enterkeyhint: 'enterKeyHint',
	  for: 'htmlFor',
	  form: 'form',
	  formmethod: 'formMethod',
	  formaction: 'formAction',
	  formenctype: 'formEncType',
	  formnovalidate: 'formNoValidate',
	  formtarget: 'formTarget',
	  frameborder: 'frameBorder',
	  headers: 'headers',
	  height: 'height',
	  hidden: 'hidden',
	  high: 'high',
	  href: 'href',
	  hreflang: 'hrefLang',
	  htmlfor: 'htmlFor',
	  httpequiv: 'httpEquiv',
	  'http-equiv': 'httpEquiv',
	  icon: 'icon',
	  id: 'id',
	  imagesizes: 'imageSizes',
	  imagesrcset: 'imageSrcSet',
	  innerhtml: 'innerHTML',
	  inputmode: 'inputMode',
	  integrity: 'integrity',
	  is: 'is',
	  itemid: 'itemID',
	  itemprop: 'itemProp',
	  itemref: 'itemRef',
	  itemscope: 'itemScope',
	  itemtype: 'itemType',
	  keyparams: 'keyParams',
	  keytype: 'keyType',
	  kind: 'kind',
	  label: 'label',
	  lang: 'lang',
	  list: 'list',
	  loop: 'loop',
	  low: 'low',
	  manifest: 'manifest',
	  marginwidth: 'marginWidth',
	  marginheight: 'marginHeight',
	  max: 'max',
	  maxlength: 'maxLength',
	  media: 'media',
	  mediagroup: 'mediaGroup',
	  method: 'method',
	  min: 'min',
	  minlength: 'minLength',
	  multiple: 'multiple',
	  muted: 'muted',
	  name: 'name',
	  nomodule: 'noModule',
	  nonce: 'nonce',
	  novalidate: 'noValidate',
	  open: 'open',
	  optimum: 'optimum',
	  pattern: 'pattern',
	  placeholder: 'placeholder',
	  playsinline: 'playsInline',
	  poster: 'poster',
	  preload: 'preload',
	  profile: 'profile',
	  radiogroup: 'radioGroup',
	  readonly: 'readOnly',
	  referrerpolicy: 'referrerPolicy',
	  rel: 'rel',
	  required: 'required',
	  reversed: 'reversed',
	  role: 'role',
	  rows: 'rows',
	  rowspan: 'rowSpan',
	  sandbox: 'sandbox',
	  scope: 'scope',
	  scoped: 'scoped',
	  scrolling: 'scrolling',
	  seamless: 'seamless',
	  selected: 'selected',
	  shape: 'shape',
	  size: 'size',
	  sizes: 'sizes',
	  span: 'span',
	  spellcheck: 'spellCheck',
	  src: 'src',
	  srcdoc: 'srcDoc',
	  srclang: 'srcLang',
	  srcset: 'srcSet',
	  start: 'start',
	  step: 'step',
	  style: 'style',
	  summary: 'summary',
	  tabindex: 'tabIndex',
	  target: 'target',
	  title: 'title',
	  type: 'type',
	  usemap: 'useMap',
	  value: 'value',
	  width: 'width',
	  wmode: 'wmode',
	  wrap: 'wrap',
	  // SVG
	  about: 'about',
	  accentheight: 'accentHeight',
	  'accent-height': 'accentHeight',
	  accumulate: 'accumulate',
	  additive: 'additive',
	  alignmentbaseline: 'alignmentBaseline',
	  'alignment-baseline': 'alignmentBaseline',
	  allowreorder: 'allowReorder',
	  alphabetic: 'alphabetic',
	  amplitude: 'amplitude',
	  arabicform: 'arabicForm',
	  'arabic-form': 'arabicForm',
	  ascent: 'ascent',
	  attributename: 'attributeName',
	  attributetype: 'attributeType',
	  autoreverse: 'autoReverse',
	  azimuth: 'azimuth',
	  basefrequency: 'baseFrequency',
	  baselineshift: 'baselineShift',
	  'baseline-shift': 'baselineShift',
	  baseprofile: 'baseProfile',
	  bbox: 'bbox',
	  begin: 'begin',
	  bias: 'bias',
	  by: 'by',
	  calcmode: 'calcMode',
	  capheight: 'capHeight',
	  'cap-height': 'capHeight',
	  clip: 'clip',
	  clippath: 'clipPath',
	  'clip-path': 'clipPath',
	  clippathunits: 'clipPathUnits',
	  cliprule: 'clipRule',
	  'clip-rule': 'clipRule',
	  color: 'color',
	  colorinterpolation: 'colorInterpolation',
	  'color-interpolation': 'colorInterpolation',
	  colorinterpolationfilters: 'colorInterpolationFilters',
	  'color-interpolation-filters': 'colorInterpolationFilters',
	  colorprofile: 'colorProfile',
	  'color-profile': 'colorProfile',
	  colorrendering: 'colorRendering',
	  'color-rendering': 'colorRendering',
	  contentscripttype: 'contentScriptType',
	  contentstyletype: 'contentStyleType',
	  cursor: 'cursor',
	  cx: 'cx',
	  cy: 'cy',
	  d: 'd',
	  datatype: 'datatype',
	  decelerate: 'decelerate',
	  descent: 'descent',
	  diffuseconstant: 'diffuseConstant',
	  direction: 'direction',
	  display: 'display',
	  divisor: 'divisor',
	  dominantbaseline: 'dominantBaseline',
	  'dominant-baseline': 'dominantBaseline',
	  dur: 'dur',
	  dx: 'dx',
	  dy: 'dy',
	  edgemode: 'edgeMode',
	  elevation: 'elevation',
	  enablebackground: 'enableBackground',
	  'enable-background': 'enableBackground',
	  end: 'end',
	  exponent: 'exponent',
	  externalresourcesrequired: 'externalResourcesRequired',
	  fill: 'fill',
	  fillopacity: 'fillOpacity',
	  'fill-opacity': 'fillOpacity',
	  fillrule: 'fillRule',
	  'fill-rule': 'fillRule',
	  filter: 'filter',
	  filterres: 'filterRes',
	  filterunits: 'filterUnits',
	  floodopacity: 'floodOpacity',
	  'flood-opacity': 'floodOpacity',
	  floodcolor: 'floodColor',
	  'flood-color': 'floodColor',
	  focusable: 'focusable',
	  fontfamily: 'fontFamily',
	  'font-family': 'fontFamily',
	  fontsize: 'fontSize',
	  'font-size': 'fontSize',
	  fontsizeadjust: 'fontSizeAdjust',
	  'font-size-adjust': 'fontSizeAdjust',
	  fontstretch: 'fontStretch',
	  'font-stretch': 'fontStretch',
	  fontstyle: 'fontStyle',
	  'font-style': 'fontStyle',
	  fontvariant: 'fontVariant',
	  'font-variant': 'fontVariant',
	  fontweight: 'fontWeight',
	  'font-weight': 'fontWeight',
	  format: 'format',
	  from: 'from',
	  fx: 'fx',
	  fy: 'fy',
	  g1: 'g1',
	  g2: 'g2',
	  glyphname: 'glyphName',
	  'glyph-name': 'glyphName',
	  glyphorientationhorizontal: 'glyphOrientationHorizontal',
	  'glyph-orientation-horizontal': 'glyphOrientationHorizontal',
	  glyphorientationvertical: 'glyphOrientationVertical',
	  'glyph-orientation-vertical': 'glyphOrientationVertical',
	  glyphref: 'glyphRef',
	  gradienttransform: 'gradientTransform',
	  gradientunits: 'gradientUnits',
	  hanging: 'hanging',
	  horizadvx: 'horizAdvX',
	  'horiz-adv-x': 'horizAdvX',
	  horizoriginx: 'horizOriginX',
	  'horiz-origin-x': 'horizOriginX',
	  ideographic: 'ideographic',
	  imagerendering: 'imageRendering',
	  'image-rendering': 'imageRendering',
	  in2: 'in2',
	  in: 'in',
	  inlist: 'inlist',
	  intercept: 'intercept',
	  k1: 'k1',
	  k2: 'k2',
	  k3: 'k3',
	  k4: 'k4',
	  k: 'k',
	  kernelmatrix: 'kernelMatrix',
	  kernelunitlength: 'kernelUnitLength',
	  kerning: 'kerning',
	  keypoints: 'keyPoints',
	  keysplines: 'keySplines',
	  keytimes: 'keyTimes',
	  lengthadjust: 'lengthAdjust',
	  letterspacing: 'letterSpacing',
	  'letter-spacing': 'letterSpacing',
	  lightingcolor: 'lightingColor',
	  'lighting-color': 'lightingColor',
	  limitingconeangle: 'limitingConeAngle',
	  local: 'local',
	  markerend: 'markerEnd',
	  'marker-end': 'markerEnd',
	  markerheight: 'markerHeight',
	  markermid: 'markerMid',
	  'marker-mid': 'markerMid',
	  markerstart: 'markerStart',
	  'marker-start': 'markerStart',
	  markerunits: 'markerUnits',
	  markerwidth: 'markerWidth',
	  mask: 'mask',
	  maskcontentunits: 'maskContentUnits',
	  maskunits: 'maskUnits',
	  mathematical: 'mathematical',
	  mode: 'mode',
	  numoctaves: 'numOctaves',
	  offset: 'offset',
	  opacity: 'opacity',
	  operator: 'operator',
	  order: 'order',
	  orient: 'orient',
	  orientation: 'orientation',
	  origin: 'origin',
	  overflow: 'overflow',
	  overlineposition: 'overlinePosition',
	  'overline-position': 'overlinePosition',
	  overlinethickness: 'overlineThickness',
	  'overline-thickness': 'overlineThickness',
	  paintorder: 'paintOrder',
	  'paint-order': 'paintOrder',
	  panose1: 'panose1',
	  'panose-1': 'panose1',
	  pathlength: 'pathLength',
	  patterncontentunits: 'patternContentUnits',
	  patterntransform: 'patternTransform',
	  patternunits: 'patternUnits',
	  pointerevents: 'pointerEvents',
	  'pointer-events': 'pointerEvents',
	  points: 'points',
	  pointsatx: 'pointsAtX',
	  pointsaty: 'pointsAtY',
	  pointsatz: 'pointsAtZ',
	  prefix: 'prefix',
	  preservealpha: 'preserveAlpha',
	  preserveaspectratio: 'preserveAspectRatio',
	  primitiveunits: 'primitiveUnits',
	  property: 'property',
	  r: 'r',
	  radius: 'radius',
	  refx: 'refX',
	  refy: 'refY',
	  renderingintent: 'renderingIntent',
	  'rendering-intent': 'renderingIntent',
	  repeatcount: 'repeatCount',
	  repeatdur: 'repeatDur',
	  requiredextensions: 'requiredExtensions',
	  requiredfeatures: 'requiredFeatures',
	  resource: 'resource',
	  restart: 'restart',
	  result: 'result',
	  results: 'results',
	  rotate: 'rotate',
	  rx: 'rx',
	  ry: 'ry',
	  scale: 'scale',
	  security: 'security',
	  seed: 'seed',
	  shaperendering: 'shapeRendering',
	  'shape-rendering': 'shapeRendering',
	  slope: 'slope',
	  spacing: 'spacing',
	  specularconstant: 'specularConstant',
	  specularexponent: 'specularExponent',
	  speed: 'speed',
	  spreadmethod: 'spreadMethod',
	  startoffset: 'startOffset',
	  stddeviation: 'stdDeviation',
	  stemh: 'stemh',
	  stemv: 'stemv',
	  stitchtiles: 'stitchTiles',
	  stopcolor: 'stopColor',
	  'stop-color': 'stopColor',
	  stopopacity: 'stopOpacity',
	  'stop-opacity': 'stopOpacity',
	  strikethroughposition: 'strikethroughPosition',
	  'strikethrough-position': 'strikethroughPosition',
	  strikethroughthickness: 'strikethroughThickness',
	  'strikethrough-thickness': 'strikethroughThickness',
	  string: 'string',
	  stroke: 'stroke',
	  strokedasharray: 'strokeDasharray',
	  'stroke-dasharray': 'strokeDasharray',
	  strokedashoffset: 'strokeDashoffset',
	  'stroke-dashoffset': 'strokeDashoffset',
	  strokelinecap: 'strokeLinecap',
	  'stroke-linecap': 'strokeLinecap',
	  strokelinejoin: 'strokeLinejoin',
	  'stroke-linejoin': 'strokeLinejoin',
	  strokemiterlimit: 'strokeMiterlimit',
	  'stroke-miterlimit': 'strokeMiterlimit',
	  strokewidth: 'strokeWidth',
	  'stroke-width': 'strokeWidth',
	  strokeopacity: 'strokeOpacity',
	  'stroke-opacity': 'strokeOpacity',
	  suppresscontenteditablewarning: 'suppressContentEditableWarning',
	  suppresshydrationwarning: 'suppressHydrationWarning',
	  surfacescale: 'surfaceScale',
	  systemlanguage: 'systemLanguage',
	  tablevalues: 'tableValues',
	  targetx: 'targetX',
	  targety: 'targetY',
	  textanchor: 'textAnchor',
	  'text-anchor': 'textAnchor',
	  textdecoration: 'textDecoration',
	  'text-decoration': 'textDecoration',
	  textlength: 'textLength',
	  textrendering: 'textRendering',
	  'text-rendering': 'textRendering',
	  to: 'to',
	  transform: 'transform',
	  typeof: 'typeof',
	  u1: 'u1',
	  u2: 'u2',
	  underlineposition: 'underlinePosition',
	  'underline-position': 'underlinePosition',
	  underlinethickness: 'underlineThickness',
	  'underline-thickness': 'underlineThickness',
	  unicode: 'unicode',
	  unicodebidi: 'unicodeBidi',
	  'unicode-bidi': 'unicodeBidi',
	  unicoderange: 'unicodeRange',
	  'unicode-range': 'unicodeRange',
	  unitsperem: 'unitsPerEm',
	  'units-per-em': 'unitsPerEm',
	  unselectable: 'unselectable',
	  valphabetic: 'vAlphabetic',
	  'v-alphabetic': 'vAlphabetic',
	  values: 'values',
	  vectoreffect: 'vectorEffect',
	  'vector-effect': 'vectorEffect',
	  version: 'version',
	  vertadvy: 'vertAdvY',
	  'vert-adv-y': 'vertAdvY',
	  vertoriginx: 'vertOriginX',
	  'vert-origin-x': 'vertOriginX',
	  vertoriginy: 'vertOriginY',
	  'vert-origin-y': 'vertOriginY',
	  vhanging: 'vHanging',
	  'v-hanging': 'vHanging',
	  videographic: 'vIdeographic',
	  'v-ideographic': 'vIdeographic',
	  viewbox: 'viewBox',
	  viewtarget: 'viewTarget',
	  visibility: 'visibility',
	  vmathematical: 'vMathematical',
	  'v-mathematical': 'vMathematical',
	  vocab: 'vocab',
	  widths: 'widths',
	  wordspacing: 'wordSpacing',
	  'word-spacing': 'wordSpacing',
	  writingmode: 'writingMode',
	  'writing-mode': 'writingMode',
	  x1: 'x1',
	  x2: 'x2',
	  x: 'x',
	  xchannelselector: 'xChannelSelector',
	  xheight: 'xHeight',
	  'x-height': 'xHeight',
	  xlinkactuate: 'xlinkActuate',
	  'xlink:actuate': 'xlinkActuate',
	  xlinkarcrole: 'xlinkArcrole',
	  'xlink:arcrole': 'xlinkArcrole',
	  xlinkhref: 'xlinkHref',
	  'xlink:href': 'xlinkHref',
	  xlinkrole: 'xlinkRole',
	  'xlink:role': 'xlinkRole',
	  xlinkshow: 'xlinkShow',
	  'xlink:show': 'xlinkShow',
	  xlinktitle: 'xlinkTitle',
	  'xlink:title': 'xlinkTitle',
	  xlinktype: 'xlinkType',
	  'xlink:type': 'xlinkType',
	  xmlbase: 'xmlBase',
	  'xml:base': 'xmlBase',
	  xmllang: 'xmlLang',
	  'xml:lang': 'xmlLang',
	  xmlns: 'xmlns',
	  'xml:space': 'xmlSpace',
	  xmlnsxlink: 'xmlnsXlink',
	  'xmlns:xlink': 'xmlnsXlink',
	  xmlspace: 'xmlSpace',
	  y1: 'y1',
	  y2: 'y2',
	  y: 'y',
	  ychannelselector: 'yChannelSelector',
	  z: 'z',
	  zoomandpan: 'zoomAndPan'
	};

	var ariaProperties = {
	  'aria-current': 0,
	  // state
	  'aria-description': 0,
	  'aria-details': 0,
	  'aria-disabled': 0,
	  // state
	  'aria-hidden': 0,
	  // state
	  'aria-invalid': 0,
	  // state
	  'aria-keyshortcuts': 0,
	  'aria-label': 0,
	  'aria-roledescription': 0,
	  // Widget Attributes
	  'aria-autocomplete': 0,
	  'aria-checked': 0,
	  'aria-expanded': 0,
	  'aria-haspopup': 0,
	  'aria-level': 0,
	  'aria-modal': 0,
	  'aria-multiline': 0,
	  'aria-multiselectable': 0,
	  'aria-orientation': 0,
	  'aria-placeholder': 0,
	  'aria-pressed': 0,
	  'aria-readonly': 0,
	  'aria-required': 0,
	  'aria-selected': 0,
	  'aria-sort': 0,
	  'aria-valuemax': 0,
	  'aria-valuemin': 0,
	  'aria-valuenow': 0,
	  'aria-valuetext': 0,
	  // Live Region Attributes
	  'aria-atomic': 0,
	  'aria-busy': 0,
	  'aria-live': 0,
	  'aria-relevant': 0,
	  // Drag-and-Drop Attributes
	  'aria-dropeffect': 0,
	  'aria-grabbed': 0,
	  // Relationship Attributes
	  'aria-activedescendant': 0,
	  'aria-colcount': 0,
	  'aria-colindex': 0,
	  'aria-colspan': 0,
	  'aria-controls': 0,
	  'aria-describedby': 0,
	  'aria-errormessage': 0,
	  'aria-flowto': 0,
	  'aria-labelledby': 0,
	  'aria-owns': 0,
	  'aria-posinset': 0,
	  'aria-rowcount': 0,
	  'aria-rowindex': 0,
	  'aria-rowspan': 0,
	  'aria-setsize': 0
	};

	var warnedProperties = {};
	var rARIA = new RegExp('^(aria)-[' + ATTRIBUTE_NAME_CHAR + ']*$');
	var rARIACamel = new RegExp('^(aria)[A-Z][' + ATTRIBUTE_NAME_CHAR + ']*$');

	function validateProperty(tagName, name) {
	  {
	    if (hasOwnProperty.call(warnedProperties, name) && warnedProperties[name]) {
	      return true;
	    }

	    if (rARIACamel.test(name)) {
	      var ariaName = 'aria-' + name.slice(4).toLowerCase();
	      var correctName = ariaProperties.hasOwnProperty(ariaName) ? ariaName : null; // If this is an aria-* attribute, but is not listed in the known DOM
	      // DOM properties, then it is an invalid aria-* attribute.

	      if (correctName == null) {
	        error('Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.', name);

	        warnedProperties[name] = true;
	        return true;
	      } // aria-* attributes should be lowercase; suggest the lowercase version.


	      if (name !== correctName) {
	        error('Invalid ARIA attribute `%s`. Did you mean `%s`?', name, correctName);

	        warnedProperties[name] = true;
	        return true;
	      }
	    }

	    if (rARIA.test(name)) {
	      var lowerCasedName = name.toLowerCase();
	      var standardName = ariaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null; // If this is an aria-* attribute, but is not listed in the known DOM
	      // DOM properties, then it is an invalid aria-* attribute.

	      if (standardName == null) {
	        warnedProperties[name] = true;
	        return false;
	      } // aria-* attributes should be lowercase; suggest the lowercase version.


	      if (name !== standardName) {
	        error('Unknown ARIA attribute `%s`. Did you mean `%s`?', name, standardName);

	        warnedProperties[name] = true;
	        return true;
	      }
	    }
	  }

	  return true;
	}

	function warnInvalidARIAProps(type, props) {
	  {
	    var invalidProps = [];

	    for (var key in props) {
	      var isValid = validateProperty(type, key);

	      if (!isValid) {
	        invalidProps.push(key);
	      }
	    }

	    var unknownPropString = invalidProps.map(function (prop) {
	      return '`' + prop + '`';
	    }).join(', ');

	    if (invalidProps.length === 1) {
	      error('Invalid aria prop %s on <%s> tag. ' + 'For details, see https://reactjs.org/link/invalid-aria-props', unknownPropString, type);
	    } else if (invalidProps.length > 1) {
	      error('Invalid aria props %s on <%s> tag. ' + 'For details, see https://reactjs.org/link/invalid-aria-props', unknownPropString, type);
	    }
	  }
	}

	function validateProperties(type, props) {
	  if (isCustomComponent(type, props)) {
	    return;
	  }

	  warnInvalidARIAProps(type, props);
	}

	var didWarnValueNull = false;
	function validateProperties$1(type, props) {
	  {
	    if (type !== 'input' && type !== 'textarea' && type !== 'select') {
	      return;
	    }

	    if (props != null && props.value === null && !didWarnValueNull) {
	      didWarnValueNull = true;

	      if (type === 'select' && props.multiple) {
	        error('`value` prop on `%s` should not be null. ' + 'Consider using an empty array when `multiple` is set to `true` ' + 'to clear the component or `undefined` for uncontrolled components.', type);
	      } else {
	        error('`value` prop on `%s` should not be null. ' + 'Consider using an empty string to clear the component or `undefined` ' + 'for uncontrolled components.', type);
	      }
	    }
	  }
	}

	var validateProperty$1 = function () {};

	{
	  var warnedProperties$1 = {};
	  var EVENT_NAME_REGEX = /^on./;
	  var INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/;
	  var rARIA$1 = new RegExp('^(aria)-[' + ATTRIBUTE_NAME_CHAR + ']*$');
	  var rARIACamel$1 = new RegExp('^(aria)[A-Z][' + ATTRIBUTE_NAME_CHAR + ']*$');

	  validateProperty$1 = function (tagName, name, value, eventRegistry) {
	    if (hasOwnProperty.call(warnedProperties$1, name) && warnedProperties$1[name]) {
	      return true;
	    }

	    var lowerCasedName = name.toLowerCase();

	    if (lowerCasedName === 'onfocusin' || lowerCasedName === 'onfocusout') {
	      error('React uses onFocus and onBlur instead of onFocusIn and onFocusOut. ' + 'All React events are normalized to bubble, so onFocusIn and onFocusOut ' + 'are not needed/supported by React.');

	      warnedProperties$1[name] = true;
	      return true;
	    } // We can't rely on the event system being injected on the server.


	    if (eventRegistry != null) {
	      var registrationNameDependencies = eventRegistry.registrationNameDependencies,
	          possibleRegistrationNames = eventRegistry.possibleRegistrationNames;

	      if (registrationNameDependencies.hasOwnProperty(name)) {
	        return true;
	      }

	      var registrationName = possibleRegistrationNames.hasOwnProperty(lowerCasedName) ? possibleRegistrationNames[lowerCasedName] : null;

	      if (registrationName != null) {
	        error('Invalid event handler property `%s`. Did you mean `%s`?', name, registrationName);

	        warnedProperties$1[name] = true;
	        return true;
	      }

	      if (EVENT_NAME_REGEX.test(name)) {
	        error('Unknown event handler property `%s`. It will be ignored.', name);

	        warnedProperties$1[name] = true;
	        return true;
	      }
	    } else if (EVENT_NAME_REGEX.test(name)) {
	      // If no event plugins have been injected, we are in a server environment.
	      // So we can't tell if the event name is correct for sure, but we can filter
	      // out known bad ones like `onclick`. We can't suggest a specific replacement though.
	      if (INVALID_EVENT_NAME_REGEX.test(name)) {
	        error('Invalid event handler property `%s`. ' + 'React events use the camelCase naming convention, for example `onClick`.', name);
	      }

	      warnedProperties$1[name] = true;
	      return true;
	    } // Let the ARIA attribute hook validate ARIA attributes


	    if (rARIA$1.test(name) || rARIACamel$1.test(name)) {
	      return true;
	    }

	    if (lowerCasedName === 'innerhtml') {
	      error('Directly setting property `innerHTML` is not permitted. ' + 'For more information, lookup documentation on `dangerouslySetInnerHTML`.');

	      warnedProperties$1[name] = true;
	      return true;
	    }

	    if (lowerCasedName === 'aria') {
	      error('The `aria` attribute is reserved for future use in React. ' + 'Pass individual `aria-` attributes instead.');

	      warnedProperties$1[name] = true;
	      return true;
	    }

	    if (lowerCasedName === 'is' && value !== null && value !== undefined && typeof value !== 'string') {
	      error('Received a `%s` for a string attribute `is`. If this is expected, cast ' + 'the value to a string.', typeof value);

	      warnedProperties$1[name] = true;
	      return true;
	    }

	    if (typeof value === 'number' && isNaN(value)) {
	      error('Received NaN for the `%s` attribute. If this is expected, cast ' + 'the value to a string.', name);

	      warnedProperties$1[name] = true;
	      return true;
	    }

	    var propertyInfo = getPropertyInfo(name);
	    var isReserved = propertyInfo !== null && propertyInfo.type === RESERVED; // Known attributes should match the casing specified in the property config.

	    if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
	      var standardName = possibleStandardNames[lowerCasedName];

	      if (standardName !== name) {
	        error('Invalid DOM property `%s`. Did you mean `%s`?', name, standardName);

	        warnedProperties$1[name] = true;
	        return true;
	      }
	    } else if (!isReserved && name !== lowerCasedName) {
	      // Unknown attributes should have lowercase casing since that's how they
	      // will be cased anyway with server rendering.
	      error('React does not recognize the `%s` prop on a DOM element. If you ' + 'intentionally want it to appear in the DOM as a custom ' + 'attribute, spell it as lowercase `%s` instead. ' + 'If you accidentally passed it from a parent component, remove ' + 'it from the DOM element.', name, lowerCasedName);

	      warnedProperties$1[name] = true;
	      return true;
	    }

	    if (typeof value === 'boolean' && shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
	      if (value) {
	        error('Received `%s` for a non-boolean attribute `%s`.\n\n' + 'If you want to write it to the DOM, pass a string instead: ' + '%s="%s" or %s={value.toString()}.', value, name, name, value, name);
	      } else {
	        error('Received `%s` for a non-boolean attribute `%s`.\n\n' + 'If you want to write it to the DOM, pass a string instead: ' + '%s="%s" or %s={value.toString()}.\n\n' + 'If you used to conditionally omit it with %s={condition && value}, ' + 'pass %s={condition ? value : undefined} instead.', value, name, name, value, name, name, name);
	      }

	      warnedProperties$1[name] = true;
	      return true;
	    } // Now that we've validated casing, do not validate
	    // data types for reserved props


	    if (isReserved) {
	      return true;
	    } // Warn when a known attribute is a bad type


	    if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
	      warnedProperties$1[name] = true;
	      return false;
	    } // Warn when passing the strings 'false' or 'true' into a boolean prop


	    if ((value === 'false' || value === 'true') && propertyInfo !== null && propertyInfo.type === BOOLEAN) {
	      error('Received the string `%s` for the boolean attribute `%s`. ' + '%s ' + 'Did you mean %s={%s}?', value, name, value === 'false' ? 'The browser will interpret it as a truthy value.' : 'Although this works, it will not work as expected if you pass the string "false".', name, value);

	      warnedProperties$1[name] = true;
	      return true;
	    }

	    return true;
	  };
	}

	var warnUnknownProperties = function (type, props, eventRegistry) {
	  {
	    var unknownProps = [];

	    for (var key in props) {
	      var isValid = validateProperty$1(type, key, props[key], eventRegistry);

	      if (!isValid) {
	        unknownProps.push(key);
	      }
	    }

	    var unknownPropString = unknownProps.map(function (prop) {
	      return '`' + prop + '`';
	    }).join(', ');

	    if (unknownProps.length === 1) {
	      error('Invalid value for prop %s on <%s> tag. Either remove it from the element, ' + 'or pass a string or number value to keep it in the DOM. ' + 'For details, see https://reactjs.org/link/attribute-behavior ', unknownPropString, type);
	    } else if (unknownProps.length > 1) {
	      error('Invalid values for props %s on <%s> tag. Either remove them from the element, ' + 'or pass a string or number value to keep them in the DOM. ' + 'For details, see https://reactjs.org/link/attribute-behavior ', unknownPropString, type);
	    }
	  }
	};

	function validateProperties$2(type, props, eventRegistry) {
	  if (isCustomComponent(type, props)) {
	    return;
	  }

	  warnUnknownProperties(type, props, eventRegistry);
	}

	var IS_EVENT_HANDLE_NON_MANAGED_NODE = 1;
	var IS_NON_DELEGATED = 1 << 1;
	var IS_CAPTURE_PHASE = 1 << 2;
	// set to LEGACY_FB_SUPPORT. LEGACY_FB_SUPPORT only gets set when
	// we call willDeferLaterForLegacyFBSupport, thus not bailing out
	// will result in endless cycles like an infinite loop.
	// We also don't want to defer during event replaying.

	var SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS = IS_EVENT_HANDLE_NON_MANAGED_NODE | IS_NON_DELEGATED | IS_CAPTURE_PHASE;

	// This exists to avoid circular dependency between ReactDOMEventReplaying
	// and DOMPluginEventSystem.
	var currentReplayingEvent = null;
	function setReplayingEvent(event) {
	  {
	    if (currentReplayingEvent !== null) {
	      error('Expected currently replaying event to be null. This error ' + 'is likely caused by a bug in React. Please file an issue.');
	    }
	  }

	  currentReplayingEvent = event;
	}
	function resetReplayingEvent() {
	  {
	    if (currentReplayingEvent === null) {
	      error('Expected currently replaying event to not be null. This error ' + 'is likely caused by a bug in React. Please file an issue.');
	    }
	  }

	  currentReplayingEvent = null;
	}
	function isReplayingEvent(event) {
	  return event === currentReplayingEvent;
	}

	/**
	 * Gets the target node from a native browser event by accounting for
	 * inconsistencies in browser DOM APIs.
	 *
	 * @param {object} nativeEvent Native browser event.
	 * @return {DOMEventTarget} Target node.
	 */

	function getEventTarget(nativeEvent) {
	  // Fallback to nativeEvent.srcElement for IE9
	  // https://github.com/facebook/react/issues/12506
	  var target = nativeEvent.target || nativeEvent.srcElement || window; // Normalize SVG <use> element events #4963

	  if (target.correspondingUseElement) {
	    target = target.correspondingUseElement;
	  } // Safari may fire events on text nodes (Node.TEXT_NODE is 3).
	  // @see http://www.quirksmode.org/js/events_properties.html


	  return target.nodeType === TEXT_NODE ? target.parentNode : target;
	}

	var restoreImpl = null;
	var restoreTarget = null;
	var restoreQueue = null;

	function restoreStateOfTarget(target) {
	  // We perform this translation at the end of the event loop so that we
	  // always receive the correct fiber here
	  var internalInstance = getInstanceFromNode(target);

	  if (!internalInstance) {
	    // Unmounted
	    return;
	  }

	  if (typeof restoreImpl !== 'function') {
	    throw new Error('setRestoreImplementation() needs to be called to handle a target for controlled ' + 'events. This error is likely caused by a bug in React. Please file an issue.');
	  }

	  var stateNode = internalInstance.stateNode; // Guard against Fiber being unmounted.

	  if (stateNode) {
	    var _props = getFiberCurrentPropsFromNode(stateNode);

	    restoreImpl(internalInstance.stateNode, internalInstance.type, _props);
	  }
	}

	function setRestoreImplementation(impl) {
	  restoreImpl = impl;
	}
	function enqueueStateRestore(target) {
	  if (restoreTarget) {
	    if (restoreQueue) {
	      restoreQueue.push(target);
	    } else {
	      restoreQueue = [target];
	    }
	  } else {
	    restoreTarget = target;
	  }
	}
	function needsStateRestore() {
	  return restoreTarget !== null || restoreQueue !== null;
	}
	function restoreStateIfNeeded() {
	  if (!restoreTarget) {
	    return;
	  }

	  var target = restoreTarget;
	  var queuedTargets = restoreQueue;
	  restoreTarget = null;
	  restoreQueue = null;
	  restoreStateOfTarget(target);

	  if (queuedTargets) {
	    for (var i = 0; i < queuedTargets.length; i++) {
	      restoreStateOfTarget(queuedTargets[i]);
	    }
	  }
	}

	// the renderer. Such as when we're dispatching events or if third party
	// libraries need to call batchedUpdates. Eventually, this API will go away when
	// everything is batched by default. We'll then have a similar API to opt-out of
	// scheduled work and instead do synchronous work.
	// Defaults

	var batchedUpdatesImpl = function (fn, bookkeeping) {
	  return fn(bookkeeping);
	};

	var flushSyncImpl = function () {};

	var isInsideEventHandler = false;

	function finishEventHandler() {
	  // Here we wait until all updates have propagated, which is important
	  // when using controlled components within layers:
	  // https://github.com/facebook/react/issues/1698
	  // Then we restore state of any controlled component.
	  var controlledComponentsHavePendingUpdates = needsStateRestore();

	  if (controlledComponentsHavePendingUpdates) {
	    // If a controlled event was fired, we may need to restore the state of
	    // the DOM node back to the controlled value. This is necessary when React
	    // bails out of the update without touching the DOM.
	    // TODO: Restore state in the microtask, after the discrete updates flush,
	    // instead of early flushing them here.
	    flushSyncImpl();
	    restoreStateIfNeeded();
	  }
	}

	function batchedUpdates(fn, a, b) {
	  if (isInsideEventHandler) {
	    // If we are currently inside another batch, we need to wait until it
	    // fully completes before restoring state.
	    return fn(a, b);
	  }

	  isInsideEventHandler = true;

	  try {
	    return batchedUpdatesImpl(fn, a, b);
	  } finally {
	    isInsideEventHandler = false;
	    finishEventHandler();
	  }
	} // TODO: Replace with flushSync
	function setBatchingImplementation(_batchedUpdatesImpl, _discreteUpdatesImpl, _flushSyncImpl) {
	  batchedUpdatesImpl = _batchedUpdatesImpl;
	  flushSyncImpl = _flushSyncImpl;
	}

	function isInteractive(tag) {
	  return tag === 'button' || tag === 'input' || tag === 'select' || tag === 'textarea';
	}

	function shouldPreventMouseEvent(name, type, props) {
	  switch (name) {
	    case 'onClick':
	    case 'onClickCapture':
	    case 'onDoubleClick':
	    case 'onDoubleClickCapture':
	    case 'onMouseDown':
	    case 'onMouseDownCapture':
	    case 'onMouseMove':
	    case 'onMouseMoveCapture':
	    case 'onMouseUp':
	    case 'onMouseUpCapture':
	    case 'onMouseEnter':
	      return !!(props.disabled && isInteractive(type));

	    default:
	      return false;
	  }
	}
	/**
	 * @param {object} inst The instance, which is the source of events.
	 * @param {string} registrationName Name of listener (e.g. `onClick`).
	 * @return {?function} The stored callback.
	 */


	function getListener(inst, registrationName) {
	  var stateNode = inst.stateNode;

	  if (stateNode === null) {
	    // Work in progress (ex: onload events in incremental mode).
	    return null;
	  }

	  var props = getFiberCurrentPropsFromNode(stateNode);

	  if (props === null) {
	    // Work in progress.
	    return null;
	  }

	  var listener = props[registrationName];

	  if (shouldPreventMouseEvent(registrationName, inst.type, props)) {
	    return null;
	  }

	  if (listener && typeof listener !== 'function') {
	    throw new Error("Expected `" + registrationName + "` listener to be a function, instead got a value of `" + typeof listener + "` type.");
	  }

	  return listener;
	}

	var passiveBrowserEventsSupported = false; // Check if browser support events with passive listeners
	// https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#Safely_detecting_option_support

	if (canUseDOM) {
	  try {
	    var options = {}; // $FlowFixMe: Ignore Flow complaining about needing a value

	    Object.defineProperty(options, 'passive', {
	      get: function () {
	        passiveBrowserEventsSupported = true;
	      }
	    });
	    window.addEventListener('test', options, options);
	    window.removeEventListener('test', options, options);
	  } catch (e) {
	    passiveBrowserEventsSupported = false;
	  }
	}

	function invokeGuardedCallbackProd(name, func, context, a, b, c, d, e, f) {
	  var funcArgs = Array.prototype.slice.call(arguments, 3);

	  try {
	    func.apply(context, funcArgs);
	  } catch (error) {
	    this.onError(error);
	  }
	}

	var invokeGuardedCallbackImpl = invokeGuardedCallbackProd;

	{
	  // In DEV mode, we swap out invokeGuardedCallback for a special version
	  // that plays more nicely with the browser's DevTools. The idea is to preserve
	  // "Pause on exceptions" behavior. Because React wraps all user-provided
	  // functions in invokeGuardedCallback, and the production version of
	  // invokeGuardedCallback uses a try-catch, all user exceptions are treated
	  // like caught exceptions, and the DevTools won't pause unless the developer
	  // takes the extra step of enabling pause on caught exceptions. This is
	  // unintuitive, though, because even though React has caught the error, from
	  // the developer's perspective, the error is uncaught.
	  //
	  // To preserve the expected "Pause on exceptions" behavior, we don't use a
	  // try-catch in DEV. Instead, we synchronously dispatch a fake event to a fake
	  // DOM node, and call the user-provided callback from inside an event handler
	  // for that fake event. If the callback throws, the error is "captured" using
	  // a global event handler. But because the error happens in a different
	  // event loop context, it does not interrupt the normal program flow.
	  // Effectively, this gives us try-catch behavior without actually using
	  // try-catch. Neat!
	  // Check that the browser supports the APIs we need to implement our special
	  // DEV version of invokeGuardedCallback
	  if (typeof window !== 'undefined' && typeof window.dispatchEvent === 'function' && typeof document !== 'undefined' && typeof document.createEvent === 'function') {
	    var fakeNode = document.createElement('react');

	    invokeGuardedCallbackImpl = function invokeGuardedCallbackDev(name, func, context, a, b, c, d, e, f) {
	      // If document doesn't exist we know for sure we will crash in this method
	      // when we call document.createEvent(). However this can cause confusing
	      // errors: https://github.com/facebook/create-react-app/issues/3482
	      // So we preemptively throw with a better message instead.
	      if (typeof document === 'undefined' || document === null) {
	        throw new Error('The `document` global was defined when React was initialized, but is not ' + 'defined anymore. This can happen in a test environment if a component ' + 'schedules an update from an asynchronous callback, but the test has already ' + 'finished running. To solve this, you can either unmount the component at ' + 'the end of your test (and ensure that any asynchronous operations get ' + 'canceled in `componentWillUnmount`), or you can change the test itself ' + 'to be asynchronous.');
	      }

	      var evt = document.createEvent('Event');
	      var didCall = false; // Keeps track of whether the user-provided callback threw an error. We
	      // set this to true at the beginning, then set it to false right after
	      // calling the function. If the function errors, `didError` will never be
	      // set to false. This strategy works even if the browser is flaky and
	      // fails to call our global error handler, because it doesn't rely on
	      // the error event at all.

	      var didError = true; // Keeps track of the value of window.event so that we can reset it
	      // during the callback to let user code access window.event in the
	      // browsers that support it.

	      var windowEvent = window.event; // Keeps track of the descriptor of window.event to restore it after event
	      // dispatching: https://github.com/facebook/react/issues/13688

	      var windowEventDescriptor = Object.getOwnPropertyDescriptor(window, 'event');

	      function restoreAfterDispatch() {
	        // We immediately remove the callback from event listeners so that
	        // nested `invokeGuardedCallback` calls do not clash. Otherwise, a
	        // nested call would trigger the fake event handlers of any call higher
	        // in the stack.
	        fakeNode.removeEventListener(evtType, callCallback, false); // We check for window.hasOwnProperty('event') to prevent the
	        // window.event assignment in both IE <= 10 as they throw an error
	        // "Member not found" in strict mode, and in Firefox which does not
	        // support window.event.

	        if (typeof window.event !== 'undefined' && window.hasOwnProperty('event')) {
	          window.event = windowEvent;
	        }
	      } // Create an event handler for our fake event. We will synchronously
	      // dispatch our fake event using `dispatchEvent`. Inside the handler, we
	      // call the user-provided callback.


	      var funcArgs = Array.prototype.slice.call(arguments, 3);

	      function callCallback() {
	        didCall = true;
	        restoreAfterDispatch();
	        func.apply(context, funcArgs);
	        didError = false;
	      } // Create a global error event handler. We use this to capture the value
	      // that was thrown. It's possible that this error handler will fire more
	      // than once; for example, if non-React code also calls `dispatchEvent`
	      // and a handler for that event throws. We should be resilient to most of
	      // those cases. Even if our error event handler fires more than once, the
	      // last error event is always used. If the callback actually does error,
	      // we know that the last error event is the correct one, because it's not
	      // possible for anything else to have happened in between our callback
	      // erroring and the code that follows the `dispatchEvent` call below. If
	      // the callback doesn't error, but the error event was fired, we know to
	      // ignore it because `didError` will be false, as described above.


	      var error; // Use this to track whether the error event is ever called.

	      var didSetError = false;
	      var isCrossOriginError = false;

	      function handleWindowError(event) {
	        error = event.error;
	        didSetError = true;

	        if (error === null && event.colno === 0 && event.lineno === 0) {
	          isCrossOriginError = true;
	        }

	        if (event.defaultPrevented) {
	          // Some other error handler has prevented default.
	          // Browsers silence the error report if this happens.
	          // We'll remember this to later decide whether to log it or not.
	          if (error != null && typeof error === 'object') {
	            try {
	              error._suppressLogging = true;
	            } catch (inner) {// Ignore.
	            }
	          }
	        }
	      } // Create a fake event type.


	      var evtType = "react-" + (name ? name : 'invokeguardedcallback'); // Attach our event handlers

	      window.addEventListener('error', handleWindowError);
	      fakeNode.addEventListener(evtType, callCallback, false); // Synchronously dispatch our fake event. If the user-provided function
	      // errors, it will trigger our global error handler.

	      evt.initEvent(evtType, false, false);
	      fakeNode.dispatchEvent(evt);

	      if (windowEventDescriptor) {
	        Object.defineProperty(window, 'event', windowEventDescriptor);
	      }

	      if (didCall && didError) {
	        if (!didSetError) {
	          // The callback errored, but the error event never fired.
	          // eslint-disable-next-line react-internal/prod-error-codes
	          error = new Error('An error was thrown inside one of your components, but React ' + "doesn't know what it was. This is likely due to browser " + 'flakiness. React does its best to preserve the "Pause on ' + 'exceptions" behavior of the DevTools, which requires some ' + "DEV-mode only tricks. It's possible that these don't work in " + 'your browser. Try triggering the error in production mode, ' + 'or switching to a modern browser. If you suspect that this is ' + 'actually an issue with React, please file an issue.');
	        } else if (isCrossOriginError) {
	          // eslint-disable-next-line react-internal/prod-error-codes
	          error = new Error("A cross-origin error was thrown. React doesn't have access to " + 'the actual error object in development. ' + 'See https://reactjs.org/link/crossorigin-error for more information.');
	        }

	        this.onError(error);
	      } // Remove our event listeners


	      window.removeEventListener('error', handleWindowError);

	      if (!didCall) {
	        // Something went really wrong, and our event was not dispatched.
	        // https://github.com/facebook/react/issues/16734
	        // https://github.com/facebook/react/issues/16585
	        // Fall back to the production implementation.
	        restoreAfterDispatch();
	        return invokeGuardedCallbackProd.apply(this, arguments);
	      }
	    };
	  }
	}

	var invokeGuardedCallbackImpl$1 = invokeGuardedCallbackImpl;

	var hasError = false;
	var caughtError = null; // Used by event system to capture/rethrow the first error.

	var hasRethrowError = false;
	var rethrowError = null;
	var reporter = {
	  onError: function (error) {
	    hasError = true;
	    caughtError = error;
	  }
	};
	/**
	 * Call a function while guarding against errors that happens within it.
	 * Returns an error if it throws, otherwise null.
	 *
	 * In production, this is implemented using a try-catch. The reason we don't
	 * use a try-catch directly is so that we can swap out a different
	 * implementation in DEV mode.
	 *
	 * @param {String} name of the guard to use for logging or debugging
	 * @param {Function} func The function to invoke
	 * @param {*} context The context to use when calling the function
	 * @param {...*} args Arguments for function
	 */

	function invokeGuardedCallback(name, func, context, a, b, c, d, e, f) {
	  hasError = false;
	  caughtError = null;
	  invokeGuardedCallbackImpl$1.apply(reporter, arguments);
	}
	/**
	 * Same as invokeGuardedCallback, but instead of returning an error, it stores
	 * it in a global so it can be rethrown by `rethrowCaughtError` later.
	 * TODO: See if caughtError and rethrowError can be unified.
	 *
	 * @param {String} name of the guard to use for logging or debugging
	 * @param {Function} func The function to invoke
	 * @param {*} context The context to use when calling the function
	 * @param {...*} args Arguments for function
	 */

	function invokeGuardedCallbackAndCatchFirstError(name, func, context, a, b, c, d, e, f) {
	  invokeGuardedCallback.apply(this, arguments);

	  if (hasError) {
	    var error = clearCaughtError();

	    if (!hasRethrowError) {
	      hasRethrowError = true;
	      rethrowError = error;
	    }
	  }
	}
	/**
	 * During execution of guarded functions we will capture the first error which
	 * we will rethrow to be handled by the top level error handler.
	 */

	function rethrowCaughtError() {
	  if (hasRethrowError) {
	    var error = rethrowError;
	    hasRethrowError = false;
	    rethrowError = null;
	    throw error;
	  }
	}
	function hasCaughtError() {
	  return hasError;
	}
	function clearCaughtError() {
	  if (hasError) {
	    var error = caughtError;
	    hasError = false;
	    caughtError = null;
	    return error;
	  } else {
	    throw new Error('clearCaughtError was called but no error was captured. This error ' + 'is likely caused by a bug in React. Please file an issue.');
	  }
	}

	/**
	 * `ReactInstanceMap` maintains a mapping from a public facing stateful
	 * instance (key) and the internal representation (value). This allows public
	 * methods to accept the user facing instance as an argument and map them back
	 * to internal methods.
	 *
	 * Note that this module is currently shared and assumed to be stateless.
	 * If this becomes an actual Map, that will break.
	 */
	function get(key) {
	  return key._reactInternals;
	}
	function has(key) {
	  return key._reactInternals !== undefined;
	}
	function set(key, value) {
	  key._reactInternals = value;
	}

	// Don't change these two values. They're used by React Dev Tools.
	var NoFlags =
	/*                      */
	0;
	var PerformedWork =
	/*                */
	1; // You can change the rest (and add more).

	var Placement =
	/*                    */
	2;
	var Update =
	/*                       */
	4;
	var ChildDeletion =
	/*                */
	16;
	var ContentReset =
	/*                 */
	32;
	var Callback =
	/*                     */
	64;
	var DidCapture =
	/*                   */
	128;
	var ForceClientRender =
	/*            */
	256;
	var Ref =
	/*                          */
	512;
	var Snapshot =
	/*                     */
	1024;
	var Passive =
	/*                      */
	2048;
	var Hydrating =
	/*                    */
	4096;
	var Visibility =
	/*                   */
	8192;
	var StoreConsistency =
	/*             */
	16384;
	var LifecycleEffectMask = Passive | Update | Callback | Ref | Snapshot | StoreConsistency; // Union of all commit flags (flags with the lifetime of a particular commit)

	var HostEffectMask =
	/*               */
	32767; // These are not really side effects, but we still reuse this field.

	var Incomplete =
	/*                   */
	32768;
	var ShouldCapture =
	/*                */
	65536;
	var ForceUpdateForLegacySuspense =
	/* */
	131072;
	var Forked =
	/*                       */
	1048576; // Static tags describe aspects of a fiber that are not specific to a render,
	// e.g. a fiber uses a passive effect (even if there are no updates on this particular render).
	// This enables us to defer more work in the unmount case,
	// since we can defer traversing the tree during layout to look for Passive effects,
	// and instead rely on the static flag as a signal that there may be cleanup work.

	var RefStatic =
	/*                    */
	2097152;
	var LayoutStatic =
	/*                 */
	4194304;
	var PassiveStatic =
	/*                */
	8388608; // These flags allow us to traverse to fibers that have effects on mount
	// without traversing the entire tree after every commit for
	// double invoking

	var MountLayoutDev =
	/*               */
	16777216;
	var MountPassiveDev =
	/*              */
	33554432; // Groups of flags that are used in the commit phase to skip over trees that
	// don't contain effects, by checking subtreeFlags.

	var BeforeMutationMask = // TODO: Remove Update flag from before mutation phase by re-landing Visibility
	// flag logic (see #20043)
	Update | Snapshot | ( 0);
	var MutationMask = Placement | Update | ChildDeletion | ContentReset | Ref | Hydrating | Visibility;
	var LayoutMask = Update | Callback | Ref | Visibility; // TODO: Split into PassiveMountMask and PassiveUnmountMask

	var PassiveMask = Passive | ChildDeletion; // Union of tags that don't get reset on clones.
	// This allows certain concepts to persist without recalculating them,
	// e.g. whether a subtree contains passive effects or portals.

	var StaticMask = LayoutStatic | PassiveStatic | RefStatic;

	var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
	function getNearestMountedFiber(fiber) {
	  var node = fiber;
	  var nearestMounted = fiber;

	  if (!fiber.alternate) {
	    // If there is no alternate, this might be a new tree that isn't inserted
	    // yet. If it is, then it will have a pending insertion effect on it.
	    var nextNode = node;

	    do {
	      node = nextNode;

	      if ((node.flags & (Placement | Hydrating)) !== NoFlags) {
	        // This is an insertion or in-progress hydration. The nearest possible
	        // mounted fiber is the parent but we need to continue to figure out
	        // if that one is still mounted.
	        nearestMounted = node.return;
	      }

	      nextNode = node.return;
	    } while (nextNode);
	  } else {
	    while (node.return) {
	      node = node.return;
	    }
	  }

	  if (node.tag === HostRoot) {
	    // TODO: Check if this was a nested HostRoot when used with
	    // renderContainerIntoSubtree.
	    return nearestMounted;
	  } // If we didn't hit the root, that means that we're in an disconnected tree
	  // that has been unmounted.


	  return null;
	}
	function getSuspenseInstanceFromFiber(fiber) {
	  if (fiber.tag === SuspenseComponent) {
	    var suspenseState = fiber.memoizedState;

	    if (suspenseState === null) {
	      var current = fiber.alternate;

	      if (current !== null) {
	        suspenseState = current.memoizedState;
	      }
	    }

	    if (suspenseState !== null) {
	      return suspenseState.dehydrated;
	    }
	  }

	  return null;
	}
	function getContainerFromFiber(fiber) {
	  return fiber.tag === HostRoot ? fiber.stateNode.containerInfo : null;
	}
	function isFiberMounted(fiber) {
	  return getNearestMountedFiber(fiber) === fiber;
	}
	function isMounted(component) {
	  {
	    var owner = ReactCurrentOwner.current;

	    if (owner !== null && owner.tag === ClassComponent) {
	      var ownerFiber = owner;
	      var instance = ownerFiber.stateNode;

	      if (!instance._warnedAboutRefsInRender) {
	        error('%s is accessing isMounted inside its render() function. ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', getComponentNameFromFiber(ownerFiber) || 'A component');
	      }

	      instance._warnedAboutRefsInRender = true;
	    }
	  }

	  var fiber = get(component);

	  if (!fiber) {
	    return false;
	  }

	  return getNearestMountedFiber(fiber) === fiber;
	}

	function assertIsMounted(fiber) {
	  if (getNearestMountedFiber(fiber) !== fiber) {
	    throw new Error('Unable to find node on an unmounted component.');
	  }
	}

	function findCurrentFiberUsingSlowPath(fiber) {
	  var alternate = fiber.alternate;

	  if (!alternate) {
	    // If there is no alternate, then we only need to check if it is mounted.
	    var nearestMounted = getNearestMountedFiber(fiber);

	    if (nearestMounted === null) {
	      throw new Error('Unable to find node on an unmounted component.');
	    }

	    if (nearestMounted !== fiber) {
	      return null;
	    }

	    return fiber;
	  } // If we have two possible branches, we'll walk backwards up to the root
	  // to see what path the root points to. On the way we may hit one of the
	  // special cases and we'll deal with them.


	  var a = fiber;
	  var b = alternate;

	  while (true) {
	    var parentA = a.return;

	    if (parentA === null) {
	      // We're at the root.
	      break;
	    }

	    var parentB = parentA.alternate;

	    if (parentB === null) {
	      // There is no alternate. This is an unusual case. Currently, it only
	      // happens when a Suspense component is hidden. An extra fragment fiber
	      // is inserted in between the Suspense fiber and its children. Skip
	      // over this extra fragment fiber and proceed to the next parent.
	      var nextParent = parentA.return;

	      if (nextParent !== null) {
	        a = b = nextParent;
	        continue;
	      } // If there's no parent, we're at the root.


	      break;
	    } // If both copies of the parent fiber point to the same child, we can
	    // assume that the child is current. This happens when we bailout on low
	    // priority: the bailed out fiber's child reuses the current child.


	    if (parentA.child === parentB.child) {
	      var child = parentA.child;

	      while (child) {
	        if (child === a) {
	          // We've determined that A is the current branch.
	          assertIsMounted(parentA);
	          return fiber;
	        }

	        if (child === b) {
	          // We've determined that B is the current branch.
	          assertIsMounted(parentA);
	          return alternate;
	        }

	        child = child.sibling;
	      } // We should never have an alternate for any mounting node. So the only
	      // way this could possibly happen is if this was unmounted, if at all.


	      throw new Error('Unable to find node on an unmounted component.');
	    }

	    if (a.return !== b.return) {
	      // The return pointer of A and the return pointer of B point to different
	      // fibers. We assume that return pointers never criss-cross, so A must
	      // belong to the child set of A.return, and B must belong to the child
	      // set of B.return.
	      a = parentA;
	      b = parentB;
	    } else {
	      // The return pointers point to the same fiber. We'll have to use the
	      // default, slow path: scan the child sets of each parent alternate to see
	      // which child belongs to which set.
	      //
	      // Search parent A's child set
	      var didFindChild = false;
	      var _child = parentA.child;

	      while (_child) {
	        if (_child === a) {
	          didFindChild = true;
	          a = parentA;
	          b = parentB;
	          break;
	        }

	        if (_child === b) {
	          didFindChild = true;
	          b = parentA;
	          a = parentB;
	          break;
	        }

	        _child = _child.sibling;
	      }

	      if (!didFindChild) {
	        // Search parent B's child set
	        _child = parentB.child;

	        while (_child) {
	          if (_child === a) {
	            didFindChild = true;
	            a = parentB;
	            b = parentA;
	            break;
	          }

	          if (_child === b) {
	            didFindChild = true;
	            b = parentB;
	            a = parentA;
	            break;
	          }

	          _child = _child.sibling;
	        }

	        if (!didFindChild) {
	          throw new Error('Child was not found in either parent set. This indicates a bug ' + 'in React related to the return pointer. Please file an issue.');
	        }
	      }
	    }

	    if (a.alternate !== b) {
	      throw new Error("Return fibers should always be each others' alternates. " + 'This error is likely caused by a bug in React. Please file an issue.');
	    }
	  } // If the root is not a host container, we're in a disconnected tree. I.e.
	  // unmounted.


	  if (a.tag !== HostRoot) {
	    throw new Error('Unable to find node on an unmounted component.');
	  }

	  if (a.stateNode.current === a) {
	    // We've determined that A is the current branch.
	    return fiber;
	  } // Otherwise B has to be current branch.


	  return alternate;
	}
	function findCurrentHostFiber(parent) {
	  var currentParent = findCurrentFiberUsingSlowPath(parent);
	  return currentParent !== null ? findCurrentHostFiberImpl(currentParent) : null;
	}

	function findCurrentHostFiberImpl(node) {
	  // Next we'll drill down this component to find the first HostComponent/Text.
	  if (node.tag === HostComponent || node.tag === HostText) {
	    return node;
	  }

	  var child = node.child;

	  while (child !== null) {
	    var match = findCurrentHostFiberImpl(child);

	    if (match !== null) {
	      return match;
	    }

	    child = child.sibling;
	  }

	  return null;
	}

	function findCurrentHostFiberWithNoPortals(parent) {
	  var currentParent = findCurrentFiberUsingSlowPath(parent);
	  return currentParent !== null ? findCurrentHostFiberWithNoPortalsImpl(currentParent) : null;
	}

	function findCurrentHostFiberWithNoPortalsImpl(node) {
	  // Next we'll drill down this component to find the first HostComponent/Text.
	  if (node.tag === HostComponent || node.tag === HostText) {
	    return node;
	  }

	  var child = node.child;

	  while (child !== null) {
	    if (child.tag !== HostPortal) {
	      var match = findCurrentHostFiberWithNoPortalsImpl(child);

	      if (match !== null) {
	        return match;
	      }
	    }

	    child = child.sibling;
	  }

	  return null;
	}

	// This module only exists as an ESM wrapper around the external CommonJS
	var scheduleCallback = Scheduler.unstable_scheduleCallback;
	var cancelCallback = Scheduler.unstable_cancelCallback;
	var shouldYield = Scheduler.unstable_shouldYield;
	var requestPaint = Scheduler.unstable_requestPaint;
	var now = Scheduler.unstable_now;
	var getCurrentPriorityLevel = Scheduler.unstable_getCurrentPriorityLevel;
	var ImmediatePriority = Scheduler.unstable_ImmediatePriority;
	var UserBlockingPriority = Scheduler.unstable_UserBlockingPriority;
	var NormalPriority = Scheduler.unstable_NormalPriority;
	var LowPriority = Scheduler.unstable_LowPriority;
	var IdlePriority = Scheduler.unstable_IdlePriority;
	// this doesn't actually exist on the scheduler, but it *does*
	// on scheduler/unstable_mock, which we'll need for internal testing
	var unstable_yieldValue = Scheduler.unstable_yieldValue;
	var unstable_setDisableYieldValue = Scheduler.unstable_setDisableYieldValue;

	var rendererID = null;
	var injectedHook = null;
	var injectedProfilingHooks = null;
	var hasLoggedError = false;
	var isDevToolsPresent = typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined';
	function injectInternals(internals) {
	  if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {
	    // No DevTools
	    return false;
	  }

	  var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;

	  if (hook.isDisabled) {
	    // This isn't a real property on the hook, but it can be set to opt out
	    // of DevTools integration and associated warnings and logs.
	    // https://github.com/facebook/react/issues/3877
	    return true;
	  }

	  if (!hook.supportsFiber) {
	    {
	      error('The installed version of React DevTools is too old and will not work ' + 'with the current version of React. Please update React DevTools. ' + 'https://reactjs.org/link/react-devtools');
	    } // DevTools exists, even though it doesn't support Fiber.


	    return true;
	  }

	  try {
	    if (enableSchedulingProfiler) {
	      // Conditionally inject these hooks only if Timeline profiler is supported by this build.
	      // This gives DevTools a way to feature detect that isn't tied to version number
	      // (since profiling and timeline are controlled by different feature flags).
	      internals = assign({}, internals, {
	        getLaneLabelMap: getLaneLabelMap,
	        injectProfilingHooks: injectProfilingHooks
	      });
	    }

	    rendererID = hook.inject(internals); // We have successfully injected, so now it is safe to set up hooks.

	    injectedHook = hook;
	  } catch (err) {
	    // Catch all errors because it is unsafe to throw during initialization.
	    {
	      error('React instrumentation encountered an error: %s.', err);
	    }
	  }

	  if (hook.checkDCE) {
	    // This is the real DevTools.
	    return true;
	  } else {
	    // This is likely a hook installed by Fast Refresh runtime.
	    return false;
	  }
	}
	function onScheduleRoot(root, children) {
	  {
	    if (injectedHook && typeof injectedHook.onScheduleFiberRoot === 'function') {
	      try {
	        injectedHook.onScheduleFiberRoot(rendererID, root, children);
	      } catch (err) {
	        if ( !hasLoggedError) {
	          hasLoggedError = true;

	          error('React instrumentation encountered an error: %s', err);
	        }
	      }
	    }
	  }
	}
	function onCommitRoot(root, eventPriority) {
	  if (injectedHook && typeof injectedHook.onCommitFiberRoot === 'function') {
	    try {
	      var didError = (root.current.flags & DidCapture) === DidCapture;

	      if (enableProfilerTimer) {
	        var schedulerPriority;

	        switch (eventPriority) {
	          case DiscreteEventPriority:
	            schedulerPriority = ImmediatePriority;
	            break;

	          case ContinuousEventPriority:
	            schedulerPriority = UserBlockingPriority;
	            break;

	          case DefaultEventPriority:
	            schedulerPriority = NormalPriority;
	            break;

	          case IdleEventPriority:
	            schedulerPriority = IdlePriority;
	            break;

	          default:
	            schedulerPriority = NormalPriority;
	            break;
	        }

	        injectedHook.onCommitFiberRoot(rendererID, root, schedulerPriority, didError);
	      }
	    } catch (err) {
	      {
	        if (!hasLoggedError) {
	          hasLoggedError = true;

	          error('React instrumentation encountered an error: %s', err);
	        }
	      }
	    }
	  }
	}
	function onPostCommitRoot(root) {
	  if (injectedHook && typeof injectedHook.onPostCommitFiberRoot === 'function') {
	    try {
	      injectedHook.onPostCommitFiberRoot(rendererID, root);
	    } catch (err) {
	      {
	        if (!hasLoggedError) {
	          hasLoggedError = true;

	          error('React instrumentation encountered an error: %s', err);
	        }
	      }
	    }
	  }
	}
	function onCommitUnmount(fiber) {
	  if (injectedHook && typeof injectedHook.onCommitFiberUnmount === 'function') {
	    try {
	      injectedHook.onCommitFiberUnmount(rendererID, fiber);
	    } catch (err) {
	      {
	        if (!hasLoggedError) {
	          hasLoggedError = true;

	          error('React instrumentation encountered an error: %s', err);
	        }
	      }
	    }
	  }
	}
	function setIsStrictModeForDevtools(newIsStrictMode) {
	  {
	    if (typeof unstable_yieldValue === 'function') {
	      // We're in a test because Scheduler.unstable_yieldValue only exists
	      // in SchedulerMock. To reduce the noise in strict mode tests,
	      // suppress warnings and disable scheduler yielding during the double render
	      unstable_setDisableYieldValue(newIsStrictMode);
	      setSuppressWarning(newIsStrictMode);
	    }

	    if (injectedHook && typeof injectedHook.setStrictMode === 'function') {
	      try {
	        injectedHook.setStrictMode(rendererID, newIsStrictMode);
	      } catch (err) {
	        {
	          if (!hasLoggedError) {
	            hasLoggedError = true;

	            error('React instrumentation encountered an error: %s', err);
	          }
	        }
	      }
	    }
	  }
	} // Profiler API hooks

	function injectProfilingHooks(profilingHooks) {
	  injectedProfilingHooks = profilingHooks;
	}

	function getLaneLabelMap() {
	  {
	    var map = new Map();
	    var lane = 1;

	    for (var index = 0; index < TotalLanes; index++) {
	      var label = getLabelForLane(lane);
	      map.set(lane, label);
	      lane *= 2;
	    }

	    return map;
	  }
	}

	function markCommitStarted(lanes) {
	  {
	    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markCommitStarted === 'function') {
	      injectedProfilingHooks.markCommitStarted(lanes);
	    }
	  }
	}
	function markCommitStopped() {
	  {
	    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markCommitStopped === 'function') {
	      injectedProfilingHooks.markCommitStopped();
	    }
	  }
	}
	function markComponentRenderStarted(fiber) {
	  {
	    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentRenderStarted === 'function') {
	      injectedProfilingHooks.markComponentRenderStarted(fiber);
	    }
	  }
	}
	function markComponentRenderStopped() {
	  {
	    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentRenderStopped === 'function') {
	      injectedProfilingHooks.markComponentRenderStopped();
	    }
	  }
	}
	function markComponentPassiveEffectMountStarted(fiber) {
	  {
	    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectMountStarted === 'function') {
	      injectedProfilingHooks.markComponentPassiveEffectMountStarted(fiber);
	    }
	  }
	}
	function markComponentPassiveEffectMountStopped() {
	  {
	    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectMountStopped === 'function') {
	      injectedProfilingHooks.markComponentPassiveEffectMountStopped();
	    }
	  }
	}
	function markComponentPassiveEffectUnmountStarted(fiber) {
	  {
	    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStarted === 'function') {
	      injectedProfilingHooks.markComponentPassiveEffectUnmountStarted(fiber);
	    }
	  }
	}
	function markComponentPassiveEffectUnmountStopped() {
	  {
	    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStopped === 'function') {
	      injectedProfilingHooks.markComponentPassiveEffectUnmountStopped();
	    }
	  }
	}
	function markComponentLayoutEffectMountStarted(fiber) {
	  {
	    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectMountStarted === 'function') {
	      injectedProfilingHooks.markComponentLayoutEffectMountStarted(fiber);
	    }
	  }
	}
	function markComponentLayoutEffectMountStopped() {
	  {
	    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectMountStopped === 'function') {
	      injectedProfilingHooks.markComponentLayoutEffectMountStopped();
	    }
	  }
	}
	function markComponentLayoutEffectUnmountStarted(fiber) {
	  {
	    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStarted === 'function') {
	      injectedProfilingHooks.markComponentLayoutEffectUnmountStarted(fiber);
	    }
	  }
	}
	function markComponentLayoutEffectUnmountStopped() {
	  {
	    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStopped === 'function') {
	      injectedProfilingHooks.markComponentLayoutEffectUnmountStopped();
	    }
	  }
	}
	function markComponentErrored(fiber, thrownValue, lanes) {
	  {
	    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentErrored === 'function') {
	      injectedProfilingHooks.markComponentErrored(fiber, thrownValue, lanes);
	    }
	  }
	}
	function markComponentSuspended(fiber, wakeable, lanes) {
	  {
	    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentSuspended === 'function') {
	      injectedProfilingHooks.markComponentSuspended(fiber, wakeable, lanes);
	    }
	  }
	}
	function markLayoutEffectsStarted(lanes) {
	  {
	    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markLayoutEffectsStarted === 'function') {
	      injectedProfilingHooks.markLayoutEffectsStarted(lanes);
	    }
	  }
	}
	function markLayoutEffectsStopped() {
	  {
	    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markLayoutEffectsStopped === 'function') {
	      injectedProfilingHooks.markLayoutEffectsStopped();
	    }
	  }
	}
	function markPassiveEffectsStarted(lanes) {
	  {
	    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markPassiveEffectsStarted === 'function') {
	      injectedProfilingHooks.markPassiveEffectsStarted(lanes);
	    }
	  }
	}
	function markPassiveEffectsStopped() {
	  {
	    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markPassiveEffectsStopped === 'function') {
	      injectedProfilingHooks.markPassiveEffectsStopped();
	    }
	  }
	}
	function markRenderStarted(lanes) {
	  {
	    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderStarted === 'function') {
	      injectedProfilingHooks.markRenderStarted(lanes);
	    }
	  }
	}
	function markRenderYielded() {
	  {
	    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderYielded === 'function') {
	      injectedProfilingHooks.markRenderYielded();
	    }
	  }
	}
	function markRenderStopped() {
	  {
	    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderStopped === 'function') {
	      injectedProfilingHooks.markRenderStopped();
	    }
	  }
	}
	function markRenderScheduled(lane) {
	  {
	    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderScheduled === 'function') {
	      injectedProfilingHooks.markRenderScheduled(lane);
	    }
	  }
	}
	function markForceUpdateScheduled(fiber, lane) {
	  {
	    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markForceUpdateScheduled === 'function') {
	      injectedProfilingHooks.markForceUpdateScheduled(fiber, lane);
	    }
	  }
	}
	function markStateUpdateScheduled(fiber, lane) {
	  {
	    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markStateUpdateScheduled === 'function') {
	      injectedProfilingHooks.markStateUpdateScheduled(fiber, lane);
	    }
	  }
	}

	var NoMode =
	/*                         */
	0; // TODO: Remove ConcurrentMode by reading from the root tag instead

	var ConcurrentMode =
	/*                 */
	1;
	var ProfileMode =
	/*                    */
	2;
	var StrictLegacyMode =
	/*               */
	8;
	var StrictEffectsMode =
	/*              */
	16;

	// TODO: This is pretty well supported by browsers. Maybe we can drop it.
	var clz32 = Math.clz32 ? Math.clz32 : clz32Fallback; // Count leading zeros.
	// Based on:
	// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/clz32

	var log = Math.log;
	var LN2 = Math.LN2;

	function clz32Fallback(x) {
	  var asUint = x >>> 0;

	  if (asUint === 0) {
	    return 32;
	  }

	  return 31 - (log(asUint) / LN2 | 0) | 0;
	}

	// If those values are changed that package should be rebuilt and redeployed.

	var TotalLanes = 31;
	var NoLanes =
	/*                        */
	0;
	var NoLane =
	/*                          */
	0;
	var SyncLane =
	/*                        */
	1;
	var InputContinuousHydrationLane =
	/*    */
	2;
	var InputContinuousLane =
	/*             */
	4;
	var DefaultHydrationLane =
	/*            */
	8;
	var DefaultLane =
	/*                     */
	16;
	var TransitionHydrationLane =
	/*                */
	32;
	var TransitionLanes =
	/*                       */
	4194240;
	var TransitionLane1 =
	/*                        */
	64;
	var TransitionLane2 =
	/*                        */
	128;
	var TransitionLane3 =
	/*                        */
	256;
	var TransitionLane4 =
	/*                        */
	512;
	var TransitionLane5 =
	/*                        */
	1024;
	var TransitionLane6 =
	/*                        */
	2048;
	var TransitionLane7 =
	/*                        */
	4096;
	var TransitionLane8 =
	/*                        */
	8192;
	var TransitionLane9 =
	/*                        */
	16384;
	var TransitionLane10 =
	/*                       */
	32768;
	var TransitionLane11 =
	/*                       */
	65536;
	var TransitionLane12 =
	/*                       */
	131072;
	var TransitionLane13 =
	/*                       */
	262144;
	var TransitionLane14 =
	/*                       */
	524288;
	var TransitionLane15 =
	/*                       */
	1048576;
	var TransitionLane16 =
	/*                       */
	2097152;
	var RetryLanes =
	/*                            */
	130023424;
	var RetryLane1 =
	/*                             */
	4194304;
	var RetryLane2 =
	/*                             */
	8388608;
	var RetryLane3 =
	/*                             */
	16777216;
	var RetryLane4 =
	/*                             */
	33554432;
	var RetryLane5 =
	/*                             */
	67108864;
	var SomeRetryLane = RetryLane1;
	var SelectiveHydrationLane =
	/*          */
	134217728;
	var NonIdleLanes =
	/*                          */
	268435455;
	var IdleHydrationLane =
	/*               */
	268435456;
	var IdleLane =
	/*                        */
	536870912;
	var OffscreenLane =
	/*                   */
	1073741824; // This function is used for the experimental timeline (react-devtools-timeline)
	// It should be kept in sync with the Lanes values above.

	function getLabelForLane(lane) {
	  {
	    if (lane & SyncLane) {
	      return 'Sync';
	    }

	    if (lane & InputContinuousHydrationLane) {
	      return 'InputContinuousHydration';
	    }

	    if (lane & InputContinuousLane) {
	      return 'InputContinuous';
	    }

	    if (lane & DefaultHydrationLane) {
	      return 'DefaultHydration';
	    }

	    if (lane & DefaultLane) {
	      return 'Default';
	    }

	    if (lane & TransitionHydrationLane) {
	      return 'TransitionHydration';
	    }

	    if (lane & TransitionLanes) {
	      return 'Transition';
	    }

	    if (lane & RetryLanes) {
	      return 'Retry';
	    }

	    if (lane & SelectiveHydrationLane) {
	      return 'SelectiveHydration';
	    }

	    if (lane & IdleHydrationLane) {
	      return 'IdleHydration';
	    }

	    if (lane & IdleLane) {
	      return 'Idle';
	    }

	    if (lane & OffscreenLane) {
	      return 'Offscreen';
	    }
	  }
	}
	var NoTimestamp = -1;
	var nextTransitionLane = TransitionLane1;
	var nextRetryLane = RetryLane1;

	function getHighestPriorityLanes(lanes) {
	  switch (getHighestPriorityLane(lanes)) {
	    case SyncLane:
	      return SyncLane;

	    case InputContinuousHydrationLane:
	      return InputContinuousHydrationLane;

	    case InputContinuousLane:
	      return InputContinuousLane;

	    case DefaultHydrationLane:
	      return DefaultHydrationLane;

	    case DefaultLane:
	      return DefaultLane;

	    case TransitionHydrationLane:
	      return TransitionHydrationLane;

	    case TransitionLane1:
	    case TransitionLane2:
	    case TransitionLane3:
	    case TransitionLane4:
	    case TransitionLane5:
	    case TransitionLane6:
	    case TransitionLane7:
	    case TransitionLane8:
	    case TransitionLane9:
	    case TransitionLane10:
	    case TransitionLane11:
	    case TransitionLane12:
	    case TransitionLane13:
	    case TransitionLane14:
	    case TransitionLane15:
	    case TransitionLane16:
	      return lanes & TransitionLanes;

	    case RetryLane1:
	    case RetryLane2:
	    case RetryLane3:
	    case RetryLane4:
	    case RetryLane5:
	      return lanes & RetryLanes;

	    case SelectiveHydrationLane:
	      return SelectiveHydrationLane;

	    case IdleHydrationLane:
	      return IdleHydrationLane;

	    case IdleLane:
	      return IdleLane;

	    case OffscreenLane:
	      return OffscreenLane;

	    default:
	      {
	        error('Should have found matching lanes. This is a bug in React.');
	      } // This shouldn't be reachable, but as a fallback, return the entire bitmask.


	      return lanes;
	  }
	}

	function getNextLanes(root, wipLanes) {
	  // Early bailout if there's no pending work left.
	  var pendingLanes = root.pendingLanes;

	  if (pendingLanes === NoLanes) {
	    return NoLanes;
	  }

	  var nextLanes = NoLanes;
	  var suspendedLanes = root.suspendedLanes;
	  var pingedLanes = root.pingedLanes; // Do not work on any idle work until all the non-idle work has finished,
	  // even if the work is suspended.

	  var nonIdlePendingLanes = pendingLanes & NonIdleLanes;

	  if (nonIdlePendingLanes !== NoLanes) {
	    var nonIdleUnblockedLanes = nonIdlePendingLanes & ~suspendedLanes;

	    if (nonIdleUnblockedLanes !== NoLanes) {
	      nextLanes = getHighestPriorityLanes(nonIdleUnblockedLanes);
	    } else {
	      var nonIdlePingedLanes = nonIdlePendingLanes & pingedLanes;

	      if (nonIdlePingedLanes !== NoLanes) {
	        nextLanes = getHighestPriorityLanes(nonIdlePingedLanes);
	      }
	    }
	  } else {
	    // The only remaining work is Idle.
	    var unblockedLanes = pendingLanes & ~suspendedLanes;

	    if (unblockedLanes !== NoLanes) {
	      nextLanes = getHighestPriorityLanes(unblockedLanes);
	    } else {
	      if (pingedLanes !== NoLanes) {
	        nextLanes = getHighestPriorityLanes(pingedLanes);
	      }
	    }
	  }

	  if (nextLanes === NoLanes) {
	    // This should only be reachable if we're suspended
	    // TODO: Consider warning in this path if a fallback timer is not scheduled.
	    return NoLanes;
	  } // If we're already in the middle of a render, switching lanes will interrupt
	  // it and we'll lose our progress. We should only do this if the new lanes are
	  // higher priority.


	  if (wipLanes !== NoLanes && wipLanes !== nextLanes && // If we already suspended with a delay, then interrupting is fine. Don't
	  // bother waiting until the root is complete.
	  (wipLanes & suspendedLanes) === NoLanes) {
	    var nextLane = getHighestPriorityLane(nextLanes);
	    var wipLane = getHighestPriorityLane(wipLanes);

	    if ( // Tests whether the next lane is equal or lower priority than the wip
	    // one. This works because the bits decrease in priority as you go left.
	    nextLane >= wipLane || // Default priority updates should not interrupt transition updates. The
	    // only difference between default updates and transition updates is that
	    // default updates do not support refresh transitions.
	    nextLane === DefaultLane && (wipLane & TransitionLanes) !== NoLanes) {
	      // Keep working on the existing in-progress tree. Do not interrupt.
	      return wipLanes;
	    }
	  }

	  if ((nextLanes & InputContinuousLane) !== NoLanes) {
	    // When updates are sync by default, we entangle continuous priority updates
	    // and default updates, so they render in the same batch. The only reason
	    // they use separate lanes is because continuous updates should interrupt
	    // transitions, but default updates should not.
	    nextLanes |= pendingLanes & DefaultLane;
	  } // Check for entangled lanes and add them to the batch.
	  //
	  // A lane is said to be entangled with another when it's not allowed to render
	  // in a batch that does not also include the other lane. Typically we do this
	  // when multiple updates have the same source, and we only want to respond to
	  // the most recent event from that source.
	  //
	  // Note that we apply entanglements *after* checking for partial work above.
	  // This means that if a lane is entangled during an interleaved event while
	  // it's already rendering, we won't interrupt it. This is intentional, since
	  // entanglement is usually "best effort": we'll try our best to render the
	  // lanes in the same batch, but it's not worth throwing out partially
	  // completed work in order to do it.
	  // TODO: Reconsider this. The counter-argument is that the partial work
	  // represents an intermediate state, which we don't want to show to the user.
	  // And by spending extra time finishing it, we're increasing the amount of
	  // time it takes to show the final state, which is what they are actually
	  // waiting for.
	  //
	  // For those exceptions where entanglement is semantically important, like
	  // useMutableSource, we should ensure that there is no partial work at the
	  // time we apply the entanglement.


	  var entangledLanes = root.entangledLanes;

	  if (entangledLanes !== NoLanes) {
	    var entanglements = root.entanglements;
	    var lanes = nextLanes & entangledLanes;

	    while (lanes > 0) {
	      var index = pickArbitraryLaneIndex(lanes);
	      var lane = 1 << index;
	      nextLanes |= entanglements[index];
	      lanes &= ~lane;
	    }
	  }

	  return nextLanes;
	}
	function getMostRecentEventTime(root, lanes) {
	  var eventTimes = root.eventTimes;
	  var mostRecentEventTime = NoTimestamp;

	  while (lanes > 0) {
	    var index = pickArbitraryLaneIndex(lanes);
	    var lane = 1 << index;
	    var eventTime = eventTimes[index];

	    if (eventTime > mostRecentEventTime) {
	      mostRecentEventTime = eventTime;
	    }

	    lanes &= ~lane;
	  }

	  return mostRecentEventTime;
	}

	function computeExpirationTime(lane, currentTime) {
	  switch (lane) {
	    case SyncLane:
	    case InputContinuousHydrationLane:
	    case InputContinuousLane:
	      // User interactions should expire slightly more quickly.
	      //
	      // NOTE: This is set to the corresponding constant as in Scheduler.js.
	      // When we made it larger, a product metric in www regressed, suggesting
	      // there's a user interaction that's being starved by a series of
	      // synchronous updates. If that theory is correct, the proper solution is
	      // to fix the starvation. However, this scenario supports the idea that
	      // expiration times are an important safeguard when starvation
	      // does happen.
	      return currentTime + 250;

	    case DefaultHydrationLane:
	    case DefaultLane:
	    case TransitionHydrationLane:
	    case TransitionLane1:
	    case TransitionLane2:
	    case TransitionLane3:
	    case TransitionLane4:
	    case TransitionLane5:
	    case TransitionLane6:
	    case TransitionLane7:
	    case TransitionLane8:
	    case TransitionLane9:
	    case TransitionLane10:
	    case TransitionLane11:
	    case TransitionLane12:
	    case TransitionLane13:
	    case TransitionLane14:
	    case TransitionLane15:
	    case TransitionLane16:
	      return currentTime + 5000;

	    case RetryLane1:
	    case RetryLane2:
	    case RetryLane3:
	    case RetryLane4:
	    case RetryLane5:
	      // TODO: Retries should be allowed to expire if they are CPU bound for
	      // too long, but when I made this change it caused a spike in browser
	      // crashes. There must be some other underlying bug; not super urgent but
	      // ideally should figure out why and fix it. Unfortunately we don't have
	      // a repro for the crashes, only detected via production metrics.
	      return NoTimestamp;

	    case SelectiveHydrationLane:
	    case IdleHydrationLane:
	    case IdleLane:
	    case OffscreenLane:
	      // Anything idle priority or lower should never expire.
	      return NoTimestamp;

	    default:
	      {
	        error('Should have found matching lanes. This is a bug in React.');
	      }

	      return NoTimestamp;
	  }
	}

	function markStarvedLanesAsExpired(root, currentTime) {
	  // TODO: This gets called every time we yield. We can optimize by storing
	  // the earliest expiration time on the root. Then use that to quickly bail out
	  // of this function.
	  var pendingLanes = root.pendingLanes;
	  var suspendedLanes = root.suspendedLanes;
	  var pingedLanes = root.pingedLanes;
	  var expirationTimes = root.expirationTimes; // Iterate through the pending lanes and check if we've reached their
	  // expiration time. If so, we'll assume the update is being starved and mark
	  // it as expired to force it to finish.

	  var lanes = pendingLanes;

	  while (lanes > 0) {
	    var index = pickArbitraryLaneIndex(lanes);
	    var lane = 1 << index;
	    var expirationTime = expirationTimes[index];

	    if (expirationTime === NoTimestamp) {
	      // Found a pending lane with no expiration time. If it's not suspended, or
	      // if it's pinged, assume it's CPU-bound. Compute a new expiration time
	      // using the current time.
	      if ((lane & suspendedLanes) === NoLanes || (lane & pingedLanes) !== NoLanes) {
	        // Assumes timestamps are monotonically increasing.
	        expirationTimes[index] = computeExpirationTime(lane, currentTime);
	      }
	    } else if (expirationTime <= currentTime) {
	      // This lane expired
	      root.expiredLanes |= lane;
	    }

	    lanes &= ~lane;
	  }
	} // This returns the highest priority pending lanes regardless of whether they
	// are suspended.

	function getHighestPriorityPendingLanes(root) {
	  return getHighestPriorityLanes(root.pendingLanes);
	}
	function getLanesToRetrySynchronouslyOnError(root) {
	  var everythingButOffscreen = root.pendingLanes & ~OffscreenLane;

	  if (everythingButOffscreen !== NoLanes) {
	    return everythingButOffscreen;
	  }

	  if (everythingButOffscreen & OffscreenLane) {
	    return OffscreenLane;
	  }

	  return NoLanes;
	}
	function includesSyncLane(lanes) {
	  return (lanes & SyncLane) !== NoLanes;
	}
	function includesNonIdleWork(lanes) {
	  return (lanes & NonIdleLanes) !== NoLanes;
	}
	function includesOnlyRetries(lanes) {
	  return (lanes & RetryLanes) === lanes;
	}
	function includesOnlyNonUrgentLanes(lanes) {
	  var UrgentLanes = SyncLane | InputContinuousLane | DefaultLane;
	  return (lanes & UrgentLanes) === NoLanes;
	}
	function includesOnlyTransitions(lanes) {
	  return (lanes & TransitionLanes) === lanes;
	}
	function includesBlockingLane(root, lanes) {

	  var SyncDefaultLanes = InputContinuousHydrationLane | InputContinuousLane | DefaultHydrationLane | DefaultLane;
	  return (lanes & SyncDefaultLanes) !== NoLanes;
	}
	function includesExpiredLane(root, lanes) {
	  // This is a separate check from includesBlockingLane because a lane can
	  // expire after a render has already started.
	  return (lanes & root.expiredLanes) !== NoLanes;
	}
	function isTransitionLane(lane) {
	  return (lane & TransitionLanes) !== NoLanes;
	}
	function claimNextTransitionLane() {
	  // Cycle through the lanes, assigning each new transition to the next lane.
	  // In most cases, this means every transition gets its own lane, until we
	  // run out of lanes and cycle back to the beginning.
	  var lane = nextTransitionLane;
	  nextTransitionLane <<= 1;

	  if ((nextTransitionLane & TransitionLanes) === NoLanes) {
	    nextTransitionLane = TransitionLane1;
	  }

	  return lane;
	}
	function claimNextRetryLane() {
	  var lane = nextRetryLane;
	  nextRetryLane <<= 1;

	  if ((nextRetryLane & RetryLanes) === NoLanes) {
	    nextRetryLane = RetryLane1;
	  }

	  return lane;
	}
	function getHighestPriorityLane(lanes) {
	  return lanes & -lanes;
	}
	function pickArbitraryLane(lanes) {
	  // This wrapper function gets inlined. Only exists so to communicate that it
	  // doesn't matter which bit is selected; you can pick any bit without
	  // affecting the algorithms where its used. Here I'm using
	  // getHighestPriorityLane because it requires the fewest operations.
	  return getHighestPriorityLane(lanes);
	}

	function pickArbitraryLaneIndex(lanes) {
	  return 31 - clz32(lanes);
	}

	function laneToIndex(lane) {
	  return pickArbitraryLaneIndex(lane);
	}

	function includesSomeLane(a, b) {
	  return (a & b) !== NoLanes;
	}
	function isSubsetOfLanes(set, subset) {
	  return (set & subset) === subset;
	}
	function mergeLanes(a, b) {
	  return a | b;
	}
	function removeLanes(set, subset) {
	  return set & ~subset;
	}
	function intersectLanes(a, b) {
	  return a & b;
	} // Seems redundant, but it changes the type from a single lane (used for
	// updates) to a group of lanes (used for flushing work).

	function laneToLanes(lane) {
	  return lane;
	}
	function higherPriorityLane(a, b) {
	  // This works because the bit ranges decrease in priority as you go left.
	  return a !== NoLane && a < b ? a : b;
	}
	function createLaneMap(initial) {
	  // Intentionally pushing one by one.
	  // https://v8.dev/blog/elements-kinds#avoid-creating-holes
	  var laneMap = [];

	  for (var i = 0; i < TotalLanes; i++) {
	    laneMap.push(initial);
	  }

	  return laneMap;
	}
	function markRootUpdated(root, updateLane, eventTime) {
	  root.pendingLanes |= updateLane; // If there are any suspended transitions, it's possible this new update
	  // could unblock them. Clear the suspended lanes so that we can try rendering
	  // them again.
	  //
	  // TODO: We really only need to unsuspend only lanes that are in the
	  // `subtreeLanes` of the updated fiber, or the update lanes of the return
	  // path. This would exclude suspended updates in an unrelated sibling tree,
	  // since there's no way for this update to unblock it.
	  //
	  // We don't do this if the incoming update is idle, because we never process
	  // idle updates until after all the regular updates have finished; there's no
	  // way it could unblock a transition.

	  if (updateLane !== IdleLane) {
	    root.suspendedLanes = NoLanes;
	    root.pingedLanes = NoLanes;
	  }

	  var eventTimes = root.eventTimes;
	  var index = laneToIndex(updateLane); // We can always overwrite an existing timestamp because we prefer the most
	  // recent event, and we assume time is monotonically increasing.

	  eventTimes[index] = eventTime;
	}
	function markRootSuspended(root, suspendedLanes) {
	  root.suspendedLanes |= suspendedLanes;
	  root.pingedLanes &= ~suspendedLanes; // The suspended lanes are no longer CPU-bound. Clear their expiration times.

	  var expirationTimes = root.expirationTimes;
	  var lanes = suspendedLanes;

	  while (lanes > 0) {
	    var index = pickArbitraryLaneIndex(lanes);
	    var lane = 1 << index;
	    expirationTimes[index] = NoTimestamp;
	    lanes &= ~lane;
	  }
	}
	function markRootPinged(root, pingedLanes, eventTime) {
	  root.pingedLanes |= root.suspendedLanes & pingedLanes;
	}
	function markRootFinished(root, remainingLanes) {
	  var noLongerPendingLanes = root.pendingLanes & ~remainingLanes;
	  root.pendingLanes = remainingLanes; // Let's try everything again

	  root.suspendedLanes = NoLanes;
	  root.pingedLanes = NoLanes;
	  root.expiredLanes &= remainingLanes;
	  root.mutableReadLanes &= remainingLanes;
	  root.entangledLanes &= remainingLanes;
	  var entanglements = root.entanglements;
	  var eventTimes = root.eventTimes;
	  var expirationTimes = root.expirationTimes; // Clear the lanes that no longer have pending work

	  var lanes = noLongerPendingLanes;

	  while (lanes > 0) {
	    var index = pickArbitraryLaneIndex(lanes);
	    var lane = 1 << index;
	    entanglements[index] = NoLanes;
	    eventTimes[index] = NoTimestamp;
	    expirationTimes[index] = NoTimestamp;
	    lanes &= ~lane;
	  }
	}
	function markRootEntangled(root, entangledLanes) {
	  // In addition to entangling each of the given lanes with each other, we also
	  // have to consider _transitive_ entanglements. For each lane that is already
	  // entangled with *any* of the given lanes, that lane is now transitively
	  // entangled with *all* the given lanes.
	  //
	  // Translated: If C is entangled with A, then entangling A with B also
	  // entangles C with B.
	  //
	  // If this is hard to grasp, it might help to intentionally break this
	  // function and look at the tests that fail in ReactTransition-test.js. Try
	  // commenting out one of the conditions below.
	  var rootEntangledLanes = root.entangledLanes |= entangledLanes;
	  var entanglements = root.entanglements;
	  var lanes = rootEntangledLanes;

	  while (lanes) {
	    var index = pickArbitraryLaneIndex(lanes);
	    var lane = 1 << index;

	    if ( // Is this one of the newly entangled lanes?
	    lane & entangledLanes | // Is this lane transitively entangled with the newly entangled lanes?
	    entanglements[index] & entangledLanes) {
	      entanglements[index] |= entangledLanes;
	    }

	    lanes &= ~lane;
	  }
	}
	function getBumpedLaneForHydration(root, renderLanes) {
	  var renderLane = getHighestPriorityLane(renderLanes);
	  var lane;

	  switch (renderLane) {
	    case InputContinuousLane:
	      lane = InputContinuousHydrationLane;
	      break;

	    case DefaultLane:
	      lane = DefaultHydrationLane;
	      break;

	    case TransitionLane1:
	    case TransitionLane2:
	    case TransitionLane3:
	    case TransitionLane4:
	    case TransitionLane5:
	    case TransitionLane6:
	    case TransitionLane7:
	    case TransitionLane8:
	    case TransitionLane9:
	    case TransitionLane10:
	    case TransitionLane11:
	    case TransitionLane12:
	    case TransitionLane13:
	    case TransitionLane14:
	    case TransitionLane15:
	    case TransitionLane16:
	    case RetryLane1:
	    case RetryLane2:
	    case RetryLane3:
	    case RetryLane4:
	    case RetryLane5:
	      lane = TransitionHydrationLane;
	      break;

	    case IdleLane:
	      lane = IdleHydrationLane;
	      break;

	    default:
	      // Everything else is already either a hydration lane, or shouldn't
	      // be retried at a hydration lane.
	      lane = NoLane;
	      break;
	  } // Check if the lane we chose is suspended. If so, that indicates that we
	  // already attempted and failed to hydrate at that level. Also check if we're
	  // already rendering that lane, which is rare but could happen.


	  if ((lane & (root.suspendedLanes | renderLanes)) !== NoLane) {
	    // Give up trying to hydrate and fall back to client render.
	    return NoLane;
	  }

	  return lane;
	}
	function addFiberToLanesMap(root, fiber, lanes) {

	  if (!isDevToolsPresent) {
	    return;
	  }

	  var pendingUpdatersLaneMap = root.pendingUpdatersLaneMap;

	  while (lanes > 0) {
	    var index = laneToIndex(lanes);
	    var lane = 1 << index;
	    var updaters = pendingUpdatersLaneMap[index];
	    updaters.add(fiber);
	    lanes &= ~lane;
	  }
	}
	function movePendingFibersToMemoized(root, lanes) {

	  if (!isDevToolsPresent) {
	    return;
	  }

	  var pendingUpdatersLaneMap = root.pendingUpdatersLaneMap;
	  var memoizedUpdaters = root.memoizedUpdaters;

	  while (lanes > 0) {
	    var index = laneToIndex(lanes);
	    var lane = 1 << index;
	    var updaters = pendingUpdatersLaneMap[index];

	    if (updaters.size > 0) {
	      updaters.forEach(function (fiber) {
	        var alternate = fiber.alternate;

	        if (alternate === null || !memoizedUpdaters.has(alternate)) {
	          memoizedUpdaters.add(fiber);
	        }
	      });
	      updaters.clear();
	    }

	    lanes &= ~lane;
	  }
	}
	function getTransitionsForLanes(root, lanes) {
	  {
	    return null;
	  }
	}

	var DiscreteEventPriority = SyncLane;
	var ContinuousEventPriority = InputContinuousLane;
	var DefaultEventPriority = DefaultLane;
	var IdleEventPriority = IdleLane;
	var currentUpdatePriority = NoLane;
	function getCurrentUpdatePriority() {
	  return currentUpdatePriority;
	}
	function setCurrentUpdatePriority(newPriority) {
	  currentUpdatePriority = newPriority;
	}
	function runWithPriority(priority, fn) {
	  var previousPriority = currentUpdatePriority;

	  try {
	    currentUpdatePriority = priority;
	    return fn();
	  } finally {
	    currentUpdatePriority = previousPriority;
	  }
	}
	function higherEventPriority(a, b) {
	  return a !== 0 && a < b ? a : b;
	}
	function lowerEventPriority(a, b) {
	  return a === 0 || a > b ? a : b;
	}
	function isHigherEventPriority(a, b) {
	  return a !== 0 && a < b;
	}
	function lanesToEventPriority(lanes) {
	  var lane = getHighestPriorityLane(lanes);

	  if (!isHigherEventPriority(DiscreteEventPriority, lane)) {
	    return DiscreteEventPriority;
	  }

	  if (!isHigherEventPriority(ContinuousEventPriority, lane)) {
	    return ContinuousEventPriority;
	  }

	  if (includesNonIdleWork(lane)) {
	    return DefaultEventPriority;
	  }

	  return IdleEventPriority;
	}

	// This is imported by the event replaying implementation in React DOM. It's
	// in a separate file to break a circular dependency between the renderer and
	// the reconciler.
	function isRootDehydrated(root) {
	  var currentState = root.current.memoizedState;
	  return currentState.isDehydrated;
	}

	var _attemptSynchronousHydration;

	function setAttemptSynchronousHydration(fn) {
	  _attemptSynchronousHydration = fn;
	}
	function attemptSynchronousHydration(fiber) {
	  _attemptSynchronousHydration(fiber);
	}
	var attemptContinuousHydration;
	function setAttemptContinuousHydration(fn) {
	  attemptContinuousHydration = fn;
	}
	var attemptHydrationAtCurrentPriority;
	function setAttemptHydrationAtCurrentPriority(fn) {
	  attemptHydrationAtCurrentPriority = fn;
	}
	var getCurrentUpdatePriority$1;
	function setGetCurrentUpdatePriority(fn) {
	  getCurrentUpdatePriority$1 = fn;
	}
	var attemptHydrationAtPriority;
	function setAttemptHydrationAtPriority(fn) {
	  attemptHydrationAtPriority = fn;
	} // TODO: Upgrade this definition once we're on a newer version of Flow that
	// has this definition built-in.

	var hasScheduledReplayAttempt = false; // The queue of discrete events to be replayed.

	var queuedDiscreteEvents = []; // Indicates if any continuous event targets are non-null for early bailout.
	// if the last target was dehydrated.

	var queuedFocus = null;
	var queuedDrag = null;
	var queuedMouse = null; // For pointer events there can be one latest event per pointerId.

	var queuedPointers = new Map();
	var queuedPointerCaptures = new Map(); // We could consider replaying selectionchange and touchmoves too.

	var queuedExplicitHydrationTargets = [];
	var discreteReplayableEvents = ['mousedown', 'mouseup', 'touchcancel', 'touchend', 'touchstart', 'auxclick', 'dblclick', 'pointercancel', 'pointerdown', 'pointerup', 'dragend', 'dragstart', 'drop', 'compositionend', 'compositionstart', 'keydown', 'keypress', 'keyup', 'input', 'textInput', // Intentionally camelCase
	'copy', 'cut', 'paste', 'click', 'change', 'contextmenu', 'reset', 'submit'];
	function isDiscreteEventThatRequiresHydration(eventType) {
	  return discreteReplayableEvents.indexOf(eventType) > -1;
	}

	function createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
	  return {
	    blockedOn: blockedOn,
	    domEventName: domEventName,
	    eventSystemFlags: eventSystemFlags,
	    nativeEvent: nativeEvent,
	    targetContainers: [targetContainer]
	  };
	}

	function clearIfContinuousEvent(domEventName, nativeEvent) {
	  switch (domEventName) {
	    case 'focusin':
	    case 'focusout':
	      queuedFocus = null;
	      break;

	    case 'dragenter':
	    case 'dragleave':
	      queuedDrag = null;
	      break;

	    case 'mouseover':
	    case 'mouseout':
	      queuedMouse = null;
	      break;

	    case 'pointerover':
	    case 'pointerout':
	      {
	        var pointerId = nativeEvent.pointerId;
	        queuedPointers.delete(pointerId);
	        break;
	      }

	    case 'gotpointercapture':
	    case 'lostpointercapture':
	      {
	        var _pointerId = nativeEvent.pointerId;
	        queuedPointerCaptures.delete(_pointerId);
	        break;
	      }
	  }
	}

	function accumulateOrCreateContinuousQueuedReplayableEvent(existingQueuedEvent, blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
	  if (existingQueuedEvent === null || existingQueuedEvent.nativeEvent !== nativeEvent) {
	    var queuedEvent = createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);

	    if (blockedOn !== null) {
	      var _fiber2 = getInstanceFromNode(blockedOn);

	      if (_fiber2 !== null) {
	        // Attempt to increase the priority of this target.
	        attemptContinuousHydration(_fiber2);
	      }
	    }

	    return queuedEvent;
	  } // If we have already queued this exact event, then it's because
	  // the different event systems have different DOM event listeners.
	  // We can accumulate the flags, and the targetContainers, and
	  // store a single event to be replayed.


	  existingQueuedEvent.eventSystemFlags |= eventSystemFlags;
	  var targetContainers = existingQueuedEvent.targetContainers;

	  if (targetContainer !== null && targetContainers.indexOf(targetContainer) === -1) {
	    targetContainers.push(targetContainer);
	  }

	  return existingQueuedEvent;
	}

	function queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
	  // These set relatedTarget to null because the replayed event will be treated as if we
	  // moved from outside the window (no target) onto the target once it hydrates.
	  // Instead of mutating we could clone the event.
	  switch (domEventName) {
	    case 'focusin':
	      {
	        var focusEvent = nativeEvent;
	        queuedFocus = accumulateOrCreateContinuousQueuedReplayableEvent(queuedFocus, blockedOn, domEventName, eventSystemFlags, targetContainer, focusEvent);
	        return true;
	      }

	    case 'dragenter':
	      {
	        var dragEvent = nativeEvent;
	        queuedDrag = accumulateOrCreateContinuousQueuedReplayableEvent(queuedDrag, blockedOn, domEventName, eventSystemFlags, targetContainer, dragEvent);
	        return true;
	      }

	    case 'mouseover':
	      {
	        var mouseEvent = nativeEvent;
	        queuedMouse = accumulateOrCreateContinuousQueuedReplayableEvent(queuedMouse, blockedOn, domEventName, eventSystemFlags, targetContainer, mouseEvent);
	        return true;
	      }

	    case 'pointerover':
	      {
	        var pointerEvent = nativeEvent;
	        var pointerId = pointerEvent.pointerId;
	        queuedPointers.set(pointerId, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointers.get(pointerId) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, pointerEvent));
	        return true;
	      }

	    case 'gotpointercapture':
	      {
	        var _pointerEvent = nativeEvent;
	        var _pointerId2 = _pointerEvent.pointerId;
	        queuedPointerCaptures.set(_pointerId2, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointerCaptures.get(_pointerId2) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, _pointerEvent));
	        return true;
	      }
	  }

	  return false;
	} // Check if this target is unblocked. Returns true if it's unblocked.

	function attemptExplicitHydrationTarget(queuedTarget) {
	  // TODO: This function shares a lot of logic with findInstanceBlockingEvent.
	  // Try to unify them. It's a bit tricky since it would require two return
	  // values.
	  var targetInst = getClosestInstanceFromNode(queuedTarget.target);

	  if (targetInst !== null) {
	    var nearestMounted = getNearestMountedFiber(targetInst);

	    if (nearestMounted !== null) {
	      var tag = nearestMounted.tag;

	      if (tag === SuspenseComponent) {
	        var instance = getSuspenseInstanceFromFiber(nearestMounted);

	        if (instance !== null) {
	          // We're blocked on hydrating this boundary.
	          // Increase its priority.
	          queuedTarget.blockedOn = instance;
	          attemptHydrationAtPriority(queuedTarget.priority, function () {
	            attemptHydrationAtCurrentPriority(nearestMounted);
	          });
	          return;
	        }
	      } else if (tag === HostRoot) {
	        var root = nearestMounted.stateNode;

	        if (isRootDehydrated(root)) {
	          queuedTarget.blockedOn = getContainerFromFiber(nearestMounted); // We don't currently have a way to increase the priority of
	          // a root other than sync.

	          return;
	        }
	      }
	    }
	  }

	  queuedTarget.blockedOn = null;
	}

	function queueExplicitHydrationTarget(target) {
	  // TODO: This will read the priority if it's dispatched by the React
	  // event system but not native events. Should read window.event.type, like
	  // we do for updates (getCurrentEventPriority).
	  var updatePriority = getCurrentUpdatePriority$1();
	  var queuedTarget = {
	    blockedOn: null,
	    target: target,
	    priority: updatePriority
	  };
	  var i = 0;

	  for (; i < queuedExplicitHydrationTargets.length; i++) {
	    // Stop once we hit the first target with lower priority than
	    if (!isHigherEventPriority(updatePriority, queuedExplicitHydrationTargets[i].priority)) {
	      break;
	    }
	  }

	  queuedExplicitHydrationTargets.splice(i, 0, queuedTarget);

	  if (i === 0) {
	    attemptExplicitHydrationTarget(queuedTarget);
	  }
	}

	function attemptReplayContinuousQueuedEvent(queuedEvent) {
	  if (queuedEvent.blockedOn !== null) {
	    return false;
	  }

	  var targetContainers = queuedEvent.targetContainers;

	  while (targetContainers.length > 0) {
	    var targetContainer = targetContainers[0];
	    var nextBlockedOn = findInstanceBlockingEvent(queuedEvent.domEventName, queuedEvent.eventSystemFlags, targetContainer, queuedEvent.nativeEvent);

	    if (nextBlockedOn === null) {
	      {
	        var nativeEvent = queuedEvent.nativeEvent;
	        var nativeEventClone = new nativeEvent.constructor(nativeEvent.type, nativeEvent);
	        setReplayingEvent(nativeEventClone);
	        nativeEvent.target.dispatchEvent(nativeEventClone);
	        resetReplayingEvent();
	      }
	    } else {
	      // We're still blocked. Try again later.
	      var _fiber3 = getInstanceFromNode(nextBlockedOn);

	      if (_fiber3 !== null) {
	        attemptContinuousHydration(_fiber3);
	      }

	      queuedEvent.blockedOn = nextBlockedOn;
	      return false;
	    } // This target container was successfully dispatched. Try the next.


	    targetContainers.shift();
	  }

	  return true;
	}

	function attemptReplayContinuousQueuedEventInMap(queuedEvent, key, map) {
	  if (attemptReplayContinuousQueuedEvent(queuedEvent)) {
	    map.delete(key);
	  }
	}

	function replayUnblockedEvents() {
	  hasScheduledReplayAttempt = false;


	  if (queuedFocus !== null && attemptReplayContinuousQueuedEvent(queuedFocus)) {
	    queuedFocus = null;
	  }

	  if (queuedDrag !== null && attemptReplayContinuousQueuedEvent(queuedDrag)) {
	    queuedDrag = null;
	  }

	  if (queuedMouse !== null && attemptReplayContinuousQueuedEvent(queuedMouse)) {
	    queuedMouse = null;
	  }

	  queuedPointers.forEach(attemptReplayContinuousQueuedEventInMap);
	  queuedPointerCaptures.forEach(attemptReplayContinuousQueuedEventInMap);
	}

	function scheduleCallbackIfUnblocked(queuedEvent, unblocked) {
	  if (queuedEvent.blockedOn === unblocked) {
	    queuedEvent.blockedOn = null;

	    if (!hasScheduledReplayAttempt) {
	      hasScheduledReplayAttempt = true; // Schedule a callback to attempt replaying as many events as are
	      // now unblocked. This first might not actually be unblocked yet.
	      // We could check it early to avoid scheduling an unnecessary callback.

	      Scheduler.unstable_scheduleCallback(Scheduler.unstable_NormalPriority, replayUnblockedEvents);
	    }
	  }
	}

	function retryIfBlockedOn(unblocked) {
	  // Mark anything that was blocked on this as no longer blocked
	  // and eligible for a replay.
	  if (queuedDiscreteEvents.length > 0) {
	    scheduleCallbackIfUnblocked(queuedDiscreteEvents[0], unblocked); // This is a exponential search for each boundary that commits. I think it's
	    // worth it because we expect very few discrete events to queue up and once
	    // we are actually fully unblocked it will be fast to replay them.

	    for (var i = 1; i < queuedDiscreteEvents.length; i++) {
	      var queuedEvent = queuedDiscreteEvents[i];

	      if (queuedEvent.blockedOn === unblocked) {
	        queuedEvent.blockedOn = null;
	      }
	    }
	  }

	  if (queuedFocus !== null) {
	    scheduleCallbackIfUnblocked(queuedFocus, unblocked);
	  }

	  if (queuedDrag !== null) {
	    scheduleCallbackIfUnblocked(queuedDrag, unblocked);
	  }

	  if (queuedMouse !== null) {
	    scheduleCallbackIfUnblocked(queuedMouse, unblocked);
	  }

	  var unblock = function (queuedEvent) {
	    return scheduleCallbackIfUnblocked(queuedEvent, unblocked);
	  };

	  queuedPointers.forEach(unblock);
	  queuedPointerCaptures.forEach(unblock);

	  for (var _i = 0; _i < queuedExplicitHydrationTargets.length; _i++) {
	    var queuedTarget = queuedExplicitHydrationTargets[_i];

	    if (queuedTarget.blockedOn === unblocked) {
	      queuedTarget.blockedOn = null;
	    }
	  }

	  while (queuedExplicitHydrationTargets.length > 0) {
	    var nextExplicitTarget = queuedExplicitHydrationTargets[0];

	    if (nextExplicitTarget.blockedOn !== null) {
	      // We're still blocked.
	      break;
	    } else {
	      attemptExplicitHydrationTarget(nextExplicitTarget);

	      if (nextExplicitTarget.blockedOn === null) {
	        // We're unblocked.
	        queuedExplicitHydrationTargets.shift();
	      }
	    }
	  }
	}

	var ReactCurrentBatchConfig = ReactSharedInternals.ReactCurrentBatchConfig; // TODO: can we stop exporting these?

	var _enabled = true; // This is exported in FB builds for use by legacy FB layer infra.
	// We'd like to remove this but it's not clear if this is safe.

	function setEnabled(enabled) {
	  _enabled = !!enabled;
	}
	function isEnabled() {
	  return _enabled;
	}
	function createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags) {
	  var eventPriority = getEventPriority(domEventName);
	  var listenerWrapper;

	  switch (eventPriority) {
	    case DiscreteEventPriority:
	      listenerWrapper = dispatchDiscreteEvent;
	      break;

	    case ContinuousEventPriority:
	      listenerWrapper = dispatchContinuousEvent;
	      break;

	    case DefaultEventPriority:
	    default:
	      listenerWrapper = dispatchEvent;
	      break;
	  }

	  return listenerWrapper.bind(null, domEventName, eventSystemFlags, targetContainer);
	}

	function dispatchDiscreteEvent(domEventName, eventSystemFlags, container, nativeEvent) {
	  var previousPriority = getCurrentUpdatePriority();
	  var prevTransition = ReactCurrentBatchConfig.transition;
	  ReactCurrentBatchConfig.transition = null;

	  try {
	    setCurrentUpdatePriority(DiscreteEventPriority);
	    dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);
	  } finally {
	    setCurrentUpdatePriority(previousPriority);
	    ReactCurrentBatchConfig.transition = prevTransition;
	  }
	}

	function dispatchContinuousEvent(domEventName, eventSystemFlags, container, nativeEvent) {
	  var previousPriority = getCurrentUpdatePriority();
	  var prevTransition = ReactCurrentBatchConfig.transition;
	  ReactCurrentBatchConfig.transition = null;

	  try {
	    setCurrentUpdatePriority(ContinuousEventPriority);
	    dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);
	  } finally {
	    setCurrentUpdatePriority(previousPriority);
	    ReactCurrentBatchConfig.transition = prevTransition;
	  }
	}

	function dispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
	  if (!_enabled) {
	    return;
	  }

	  {
	    dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay(domEventName, eventSystemFlags, targetContainer, nativeEvent);
	  }
	}

	function dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
	  var blockedOn = findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);

	  if (blockedOn === null) {
	    dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, return_targetInst, targetContainer);
	    clearIfContinuousEvent(domEventName, nativeEvent);
	    return;
	  }

	  if (queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent)) {
	    nativeEvent.stopPropagation();
	    return;
	  } // We need to clear only if we didn't queue because
	  // queueing is accumulative.


	  clearIfContinuousEvent(domEventName, nativeEvent);

	  if (eventSystemFlags & IS_CAPTURE_PHASE && isDiscreteEventThatRequiresHydration(domEventName)) {
	    while (blockedOn !== null) {
	      var fiber = getInstanceFromNode(blockedOn);

	      if (fiber !== null) {
	        attemptSynchronousHydration(fiber);
	      }

	      var nextBlockedOn = findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);

	      if (nextBlockedOn === null) {
	        dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, return_targetInst, targetContainer);
	      }

	      if (nextBlockedOn === blockedOn) {
	        break;
	      }

	      blockedOn = nextBlockedOn;
	    }

	    if (blockedOn !== null) {
	      nativeEvent.stopPropagation();
	    }

	    return;
	  } // This is not replayable so we'll invoke it but without a target,
	  // in case the event system needs to trace it.


	  dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, null, targetContainer);
	}

	var return_targetInst = null; // Returns a SuspenseInstance or Container if it's blocked.
	// The return_targetInst field above is conceptually part of the return value.

	function findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
	  // TODO: Warn if _enabled is false.
	  return_targetInst = null;
	  var nativeEventTarget = getEventTarget(nativeEvent);
	  var targetInst = getClosestInstanceFromNode(nativeEventTarget);

	  if (targetInst !== null) {
	    var nearestMounted = getNearestMountedFiber(targetInst);

	    if (nearestMounted === null) {
	      // This tree has been unmounted already. Dispatch without a target.
	      targetInst = null;
	    } else {
	      var tag = nearestMounted.tag;

	      if (tag === SuspenseComponent) {
	        var instance = getSuspenseInstanceFromFiber(nearestMounted);

	        if (instance !== null) {
	          // Queue the event to be replayed later. Abort dispatching since we
	          // don't want this event dispatched twice through the event system.
	          // TODO: If this is the first discrete event in the queue. Schedule an increased
	          // priority for this boundary.
	          return instance;
	        } // This shouldn't happen, something went wrong but to avoid blocking
	        // the whole system, dispatch the event without a target.
	        // TODO: Warn.


	        targetInst = null;
	      } else if (tag === HostRoot) {
	        var root = nearestMounted.stateNode;

	        if (isRootDehydrated(root)) {
	          // If this happens during a replay something went wrong and it might block
	          // the whole system.
	          return getContainerFromFiber(nearestMounted);
	        }

	        targetInst = null;
	      } else if (nearestMounted !== targetInst) {
	        // If we get an event (ex: img onload) before committing that
	        // component's mount, ignore it for now (that is, treat it as if it was an
	        // event on a non-React tree). We might also consider queueing events and
	        // dispatching them after the mount.
	        targetInst = null;
	      }
	    }
	  }

	  return_targetInst = targetInst; // We're not blocked on anything.

	  return null;
	}
	function getEventPriority(domEventName) {
	  switch (domEventName) {
	    // Used by SimpleEventPlugin:
	    case 'cancel':
	    case 'click':
	    case 'close':
	    case 'contextmenu':
	    case 'copy':
	    case 'cut':
	    case 'auxclick':
	    case 'dblclick':
	    case 'dragend':
	    case 'dragstart':
	    case 'drop':
	    case 'focusin':
	    case 'focusout':
	    case 'input':
	    case 'invalid':
	    case 'keydown':
	    case 'keypress':
	    case 'keyup':
	    case 'mousedown':
	    case 'mouseup':
	    case 'paste':
	    case 'pause':
	    case 'play':
	    case 'pointercancel':
	    case 'pointerdown':
	    case 'pointerup':
	    case 'ratechange':
	    case 'reset':
	    case 'resize':
	    case 'seeked':
	    case 'submit':
	    case 'touchcancel':
	    case 'touchend':
	    case 'touchstart':
	    case 'volumechange': // Used by polyfills:
	    // eslint-disable-next-line no-fallthrough

	    case 'change':
	    case 'selectionchange':
	    case 'textInput':
	    case 'compositionstart':
	    case 'compositionend':
	    case 'compositionupdate': // Only enableCreateEventHandleAPI:
	    // eslint-disable-next-line no-fallthrough

	    case 'beforeblur':
	    case 'afterblur': // Not used by React but could be by user code:
	    // eslint-disable-next-line no-fallthrough

	    case 'beforeinput':
	    case 'blur':
	    case 'fullscreenchange':
	    case 'focus':
	    case 'hashchange':
	    case 'popstate':
	    case 'select':
	    case 'selectstart':
	      return DiscreteEventPriority;

	    case 'drag':
	    case 'dragenter':
	    case 'dragexit':
	    case 'dragleave':
	    case 'dragover':
	    case 'mousemove':
	    case 'mouseout':
	    case 'mouseover':
	    case 'pointermove':
	    case 'pointerout':
	    case 'pointerover':
	    case 'scroll':
	    case 'toggle':
	    case 'touchmove':
	    case 'wheel': // Not used by React but could be by user code:
	    // eslint-disable-next-line no-fallthrough

	    case 'mouseenter':
	    case 'mouseleave':
	    case 'pointerenter':
	    case 'pointerleave':
	      return ContinuousEventPriority;

	    case 'message':
	      {
	        // We might be in the Scheduler callback.
	        // Eventually this mechanism will be replaced by a check
	        // of the current priority on the native scheduler.
	        var schedulerPriority = getCurrentPriorityLevel();

	        switch (schedulerPriority) {
	          case ImmediatePriority:
	            return DiscreteEventPriority;

	          case UserBlockingPriority:
	            return ContinuousEventPriority;

	          case NormalPriority:
	          case LowPriority:
	            // TODO: Handle LowSchedulerPriority, somehow. Maybe the same lane as hydration.
	            return DefaultEventPriority;

	          case IdlePriority:
	            return IdleEventPriority;

	          default:
	            return DefaultEventPriority;
	        }
	      }

	    default:
	      return DefaultEventPriority;
	  }
	}

	function addEventBubbleListener(target, eventType, listener) {
	  target.addEventListener(eventType, listener, false);
	  return listener;
	}
	function addEventCaptureListener(target, eventType, listener) {
	  target.addEventListener(eventType, listener, true);
	  return listener;
	}
	function addEventCaptureListenerWithPassiveFlag(target, eventType, listener, passive) {
	  target.addEventListener(eventType, listener, {
	    capture: true,
	    passive: passive
	  });
	  return listener;
	}
	function addEventBubbleListenerWithPassiveFlag(target, eventType, listener, passive) {
	  target.addEventListener(eventType, listener, {
	    passive: passive
	  });
	  return listener;
	}

	/**
	 * These variables store information about text content of a target node,
	 * allowing comparison of content before and after a given event.
	 *
	 * Identify the node where selection currently begins, then observe
	 * both its text content and its current position in the DOM. Since the
	 * browser may natively replace the target node during composition, we can
	 * use its position to find its replacement.
	 *
	 *
	 */
	var root = null;
	var startText = null;
	var fallbackText = null;
	function initialize(nativeEventTarget) {
	  root = nativeEventTarget;
	  startText = getText();
	  return true;
	}
	function reset() {
	  root = null;
	  startText = null;
	  fallbackText = null;
	}
	function getData() {
	  if (fallbackText) {
	    return fallbackText;
	  }

	  var start;
	  var startValue = startText;
	  var startLength = startValue.length;
	  var end;
	  var endValue = getText();
	  var endLength = endValue.length;

	  for (start = 0; start < startLength; start++) {
	    if (startValue[start] !== endValue[start]) {
	      break;
	    }
	  }

	  var minEnd = startLength - start;

	  for (end = 1; end <= minEnd; end++) {
	    if (startValue[startLength - end] !== endValue[endLength - end]) {
	      break;
	    }
	  }

	  var sliceTail = end > 1 ? 1 - end : undefined;
	  fallbackText = endValue.slice(start, sliceTail);
	  return fallbackText;
	}
	function getText() {
	  if ('value' in root) {
	    return root.value;
	  }

	  return root.textContent;
	}

	/**
	 * `charCode` represents the actual "character code" and is safe to use with
	 * `String.fromCharCode`. As such, only keys that correspond to printable
	 * characters produce a valid `charCode`, the only exception to this is Enter.
	 * The Tab-key is considered non-printable and does not have a `charCode`,
	 * presumably because it does not produce a tab-character in browsers.
	 *
	 * @param {object} nativeEvent Native browser event.
	 * @return {number} Normalized `charCode` property.
	 */
	function getEventCharCode(nativeEvent) {
	  var charCode;
	  var keyCode = nativeEvent.keyCode;

	  if ('charCode' in nativeEvent) {
	    charCode = nativeEvent.charCode; // FF does not set `charCode` for the Enter-key, check against `keyCode`.

	    if (charCode === 0 && keyCode === 13) {
	      charCode = 13;
	    }
	  } else {
	    // IE8 does not implement `charCode`, but `keyCode` has the correct value.
	    charCode = keyCode;
	  } // IE and Edge (on Windows) and Chrome / Safari (on Windows and Linux)
	  // report Enter as charCode 10 when ctrl is pressed.


	  if (charCode === 10) {
	    charCode = 13;
	  } // Some non-printable keys are reported in `charCode`/`keyCode`, discard them.
	  // Must not discard the (non-)printable Enter-key.


	  if (charCode >= 32 || charCode === 13) {
	    return charCode;
	  }

	  return 0;
	}

	function functionThatReturnsTrue() {
	  return true;
	}

	function functionThatReturnsFalse() {
	  return false;
	} // This is intentionally a factory so that we have different returned constructors.
	// If we had a single constructor, it would be megamorphic and engines would deopt.


	function createSyntheticEvent(Interface) {
	  /**
	   * Synthetic events are dispatched by event plugins, typically in response to a
	   * top-level event delegation handler.
	   *
	   * These systems should generally use pooling to reduce the frequency of garbage
	   * collection. The system should check `isPersistent` to determine whether the
	   * event should be released into the pool after being dispatched. Users that
	   * need a persisted event should invoke `persist`.
	   *
	   * Synthetic events (and subclasses) implement the DOM Level 3 Events API by
	   * normalizing browser quirks. Subclasses do not necessarily have to implement a
	   * DOM interface; custom application-specific events can also subclass this.
	   */
	  function SyntheticBaseEvent(reactName, reactEventType, targetInst, nativeEvent, nativeEventTarget) {
	    this._reactName = reactName;
	    this._targetInst = targetInst;
	    this.type = reactEventType;
	    this.nativeEvent = nativeEvent;
	    this.target = nativeEventTarget;
	    this.currentTarget = null;

	    for (var _propName in Interface) {
	      if (!Interface.hasOwnProperty(_propName)) {
	        continue;
	      }

	      var normalize = Interface[_propName];

	      if (normalize) {
	        this[_propName] = normalize(nativeEvent);
	      } else {
	        this[_propName] = nativeEvent[_propName];
	      }
	    }

	    var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;

	    if (defaultPrevented) {
	      this.isDefaultPrevented = functionThatReturnsTrue;
	    } else {
	      this.isDefaultPrevented = functionThatReturnsFalse;
	    }

	    this.isPropagationStopped = functionThatReturnsFalse;
	    return this;
	  }

	  assign(SyntheticBaseEvent.prototype, {
	    preventDefault: function () {
	      this.defaultPrevented = true;
	      var event = this.nativeEvent;

	      if (!event) {
	        return;
	      }

	      if (event.preventDefault) {
	        event.preventDefault(); // $FlowFixMe - flow is not aware of `unknown` in IE
	      } else if (typeof event.returnValue !== 'unknown') {
	        event.returnValue = false;
	      }

	      this.isDefaultPrevented = functionThatReturnsTrue;
	    },
	    stopPropagation: function () {
	      var event = this.nativeEvent;

	      if (!event) {
	        return;
	      }

	      if (event.stopPropagation) {
	        event.stopPropagation(); // $FlowFixMe - flow is not aware of `unknown` in IE
	      } else if (typeof event.cancelBubble !== 'unknown') {
	        // The ChangeEventPlugin registers a "propertychange" event for
	        // IE. This event does not support bubbling or cancelling, and
	        // any references to cancelBubble throw "Member not found".  A
	        // typeof check of "unknown" circumvents this issue (and is also
	        // IE specific).
	        event.cancelBubble = true;
	      }

	      this.isPropagationStopped = functionThatReturnsTrue;
	    },

	    /**
	     * We release all dispatched `SyntheticEvent`s after each event loop, adding
	     * them back into the pool. This allows a way to hold onto a reference that
	     * won't be added back into the pool.
	     */
	    persist: function () {// Modern event system doesn't use pooling.
	    },

	    /**
	     * Checks if this event should be released back into the pool.
	     *
	     * @return {boolean} True if this should not be released, false otherwise.
	     */
	    isPersistent: functionThatReturnsTrue
	  });
	  return SyntheticBaseEvent;
	}
	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */


	var EventInterface = {
	  eventPhase: 0,
	  bubbles: 0,
	  cancelable: 0,
	  timeStamp: function (event) {
	    return event.timeStamp || Date.now();
	  },
	  defaultPrevented: 0,
	  isTrusted: 0
	};
	var SyntheticEvent = createSyntheticEvent(EventInterface);

	var UIEventInterface = assign({}, EventInterface, {
	  view: 0,
	  detail: 0
	});

	var SyntheticUIEvent = createSyntheticEvent(UIEventInterface);
	var lastMovementX;
	var lastMovementY;
	var lastMouseEvent;

	function updateMouseMovementPolyfillState(event) {
	  if (event !== lastMouseEvent) {
	    if (lastMouseEvent && event.type === 'mousemove') {
	      lastMovementX = event.screenX - lastMouseEvent.screenX;
	      lastMovementY = event.screenY - lastMouseEvent.screenY;
	    } else {
	      lastMovementX = 0;
	      lastMovementY = 0;
	    }

	    lastMouseEvent = event;
	  }
	}
	/**
	 * @interface MouseEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */


	var MouseEventInterface = assign({}, UIEventInterface, {
	  screenX: 0,
	  screenY: 0,
	  clientX: 0,
	  clientY: 0,
	  pageX: 0,
	  pageY: 0,
	  ctrlKey: 0,
	  shiftKey: 0,
	  altKey: 0,
	  metaKey: 0,
	  getModifierState: getEventModifierState,
	  button: 0,
	  buttons: 0,
	  relatedTarget: function (event) {
	    if (event.relatedTarget === undefined) return event.fromElement === event.srcElement ? event.toElement : event.fromElement;
	    return event.relatedTarget;
	  },
	  movementX: function (event) {
	    if ('movementX' in event) {
	      return event.movementX;
	    }

	    updateMouseMovementPolyfillState(event);
	    return lastMovementX;
	  },
	  movementY: function (event) {
	    if ('movementY' in event) {
	      return event.movementY;
	    } // Don't need to call updateMouseMovementPolyfillState() here
	    // because it's guaranteed to have already run when movementX
	    // was copied.


	    return lastMovementY;
	  }
	});

	var SyntheticMouseEvent = createSyntheticEvent(MouseEventInterface);
	/**
	 * @interface DragEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */

	var DragEventInterface = assign({}, MouseEventInterface, {
	  dataTransfer: 0
	});

	var SyntheticDragEvent = createSyntheticEvent(DragEventInterface);
	/**
	 * @interface FocusEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */

	var FocusEventInterface = assign({}, UIEventInterface, {
	  relatedTarget: 0
	});

	var SyntheticFocusEvent = createSyntheticEvent(FocusEventInterface);
	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/css3-animations/#AnimationEvent-interface
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/AnimationEvent
	 */

	var AnimationEventInterface = assign({}, EventInterface, {
	  animationName: 0,
	  elapsedTime: 0,
	  pseudoElement: 0
	});

	var SyntheticAnimationEvent = createSyntheticEvent(AnimationEventInterface);
	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/clipboard-apis/
	 */

	var ClipboardEventInterface = assign({}, EventInterface, {
	  clipboardData: function (event) {
	    return 'clipboardData' in event ? event.clipboardData : window.clipboardData;
	  }
	});

	var SyntheticClipboardEvent = createSyntheticEvent(ClipboardEventInterface);
	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/#events-compositionevents
	 */

	var CompositionEventInterface = assign({}, EventInterface, {
	  data: 0
	});

	var SyntheticCompositionEvent = createSyntheticEvent(CompositionEventInterface);
	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105
	 *      /#events-inputevents
	 */
	// Happens to share the same list for now.

	var SyntheticInputEvent = SyntheticCompositionEvent;
	/**
	 * Normalization of deprecated HTML5 `key` values
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
	 */

	var normalizeKey = {
	  Esc: 'Escape',
	  Spacebar: ' ',
	  Left: 'ArrowLeft',
	  Up: 'ArrowUp',
	  Right: 'ArrowRight',
	  Down: 'ArrowDown',
	  Del: 'Delete',
	  Win: 'OS',
	  Menu: 'ContextMenu',
	  Apps: 'ContextMenu',
	  Scroll: 'ScrollLock',
	  MozPrintableKey: 'Unidentified'
	};
	/**
	 * Translation from legacy `keyCode` to HTML5 `key`
	 * Only special keys supported, all others depend on keyboard layout or browser
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
	 */

	var translateToKey = {
	  '8': 'Backspace',
	  '9': 'Tab',
	  '12': 'Clear',
	  '13': 'Enter',
	  '16': 'Shift',
	  '17': 'Control',
	  '18': 'Alt',
	  '19': 'Pause',
	  '20': 'CapsLock',
	  '27': 'Escape',
	  '32': ' ',
	  '33': 'PageUp',
	  '34': 'PageDown',
	  '35': 'End',
	  '36': 'Home',
	  '37': 'ArrowLeft',
	  '38': 'ArrowUp',
	  '39': 'ArrowRight',
	  '40': 'ArrowDown',
	  '45': 'Insert',
	  '46': 'Delete',
	  '112': 'F1',
	  '113': 'F2',
	  '114': 'F3',
	  '115': 'F4',
	  '116': 'F5',
	  '117': 'F6',
	  '118': 'F7',
	  '119': 'F8',
	  '120': 'F9',
	  '121': 'F10',
	  '122': 'F11',
	  '123': 'F12',
	  '144': 'NumLock',
	  '145': 'ScrollLock',
	  '224': 'Meta'
	};
	/**
	 * @param {object} nativeEvent Native browser event.
	 * @return {string} Normalized `key` property.
	 */

	function getEventKey(nativeEvent) {
	  if (nativeEvent.key) {
	    // Normalize inconsistent values reported by browsers due to
	    // implementations of a working draft specification.
	    // FireFox implements `key` but returns `MozPrintableKey` for all
	    // printable characters (normalized to `Unidentified`), ignore it.
	    var key = normalizeKey[nativeEvent.key] || nativeEvent.key;

	    if (key !== 'Unidentified') {
	      return key;
	    }
	  } // Browser does not implement `key`, polyfill as much of it as we can.


	  if (nativeEvent.type === 'keypress') {
	    var charCode = getEventCharCode(nativeEvent); // The enter-key is technically both printable and non-printable and can
	    // thus be captured by `keypress`, no other non-printable key should.

	    return charCode === 13 ? 'Enter' : String.fromCharCode(charCode);
	  }

	  if (nativeEvent.type === 'keydown' || nativeEvent.type === 'keyup') {
	    // While user keyboard layout determines the actual meaning of each
	    // `keyCode` value, almost all function keys have a universal value.
	    return translateToKey[nativeEvent.keyCode] || 'Unidentified';
	  }

	  return '';
	}
	/**
	 * Translation from modifier key to the associated property in the event.
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/#keys-Modifiers
	 */


	var modifierKeyToProp = {
	  Alt: 'altKey',
	  Control: 'ctrlKey',
	  Meta: 'metaKey',
	  Shift: 'shiftKey'
	}; // Older browsers (Safari <= 10, iOS Safari <= 10.2) do not support
	// getModifierState. If getModifierState is not supported, we map it to a set of
	// modifier keys exposed by the event. In this case, Lock-keys are not supported.

	function modifierStateGetter(keyArg) {
	  var syntheticEvent = this;
	  var nativeEvent = syntheticEvent.nativeEvent;

	  if (nativeEvent.getModifierState) {
	    return nativeEvent.getModifierState(keyArg);
	  }

	  var keyProp = modifierKeyToProp[keyArg];
	  return keyProp ? !!nativeEvent[keyProp] : false;
	}

	function getEventModifierState(nativeEvent) {
	  return modifierStateGetter;
	}
	/**
	 * @interface KeyboardEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */


	var KeyboardEventInterface = assign({}, UIEventInterface, {
	  key: getEventKey,
	  code: 0,
	  location: 0,
	  ctrlKey: 0,
	  shiftKey: 0,
	  altKey: 0,
	  metaKey: 0,
	  repeat: 0,
	  locale: 0,
	  getModifierState: getEventModifierState,
	  // Legacy Interface
	  charCode: function (event) {
	    // `charCode` is the result of a KeyPress event and represents the value of
	    // the actual printable character.
	    // KeyPress is deprecated, but its replacement is not yet final and not
	    // implemented in any major browser. Only KeyPress has charCode.
	    if (event.type === 'keypress') {
	      return getEventCharCode(event);
	    }

	    return 0;
	  },
	  keyCode: function (event) {
	    // `keyCode` is the result of a KeyDown/Up event and represents the value of
	    // physical keyboard key.
	    // The actual meaning of the value depends on the users' keyboard layout
	    // which cannot be detected. Assuming that it is a US keyboard layout
	    // provides a surprisingly accurate mapping for US and European users.
	    // Due to this, it is left to the user to implement at this time.
	    if (event.type === 'keydown' || event.type === 'keyup') {
	      return event.keyCode;
	    }

	    return 0;
	  },
	  which: function (event) {
	    // `which` is an alias for either `keyCode` or `charCode` depending on the
	    // type of the event.
	    if (event.type === 'keypress') {
	      return getEventCharCode(event);
	    }

	    if (event.type === 'keydown' || event.type === 'keyup') {
	      return event.keyCode;
	    }

	    return 0;
	  }
	});

	var SyntheticKeyboardEvent = createSyntheticEvent(KeyboardEventInterface);
	/**
	 * @interface PointerEvent
	 * @see http://www.w3.org/TR/pointerevents/
	 */

	var PointerEventInterface = assign({}, MouseEventInterface, {
	  pointerId: 0,
	  width: 0,
	  height: 0,
	  pressure: 0,
	  tangentialPressure: 0,
	  tiltX: 0,
	  tiltY: 0,
	  twist: 0,
	  pointerType: 0,
	  isPrimary: 0
	});

	var SyntheticPointerEvent = createSyntheticEvent(PointerEventInterface);
	/**
	 * @interface TouchEvent
	 * @see http://www.w3.org/TR/touch-events/
	 */

	var TouchEventInterface = assign({}, UIEventInterface, {
	  touches: 0,
	  targetTouches: 0,
	  changedTouches: 0,
	  altKey: 0,
	  metaKey: 0,
	  ctrlKey: 0,
	  shiftKey: 0,
	  getModifierState: getEventModifierState
	});

	var SyntheticTouchEvent = createSyntheticEvent(TouchEventInterface);
	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/2009/WD-css3-transitions-20090320/#transition-events-
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/TransitionEvent
	 */

	var TransitionEventInterface = assign({}, EventInterface, {
	  propertyName: 0,
	  elapsedTime: 0,
	  pseudoElement: 0
	});

	var SyntheticTransitionEvent = createSyntheticEvent(TransitionEventInterface);
	/**
	 * @interface WheelEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */

	var WheelEventInterface = assign({}, MouseEventInterface, {
	  deltaX: function (event) {
	    return 'deltaX' in event ? event.deltaX : // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
	    'wheelDeltaX' in event ? -event.wheelDeltaX : 0;
	  },
	  deltaY: function (event) {
	    return 'deltaY' in event ? event.deltaY : // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
	    'wheelDeltaY' in event ? -event.wheelDeltaY : // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
	    'wheelDelta' in event ? -event.wheelDelta : 0;
	  },
	  deltaZ: 0,
	  // Browsers without "deltaMode" is reporting in raw wheel delta where one
	  // notch on the scroll is always +/- 120, roughly equivalent to pixels.
	  // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
	  // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
	  deltaMode: 0
	});

	var SyntheticWheelEvent = createSyntheticEvent(WheelEventInterface);

	var END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space

	var START_KEYCODE = 229;
	var canUseCompositionEvent = canUseDOM && 'CompositionEvent' in window;
	var documentMode = null;

	if (canUseDOM && 'documentMode' in document) {
	  documentMode = document.documentMode;
	} // Webkit offers a very useful `textInput` event that can be used to
	// directly represent `beforeInput`. The IE `textinput` event is not as
	// useful, so we don't use it.


	var canUseTextInputEvent = canUseDOM && 'TextEvent' in window && !documentMode; // In IE9+, we have access to composition events, but the data supplied
	// by the native compositionend event may be incorrect. Japanese ideographic
	// spaces, for instance (\u3000) are not recorded correctly.

	var useFallbackCompositionData = canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);
	var SPACEBAR_CODE = 32;
	var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);

	function registerEvents() {
	  registerTwoPhaseEvent('onBeforeInput', ['compositionend', 'keypress', 'textInput', 'paste']);
	  registerTwoPhaseEvent('onCompositionEnd', ['compositionend', 'focusout', 'keydown', 'keypress', 'keyup', 'mousedown']);
	  registerTwoPhaseEvent('onCompositionStart', ['compositionstart', 'focusout', 'keydown', 'keypress', 'keyup', 'mousedown']);
	  registerTwoPhaseEvent('onCompositionUpdate', ['compositionupdate', 'focusout', 'keydown', 'keypress', 'keyup', 'mousedown']);
	} // Track whether we've ever handled a keypress on the space key.


	var hasSpaceKeypress = false;
	/**
	 * Return whether a native keypress event is assumed to be a command.
	 * This is required because Firefox fires `keypress` events for key commands
	 * (cut, copy, select-all, etc.) even though no character is inserted.
	 */

	function isKeypressCommand(nativeEvent) {
	  return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) && // ctrlKey && altKey is equivalent to AltGr, and is not a command.
	  !(nativeEvent.ctrlKey && nativeEvent.altKey);
	}
	/**
	 * Translate native top level events into event types.
	 */


	function getCompositionEventType(domEventName) {
	  switch (domEventName) {
	    case 'compositionstart':
	      return 'onCompositionStart';

	    case 'compositionend':
	      return 'onCompositionEnd';

	    case 'compositionupdate':
	      return 'onCompositionUpdate';
	  }
	}
	/**
	 * Does our fallback best-guess model think this event signifies that
	 * composition has begun?
	 */


	function isFallbackCompositionStart(domEventName, nativeEvent) {
	  return domEventName === 'keydown' && nativeEvent.keyCode === START_KEYCODE;
	}
	/**
	 * Does our fallback mode think that this event is the end of composition?
	 */


	function isFallbackCompositionEnd(domEventName, nativeEvent) {
	  switch (domEventName) {
	    case 'keyup':
	      // Command keys insert or clear IME input.
	      return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;

	    case 'keydown':
	      // Expect IME keyCode on each keydown. If we get any other
	      // code we must have exited earlier.
	      return nativeEvent.keyCode !== START_KEYCODE;

	    case 'keypress':
	    case 'mousedown':
	    case 'focusout':
	      // Events are not possible without cancelling IME.
	      return true;

	    default:
	      return false;
	  }
	}
	/**
	 * Google Input Tools provides composition data via a CustomEvent,
	 * with the `data` property populated in the `detail` object. If this
	 * is available on the event object, use it. If not, this is a plain
	 * composition event and we have nothing special to extract.
	 *
	 * @param {object} nativeEvent
	 * @return {?string}
	 */


	function getDataFromCustomEvent(nativeEvent) {
	  var detail = nativeEvent.detail;

	  if (typeof detail === 'object' && 'data' in detail) {
	    return detail.data;
	  }

	  return null;
	}
	/**
	 * Check if a composition event was triggered by Korean IME.
	 * Our fallback mode does not work well with IE's Korean IME,
	 * so just use native composition events when Korean IME is used.
	 * Although CompositionEvent.locale property is deprecated,
	 * it is available in IE, where our fallback mode is enabled.
	 *
	 * @param {object} nativeEvent
	 * @return {boolean}
	 */


	function isUsingKoreanIME(nativeEvent) {
	  return nativeEvent.locale === 'ko';
	} // Track the current IME composition status, if any.


	var isComposing = false;
	/**
	 * @return {?object} A SyntheticCompositionEvent.
	 */

	function extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
	  var eventType;
	  var fallbackData;

	  if (canUseCompositionEvent) {
	    eventType = getCompositionEventType(domEventName);
	  } else if (!isComposing) {
	    if (isFallbackCompositionStart(domEventName, nativeEvent)) {
	      eventType = 'onCompositionStart';
	    }
	  } else if (isFallbackCompositionEnd(domEventName, nativeEvent)) {
	    eventType = 'onCompositionEnd';
	  }

	  if (!eventType) {
	    return null;
	  }

	  if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {
	    // The current composition is stored statically and must not be
	    // overwritten while composition continues.
	    if (!isComposing && eventType === 'onCompositionStart') {
	      isComposing = initialize(nativeEventTarget);
	    } else if (eventType === 'onCompositionEnd') {
	      if (isComposing) {
	        fallbackData = getData();
	      }
	    }
	  }

	  var listeners = accumulateTwoPhaseListeners(targetInst, eventType);

	  if (listeners.length > 0) {
	    var event = new SyntheticCompositionEvent(eventType, domEventName, null, nativeEvent, nativeEventTarget);
	    dispatchQueue.push({
	      event: event,
	      listeners: listeners
	    });

	    if (fallbackData) {
	      // Inject data generated from fallback path into the synthetic event.
	      // This matches the property of native CompositionEventInterface.
	      event.data = fallbackData;
	    } else {
	      var customData = getDataFromCustomEvent(nativeEvent);

	      if (customData !== null) {
	        event.data = customData;
	      }
	    }
	  }
	}

	function getNativeBeforeInputChars(domEventName, nativeEvent) {
	  switch (domEventName) {
	    case 'compositionend':
	      return getDataFromCustomEvent(nativeEvent);

	    case 'keypress':
	      /**
	       * If native `textInput` events are available, our goal is to make
	       * use of them. However, there is a special case: the spacebar key.
	       * In Webkit, preventing default on a spacebar `textInput` event
	       * cancels character insertion, but it *also* causes the browser
	       * to fall back to its default spacebar behavior of scrolling the
	       * page.
	       *
	       * Tracking at:
	       * https://code.google.com/p/chromium/issues/detail?id=355103
	       *
	       * To avoid this issue, use the keypress event as if no `textInput`
	       * event is available.
	       */
	      var which = nativeEvent.which;

	      if (which !== SPACEBAR_CODE) {
	        return null;
	      }

	      hasSpaceKeypress = true;
	      return SPACEBAR_CHAR;

	    case 'textInput':
	      // Record the characters to be added to the DOM.
	      var chars = nativeEvent.data; // If it's a spacebar character, assume that we have already handled
	      // it at the keypress level and bail immediately. Android Chrome
	      // doesn't give us keycodes, so we need to ignore it.

	      if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
	        return null;
	      }

	      return chars;

	    default:
	      // For other native event types, do nothing.
	      return null;
	  }
	}
	/**
	 * For browsers that do not provide the `textInput` event, extract the
	 * appropriate string to use for SyntheticInputEvent.
	 */


	function getFallbackBeforeInputChars(domEventName, nativeEvent) {
	  // If we are currently composing (IME) and using a fallback to do so,
	  // try to extract the composed characters from the fallback object.
	  // If composition event is available, we extract a string only at
	  // compositionevent, otherwise extract it at fallback events.
	  if (isComposing) {
	    if (domEventName === 'compositionend' || !canUseCompositionEvent && isFallbackCompositionEnd(domEventName, nativeEvent)) {
	      var chars = getData();
	      reset();
	      isComposing = false;
	      return chars;
	    }

	    return null;
	  }

	  switch (domEventName) {
	    case 'paste':
	      // If a paste event occurs after a keypress, throw out the input
	      // chars. Paste events should not lead to BeforeInput events.
	      return null;

	    case 'keypress':
	      /**
	       * As of v27, Firefox may fire keypress events even when no character
	       * will be inserted. A few possibilities:
	       *
	       * - `which` is `0`. Arrow keys, Esc key, etc.
	       *
	       * - `which` is the pressed key code, but no char is available.
	       *   Ex: 'AltGr + d` in Polish. There is no modified character for
	       *   this key combination and no character is inserted into the
	       *   document, but FF fires the keypress for char code `100` anyway.
	       *   No `input` event will occur.
	       *
	       * - `which` is the pressed key code, but a command combination is
	       *   being used. Ex: `Cmd+C`. No character is inserted, and no
	       *   `input` event will occur.
	       */
	      if (!isKeypressCommand(nativeEvent)) {
	        // IE fires the `keypress` event when a user types an emoji via
	        // Touch keyboard of Windows.  In such a case, the `char` property
	        // holds an emoji character like `\uD83D\uDE0A`.  Because its length
	        // is 2, the property `which` does not represent an emoji correctly.
	        // In such a case, we directly return the `char` property instead of
	        // using `which`.
	        if (nativeEvent.char && nativeEvent.char.length > 1) {
	          return nativeEvent.char;
	        } else if (nativeEvent.which) {
	          return String.fromCharCode(nativeEvent.which);
	        }
	      }

	      return null;

	    case 'compositionend':
	      return useFallbackCompositionData && !isUsingKoreanIME(nativeEvent) ? null : nativeEvent.data;

	    default:
	      return null;
	  }
	}
	/**
	 * Extract a SyntheticInputEvent for `beforeInput`, based on either native
	 * `textInput` or fallback behavior.
	 *
	 * @return {?object} A SyntheticInputEvent.
	 */


	function extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
	  var chars;

	  if (canUseTextInputEvent) {
	    chars = getNativeBeforeInputChars(domEventName, nativeEvent);
	  } else {
	    chars = getFallbackBeforeInputChars(domEventName, nativeEvent);
	  } // If no characters are being inserted, no BeforeInput event should
	  // be fired.


	  if (!chars) {
	    return null;
	  }

	  var listeners = accumulateTwoPhaseListeners(targetInst, 'onBeforeInput');

	  if (listeners.length > 0) {
	    var event = new SyntheticInputEvent('onBeforeInput', 'beforeinput', null, nativeEvent, nativeEventTarget);
	    dispatchQueue.push({
	      event: event,
	      listeners: listeners
	    });
	    event.data = chars;
	  }
	}
	/**
	 * Create an `onBeforeInput` event to match
	 * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.
	 *
	 * This event plugin is based on the native `textInput` event
	 * available in Chrome, Safari, Opera, and IE. This event fires after
	 * `onKeyPress` and `onCompositionEnd`, but before `onInput`.
	 *
	 * `beforeInput` is spec'd but not implemented in any browsers, and
	 * the `input` event does not provide any useful information about what has
	 * actually been added, contrary to the spec. Thus, `textInput` is the best
	 * available event to identify the characters that have actually been inserted
	 * into the target node.
	 *
	 * This plugin is also responsible for emitting `composition` events, thus
	 * allowing us to share composition fallback code for both `beforeInput` and
	 * `composition` event types.
	 */


	function extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
	  extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
	  extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
	}

	/**
	 * @see http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary
	 */
	var supportedInputTypes = {
	  color: true,
	  date: true,
	  datetime: true,
	  'datetime-local': true,
	  email: true,
	  month: true,
	  number: true,
	  password: true,
	  range: true,
	  search: true,
	  tel: true,
	  text: true,
	  time: true,
	  url: true,
	  week: true
	};

	function isTextInputElement(elem) {
	  var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();

	  if (nodeName === 'input') {
	    return !!supportedInputTypes[elem.type];
	  }

	  if (nodeName === 'textarea') {
	    return true;
	  }

	  return false;
	}

	/**
	 * Checks if an event is supported in the current execution environment.
	 *
	 * NOTE: This will not work correctly for non-generic events such as `change`,
	 * `reset`, `load`, `error`, and `select`.
	 *
	 * Borrows from Modernizr.
	 *
	 * @param {string} eventNameSuffix Event name, e.g. "click".
	 * @return {boolean} True if the event is supported.
	 * @internal
	 * @license Modernizr 3.0.0pre (Custom Build) | MIT
	 */

	function isEventSupported(eventNameSuffix) {
	  if (!canUseDOM) {
	    return false;
	  }

	  var eventName = 'on' + eventNameSuffix;
	  var isSupported = (eventName in document);

	  if (!isSupported) {
	    var element = document.createElement('div');
	    element.setAttribute(eventName, 'return;');
	    isSupported = typeof element[eventName] === 'function';
	  }

	  return isSupported;
	}

	function registerEvents$1() {
	  registerTwoPhaseEvent('onChange', ['change', 'click', 'focusin', 'focusout', 'input', 'keydown', 'keyup', 'selectionchange']);
	}

	function createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, target) {
	  // Flag this event loop as needing state restore.
	  enqueueStateRestore(target);
	  var listeners = accumulateTwoPhaseListeners(inst, 'onChange');

	  if (listeners.length > 0) {
	    var event = new SyntheticEvent('onChange', 'change', null, nativeEvent, target);
	    dispatchQueue.push({
	      event: event,
	      listeners: listeners
	    });
	  }
	}
	/**
	 * For IE shims
	 */


	var activeElement = null;
	var activeElementInst = null;
	/**
	 * SECTION: handle `change` event
	 */

	function shouldUseChangeEvent(elem) {
	  var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
	  return nodeName === 'select' || nodeName === 'input' && elem.type === 'file';
	}

	function manualDispatchChangeEvent(nativeEvent) {
	  var dispatchQueue = [];
	  createAndAccumulateChangeEvent(dispatchQueue, activeElementInst, nativeEvent, getEventTarget(nativeEvent)); // If change and propertychange bubbled, we'd just bind to it like all the
	  // other events and have it go through ReactBrowserEventEmitter. Since it
	  // doesn't, we manually listen for the events and so we have to enqueue and
	  // process the abstract event manually.
	  //
	  // Batching is necessary here in order to ensure that all event handlers run
	  // before the next rerender (including event handlers attached to ancestor
	  // elements instead of directly on the input). Without this, controlled
	  // components don't work properly in conjunction with event bubbling because
	  // the component is rerendered and the value reverted before all the event
	  // handlers can run. See https://github.com/facebook/react/issues/708.

	  batchedUpdates(runEventInBatch, dispatchQueue);
	}

	function runEventInBatch(dispatchQueue) {
	  processDispatchQueue(dispatchQueue, 0);
	}

	function getInstIfValueChanged(targetInst) {
	  var targetNode = getNodeFromInstance(targetInst);

	  if (updateValueIfChanged(targetNode)) {
	    return targetInst;
	  }
	}

	function getTargetInstForChangeEvent(domEventName, targetInst) {
	  if (domEventName === 'change') {
	    return targetInst;
	  }
	}
	/**
	 * SECTION: handle `input` event
	 */


	var isInputEventSupported = false;

	if (canUseDOM) {
	  // IE9 claims to support the input event but fails to trigger it when
	  // deleting text, so we ignore its input events.
	  isInputEventSupported = isEventSupported('input') && (!document.documentMode || document.documentMode > 9);
	}
	/**
	 * (For IE <=9) Starts tracking propertychange events on the passed-in element
	 * and override the value property so that we can distinguish user events from
	 * value changes in JS.
	 */


	function startWatchingForValueChange(target, targetInst) {
	  activeElement = target;
	  activeElementInst = targetInst;
	  activeElement.attachEvent('onpropertychange', handlePropertyChange);
	}
	/**
	 * (For IE <=9) Removes the event listeners from the currently-tracked element,
	 * if any exists.
	 */


	function stopWatchingForValueChange() {
	  if (!activeElement) {
	    return;
	  }

	  activeElement.detachEvent('onpropertychange', handlePropertyChange);
	  activeElement = null;
	  activeElementInst = null;
	}
	/**
	 * (For IE <=9) Handles a propertychange event, sending a `change` event if
	 * the value of the active element has changed.
	 */


	function handlePropertyChange(nativeEvent) {
	  if (nativeEvent.propertyName !== 'value') {
	    return;
	  }

	  if (getInstIfValueChanged(activeElementInst)) {
	    manualDispatchChangeEvent(nativeEvent);
	  }
	}

	function handleEventsForInputEventPolyfill(domEventName, target, targetInst) {
	  if (domEventName === 'focusin') {
	    // In IE9, propertychange fires for most input events but is buggy and
	    // doesn't fire when text is deleted, but conveniently, selectionchange
	    // appears to fire in all of the remaining cases so we catch those and
	    // forward the event if the value has changed
	    // In either case, we don't want to call the event handler if the value
	    // is changed from JS so we redefine a setter for `.value` that updates
	    // our activeElementValue variable, allowing us to ignore those changes
	    //
	    // stopWatching() should be a noop here but we call it just in case we
	    // missed a blur event somehow.
	    stopWatchingForValueChange();
	    startWatchingForValueChange(target, targetInst);
	  } else if (domEventName === 'focusout') {
	    stopWatchingForValueChange();
	  }
	} // For IE8 and IE9.


	function getTargetInstForInputEventPolyfill(domEventName, targetInst) {
	  if (domEventName === 'selectionchange' || domEventName === 'keyup' || domEventName === 'keydown') {
	    // On the selectionchange event, the target is just document which isn't
	    // helpful for us so just check activeElement instead.
	    //
	    // 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire
	    // propertychange on the first input event after setting `value` from a
	    // script and fires only keydown, keypress, keyup. Catching keyup usually
	    // gets it and catching keydown lets us fire an event for the first
	    // keystroke if user does a key repeat (it'll be a little delayed: right
	    // before the second keystroke). Other input methods (e.g., paste) seem to
	    // fire selectionchange normally.
	    return getInstIfValueChanged(activeElementInst);
	  }
	}
	/**
	 * SECTION: handle `click` event
	 */


	function shouldUseClickEvent(elem) {
	  // Use the `click` event to detect changes to checkbox and radio inputs.
	  // This approach works across all browsers, whereas `change` does not fire
	  // until `blur` in IE8.
	  var nodeName = elem.nodeName;
	  return nodeName && nodeName.toLowerCase() === 'input' && (elem.type === 'checkbox' || elem.type === 'radio');
	}

	function getTargetInstForClickEvent(domEventName, targetInst) {
	  if (domEventName === 'click') {
	    return getInstIfValueChanged(targetInst);
	  }
	}

	function getTargetInstForInputOrChangeEvent(domEventName, targetInst) {
	  if (domEventName === 'input' || domEventName === 'change') {
	    return getInstIfValueChanged(targetInst);
	  }
	}

	function handleControlledInputBlur(node) {
	  var state = node._wrapperState;

	  if (!state || !state.controlled || node.type !== 'number') {
	    return;
	  }

	  {
	    // If controlled, assign the value attribute to the current value on blur
	    setDefaultValue(node, 'number', node.value);
	  }
	}
	/**
	 * This plugin creates an `onChange` event that normalizes change events
	 * across form elements. This event fires at a time when it's possible to
	 * change the element's value without seeing a flicker.
	 *
	 * Supported elements are:
	 * - input (see `isTextInputElement`)
	 * - textarea
	 * - select
	 */


	function extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
	  var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
	  var getTargetInstFunc, handleEventFunc;

	  if (shouldUseChangeEvent(targetNode)) {
	    getTargetInstFunc = getTargetInstForChangeEvent;
	  } else if (isTextInputElement(targetNode)) {
	    if (isInputEventSupported) {
	      getTargetInstFunc = getTargetInstForInputOrChangeEvent;
	    } else {
	      getTargetInstFunc = getTargetInstForInputEventPolyfill;
	      handleEventFunc = handleEventsForInputEventPolyfill;
	    }
	  } else if (shouldUseClickEvent(targetNode)) {
	    getTargetInstFunc = getTargetInstForClickEvent;
	  }

	  if (getTargetInstFunc) {
	    var inst = getTargetInstFunc(domEventName, targetInst);

	    if (inst) {
	      createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, nativeEventTarget);
	      return;
	    }
	  }

	  if (handleEventFunc) {
	    handleEventFunc(domEventName, targetNode, targetInst);
	  } // When blurring, set the value attribute for number inputs


	  if (domEventName === 'focusout') {
	    handleControlledInputBlur(targetNode);
	  }
	}

	function registerEvents$2() {
	  registerDirectEvent('onMouseEnter', ['mouseout', 'mouseover']);
	  registerDirectEvent('onMouseLeave', ['mouseout', 'mouseover']);
	  registerDirectEvent('onPointerEnter', ['pointerout', 'pointerover']);
	  registerDirectEvent('onPointerLeave', ['pointerout', 'pointerover']);
	}
	/**
	 * For almost every interaction we care about, there will be both a top-level
	 * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that
	 * we do not extract duplicate events. However, moving the mouse into the
	 * browser from outside will not fire a `mouseout` event. In this case, we use
	 * the `mouseover` top-level event.
	 */


	function extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
	  var isOverEvent = domEventName === 'mouseover' || domEventName === 'pointerover';
	  var isOutEvent = domEventName === 'mouseout' || domEventName === 'pointerout';

	  if (isOverEvent && !isReplayingEvent(nativeEvent)) {
	    // If this is an over event with a target, we might have already dispatched
	    // the event in the out event of the other target. If this is replayed,
	    // then it's because we couldn't dispatch against this target previously
	    // so we have to do it now instead.
	    var related = nativeEvent.relatedTarget || nativeEvent.fromElement;

	    if (related) {
	      // If the related node is managed by React, we can assume that we have
	      // already dispatched the corresponding events during its mouseout.
	      if (getClosestInstanceFromNode(related) || isContainerMarkedAsRoot(related)) {
	        return;
	      }
	    }
	  }

	  if (!isOutEvent && !isOverEvent) {
	    // Must not be a mouse or pointer in or out - ignoring.
	    return;
	  }

	  var win; // TODO: why is this nullable in the types but we read from it?

	  if (nativeEventTarget.window === nativeEventTarget) {
	    // `nativeEventTarget` is probably a window object.
	    win = nativeEventTarget;
	  } else {
	    // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
	    var doc = nativeEventTarget.ownerDocument;

	    if (doc) {
	      win = doc.defaultView || doc.parentWindow;
	    } else {
	      win = window;
	    }
	  }

	  var from;
	  var to;

	  if (isOutEvent) {
	    var _related = nativeEvent.relatedTarget || nativeEvent.toElement;

	    from = targetInst;
	    to = _related ? getClosestInstanceFromNode(_related) : null;

	    if (to !== null) {
	      var nearestMounted = getNearestMountedFiber(to);

	      if (to !== nearestMounted || to.tag !== HostComponent && to.tag !== HostText) {
	        to = null;
	      }
	    }
	  } else {
	    // Moving to a node from outside the window.
	    from = null;
	    to = targetInst;
	  }

	  if (from === to) {
	    // Nothing pertains to our managed components.
	    return;
	  }

	  var SyntheticEventCtor = SyntheticMouseEvent;
	  var leaveEventType = 'onMouseLeave';
	  var enterEventType = 'onMouseEnter';
	  var eventTypePrefix = 'mouse';

	  if (domEventName === 'pointerout' || domEventName === 'pointerover') {
	    SyntheticEventCtor = SyntheticPointerEvent;
	    leaveEventType = 'onPointerLeave';
	    enterEventType = 'onPointerEnter';
	    eventTypePrefix = 'pointer';
	  }

	  var fromNode = from == null ? win : getNodeFromInstance(from);
	  var toNode = to == null ? win : getNodeFromInstance(to);
	  var leave = new SyntheticEventCtor(leaveEventType, eventTypePrefix + 'leave', from, nativeEvent, nativeEventTarget);
	  leave.target = fromNode;
	  leave.relatedTarget = toNode;
	  var enter = null; // We should only process this nativeEvent if we are processing
	  // the first ancestor. Next time, we will ignore the event.

	  var nativeTargetInst = getClosestInstanceFromNode(nativeEventTarget);

	  if (nativeTargetInst === targetInst) {
	    var enterEvent = new SyntheticEventCtor(enterEventType, eventTypePrefix + 'enter', to, nativeEvent, nativeEventTarget);
	    enterEvent.target = toNode;
	    enterEvent.relatedTarget = fromNode;
	    enter = enterEvent;
	  }

	  accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leave, enter, from, to);
	}

	/**
	 * inlined Object.is polyfill to avoid requiring consumers ship their own
	 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
	 */
	function is(x, y) {
	  return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y // eslint-disable-line no-self-compare
	  ;
	}

	var objectIs = typeof Object.is === 'function' ? Object.is : is;

	/**
	 * Performs equality by iterating through keys on an object and returning false
	 * when any key has values which are not strictly equal between the arguments.
	 * Returns true when the values of all keys are strictly equal.
	 */

	function shallowEqual(objA, objB) {
	  if (objectIs(objA, objB)) {
	    return true;
	  }

	  if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {
	    return false;
	  }

	  var keysA = Object.keys(objA);
	  var keysB = Object.keys(objB);

	  if (keysA.length !== keysB.length) {
	    return false;
	  } // Test for A's keys different from B.


	  for (var i = 0; i < keysA.length; i++) {
	    var currentKey = keysA[i];

	    if (!hasOwnProperty.call(objB, currentKey) || !objectIs(objA[currentKey], objB[currentKey])) {
	      return false;
	    }
	  }

	  return true;
	}

	/**
	 * Given any node return the first leaf node without children.
	 *
	 * @param {DOMElement|DOMTextNode} node
	 * @return {DOMElement|DOMTextNode}
	 */

	function getLeafNode(node) {
	  while (node && node.firstChild) {
	    node = node.firstChild;
	  }

	  return node;
	}
	/**
	 * Get the next sibling within a container. This will walk up the
	 * DOM if a node's siblings have been exhausted.
	 *
	 * @param {DOMElement|DOMTextNode} node
	 * @return {?DOMElement|DOMTextNode}
	 */


	function getSiblingNode(node) {
	  while (node) {
	    if (node.nextSibling) {
	      return node.nextSibling;
	    }

	    node = node.parentNode;
	  }
	}
	/**
	 * Get object describing the nodes which contain characters at offset.
	 *
	 * @param {DOMElement|DOMTextNode} root
	 * @param {number} offset
	 * @return {?object}
	 */


	function getNodeForCharacterOffset(root, offset) {
	  var node = getLeafNode(root);
	  var nodeStart = 0;
	  var nodeEnd = 0;

	  while (node) {
	    if (node.nodeType === TEXT_NODE) {
	      nodeEnd = nodeStart + node.textContent.length;

	      if (nodeStart <= offset && nodeEnd >= offset) {
	        return {
	          node: node,
	          offset: offset - nodeStart
	        };
	      }

	      nodeStart = nodeEnd;
	    }

	    node = getLeafNode(getSiblingNode(node));
	  }
	}

	/**
	 * @param {DOMElement} outerNode
	 * @return {?object}
	 */

	function getOffsets(outerNode) {
	  var ownerDocument = outerNode.ownerDocument;
	  var win = ownerDocument && ownerDocument.defaultView || window;
	  var selection = win.getSelection && win.getSelection();

	  if (!selection || selection.rangeCount === 0) {
	    return null;
	  }

	  var anchorNode = selection.anchorNode,
	      anchorOffset = selection.anchorOffset,
	      focusNode = selection.focusNode,
	      focusOffset = selection.focusOffset; // In Firefox, anchorNode and focusNode can be "anonymous divs", e.g. the
	  // up/down buttons on an <input type="number">. Anonymous divs do not seem to
	  // expose properties, triggering a "Permission denied error" if any of its
	  // properties are accessed. The only seemingly possible way to avoid erroring
	  // is to access a property that typically works for non-anonymous divs and
	  // catch any error that may otherwise arise. See
	  // https://bugzilla.mozilla.org/show_bug.cgi?id=208427

	  try {
	    /* eslint-disable no-unused-expressions */
	    anchorNode.nodeType;
	    focusNode.nodeType;
	    /* eslint-enable no-unused-expressions */
	  } catch (e) {
	    return null;
	  }

	  return getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset);
	}
	/**
	 * Returns {start, end} where `start` is the character/codepoint index of
	 * (anchorNode, anchorOffset) within the textContent of `outerNode`, and
	 * `end` is the index of (focusNode, focusOffset).
	 *
	 * Returns null if you pass in garbage input but we should probably just crash.
	 *
	 * Exported only for testing.
	 */

	function getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset) {
	  var length = 0;
	  var start = -1;
	  var end = -1;
	  var indexWithinAnchor = 0;
	  var indexWithinFocus = 0;
	  var node = outerNode;
	  var parentNode = null;

	  outer: while (true) {
	    var next = null;

	    while (true) {
	      if (node === anchorNode && (anchorOffset === 0 || node.nodeType === TEXT_NODE)) {
	        start = length + anchorOffset;
	      }

	      if (node === focusNode && (focusOffset === 0 || node.nodeType === TEXT_NODE)) {
	        end = length + focusOffset;
	      }

	      if (node.nodeType === TEXT_NODE) {
	        length += node.nodeValue.length;
	      }

	      if ((next = node.firstChild) === null) {
	        break;
	      } // Moving from `node` to its first child `next`.


	      parentNode = node;
	      node = next;
	    }

	    while (true) {
	      if (node === outerNode) {
	        // If `outerNode` has children, this is always the second time visiting
	        // it. If it has no children, this is still the first loop, and the only
	        // valid selection is anchorNode and focusNode both equal to this node
	        // and both offsets 0, in which case we will have handled above.
	        break outer;
	      }

	      if (parentNode === anchorNode && ++indexWithinAnchor === anchorOffset) {
	        start = length;
	      }

	      if (parentNode === focusNode && ++indexWithinFocus === focusOffset) {
	        end = length;
	      }

	      if ((next = node.nextSibling) !== null) {
	        break;
	      }

	      node = parentNode;
	      parentNode = node.parentNode;
	    } // Moving from `node` to its next sibling `next`.


	    node = next;
	  }

	  if (start === -1 || end === -1) {
	    // This should never happen. (Would happen if the anchor/focus nodes aren't
	    // actually inside the passed-in node.)
	    return null;
	  }

	  return {
	    start: start,
	    end: end
	  };
	}
	/**
	 * In modern non-IE browsers, we can support both forward and backward
	 * selections.
	 *
	 * Note: IE10+ supports the Selection object, but it does not support
	 * the `extend` method, which means that even in modern IE, it's not possible
	 * to programmatically create a backward selection. Thus, for all IE
	 * versions, we use the old IE API to create our selections.
	 *
	 * @param {DOMElement|DOMTextNode} node
	 * @param {object} offsets
	 */

	function setOffsets(node, offsets) {
	  var doc = node.ownerDocument || document;
	  var win = doc && doc.defaultView || window; // Edge fails with "Object expected" in some scenarios.
	  // (For instance: TinyMCE editor used in a list component that supports pasting to add more,
	  // fails when pasting 100+ items)

	  if (!win.getSelection) {
	    return;
	  }

	  var selection = win.getSelection();
	  var length = node.textContent.length;
	  var start = Math.min(offsets.start, length);
	  var end = offsets.end === undefined ? start : Math.min(offsets.end, length); // IE 11 uses modern selection, but doesn't support the extend method.
	  // Flip backward selections, so we can set with a single range.

	  if (!selection.extend && start > end) {
	    var temp = end;
	    end = start;
	    start = temp;
	  }

	  var startMarker = getNodeForCharacterOffset(node, start);
	  var endMarker = getNodeForCharacterOffset(node, end);

	  if (startMarker && endMarker) {
	    if (selection.rangeCount === 1 && selection.anchorNode === startMarker.node && selection.anchorOffset === startMarker.offset && selection.focusNode === endMarker.node && selection.focusOffset === endMarker.offset) {
	      return;
	    }

	    var range = doc.createRange();
	    range.setStart(startMarker.node, startMarker.offset);
	    selection.removeAllRanges();

	    if (start > end) {
	      selection.addRange(range);
	      selection.extend(endMarker.node, endMarker.offset);
	    } else {
	      range.setEnd(endMarker.node, endMarker.offset);
	      selection.addRange(range);
	    }
	  }
	}

	function isTextNode(node) {
	  return node && node.nodeType === TEXT_NODE;
	}

	function containsNode(outerNode, innerNode) {
	  if (!outerNode || !innerNode) {
	    return false;
	  } else if (outerNode === innerNode) {
	    return true;
	  } else if (isTextNode(outerNode)) {
	    return false;
	  } else if (isTextNode(innerNode)) {
	    return containsNode(outerNode, innerNode.parentNode);
	  } else if ('contains' in outerNode) {
	    return outerNode.contains(innerNode);
	  } else if (outerNode.compareDocumentPosition) {
	    return !!(outerNode.compareDocumentPosition(innerNode) & 16);
	  } else {
	    return false;
	  }
	}

	function isInDocument(node) {
	  return node && node.ownerDocument && containsNode(node.ownerDocument.documentElement, node);
	}

	function isSameOriginFrame(iframe) {
	  try {
	    // Accessing the contentDocument of a HTMLIframeElement can cause the browser
	    // to throw, e.g. if it has a cross-origin src attribute.
	    // Safari will show an error in the console when the access results in "Blocked a frame with origin". e.g:
	    // iframe.contentDocument.defaultView;
	    // A safety way is to access one of the cross origin properties: Window or Location
	    // Which might result in "SecurityError" DOM Exception and it is compatible to Safari.
	    // https://html.spec.whatwg.org/multipage/browsers.html#integration-with-idl
	    return typeof iframe.contentWindow.location.href === 'string';
	  } catch (err) {
	    return false;
	  }
	}

	function getActiveElementDeep() {
	  var win = window;
	  var element = getActiveElement();

	  while (element instanceof win.HTMLIFrameElement) {
	    if (isSameOriginFrame(element)) {
	      win = element.contentWindow;
	    } else {
	      return element;
	    }

	    element = getActiveElement(win.document);
	  }

	  return element;
	}
	/**
	 * @ReactInputSelection: React input selection module. Based on Selection.js,
	 * but modified to be suitable for react and has a couple of bug fixes (doesn't
	 * assume buttons have range selections allowed).
	 * Input selection module for React.
	 */

	/**
	 * @hasSelectionCapabilities: we get the element types that support selection
	 * from https://html.spec.whatwg.org/#do-not-apply, looking at `selectionStart`
	 * and `selectionEnd` rows.
	 */


	function hasSelectionCapabilities(elem) {
	  var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
	  return nodeName && (nodeName === 'input' && (elem.type === 'text' || elem.type === 'search' || elem.type === 'tel' || elem.type === 'url' || elem.type === 'password') || nodeName === 'textarea' || elem.contentEditable === 'true');
	}
	function getSelectionInformation() {
	  var focusedElem = getActiveElementDeep();
	  return {
	    focusedElem: focusedElem,
	    selectionRange: hasSelectionCapabilities(focusedElem) ? getSelection(focusedElem) : null
	  };
	}
	/**
	 * @restoreSelection: If any selection information was potentially lost,
	 * restore it. This is useful when performing operations that could remove dom
	 * nodes and place them back in, resulting in focus being lost.
	 */

	function restoreSelection(priorSelectionInformation) {
	  var curFocusedElem = getActiveElementDeep();
	  var priorFocusedElem = priorSelectionInformation.focusedElem;
	  var priorSelectionRange = priorSelectionInformation.selectionRange;

	  if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
	    if (priorSelectionRange !== null && hasSelectionCapabilities(priorFocusedElem)) {
	      setSelection(priorFocusedElem, priorSelectionRange);
	    } // Focusing a node can change the scroll position, which is undesirable


	    var ancestors = [];
	    var ancestor = priorFocusedElem;

	    while (ancestor = ancestor.parentNode) {
	      if (ancestor.nodeType === ELEMENT_NODE) {
	        ancestors.push({
	          element: ancestor,
	          left: ancestor.scrollLeft,
	          top: ancestor.scrollTop
	        });
	      }
	    }

	    if (typeof priorFocusedElem.focus === 'function') {
	      priorFocusedElem.focus();
	    }

	    for (var i = 0; i < ancestors.length; i++) {
	      var info = ancestors[i];
	      info.element.scrollLeft = info.left;
	      info.element.scrollTop = info.top;
	    }
	  }
	}
	/**
	 * @getSelection: Gets the selection bounds of a focused textarea, input or
	 * contentEditable node.
	 * -@input: Look up selection bounds of this input
	 * -@return {start: selectionStart, end: selectionEnd}
	 */

	function getSelection(input) {
	  var selection;

	  if ('selectionStart' in input) {
	    // Modern browser with input or textarea.
	    selection = {
	      start: input.selectionStart,
	      end: input.selectionEnd
	    };
	  } else {
	    // Content editable or old IE textarea.
	    selection = getOffsets(input);
	  }

	  return selection || {
	    start: 0,
	    end: 0
	  };
	}
	/**
	 * @setSelection: Sets the selection bounds of a textarea or input and focuses
	 * the input.
	 * -@input     Set selection bounds of this input or textarea
	 * -@offsets   Object of same form that is returned from get*
	 */

	function setSelection(input, offsets) {
	  var start = offsets.start;
	  var end = offsets.end;

	  if (end === undefined) {
	    end = start;
	  }

	  if ('selectionStart' in input) {
	    input.selectionStart = start;
	    input.selectionEnd = Math.min(end, input.value.length);
	  } else {
	    setOffsets(input, offsets);
	  }
	}

	var skipSelectionChangeEvent = canUseDOM && 'documentMode' in document && document.documentMode <= 11;

	function registerEvents$3() {
	  registerTwoPhaseEvent('onSelect', ['focusout', 'contextmenu', 'dragend', 'focusin', 'keydown', 'keyup', 'mousedown', 'mouseup', 'selectionchange']);
	}

	var activeElement$1 = null;
	var activeElementInst$1 = null;
	var lastSelection = null;
	var mouseDown = false;
	/**
	 * Get an object which is a unique representation of the current selection.
	 *
	 * The return value will not be consistent across nodes or browsers, but
	 * two identical selections on the same node will return identical objects.
	 */

	function getSelection$1(node) {
	  if ('selectionStart' in node && hasSelectionCapabilities(node)) {
	    return {
	      start: node.selectionStart,
	      end: node.selectionEnd
	    };
	  } else {
	    var win = node.ownerDocument && node.ownerDocument.defaultView || window;
	    var selection = win.getSelection();
	    return {
	      anchorNode: selection.anchorNode,
	      anchorOffset: selection.anchorOffset,
	      focusNode: selection.focusNode,
	      focusOffset: selection.focusOffset
	    };
	  }
	}
	/**
	 * Get document associated with the event target.
	 */


	function getEventTargetDocument(eventTarget) {
	  return eventTarget.window === eventTarget ? eventTarget.document : eventTarget.nodeType === DOCUMENT_NODE ? eventTarget : eventTarget.ownerDocument;
	}
	/**
	 * Poll selection to see whether it's changed.
	 *
	 * @param {object} nativeEvent
	 * @param {object} nativeEventTarget
	 * @return {?SyntheticEvent}
	 */


	function constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget) {
	  // Ensure we have the right element, and that the user is not dragging a
	  // selection (this matches native `select` event behavior). In HTML5, select
	  // fires only on input and textarea thus if there's no focused element we
	  // won't dispatch.
	  var doc = getEventTargetDocument(nativeEventTarget);

	  if (mouseDown || activeElement$1 == null || activeElement$1 !== getActiveElement(doc)) {
	    return;
	  } // Only fire when selection has actually changed.


	  var currentSelection = getSelection$1(activeElement$1);

	  if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
	    lastSelection = currentSelection;
	    var listeners = accumulateTwoPhaseListeners(activeElementInst$1, 'onSelect');

	    if (listeners.length > 0) {
	      var event = new SyntheticEvent('onSelect', 'select', null, nativeEvent, nativeEventTarget);
	      dispatchQueue.push({
	        event: event,
	        listeners: listeners
	      });
	      event.target = activeElement$1;
	    }
	  }
	}
	/**
	 * This plugin creates an `onSelect` event that normalizes select events
	 * across form elements.
	 *
	 * Supported elements are:
	 * - input (see `isTextInputElement`)
	 * - textarea
	 * - contentEditable
	 *
	 * This differs from native browser implementations in the following ways:
	 * - Fires on contentEditable fields as well as inputs.
	 * - Fires for collapsed selection.
	 * - Fires after user input.
	 */


	function extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
	  var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;

	  switch (domEventName) {
	    // Track the input node that has focus.
	    case 'focusin':
	      if (isTextInputElement(targetNode) || targetNode.contentEditable === 'true') {
	        activeElement$1 = targetNode;
	        activeElementInst$1 = targetInst;
	        lastSelection = null;
	      }

	      break;

	    case 'focusout':
	      activeElement$1 = null;
	      activeElementInst$1 = null;
	      lastSelection = null;
	      break;
	    // Don't fire the event while the user is dragging. This matches the
	    // semantics of the native select event.

	    case 'mousedown':
	      mouseDown = true;
	      break;

	    case 'contextmenu':
	    case 'mouseup':
	    case 'dragend':
	      mouseDown = false;
	      constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
	      break;
	    // Chrome and IE fire non-standard event when selection is changed (and
	    // sometimes when it hasn't). IE's event fires out of order with respect
	    // to key and input events on deletion, so we discard it.
	    //
	    // Firefox doesn't support selectionchange, so check selection status
	    // after each key entry. The selection changes after keydown and before
	    // keyup, but we check on keydown as well in the case of holding down a
	    // key, when multiple keydown events are fired but only one keyup is.
	    // This is also our approach for IE handling, for the reason above.

	    case 'selectionchange':
	      if (skipSelectionChangeEvent) {
	        break;
	      }

	    // falls through

	    case 'keydown':
	    case 'keyup':
	      constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
	  }
	}

	/**
	 * Generate a mapping of standard vendor prefixes using the defined style property and event name.
	 *
	 * @param {string} styleProp
	 * @param {string} eventName
	 * @returns {object}
	 */

	function makePrefixMap(styleProp, eventName) {
	  var prefixes = {};
	  prefixes[styleProp.toLowerCase()] = eventName.toLowerCase();
	  prefixes['Webkit' + styleProp] = 'webkit' + eventName;
	  prefixes['Moz' + styleProp] = 'moz' + eventName;
	  return prefixes;
	}
	/**
	 * A list of event names to a configurable list of vendor prefixes.
	 */


	var vendorPrefixes = {
	  animationend: makePrefixMap('Animation', 'AnimationEnd'),
	  animationiteration: makePrefixMap('Animation', 'AnimationIteration'),
	  animationstart: makePrefixMap('Animation', 'AnimationStart'),
	  transitionend: makePrefixMap('Transition', 'TransitionEnd')
	};
	/**
	 * Event names that have already been detected and prefixed (if applicable).
	 */

	var prefixedEventNames = {};
	/**
	 * Element to check for prefixes on.
	 */

	var style = {};
	/**
	 * Bootstrap if a DOM exists.
	 */

	if (canUseDOM) {
	  style = document.createElement('div').style; // On some platforms, in particular some releases of Android 4.x,
	  // the un-prefixed "animation" and "transition" properties are defined on the
	  // style object but the events that fire will still be prefixed, so we need
	  // to check if the un-prefixed events are usable, and if not remove them from the map.

	  if (!('AnimationEvent' in window)) {
	    delete vendorPrefixes.animationend.animation;
	    delete vendorPrefixes.animationiteration.animation;
	    delete vendorPrefixes.animationstart.animation;
	  } // Same as above


	  if (!('TransitionEvent' in window)) {
	    delete vendorPrefixes.transitionend.transition;
	  }
	}
	/**
	 * Attempts to determine the correct vendor prefixed event name.
	 *
	 * @param {string} eventName
	 * @returns {string}
	 */


	function getVendorPrefixedEventName(eventName) {
	  if (prefixedEventNames[eventName]) {
	    return prefixedEventNames[eventName];
	  } else if (!vendorPrefixes[eventName]) {
	    return eventName;
	  }

	  var prefixMap = vendorPrefixes[eventName];

	  for (var styleProp in prefixMap) {
	    if (prefixMap.hasOwnProperty(styleProp) && styleProp in style) {
	      return prefixedEventNames[eventName] = prefixMap[styleProp];
	    }
	  }

	  return eventName;
	}

	var ANIMATION_END = getVendorPrefixedEventName('animationend');
	var ANIMATION_ITERATION = getVendorPrefixedEventName('animationiteration');
	var ANIMATION_START = getVendorPrefixedEventName('animationstart');
	var TRANSITION_END = getVendorPrefixedEventName('transitionend');

	var topLevelEventsToReactNames = new Map(); // NOTE: Capitalization is important in this list!
	//
	// E.g. it needs "pointerDown", not "pointerdown".
	// This is because we derive both React name ("onPointerDown")
	// and DOM name ("pointerdown") from the same list.
	//
	// Exceptions that don't match this convention are listed separately.
	//
	// prettier-ignore

	var simpleEventPluginEvents = ['abort', 'auxClick', 'cancel', 'canPlay', 'canPlayThrough', 'click', 'close', 'contextMenu', 'copy', 'cut', 'drag', 'dragEnd', 'dragEnter', 'dragExit', 'dragLeave', 'dragOver', 'dragStart', 'drop', 'durationChange', 'emptied', 'encrypted', 'ended', 'error', 'gotPointerCapture', 'input', 'invalid', 'keyDown', 'keyPress', 'keyUp', 'load', 'loadedData', 'loadedMetadata', 'loadStart', 'lostPointerCapture', 'mouseDown', 'mouseMove', 'mouseOut', 'mouseOver', 'mouseUp', 'paste', 'pause', 'play', 'playing', 'pointerCancel', 'pointerDown', 'pointerMove', 'pointerOut', 'pointerOver', 'pointerUp', 'progress', 'rateChange', 'reset', 'resize', 'seeked', 'seeking', 'stalled', 'submit', 'suspend', 'timeUpdate', 'touchCancel', 'touchEnd', 'touchStart', 'volumeChange', 'scroll', 'toggle', 'touchMove', 'waiting', 'wheel'];

	function registerSimpleEvent(domEventName, reactName) {
	  topLevelEventsToReactNames.set(domEventName, reactName);
	  registerTwoPhaseEvent(reactName, [domEventName]);
	}

	function registerSimpleEvents() {
	  for (var i = 0; i < simpleEventPluginEvents.length; i++) {
	    var eventName = simpleEventPluginEvents[i];
	    var domEventName = eventName.toLowerCase();
	    var capitalizedEvent = eventName[0].toUpperCase() + eventName.slice(1);
	    registerSimpleEvent(domEventName, 'on' + capitalizedEvent);
	  } // Special cases where event names don't match.


	  registerSimpleEvent(ANIMATION_END, 'onAnimationEnd');
	  registerSimpleEvent(ANIMATION_ITERATION, 'onAnimationIteration');
	  registerSimpleEvent(ANIMATION_START, 'onAnimationStart');
	  registerSimpleEvent('dblclick', 'onDoubleClick');
	  registerSimpleEvent('focusin', 'onFocus');
	  registerSimpleEvent('focusout', 'onBlur');
	  registerSimpleEvent(TRANSITION_END, 'onTransitionEnd');
	}

	function extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
	  var reactName = topLevelEventsToReactNames.get(domEventName);

	  if (reactName === undefined) {
	    return;
	  }

	  var SyntheticEventCtor = SyntheticEvent;
	  var reactEventType = domEventName;

	  switch (domEventName) {
	    case 'keypress':
	      // Firefox creates a keypress event for function keys too. This removes
	      // the unwanted keypress events. Enter is however both printable and
	      // non-printable. One would expect Tab to be as well (but it isn't).
	      if (getEventCharCode(nativeEvent) === 0) {
	        return;
	      }

	    /* falls through */

	    case 'keydown':
	    case 'keyup':
	      SyntheticEventCtor = SyntheticKeyboardEvent;
	      break;

	    case 'focusin':
	      reactEventType = 'focus';
	      SyntheticEventCtor = SyntheticFocusEvent;
	      break;

	    case 'focusout':
	      reactEventType = 'blur';
	      SyntheticEventCtor = SyntheticFocusEvent;
	      break;

	    case 'beforeblur':
	    case 'afterblur':
	      SyntheticEventCtor = SyntheticFocusEvent;
	      break;

	    case 'click':
	      // Firefox creates a click event on right mouse clicks. This removes the
	      // unwanted click events.
	      if (nativeEvent.button === 2) {
	        return;
	      }

	    /* falls through */

	    case 'auxclick':
	    case 'dblclick':
	    case 'mousedown':
	    case 'mousemove':
	    case 'mouseup': // TODO: Disabled elements should not respond to mouse events

	    /* falls through */

	    case 'mouseout':
	    case 'mouseover':
	    case 'contextmenu':
	      SyntheticEventCtor = SyntheticMouseEvent;
	      break;

	    case 'drag':
	    case 'dragend':
	    case 'dragenter':
	    case 'dragexit':
	    case 'dragleave':
	    case 'dragover':
	    case 'dragstart':
	    case 'drop':
	      SyntheticEventCtor = SyntheticDragEvent;
	      break;

	    case 'touchcancel':
	    case 'touchend':
	    case 'touchmove':
	    case 'touchstart':
	      SyntheticEventCtor = SyntheticTouchEvent;
	      break;

	    case ANIMATION_END:
	    case ANIMATION_ITERATION:
	    case ANIMATION_START:
	      SyntheticEventCtor = SyntheticAnimationEvent;
	      break;

	    case TRANSITION_END:
	      SyntheticEventCtor = SyntheticTransitionEvent;
	      break;

	    case 'scroll':
	      SyntheticEventCtor = SyntheticUIEvent;
	      break;

	    case 'wheel':
	      SyntheticEventCtor = SyntheticWheelEvent;
	      break;

	    case 'copy':
	    case 'cut':
	    case 'paste':
	      SyntheticEventCtor = SyntheticClipboardEvent;
	      break;

	    case 'gotpointercapture':
	    case 'lostpointercapture':
	    case 'pointercancel':
	    case 'pointerdown':
	    case 'pointermove':
	    case 'pointerout':
	    case 'pointerover':
	    case 'pointerup':
	      SyntheticEventCtor = SyntheticPointerEvent;
	      break;
	  }

	  var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;

	  {
	    // Some events don't bubble in the browser.
	    // In the past, React has always bubbled them, but this can be surprising.
	    // We're going to try aligning closer to the browser behavior by not bubbling
	    // them in React either. We'll start by not bubbling onScroll, and then expand.
	    var accumulateTargetOnly = !inCapturePhase && // TODO: ideally, we'd eventually add all events from
	    // nonDelegatedEvents list in DOMPluginEventSystem.
	    // Then we can remove this special list.
	    // This is a breaking change that can wait until React 18.
	    domEventName === 'scroll';

	    var _listeners = accumulateSinglePhaseListeners(targetInst, reactName, nativeEvent.type, inCapturePhase, accumulateTargetOnly);

	    if (_listeners.length > 0) {
	      // Intentionally create event lazily.
	      var _event = new SyntheticEventCtor(reactName, reactEventType, null, nativeEvent, nativeEventTarget);

	      dispatchQueue.push({
	        event: _event,
	        listeners: _listeners
	      });
	    }
	  }
	}

	// TODO: remove top-level side effect.
	registerSimpleEvents();
	registerEvents$2();
	registerEvents$1();
	registerEvents$3();
	registerEvents();

	function extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
	  // TODO: we should remove the concept of a "SimpleEventPlugin".
	  // This is the basic functionality of the event system. All
	  // the other plugins are essentially polyfills. So the plugin
	  // should probably be inlined somewhere and have its logic
	  // be core the to event system. This would potentially allow
	  // us to ship builds of React without the polyfilled plugins below.
	  extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
	  var shouldProcessPolyfillPlugins = (eventSystemFlags & SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS) === 0; // We don't process these events unless we are in the
	  // event's native "bubble" phase, which means that we're
	  // not in the capture phase. That's because we emulate
	  // the capture phase here still. This is a trade-off,
	  // because in an ideal world we would not emulate and use
	  // the phases properly, like we do with the SimpleEvent
	  // plugin. However, the plugins below either expect
	  // emulation (EnterLeave) or use state localized to that
	  // plugin (BeforeInput, Change, Select). The state in
	  // these modules complicates things, as you'll essentially
	  // get the case where the capture phase event might change
	  // state, only for the following bubble event to come in
	  // later and not trigger anything as the state now
	  // invalidates the heuristics of the event plugin. We
	  // could alter all these plugins to work in such ways, but
	  // that might cause other unknown side-effects that we
	  // can't foresee right now.

	  if (shouldProcessPolyfillPlugins) {
	    extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
	    extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
	    extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
	    extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
	  }
	} // List of events that need to be individually attached to media elements.


	var mediaEventTypes = ['abort', 'canplay', 'canplaythrough', 'durationchange', 'emptied', 'encrypted', 'ended', 'error', 'loadeddata', 'loadedmetadata', 'loadstart', 'pause', 'play', 'playing', 'progress', 'ratechange', 'resize', 'seeked', 'seeking', 'stalled', 'suspend', 'timeupdate', 'volumechange', 'waiting']; // We should not delegate these events to the container, but rather
	// set them on the actual target element itself. This is primarily
	// because these events do not consistently bubble in the DOM.

	var nonDelegatedEvents = new Set(['cancel', 'close', 'invalid', 'load', 'scroll', 'toggle'].concat(mediaEventTypes));

	function executeDispatch(event, listener, currentTarget) {
	  var type = event.type || 'unknown-event';
	  event.currentTarget = currentTarget;
	  invokeGuardedCallbackAndCatchFirstError(type, listener, undefined, event);
	  event.currentTarget = null;
	}

	function processDispatchQueueItemsInOrder(event, dispatchListeners, inCapturePhase) {
	  var previousInstance;

	  if (inCapturePhase) {
	    for (var i = dispatchListeners.length - 1; i >= 0; i--) {
	      var _dispatchListeners$i = dispatchListeners[i],
	          instance = _dispatchListeners$i.instance,
	          currentTarget = _dispatchListeners$i.currentTarget,
	          listener = _dispatchListeners$i.listener;

	      if (instance !== previousInstance && event.isPropagationStopped()) {
	        return;
	      }

	      executeDispatch(event, listener, currentTarget);
	      previousInstance = instance;
	    }
	  } else {
	    for (var _i = 0; _i < dispatchListeners.length; _i++) {
	      var _dispatchListeners$_i = dispatchListeners[_i],
	          _instance = _dispatchListeners$_i.instance,
	          _currentTarget = _dispatchListeners$_i.currentTarget,
	          _listener = _dispatchListeners$_i.listener;

	      if (_instance !== previousInstance && event.isPropagationStopped()) {
	        return;
	      }

	      executeDispatch(event, _listener, _currentTarget);
	      previousInstance = _instance;
	    }
	  }
	}

	function processDispatchQueue(dispatchQueue, eventSystemFlags) {
	  var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;

	  for (var i = 0; i < dispatchQueue.length; i++) {
	    var _dispatchQueue$i = dispatchQueue[i],
	        event = _dispatchQueue$i.event,
	        listeners = _dispatchQueue$i.listeners;
	    processDispatchQueueItemsInOrder(event, listeners, inCapturePhase); //  event system doesn't use pooling.
	  } // This would be a good time to rethrow if any of the event handlers threw.


	  rethrowCaughtError();
	}

	function dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
	  var nativeEventTarget = getEventTarget(nativeEvent);
	  var dispatchQueue = [];
	  extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
	  processDispatchQueue(dispatchQueue, eventSystemFlags);
	}

	function listenToNonDelegatedEvent(domEventName, targetElement) {
	  {
	    if (!nonDelegatedEvents.has(domEventName)) {
	      error('Did not expect a listenToNonDelegatedEvent() call for "%s". ' + 'This is a bug in React. Please file an issue.', domEventName);
	    }
	  }

	  var isCapturePhaseListener = false;
	  var listenerSet = getEventListenerSet(targetElement);
	  var listenerSetKey = getListenerSetKey(domEventName, isCapturePhaseListener);

	  if (!listenerSet.has(listenerSetKey)) {
	    addTrappedEventListener(targetElement, domEventName, IS_NON_DELEGATED, isCapturePhaseListener);
	    listenerSet.add(listenerSetKey);
	  }
	}
	function listenToNativeEvent(domEventName, isCapturePhaseListener, target) {
	  {
	    if (nonDelegatedEvents.has(domEventName) && !isCapturePhaseListener) {
	      error('Did not expect a listenToNativeEvent() call for "%s" in the bubble phase. ' + 'This is a bug in React. Please file an issue.', domEventName);
	    }
	  }

	  var eventSystemFlags = 0;

	  if (isCapturePhaseListener) {
	    eventSystemFlags |= IS_CAPTURE_PHASE;
	  }

	  addTrappedEventListener(target, domEventName, eventSystemFlags, isCapturePhaseListener);
	} // This is only used by createEventHandle when the
	var listeningMarker = '_reactListening' + Math.random().toString(36).slice(2);
	function listenToAllSupportedEvents(rootContainerElement) {
	  if (!rootContainerElement[listeningMarker]) {
	    rootContainerElement[listeningMarker] = true;
	    allNativeEvents.forEach(function (domEventName) {
	      // We handle selectionchange separately because it
	      // doesn't bubble and needs to be on the document.
	      if (domEventName !== 'selectionchange') {
	        if (!nonDelegatedEvents.has(domEventName)) {
	          listenToNativeEvent(domEventName, false, rootContainerElement);
	        }

	        listenToNativeEvent(domEventName, true, rootContainerElement);
	      }
	    });
	    var ownerDocument = rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;

	    if (ownerDocument !== null) {
	      // The selectionchange event also needs deduplication
	      // but it is attached to the document.
	      if (!ownerDocument[listeningMarker]) {
	        ownerDocument[listeningMarker] = true;
	        listenToNativeEvent('selectionchange', false, ownerDocument);
	      }
	    }
	  }
	}

	function addTrappedEventListener(targetContainer, domEventName, eventSystemFlags, isCapturePhaseListener, isDeferredListenerForLegacyFBSupport) {
	  var listener = createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags); // If passive option is not supported, then the event will be
	  // active and not passive.

	  var isPassiveListener = undefined;

	  if (passiveBrowserEventsSupported) {
	    // Browsers introduced an intervention, making these events
	    // passive by default on document. React doesn't bind them
	    // to document anymore, but changing this now would undo
	    // the performance wins from the change. So we emulate
	    // the existing behavior manually on the roots now.
	    // https://github.com/facebook/react/issues/19651
	    if (domEventName === 'touchstart' || domEventName === 'touchmove' || domEventName === 'wheel') {
	      isPassiveListener = true;
	    }
	  }

	  targetContainer =  targetContainer;


	  if (isCapturePhaseListener) {
	    if (isPassiveListener !== undefined) {
	      addEventCaptureListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
	    } else {
	      addEventCaptureListener(targetContainer, domEventName, listener);
	    }
	  } else {
	    if (isPassiveListener !== undefined) {
	      addEventBubbleListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
	    } else {
	      addEventBubbleListener(targetContainer, domEventName, listener);
	    }
	  }
	}

	function isMatchingRootContainer(grandContainer, targetContainer) {
	  return grandContainer === targetContainer || grandContainer.nodeType === COMMENT_NODE && grandContainer.parentNode === targetContainer;
	}

	function dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
	  var ancestorInst = targetInst;

	  if ((eventSystemFlags & IS_EVENT_HANDLE_NON_MANAGED_NODE) === 0 && (eventSystemFlags & IS_NON_DELEGATED) === 0) {
	    var targetContainerNode = targetContainer; // If we are using the legacy FB support flag, we

	    if (targetInst !== null) {
	      // The below logic attempts to work out if we need to change
	      // the target fiber to a different ancestor. We had similar logic
	      // in the legacy event system, except the big difference between
	      // systems is that the modern event system now has an event listener
	      // attached to each React Root and React Portal Root. Together,
	      // the DOM nodes representing these roots are the "rootContainer".
	      // To figure out which ancestor instance we should use, we traverse
	      // up the fiber tree from the target instance and attempt to find
	      // root boundaries that match that of our current "rootContainer".
	      // If we find that "rootContainer", we find the parent fiber
	      // sub-tree for that root and make that our ancestor instance.
	      var node = targetInst;

	      mainLoop: while (true) {
	        if (node === null) {
	          return;
	        }

	        var nodeTag = node.tag;

	        if (nodeTag === HostRoot || nodeTag === HostPortal) {
	          var container = node.stateNode.containerInfo;

	          if (isMatchingRootContainer(container, targetContainerNode)) {
	            break;
	          }

	          if (nodeTag === HostPortal) {
	            // The target is a portal, but it's not the rootContainer we're looking for.
	            // Normally portals handle their own events all the way down to the root.
	            // So we should be able to stop now. However, we don't know if this portal
	            // was part of *our* root.
	            var grandNode = node.return;

	            while (grandNode !== null) {
	              var grandTag = grandNode.tag;

	              if (grandTag === HostRoot || grandTag === HostPortal) {
	                var grandContainer = grandNode.stateNode.containerInfo;

	                if (isMatchingRootContainer(grandContainer, targetContainerNode)) {
	                  // This is the rootContainer we're looking for and we found it as
	                  // a parent of the Portal. That means we can ignore it because the
	                  // Portal will bubble through to us.
	                  return;
	                }
	              }

	              grandNode = grandNode.return;
	            }
	          } // Now we need to find it's corresponding host fiber in the other
	          // tree. To do this we can use getClosestInstanceFromNode, but we
	          // need to validate that the fiber is a host instance, otherwise
	          // we need to traverse up through the DOM till we find the correct
	          // node that is from the other tree.


	          while (container !== null) {
	            var parentNode = getClosestInstanceFromNode(container);

	            if (parentNode === null) {
	              return;
	            }

	            var parentTag = parentNode.tag;

	            if (parentTag === HostComponent || parentTag === HostText) {
	              node = ancestorInst = parentNode;
	              continue mainLoop;
	            }

	            container = container.parentNode;
	          }
	        }

	        node = node.return;
	      }
	    }
	  }

	  batchedUpdates(function () {
	    return dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, ancestorInst);
	  });
	}

	function createDispatchListener(instance, listener, currentTarget) {
	  return {
	    instance: instance,
	    listener: listener,
	    currentTarget: currentTarget
	  };
	}

	function accumulateSinglePhaseListeners(targetFiber, reactName, nativeEventType, inCapturePhase, accumulateTargetOnly, nativeEvent) {
	  var captureName = reactName !== null ? reactName + 'Capture' : null;
	  var reactEventName = inCapturePhase ? captureName : reactName;
	  var listeners = [];
	  var instance = targetFiber;
	  var lastHostComponent = null; // Accumulate all instances and listeners via the target -> root path.

	  while (instance !== null) {
	    var _instance2 = instance,
	        stateNode = _instance2.stateNode,
	        tag = _instance2.tag; // Handle listeners that are on HostComponents (i.e. <div>)

	    if (tag === HostComponent && stateNode !== null) {
	      lastHostComponent = stateNode; // createEventHandle listeners


	      if (reactEventName !== null) {
	        var listener = getListener(instance, reactEventName);

	        if (listener != null) {
	          listeners.push(createDispatchListener(instance, listener, lastHostComponent));
	        }
	      }
	    } // If we are only accumulating events for the target, then we don't
	    // continue to propagate through the React fiber tree to find other
	    // listeners.


	    if (accumulateTargetOnly) {
	      break;
	    } // If we are processing the onBeforeBlur event, then we need to take

	    instance = instance.return;
	  }

	  return listeners;
	} // We should only use this function for:
	// - BeforeInputEventPlugin
	// - ChangeEventPlugin
	// - SelectEventPlugin
	// This is because we only process these plugins
	// in the bubble phase, so we need to accumulate two
	// phase event listeners (via emulation).

	function accumulateTwoPhaseListeners(targetFiber, reactName) {
	  var captureName = reactName + 'Capture';
	  var listeners = [];
	  var instance = targetFiber; // Accumulate all instances and listeners via the target -> root path.

	  while (instance !== null) {
	    var _instance3 = instance,
	        stateNode = _instance3.stateNode,
	        tag = _instance3.tag; // Handle listeners that are on HostComponents (i.e. <div>)

	    if (tag === HostComponent && stateNode !== null) {
	      var currentTarget = stateNode;
	      var captureListener = getListener(instance, captureName);

	      if (captureListener != null) {
	        listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
	      }

	      var bubbleListener = getListener(instance, reactName);

	      if (bubbleListener != null) {
	        listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
	      }
	    }

	    instance = instance.return;
	  }

	  return listeners;
	}

	function getParent(inst) {
	  if (inst === null) {
	    return null;
	  }

	  do {
	    inst = inst.return; // TODO: If this is a HostRoot we might want to bail out.
	    // That is depending on if we want nested subtrees (layers) to bubble
	    // events to their parent. We could also go through parentNode on the
	    // host node but that wouldn't work for React Native and doesn't let us
	    // do the portal feature.
	  } while (inst && inst.tag !== HostComponent);

	  if (inst) {
	    return inst;
	  }

	  return null;
	}
	/**
	 * Return the lowest common ancestor of A and B, or null if they are in
	 * different trees.
	 */


	function getLowestCommonAncestor(instA, instB) {
	  var nodeA = instA;
	  var nodeB = instB;
	  var depthA = 0;

	  for (var tempA = nodeA; tempA; tempA = getParent(tempA)) {
	    depthA++;
	  }

	  var depthB = 0;

	  for (var tempB = nodeB; tempB; tempB = getParent(tempB)) {
	    depthB++;
	  } // If A is deeper, crawl up.


	  while (depthA - depthB > 0) {
	    nodeA = getParent(nodeA);
	    depthA--;
	  } // If B is deeper, crawl up.


	  while (depthB - depthA > 0) {
	    nodeB = getParent(nodeB);
	    depthB--;
	  } // Walk in lockstep until we find a match.


	  var depth = depthA;

	  while (depth--) {
	    if (nodeA === nodeB || nodeB !== null && nodeA === nodeB.alternate) {
	      return nodeA;
	    }

	    nodeA = getParent(nodeA);
	    nodeB = getParent(nodeB);
	  }

	  return null;
	}

	function accumulateEnterLeaveListenersForEvent(dispatchQueue, event, target, common, inCapturePhase) {
	  var registrationName = event._reactName;
	  var listeners = [];
	  var instance = target;

	  while (instance !== null) {
	    if (instance === common) {
	      break;
	    }

	    var _instance4 = instance,
	        alternate = _instance4.alternate,
	        stateNode = _instance4.stateNode,
	        tag = _instance4.tag;

	    if (alternate !== null && alternate === common) {
	      break;
	    }

	    if (tag === HostComponent && stateNode !== null) {
	      var currentTarget = stateNode;

	      if (inCapturePhase) {
	        var captureListener = getListener(instance, registrationName);

	        if (captureListener != null) {
	          listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
	        }
	      } else if (!inCapturePhase) {
	        var bubbleListener = getListener(instance, registrationName);

	        if (bubbleListener != null) {
	          listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
	        }
	      }
	    }

	    instance = instance.return;
	  }

	  if (listeners.length !== 0) {
	    dispatchQueue.push({
	      event: event,
	      listeners: listeners
	    });
	  }
	} // We should only use this function for:
	// - EnterLeaveEventPlugin
	// This is because we only process this plugin
	// in the bubble phase, so we need to accumulate two
	// phase event listeners.


	function accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leaveEvent, enterEvent, from, to) {
	  var common = from && to ? getLowestCommonAncestor(from, to) : null;

	  if (from !== null) {
	    accumulateEnterLeaveListenersForEvent(dispatchQueue, leaveEvent, from, common, false);
	  }

	  if (to !== null && enterEvent !== null) {
	    accumulateEnterLeaveListenersForEvent(dispatchQueue, enterEvent, to, common, true);
	  }
	}
	function getListenerSetKey(domEventName, capture) {
	  return domEventName + "__" + (capture ? 'capture' : 'bubble');
	}

	var didWarnInvalidHydration = false;
	var DANGEROUSLY_SET_INNER_HTML = 'dangerouslySetInnerHTML';
	var SUPPRESS_CONTENT_EDITABLE_WARNING = 'suppressContentEditableWarning';
	var SUPPRESS_HYDRATION_WARNING = 'suppressHydrationWarning';
	var AUTOFOCUS = 'autoFocus';
	var CHILDREN = 'children';
	var STYLE = 'style';
	var HTML$1 = '__html';
	var warnedUnknownTags;
	var validatePropertiesInDevelopment;
	var warnForPropDifference;
	var warnForExtraAttributes;
	var warnForInvalidEventListener;
	var canDiffStyleForHydrationWarning;
	var normalizeHTML;

	{
	  warnedUnknownTags = {
	    // There are working polyfills for <dialog>. Let people use it.
	    dialog: true,
	    // Electron ships a custom <webview> tag to display external web content in
	    // an isolated frame and process.
	    // This tag is not present in non Electron environments such as JSDom which
	    // is often used for testing purposes.
	    // @see https://electronjs.org/docs/api/webview-tag
	    webview: true
	  };

	  validatePropertiesInDevelopment = function (type, props) {
	    validateProperties(type, props);
	    validateProperties$1(type, props);
	    validateProperties$2(type, props, {
	      registrationNameDependencies: registrationNameDependencies,
	      possibleRegistrationNames: possibleRegistrationNames
	    });
	  }; // IE 11 parses & normalizes the style attribute as opposed to other
	  // browsers. It adds spaces and sorts the properties in some
	  // non-alphabetical order. Handling that would require sorting CSS
	  // properties in the client & server versions or applying
	  // `expectedStyle` to a temporary DOM node to read its `style` attribute
	  // normalized. Since it only affects IE, we're skipping style warnings
	  // in that browser completely in favor of doing all that work.
	  // See https://github.com/facebook/react/issues/11807


	  canDiffStyleForHydrationWarning = canUseDOM && !document.documentMode;

	  warnForPropDifference = function (propName, serverValue, clientValue) {
	    if (didWarnInvalidHydration) {
	      return;
	    }

	    var normalizedClientValue = normalizeMarkupForTextOrAttribute(clientValue);
	    var normalizedServerValue = normalizeMarkupForTextOrAttribute(serverValue);

	    if (normalizedServerValue === normalizedClientValue) {
	      return;
	    }

	    didWarnInvalidHydration = true;

	    error('Prop `%s` did not match. Server: %s Client: %s', propName, JSON.stringify(normalizedServerValue), JSON.stringify(normalizedClientValue));
	  };

	  warnForExtraAttributes = function (attributeNames) {
	    if (didWarnInvalidHydration) {
	      return;
	    }

	    didWarnInvalidHydration = true;
	    var names = [];
	    attributeNames.forEach(function (name) {
	      names.push(name);
	    });

	    error('Extra attributes from the server: %s', names);
	  };

	  warnForInvalidEventListener = function (registrationName, listener) {
	    if (listener === false) {
	      error('Expected `%s` listener to be a function, instead got `false`.\n\n' + 'If you used to conditionally omit it with %s={condition && value}, ' + 'pass %s={condition ? value : undefined} instead.', registrationName, registrationName, registrationName);
	    } else {
	      error('Expected `%s` listener to be a function, instead got a value of `%s` type.', registrationName, typeof listener);
	    }
	  }; // Parse the HTML and read it back to normalize the HTML string so that it
	  // can be used for comparison.


	  normalizeHTML = function (parent, html) {
	    // We could have created a separate document here to avoid
	    // re-initializing custom elements if they exist. But this breaks
	    // how <noscript> is being handled. So we use the same document.
	    // See the discussion in https://github.com/facebook/react/pull/11157.
	    var testElement = parent.namespaceURI === HTML_NAMESPACE ? parent.ownerDocument.createElement(parent.tagName) : parent.ownerDocument.createElementNS(parent.namespaceURI, parent.tagName);
	    testElement.innerHTML = html;
	    return testElement.innerHTML;
	  };
	} // HTML parsing normalizes CR and CRLF to LF.
	// It also can turn \u0000 into \uFFFD inside attributes.
	// https://www.w3.org/TR/html5/single-page.html#preprocessing-the-input-stream
	// If we have a mismatch, it might be caused by that.
	// We will still patch up in this case but not fire the warning.


	var NORMALIZE_NEWLINES_REGEX = /\r\n?/g;
	var NORMALIZE_NULL_AND_REPLACEMENT_REGEX = /\u0000|\uFFFD/g;

	function normalizeMarkupForTextOrAttribute(markup) {
	  {
	    checkHtmlStringCoercion(markup);
	  }

	  var markupString = typeof markup === 'string' ? markup : '' + markup;
	  return markupString.replace(NORMALIZE_NEWLINES_REGEX, '\n').replace(NORMALIZE_NULL_AND_REPLACEMENT_REGEX, '');
	}

	function checkForUnmatchedText(serverText, clientText, isConcurrentMode, shouldWarnDev) {
	  var normalizedClientText = normalizeMarkupForTextOrAttribute(clientText);
	  var normalizedServerText = normalizeMarkupForTextOrAttribute(serverText);

	  if (normalizedServerText === normalizedClientText) {
	    return;
	  }

	  if (shouldWarnDev) {
	    {
	      if (!didWarnInvalidHydration) {
	        didWarnInvalidHydration = true;

	        error('Text content did not match. Server: "%s" Client: "%s"', normalizedServerText, normalizedClientText);
	      }
	    }
	  }

	  if (isConcurrentMode && enableClientRenderFallbackOnTextMismatch) {
	    // In concurrent roots, we throw when there's a text mismatch and revert to
	    // client rendering, up to the nearest Suspense boundary.
	    throw new Error('Text content does not match server-rendered HTML.');
	  }
	}

	function getOwnerDocumentFromRootContainer(rootContainerElement) {
	  return rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
	}

	function noop() {}

	function trapClickOnNonInteractiveElement(node) {
	  // Mobile Safari does not fire properly bubble click events on
	  // non-interactive elements, which means delegated click listeners do not
	  // fire. The workaround for this bug involves attaching an empty click
	  // listener on the target node.
	  // https://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
	  // Just set it using the onclick property so that we don't have to manage any
	  // bookkeeping for it. Not sure if we need to clear it when the listener is
	  // removed.
	  // TODO: Only do this for the relevant Safaris maybe?
	  node.onclick = noop;
	}

	function setInitialDOMProperties(tag, domElement, rootContainerElement, nextProps, isCustomComponentTag) {
	  for (var propKey in nextProps) {
	    if (!nextProps.hasOwnProperty(propKey)) {
	      continue;
	    }

	    var nextProp = nextProps[propKey];

	    if (propKey === STYLE) {
	      {
	        if (nextProp) {
	          // Freeze the next style object so that we can assume it won't be
	          // mutated. We have already warned for this in the past.
	          Object.freeze(nextProp);
	        }
	      } // Relies on `updateStylesByID` not mutating `styleUpdates`.


	      setValueForStyles(domElement, nextProp);
	    } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
	      var nextHtml = nextProp ? nextProp[HTML$1] : undefined;

	      if (nextHtml != null) {
	        setInnerHTML(domElement, nextHtml);
	      }
	    } else if (propKey === CHILDREN) {
	      if (typeof nextProp === 'string') {
	        // Avoid setting initial textContent when the text is empty. In IE11 setting
	        // textContent on a <textarea> will cause the placeholder to not
	        // show within the <textarea> until it has been focused and blurred again.
	        // https://github.com/facebook/react/issues/6731#issuecomment-254874553
	        var canSetTextContent = tag !== 'textarea' || nextProp !== '';

	        if (canSetTextContent) {
	          setTextContent(domElement, nextProp);
	        }
	      } else if (typeof nextProp === 'number') {
	        setTextContent(domElement, '' + nextProp);
	      }
	    } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING) ; else if (propKey === AUTOFOCUS) ; else if (registrationNameDependencies.hasOwnProperty(propKey)) {
	      if (nextProp != null) {
	        if ( typeof nextProp !== 'function') {
	          warnForInvalidEventListener(propKey, nextProp);
	        }

	        if (propKey === 'onScroll') {
	          listenToNonDelegatedEvent('scroll', domElement);
	        }
	      }
	    } else if (nextProp != null) {
	      setValueForProperty(domElement, propKey, nextProp, isCustomComponentTag);
	    }
	  }
	}

	function updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag) {
	  // TODO: Handle wasCustomComponentTag
	  for (var i = 0; i < updatePayload.length; i += 2) {
	    var propKey = updatePayload[i];
	    var propValue = updatePayload[i + 1];

	    if (propKey === STYLE) {
	      setValueForStyles(domElement, propValue);
	    } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
	      setInnerHTML(domElement, propValue);
	    } else if (propKey === CHILDREN) {
	      setTextContent(domElement, propValue);
	    } else {
	      setValueForProperty(domElement, propKey, propValue, isCustomComponentTag);
	    }
	  }
	}

	function createElement(type, props, rootContainerElement, parentNamespace) {
	  var isCustomComponentTag; // We create tags in the namespace of their parent container, except HTML
	  // tags get no namespace.

	  var ownerDocument = getOwnerDocumentFromRootContainer(rootContainerElement);
	  var domElement;
	  var namespaceURI = parentNamespace;

	  if (namespaceURI === HTML_NAMESPACE) {
	    namespaceURI = getIntrinsicNamespace(type);
	  }

	  if (namespaceURI === HTML_NAMESPACE) {
	    {
	      isCustomComponentTag = isCustomComponent(type, props); // Should this check be gated by parent namespace? Not sure we want to
	      // allow <SVG> or <mATH>.

	      if (!isCustomComponentTag && type !== type.toLowerCase()) {
	        error('<%s /> is using incorrect casing. ' + 'Use PascalCase for React components, ' + 'or lowercase for HTML elements.', type);
	      }
	    }

	    if (type === 'script') {
	      // Create the script via .innerHTML so its "parser-inserted" flag is
	      // set to true and it does not execute
	      var div = ownerDocument.createElement('div');

	      div.innerHTML = '<script><' + '/script>'; // eslint-disable-line
	      // This is guaranteed to yield a script element.

	      var firstChild = div.firstChild;
	      domElement = div.removeChild(firstChild);
	    } else if (typeof props.is === 'string') {
	      // $FlowIssue `createElement` should be updated for Web Components
	      domElement = ownerDocument.createElement(type, {
	        is: props.is
	      });
	    } else {
	      // Separate else branch instead of using `props.is || undefined` above because of a Firefox bug.
	      // See discussion in https://github.com/facebook/react/pull/6896
	      // and discussion in https://bugzilla.mozilla.org/show_bug.cgi?id=1276240
	      domElement = ownerDocument.createElement(type); // Normally attributes are assigned in `setInitialDOMProperties`, however the `multiple` and `size`
	      // attributes on `select`s needs to be added before `option`s are inserted.
	      // This prevents:
	      // - a bug where the `select` does not scroll to the correct option because singular
	      //  `select` elements automatically pick the first item #13222
	      // - a bug where the `select` set the first item as selected despite the `size` attribute #14239
	      // See https://github.com/facebook/react/issues/13222
	      // and https://github.com/facebook/react/issues/14239

	      if (type === 'select') {
	        var node = domElement;

	        if (props.multiple) {
	          node.multiple = true;
	        } else if (props.size) {
	          // Setting a size greater than 1 causes a select to behave like `multiple=true`, where
	          // it is possible that no option is selected.
	          //
	          // This is only necessary when a select in "single selection mode".
	          node.size = props.size;
	        }
	      }
	    }
	  } else {
	    domElement = ownerDocument.createElementNS(namespaceURI, type);
	  }

	  {
	    if (namespaceURI === HTML_NAMESPACE) {
	      if (!isCustomComponentTag && Object.prototype.toString.call(domElement) === '[object HTMLUnknownElement]' && !hasOwnProperty.call(warnedUnknownTags, type)) {
	        warnedUnknownTags[type] = true;

	        error('The tag <%s> is unrecognized in this browser. ' + 'If you meant to render a React component, start its name with ' + 'an uppercase letter.', type);
	      }
	    }
	  }

	  return domElement;
	}
	function createTextNode(text, rootContainerElement) {
	  return getOwnerDocumentFromRootContainer(rootContainerElement).createTextNode(text);
	}
	function setInitialProperties(domElement, tag, rawProps, rootContainerElement) {
	  var isCustomComponentTag = isCustomComponent(tag, rawProps);

	  {
	    validatePropertiesInDevelopment(tag, rawProps);
	  } // TODO: Make sure that we check isMounted before firing any of these events.


	  var props;

	  switch (tag) {
	    case 'dialog':
	      listenToNonDelegatedEvent('cancel', domElement);
	      listenToNonDelegatedEvent('close', domElement);
	      props = rawProps;
	      break;

	    case 'iframe':
	    case 'object':
	    case 'embed':
	      // We listen to this event in case to ensure emulated bubble
	      // listeners still fire for the load event.
	      listenToNonDelegatedEvent('load', domElement);
	      props = rawProps;
	      break;

	    case 'video':
	    case 'audio':
	      // We listen to these events in case to ensure emulated bubble
	      // listeners still fire for all the media events.
	      for (var i = 0; i < mediaEventTypes.length; i++) {
	        listenToNonDelegatedEvent(mediaEventTypes[i], domElement);
	      }

	      props = rawProps;
	      break;

	    case 'source':
	      // We listen to this event in case to ensure emulated bubble
	      // listeners still fire for the error event.
	      listenToNonDelegatedEvent('error', domElement);
	      props = rawProps;
	      break;

	    case 'img':
	    case 'image':
	    case 'link':
	      // We listen to these events in case to ensure emulated bubble
	      // listeners still fire for error and load events.
	      listenToNonDelegatedEvent('error', domElement);
	      listenToNonDelegatedEvent('load', domElement);
	      props = rawProps;
	      break;

	    case 'details':
	      // We listen to this event in case to ensure emulated bubble
	      // listeners still fire for the toggle event.
	      listenToNonDelegatedEvent('toggle', domElement);
	      props = rawProps;
	      break;

	    case 'input':
	      initWrapperState(domElement, rawProps);
	      props = getHostProps(domElement, rawProps); // We listen to this event in case to ensure emulated bubble
	      // listeners still fire for the invalid event.

	      listenToNonDelegatedEvent('invalid', domElement);
	      break;

	    case 'option':
	      validateProps(domElement, rawProps);
	      props = rawProps;
	      break;

	    case 'select':
	      initWrapperState$1(domElement, rawProps);
	      props = getHostProps$1(domElement, rawProps); // We listen to this event in case to ensure emulated bubble
	      // listeners still fire for the invalid event.

	      listenToNonDelegatedEvent('invalid', domElement);
	      break;

	    case 'textarea':
	      initWrapperState$2(domElement, rawProps);
	      props = getHostProps$2(domElement, rawProps); // We listen to this event in case to ensure emulated bubble
	      // listeners still fire for the invalid event.

	      listenToNonDelegatedEvent('invalid', domElement);
	      break;

	    default:
	      props = rawProps;
	  }

	  assertValidProps(tag, props);
	  setInitialDOMProperties(tag, domElement, rootContainerElement, props, isCustomComponentTag);

	  switch (tag) {
	    case 'input':
	      // TODO: Make sure we check if this is still unmounted or do any clean
	      // up necessary since we never stop tracking anymore.
	      track(domElement);
	      postMountWrapper(domElement, rawProps, false);
	      break;

	    case 'textarea':
	      // TODO: Make sure we check if this is still unmounted or do any clean
	      // up necessary since we never stop tracking anymore.
	      track(domElement);
	      postMountWrapper$3(domElement);
	      break;

	    case 'option':
	      postMountWrapper$1(domElement, rawProps);
	      break;

	    case 'select':
	      postMountWrapper$2(domElement, rawProps);
	      break;

	    default:
	      if (typeof props.onClick === 'function') {
	        // TODO: This cast may not be sound for SVG, MathML or custom elements.
	        trapClickOnNonInteractiveElement(domElement);
	      }

	      break;
	  }
	} // Calculate the diff between the two objects.

	function diffProperties(domElement, tag, lastRawProps, nextRawProps, rootContainerElement) {
	  {
	    validatePropertiesInDevelopment(tag, nextRawProps);
	  }

	  var updatePayload = null;
	  var lastProps;
	  var nextProps;

	  switch (tag) {
	    case 'input':
	      lastProps = getHostProps(domElement, lastRawProps);
	      nextProps = getHostProps(domElement, nextRawProps);
	      updatePayload = [];
	      break;

	    case 'select':
	      lastProps = getHostProps$1(domElement, lastRawProps);
	      nextProps = getHostProps$1(domElement, nextRawProps);
	      updatePayload = [];
	      break;

	    case 'textarea':
	      lastProps = getHostProps$2(domElement, lastRawProps);
	      nextProps = getHostProps$2(domElement, nextRawProps);
	      updatePayload = [];
	      break;

	    default:
	      lastProps = lastRawProps;
	      nextProps = nextRawProps;

	      if (typeof lastProps.onClick !== 'function' && typeof nextProps.onClick === 'function') {
	        // TODO: This cast may not be sound for SVG, MathML or custom elements.
	        trapClickOnNonInteractiveElement(domElement);
	      }

	      break;
	  }

	  assertValidProps(tag, nextProps);
	  var propKey;
	  var styleName;
	  var styleUpdates = null;

	  for (propKey in lastProps) {
	    if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) {
	      continue;
	    }

	    if (propKey === STYLE) {
	      var lastStyle = lastProps[propKey];

	      for (styleName in lastStyle) {
	        if (lastStyle.hasOwnProperty(styleName)) {
	          if (!styleUpdates) {
	            styleUpdates = {};
	          }

	          styleUpdates[styleName] = '';
	        }
	      }
	    } else if (propKey === DANGEROUSLY_SET_INNER_HTML || propKey === CHILDREN) ; else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING) ; else if (propKey === AUTOFOCUS) ; else if (registrationNameDependencies.hasOwnProperty(propKey)) {
	      // This is a special case. If any listener updates we need to ensure
	      // that the "current" fiber pointer gets updated so we need a commit
	      // to update this element.
	      if (!updatePayload) {
	        updatePayload = [];
	      }
	    } else {
	      // For all other deleted properties we add it to the queue. We use
	      // the allowed property list in the commit phase instead.
	      (updatePayload = updatePayload || []).push(propKey, null);
	    }
	  }

	  for (propKey in nextProps) {
	    var nextProp = nextProps[propKey];
	    var lastProp = lastProps != null ? lastProps[propKey] : undefined;

	    if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null) {
	      continue;
	    }

	    if (propKey === STYLE) {
	      {
	        if (nextProp) {
	          // Freeze the next style object so that we can assume it won't be
	          // mutated. We have already warned for this in the past.
	          Object.freeze(nextProp);
	        }
	      }

	      if (lastProp) {
	        // Unset styles on `lastProp` but not on `nextProp`.
	        for (styleName in lastProp) {
	          if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
	            if (!styleUpdates) {
	              styleUpdates = {};
	            }

	            styleUpdates[styleName] = '';
	          }
	        } // Update styles that changed since `lastProp`.


	        for (styleName in nextProp) {
	          if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
	            if (!styleUpdates) {
	              styleUpdates = {};
	            }

	            styleUpdates[styleName] = nextProp[styleName];
	          }
	        }
	      } else {
	        // Relies on `updateStylesByID` not mutating `styleUpdates`.
	        if (!styleUpdates) {
	          if (!updatePayload) {
	            updatePayload = [];
	          }

	          updatePayload.push(propKey, styleUpdates);
	        }

	        styleUpdates = nextProp;
	      }
	    } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
	      var nextHtml = nextProp ? nextProp[HTML$1] : undefined;
	      var lastHtml = lastProp ? lastProp[HTML$1] : undefined;

	      if (nextHtml != null) {
	        if (lastHtml !== nextHtml) {
	          (updatePayload = updatePayload || []).push(propKey, nextHtml);
	        }
	      }
	    } else if (propKey === CHILDREN) {
	      if (typeof nextProp === 'string' || typeof nextProp === 'number') {
	        (updatePayload = updatePayload || []).push(propKey, '' + nextProp);
	      }
	    } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING) ; else if (registrationNameDependencies.hasOwnProperty(propKey)) {
	      if (nextProp != null) {
	        // We eagerly listen to this even though we haven't committed yet.
	        if ( typeof nextProp !== 'function') {
	          warnForInvalidEventListener(propKey, nextProp);
	        }

	        if (propKey === 'onScroll') {
	          listenToNonDelegatedEvent('scroll', domElement);
	        }
	      }

	      if (!updatePayload && lastProp !== nextProp) {
	        // This is a special case. If any listener updates we need to ensure
	        // that the "current" props pointer gets updated so we need a commit
	        // to update this element.
	        updatePayload = [];
	      }
	    } else {
	      // For any other property we always add it to the queue and then we
	      // filter it out using the allowed property list during the commit.
	      (updatePayload = updatePayload || []).push(propKey, nextProp);
	    }
	  }

	  if (styleUpdates) {
	    {
	      validateShorthandPropertyCollisionInDev(styleUpdates, nextProps[STYLE]);
	    }

	    (updatePayload = updatePayload || []).push(STYLE, styleUpdates);
	  }

	  return updatePayload;
	} // Apply the diff.

	function updateProperties(domElement, updatePayload, tag, lastRawProps, nextRawProps) {
	  // Update checked *before* name.
	  // In the middle of an update, it is possible to have multiple checked.
	  // When a checked radio tries to change name, browser makes another radio's checked false.
	  if (tag === 'input' && nextRawProps.type === 'radio' && nextRawProps.name != null) {
	    updateChecked(domElement, nextRawProps);
	  }

	  var wasCustomComponentTag = isCustomComponent(tag, lastRawProps);
	  var isCustomComponentTag = isCustomComponent(tag, nextRawProps); // Apply the diff.

	  updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag); // TODO: Ensure that an update gets scheduled if any of the special props
	  // changed.

	  switch (tag) {
	    case 'input':
	      // Update the wrapper around inputs *after* updating props. This has to
	      // happen after `updateDOMProperties`. Otherwise HTML5 input validations
	      // raise warnings and prevent the new value from being assigned.
	      updateWrapper(domElement, nextRawProps);
	      break;

	    case 'textarea':
	      updateWrapper$1(domElement, nextRawProps);
	      break;

	    case 'select':
	      // <select> value update needs to occur after <option> children
	      // reconciliation
	      postUpdateWrapper(domElement, nextRawProps);
	      break;
	  }
	}

	function getPossibleStandardName(propName) {
	  {
	    var lowerCasedName = propName.toLowerCase();

	    if (!possibleStandardNames.hasOwnProperty(lowerCasedName)) {
	      return null;
	    }

	    return possibleStandardNames[lowerCasedName] || null;
	  }
	}

	function diffHydratedProperties(domElement, tag, rawProps, parentNamespace, rootContainerElement, isConcurrentMode, shouldWarnDev) {
	  var isCustomComponentTag;
	  var extraAttributeNames;

	  {
	    isCustomComponentTag = isCustomComponent(tag, rawProps);
	    validatePropertiesInDevelopment(tag, rawProps);
	  } // TODO: Make sure that we check isMounted before firing any of these events.


	  switch (tag) {
	    case 'dialog':
	      listenToNonDelegatedEvent('cancel', domElement);
	      listenToNonDelegatedEvent('close', domElement);
	      break;

	    case 'iframe':
	    case 'object':
	    case 'embed':
	      // We listen to this event in case to ensure emulated bubble
	      // listeners still fire for the load event.
	      listenToNonDelegatedEvent('load', domElement);
	      break;

	    case 'video':
	    case 'audio':
	      // We listen to these events in case to ensure emulated bubble
	      // listeners still fire for all the media events.
	      for (var i = 0; i < mediaEventTypes.length; i++) {
	        listenToNonDelegatedEvent(mediaEventTypes[i], domElement);
	      }

	      break;

	    case 'source':
	      // We listen to this event in case to ensure emulated bubble
	      // listeners still fire for the error event.
	      listenToNonDelegatedEvent('error', domElement);
	      break;

	    case 'img':
	    case 'image':
	    case 'link':
	      // We listen to these events in case to ensure emulated bubble
	      // listeners still fire for error and load events.
	      listenToNonDelegatedEvent('error', domElement);
	      listenToNonDelegatedEvent('load', domElement);
	      break;

	    case 'details':
	      // We listen to this event in case to ensure emulated bubble
	      // listeners still fire for the toggle event.
	      listenToNonDelegatedEvent('toggle', domElement);
	      break;

	    case 'input':
	      initWrapperState(domElement, rawProps); // We listen to this event in case to ensure emulated bubble
	      // listeners still fire for the invalid event.

	      listenToNonDelegatedEvent('invalid', domElement);
	      break;

	    case 'option':
	      validateProps(domElement, rawProps);
	      break;

	    case 'select':
	      initWrapperState$1(domElement, rawProps); // We listen to this event in case to ensure emulated bubble
	      // listeners still fire for the invalid event.

	      listenToNonDelegatedEvent('invalid', domElement);
	      break;

	    case 'textarea':
	      initWrapperState$2(domElement, rawProps); // We listen to this event in case to ensure emulated bubble
	      // listeners still fire for the invalid event.

	      listenToNonDelegatedEvent('invalid', domElement);
	      break;
	  }

	  assertValidProps(tag, rawProps);

	  {
	    extraAttributeNames = new Set();
	    var attributes = domElement.attributes;

	    for (var _i = 0; _i < attributes.length; _i++) {
	      var name = attributes[_i].name.toLowerCase();

	      switch (name) {
	        // Controlled attributes are not validated
	        // TODO: Only ignore them on controlled tags.
	        case 'value':
	          break;

	        case 'checked':
	          break;

	        case 'selected':
	          break;

	        default:
	          // Intentionally use the original name.
	          // See discussion in https://github.com/facebook/react/pull/10676.
	          extraAttributeNames.add(attributes[_i].name);
	      }
	    }
	  }

	  var updatePayload = null;

	  for (var propKey in rawProps) {
	    if (!rawProps.hasOwnProperty(propKey)) {
	      continue;
	    }

	    var nextProp = rawProps[propKey];

	    if (propKey === CHILDREN) {
	      // For text content children we compare against textContent. This
	      // might match additional HTML that is hidden when we read it using
	      // textContent. E.g. "foo" will match "f<span>oo</span>" but that still
	      // satisfies our requirement. Our requirement is not to produce perfect
	      // HTML and attributes. Ideally we should preserve structure but it's
	      // ok not to if the visible content is still enough to indicate what
	      // even listeners these nodes might be wired up to.
	      // TODO: Warn if there is more than a single textNode as a child.
	      // TODO: Should we use domElement.firstChild.nodeValue to compare?
	      if (typeof nextProp === 'string') {
	        if (domElement.textContent !== nextProp) {
	          if (rawProps[SUPPRESS_HYDRATION_WARNING] !== true) {
	            checkForUnmatchedText(domElement.textContent, nextProp, isConcurrentMode, shouldWarnDev);
	          }

	          updatePayload = [CHILDREN, nextProp];
	        }
	      } else if (typeof nextProp === 'number') {
	        if (domElement.textContent !== '' + nextProp) {
	          if (rawProps[SUPPRESS_HYDRATION_WARNING] !== true) {
	            checkForUnmatchedText(domElement.textContent, nextProp, isConcurrentMode, shouldWarnDev);
	          }

	          updatePayload = [CHILDREN, '' + nextProp];
	        }
	      }
	    } else if (registrationNameDependencies.hasOwnProperty(propKey)) {
	      if (nextProp != null) {
	        if ( typeof nextProp !== 'function') {
	          warnForInvalidEventListener(propKey, nextProp);
	        }

	        if (propKey === 'onScroll') {
	          listenToNonDelegatedEvent('scroll', domElement);
	        }
	      }
	    } else if (shouldWarnDev && true && // Convince Flow we've calculated it (it's DEV-only in this method.)
	    typeof isCustomComponentTag === 'boolean') {
	      // Validate that the properties correspond to their expected values.
	      var serverValue = void 0;
	      var propertyInfo = isCustomComponentTag && enableCustomElementPropertySupport ? null : getPropertyInfo(propKey);

	      if (rawProps[SUPPRESS_HYDRATION_WARNING] === true) ; else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING || // Controlled attributes are not validated
	      // TODO: Only ignore them on controlled tags.
	      propKey === 'value' || propKey === 'checked' || propKey === 'selected') ; else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
	        var serverHTML = domElement.innerHTML;
	        var nextHtml = nextProp ? nextProp[HTML$1] : undefined;

	        if (nextHtml != null) {
	          var expectedHTML = normalizeHTML(domElement, nextHtml);

	          if (expectedHTML !== serverHTML) {
	            warnForPropDifference(propKey, serverHTML, expectedHTML);
	          }
	        }
	      } else if (propKey === STYLE) {
	        // $FlowFixMe - Should be inferred as not undefined.
	        extraAttributeNames.delete(propKey);

	        if (canDiffStyleForHydrationWarning) {
	          var expectedStyle = createDangerousStringForStyles(nextProp);
	          serverValue = domElement.getAttribute('style');

	          if (expectedStyle !== serverValue) {
	            warnForPropDifference(propKey, serverValue, expectedStyle);
	          }
	        }
	      } else if (isCustomComponentTag && !enableCustomElementPropertySupport) {
	        // $FlowFixMe - Should be inferred as not undefined.
	        extraAttributeNames.delete(propKey.toLowerCase());
	        serverValue = getValueForAttribute(domElement, propKey, nextProp);

	        if (nextProp !== serverValue) {
	          warnForPropDifference(propKey, serverValue, nextProp);
	        }
	      } else if (!shouldIgnoreAttribute(propKey, propertyInfo, isCustomComponentTag) && !shouldRemoveAttribute(propKey, nextProp, propertyInfo, isCustomComponentTag)) {
	        var isMismatchDueToBadCasing = false;

	        if (propertyInfo !== null) {
	          // $FlowFixMe - Should be inferred as not undefined.
	          extraAttributeNames.delete(propertyInfo.attributeName);
	          serverValue = getValueForProperty(domElement, propKey, nextProp, propertyInfo);
	        } else {
	          var ownNamespace = parentNamespace;

	          if (ownNamespace === HTML_NAMESPACE) {
	            ownNamespace = getIntrinsicNamespace(tag);
	          }

	          if (ownNamespace === HTML_NAMESPACE) {
	            // $FlowFixMe - Should be inferred as not undefined.
	            extraAttributeNames.delete(propKey.toLowerCase());
	          } else {
	            var standardName = getPossibleStandardName(propKey);

	            if (standardName !== null && standardName !== propKey) {
	              // If an SVG prop is supplied with bad casing, it will
	              // be successfully parsed from HTML, but will produce a mismatch
	              // (and would be incorrectly rendered on the client).
	              // However, we already warn about bad casing elsewhere.
	              // So we'll skip the misleading extra mismatch warning in this case.
	              isMismatchDueToBadCasing = true; // $FlowFixMe - Should be inferred as not undefined.

	              extraAttributeNames.delete(standardName);
	            } // $FlowFixMe - Should be inferred as not undefined.


	            extraAttributeNames.delete(propKey);
	          }

	          serverValue = getValueForAttribute(domElement, propKey, nextProp);
	        }

	        var dontWarnCustomElement = enableCustomElementPropertySupport  ;

	        if (!dontWarnCustomElement && nextProp !== serverValue && !isMismatchDueToBadCasing) {
	          warnForPropDifference(propKey, serverValue, nextProp);
	        }
	      }
	    }
	  }

	  {
	    if (shouldWarnDev) {
	      if ( // $FlowFixMe - Should be inferred as not undefined.
	      extraAttributeNames.size > 0 && rawProps[SUPPRESS_HYDRATION_WARNING] !== true) {
	        // $FlowFixMe - Should be inferred as not undefined.
	        warnForExtraAttributes(extraAttributeNames);
	      }
	    }
	  }

	  switch (tag) {
	    case 'input':
	      // TODO: Make sure we check if this is still unmounted or do any clean
	      // up necessary since we never stop tracking anymore.
	      track(domElement);
	      postMountWrapper(domElement, rawProps, true);
	      break;

	    case 'textarea':
	      // TODO: Make sure we check if this is still unmounted or do any clean
	      // up necessary since we never stop tracking anymore.
	      track(domElement);
	      postMountWrapper$3(domElement);
	      break;

	    case 'select':
	    case 'option':
	      // For input and textarea we current always set the value property at
	      // post mount to force it to diverge from attributes. However, for
	      // option and select we don't quite do the same thing and select
	      // is not resilient to the DOM state changing so we don't do that here.
	      // TODO: Consider not doing this for input and textarea.
	      break;

	    default:
	      if (typeof rawProps.onClick === 'function') {
	        // TODO: This cast may not be sound for SVG, MathML or custom elements.
	        trapClickOnNonInteractiveElement(domElement);
	      }

	      break;
	  }

	  return updatePayload;
	}
	function diffHydratedText(textNode, text, isConcurrentMode) {
	  var isDifferent = textNode.nodeValue !== text;
	  return isDifferent;
	}
	function warnForDeletedHydratableElement(parentNode, child) {
	  {
	    if (didWarnInvalidHydration) {
	      return;
	    }

	    didWarnInvalidHydration = true;

	    error('Did not expect server HTML to contain a <%s> in <%s>.', child.nodeName.toLowerCase(), parentNode.nodeName.toLowerCase());
	  }
	}
	function warnForDeletedHydratableText(parentNode, child) {
	  {
	    if (didWarnInvalidHydration) {
	      return;
	    }

	    didWarnInvalidHydration = true;

	    error('Did not expect server HTML to contain the text node "%s" in <%s>.', child.nodeValue, parentNode.nodeName.toLowerCase());
	  }
	}
	function warnForInsertedHydratedElement(parentNode, tag, props) {
	  {
	    if (didWarnInvalidHydration) {
	      return;
	    }

	    didWarnInvalidHydration = true;

	    error('Expected server HTML to contain a matching <%s> in <%s>.', tag, parentNode.nodeName.toLowerCase());
	  }
	}
	function warnForInsertedHydratedText(parentNode, text) {
	  {
	    if (text === '') {
	      // We expect to insert empty text nodes since they're not represented in
	      // the HTML.
	      // TODO: Remove this special case if we can just avoid inserting empty
	      // text nodes.
	      return;
	    }

	    if (didWarnInvalidHydration) {
	      return;
	    }

	    didWarnInvalidHydration = true;

	    error('Expected server HTML to contain a matching text node for "%s" in <%s>.', text, parentNode.nodeName.toLowerCase());
	  }
	}
	function restoreControlledState$3(domElement, tag, props) {
	  switch (tag) {
	    case 'input':
	      restoreControlledState(domElement, props);
	      return;

	    case 'textarea':
	      restoreControlledState$2(domElement, props);
	      return;

	    case 'select':
	      restoreControlledState$1(domElement, props);
	      return;
	  }
	}

	var validateDOMNesting = function () {};

	var updatedAncestorInfo = function () {};

	{
	  // This validation code was written based on the HTML5 parsing spec:
	  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
	  //
	  // Note: this does not catch all invalid nesting, nor does it try to (as it's
	  // not clear what practical benefit doing so provides); instead, we warn only
	  // for cases where the parser will give a parse tree differing from what React
	  // intended. For example, <b><div></div></b> is invalid but we don't warn
	  // because it still parses correctly; we do warn for other cases like nested
	  // <p> tags where the beginning of the second element implicitly closes the
	  // first, causing a confusing mess.
	  // https://html.spec.whatwg.org/multipage/syntax.html#special
	  var specialTags = ['address', 'applet', 'area', 'article', 'aside', 'base', 'basefont', 'bgsound', 'blockquote', 'body', 'br', 'button', 'caption', 'center', 'col', 'colgroup', 'dd', 'details', 'dir', 'div', 'dl', 'dt', 'embed', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'frame', 'frameset', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'iframe', 'img', 'input', 'isindex', 'li', 'link', 'listing', 'main', 'marquee', 'menu', 'menuitem', 'meta', 'nav', 'noembed', 'noframes', 'noscript', 'object', 'ol', 'p', 'param', 'plaintext', 'pre', 'script', 'section', 'select', 'source', 'style', 'summary', 'table', 'tbody', 'td', 'template', 'textarea', 'tfoot', 'th', 'thead', 'title', 'tr', 'track', 'ul', 'wbr', 'xmp']; // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope

	  var inScopeTags = ['applet', 'caption', 'html', 'table', 'td', 'th', 'marquee', 'object', 'template', // https://html.spec.whatwg.org/multipage/syntax.html#html-integration-point
	  // TODO: Distinguish by namespace here -- for <title>, including it here
	  // errs on the side of fewer warnings
	  'foreignObject', 'desc', 'title']; // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-button-scope

	  var buttonScopeTags = inScopeTags.concat(['button']); // https://html.spec.whatwg.org/multipage/syntax.html#generate-implied-end-tags

	  var impliedEndTags = ['dd', 'dt', 'li', 'option', 'optgroup', 'p', 'rp', 'rt'];
	  var emptyAncestorInfo = {
	    current: null,
	    formTag: null,
	    aTagInScope: null,
	    buttonTagInScope: null,
	    nobrTagInScope: null,
	    pTagInButtonScope: null,
	    listItemTagAutoclosing: null,
	    dlItemTagAutoclosing: null
	  };

	  updatedAncestorInfo = function (oldInfo, tag) {
	    var ancestorInfo = assign({}, oldInfo || emptyAncestorInfo);

	    var info = {
	      tag: tag
	    };

	    if (inScopeTags.indexOf(tag) !== -1) {
	      ancestorInfo.aTagInScope = null;
	      ancestorInfo.buttonTagInScope = null;
	      ancestorInfo.nobrTagInScope = null;
	    }

	    if (buttonScopeTags.indexOf(tag) !== -1) {
	      ancestorInfo.pTagInButtonScope = null;
	    } // See rules for 'li', 'dd', 'dt' start tags in
	    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody


	    if (specialTags.indexOf(tag) !== -1 && tag !== 'address' && tag !== 'div' && tag !== 'p') {
	      ancestorInfo.listItemTagAutoclosing = null;
	      ancestorInfo.dlItemTagAutoclosing = null;
	    }

	    ancestorInfo.current = info;

	    if (tag === 'form') {
	      ancestorInfo.formTag = info;
	    }

	    if (tag === 'a') {
	      ancestorInfo.aTagInScope = info;
	    }

	    if (tag === 'button') {
	      ancestorInfo.buttonTagInScope = info;
	    }

	    if (tag === 'nobr') {
	      ancestorInfo.nobrTagInScope = info;
	    }

	    if (tag === 'p') {
	      ancestorInfo.pTagInButtonScope = info;
	    }

	    if (tag === 'li') {
	      ancestorInfo.listItemTagAutoclosing = info;
	    }

	    if (tag === 'dd' || tag === 'dt') {
	      ancestorInfo.dlItemTagAutoclosing = info;
	    }

	    return ancestorInfo;
	  };
	  /**
	   * Returns whether
	   */


	  var isTagValidWithParent = function (tag, parentTag) {
	    // First, let's check if we're in an unusual parsing mode...
	    switch (parentTag) {
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inselect
	      case 'select':
	        return tag === 'option' || tag === 'optgroup' || tag === '#text';

	      case 'optgroup':
	        return tag === 'option' || tag === '#text';
	      // Strictly speaking, seeing an <option> doesn't mean we're in a <select>
	      // but

	      case 'option':
	        return tag === '#text';
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intd
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incaption
	      // No special behavior since these rules fall back to "in body" mode for
	      // all except special table nodes which cause bad parsing behavior anyway.
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intr

	      case 'tr':
	        return tag === 'th' || tag === 'td' || tag === 'style' || tag === 'script' || tag === 'template';
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intbody

	      case 'tbody':
	      case 'thead':
	      case 'tfoot':
	        return tag === 'tr' || tag === 'style' || tag === 'script' || tag === 'template';
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incolgroup

	      case 'colgroup':
	        return tag === 'col' || tag === 'template';
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intable

	      case 'table':
	        return tag === 'caption' || tag === 'colgroup' || tag === 'tbody' || tag === 'tfoot' || tag === 'thead' || tag === 'style' || tag === 'script' || tag === 'template';
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inhead

	      case 'head':
	        return tag === 'base' || tag === 'basefont' || tag === 'bgsound' || tag === 'link' || tag === 'meta' || tag === 'title' || tag === 'noscript' || tag === 'noframes' || tag === 'style' || tag === 'script' || tag === 'template';
	      // https://html.spec.whatwg.org/multipage/semantics.html#the-html-element

	      case 'html':
	        return tag === 'head' || tag === 'body' || tag === 'frameset';

	      case 'frameset':
	        return tag === 'frame';

	      case '#document':
	        return tag === 'html';
	    } // Probably in the "in body" parsing mode, so we outlaw only tag combos
	    // where the parsing rules cause implicit opens or closes to be added.
	    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody


	    switch (tag) {
	      case 'h1':
	      case 'h2':
	      case 'h3':
	      case 'h4':
	      case 'h5':
	      case 'h6':
	        return parentTag !== 'h1' && parentTag !== 'h2' && parentTag !== 'h3' && parentTag !== 'h4' && parentTag !== 'h5' && parentTag !== 'h6';

	      case 'rp':
	      case 'rt':
	        return impliedEndTags.indexOf(parentTag) === -1;

	      case 'body':
	      case 'caption':
	      case 'col':
	      case 'colgroup':
	      case 'frameset':
	      case 'frame':
	      case 'head':
	      case 'html':
	      case 'tbody':
	      case 'td':
	      case 'tfoot':
	      case 'th':
	      case 'thead':
	      case 'tr':
	        // These tags are only valid with a few parents that have special child
	        // parsing rules -- if we're down here, then none of those matched and
	        // so we allow it only if we don't know what the parent is, as all other
	        // cases are invalid.
	        return parentTag == null;
	    }

	    return true;
	  };
	  /**
	   * Returns whether
	   */


	  var findInvalidAncestorForTag = function (tag, ancestorInfo) {
	    switch (tag) {
	      case 'address':
	      case 'article':
	      case 'aside':
	      case 'blockquote':
	      case 'center':
	      case 'details':
	      case 'dialog':
	      case 'dir':
	      case 'div':
	      case 'dl':
	      case 'fieldset':
	      case 'figcaption':
	      case 'figure':
	      case 'footer':
	      case 'header':
	      case 'hgroup':
	      case 'main':
	      case 'menu':
	      case 'nav':
	      case 'ol':
	      case 'p':
	      case 'section':
	      case 'summary':
	      case 'ul':
	      case 'pre':
	      case 'listing':
	      case 'table':
	      case 'hr':
	      case 'xmp':
	      case 'h1':
	      case 'h2':
	      case 'h3':
	      case 'h4':
	      case 'h5':
	      case 'h6':
	        return ancestorInfo.pTagInButtonScope;

	      case 'form':
	        return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;

	      case 'li':
	        return ancestorInfo.listItemTagAutoclosing;

	      case 'dd':
	      case 'dt':
	        return ancestorInfo.dlItemTagAutoclosing;

	      case 'button':
	        return ancestorInfo.buttonTagInScope;

	      case 'a':
	        // Spec says something about storing a list of markers, but it sounds
	        // equivalent to this check.
	        return ancestorInfo.aTagInScope;

	      case 'nobr':
	        return ancestorInfo.nobrTagInScope;
	    }

	    return null;
	  };

	  var didWarn$1 = {};

	  validateDOMNesting = function (childTag, childText, ancestorInfo) {
	    ancestorInfo = ancestorInfo || emptyAncestorInfo;
	    var parentInfo = ancestorInfo.current;
	    var parentTag = parentInfo && parentInfo.tag;

	    if (childText != null) {
	      if (childTag != null) {
	        error('validateDOMNesting: when childText is passed, childTag should be null');
	      }

	      childTag = '#text';
	    }

	    var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
	    var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
	    var invalidParentOrAncestor = invalidParent || invalidAncestor;

	    if (!invalidParentOrAncestor) {
	      return;
	    }

	    var ancestorTag = invalidParentOrAncestor.tag;
	    var warnKey = !!invalidParent + '|' + childTag + '|' + ancestorTag;

	    if (didWarn$1[warnKey]) {
	      return;
	    }

	    didWarn$1[warnKey] = true;
	    var tagDisplayName = childTag;
	    var whitespaceInfo = '';

	    if (childTag === '#text') {
	      if (/\S/.test(childText)) {
	        tagDisplayName = 'Text nodes';
	      } else {
	        tagDisplayName = 'Whitespace text nodes';
	        whitespaceInfo = " Make sure you don't have any extra whitespace between tags on " + 'each line of your source code.';
	      }
	    } else {
	      tagDisplayName = '<' + childTag + '>';
	    }

	    if (invalidParent) {
	      var info = '';

	      if (ancestorTag === 'table' && childTag === 'tr') {
	        info += ' Add a <tbody>, <thead> or <tfoot> to your code to match the DOM tree generated by ' + 'the browser.';
	      }

	      error('validateDOMNesting(...): %s cannot appear as a child of <%s>.%s%s', tagDisplayName, ancestorTag, whitespaceInfo, info);
	    } else {
	      error('validateDOMNesting(...): %s cannot appear as a descendant of ' + '<%s>.', tagDisplayName, ancestorTag);
	    }
	  };
	}

	var SUPPRESS_HYDRATION_WARNING$1 = 'suppressHydrationWarning';
	var SUSPENSE_START_DATA = '$';
	var SUSPENSE_END_DATA = '/$';
	var SUSPENSE_PENDING_START_DATA = '$?';
	var SUSPENSE_FALLBACK_START_DATA = '$!';
	var STYLE$1 = 'style';
	var eventsEnabled = null;
	var selectionInformation = null;
	function getRootHostContext(rootContainerInstance) {
	  var type;
	  var namespace;
	  var nodeType = rootContainerInstance.nodeType;

	  switch (nodeType) {
	    case DOCUMENT_NODE:
	    case DOCUMENT_FRAGMENT_NODE:
	      {
	        type = nodeType === DOCUMENT_NODE ? '#document' : '#fragment';
	        var root = rootContainerInstance.documentElement;
	        namespace = root ? root.namespaceURI : getChildNamespace(null, '');
	        break;
	      }

	    default:
	      {
	        var container = nodeType === COMMENT_NODE ? rootContainerInstance.parentNode : rootContainerInstance;
	        var ownNamespace = container.namespaceURI || null;
	        type = container.tagName;
	        namespace = getChildNamespace(ownNamespace, type);
	        break;
	      }
	  }

	  {
	    var validatedTag = type.toLowerCase();
	    var ancestorInfo = updatedAncestorInfo(null, validatedTag);
	    return {
	      namespace: namespace,
	      ancestorInfo: ancestorInfo
	    };
	  }
	}
	function getChildHostContext(parentHostContext, type, rootContainerInstance) {
	  {
	    var parentHostContextDev = parentHostContext;
	    var namespace = getChildNamespace(parentHostContextDev.namespace, type);
	    var ancestorInfo = updatedAncestorInfo(parentHostContextDev.ancestorInfo, type);
	    return {
	      namespace: namespace,
	      ancestorInfo: ancestorInfo
	    };
	  }
	}
	function getPublicInstance(instance) {
	  return instance;
	}
	function prepareForCommit(containerInfo) {
	  eventsEnabled = isEnabled();
	  selectionInformation = getSelectionInformation();
	  var activeInstance = null;

	  setEnabled(false);
	  return activeInstance;
	}
	function resetAfterCommit(containerInfo) {
	  restoreSelection(selectionInformation);
	  setEnabled(eventsEnabled);
	  eventsEnabled = null;
	  selectionInformation = null;
	}
	function createInstance(type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
	  var parentNamespace;

	  {
	    // TODO: take namespace into account when validating.
	    var hostContextDev = hostContext;
	    validateDOMNesting(type, null, hostContextDev.ancestorInfo);

	    if (typeof props.children === 'string' || typeof props.children === 'number') {
	      var string = '' + props.children;
	      var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
	      validateDOMNesting(null, string, ownAncestorInfo);
	    }

	    parentNamespace = hostContextDev.namespace;
	  }

	  var domElement = createElement(type, props, rootContainerInstance, parentNamespace);
	  precacheFiberNode(internalInstanceHandle, domElement);
	  updateFiberProps(domElement, props);
	  return domElement;
	}
	function appendInitialChild(parentInstance, child) {
	  parentInstance.appendChild(child);
	}
	function finalizeInitialChildren(domElement, type, props, rootContainerInstance, hostContext) {
	  setInitialProperties(domElement, type, props, rootContainerInstance);

	  switch (type) {
	    case 'button':
	    case 'input':
	    case 'select':
	    case 'textarea':
	      return !!props.autoFocus;

	    case 'img':
	      return true;

	    default:
	      return false;
	  }
	}
	function prepareUpdate(domElement, type, oldProps, newProps, rootContainerInstance, hostContext) {
	  {
	    var hostContextDev = hostContext;

	    if (typeof newProps.children !== typeof oldProps.children && (typeof newProps.children === 'string' || typeof newProps.children === 'number')) {
	      var string = '' + newProps.children;
	      var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
	      validateDOMNesting(null, string, ownAncestorInfo);
	    }
	  }

	  return diffProperties(domElement, type, oldProps, newProps);
	}
	function shouldSetTextContent(type, props) {
	  return type === 'textarea' || type === 'noscript' || typeof props.children === 'string' || typeof props.children === 'number' || typeof props.dangerouslySetInnerHTML === 'object' && props.dangerouslySetInnerHTML !== null && props.dangerouslySetInnerHTML.__html != null;
	}
	function createTextInstance(text, rootContainerInstance, hostContext, internalInstanceHandle) {
	  {
	    var hostContextDev = hostContext;
	    validateDOMNesting(null, text, hostContextDev.ancestorInfo);
	  }

	  var textNode = createTextNode(text, rootContainerInstance);
	  precacheFiberNode(internalInstanceHandle, textNode);
	  return textNode;
	}
	function getCurrentEventPriority() {
	  var currentEvent = window.event;

	  if (currentEvent === undefined) {
	    return DefaultEventPriority;
	  }

	  return getEventPriority(currentEvent.type);
	}
	// if a component just imports ReactDOM (e.g. for findDOMNode).
	// Some environments might not have setTimeout or clearTimeout.

	var scheduleTimeout = typeof setTimeout === 'function' ? setTimeout : undefined;
	var cancelTimeout = typeof clearTimeout === 'function' ? clearTimeout : undefined;
	var noTimeout = -1;
	var localPromise = typeof Promise === 'function' ? Promise : undefined; // -------------------
	var scheduleMicrotask = typeof queueMicrotask === 'function' ? queueMicrotask : typeof localPromise !== 'undefined' ? function (callback) {
	  return localPromise.resolve(null).then(callback).catch(handleErrorInNextTick);
	} : scheduleTimeout; // TODO: Determine the best fallback here.

	function handleErrorInNextTick(error) {
	  setTimeout(function () {
	    throw error;
	  });
	} // -------------------
	function commitMount(domElement, type, newProps, internalInstanceHandle) {
	  // Despite the naming that might imply otherwise, this method only
	  // fires if there is an `Update` effect scheduled during mounting.
	  // This happens if `finalizeInitialChildren` returns `true` (which it
	  // does to implement the `autoFocus` attribute on the client). But
	  // there are also other cases when this might happen (such as patching
	  // up text content during hydration mismatch). So we'll check this again.
	  switch (type) {
	    case 'button':
	    case 'input':
	    case 'select':
	    case 'textarea':
	      if (newProps.autoFocus) {
	        domElement.focus();
	      }

	      return;

	    case 'img':
	      {
	        if (newProps.src) {
	          domElement.src = newProps.src;
	        }

	        return;
	      }
	  }
	}
	function commitUpdate(domElement, updatePayload, type, oldProps, newProps, internalInstanceHandle) {
	  // Apply the diff to the DOM node.
	  updateProperties(domElement, updatePayload, type, oldProps, newProps); // Update the props handle so that we know which props are the ones with
	  // with current event handlers.

	  updateFiberProps(domElement, newProps);
	}
	function resetTextContent(domElement) {
	  setTextContent(domElement, '');
	}
	function commitTextUpdate(textInstance, oldText, newText) {
	  textInstance.nodeValue = newText;
	}
	function appendChild(parentInstance, child) {
	  parentInstance.appendChild(child);
	}
	function appendChildToContainer(container, child) {
	  var parentNode;

	  if (container.nodeType === COMMENT_NODE) {
	    parentNode = container.parentNode;
	    parentNode.insertBefore(child, container);
	  } else {
	    parentNode = container;
	    parentNode.appendChild(child);
	  } // This container might be used for a portal.
	  // If something inside a portal is clicked, that click should bubble
	  // through the React tree. However, on Mobile Safari the click would
	  // never bubble through the *DOM* tree unless an ancestor with onclick
	  // event exists. So we wouldn't see it and dispatch it.
	  // This is why we ensure that non React root containers have inline onclick
	  // defined.
	  // https://github.com/facebook/react/issues/11918


	  var reactRootContainer = container._reactRootContainer;

	  if ((reactRootContainer === null || reactRootContainer === undefined) && parentNode.onclick === null) {
	    // TODO: This cast may not be sound for SVG, MathML or custom elements.
	    trapClickOnNonInteractiveElement(parentNode);
	  }
	}
	function insertBefore(parentInstance, child, beforeChild) {
	  parentInstance.insertBefore(child, beforeChild);
	}
	function insertInContainerBefore(container, child, beforeChild) {
	  if (container.nodeType === COMMENT_NODE) {
	    container.parentNode.insertBefore(child, beforeChild);
	  } else {
	    container.insertBefore(child, beforeChild);
	  }
	}

	function removeChild(parentInstance, child) {
	  parentInstance.removeChild(child);
	}
	function removeChildFromContainer(container, child) {
	  if (container.nodeType === COMMENT_NODE) {
	    container.parentNode.removeChild(child);
	  } else {
	    container.removeChild(child);
	  }
	}
	function clearSuspenseBoundary(parentInstance, suspenseInstance) {
	  var node = suspenseInstance; // Delete all nodes within this suspense boundary.
	  // There might be nested nodes so we need to keep track of how
	  // deep we are and only break out when we're back on top.

	  var depth = 0;

	  do {
	    var nextNode = node.nextSibling;
	    parentInstance.removeChild(node);

	    if (nextNode && nextNode.nodeType === COMMENT_NODE) {
	      var data = nextNode.data;

	      if (data === SUSPENSE_END_DATA) {
	        if (depth === 0) {
	          parentInstance.removeChild(nextNode); // Retry if any event replaying was blocked on this.

	          retryIfBlockedOn(suspenseInstance);
	          return;
	        } else {
	          depth--;
	        }
	      } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_PENDING_START_DATA || data === SUSPENSE_FALLBACK_START_DATA) {
	        depth++;
	      }
	    }

	    node = nextNode;
	  } while (node); // TODO: Warn, we didn't find the end comment boundary.
	  // Retry if any event replaying was blocked on this.


	  retryIfBlockedOn(suspenseInstance);
	}
	function clearSuspenseBoundaryFromContainer(container, suspenseInstance) {
	  if (container.nodeType === COMMENT_NODE) {
	    clearSuspenseBoundary(container.parentNode, suspenseInstance);
	  } else if (container.nodeType === ELEMENT_NODE) {
	    clearSuspenseBoundary(container, suspenseInstance);
	  } // Retry if any event replaying was blocked on this.


	  retryIfBlockedOn(container);
	}
	function hideInstance(instance) {
	  // TODO: Does this work for all element types? What about MathML? Should we
	  // pass host context to this method?
	  instance = instance;
	  var style = instance.style;

	  if (typeof style.setProperty === 'function') {
	    style.setProperty('display', 'none', 'important');
	  } else {
	    style.display = 'none';
	  }
	}
	function hideTextInstance(textInstance) {
	  textInstance.nodeValue = '';
	}
	function unhideInstance(instance, props) {
	  instance = instance;
	  var styleProp = props[STYLE$1];
	  var display = styleProp !== undefined && styleProp !== null && styleProp.hasOwnProperty('display') ? styleProp.display : null;
	  instance.style.display = dangerousStyleValue('display', display);
	}
	function unhideTextInstance(textInstance, text) {
	  textInstance.nodeValue = text;
	}
	function clearContainer(container) {
	  if (container.nodeType === ELEMENT_NODE) {
	    container.textContent = '';
	  } else if (container.nodeType === DOCUMENT_NODE) {
	    if (container.documentElement) {
	      container.removeChild(container.documentElement);
	    }
	  }
	} // -------------------
	function canHydrateInstance(instance, type, props) {
	  if (instance.nodeType !== ELEMENT_NODE || type.toLowerCase() !== instance.nodeName.toLowerCase()) {
	    return null;
	  } // This has now been refined to an element node.


	  return instance;
	}
	function canHydrateTextInstance(instance, text) {
	  if (text === '' || instance.nodeType !== TEXT_NODE) {
	    // Empty strings are not parsed by HTML so there won't be a correct match here.
	    return null;
	  } // This has now been refined to a text node.


	  return instance;
	}
	function canHydrateSuspenseInstance(instance) {
	  if (instance.nodeType !== COMMENT_NODE) {
	    // Empty strings are not parsed by HTML so there won't be a correct match here.
	    return null;
	  } // This has now been refined to a suspense node.


	  return instance;
	}
	function isSuspenseInstancePending(instance) {
	  return instance.data === SUSPENSE_PENDING_START_DATA;
	}
	function isSuspenseInstanceFallback(instance) {
	  return instance.data === SUSPENSE_FALLBACK_START_DATA;
	}
	function getSuspenseInstanceFallbackErrorDetails(instance) {
	  var dataset = instance.nextSibling && instance.nextSibling.dataset;
	  var digest, message, stack;

	  if (dataset) {
	    digest = dataset.dgst;

	    {
	      message = dataset.msg;
	      stack = dataset.stck;
	    }
	  }

	  {
	    return {
	      message: message,
	      digest: digest,
	      stack: stack
	    };
	  } // let value = {message: undefined, hash: undefined};
	  // const nextSibling = instance.nextSibling;
	  // if (nextSibling) {
	  //   const dataset = ((nextSibling: any): HTMLTemplateElement).dataset;
	  //   value.message = dataset.msg;
	  //   value.hash = dataset.hash;
	  //   if (true) {
	  //     value.stack = dataset.stack;
	  //   }
	  // }
	  // return value;

	}
	function registerSuspenseInstanceRetry(instance, callback) {
	  instance._reactRetry = callback;
	}

	function getNextHydratable(node) {
	  // Skip non-hydratable nodes.
	  for (; node != null; node = node.nextSibling) {
	    var nodeType = node.nodeType;

	    if (nodeType === ELEMENT_NODE || nodeType === TEXT_NODE) {
	      break;
	    }

	    if (nodeType === COMMENT_NODE) {
	      var nodeData = node.data;

	      if (nodeData === SUSPENSE_START_DATA || nodeData === SUSPENSE_FALLBACK_START_DATA || nodeData === SUSPENSE_PENDING_START_DATA) {
	        break;
	      }

	      if (nodeData === SUSPENSE_END_DATA) {
	        return null;
	      }
	    }
	  }

	  return node;
	}

	function getNextHydratableSibling(instance) {
	  return getNextHydratable(instance.nextSibling);
	}
	function getFirstHydratableChild(parentInstance) {
	  return getNextHydratable(parentInstance.firstChild);
	}
	function getFirstHydratableChildWithinContainer(parentContainer) {
	  return getNextHydratable(parentContainer.firstChild);
	}
	function getFirstHydratableChildWithinSuspenseInstance(parentInstance) {
	  return getNextHydratable(parentInstance.nextSibling);
	}
	function hydrateInstance(instance, type, props, rootContainerInstance, hostContext, internalInstanceHandle, shouldWarnDev) {
	  precacheFiberNode(internalInstanceHandle, instance); // TODO: Possibly defer this until the commit phase where all the events
	  // get attached.

	  updateFiberProps(instance, props);
	  var parentNamespace;

	  {
	    var hostContextDev = hostContext;
	    parentNamespace = hostContextDev.namespace;
	  } // TODO: Temporary hack to check if we're in a concurrent root. We can delete
	  // when the legacy root API is removed.


	  var isConcurrentMode = (internalInstanceHandle.mode & ConcurrentMode) !== NoMode;
	  return diffHydratedProperties(instance, type, props, parentNamespace, rootContainerInstance, isConcurrentMode, shouldWarnDev);
	}
	function hydrateTextInstance(textInstance, text, internalInstanceHandle, shouldWarnDev) {
	  precacheFiberNode(internalInstanceHandle, textInstance); // TODO: Temporary hack to check if we're in a concurrent root. We can delete
	  // when the legacy root API is removed.

	  (internalInstanceHandle.mode & ConcurrentMode) !== NoMode;
	  return diffHydratedText(textInstance, text);
	}
	function hydrateSuspenseInstance(suspenseInstance, internalInstanceHandle) {
	  precacheFiberNode(internalInstanceHandle, suspenseInstance);
	}
	function getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance) {
	  var node = suspenseInstance.nextSibling; // Skip past all nodes within this suspense boundary.
	  // There might be nested nodes so we need to keep track of how
	  // deep we are and only break out when we're back on top.

	  var depth = 0;

	  while (node) {
	    if (node.nodeType === COMMENT_NODE) {
	      var data = node.data;

	      if (data === SUSPENSE_END_DATA) {
	        if (depth === 0) {
	          return getNextHydratableSibling(node);
	        } else {
	          depth--;
	        }
	      } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
	        depth++;
	      }
	    }

	    node = node.nextSibling;
	  } // TODO: Warn, we didn't find the end comment boundary.


	  return null;
	} // Returns the SuspenseInstance if this node is a direct child of a
	// SuspenseInstance. I.e. if its previous sibling is a Comment with
	// SUSPENSE_x_START_DATA. Otherwise, null.

	function getParentSuspenseInstance(targetInstance) {
	  var node = targetInstance.previousSibling; // Skip past all nodes within this suspense boundary.
	  // There might be nested nodes so we need to keep track of how
	  // deep we are and only break out when we're back on top.

	  var depth = 0;

	  while (node) {
	    if (node.nodeType === COMMENT_NODE) {
	      var data = node.data;

	      if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
	        if (depth === 0) {
	          return node;
	        } else {
	          depth--;
	        }
	      } else if (data === SUSPENSE_END_DATA) {
	        depth++;
	      }
	    }

	    node = node.previousSibling;
	  }

	  return null;
	}
	function commitHydratedContainer(container) {
	  // Retry if any event replaying was blocked on this.
	  retryIfBlockedOn(container);
	}
	function commitHydratedSuspenseInstance(suspenseInstance) {
	  // Retry if any event replaying was blocked on this.
	  retryIfBlockedOn(suspenseInstance);
	}
	function shouldDeleteUnhydratedTailInstances(parentType) {
	  return parentType !== 'head' && parentType !== 'body';
	}
	function didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, text, isConcurrentMode) {
	  var shouldWarnDev = true;
	  checkForUnmatchedText(textInstance.nodeValue, text, isConcurrentMode, shouldWarnDev);
	}
	function didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, text, isConcurrentMode) {
	  if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
	    var shouldWarnDev = true;
	    checkForUnmatchedText(textInstance.nodeValue, text, isConcurrentMode, shouldWarnDev);
	  }
	}
	function didNotHydrateInstanceWithinContainer(parentContainer, instance) {
	  {
	    if (instance.nodeType === ELEMENT_NODE) {
	      warnForDeletedHydratableElement(parentContainer, instance);
	    } else if (instance.nodeType === COMMENT_NODE) ; else {
	      warnForDeletedHydratableText(parentContainer, instance);
	    }
	  }
	}
	function didNotHydrateInstanceWithinSuspenseInstance(parentInstance, instance) {
	  {
	    // $FlowFixMe: Only Element or Document can be parent nodes.
	    var parentNode = parentInstance.parentNode;

	    if (parentNode !== null) {
	      if (instance.nodeType === ELEMENT_NODE) {
	        warnForDeletedHydratableElement(parentNode, instance);
	      } else if (instance.nodeType === COMMENT_NODE) ; else {
	        warnForDeletedHydratableText(parentNode, instance);
	      }
	    }
	  }
	}
	function didNotHydrateInstance(parentType, parentProps, parentInstance, instance, isConcurrentMode) {
	  {
	    if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
	      if (instance.nodeType === ELEMENT_NODE) {
	        warnForDeletedHydratableElement(parentInstance, instance);
	      } else if (instance.nodeType === COMMENT_NODE) ; else {
	        warnForDeletedHydratableText(parentInstance, instance);
	      }
	    }
	  }
	}
	function didNotFindHydratableInstanceWithinContainer(parentContainer, type, props) {
	  {
	    warnForInsertedHydratedElement(parentContainer, type);
	  }
	}
	function didNotFindHydratableTextInstanceWithinContainer(parentContainer, text) {
	  {
	    warnForInsertedHydratedText(parentContainer, text);
	  }
	}
	function didNotFindHydratableInstanceWithinSuspenseInstance(parentInstance, type, props) {
	  {
	    // $FlowFixMe: Only Element or Document can be parent nodes.
	    var parentNode = parentInstance.parentNode;
	    if (parentNode !== null) warnForInsertedHydratedElement(parentNode, type);
	  }
	}
	function didNotFindHydratableTextInstanceWithinSuspenseInstance(parentInstance, text) {
	  {
	    // $FlowFixMe: Only Element or Document can be parent nodes.
	    var parentNode = parentInstance.parentNode;
	    if (parentNode !== null) warnForInsertedHydratedText(parentNode, text);
	  }
	}
	function didNotFindHydratableInstance(parentType, parentProps, parentInstance, type, props, isConcurrentMode) {
	  {
	    if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
	      warnForInsertedHydratedElement(parentInstance, type);
	    }
	  }
	}
	function didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, text, isConcurrentMode) {
	  {
	    if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
	      warnForInsertedHydratedText(parentInstance, text);
	    }
	  }
	}
	function errorHydratingContainer(parentContainer) {
	  {
	    // TODO: This gets logged by onRecoverableError, too, so we should be
	    // able to remove it.
	    error('An error occurred during hydration. The server HTML was replaced with client content in <%s>.', parentContainer.nodeName.toLowerCase());
	  }
	}
	function preparePortalMount(portalInstance) {
	  listenToAllSupportedEvents(portalInstance);
	}

	var randomKey = Math.random().toString(36).slice(2);
	var internalInstanceKey = '__reactFiber$' + randomKey;
	var internalPropsKey = '__reactProps$' + randomKey;
	var internalContainerInstanceKey = '__reactContainer$' + randomKey;
	var internalEventHandlersKey = '__reactEvents$' + randomKey;
	var internalEventHandlerListenersKey = '__reactListeners$' + randomKey;
	var internalEventHandlesSetKey = '__reactHandles$' + randomKey;
	function detachDeletedInstance(node) {
	  // TODO: This function is only called on host components. I don't think all of
	  // these fields are relevant.
	  delete node[internalInstanceKey];
	  delete node[internalPropsKey];
	  delete node[internalEventHandlersKey];
	  delete node[internalEventHandlerListenersKey];
	  delete node[internalEventHandlesSetKey];
	}
	function precacheFiberNode(hostInst, node) {
	  node[internalInstanceKey] = hostInst;
	}
	function markContainerAsRoot(hostRoot, node) {
	  node[internalContainerInstanceKey] = hostRoot;
	}
	function unmarkContainerAsRoot(node) {
	  node[internalContainerInstanceKey] = null;
	}
	function isContainerMarkedAsRoot(node) {
	  return !!node[internalContainerInstanceKey];
	} // Given a DOM node, return the closest HostComponent or HostText fiber ancestor.
	// If the target node is part of a hydrated or not yet rendered subtree, then
	// this may also return a SuspenseComponent or HostRoot to indicate that.
	// Conceptually the HostRoot fiber is a child of the Container node. So if you
	// pass the Container node as the targetNode, you will not actually get the
	// HostRoot back. To get to the HostRoot, you need to pass a child of it.
	// The same thing applies to Suspense boundaries.

	function getClosestInstanceFromNode(targetNode) {
	  var targetInst = targetNode[internalInstanceKey];

	  if (targetInst) {
	    // Don't return HostRoot or SuspenseComponent here.
	    return targetInst;
	  } // If the direct event target isn't a React owned DOM node, we need to look
	  // to see if one of its parents is a React owned DOM node.


	  var parentNode = targetNode.parentNode;

	  while (parentNode) {
	    // We'll check if this is a container root that could include
	    // React nodes in the future. We need to check this first because
	    // if we're a child of a dehydrated container, we need to first
	    // find that inner container before moving on to finding the parent
	    // instance. Note that we don't check this field on  the targetNode
	    // itself because the fibers are conceptually between the container
	    // node and the first child. It isn't surrounding the container node.
	    // If it's not a container, we check if it's an instance.
	    targetInst = parentNode[internalContainerInstanceKey] || parentNode[internalInstanceKey];

	    if (targetInst) {
	      // Since this wasn't the direct target of the event, we might have
	      // stepped past dehydrated DOM nodes to get here. However they could
	      // also have been non-React nodes. We need to answer which one.
	      // If we the instance doesn't have any children, then there can't be
	      // a nested suspense boundary within it. So we can use this as a fast
	      // bailout. Most of the time, when people add non-React children to
	      // the tree, it is using a ref to a child-less DOM node.
	      // Normally we'd only need to check one of the fibers because if it
	      // has ever gone from having children to deleting them or vice versa
	      // it would have deleted the dehydrated boundary nested inside already.
	      // However, since the HostRoot starts out with an alternate it might
	      // have one on the alternate so we need to check in case this was a
	      // root.
	      var alternate = targetInst.alternate;

	      if (targetInst.child !== null || alternate !== null && alternate.child !== null) {
	        // Next we need to figure out if the node that skipped past is
	        // nested within a dehydrated boundary and if so, which one.
	        var suspenseInstance = getParentSuspenseInstance(targetNode);

	        while (suspenseInstance !== null) {
	          // We found a suspense instance. That means that we haven't
	          // hydrated it yet. Even though we leave the comments in the
	          // DOM after hydrating, and there are boundaries in the DOM
	          // that could already be hydrated, we wouldn't have found them
	          // through this pass since if the target is hydrated it would
	          // have had an internalInstanceKey on it.
	          // Let's get the fiber associated with the SuspenseComponent
	          // as the deepest instance.
	          var targetSuspenseInst = suspenseInstance[internalInstanceKey];

	          if (targetSuspenseInst) {
	            return targetSuspenseInst;
	          } // If we don't find a Fiber on the comment, it might be because
	          // we haven't gotten to hydrate it yet. There might still be a
	          // parent boundary that hasn't above this one so we need to find
	          // the outer most that is known.


	          suspenseInstance = getParentSuspenseInstance(suspenseInstance); // If we don't find one, then that should mean that the parent
	          // host component also hasn't hydrated yet. We can return it
	          // below since it will bail out on the isMounted check later.
	        }
	      }

	      return targetInst;
	    }

	    targetNode = parentNode;
	    parentNode = targetNode.parentNode;
	  }

	  return null;
	}
	/**
	 * Given a DOM node, return the ReactDOMComponent or ReactDOMTextComponent
	 * instance, or null if the node was not rendered by this React.
	 */

	function getInstanceFromNode(node) {
	  var inst = node[internalInstanceKey] || node[internalContainerInstanceKey];

	  if (inst) {
	    if (inst.tag === HostComponent || inst.tag === HostText || inst.tag === SuspenseComponent || inst.tag === HostRoot) {
	      return inst;
	    } else {
	      return null;
	    }
	  }

	  return null;
	}
	/**
	 * Given a ReactDOMComponent or ReactDOMTextComponent, return the corresponding
	 * DOM node.
	 */

	function getNodeFromInstance(inst) {
	  if (inst.tag === HostComponent || inst.tag === HostText) {
	    // In Fiber this, is just the state node right now. We assume it will be
	    // a host component or host text.
	    return inst.stateNode;
	  } // Without this first invariant, passing a non-DOM-component triggers the next
	  // invariant for a missing parent, which is super confusing.


	  throw new Error('getNodeFromInstance: Invalid argument.');
	}
	function getFiberCurrentPropsFromNode(node) {
	  return node[internalPropsKey] || null;
	}
	function updateFiberProps(node, props) {
	  node[internalPropsKey] = props;
	}
	function getEventListenerSet(node) {
	  var elementListenerSet = node[internalEventHandlersKey];

	  if (elementListenerSet === undefined) {
	    elementListenerSet = node[internalEventHandlersKey] = new Set();
	  }

	  return elementListenerSet;
	}

	var loggedTypeFailures = {};
	var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;

	function setCurrentlyValidatingElement(element) {
	  {
	    if (element) {
	      var owner = element._owner;
	      var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
	      ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
	    } else {
	      ReactDebugCurrentFrame$1.setExtraStackFrame(null);
	    }
	  }
	}

	function checkPropTypes(typeSpecs, values, location, componentName, element) {
	  {
	    // $FlowFixMe This is okay but Flow doesn't know it.
	    var has = Function.call.bind(hasOwnProperty);

	    for (var typeSpecName in typeSpecs) {
	      if (has(typeSpecs, typeSpecName)) {
	        var error$1 = void 0; // Prop type validation may throw. In case they do, we don't want to
	        // fail the render phase where it didn't fail before. So we log it.
	        // After these have been cleaned up, we'll let them throw.

	        try {
	          // This is intentionally an invariant that gets caught. It's the same
	          // behavior as without this statement except with a better message.
	          if (typeof typeSpecs[typeSpecName] !== 'function') {
	            // eslint-disable-next-line react-internal/prod-error-codes
	            var err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.' + 'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.');
	            err.name = 'Invariant Violation';
	            throw err;
	          }

	          error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED');
	        } catch (ex) {
	          error$1 = ex;
	        }

	        if (error$1 && !(error$1 instanceof Error)) {
	          setCurrentlyValidatingElement(element);

	          error('%s: type specification of %s' + ' `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', location, typeSpecName, typeof error$1);

	          setCurrentlyValidatingElement(null);
	        }

	        if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
	          // Only monitor this failure once because there tends to be a lot of the
	          // same error.
	          loggedTypeFailures[error$1.message] = true;
	          setCurrentlyValidatingElement(element);

	          error('Failed %s type: %s', location, error$1.message);

	          setCurrentlyValidatingElement(null);
	        }
	      }
	    }
	  }
	}

	var valueStack = [];
	var fiberStack;

	{
	  fiberStack = [];
	}

	var index = -1;

	function createCursor(defaultValue) {
	  return {
	    current: defaultValue
	  };
	}

	function pop(cursor, fiber) {
	  if (index < 0) {
	    {
	      error('Unexpected pop.');
	    }

	    return;
	  }

	  {
	    if (fiber !== fiberStack[index]) {
	      error('Unexpected Fiber popped.');
	    }
	  }

	  cursor.current = valueStack[index];
	  valueStack[index] = null;

	  {
	    fiberStack[index] = null;
	  }

	  index--;
	}

	function push(cursor, value, fiber) {
	  index++;
	  valueStack[index] = cursor.current;

	  {
	    fiberStack[index] = fiber;
	  }

	  cursor.current = value;
	}

	var warnedAboutMissingGetChildContext;

	{
	  warnedAboutMissingGetChildContext = {};
	}

	var emptyContextObject = {};

	{
	  Object.freeze(emptyContextObject);
	} // A cursor to the current merged context object on the stack.


	var contextStackCursor = createCursor(emptyContextObject); // A cursor to a boolean indicating whether the context has changed.

	var didPerformWorkStackCursor = createCursor(false); // Keep track of the previous context object that was on the stack.
	// We use this to get access to the parent context after we have already
	// pushed the next context provider, and now need to merge their contexts.

	var previousContext = emptyContextObject;

	function getUnmaskedContext(workInProgress, Component, didPushOwnContextIfProvider) {
	  {
	    if (didPushOwnContextIfProvider && isContextProvider(Component)) {
	      // If the fiber is a context provider itself, when we read its context
	      // we may have already pushed its own child context on the stack. A context
	      // provider should not "see" its own child context. Therefore we read the
	      // previous (parent) context instead for a context provider.
	      return previousContext;
	    }

	    return contextStackCursor.current;
	  }
	}

	function cacheContext(workInProgress, unmaskedContext, maskedContext) {
	  {
	    var instance = workInProgress.stateNode;
	    instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;
	    instance.__reactInternalMemoizedMaskedChildContext = maskedContext;
	  }
	}

	function getMaskedContext(workInProgress, unmaskedContext) {
	  {
	    var type = workInProgress.type;
	    var contextTypes = type.contextTypes;

	    if (!contextTypes) {
	      return emptyContextObject;
	    } // Avoid recreating masked context unless unmasked context has changed.
	    // Failing to do this will result in unnecessary calls to componentWillReceiveProps.
	    // This may trigger infinite loops if componentWillReceiveProps calls setState.


	    var instance = workInProgress.stateNode;

	    if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) {
	      return instance.__reactInternalMemoizedMaskedChildContext;
	    }

	    var context = {};

	    for (var key in contextTypes) {
	      context[key] = unmaskedContext[key];
	    }

	    {
	      var name = getComponentNameFromFiber(workInProgress) || 'Unknown';
	      checkPropTypes(contextTypes, context, 'context', name);
	    } // Cache unmasked context so we can avoid recreating masked context unless necessary.
	    // Context is created before the class component is instantiated so check for instance.


	    if (instance) {
	      cacheContext(workInProgress, unmaskedContext, context);
	    }

	    return context;
	  }
	}

	function hasContextChanged() {
	  {
	    return didPerformWorkStackCursor.current;
	  }
	}

	function isContextProvider(type) {
	  {
	    var childContextTypes = type.childContextTypes;
	    return childContextTypes !== null && childContextTypes !== undefined;
	  }
	}

	function popContext(fiber) {
	  {
	    pop(didPerformWorkStackCursor, fiber);
	    pop(contextStackCursor, fiber);
	  }
	}

	function popTopLevelContextObject(fiber) {
	  {
	    pop(didPerformWorkStackCursor, fiber);
	    pop(contextStackCursor, fiber);
	  }
	}

	function pushTopLevelContextObject(fiber, context, didChange) {
	  {
	    if (contextStackCursor.current !== emptyContextObject) {
	      throw new Error('Unexpected context found on stack. ' + 'This error is likely caused by a bug in React. Please file an issue.');
	    }

	    push(contextStackCursor, context, fiber);
	    push(didPerformWorkStackCursor, didChange, fiber);
	  }
	}

	function processChildContext(fiber, type, parentContext) {
	  {
	    var instance = fiber.stateNode;
	    var childContextTypes = type.childContextTypes; // TODO (bvaughn) Replace this behavior with an invariant() in the future.
	    // It has only been added in Fiber to match the (unintentional) behavior in Stack.

	    if (typeof instance.getChildContext !== 'function') {
	      {
	        var componentName = getComponentNameFromFiber(fiber) || 'Unknown';

	        if (!warnedAboutMissingGetChildContext[componentName]) {
	          warnedAboutMissingGetChildContext[componentName] = true;

	          error('%s.childContextTypes is specified but there is no getChildContext() method ' + 'on the instance. You can either define getChildContext() on %s or remove ' + 'childContextTypes from it.', componentName, componentName);
	        }
	      }

	      return parentContext;
	    }

	    var childContext = instance.getChildContext();

	    for (var contextKey in childContext) {
	      if (!(contextKey in childContextTypes)) {
	        throw new Error((getComponentNameFromFiber(fiber) || 'Unknown') + ".getChildContext(): key \"" + contextKey + "\" is not defined in childContextTypes.");
	      }
	    }

	    {
	      var name = getComponentNameFromFiber(fiber) || 'Unknown';
	      checkPropTypes(childContextTypes, childContext, 'child context', name);
	    }

	    return assign({}, parentContext, childContext);
	  }
	}

	function pushContextProvider(workInProgress) {
	  {
	    var instance = workInProgress.stateNode; // We push the context as early as possible to ensure stack integrity.
	    // If the instance does not exist yet, we will push null at first,
	    // and replace it on the stack later when invalidating the context.

	    var memoizedMergedChildContext = instance && instance.__reactInternalMemoizedMergedChildContext || emptyContextObject; // Remember the parent context so we can merge with it later.
	    // Inherit the parent's did-perform-work value to avoid inadvertently blocking updates.

	    previousContext = contextStackCursor.current;
	    push(contextStackCursor, memoizedMergedChildContext, workInProgress);
	    push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress);
	    return true;
	  }
	}

	function invalidateContextProvider(workInProgress, type, didChange) {
	  {
	    var instance = workInProgress.stateNode;

	    if (!instance) {
	      throw new Error('Expected to have an instance by this point. ' + 'This error is likely caused by a bug in React. Please file an issue.');
	    }

	    if (didChange) {
	      // Merge parent and own context.
	      // Skip this if we're not updating due to sCU.
	      // This avoids unnecessarily recomputing memoized values.
	      var mergedContext = processChildContext(workInProgress, type, previousContext);
	      instance.__reactInternalMemoizedMergedChildContext = mergedContext; // Replace the old (or empty) context with the new one.
	      // It is important to unwind the context in the reverse order.

	      pop(didPerformWorkStackCursor, workInProgress);
	      pop(contextStackCursor, workInProgress); // Now push the new context and mark that it has changed.

	      push(contextStackCursor, mergedContext, workInProgress);
	      push(didPerformWorkStackCursor, didChange, workInProgress);
	    } else {
	      pop(didPerformWorkStackCursor, workInProgress);
	      push(didPerformWorkStackCursor, didChange, workInProgress);
	    }
	  }
	}

	function findCurrentUnmaskedContext(fiber) {
	  {
	    // Currently this is only used with renderSubtreeIntoContainer; not sure if it
	    // makes sense elsewhere
	    if (!isFiberMounted(fiber) || fiber.tag !== ClassComponent) {
	      throw new Error('Expected subtree parent to be a mounted class component. ' + 'This error is likely caused by a bug in React. Please file an issue.');
	    }

	    var node = fiber;

	    do {
	      switch (node.tag) {
	        case HostRoot:
	          return node.stateNode.context;

	        case ClassComponent:
	          {
	            var Component = node.type;

	            if (isContextProvider(Component)) {
	              return node.stateNode.__reactInternalMemoizedMergedChildContext;
	            }

	            break;
	          }
	      }

	      node = node.return;
	    } while (node !== null);

	    throw new Error('Found unexpected detached subtree parent. ' + 'This error is likely caused by a bug in React. Please file an issue.');
	  }
	}

	var LegacyRoot = 0;
	var ConcurrentRoot = 1;

	var syncQueue = null;
	var includesLegacySyncCallbacks = false;
	var isFlushingSyncQueue = false;
	function scheduleSyncCallback(callback) {
	  // Push this callback into an internal queue. We'll flush these either in
	  // the next tick, or earlier if something calls `flushSyncCallbackQueue`.
	  if (syncQueue === null) {
	    syncQueue = [callback];
	  } else {
	    // Push onto existing queue. Don't need to schedule a callback because
	    // we already scheduled one when we created the queue.
	    syncQueue.push(callback);
	  }
	}
	function scheduleLegacySyncCallback(callback) {
	  includesLegacySyncCallbacks = true;
	  scheduleSyncCallback(callback);
	}
	function flushSyncCallbacksOnlyInLegacyMode() {
	  // Only flushes the queue if there's a legacy sync callback scheduled.
	  // TODO: There's only a single type of callback: performSyncOnWorkOnRoot. So
	  // it might make more sense for the queue to be a list of roots instead of a
	  // list of generic callbacks. Then we can have two: one for legacy roots, one
	  // for concurrent roots. And this method would only flush the legacy ones.
	  if (includesLegacySyncCallbacks) {
	    flushSyncCallbacks();
	  }
	}
	function flushSyncCallbacks() {
	  if (!isFlushingSyncQueue && syncQueue !== null) {
	    // Prevent re-entrance.
	    isFlushingSyncQueue = true;
	    var i = 0;
	    var previousUpdatePriority = getCurrentUpdatePriority();

	    try {
	      var isSync = true;
	      var queue = syncQueue; // TODO: Is this necessary anymore? The only user code that runs in this
	      // queue is in the render or commit phases.

	      setCurrentUpdatePriority(DiscreteEventPriority);

	      for (; i < queue.length; i++) {
	        var callback = queue[i];

	        do {
	          callback = callback(isSync);
	        } while (callback !== null);
	      }

	      syncQueue = null;
	      includesLegacySyncCallbacks = false;
	    } catch (error) {
	      // If something throws, leave the remaining callbacks on the queue.
	      if (syncQueue !== null) {
	        syncQueue = syncQueue.slice(i + 1);
	      } // Resume flushing in the next tick


	      scheduleCallback(ImmediatePriority, flushSyncCallbacks);
	      throw error;
	    } finally {
	      setCurrentUpdatePriority(previousUpdatePriority);
	      isFlushingSyncQueue = false;
	    }
	  }

	  return null;
	}

	// TODO: Use the unified fiber stack module instead of this local one?
	// Intentionally not using it yet to derisk the initial implementation, because
	// the way we push/pop these values is a bit unusual. If there's a mistake, I'd
	// rather the ids be wrong than crash the whole reconciler.
	var forkStack = [];
	var forkStackIndex = 0;
	var treeForkProvider = null;
	var treeForkCount = 0;
	var idStack = [];
	var idStackIndex = 0;
	var treeContextProvider = null;
	var treeContextId = 1;
	var treeContextOverflow = '';
	function isForkedChild(workInProgress) {
	  warnIfNotHydrating();
	  return (workInProgress.flags & Forked) !== NoFlags;
	}
	function getForksAtLevel(workInProgress) {
	  warnIfNotHydrating();
	  return treeForkCount;
	}
	function getTreeId() {
	  var overflow = treeContextOverflow;
	  var idWithLeadingBit = treeContextId;
	  var id = idWithLeadingBit & ~getLeadingBit(idWithLeadingBit);
	  return id.toString(32) + overflow;
	}
	function pushTreeFork(workInProgress, totalChildren) {
	  // This is called right after we reconcile an array (or iterator) of child
	  // fibers, because that's the only place where we know how many children in
	  // the whole set without doing extra work later, or storing addtional
	  // information on the fiber.
	  //
	  // That's why this function is separate from pushTreeId — it's called during
	  // the render phase of the fork parent, not the child, which is where we push
	  // the other context values.
	  //
	  // In the Fizz implementation this is much simpler because the child is
	  // rendered in the same callstack as the parent.
	  //
	  // It might be better to just add a `forks` field to the Fiber type. It would
	  // make this module simpler.
	  warnIfNotHydrating();
	  forkStack[forkStackIndex++] = treeForkCount;
	  forkStack[forkStackIndex++] = treeForkProvider;
	  treeForkProvider = workInProgress;
	  treeForkCount = totalChildren;
	}
	function pushTreeId(workInProgress, totalChildren, index) {
	  warnIfNotHydrating();
	  idStack[idStackIndex++] = treeContextId;
	  idStack[idStackIndex++] = treeContextOverflow;
	  idStack[idStackIndex++] = treeContextProvider;
	  treeContextProvider = workInProgress;
	  var baseIdWithLeadingBit = treeContextId;
	  var baseOverflow = treeContextOverflow; // The leftmost 1 marks the end of the sequence, non-inclusive. It's not part
	  // of the id; we use it to account for leading 0s.

	  var baseLength = getBitLength(baseIdWithLeadingBit) - 1;
	  var baseId = baseIdWithLeadingBit & ~(1 << baseLength);
	  var slot = index + 1;
	  var length = getBitLength(totalChildren) + baseLength; // 30 is the max length we can store without overflowing, taking into
	  // consideration the leading 1 we use to mark the end of the sequence.

	  if (length > 30) {
	    // We overflowed the bitwise-safe range. Fall back to slower algorithm.
	    // This branch assumes the length of the base id is greater than 5; it won't
	    // work for smaller ids, because you need 5 bits per character.
	    //
	    // We encode the id in multiple steps: first the base id, then the
	    // remaining digits.
	    //
	    // Each 5 bit sequence corresponds to a single base 32 character. So for
	    // example, if the current id is 23 bits long, we can convert 20 of those
	    // bits into a string of 4 characters, with 3 bits left over.
	    //
	    // First calculate how many bits in the base id represent a complete
	    // sequence of characters.
	    var numberOfOverflowBits = baseLength - baseLength % 5; // Then create a bitmask that selects only those bits.

	    var newOverflowBits = (1 << numberOfOverflowBits) - 1; // Select the bits, and convert them to a base 32 string.

	    var newOverflow = (baseId & newOverflowBits).toString(32); // Now we can remove those bits from the base id.

	    var restOfBaseId = baseId >> numberOfOverflowBits;
	    var restOfBaseLength = baseLength - numberOfOverflowBits; // Finally, encode the rest of the bits using the normal algorithm. Because
	    // we made more room, this time it won't overflow.

	    var restOfLength = getBitLength(totalChildren) + restOfBaseLength;
	    var restOfNewBits = slot << restOfBaseLength;
	    var id = restOfNewBits | restOfBaseId;
	    var overflow = newOverflow + baseOverflow;
	    treeContextId = 1 << restOfLength | id;
	    treeContextOverflow = overflow;
	  } else {
	    // Normal path
	    var newBits = slot << baseLength;

	    var _id = newBits | baseId;

	    var _overflow = baseOverflow;
	    treeContextId = 1 << length | _id;
	    treeContextOverflow = _overflow;
	  }
	}
	function pushMaterializedTreeId(workInProgress) {
	  warnIfNotHydrating(); // This component materialized an id. This will affect any ids that appear
	  // in its children.

	  var returnFiber = workInProgress.return;

	  if (returnFiber !== null) {
	    var numberOfForks = 1;
	    var slotIndex = 0;
	    pushTreeFork(workInProgress, numberOfForks);
	    pushTreeId(workInProgress, numberOfForks, slotIndex);
	  }
	}

	function getBitLength(number) {
	  return 32 - clz32(number);
	}

	function getLeadingBit(id) {
	  return 1 << getBitLength(id) - 1;
	}

	function popTreeContext(workInProgress) {
	  // Restore the previous values.
	  // This is a bit more complicated than other context-like modules in Fiber
	  // because the same Fiber may appear on the stack multiple times and for
	  // different reasons. We have to keep popping until the work-in-progress is
	  // no longer at the top of the stack.
	  while (workInProgress === treeForkProvider) {
	    treeForkProvider = forkStack[--forkStackIndex];
	    forkStack[forkStackIndex] = null;
	    treeForkCount = forkStack[--forkStackIndex];
	    forkStack[forkStackIndex] = null;
	  }

	  while (workInProgress === treeContextProvider) {
	    treeContextProvider = idStack[--idStackIndex];
	    idStack[idStackIndex] = null;
	    treeContextOverflow = idStack[--idStackIndex];
	    idStack[idStackIndex] = null;
	    treeContextId = idStack[--idStackIndex];
	    idStack[idStackIndex] = null;
	  }
	}
	function getSuspendedTreeContext() {
	  warnIfNotHydrating();

	  if (treeContextProvider !== null) {
	    return {
	      id: treeContextId,
	      overflow: treeContextOverflow
	    };
	  } else {
	    return null;
	  }
	}
	function restoreSuspendedTreeContext(workInProgress, suspendedContext) {
	  warnIfNotHydrating();
	  idStack[idStackIndex++] = treeContextId;
	  idStack[idStackIndex++] = treeContextOverflow;
	  idStack[idStackIndex++] = treeContextProvider;
	  treeContextId = suspendedContext.id;
	  treeContextOverflow = suspendedContext.overflow;
	  treeContextProvider = workInProgress;
	}

	function warnIfNotHydrating() {
	  {
	    if (!getIsHydrating()) {
	      error('Expected to be hydrating. This is a bug in React. Please file ' + 'an issue.');
	    }
	  }
	}

	// This may have been an insertion or a hydration.

	var hydrationParentFiber = null;
	var nextHydratableInstance = null;
	var isHydrating = false; // This flag allows for warning supression when we expect there to be mismatches
	// due to earlier mismatches or a suspended fiber.

	var didSuspendOrErrorDEV = false; // Hydration errors that were thrown inside this boundary

	var hydrationErrors = null;

	function warnIfHydrating() {
	  {
	    if (isHydrating) {
	      error('We should not be hydrating here. This is a bug in React. Please file a bug.');
	    }
	  }
	}

	function markDidThrowWhileHydratingDEV() {
	  {
	    didSuspendOrErrorDEV = true;
	  }
	}
	function didSuspendOrErrorWhileHydratingDEV() {
	  {
	    return didSuspendOrErrorDEV;
	  }
	}

	function enterHydrationState(fiber) {

	  var parentInstance = fiber.stateNode.containerInfo;
	  nextHydratableInstance = getFirstHydratableChildWithinContainer(parentInstance);
	  hydrationParentFiber = fiber;
	  isHydrating = true;
	  hydrationErrors = null;
	  didSuspendOrErrorDEV = false;
	  return true;
	}

	function reenterHydrationStateFromDehydratedSuspenseInstance(fiber, suspenseInstance, treeContext) {

	  nextHydratableInstance = getFirstHydratableChildWithinSuspenseInstance(suspenseInstance);
	  hydrationParentFiber = fiber;
	  isHydrating = true;
	  hydrationErrors = null;
	  didSuspendOrErrorDEV = false;

	  if (treeContext !== null) {
	    restoreSuspendedTreeContext(fiber, treeContext);
	  }

	  return true;
	}

	function warnUnhydratedInstance(returnFiber, instance) {
	  {
	    switch (returnFiber.tag) {
	      case HostRoot:
	        {
	          didNotHydrateInstanceWithinContainer(returnFiber.stateNode.containerInfo, instance);
	          break;
	        }

	      case HostComponent:
	        {
	          var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
	          didNotHydrateInstance(returnFiber.type, returnFiber.memoizedProps, returnFiber.stateNode, instance, // TODO: Delete this argument when we remove the legacy root API.
	          isConcurrentMode);
	          break;
	        }

	      case SuspenseComponent:
	        {
	          var suspenseState = returnFiber.memoizedState;
	          if (suspenseState.dehydrated !== null) didNotHydrateInstanceWithinSuspenseInstance(suspenseState.dehydrated, instance);
	          break;
	        }
	    }
	  }
	}

	function deleteHydratableInstance(returnFiber, instance) {
	  warnUnhydratedInstance(returnFiber, instance);
	  var childToDelete = createFiberFromHostInstanceForDeletion();
	  childToDelete.stateNode = instance;
	  childToDelete.return = returnFiber;
	  var deletions = returnFiber.deletions;

	  if (deletions === null) {
	    returnFiber.deletions = [childToDelete];
	    returnFiber.flags |= ChildDeletion;
	  } else {
	    deletions.push(childToDelete);
	  }
	}

	function warnNonhydratedInstance(returnFiber, fiber) {
	  {
	    if (didSuspendOrErrorDEV) {
	      // Inside a boundary that already suspended. We're currently rendering the
	      // siblings of a suspended node. The mismatch may be due to the missing
	      // data, so it's probably a false positive.
	      return;
	    }

	    switch (returnFiber.tag) {
	      case HostRoot:
	        {
	          var parentContainer = returnFiber.stateNode.containerInfo;

	          switch (fiber.tag) {
	            case HostComponent:
	              var type = fiber.type;
	              fiber.pendingProps;
	              didNotFindHydratableInstanceWithinContainer(parentContainer, type);
	              break;

	            case HostText:
	              var text = fiber.pendingProps;
	              didNotFindHydratableTextInstanceWithinContainer(parentContainer, text);
	              break;
	          }

	          break;
	        }

	      case HostComponent:
	        {
	          var parentType = returnFiber.type;
	          var parentProps = returnFiber.memoizedProps;
	          var parentInstance = returnFiber.stateNode;

	          switch (fiber.tag) {
	            case HostComponent:
	              {
	                var _type = fiber.type;
	                var _props = fiber.pendingProps;
	                var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
	                didNotFindHydratableInstance(parentType, parentProps, parentInstance, _type, _props, // TODO: Delete this argument when we remove the legacy root API.
	                isConcurrentMode);
	                break;
	              }

	            case HostText:
	              {
	                var _text = fiber.pendingProps;

	                var _isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;

	                didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, _text, // TODO: Delete this argument when we remove the legacy root API.
	                _isConcurrentMode);
	                break;
	              }
	          }

	          break;
	        }

	      case SuspenseComponent:
	        {
	          var suspenseState = returnFiber.memoizedState;
	          var _parentInstance = suspenseState.dehydrated;
	          if (_parentInstance !== null) switch (fiber.tag) {
	            case HostComponent:
	              var _type2 = fiber.type;
	              fiber.pendingProps;
	              didNotFindHydratableInstanceWithinSuspenseInstance(_parentInstance, _type2);
	              break;

	            case HostText:
	              var _text2 = fiber.pendingProps;
	              didNotFindHydratableTextInstanceWithinSuspenseInstance(_parentInstance, _text2);
	              break;
	          }
	          break;
	        }

	      default:
	        return;
	    }
	  }
	}

	function insertNonHydratedInstance(returnFiber, fiber) {
	  fiber.flags = fiber.flags & ~Hydrating | Placement;
	  warnNonhydratedInstance(returnFiber, fiber);
	}

	function tryHydrate(fiber, nextInstance) {
	  switch (fiber.tag) {
	    case HostComponent:
	      {
	        var type = fiber.type;
	        fiber.pendingProps;
	        var instance = canHydrateInstance(nextInstance, type);

	        if (instance !== null) {
	          fiber.stateNode = instance;
	          hydrationParentFiber = fiber;
	          nextHydratableInstance = getFirstHydratableChild(instance);
	          return true;
	        }

	        return false;
	      }

	    case HostText:
	      {
	        var text = fiber.pendingProps;
	        var textInstance = canHydrateTextInstance(nextInstance, text);

	        if (textInstance !== null) {
	          fiber.stateNode = textInstance;
	          hydrationParentFiber = fiber; // Text Instances don't have children so there's nothing to hydrate.

	          nextHydratableInstance = null;
	          return true;
	        }

	        return false;
	      }

	    case SuspenseComponent:
	      {
	        var suspenseInstance = canHydrateSuspenseInstance(nextInstance);

	        if (suspenseInstance !== null) {
	          var suspenseState = {
	            dehydrated: suspenseInstance,
	            treeContext: getSuspendedTreeContext(),
	            retryLane: OffscreenLane
	          };
	          fiber.memoizedState = suspenseState; // Store the dehydrated fragment as a child fiber.
	          // This simplifies the code for getHostSibling and deleting nodes,
	          // since it doesn't have to consider all Suspense boundaries and
	          // check if they're dehydrated ones or not.

	          var dehydratedFragment = createFiberFromDehydratedFragment(suspenseInstance);
	          dehydratedFragment.return = fiber;
	          fiber.child = dehydratedFragment;
	          hydrationParentFiber = fiber; // While a Suspense Instance does have children, we won't step into
	          // it during the first pass. Instead, we'll reenter it later.

	          nextHydratableInstance = null;
	          return true;
	        }

	        return false;
	      }

	    default:
	      return false;
	  }
	}

	function shouldClientRenderOnMismatch(fiber) {
	  return (fiber.mode & ConcurrentMode) !== NoMode && (fiber.flags & DidCapture) === NoFlags;
	}

	function throwOnHydrationMismatch(fiber) {
	  throw new Error('Hydration failed because the initial UI does not match what was ' + 'rendered on the server.');
	}

	function tryToClaimNextHydratableInstance(fiber) {
	  if (!isHydrating) {
	    return;
	  }

	  var nextInstance = nextHydratableInstance;

	  if (!nextInstance) {
	    if (shouldClientRenderOnMismatch(fiber)) {
	      warnNonhydratedInstance(hydrationParentFiber, fiber);
	      throwOnHydrationMismatch();
	    } // Nothing to hydrate. Make it an insertion.


	    insertNonHydratedInstance(hydrationParentFiber, fiber);
	    isHydrating = false;
	    hydrationParentFiber = fiber;
	    return;
	  }

	  var firstAttemptedInstance = nextInstance;

	  if (!tryHydrate(fiber, nextInstance)) {
	    if (shouldClientRenderOnMismatch(fiber)) {
	      warnNonhydratedInstance(hydrationParentFiber, fiber);
	      throwOnHydrationMismatch();
	    } // If we can't hydrate this instance let's try the next one.
	    // We use this as a heuristic. It's based on intuition and not data so it
	    // might be flawed or unnecessary.


	    nextInstance = getNextHydratableSibling(firstAttemptedInstance);
	    var prevHydrationParentFiber = hydrationParentFiber;

	    if (!nextInstance || !tryHydrate(fiber, nextInstance)) {
	      // Nothing to hydrate. Make it an insertion.
	      insertNonHydratedInstance(hydrationParentFiber, fiber);
	      isHydrating = false;
	      hydrationParentFiber = fiber;
	      return;
	    } // We matched the next one, we'll now assume that the first one was
	    // superfluous and we'll delete it. Since we can't eagerly delete it
	    // we'll have to schedule a deletion. To do that, this node needs a dummy
	    // fiber associated with it.


	    deleteHydratableInstance(prevHydrationParentFiber, firstAttemptedInstance);
	  }
	}

	function prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {

	  var instance = fiber.stateNode;
	  var shouldWarnIfMismatchDev = !didSuspendOrErrorDEV;
	  var updatePayload = hydrateInstance(instance, fiber.type, fiber.memoizedProps, rootContainerInstance, hostContext, fiber, shouldWarnIfMismatchDev); // TODO: Type this specific to this type of component.

	  fiber.updateQueue = updatePayload; // If the update payload indicates that there is a change or if there
	  // is a new ref we mark this as an update.

	  if (updatePayload !== null) {
	    return true;
	  }

	  return false;
	}

	function prepareToHydrateHostTextInstance(fiber) {

	  var textInstance = fiber.stateNode;
	  var textContent = fiber.memoizedProps;
	  var shouldUpdate = hydrateTextInstance(textInstance, textContent, fiber);

	  if (shouldUpdate) {
	    // We assume that prepareToHydrateHostTextInstance is called in a context where the
	    // hydration parent is the parent host component of this host text.
	    var returnFiber = hydrationParentFiber;

	    if (returnFiber !== null) {
	      switch (returnFiber.tag) {
	        case HostRoot:
	          {
	            var parentContainer = returnFiber.stateNode.containerInfo;
	            var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
	            didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, textContent, // TODO: Delete this argument when we remove the legacy root API.
	            isConcurrentMode);
	            break;
	          }

	        case HostComponent:
	          {
	            var parentType = returnFiber.type;
	            var parentProps = returnFiber.memoizedProps;
	            var parentInstance = returnFiber.stateNode;

	            var _isConcurrentMode2 = (returnFiber.mode & ConcurrentMode) !== NoMode;

	            didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, textContent, // TODO: Delete this argument when we remove the legacy root API.
	            _isConcurrentMode2);
	            break;
	          }
	      }
	    }
	  }

	  return shouldUpdate;
	}

	function prepareToHydrateHostSuspenseInstance(fiber) {

	  var suspenseState = fiber.memoizedState;
	  var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;

	  if (!suspenseInstance) {
	    throw new Error('Expected to have a hydrated suspense instance. ' + 'This error is likely caused by a bug in React. Please file an issue.');
	  }

	  hydrateSuspenseInstance(suspenseInstance, fiber);
	}

	function skipPastDehydratedSuspenseInstance(fiber) {

	  var suspenseState = fiber.memoizedState;
	  var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;

	  if (!suspenseInstance) {
	    throw new Error('Expected to have a hydrated suspense instance. ' + 'This error is likely caused by a bug in React. Please file an issue.');
	  }

	  return getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance);
	}

	function popToNextHostParent(fiber) {
	  var parent = fiber.return;

	  while (parent !== null && parent.tag !== HostComponent && parent.tag !== HostRoot && parent.tag !== SuspenseComponent) {
	    parent = parent.return;
	  }

	  hydrationParentFiber = parent;
	}

	function popHydrationState(fiber) {

	  if (fiber !== hydrationParentFiber) {
	    // We're deeper than the current hydration context, inside an inserted
	    // tree.
	    return false;
	  }

	  if (!isHydrating) {
	    // If we're not currently hydrating but we're in a hydration context, then
	    // we were an insertion and now need to pop up reenter hydration of our
	    // siblings.
	    popToNextHostParent(fiber);
	    isHydrating = true;
	    return false;
	  } // If we have any remaining hydratable nodes, we need to delete them now.
	  // We only do this deeper than head and body since they tend to have random
	  // other nodes in them. We also ignore components with pure text content in
	  // side of them. We also don't delete anything inside the root container.


	  if (fiber.tag !== HostRoot && (fiber.tag !== HostComponent || shouldDeleteUnhydratedTailInstances(fiber.type) && !shouldSetTextContent(fiber.type, fiber.memoizedProps))) {
	    var nextInstance = nextHydratableInstance;

	    if (nextInstance) {
	      if (shouldClientRenderOnMismatch(fiber)) {
	        warnIfUnhydratedTailNodes(fiber);
	        throwOnHydrationMismatch();
	      } else {
	        while (nextInstance) {
	          deleteHydratableInstance(fiber, nextInstance);
	          nextInstance = getNextHydratableSibling(nextInstance);
	        }
	      }
	    }
	  }

	  popToNextHostParent(fiber);

	  if (fiber.tag === SuspenseComponent) {
	    nextHydratableInstance = skipPastDehydratedSuspenseInstance(fiber);
	  } else {
	    nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null;
	  }

	  return true;
	}

	function hasUnhydratedTailNodes() {
	  return isHydrating && nextHydratableInstance !== null;
	}

	function warnIfUnhydratedTailNodes(fiber) {
	  var nextInstance = nextHydratableInstance;

	  while (nextInstance) {
	    warnUnhydratedInstance(fiber, nextInstance);
	    nextInstance = getNextHydratableSibling(nextInstance);
	  }
	}

	function resetHydrationState() {

	  hydrationParentFiber = null;
	  nextHydratableInstance = null;
	  isHydrating = false;
	  didSuspendOrErrorDEV = false;
	}

	function upgradeHydrationErrorsToRecoverable() {
	  if (hydrationErrors !== null) {
	    // Successfully completed a forced client render. The errors that occurred
	    // during the hydration attempt are now recovered. We will log them in
	    // commit phase, once the entire tree has finished.
	    queueRecoverableErrors(hydrationErrors);
	    hydrationErrors = null;
	  }
	}

	function getIsHydrating() {
	  return isHydrating;
	}

	function queueHydrationError(error) {
	  if (hydrationErrors === null) {
	    hydrationErrors = [error];
	  } else {
	    hydrationErrors.push(error);
	  }
	}

	var ReactCurrentBatchConfig$1 = ReactSharedInternals.ReactCurrentBatchConfig;
	var NoTransition = null;
	function requestCurrentTransition() {
	  return ReactCurrentBatchConfig$1.transition;
	}

	var ReactStrictModeWarnings = {
	  recordUnsafeLifecycleWarnings: function (fiber, instance) {},
	  flushPendingUnsafeLifecycleWarnings: function () {},
	  recordLegacyContextWarning: function (fiber, instance) {},
	  flushLegacyContextWarning: function () {},
	  discardPendingWarnings: function () {}
	};

	{
	  var findStrictRoot = function (fiber) {
	    var maybeStrictRoot = null;
	    var node = fiber;

	    while (node !== null) {
	      if (node.mode & StrictLegacyMode) {
	        maybeStrictRoot = node;
	      }

	      node = node.return;
	    }

	    return maybeStrictRoot;
	  };

	  var setToSortedString = function (set) {
	    var array = [];
	    set.forEach(function (value) {
	      array.push(value);
	    });
	    return array.sort().join(', ');
	  };

	  var pendingComponentWillMountWarnings = [];
	  var pendingUNSAFE_ComponentWillMountWarnings = [];
	  var pendingComponentWillReceivePropsWarnings = [];
	  var pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
	  var pendingComponentWillUpdateWarnings = [];
	  var pendingUNSAFE_ComponentWillUpdateWarnings = []; // Tracks components we have already warned about.

	  var didWarnAboutUnsafeLifecycles = new Set();

	  ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function (fiber, instance) {
	    // Dedupe strategy: Warn once per component.
	    if (didWarnAboutUnsafeLifecycles.has(fiber.type)) {
	      return;
	    }

	    if (typeof instance.componentWillMount === 'function' && // Don't warn about react-lifecycles-compat polyfilled components.
	    instance.componentWillMount.__suppressDeprecationWarning !== true) {
	      pendingComponentWillMountWarnings.push(fiber);
	    }

	    if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillMount === 'function') {
	      pendingUNSAFE_ComponentWillMountWarnings.push(fiber);
	    }

	    if (typeof instance.componentWillReceiveProps === 'function' && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
	      pendingComponentWillReceivePropsWarnings.push(fiber);
	    }

	    if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillReceiveProps === 'function') {
	      pendingUNSAFE_ComponentWillReceivePropsWarnings.push(fiber);
	    }

	    if (typeof instance.componentWillUpdate === 'function' && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
	      pendingComponentWillUpdateWarnings.push(fiber);
	    }

	    if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillUpdate === 'function') {
	      pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber);
	    }
	  };

	  ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function () {
	    // We do an initial pass to gather component names
	    var componentWillMountUniqueNames = new Set();

	    if (pendingComponentWillMountWarnings.length > 0) {
	      pendingComponentWillMountWarnings.forEach(function (fiber) {
	        componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || 'Component');
	        didWarnAboutUnsafeLifecycles.add(fiber.type);
	      });
	      pendingComponentWillMountWarnings = [];
	    }

	    var UNSAFE_componentWillMountUniqueNames = new Set();

	    if (pendingUNSAFE_ComponentWillMountWarnings.length > 0) {
	      pendingUNSAFE_ComponentWillMountWarnings.forEach(function (fiber) {
	        UNSAFE_componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || 'Component');
	        didWarnAboutUnsafeLifecycles.add(fiber.type);
	      });
	      pendingUNSAFE_ComponentWillMountWarnings = [];
	    }

	    var componentWillReceivePropsUniqueNames = new Set();

	    if (pendingComponentWillReceivePropsWarnings.length > 0) {
	      pendingComponentWillReceivePropsWarnings.forEach(function (fiber) {
	        componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || 'Component');
	        didWarnAboutUnsafeLifecycles.add(fiber.type);
	      });
	      pendingComponentWillReceivePropsWarnings = [];
	    }

	    var UNSAFE_componentWillReceivePropsUniqueNames = new Set();

	    if (pendingUNSAFE_ComponentWillReceivePropsWarnings.length > 0) {
	      pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach(function (fiber) {
	        UNSAFE_componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || 'Component');
	        didWarnAboutUnsafeLifecycles.add(fiber.type);
	      });
	      pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
	    }

	    var componentWillUpdateUniqueNames = new Set();

	    if (pendingComponentWillUpdateWarnings.length > 0) {
	      pendingComponentWillUpdateWarnings.forEach(function (fiber) {
	        componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || 'Component');
	        didWarnAboutUnsafeLifecycles.add(fiber.type);
	      });
	      pendingComponentWillUpdateWarnings = [];
	    }

	    var UNSAFE_componentWillUpdateUniqueNames = new Set();

	    if (pendingUNSAFE_ComponentWillUpdateWarnings.length > 0) {
	      pendingUNSAFE_ComponentWillUpdateWarnings.forEach(function (fiber) {
	        UNSAFE_componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || 'Component');
	        didWarnAboutUnsafeLifecycles.add(fiber.type);
	      });
	      pendingUNSAFE_ComponentWillUpdateWarnings = [];
	    } // Finally, we flush all the warnings
	    // UNSAFE_ ones before the deprecated ones, since they'll be 'louder'


	    if (UNSAFE_componentWillMountUniqueNames.size > 0) {
	      var sortedNames = setToSortedString(UNSAFE_componentWillMountUniqueNames);

	      error('Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. ' + 'See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n' + '* Move code with side effects to componentDidMount, and set initial state in the constructor.\n' + '\nPlease update the following components: %s', sortedNames);
	    }

	    if (UNSAFE_componentWillReceivePropsUniqueNames.size > 0) {
	      var _sortedNames = setToSortedString(UNSAFE_componentWillReceivePropsUniqueNames);

	      error('Using UNSAFE_componentWillReceiveProps in strict mode is not recommended ' + 'and may indicate bugs in your code. ' + 'See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n' + '* Move data fetching code or side effects to componentDidUpdate.\n' + "* If you're updating state whenever props change, " + 'refactor your code to use memoization techniques or move it to ' + 'static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n' + '\nPlease update the following components: %s', _sortedNames);
	    }

	    if (UNSAFE_componentWillUpdateUniqueNames.size > 0) {
	      var _sortedNames2 = setToSortedString(UNSAFE_componentWillUpdateUniqueNames);

	      error('Using UNSAFE_componentWillUpdate in strict mode is not recommended ' + 'and may indicate bugs in your code. ' + 'See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n' + '* Move data fetching code or side effects to componentDidUpdate.\n' + '\nPlease update the following components: %s', _sortedNames2);
	    }

	    if (componentWillMountUniqueNames.size > 0) {
	      var _sortedNames3 = setToSortedString(componentWillMountUniqueNames);

	      warn('componentWillMount has been renamed, and is not recommended for use. ' + 'See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n' + '* Move code with side effects to componentDidMount, and set initial state in the constructor.\n' + '* Rename componentWillMount to UNSAFE_componentWillMount to suppress ' + 'this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. ' + 'To rename all deprecated lifecycles to their new names, you can run ' + '`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n' + '\nPlease update the following components: %s', _sortedNames3);
	    }

	    if (componentWillReceivePropsUniqueNames.size > 0) {
	      var _sortedNames4 = setToSortedString(componentWillReceivePropsUniqueNames);

	      warn('componentWillReceiveProps has been renamed, and is not recommended for use. ' + 'See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n' + '* Move data fetching code or side effects to componentDidUpdate.\n' + "* If you're updating state whenever props change, refactor your " + 'code to use memoization techniques or move it to ' + 'static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n' + '* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress ' + 'this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. ' + 'To rename all deprecated lifecycles to their new names, you can run ' + '`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n' + '\nPlease update the following components: %s', _sortedNames4);
	    }

	    if (componentWillUpdateUniqueNames.size > 0) {
	      var _sortedNames5 = setToSortedString(componentWillUpdateUniqueNames);

	      warn('componentWillUpdate has been renamed, and is not recommended for use. ' + 'See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n' + '* Move data fetching code or side effects to componentDidUpdate.\n' + '* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress ' + 'this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. ' + 'To rename all deprecated lifecycles to their new names, you can run ' + '`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n' + '\nPlease update the following components: %s', _sortedNames5);
	    }
	  };

	  var pendingLegacyContextWarning = new Map(); // Tracks components we have already warned about.

	  var didWarnAboutLegacyContext = new Set();

	  ReactStrictModeWarnings.recordLegacyContextWarning = function (fiber, instance) {
	    var strictRoot = findStrictRoot(fiber);

	    if (strictRoot === null) {
	      error('Expected to find a StrictMode component in a strict mode tree. ' + 'This error is likely caused by a bug in React. Please file an issue.');

	      return;
	    } // Dedup strategy: Warn once per component.


	    if (didWarnAboutLegacyContext.has(fiber.type)) {
	      return;
	    }

	    var warningsForRoot = pendingLegacyContextWarning.get(strictRoot);

	    if (fiber.type.contextTypes != null || fiber.type.childContextTypes != null || instance !== null && typeof instance.getChildContext === 'function') {
	      if (warningsForRoot === undefined) {
	        warningsForRoot = [];
	        pendingLegacyContextWarning.set(strictRoot, warningsForRoot);
	      }

	      warningsForRoot.push(fiber);
	    }
	  };

	  ReactStrictModeWarnings.flushLegacyContextWarning = function () {
	    pendingLegacyContextWarning.forEach(function (fiberArray, strictRoot) {
	      if (fiberArray.length === 0) {
	        return;
	      }

	      var firstFiber = fiberArray[0];
	      var uniqueNames = new Set();
	      fiberArray.forEach(function (fiber) {
	        uniqueNames.add(getComponentNameFromFiber(fiber) || 'Component');
	        didWarnAboutLegacyContext.add(fiber.type);
	      });
	      var sortedNames = setToSortedString(uniqueNames);

	      try {
	        setCurrentFiber(firstFiber);

	        error('Legacy context API has been detected within a strict-mode tree.' + '\n\nThe old API will be supported in all 16.x releases, but applications ' + 'using it should migrate to the new version.' + '\n\nPlease update the following components: %s' + '\n\nLearn more about this warning here: https://reactjs.org/link/legacy-context', sortedNames);
	      } finally {
	        resetCurrentFiber();
	      }
	    });
	  };

	  ReactStrictModeWarnings.discardPendingWarnings = function () {
	    pendingComponentWillMountWarnings = [];
	    pendingUNSAFE_ComponentWillMountWarnings = [];
	    pendingComponentWillReceivePropsWarnings = [];
	    pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
	    pendingComponentWillUpdateWarnings = [];
	    pendingUNSAFE_ComponentWillUpdateWarnings = [];
	    pendingLegacyContextWarning = new Map();
	  };
	}

	var didWarnAboutMaps;
	var didWarnAboutGenerators;
	var didWarnAboutStringRefs;
	var ownerHasKeyUseWarning;
	var ownerHasFunctionTypeWarning;

	var warnForMissingKey = function (child, returnFiber) {};

	{
	  didWarnAboutMaps = false;
	  didWarnAboutGenerators = false;
	  didWarnAboutStringRefs = {};
	  /**
	   * Warn if there's no key explicitly set on dynamic arrays of children or
	   * object keys are not valid. This allows us to keep track of children between
	   * updates.
	   */

	  ownerHasKeyUseWarning = {};
	  ownerHasFunctionTypeWarning = {};

	  warnForMissingKey = function (child, returnFiber) {
	    if (child === null || typeof child !== 'object') {
	      return;
	    }

	    if (!child._store || child._store.validated || child.key != null) {
	      return;
	    }

	    if (typeof child._store !== 'object') {
	      throw new Error('React Component in warnForMissingKey should have a _store. ' + 'This error is likely caused by a bug in React. Please file an issue.');
	    }

	    child._store.validated = true;
	    var componentName = getComponentNameFromFiber(returnFiber) || 'Component';

	    if (ownerHasKeyUseWarning[componentName]) {
	      return;
	    }

	    ownerHasKeyUseWarning[componentName] = true;

	    error('Each child in a list should have a unique ' + '"key" prop. See https://reactjs.org/link/warning-keys for ' + 'more information.');
	  };
	}

	function isReactClass(type) {
	  return type.prototype && type.prototype.isReactComponent;
	}

	function coerceRef(returnFiber, current, element) {
	  var mixedRef = element.ref;

	  if (mixedRef !== null && typeof mixedRef !== 'function' && typeof mixedRef !== 'object') {
	    {
	      // TODO: Clean this up once we turn on the string ref warning for
	      // everyone, because the strict mode case will no longer be relevant
	      if ((returnFiber.mode & StrictLegacyMode || warnAboutStringRefs) && // We warn in ReactElement.js if owner and self are equal for string refs
	      // because these cannot be automatically converted to an arrow function
	      // using a codemod. Therefore, we don't have to warn about string refs again.
	      !(element._owner && element._self && element._owner.stateNode !== element._self) && // Will already throw with "Function components cannot have string refs"
	      !(element._owner && element._owner.tag !== ClassComponent) && // Will already warn with "Function components cannot be given refs"
	      !(typeof element.type === 'function' && !isReactClass(element.type)) && // Will already throw with "Element ref was specified as a string (someStringRef) but no owner was set"
	      element._owner) {
	        var componentName = getComponentNameFromFiber(returnFiber) || 'Component';

	        if (!didWarnAboutStringRefs[componentName]) {
	          {
	            error('Component "%s" contains the string ref "%s". Support for string refs ' + 'will be removed in a future major release. We recommend using ' + 'useRef() or createRef() instead. ' + 'Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-string-ref', componentName, mixedRef);
	          }

	          didWarnAboutStringRefs[componentName] = true;
	        }
	      }
	    }

	    if (element._owner) {
	      var owner = element._owner;
	      var inst;

	      if (owner) {
	        var ownerFiber = owner;

	        if (ownerFiber.tag !== ClassComponent) {
	          throw new Error('Function components cannot have string refs. ' + 'We recommend using useRef() instead. ' + 'Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-string-ref');
	        }

	        inst = ownerFiber.stateNode;
	      }

	      if (!inst) {
	        throw new Error("Missing owner for string ref " + mixedRef + ". This error is likely caused by a " + 'bug in React. Please file an issue.');
	      } // Assigning this to a const so Flow knows it won't change in the closure


	      var resolvedInst = inst;

	      {
	        checkPropStringCoercion(mixedRef, 'ref');
	      }

	      var stringRef = '' + mixedRef; // Check if previous string ref matches new string ref

	      if (current !== null && current.ref !== null && typeof current.ref === 'function' && current.ref._stringRef === stringRef) {
	        return current.ref;
	      }

	      var ref = function (value) {
	        var refs = resolvedInst.refs;

	        if (value === null) {
	          delete refs[stringRef];
	        } else {
	          refs[stringRef] = value;
	        }
	      };

	      ref._stringRef = stringRef;
	      return ref;
	    } else {
	      if (typeof mixedRef !== 'string') {
	        throw new Error('Expected ref to be a function, a string, an object returned by React.createRef(), or null.');
	      }

	      if (!element._owner) {
	        throw new Error("Element ref was specified as a string (" + mixedRef + ") but no owner was set. This could happen for one of" + ' the following reasons:\n' + '1. You may be adding a ref to a function component\n' + "2. You may be adding a ref to a component that was not created inside a component's render method\n" + '3. You have multiple copies of React loaded\n' + 'See https://reactjs.org/link/refs-must-have-owner for more information.');
	      }
	    }
	  }

	  return mixedRef;
	}

	function throwOnInvalidObjectType(returnFiber, newChild) {
	  var childString = Object.prototype.toString.call(newChild);
	  throw new Error("Objects are not valid as a React child (found: " + (childString === '[object Object]' ? 'object with keys {' + Object.keys(newChild).join(', ') + '}' : childString) + "). " + 'If you meant to render a collection of children, use an array ' + 'instead.');
	}

	function warnOnFunctionType(returnFiber) {
	  {
	    var componentName = getComponentNameFromFiber(returnFiber) || 'Component';

	    if (ownerHasFunctionTypeWarning[componentName]) {
	      return;
	    }

	    ownerHasFunctionTypeWarning[componentName] = true;

	    error('Functions are not valid as a React child. This may happen if ' + 'you return a Component instead of <Component /> from render. ' + 'Or maybe you meant to call this function rather than return it.');
	  }
	}

	function resolveLazy(lazyType) {
	  var payload = lazyType._payload;
	  var init = lazyType._init;
	  return init(payload);
	} // This wrapper function exists because I expect to clone the code in each path
	// to be able to optimize each path individually by branching early. This needs
	// a compiler or we can do it manually. Helpers that don't need this branching
	// live outside of this function.


	function ChildReconciler(shouldTrackSideEffects) {
	  function deleteChild(returnFiber, childToDelete) {
	    if (!shouldTrackSideEffects) {
	      // Noop.
	      return;
	    }

	    var deletions = returnFiber.deletions;

	    if (deletions === null) {
	      returnFiber.deletions = [childToDelete];
	      returnFiber.flags |= ChildDeletion;
	    } else {
	      deletions.push(childToDelete);
	    }
	  }

	  function deleteRemainingChildren(returnFiber, currentFirstChild) {
	    if (!shouldTrackSideEffects) {
	      // Noop.
	      return null;
	    } // TODO: For the shouldClone case, this could be micro-optimized a bit by
	    // assuming that after the first child we've already added everything.


	    var childToDelete = currentFirstChild;

	    while (childToDelete !== null) {
	      deleteChild(returnFiber, childToDelete);
	      childToDelete = childToDelete.sibling;
	    }

	    return null;
	  }

	  function mapRemainingChildren(returnFiber, currentFirstChild) {
	    // Add the remaining children to a temporary map so that we can find them by
	    // keys quickly. Implicit (null) keys get added to this set with their index
	    // instead.
	    var existingChildren = new Map();
	    var existingChild = currentFirstChild;

	    while (existingChild !== null) {
	      if (existingChild.key !== null) {
	        existingChildren.set(existingChild.key, existingChild);
	      } else {
	        existingChildren.set(existingChild.index, existingChild);
	      }

	      existingChild = existingChild.sibling;
	    }

	    return existingChildren;
	  }

	  function useFiber(fiber, pendingProps) {
	    // We currently set sibling to null and index to 0 here because it is easy
	    // to forget to do before returning it. E.g. for the single child case.
	    var clone = createWorkInProgress(fiber, pendingProps);
	    clone.index = 0;
	    clone.sibling = null;
	    return clone;
	  }

	  function placeChild(newFiber, lastPlacedIndex, newIndex) {
	    newFiber.index = newIndex;

	    if (!shouldTrackSideEffects) {
	      // During hydration, the useId algorithm needs to know which fibers are
	      // part of a list of children (arrays, iterators).
	      newFiber.flags |= Forked;
	      return lastPlacedIndex;
	    }

	    var current = newFiber.alternate;

	    if (current !== null) {
	      var oldIndex = current.index;

	      if (oldIndex < lastPlacedIndex) {
	        // This is a move.
	        newFiber.flags |= Placement;
	        return lastPlacedIndex;
	      } else {
	        // This item can stay in place.
	        return oldIndex;
	      }
	    } else {
	      // This is an insertion.
	      newFiber.flags |= Placement;
	      return lastPlacedIndex;
	    }
	  }

	  function placeSingleChild(newFiber) {
	    // This is simpler for the single child case. We only need to do a
	    // placement for inserting new children.
	    if (shouldTrackSideEffects && newFiber.alternate === null) {
	      newFiber.flags |= Placement;
	    }

	    return newFiber;
	  }

	  function updateTextNode(returnFiber, current, textContent, lanes) {
	    if (current === null || current.tag !== HostText) {
	      // Insert
	      var created = createFiberFromText(textContent, returnFiber.mode, lanes);
	      created.return = returnFiber;
	      return created;
	    } else {
	      // Update
	      var existing = useFiber(current, textContent);
	      existing.return = returnFiber;
	      return existing;
	    }
	  }

	  function updateElement(returnFiber, current, element, lanes) {
	    var elementType = element.type;

	    if (elementType === REACT_FRAGMENT_TYPE) {
	      return updateFragment(returnFiber, current, element.props.children, lanes, element.key);
	    }

	    if (current !== null) {
	      if (current.elementType === elementType || ( // Keep this check inline so it only runs on the false path:
	       isCompatibleFamilyForHotReloading(current, element) ) || // Lazy types should reconcile their resolved type.
	      // We need to do this after the Hot Reloading check above,
	      // because hot reloading has different semantics than prod because
	      // it doesn't resuspend. So we can't let the call below suspend.
	      typeof elementType === 'object' && elementType !== null && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === current.type) {
	        // Move based on index
	        var existing = useFiber(current, element.props);
	        existing.ref = coerceRef(returnFiber, current, element);
	        existing.return = returnFiber;

	        {
	          existing._debugSource = element._source;
	          existing._debugOwner = element._owner;
	        }

	        return existing;
	      }
	    } // Insert


	    var created = createFiberFromElement(element, returnFiber.mode, lanes);
	    created.ref = coerceRef(returnFiber, current, element);
	    created.return = returnFiber;
	    return created;
	  }

	  function updatePortal(returnFiber, current, portal, lanes) {
	    if (current === null || current.tag !== HostPortal || current.stateNode.containerInfo !== portal.containerInfo || current.stateNode.implementation !== portal.implementation) {
	      // Insert
	      var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
	      created.return = returnFiber;
	      return created;
	    } else {
	      // Update
	      var existing = useFiber(current, portal.children || []);
	      existing.return = returnFiber;
	      return existing;
	    }
	  }

	  function updateFragment(returnFiber, current, fragment, lanes, key) {
	    if (current === null || current.tag !== Fragment) {
	      // Insert
	      var created = createFiberFromFragment(fragment, returnFiber.mode, lanes, key);
	      created.return = returnFiber;
	      return created;
	    } else {
	      // Update
	      var existing = useFiber(current, fragment);
	      existing.return = returnFiber;
	      return existing;
	    }
	  }

	  function createChild(returnFiber, newChild, lanes) {
	    if (typeof newChild === 'string' && newChild !== '' || typeof newChild === 'number') {
	      // Text nodes don't have keys. If the previous node is implicitly keyed
	      // we can continue to replace it without aborting even if it is not a text
	      // node.
	      var created = createFiberFromText('' + newChild, returnFiber.mode, lanes);
	      created.return = returnFiber;
	      return created;
	    }

	    if (typeof newChild === 'object' && newChild !== null) {
	      switch (newChild.$$typeof) {
	        case REACT_ELEMENT_TYPE:
	          {
	            var _created = createFiberFromElement(newChild, returnFiber.mode, lanes);

	            _created.ref = coerceRef(returnFiber, null, newChild);
	            _created.return = returnFiber;
	            return _created;
	          }

	        case REACT_PORTAL_TYPE:
	          {
	            var _created2 = createFiberFromPortal(newChild, returnFiber.mode, lanes);

	            _created2.return = returnFiber;
	            return _created2;
	          }

	        case REACT_LAZY_TYPE:
	          {
	            var payload = newChild._payload;
	            var init = newChild._init;
	            return createChild(returnFiber, init(payload), lanes);
	          }
	      }

	      if (isArray(newChild) || getIteratorFn(newChild)) {
	        var _created3 = createFiberFromFragment(newChild, returnFiber.mode, lanes, null);

	        _created3.return = returnFiber;
	        return _created3;
	      }

	      throwOnInvalidObjectType(returnFiber, newChild);
	    }

	    {
	      if (typeof newChild === 'function') {
	        warnOnFunctionType(returnFiber);
	      }
	    }

	    return null;
	  }

	  function updateSlot(returnFiber, oldFiber, newChild, lanes) {
	    // Update the fiber if the keys match, otherwise return null.
	    var key = oldFiber !== null ? oldFiber.key : null;

	    if (typeof newChild === 'string' && newChild !== '' || typeof newChild === 'number') {
	      // Text nodes don't have keys. If the previous node is implicitly keyed
	      // we can continue to replace it without aborting even if it is not a text
	      // node.
	      if (key !== null) {
	        return null;
	      }

	      return updateTextNode(returnFiber, oldFiber, '' + newChild, lanes);
	    }

	    if (typeof newChild === 'object' && newChild !== null) {
	      switch (newChild.$$typeof) {
	        case REACT_ELEMENT_TYPE:
	          {
	            if (newChild.key === key) {
	              return updateElement(returnFiber, oldFiber, newChild, lanes);
	            } else {
	              return null;
	            }
	          }

	        case REACT_PORTAL_TYPE:
	          {
	            if (newChild.key === key) {
	              return updatePortal(returnFiber, oldFiber, newChild, lanes);
	            } else {
	              return null;
	            }
	          }

	        case REACT_LAZY_TYPE:
	          {
	            var payload = newChild._payload;
	            var init = newChild._init;
	            return updateSlot(returnFiber, oldFiber, init(payload), lanes);
	          }
	      }

	      if (isArray(newChild) || getIteratorFn(newChild)) {
	        if (key !== null) {
	          return null;
	        }

	        return updateFragment(returnFiber, oldFiber, newChild, lanes, null);
	      }

	      throwOnInvalidObjectType(returnFiber, newChild);
	    }

	    {
	      if (typeof newChild === 'function') {
	        warnOnFunctionType(returnFiber);
	      }
	    }

	    return null;
	  }

	  function updateFromMap(existingChildren, returnFiber, newIdx, newChild, lanes) {
	    if (typeof newChild === 'string' && newChild !== '' || typeof newChild === 'number') {
	      // Text nodes don't have keys, so we neither have to check the old nor
	      // new node for the key. If both are text nodes, they match.
	      var matchedFiber = existingChildren.get(newIdx) || null;
	      return updateTextNode(returnFiber, matchedFiber, '' + newChild, lanes);
	    }

	    if (typeof newChild === 'object' && newChild !== null) {
	      switch (newChild.$$typeof) {
	        case REACT_ELEMENT_TYPE:
	          {
	            var _matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;

	            return updateElement(returnFiber, _matchedFiber, newChild, lanes);
	          }

	        case REACT_PORTAL_TYPE:
	          {
	            var _matchedFiber2 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;

	            return updatePortal(returnFiber, _matchedFiber2, newChild, lanes);
	          }

	        case REACT_LAZY_TYPE:
	          var payload = newChild._payload;
	          var init = newChild._init;
	          return updateFromMap(existingChildren, returnFiber, newIdx, init(payload), lanes);
	      }

	      if (isArray(newChild) || getIteratorFn(newChild)) {
	        var _matchedFiber3 = existingChildren.get(newIdx) || null;

	        return updateFragment(returnFiber, _matchedFiber3, newChild, lanes, null);
	      }

	      throwOnInvalidObjectType(returnFiber, newChild);
	    }

	    {
	      if (typeof newChild === 'function') {
	        warnOnFunctionType(returnFiber);
	      }
	    }

	    return null;
	  }
	  /**
	   * Warns if there is a duplicate or missing key
	   */


	  function warnOnInvalidKey(child, knownKeys, returnFiber) {
	    {
	      if (typeof child !== 'object' || child === null) {
	        return knownKeys;
	      }

	      switch (child.$$typeof) {
	        case REACT_ELEMENT_TYPE:
	        case REACT_PORTAL_TYPE:
	          warnForMissingKey(child, returnFiber);
	          var key = child.key;

	          if (typeof key !== 'string') {
	            break;
	          }

	          if (knownKeys === null) {
	            knownKeys = new Set();
	            knownKeys.add(key);
	            break;
	          }

	          if (!knownKeys.has(key)) {
	            knownKeys.add(key);
	            break;
	          }

	          error('Encountered two children with the same key, `%s`. ' + 'Keys should be unique so that components maintain their identity ' + 'across updates. Non-unique keys may cause children to be ' + 'duplicated and/or omitted — the behavior is unsupported and ' + 'could change in a future version.', key);

	          break;

	        case REACT_LAZY_TYPE:
	          var payload = child._payload;
	          var init = child._init;
	          warnOnInvalidKey(init(payload), knownKeys, returnFiber);
	          break;
	      }
	    }

	    return knownKeys;
	  }

	  function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, lanes) {
	    // This algorithm can't optimize by searching from both ends since we
	    // don't have backpointers on fibers. I'm trying to see how far we can get
	    // with that model. If it ends up not being worth the tradeoffs, we can
	    // add it later.
	    // Even with a two ended optimization, we'd want to optimize for the case
	    // where there are few changes and brute force the comparison instead of
	    // going for the Map. It'd like to explore hitting that path first in
	    // forward-only mode and only go for the Map once we notice that we need
	    // lots of look ahead. This doesn't handle reversal as well as two ended
	    // search but that's unusual. Besides, for the two ended optimization to
	    // work on Iterables, we'd need to copy the whole set.
	    // In this first iteration, we'll just live with hitting the bad case
	    // (adding everything to a Map) in for every insert/move.
	    // If you change this code, also update reconcileChildrenIterator() which
	    // uses the same algorithm.
	    {
	      // First, validate keys.
	      var knownKeys = null;

	      for (var i = 0; i < newChildren.length; i++) {
	        var child = newChildren[i];
	        knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
	      }
	    }

	    var resultingFirstChild = null;
	    var previousNewFiber = null;
	    var oldFiber = currentFirstChild;
	    var lastPlacedIndex = 0;
	    var newIdx = 0;
	    var nextOldFiber = null;

	    for (; oldFiber !== null && newIdx < newChildren.length; newIdx++) {
	      if (oldFiber.index > newIdx) {
	        nextOldFiber = oldFiber;
	        oldFiber = null;
	      } else {
	        nextOldFiber = oldFiber.sibling;
	      }

	      var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], lanes);

	      if (newFiber === null) {
	        // TODO: This breaks on empty slots like null children. That's
	        // unfortunate because it triggers the slow path all the time. We need
	        // a better way to communicate whether this was a miss or null,
	        // boolean, undefined, etc.
	        if (oldFiber === null) {
	          oldFiber = nextOldFiber;
	        }

	        break;
	      }

	      if (shouldTrackSideEffects) {
	        if (oldFiber && newFiber.alternate === null) {
	          // We matched the slot, but we didn't reuse the existing fiber, so we
	          // need to delete the existing child.
	          deleteChild(returnFiber, oldFiber);
	        }
	      }

	      lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);

	      if (previousNewFiber === null) {
	        // TODO: Move out of the loop. This only happens for the first run.
	        resultingFirstChild = newFiber;
	      } else {
	        // TODO: Defer siblings if we're not at the right index for this slot.
	        // I.e. if we had null values before, then we want to defer this
	        // for each null value. However, we also don't want to call updateSlot
	        // with the previous one.
	        previousNewFiber.sibling = newFiber;
	      }

	      previousNewFiber = newFiber;
	      oldFiber = nextOldFiber;
	    }

	    if (newIdx === newChildren.length) {
	      // We've reached the end of the new children. We can delete the rest.
	      deleteRemainingChildren(returnFiber, oldFiber);

	      if (getIsHydrating()) {
	        var numberOfForks = newIdx;
	        pushTreeFork(returnFiber, numberOfForks);
	      }

	      return resultingFirstChild;
	    }

	    if (oldFiber === null) {
	      // If we don't have any more existing children we can choose a fast path
	      // since the rest will all be insertions.
	      for (; newIdx < newChildren.length; newIdx++) {
	        var _newFiber = createChild(returnFiber, newChildren[newIdx], lanes);

	        if (_newFiber === null) {
	          continue;
	        }

	        lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx);

	        if (previousNewFiber === null) {
	          // TODO: Move out of the loop. This only happens for the first run.
	          resultingFirstChild = _newFiber;
	        } else {
	          previousNewFiber.sibling = _newFiber;
	        }

	        previousNewFiber = _newFiber;
	      }

	      if (getIsHydrating()) {
	        var _numberOfForks = newIdx;
	        pushTreeFork(returnFiber, _numberOfForks);
	      }

	      return resultingFirstChild;
	    } // Add all children to a key map for quick lookups.


	    var existingChildren = mapRemainingChildren(returnFiber, oldFiber); // Keep scanning and use the map to restore deleted items as moves.

	    for (; newIdx < newChildren.length; newIdx++) {
	      var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], lanes);

	      if (_newFiber2 !== null) {
	        if (shouldTrackSideEffects) {
	          if (_newFiber2.alternate !== null) {
	            // The new fiber is a work in progress, but if there exists a
	            // current, that means that we reused the fiber. We need to delete
	            // it from the child list so that we don't add it to the deletion
	            // list.
	            existingChildren.delete(_newFiber2.key === null ? newIdx : _newFiber2.key);
	          }
	        }

	        lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx);

	        if (previousNewFiber === null) {
	          resultingFirstChild = _newFiber2;
	        } else {
	          previousNewFiber.sibling = _newFiber2;
	        }

	        previousNewFiber = _newFiber2;
	      }
	    }

	    if (shouldTrackSideEffects) {
	      // Any existing children that weren't consumed above were deleted. We need
	      // to add them to the deletion list.
	      existingChildren.forEach(function (child) {
	        return deleteChild(returnFiber, child);
	      });
	    }

	    if (getIsHydrating()) {
	      var _numberOfForks2 = newIdx;
	      pushTreeFork(returnFiber, _numberOfForks2);
	    }

	    return resultingFirstChild;
	  }

	  function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, lanes) {
	    // This is the same implementation as reconcileChildrenArray(),
	    // but using the iterator instead.
	    var iteratorFn = getIteratorFn(newChildrenIterable);

	    if (typeof iteratorFn !== 'function') {
	      throw new Error('An object is not an iterable. This error is likely caused by a bug in ' + 'React. Please file an issue.');
	    }

	    {
	      // We don't support rendering Generators because it's a mutation.
	      // See https://github.com/facebook/react/issues/12995
	      if (typeof Symbol === 'function' && // $FlowFixMe Flow doesn't know about toStringTag
	      newChildrenIterable[Symbol.toStringTag] === 'Generator') {
	        if (!didWarnAboutGenerators) {
	          error('Using Generators as children is unsupported and will likely yield ' + 'unexpected results because enumerating a generator mutates it. ' + 'You may convert it to an array with `Array.from()` or the ' + '`[...spread]` operator before rendering. Keep in mind ' + 'you might need to polyfill these features for older browsers.');
	        }

	        didWarnAboutGenerators = true;
	      } // Warn about using Maps as children


	      if (newChildrenIterable.entries === iteratorFn) {
	        if (!didWarnAboutMaps) {
	          error('Using Maps as children is not supported. ' + 'Use an array of keyed ReactElements instead.');
	        }

	        didWarnAboutMaps = true;
	      } // First, validate keys.
	      // We'll get a different iterator later for the main pass.


	      var _newChildren = iteratorFn.call(newChildrenIterable);

	      if (_newChildren) {
	        var knownKeys = null;

	        var _step = _newChildren.next();

	        for (; !_step.done; _step = _newChildren.next()) {
	          var child = _step.value;
	          knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
	        }
	      }
	    }

	    var newChildren = iteratorFn.call(newChildrenIterable);

	    if (newChildren == null) {
	      throw new Error('An iterable object provided no iterator.');
	    }

	    var resultingFirstChild = null;
	    var previousNewFiber = null;
	    var oldFiber = currentFirstChild;
	    var lastPlacedIndex = 0;
	    var newIdx = 0;
	    var nextOldFiber = null;
	    var step = newChildren.next();

	    for (; oldFiber !== null && !step.done; newIdx++, step = newChildren.next()) {
	      if (oldFiber.index > newIdx) {
	        nextOldFiber = oldFiber;
	        oldFiber = null;
	      } else {
	        nextOldFiber = oldFiber.sibling;
	      }

	      var newFiber = updateSlot(returnFiber, oldFiber, step.value, lanes);

	      if (newFiber === null) {
	        // TODO: This breaks on empty slots like null children. That's
	        // unfortunate because it triggers the slow path all the time. We need
	        // a better way to communicate whether this was a miss or null,
	        // boolean, undefined, etc.
	        if (oldFiber === null) {
	          oldFiber = nextOldFiber;
	        }

	        break;
	      }

	      if (shouldTrackSideEffects) {
	        if (oldFiber && newFiber.alternate === null) {
	          // We matched the slot, but we didn't reuse the existing fiber, so we
	          // need to delete the existing child.
	          deleteChild(returnFiber, oldFiber);
	        }
	      }

	      lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);

	      if (previousNewFiber === null) {
	        // TODO: Move out of the loop. This only happens for the first run.
	        resultingFirstChild = newFiber;
	      } else {
	        // TODO: Defer siblings if we're not at the right index for this slot.
	        // I.e. if we had null values before, then we want to defer this
	        // for each null value. However, we also don't want to call updateSlot
	        // with the previous one.
	        previousNewFiber.sibling = newFiber;
	      }

	      previousNewFiber = newFiber;
	      oldFiber = nextOldFiber;
	    }

	    if (step.done) {
	      // We've reached the end of the new children. We can delete the rest.
	      deleteRemainingChildren(returnFiber, oldFiber);

	      if (getIsHydrating()) {
	        var numberOfForks = newIdx;
	        pushTreeFork(returnFiber, numberOfForks);
	      }

	      return resultingFirstChild;
	    }

	    if (oldFiber === null) {
	      // If we don't have any more existing children we can choose a fast path
	      // since the rest will all be insertions.
	      for (; !step.done; newIdx++, step = newChildren.next()) {
	        var _newFiber3 = createChild(returnFiber, step.value, lanes);

	        if (_newFiber3 === null) {
	          continue;
	        }

	        lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx);

	        if (previousNewFiber === null) {
	          // TODO: Move out of the loop. This only happens for the first run.
	          resultingFirstChild = _newFiber3;
	        } else {
	          previousNewFiber.sibling = _newFiber3;
	        }

	        previousNewFiber = _newFiber3;
	      }

	      if (getIsHydrating()) {
	        var _numberOfForks3 = newIdx;
	        pushTreeFork(returnFiber, _numberOfForks3);
	      }

	      return resultingFirstChild;
	    } // Add all children to a key map for quick lookups.


	    var existingChildren = mapRemainingChildren(returnFiber, oldFiber); // Keep scanning and use the map to restore deleted items as moves.

	    for (; !step.done; newIdx++, step = newChildren.next()) {
	      var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step.value, lanes);

	      if (_newFiber4 !== null) {
	        if (shouldTrackSideEffects) {
	          if (_newFiber4.alternate !== null) {
	            // The new fiber is a work in progress, but if there exists a
	            // current, that means that we reused the fiber. We need to delete
	            // it from the child list so that we don't add it to the deletion
	            // list.
	            existingChildren.delete(_newFiber4.key === null ? newIdx : _newFiber4.key);
	          }
	        }

	        lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx);

	        if (previousNewFiber === null) {
	          resultingFirstChild = _newFiber4;
	        } else {
	          previousNewFiber.sibling = _newFiber4;
	        }

	        previousNewFiber = _newFiber4;
	      }
	    }

	    if (shouldTrackSideEffects) {
	      // Any existing children that weren't consumed above were deleted. We need
	      // to add them to the deletion list.
	      existingChildren.forEach(function (child) {
	        return deleteChild(returnFiber, child);
	      });
	    }

	    if (getIsHydrating()) {
	      var _numberOfForks4 = newIdx;
	      pushTreeFork(returnFiber, _numberOfForks4);
	    }

	    return resultingFirstChild;
	  }

	  function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, lanes) {
	    // There's no need to check for keys on text nodes since we don't have a
	    // way to define them.
	    if (currentFirstChild !== null && currentFirstChild.tag === HostText) {
	      // We already have an existing node so let's just update it and delete
	      // the rest.
	      deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
	      var existing = useFiber(currentFirstChild, textContent);
	      existing.return = returnFiber;
	      return existing;
	    } // The existing first child is not a text node so we need to create one
	    // and delete the existing ones.


	    deleteRemainingChildren(returnFiber, currentFirstChild);
	    var created = createFiberFromText(textContent, returnFiber.mode, lanes);
	    created.return = returnFiber;
	    return created;
	  }

	  function reconcileSingleElement(returnFiber, currentFirstChild, element, lanes) {
	    var key = element.key;
	    var child = currentFirstChild;

	    while (child !== null) {
	      // TODO: If key === null and child.key === null, then this only applies to
	      // the first item in the list.
	      if (child.key === key) {
	        var elementType = element.type;

	        if (elementType === REACT_FRAGMENT_TYPE) {
	          if (child.tag === Fragment) {
	            deleteRemainingChildren(returnFiber, child.sibling);
	            var existing = useFiber(child, element.props.children);
	            existing.return = returnFiber;

	            {
	              existing._debugSource = element._source;
	              existing._debugOwner = element._owner;
	            }

	            return existing;
	          }
	        } else {
	          if (child.elementType === elementType || ( // Keep this check inline so it only runs on the false path:
	           isCompatibleFamilyForHotReloading(child, element) ) || // Lazy types should reconcile their resolved type.
	          // We need to do this after the Hot Reloading check above,
	          // because hot reloading has different semantics than prod because
	          // it doesn't resuspend. So we can't let the call below suspend.
	          typeof elementType === 'object' && elementType !== null && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === child.type) {
	            deleteRemainingChildren(returnFiber, child.sibling);

	            var _existing = useFiber(child, element.props);

	            _existing.ref = coerceRef(returnFiber, child, element);
	            _existing.return = returnFiber;

	            {
	              _existing._debugSource = element._source;
	              _existing._debugOwner = element._owner;
	            }

	            return _existing;
	          }
	        } // Didn't match.


	        deleteRemainingChildren(returnFiber, child);
	        break;
	      } else {
	        deleteChild(returnFiber, child);
	      }

	      child = child.sibling;
	    }

	    if (element.type === REACT_FRAGMENT_TYPE) {
	      var created = createFiberFromFragment(element.props.children, returnFiber.mode, lanes, element.key);
	      created.return = returnFiber;
	      return created;
	    } else {
	      var _created4 = createFiberFromElement(element, returnFiber.mode, lanes);

	      _created4.ref = coerceRef(returnFiber, currentFirstChild, element);
	      _created4.return = returnFiber;
	      return _created4;
	    }
	  }

	  function reconcileSinglePortal(returnFiber, currentFirstChild, portal, lanes) {
	    var key = portal.key;
	    var child = currentFirstChild;

	    while (child !== null) {
	      // TODO: If key === null and child.key === null, then this only applies to
	      // the first item in the list.
	      if (child.key === key) {
	        if (child.tag === HostPortal && child.stateNode.containerInfo === portal.containerInfo && child.stateNode.implementation === portal.implementation) {
	          deleteRemainingChildren(returnFiber, child.sibling);
	          var existing = useFiber(child, portal.children || []);
	          existing.return = returnFiber;
	          return existing;
	        } else {
	          deleteRemainingChildren(returnFiber, child);
	          break;
	        }
	      } else {
	        deleteChild(returnFiber, child);
	      }

	      child = child.sibling;
	    }

	    var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
	    created.return = returnFiber;
	    return created;
	  } // This API will tag the children with the side-effect of the reconciliation
	  // itself. They will be added to the side-effect list as we pass through the
	  // children and the parent.


	  function reconcileChildFibers(returnFiber, currentFirstChild, newChild, lanes) {
	    // This function is not recursive.
	    // If the top level item is an array, we treat it as a set of children,
	    // not as a fragment. Nested arrays on the other hand will be treated as
	    // fragment nodes. Recursion happens at the normal flow.
	    // Handle top level unkeyed fragments as if they were arrays.
	    // This leads to an ambiguity between <>{[...]}</> and <>...</>.
	    // We treat the ambiguous cases above the same.
	    var isUnkeyedTopLevelFragment = typeof newChild === 'object' && newChild !== null && newChild.type === REACT_FRAGMENT_TYPE && newChild.key === null;

	    if (isUnkeyedTopLevelFragment) {
	      newChild = newChild.props.children;
	    } // Handle object types


	    if (typeof newChild === 'object' && newChild !== null) {
	      switch (newChild.$$typeof) {
	        case REACT_ELEMENT_TYPE:
	          return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, lanes));

	        case REACT_PORTAL_TYPE:
	          return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, lanes));

	        case REACT_LAZY_TYPE:
	          var payload = newChild._payload;
	          var init = newChild._init; // TODO: This function is supposed to be non-recursive.

	          return reconcileChildFibers(returnFiber, currentFirstChild, init(payload), lanes);
	      }

	      if (isArray(newChild)) {
	        return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, lanes);
	      }

	      if (getIteratorFn(newChild)) {
	        return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, lanes);
	      }

	      throwOnInvalidObjectType(returnFiber, newChild);
	    }

	    if (typeof newChild === 'string' && newChild !== '' || typeof newChild === 'number') {
	      return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, '' + newChild, lanes));
	    }

	    {
	      if (typeof newChild === 'function') {
	        warnOnFunctionType(returnFiber);
	      }
	    } // Remaining cases are all treated as empty.


	    return deleteRemainingChildren(returnFiber, currentFirstChild);
	  }

	  return reconcileChildFibers;
	}

	var reconcileChildFibers = ChildReconciler(true);
	var mountChildFibers = ChildReconciler(false);
	function cloneChildFibers(current, workInProgress) {
	  if (current !== null && workInProgress.child !== current.child) {
	    throw new Error('Resuming work not yet implemented.');
	  }

	  if (workInProgress.child === null) {
	    return;
	  }

	  var currentChild = workInProgress.child;
	  var newChild = createWorkInProgress(currentChild, currentChild.pendingProps);
	  workInProgress.child = newChild;
	  newChild.return = workInProgress;

	  while (currentChild.sibling !== null) {
	    currentChild = currentChild.sibling;
	    newChild = newChild.sibling = createWorkInProgress(currentChild, currentChild.pendingProps);
	    newChild.return = workInProgress;
	  }

	  newChild.sibling = null;
	} // Reset a workInProgress child set to prepare it for a second pass.

	function resetChildFibers(workInProgress, lanes) {
	  var child = workInProgress.child;

	  while (child !== null) {
	    resetWorkInProgress(child, lanes);
	    child = child.sibling;
	  }
	}

	var valueCursor = createCursor(null);
	var rendererSigil;

	{
	  // Use this to detect multiple renderers using the same context
	  rendererSigil = {};
	}

	var currentlyRenderingFiber = null;
	var lastContextDependency = null;
	var lastFullyObservedContext = null;
	var isDisallowedContextReadInDEV = false;
	function resetContextDependencies() {
	  // This is called right before React yields execution, to ensure `readContext`
	  // cannot be called outside the render phase.
	  currentlyRenderingFiber = null;
	  lastContextDependency = null;
	  lastFullyObservedContext = null;

	  {
	    isDisallowedContextReadInDEV = false;
	  }
	}
	function enterDisallowedContextReadInDEV() {
	  {
	    isDisallowedContextReadInDEV = true;
	  }
	}
	function exitDisallowedContextReadInDEV() {
	  {
	    isDisallowedContextReadInDEV = false;
	  }
	}
	function pushProvider(providerFiber, context, nextValue) {
	  {
	    push(valueCursor, context._currentValue, providerFiber);
	    context._currentValue = nextValue;

	    {
	      if (context._currentRenderer !== undefined && context._currentRenderer !== null && context._currentRenderer !== rendererSigil) {
	        error('Detected multiple renderers concurrently rendering the ' + 'same context provider. This is currently unsupported.');
	      }

	      context._currentRenderer = rendererSigil;
	    }
	  }
	}
	function popProvider(context, providerFiber) {
	  var currentValue = valueCursor.current;
	  pop(valueCursor, providerFiber);

	  {
	    {
	      context._currentValue = currentValue;
	    }
	  }
	}
	function scheduleContextWorkOnParentPath(parent, renderLanes, propagationRoot) {
	  // Update the child lanes of all the ancestors, including the alternates.
	  var node = parent;

	  while (node !== null) {
	    var alternate = node.alternate;

	    if (!isSubsetOfLanes(node.childLanes, renderLanes)) {
	      node.childLanes = mergeLanes(node.childLanes, renderLanes);

	      if (alternate !== null) {
	        alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes);
	      }
	    } else if (alternate !== null && !isSubsetOfLanes(alternate.childLanes, renderLanes)) {
	      alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes);
	    }

	    if (node === propagationRoot) {
	      break;
	    }

	    node = node.return;
	  }

	  {
	    if (node !== propagationRoot) {
	      error('Expected to find the propagation root when scheduling context work. ' + 'This error is likely caused by a bug in React. Please file an issue.');
	    }
	  }
	}
	function propagateContextChange(workInProgress, context, renderLanes) {
	  {
	    propagateContextChange_eager(workInProgress, context, renderLanes);
	  }
	}

	function propagateContextChange_eager(workInProgress, context, renderLanes) {

	  var fiber = workInProgress.child;

	  if (fiber !== null) {
	    // Set the return pointer of the child to the work-in-progress fiber.
	    fiber.return = workInProgress;
	  }

	  while (fiber !== null) {
	    var nextFiber = void 0; // Visit this fiber.

	    var list = fiber.dependencies;

	    if (list !== null) {
	      nextFiber = fiber.child;
	      var dependency = list.firstContext;

	      while (dependency !== null) {
	        // Check if the context matches.
	        if (dependency.context === context) {
	          // Match! Schedule an update on this fiber.
	          if (fiber.tag === ClassComponent) {
	            // Schedule a force update on the work-in-progress.
	            var lane = pickArbitraryLane(renderLanes);
	            var update = createUpdate(NoTimestamp, lane);
	            update.tag = ForceUpdate; // TODO: Because we don't have a work-in-progress, this will add the
	            // update to the current fiber, too, which means it will persist even if
	            // this render is thrown away. Since it's a race condition, not sure it's
	            // worth fixing.
	            // Inlined `enqueueUpdate` to remove interleaved update check

	            var updateQueue = fiber.updateQueue;

	            if (updateQueue === null) ; else {
	              var sharedQueue = updateQueue.shared;
	              var pending = sharedQueue.pending;

	              if (pending === null) {
	                // This is the first update. Create a circular list.
	                update.next = update;
	              } else {
	                update.next = pending.next;
	                pending.next = update;
	              }

	              sharedQueue.pending = update;
	            }
	          }

	          fiber.lanes = mergeLanes(fiber.lanes, renderLanes);
	          var alternate = fiber.alternate;

	          if (alternate !== null) {
	            alternate.lanes = mergeLanes(alternate.lanes, renderLanes);
	          }

	          scheduleContextWorkOnParentPath(fiber.return, renderLanes, workInProgress); // Mark the updated lanes on the list, too.

	          list.lanes = mergeLanes(list.lanes, renderLanes); // Since we already found a match, we can stop traversing the
	          // dependency list.

	          break;
	        }

	        dependency = dependency.next;
	      }
	    } else if (fiber.tag === ContextProvider) {
	      // Don't scan deeper if this is a matching provider
	      nextFiber = fiber.type === workInProgress.type ? null : fiber.child;
	    } else if (fiber.tag === DehydratedFragment) {
	      // If a dehydrated suspense boundary is in this subtree, we don't know
	      // if it will have any context consumers in it. The best we can do is
	      // mark it as having updates.
	      var parentSuspense = fiber.return;

	      if (parentSuspense === null) {
	        throw new Error('We just came from a parent so we must have had a parent. This is a bug in React.');
	      }

	      parentSuspense.lanes = mergeLanes(parentSuspense.lanes, renderLanes);
	      var _alternate = parentSuspense.alternate;

	      if (_alternate !== null) {
	        _alternate.lanes = mergeLanes(_alternate.lanes, renderLanes);
	      } // This is intentionally passing this fiber as the parent
	      // because we want to schedule this fiber as having work
	      // on its children. We'll use the childLanes on
	      // this fiber to indicate that a context has changed.


	      scheduleContextWorkOnParentPath(parentSuspense, renderLanes, workInProgress);
	      nextFiber = fiber.sibling;
	    } else {
	      // Traverse down.
	      nextFiber = fiber.child;
	    }

	    if (nextFiber !== null) {
	      // Set the return pointer of the child to the work-in-progress fiber.
	      nextFiber.return = fiber;
	    } else {
	      // No child. Traverse to next sibling.
	      nextFiber = fiber;

	      while (nextFiber !== null) {
	        if (nextFiber === workInProgress) {
	          // We're back to the root of this subtree. Exit.
	          nextFiber = null;
	          break;
	        }

	        var sibling = nextFiber.sibling;

	        if (sibling !== null) {
	          // Set the return pointer of the sibling to the work-in-progress fiber.
	          sibling.return = nextFiber.return;
	          nextFiber = sibling;
	          break;
	        } // No more siblings. Traverse up.


	        nextFiber = nextFiber.return;
	      }
	    }

	    fiber = nextFiber;
	  }
	}
	function prepareToReadContext(workInProgress, renderLanes) {
	  currentlyRenderingFiber = workInProgress;
	  lastContextDependency = null;
	  lastFullyObservedContext = null;
	  var dependencies = workInProgress.dependencies;

	  if (dependencies !== null) {
	    {
	      var firstContext = dependencies.firstContext;

	      if (firstContext !== null) {
	        if (includesSomeLane(dependencies.lanes, renderLanes)) {
	          // Context list has a pending update. Mark that this fiber performed work.
	          markWorkInProgressReceivedUpdate();
	        } // Reset the work-in-progress list


	        dependencies.firstContext = null;
	      }
	    }
	  }
	}
	function readContext(context) {
	  {
	    // This warning would fire if you read context inside a Hook like useMemo.
	    // Unlike the class check below, it's not enforced in production for perf.
	    if (isDisallowedContextReadInDEV) {
	      error('Context can only be read while React is rendering. ' + 'In classes, you can read it in the render method or getDerivedStateFromProps. ' + 'In function components, you can read it directly in the function body, but not ' + 'inside Hooks like useReducer() or useMemo().');
	    }
	  }

	  var value =  context._currentValue ;

	  if (lastFullyObservedContext === context) ; else {
	    var contextItem = {
	      context: context,
	      memoizedValue: value,
	      next: null
	    };

	    if (lastContextDependency === null) {
	      if (currentlyRenderingFiber === null) {
	        throw new Error('Context can only be read while React is rendering. ' + 'In classes, you can read it in the render method or getDerivedStateFromProps. ' + 'In function components, you can read it directly in the function body, but not ' + 'inside Hooks like useReducer() or useMemo().');
	      } // This is the first dependency for this component. Create a new list.


	      lastContextDependency = contextItem;
	      currentlyRenderingFiber.dependencies = {
	        lanes: NoLanes,
	        firstContext: contextItem
	      };
	    } else {
	      // Append a new context item.
	      lastContextDependency = lastContextDependency.next = contextItem;
	    }
	  }

	  return value;
	}

	// render. When this render exits, either because it finishes or because it is
	// interrupted, the interleaved updates will be transferred onto the main part
	// of the queue.

	var concurrentQueues = null;
	function pushConcurrentUpdateQueue(queue) {
	  if (concurrentQueues === null) {
	    concurrentQueues = [queue];
	  } else {
	    concurrentQueues.push(queue);
	  }
	}
	function finishQueueingConcurrentUpdates() {
	  // Transfer the interleaved updates onto the main queue. Each queue has a
	  // `pending` field and an `interleaved` field. When they are not null, they
	  // point to the last node in a circular linked list. We need to append the
	  // interleaved list to the end of the pending list by joining them into a
	  // single, circular list.
	  if (concurrentQueues !== null) {
	    for (var i = 0; i < concurrentQueues.length; i++) {
	      var queue = concurrentQueues[i];
	      var lastInterleavedUpdate = queue.interleaved;

	      if (lastInterleavedUpdate !== null) {
	        queue.interleaved = null;
	        var firstInterleavedUpdate = lastInterleavedUpdate.next;
	        var lastPendingUpdate = queue.pending;

	        if (lastPendingUpdate !== null) {
	          var firstPendingUpdate = lastPendingUpdate.next;
	          lastPendingUpdate.next = firstInterleavedUpdate;
	          lastInterleavedUpdate.next = firstPendingUpdate;
	        }

	        queue.pending = lastInterleavedUpdate;
	      }
	    }

	    concurrentQueues = null;
	  }
	}
	function enqueueConcurrentHookUpdate(fiber, queue, update, lane) {
	  var interleaved = queue.interleaved;

	  if (interleaved === null) {
	    // This is the first update. Create a circular list.
	    update.next = update; // At the end of the current render, this queue's interleaved updates will
	    // be transferred to the pending queue.

	    pushConcurrentUpdateQueue(queue);
	  } else {
	    update.next = interleaved.next;
	    interleaved.next = update;
	  }

	  queue.interleaved = update;
	  return markUpdateLaneFromFiberToRoot(fiber, lane);
	}
	function enqueueConcurrentHookUpdateAndEagerlyBailout(fiber, queue, update, lane) {
	  var interleaved = queue.interleaved;

	  if (interleaved === null) {
	    // This is the first update. Create a circular list.
	    update.next = update; // At the end of the current render, this queue's interleaved updates will
	    // be transferred to the pending queue.

	    pushConcurrentUpdateQueue(queue);
	  } else {
	    update.next = interleaved.next;
	    interleaved.next = update;
	  }

	  queue.interleaved = update;
	}
	function enqueueConcurrentClassUpdate(fiber, queue, update, lane) {
	  var interleaved = queue.interleaved;

	  if (interleaved === null) {
	    // This is the first update. Create a circular list.
	    update.next = update; // At the end of the current render, this queue's interleaved updates will
	    // be transferred to the pending queue.

	    pushConcurrentUpdateQueue(queue);
	  } else {
	    update.next = interleaved.next;
	    interleaved.next = update;
	  }

	  queue.interleaved = update;
	  return markUpdateLaneFromFiberToRoot(fiber, lane);
	}
	function enqueueConcurrentRenderForLane(fiber, lane) {
	  return markUpdateLaneFromFiberToRoot(fiber, lane);
	} // Calling this function outside this module should only be done for backwards
	// compatibility and should always be accompanied by a warning.

	var unsafe_markUpdateLaneFromFiberToRoot = markUpdateLaneFromFiberToRoot;

	function markUpdateLaneFromFiberToRoot(sourceFiber, lane) {
	  // Update the source fiber's lanes
	  sourceFiber.lanes = mergeLanes(sourceFiber.lanes, lane);
	  var alternate = sourceFiber.alternate;

	  if (alternate !== null) {
	    alternate.lanes = mergeLanes(alternate.lanes, lane);
	  }

	  {
	    if (alternate === null && (sourceFiber.flags & (Placement | Hydrating)) !== NoFlags) {
	      warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
	    }
	  } // Walk the parent path to the root and update the child lanes.


	  var node = sourceFiber;
	  var parent = sourceFiber.return;

	  while (parent !== null) {
	    parent.childLanes = mergeLanes(parent.childLanes, lane);
	    alternate = parent.alternate;

	    if (alternate !== null) {
	      alternate.childLanes = mergeLanes(alternate.childLanes, lane);
	    } else {
	      {
	        if ((parent.flags & (Placement | Hydrating)) !== NoFlags) {
	          warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
	        }
	      }
	    }

	    node = parent;
	    parent = parent.return;
	  }

	  if (node.tag === HostRoot) {
	    var root = node.stateNode;
	    return root;
	  } else {
	    return null;
	  }
	}

	var UpdateState = 0;
	var ReplaceState = 1;
	var ForceUpdate = 2;
	var CaptureUpdate = 3; // Global state that is reset at the beginning of calling `processUpdateQueue`.
	// It should only be read right after calling `processUpdateQueue`, via
	// `checkHasForceUpdateAfterProcessing`.

	var hasForceUpdate = false;
	var didWarnUpdateInsideUpdate;
	var currentlyProcessingQueue;

	{
	  didWarnUpdateInsideUpdate = false;
	  currentlyProcessingQueue = null;
	}

	function initializeUpdateQueue(fiber) {
	  var queue = {
	    baseState: fiber.memoizedState,
	    firstBaseUpdate: null,
	    lastBaseUpdate: null,
	    shared: {
	      pending: null,
	      interleaved: null,
	      lanes: NoLanes
	    },
	    effects: null
	  };
	  fiber.updateQueue = queue;
	}
	function cloneUpdateQueue(current, workInProgress) {
	  // Clone the update queue from current. Unless it's already a clone.
	  var queue = workInProgress.updateQueue;
	  var currentQueue = current.updateQueue;

	  if (queue === currentQueue) {
	    var clone = {
	      baseState: currentQueue.baseState,
	      firstBaseUpdate: currentQueue.firstBaseUpdate,
	      lastBaseUpdate: currentQueue.lastBaseUpdate,
	      shared: currentQueue.shared,
	      effects: currentQueue.effects
	    };
	    workInProgress.updateQueue = clone;
	  }
	}
	function createUpdate(eventTime, lane) {
	  var update = {
	    eventTime: eventTime,
	    lane: lane,
	    tag: UpdateState,
	    payload: null,
	    callback: null,
	    next: null
	  };
	  return update;
	}
	function enqueueUpdate(fiber, update, lane) {
	  var updateQueue = fiber.updateQueue;

	  if (updateQueue === null) {
	    // Only occurs if the fiber has been unmounted.
	    return null;
	  }

	  var sharedQueue = updateQueue.shared;

	  {
	    if (currentlyProcessingQueue === sharedQueue && !didWarnUpdateInsideUpdate) {
	      error('An update (setState, replaceState, or forceUpdate) was scheduled ' + 'from inside an update function. Update functions should be pure, ' + 'with zero side-effects. Consider using componentDidUpdate or a ' + 'callback.');

	      didWarnUpdateInsideUpdate = true;
	    }
	  }

	  if (isUnsafeClassRenderPhaseUpdate()) {
	    // This is an unsafe render phase update. Add directly to the update
	    // queue so we can process it immediately during the current render.
	    var pending = sharedQueue.pending;

	    if (pending === null) {
	      // This is the first update. Create a circular list.
	      update.next = update;
	    } else {
	      update.next = pending.next;
	      pending.next = update;
	    }

	    sharedQueue.pending = update; // Update the childLanes even though we're most likely already rendering
	    // this fiber. This is for backwards compatibility in the case where you
	    // update a different component during render phase than the one that is
	    // currently renderings (a pattern that is accompanied by a warning).

	    return unsafe_markUpdateLaneFromFiberToRoot(fiber, lane);
	  } else {
	    return enqueueConcurrentClassUpdate(fiber, sharedQueue, update, lane);
	  }
	}
	function entangleTransitions(root, fiber, lane) {
	  var updateQueue = fiber.updateQueue;

	  if (updateQueue === null) {
	    // Only occurs if the fiber has been unmounted.
	    return;
	  }

	  var sharedQueue = updateQueue.shared;

	  if (isTransitionLane(lane)) {
	    var queueLanes = sharedQueue.lanes; // If any entangled lanes are no longer pending on the root, then they must
	    // have finished. We can remove them from the shared queue, which represents
	    // a superset of the actually pending lanes. In some cases we may entangle
	    // more than we need to, but that's OK. In fact it's worse if we *don't*
	    // entangle when we should.

	    queueLanes = intersectLanes(queueLanes, root.pendingLanes); // Entangle the new transition lane with the other transition lanes.

	    var newQueueLanes = mergeLanes(queueLanes, lane);
	    sharedQueue.lanes = newQueueLanes; // Even if queue.lanes already include lane, we don't know for certain if
	    // the lane finished since the last time we entangled it. So we need to
	    // entangle it again, just to be sure.

	    markRootEntangled(root, newQueueLanes);
	  }
	}
	function enqueueCapturedUpdate(workInProgress, capturedUpdate) {
	  // Captured updates are updates that are thrown by a child during the render
	  // phase. They should be discarded if the render is aborted. Therefore,
	  // we should only put them on the work-in-progress queue, not the current one.
	  var queue = workInProgress.updateQueue; // Check if the work-in-progress queue is a clone.

	  var current = workInProgress.alternate;

	  if (current !== null) {
	    var currentQueue = current.updateQueue;

	    if (queue === currentQueue) {
	      // The work-in-progress queue is the same as current. This happens when
	      // we bail out on a parent fiber that then captures an error thrown by
	      // a child. Since we want to append the update only to the work-in
	      // -progress queue, we need to clone the updates. We usually clone during
	      // processUpdateQueue, but that didn't happen in this case because we
	      // skipped over the parent when we bailed out.
	      var newFirst = null;
	      var newLast = null;
	      var firstBaseUpdate = queue.firstBaseUpdate;

	      if (firstBaseUpdate !== null) {
	        // Loop through the updates and clone them.
	        var update = firstBaseUpdate;

	        do {
	          var clone = {
	            eventTime: update.eventTime,
	            lane: update.lane,
	            tag: update.tag,
	            payload: update.payload,
	            callback: update.callback,
	            next: null
	          };

	          if (newLast === null) {
	            newFirst = newLast = clone;
	          } else {
	            newLast.next = clone;
	            newLast = clone;
	          }

	          update = update.next;
	        } while (update !== null); // Append the captured update the end of the cloned list.


	        if (newLast === null) {
	          newFirst = newLast = capturedUpdate;
	        } else {
	          newLast.next = capturedUpdate;
	          newLast = capturedUpdate;
	        }
	      } else {
	        // There are no base updates.
	        newFirst = newLast = capturedUpdate;
	      }

	      queue = {
	        baseState: currentQueue.baseState,
	        firstBaseUpdate: newFirst,
	        lastBaseUpdate: newLast,
	        shared: currentQueue.shared,
	        effects: currentQueue.effects
	      };
	      workInProgress.updateQueue = queue;
	      return;
	    }
	  } // Append the update to the end of the list.


	  var lastBaseUpdate = queue.lastBaseUpdate;

	  if (lastBaseUpdate === null) {
	    queue.firstBaseUpdate = capturedUpdate;
	  } else {
	    lastBaseUpdate.next = capturedUpdate;
	  }

	  queue.lastBaseUpdate = capturedUpdate;
	}

	function getStateFromUpdate(workInProgress, queue, update, prevState, nextProps, instance) {
	  switch (update.tag) {
	    case ReplaceState:
	      {
	        var payload = update.payload;

	        if (typeof payload === 'function') {
	          // Updater function
	          {
	            enterDisallowedContextReadInDEV();
	          }

	          var nextState = payload.call(instance, prevState, nextProps);

	          {
	            if ( workInProgress.mode & StrictLegacyMode) {
	              setIsStrictModeForDevtools(true);

	              try {
	                payload.call(instance, prevState, nextProps);
	              } finally {
	                setIsStrictModeForDevtools(false);
	              }
	            }

	            exitDisallowedContextReadInDEV();
	          }

	          return nextState;
	        } // State object


	        return payload;
	      }

	    case CaptureUpdate:
	      {
	        workInProgress.flags = workInProgress.flags & ~ShouldCapture | DidCapture;
	      }
	    // Intentional fallthrough

	    case UpdateState:
	      {
	        var _payload = update.payload;
	        var partialState;

	        if (typeof _payload === 'function') {
	          // Updater function
	          {
	            enterDisallowedContextReadInDEV();
	          }

	          partialState = _payload.call(instance, prevState, nextProps);

	          {
	            if ( workInProgress.mode & StrictLegacyMode) {
	              setIsStrictModeForDevtools(true);

	              try {
	                _payload.call(instance, prevState, nextProps);
	              } finally {
	                setIsStrictModeForDevtools(false);
	              }
	            }

	            exitDisallowedContextReadInDEV();
	          }
	        } else {
	          // Partial state object
	          partialState = _payload;
	        }

	        if (partialState === null || partialState === undefined) {
	          // Null and undefined are treated as no-ops.
	          return prevState;
	        } // Merge the partial state and the previous state.


	        return assign({}, prevState, partialState);
	      }

	    case ForceUpdate:
	      {
	        hasForceUpdate = true;
	        return prevState;
	      }
	  }

	  return prevState;
	}

	function processUpdateQueue(workInProgress, props, instance, renderLanes) {
	  // This is always non-null on a ClassComponent or HostRoot
	  var queue = workInProgress.updateQueue;
	  hasForceUpdate = false;

	  {
	    currentlyProcessingQueue = queue.shared;
	  }

	  var firstBaseUpdate = queue.firstBaseUpdate;
	  var lastBaseUpdate = queue.lastBaseUpdate; // Check if there are pending updates. If so, transfer them to the base queue.

	  var pendingQueue = queue.shared.pending;

	  if (pendingQueue !== null) {
	    queue.shared.pending = null; // The pending queue is circular. Disconnect the pointer between first
	    // and last so that it's non-circular.

	    var lastPendingUpdate = pendingQueue;
	    var firstPendingUpdate = lastPendingUpdate.next;
	    lastPendingUpdate.next = null; // Append pending updates to base queue

	    if (lastBaseUpdate === null) {
	      firstBaseUpdate = firstPendingUpdate;
	    } else {
	      lastBaseUpdate.next = firstPendingUpdate;
	    }

	    lastBaseUpdate = lastPendingUpdate; // If there's a current queue, and it's different from the base queue, then
	    // we need to transfer the updates to that queue, too. Because the base
	    // queue is a singly-linked list with no cycles, we can append to both
	    // lists and take advantage of structural sharing.
	    // TODO: Pass `current` as argument

	    var current = workInProgress.alternate;

	    if (current !== null) {
	      // This is always non-null on a ClassComponent or HostRoot
	      var currentQueue = current.updateQueue;
	      var currentLastBaseUpdate = currentQueue.lastBaseUpdate;

	      if (currentLastBaseUpdate !== lastBaseUpdate) {
	        if (currentLastBaseUpdate === null) {
	          currentQueue.firstBaseUpdate = firstPendingUpdate;
	        } else {
	          currentLastBaseUpdate.next = firstPendingUpdate;
	        }

	        currentQueue.lastBaseUpdate = lastPendingUpdate;
	      }
	    }
	  } // These values may change as we process the queue.


	  if (firstBaseUpdate !== null) {
	    // Iterate through the list of updates to compute the result.
	    var newState = queue.baseState; // TODO: Don't need to accumulate this. Instead, we can remove renderLanes
	    // from the original lanes.

	    var newLanes = NoLanes;
	    var newBaseState = null;
	    var newFirstBaseUpdate = null;
	    var newLastBaseUpdate = null;
	    var update = firstBaseUpdate;

	    do {
	      var updateLane = update.lane;
	      var updateEventTime = update.eventTime;

	      if (!isSubsetOfLanes(renderLanes, updateLane)) {
	        // Priority is insufficient. Skip this update. If this is the first
	        // skipped update, the previous update/state is the new base
	        // update/state.
	        var clone = {
	          eventTime: updateEventTime,
	          lane: updateLane,
	          tag: update.tag,
	          payload: update.payload,
	          callback: update.callback,
	          next: null
	        };

	        if (newLastBaseUpdate === null) {
	          newFirstBaseUpdate = newLastBaseUpdate = clone;
	          newBaseState = newState;
	        } else {
	          newLastBaseUpdate = newLastBaseUpdate.next = clone;
	        } // Update the remaining priority in the queue.


	        newLanes = mergeLanes(newLanes, updateLane);
	      } else {
	        // This update does have sufficient priority.
	        if (newLastBaseUpdate !== null) {
	          var _clone = {
	            eventTime: updateEventTime,
	            // This update is going to be committed so we never want uncommit
	            // it. Using NoLane works because 0 is a subset of all bitmasks, so
	            // this will never be skipped by the check above.
	            lane: NoLane,
	            tag: update.tag,
	            payload: update.payload,
	            callback: update.callback,
	            next: null
	          };
	          newLastBaseUpdate = newLastBaseUpdate.next = _clone;
	        } // Process this update.


	        newState = getStateFromUpdate(workInProgress, queue, update, newState, props, instance);
	        var callback = update.callback;

	        if (callback !== null && // If the update was already committed, we should not queue its
	        // callback again.
	        update.lane !== NoLane) {
	          workInProgress.flags |= Callback;
	          var effects = queue.effects;

	          if (effects === null) {
	            queue.effects = [update];
	          } else {
	            effects.push(update);
	          }
	        }
	      }

	      update = update.next;

	      if (update === null) {
	        pendingQueue = queue.shared.pending;

	        if (pendingQueue === null) {
	          break;
	        } else {
	          // An update was scheduled from inside a reducer. Add the new
	          // pending updates to the end of the list and keep processing.
	          var _lastPendingUpdate = pendingQueue; // Intentionally unsound. Pending updates form a circular list, but we
	          // unravel them when transferring them to the base queue.

	          var _firstPendingUpdate = _lastPendingUpdate.next;
	          _lastPendingUpdate.next = null;
	          update = _firstPendingUpdate;
	          queue.lastBaseUpdate = _lastPendingUpdate;
	          queue.shared.pending = null;
	        }
	      }
	    } while (true);

	    if (newLastBaseUpdate === null) {
	      newBaseState = newState;
	    }

	    queue.baseState = newBaseState;
	    queue.firstBaseUpdate = newFirstBaseUpdate;
	    queue.lastBaseUpdate = newLastBaseUpdate; // Interleaved updates are stored on a separate queue. We aren't going to
	    // process them during this render, but we do need to track which lanes
	    // are remaining.

	    var lastInterleaved = queue.shared.interleaved;

	    if (lastInterleaved !== null) {
	      var interleaved = lastInterleaved;

	      do {
	        newLanes = mergeLanes(newLanes, interleaved.lane);
	        interleaved = interleaved.next;
	      } while (interleaved !== lastInterleaved);
	    } else if (firstBaseUpdate === null) {
	      // `queue.lanes` is used for entangling transitions. We can set it back to
	      // zero once the queue is empty.
	      queue.shared.lanes = NoLanes;
	    } // Set the remaining expiration time to be whatever is remaining in the queue.
	    // This should be fine because the only two other things that contribute to
	    // expiration time are props and context. We're already in the middle of the
	    // begin phase by the time we start processing the queue, so we've already
	    // dealt with the props. Context in components that specify
	    // shouldComponentUpdate is tricky; but we'll have to account for
	    // that regardless.


	    markSkippedUpdateLanes(newLanes);
	    workInProgress.lanes = newLanes;
	    workInProgress.memoizedState = newState;
	  }

	  {
	    currentlyProcessingQueue = null;
	  }
	}

	function callCallback(callback, context) {
	  if (typeof callback !== 'function') {
	    throw new Error('Invalid argument passed as callback. Expected a function. Instead ' + ("received: " + callback));
	  }

	  callback.call(context);
	}

	function resetHasForceUpdateBeforeProcessing() {
	  hasForceUpdate = false;
	}
	function checkHasForceUpdateAfterProcessing() {
	  return hasForceUpdate;
	}
	function commitUpdateQueue(finishedWork, finishedQueue, instance) {
	  // Commit the effects
	  var effects = finishedQueue.effects;
	  finishedQueue.effects = null;

	  if (effects !== null) {
	    for (var i = 0; i < effects.length; i++) {
	      var effect = effects[i];
	      var callback = effect.callback;

	      if (callback !== null) {
	        effect.callback = null;
	        callCallback(callback, instance);
	      }
	    }
	  }
	}

	var NO_CONTEXT = {};
	var contextStackCursor$1 = createCursor(NO_CONTEXT);
	var contextFiberStackCursor = createCursor(NO_CONTEXT);
	var rootInstanceStackCursor = createCursor(NO_CONTEXT);

	function requiredContext(c) {
	  if (c === NO_CONTEXT) {
	    throw new Error('Expected host context to exist. This error is likely caused by a bug ' + 'in React. Please file an issue.');
	  }

	  return c;
	}

	function getRootHostContainer() {
	  var rootInstance = requiredContext(rootInstanceStackCursor.current);
	  return rootInstance;
	}

	function pushHostContainer(fiber, nextRootInstance) {
	  // Push current root instance onto the stack;
	  // This allows us to reset root when portals are popped.
	  push(rootInstanceStackCursor, nextRootInstance, fiber); // Track the context and the Fiber that provided it.
	  // This enables us to pop only Fibers that provide unique contexts.

	  push(contextFiberStackCursor, fiber, fiber); // Finally, we need to push the host context to the stack.
	  // However, we can't just call getRootHostContext() and push it because
	  // we'd have a different number of entries on the stack depending on
	  // whether getRootHostContext() throws somewhere in renderer code or not.
	  // So we push an empty value first. This lets us safely unwind on errors.

	  push(contextStackCursor$1, NO_CONTEXT, fiber);
	  var nextRootContext = getRootHostContext(nextRootInstance); // Now that we know this function doesn't throw, replace it.

	  pop(contextStackCursor$1, fiber);
	  push(contextStackCursor$1, nextRootContext, fiber);
	}

	function popHostContainer(fiber) {
	  pop(contextStackCursor$1, fiber);
	  pop(contextFiberStackCursor, fiber);
	  pop(rootInstanceStackCursor, fiber);
	}

	function getHostContext() {
	  var context = requiredContext(contextStackCursor$1.current);
	  return context;
	}

	function pushHostContext(fiber) {
	  requiredContext(rootInstanceStackCursor.current);
	  var context = requiredContext(contextStackCursor$1.current);
	  var nextContext = getChildHostContext(context, fiber.type); // Don't push this Fiber's context unless it's unique.

	  if (context === nextContext) {
	    return;
	  } // Track the context and the Fiber that provided it.
	  // This enables us to pop only Fibers that provide unique contexts.


	  push(contextFiberStackCursor, fiber, fiber);
	  push(contextStackCursor$1, nextContext, fiber);
	}

	function popHostContext(fiber) {
	  // Do not pop unless this Fiber provided the current context.
	  // pushHostContext() only pushes Fibers that provide unique contexts.
	  if (contextFiberStackCursor.current !== fiber) {
	    return;
	  }

	  pop(contextStackCursor$1, fiber);
	  pop(contextFiberStackCursor, fiber);
	}

	var DefaultSuspenseContext = 0; // The Suspense Context is split into two parts. The lower bits is
	// inherited deeply down the subtree. The upper bits only affect
	// this immediate suspense boundary and gets reset each new
	// boundary or suspense list.

	var SubtreeSuspenseContextMask = 1; // Subtree Flags:
	// InvisibleParentSuspenseContext indicates that one of our parent Suspense
	// boundaries is not currently showing visible main content.
	// Either because it is already showing a fallback or is not mounted at all.
	// We can use this to determine if it is desirable to trigger a fallback at
	// the parent. If not, then we might need to trigger undesirable boundaries
	// and/or suspend the commit to avoid hiding the parent content.

	var InvisibleParentSuspenseContext = 1; // Shallow Flags:
	// ForceSuspenseFallback can be used by SuspenseList to force newly added
	// items into their fallback state during one of the render passes.

	var ForceSuspenseFallback = 2;
	var suspenseStackCursor = createCursor(DefaultSuspenseContext);
	function hasSuspenseContext(parentContext, flag) {
	  return (parentContext & flag) !== 0;
	}
	function setDefaultShallowSuspenseContext(parentContext) {
	  return parentContext & SubtreeSuspenseContextMask;
	}
	function setShallowSuspenseContext(parentContext, shallowContext) {
	  return parentContext & SubtreeSuspenseContextMask | shallowContext;
	}
	function addSubtreeSuspenseContext(parentContext, subtreeContext) {
	  return parentContext | subtreeContext;
	}
	function pushSuspenseContext(fiber, newContext) {
	  push(suspenseStackCursor, newContext, fiber);
	}
	function popSuspenseContext(fiber) {
	  pop(suspenseStackCursor, fiber);
	}

	function shouldCaptureSuspense(workInProgress, hasInvisibleParent) {
	  // If it was the primary children that just suspended, capture and render the
	  // fallback. Otherwise, don't capture and bubble to the next boundary.
	  var nextState = workInProgress.memoizedState;

	  if (nextState !== null) {
	    if (nextState.dehydrated !== null) {
	      // A dehydrated boundary always captures.
	      return true;
	    }

	    return false;
	  }

	  workInProgress.memoizedProps; // Regular boundaries always capture.

	  {
	    return true;
	  } // If it's a boundary we should avoid, then we prefer to bubble up to the
	}
	function findFirstSuspended(row) {
	  var node = row;

	  while (node !== null) {
	    if (node.tag === SuspenseComponent) {
	      var state = node.memoizedState;

	      if (state !== null) {
	        var dehydrated = state.dehydrated;

	        if (dehydrated === null || isSuspenseInstancePending(dehydrated) || isSuspenseInstanceFallback(dehydrated)) {
	          return node;
	        }
	      }
	    } else if (node.tag === SuspenseListComponent && // revealOrder undefined can't be trusted because it don't
	    // keep track of whether it suspended or not.
	    node.memoizedProps.revealOrder !== undefined) {
	      var didSuspend = (node.flags & DidCapture) !== NoFlags;

	      if (didSuspend) {
	        return node;
	      }
	    } else if (node.child !== null) {
	      node.child.return = node;
	      node = node.child;
	      continue;
	    }

	    if (node === row) {
	      return null;
	    }

	    while (node.sibling === null) {
	      if (node.return === null || node.return === row) {
	        return null;
	      }

	      node = node.return;
	    }

	    node.sibling.return = node.return;
	    node = node.sibling;
	  }

	  return null;
	}

	var NoFlags$1 =
	/*   */
	0; // Represents whether effect should fire.

	var HasEffect =
	/* */
	1; // Represents the phase in which the effect (not the clean-up) fires.

	var Insertion =
	/*  */
	2;
	var Layout =
	/*    */
	4;
	var Passive$1 =
	/*   */
	8;

	// and should be reset before starting a new render.
	// This tracks which mutable sources need to be reset after a render.

	var workInProgressSources = [];
	function resetWorkInProgressVersions() {
	  for (var i = 0; i < workInProgressSources.length; i++) {
	    var mutableSource = workInProgressSources[i];

	    {
	      mutableSource._workInProgressVersionPrimary = null;
	    }
	  }

	  workInProgressSources.length = 0;
	}
	// This ensures that the version used for server rendering matches the one
	// that is eventually read during hydration.
	// If they don't match there's a potential tear and a full deopt render is required.

	function registerMutableSourceForHydration(root, mutableSource) {
	  var getVersion = mutableSource._getVersion;
	  var version = getVersion(mutableSource._source); // TODO Clear this data once all pending hydration work is finished.
	  // Retaining it forever may interfere with GC.

	  if (root.mutableSourceEagerHydrationData == null) {
	    root.mutableSourceEagerHydrationData = [mutableSource, version];
	  } else {
	    root.mutableSourceEagerHydrationData.push(mutableSource, version);
	  }
	}

	var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher,
	    ReactCurrentBatchConfig$2 = ReactSharedInternals.ReactCurrentBatchConfig;
	var didWarnAboutMismatchedHooksForComponent;
	var didWarnUncachedGetSnapshot;

	{
	  didWarnAboutMismatchedHooksForComponent = new Set();
	}

	// These are set right before calling the component.
	var renderLanes = NoLanes; // The work-in-progress fiber. I've named it differently to distinguish it from
	// the work-in-progress hook.

	var currentlyRenderingFiber$1 = null; // Hooks are stored as a linked list on the fiber's memoizedState field. The
	// current hook list is the list that belongs to the current fiber. The
	// work-in-progress hook list is a new list that will be added to the
	// work-in-progress fiber.

	var currentHook = null;
	var workInProgressHook = null; // Whether an update was scheduled at any point during the render phase. This
	// does not get reset if we do another render pass; only when we're completely
	// finished evaluating this component. This is an optimization so we know
	// whether we need to clear render phase updates after a throw.

	var didScheduleRenderPhaseUpdate = false; // Where an update was scheduled only during the current render pass. This
	// gets reset after each attempt.
	// TODO: Maybe there's some way to consolidate this with
	// `didScheduleRenderPhaseUpdate`. Or with `numberOfReRenders`.

	var didScheduleRenderPhaseUpdateDuringThisPass = false; // Counts the number of useId hooks in this component.

	var localIdCounter = 0; // Used for ids that are generated completely client-side (i.e. not during
	// hydration). This counter is global, so client ids are not stable across
	// render attempts.

	var globalClientIdCounter = 0;
	var RE_RENDER_LIMIT = 25; // In DEV, this is the name of the currently executing primitive hook

	var currentHookNameInDev = null; // In DEV, this list ensures that hooks are called in the same order between renders.
	// The list stores the order of hooks used during the initial render (mount).
	// Subsequent renders (updates) reference this list.

	var hookTypesDev = null;
	var hookTypesUpdateIndexDev = -1; // In DEV, this tracks whether currently rendering component needs to ignore
	// the dependencies for Hooks that need them (e.g. useEffect or useMemo).
	// When true, such Hooks will always be "remounted". Only used during hot reload.

	var ignorePreviousDependencies = false;

	function mountHookTypesDev() {
	  {
	    var hookName = currentHookNameInDev;

	    if (hookTypesDev === null) {
	      hookTypesDev = [hookName];
	    } else {
	      hookTypesDev.push(hookName);
	    }
	  }
	}

	function updateHookTypesDev() {
	  {
	    var hookName = currentHookNameInDev;

	    if (hookTypesDev !== null) {
	      hookTypesUpdateIndexDev++;

	      if (hookTypesDev[hookTypesUpdateIndexDev] !== hookName) {
	        warnOnHookMismatchInDev(hookName);
	      }
	    }
	  }
	}

	function checkDepsAreArrayDev(deps) {
	  {
	    if (deps !== undefined && deps !== null && !isArray(deps)) {
	      // Verify deps, but only on mount to avoid extra checks.
	      // It's unlikely their type would change as usually you define them inline.
	      error('%s received a final argument that is not an array (instead, received `%s`). When ' + 'specified, the final argument must be an array.', currentHookNameInDev, typeof deps);
	    }
	  }
	}

	function warnOnHookMismatchInDev(currentHookName) {
	  {
	    var componentName = getComponentNameFromFiber(currentlyRenderingFiber$1);

	    if (!didWarnAboutMismatchedHooksForComponent.has(componentName)) {
	      didWarnAboutMismatchedHooksForComponent.add(componentName);

	      if (hookTypesDev !== null) {
	        var table = '';
	        var secondColumnStart = 30;

	        for (var i = 0; i <= hookTypesUpdateIndexDev; i++) {
	          var oldHookName = hookTypesDev[i];
	          var newHookName = i === hookTypesUpdateIndexDev ? currentHookName : oldHookName;
	          var row = i + 1 + ". " + oldHookName; // Extra space so second column lines up
	          // lol @ IE not supporting String#repeat

	          while (row.length < secondColumnStart) {
	            row += ' ';
	          }

	          row += newHookName + '\n';
	          table += row;
	        }

	        error('React has detected a change in the order of Hooks called by %s. ' + 'This will lead to bugs and errors if not fixed. ' + 'For more information, read the Rules of Hooks: https://reactjs.org/link/rules-of-hooks\n\n' + '   Previous render            Next render\n' + '   ------------------------------------------------------\n' + '%s' + '   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n', componentName, table);
	      }
	    }
	  }
	}

	function throwInvalidHookError() {
	  throw new Error('Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for' + ' one of the following reasons:\n' + '1. You might have mismatching versions of React and the renderer (such as React DOM)\n' + '2. You might be breaking the Rules of Hooks\n' + '3. You might have more than one copy of React in the same app\n' + 'See https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.');
	}

	function areHookInputsEqual(nextDeps, prevDeps) {
	  {
	    if (ignorePreviousDependencies) {
	      // Only true when this component is being hot reloaded.
	      return false;
	    }
	  }

	  if (prevDeps === null) {
	    {
	      error('%s received a final argument during this render, but not during ' + 'the previous render. Even though the final argument is optional, ' + 'its type cannot change between renders.', currentHookNameInDev);
	    }

	    return false;
	  }

	  {
	    // Don't bother comparing lengths in prod because these arrays should be
	    // passed inline.
	    if (nextDeps.length !== prevDeps.length) {
	      error('The final argument passed to %s changed size between renders. The ' + 'order and size of this array must remain constant.\n\n' + 'Previous: %s\n' + 'Incoming: %s', currentHookNameInDev, "[" + prevDeps.join(', ') + "]", "[" + nextDeps.join(', ') + "]");
	    }
	  }

	  for (var i = 0; i < prevDeps.length && i < nextDeps.length; i++) {
	    if (objectIs(nextDeps[i], prevDeps[i])) {
	      continue;
	    }

	    return false;
	  }

	  return true;
	}

	function renderWithHooks(current, workInProgress, Component, props, secondArg, nextRenderLanes) {
	  renderLanes = nextRenderLanes;
	  currentlyRenderingFiber$1 = workInProgress;

	  {
	    hookTypesDev = current !== null ? current._debugHookTypes : null;
	    hookTypesUpdateIndexDev = -1; // Used for hot reloading:

	    ignorePreviousDependencies = current !== null && current.type !== workInProgress.type;
	  }

	  workInProgress.memoizedState = null;
	  workInProgress.updateQueue = null;
	  workInProgress.lanes = NoLanes; // The following should have already been reset
	  // currentHook = null;
	  // workInProgressHook = null;
	  // didScheduleRenderPhaseUpdate = false;
	  // localIdCounter = 0;
	  // TODO Warn if no hooks are used at all during mount, then some are used during update.
	  // Currently we will identify the update render as a mount because memoizedState === null.
	  // This is tricky because it's valid for certain types of components (e.g. React.lazy)
	  // Using memoizedState to differentiate between mount/update only works if at least one stateful hook is used.
	  // Non-stateful hooks (e.g. context) don't get added to memoizedState,
	  // so memoizedState would be null during updates and mounts.

	  {
	    if (current !== null && current.memoizedState !== null) {
	      ReactCurrentDispatcher$1.current = HooksDispatcherOnUpdateInDEV;
	    } else if (hookTypesDev !== null) {
	      // This dispatcher handles an edge case where a component is updating,
	      // but no stateful hooks have been used.
	      // We want to match the production code behavior (which will use HooksDispatcherOnMount),
	      // but with the extra DEV validation to ensure hooks ordering hasn't changed.
	      // This dispatcher does that.
	      ReactCurrentDispatcher$1.current = HooksDispatcherOnMountWithHookTypesInDEV;
	    } else {
	      ReactCurrentDispatcher$1.current = HooksDispatcherOnMountInDEV;
	    }
	  }

	  var children = Component(props, secondArg); // Check if there was a render phase update

	  if (didScheduleRenderPhaseUpdateDuringThisPass) {
	    // Keep rendering in a loop for as long as render phase updates continue to
	    // be scheduled. Use a counter to prevent infinite loops.
	    var numberOfReRenders = 0;

	    do {
	      didScheduleRenderPhaseUpdateDuringThisPass = false;
	      localIdCounter = 0;

	      if (numberOfReRenders >= RE_RENDER_LIMIT) {
	        throw new Error('Too many re-renders. React limits the number of renders to prevent ' + 'an infinite loop.');
	      }

	      numberOfReRenders += 1;

	      {
	        // Even when hot reloading, allow dependencies to stabilize
	        // after first render to prevent infinite render phase updates.
	        ignorePreviousDependencies = false;
	      } // Start over from the beginning of the list


	      currentHook = null;
	      workInProgressHook = null;
	      workInProgress.updateQueue = null;

	      {
	        // Also validate hook order for cascading updates.
	        hookTypesUpdateIndexDev = -1;
	      }

	      ReactCurrentDispatcher$1.current =  HooksDispatcherOnRerenderInDEV ;
	      children = Component(props, secondArg);
	    } while (didScheduleRenderPhaseUpdateDuringThisPass);
	  } // We can assume the previous dispatcher is always this one, since we set it
	  // at the beginning of the render phase and there's no re-entrance.


	  ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;

	  {
	    workInProgress._debugHookTypes = hookTypesDev;
	  } // This check uses currentHook so that it works the same in DEV and prod bundles.
	  // hookTypesDev could catch more cases (e.g. context) but only in DEV bundles.


	  var didRenderTooFewHooks = currentHook !== null && currentHook.next !== null;
	  renderLanes = NoLanes;
	  currentlyRenderingFiber$1 = null;
	  currentHook = null;
	  workInProgressHook = null;

	  {
	    currentHookNameInDev = null;
	    hookTypesDev = null;
	    hookTypesUpdateIndexDev = -1; // Confirm that a static flag was not added or removed since the last
	    // render. If this fires, it suggests that we incorrectly reset the static
	    // flags in some other part of the codebase. This has happened before, for
	    // example, in the SuspenseList implementation.

	    if (current !== null && (current.flags & StaticMask) !== (workInProgress.flags & StaticMask) && // Disable this warning in legacy mode, because legacy Suspense is weird
	    // and creates false positives. To make this work in legacy mode, we'd
	    // need to mark fibers that commit in an incomplete state, somehow. For
	    // now I'll disable the warning that most of the bugs that would trigger
	    // it are either exclusive to concurrent mode or exist in both.
	    (current.mode & ConcurrentMode) !== NoMode) {
	      error('Internal React error: Expected static flag was missing. Please ' + 'notify the React team.');
	    }
	  }

	  didScheduleRenderPhaseUpdate = false; // This is reset by checkDidRenderIdHook
	  // localIdCounter = 0;

	  if (didRenderTooFewHooks) {
	    throw new Error('Rendered fewer hooks than expected. This may be caused by an accidental ' + 'early return statement.');
	  }

	  return children;
	}
	function checkDidRenderIdHook() {
	  // This should be called immediately after every renderWithHooks call.
	  // Conceptually, it's part of the return value of renderWithHooks; it's only a
	  // separate function to avoid using an array tuple.
	  var didRenderIdHook = localIdCounter !== 0;
	  localIdCounter = 0;
	  return didRenderIdHook;
	}
	function bailoutHooks(current, workInProgress, lanes) {
	  workInProgress.updateQueue = current.updateQueue; // TODO: Don't need to reset the flags here, because they're reset in the
	  // complete phase (bubbleProperties).

	  if ( (workInProgress.mode & StrictEffectsMode) !== NoMode) {
	    workInProgress.flags &= ~(MountPassiveDev | MountLayoutDev | Passive | Update);
	  } else {
	    workInProgress.flags &= ~(Passive | Update);
	  }

	  current.lanes = removeLanes(current.lanes, lanes);
	}
	function resetHooksAfterThrow() {
	  // We can assume the previous dispatcher is always this one, since we set it
	  // at the beginning of the render phase and there's no re-entrance.
	  ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;

	  if (didScheduleRenderPhaseUpdate) {
	    // There were render phase updates. These are only valid for this render
	    // phase, which we are now aborting. Remove the updates from the queues so
	    // they do not persist to the next render. Do not remove updates from hooks
	    // that weren't processed.
	    //
	    // Only reset the updates from the queue if it has a clone. If it does
	    // not have a clone, that means it wasn't processed, and the updates were
	    // scheduled before we entered the render phase.
	    var hook = currentlyRenderingFiber$1.memoizedState;

	    while (hook !== null) {
	      var queue = hook.queue;

	      if (queue !== null) {
	        queue.pending = null;
	      }

	      hook = hook.next;
	    }

	    didScheduleRenderPhaseUpdate = false;
	  }

	  renderLanes = NoLanes;
	  currentlyRenderingFiber$1 = null;
	  currentHook = null;
	  workInProgressHook = null;

	  {
	    hookTypesDev = null;
	    hookTypesUpdateIndexDev = -1;
	    currentHookNameInDev = null;
	    isUpdatingOpaqueValueInRenderPhase = false;
	  }

	  didScheduleRenderPhaseUpdateDuringThisPass = false;
	  localIdCounter = 0;
	}

	function mountWorkInProgressHook() {
	  var hook = {
	    memoizedState: null,
	    baseState: null,
	    baseQueue: null,
	    queue: null,
	    next: null
	  };

	  if (workInProgressHook === null) {
	    // This is the first hook in the list
	    currentlyRenderingFiber$1.memoizedState = workInProgressHook = hook;
	  } else {
	    // Append to the end of the list
	    workInProgressHook = workInProgressHook.next = hook;
	  }

	  return workInProgressHook;
	}

	function updateWorkInProgressHook() {
	  // This function is used both for updates and for re-renders triggered by a
	  // render phase update. It assumes there is either a current hook we can
	  // clone, or a work-in-progress hook from a previous render pass that we can
	  // use as a base. When we reach the end of the base list, we must switch to
	  // the dispatcher used for mounts.
	  var nextCurrentHook;

	  if (currentHook === null) {
	    var current = currentlyRenderingFiber$1.alternate;

	    if (current !== null) {
	      nextCurrentHook = current.memoizedState;
	    } else {
	      nextCurrentHook = null;
	    }
	  } else {
	    nextCurrentHook = currentHook.next;
	  }

	  var nextWorkInProgressHook;

	  if (workInProgressHook === null) {
	    nextWorkInProgressHook = currentlyRenderingFiber$1.memoizedState;
	  } else {
	    nextWorkInProgressHook = workInProgressHook.next;
	  }

	  if (nextWorkInProgressHook !== null) {
	    // There's already a work-in-progress. Reuse it.
	    workInProgressHook = nextWorkInProgressHook;
	    nextWorkInProgressHook = workInProgressHook.next;
	    currentHook = nextCurrentHook;
	  } else {
	    // Clone from the current hook.
	    if (nextCurrentHook === null) {
	      throw new Error('Rendered more hooks than during the previous render.');
	    }

	    currentHook = nextCurrentHook;
	    var newHook = {
	      memoizedState: currentHook.memoizedState,
	      baseState: currentHook.baseState,
	      baseQueue: currentHook.baseQueue,
	      queue: currentHook.queue,
	      next: null
	    };

	    if (workInProgressHook === null) {
	      // This is the first hook in the list.
	      currentlyRenderingFiber$1.memoizedState = workInProgressHook = newHook;
	    } else {
	      // Append to the end of the list.
	      workInProgressHook = workInProgressHook.next = newHook;
	    }
	  }

	  return workInProgressHook;
	}

	function createFunctionComponentUpdateQueue() {
	  return {
	    lastEffect: null,
	    stores: null
	  };
	}

	function basicStateReducer(state, action) {
	  // $FlowFixMe: Flow doesn't like mixed types
	  return typeof action === 'function' ? action(state) : action;
	}

	function mountReducer(reducer, initialArg, init) {
	  var hook = mountWorkInProgressHook();
	  var initialState;

	  if (init !== undefined) {
	    initialState = init(initialArg);
	  } else {
	    initialState = initialArg;
	  }

	  hook.memoizedState = hook.baseState = initialState;
	  var queue = {
	    pending: null,
	    interleaved: null,
	    lanes: NoLanes,
	    dispatch: null,
	    lastRenderedReducer: reducer,
	    lastRenderedState: initialState
	  };
	  hook.queue = queue;
	  var dispatch = queue.dispatch = dispatchReducerAction.bind(null, currentlyRenderingFiber$1, queue);
	  return [hook.memoizedState, dispatch];
	}

	function updateReducer(reducer, initialArg, init) {
	  var hook = updateWorkInProgressHook();
	  var queue = hook.queue;

	  if (queue === null) {
	    throw new Error('Should have a queue. This is likely a bug in React. Please file an issue.');
	  }

	  queue.lastRenderedReducer = reducer;
	  var current = currentHook; // The last rebase update that is NOT part of the base state.

	  var baseQueue = current.baseQueue; // The last pending update that hasn't been processed yet.

	  var pendingQueue = queue.pending;

	  if (pendingQueue !== null) {
	    // We have new updates that haven't been processed yet.
	    // We'll add them to the base queue.
	    if (baseQueue !== null) {
	      // Merge the pending queue and the base queue.
	      var baseFirst = baseQueue.next;
	      var pendingFirst = pendingQueue.next;
	      baseQueue.next = pendingFirst;
	      pendingQueue.next = baseFirst;
	    }

	    {
	      if (current.baseQueue !== baseQueue) {
	        // Internal invariant that should never happen, but feasibly could in
	        // the future if we implement resuming, or some form of that.
	        error('Internal error: Expected work-in-progress queue to be a clone. ' + 'This is a bug in React.');
	      }
	    }

	    current.baseQueue = baseQueue = pendingQueue;
	    queue.pending = null;
	  }

	  if (baseQueue !== null) {
	    // We have a queue to process.
	    var first = baseQueue.next;
	    var newState = current.baseState;
	    var newBaseState = null;
	    var newBaseQueueFirst = null;
	    var newBaseQueueLast = null;
	    var update = first;

	    do {
	      var updateLane = update.lane;

	      if (!isSubsetOfLanes(renderLanes, updateLane)) {
	        // Priority is insufficient. Skip this update. If this is the first
	        // skipped update, the previous update/state is the new base
	        // update/state.
	        var clone = {
	          lane: updateLane,
	          action: update.action,
	          hasEagerState: update.hasEagerState,
	          eagerState: update.eagerState,
	          next: null
	        };

	        if (newBaseQueueLast === null) {
	          newBaseQueueFirst = newBaseQueueLast = clone;
	          newBaseState = newState;
	        } else {
	          newBaseQueueLast = newBaseQueueLast.next = clone;
	        } // Update the remaining priority in the queue.
	        // TODO: Don't need to accumulate this. Instead, we can remove
	        // renderLanes from the original lanes.


	        currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, updateLane);
	        markSkippedUpdateLanes(updateLane);
	      } else {
	        // This update does have sufficient priority.
	        if (newBaseQueueLast !== null) {
	          var _clone = {
	            // This update is going to be committed so we never want uncommit
	            // it. Using NoLane works because 0 is a subset of all bitmasks, so
	            // this will never be skipped by the check above.
	            lane: NoLane,
	            action: update.action,
	            hasEagerState: update.hasEagerState,
	            eagerState: update.eagerState,
	            next: null
	          };
	          newBaseQueueLast = newBaseQueueLast.next = _clone;
	        } // Process this update.


	        if (update.hasEagerState) {
	          // If this update is a state update (not a reducer) and was processed eagerly,
	          // we can use the eagerly computed state
	          newState = update.eagerState;
	        } else {
	          var action = update.action;
	          newState = reducer(newState, action);
	        }
	      }

	      update = update.next;
	    } while (update !== null && update !== first);

	    if (newBaseQueueLast === null) {
	      newBaseState = newState;
	    } else {
	      newBaseQueueLast.next = newBaseQueueFirst;
	    } // Mark that the fiber performed work, but only if the new state is
	    // different from the current state.


	    if (!objectIs(newState, hook.memoizedState)) {
	      markWorkInProgressReceivedUpdate();
	    }

	    hook.memoizedState = newState;
	    hook.baseState = newBaseState;
	    hook.baseQueue = newBaseQueueLast;
	    queue.lastRenderedState = newState;
	  } // Interleaved updates are stored on a separate queue. We aren't going to
	  // process them during this render, but we do need to track which lanes
	  // are remaining.


	  var lastInterleaved = queue.interleaved;

	  if (lastInterleaved !== null) {
	    var interleaved = lastInterleaved;

	    do {
	      var interleavedLane = interleaved.lane;
	      currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, interleavedLane);
	      markSkippedUpdateLanes(interleavedLane);
	      interleaved = interleaved.next;
	    } while (interleaved !== lastInterleaved);
	  } else if (baseQueue === null) {
	    // `queue.lanes` is used for entangling transitions. We can set it back to
	    // zero once the queue is empty.
	    queue.lanes = NoLanes;
	  }

	  var dispatch = queue.dispatch;
	  return [hook.memoizedState, dispatch];
	}

	function rerenderReducer(reducer, initialArg, init) {
	  var hook = updateWorkInProgressHook();
	  var queue = hook.queue;

	  if (queue === null) {
	    throw new Error('Should have a queue. This is likely a bug in React. Please file an issue.');
	  }

	  queue.lastRenderedReducer = reducer; // This is a re-render. Apply the new render phase updates to the previous
	  // work-in-progress hook.

	  var dispatch = queue.dispatch;
	  var lastRenderPhaseUpdate = queue.pending;
	  var newState = hook.memoizedState;

	  if (lastRenderPhaseUpdate !== null) {
	    // The queue doesn't persist past this render pass.
	    queue.pending = null;
	    var firstRenderPhaseUpdate = lastRenderPhaseUpdate.next;
	    var update = firstRenderPhaseUpdate;

	    do {
	      // Process this render phase update. We don't have to check the
	      // priority because it will always be the same as the current
	      // render's.
	      var action = update.action;
	      newState = reducer(newState, action);
	      update = update.next;
	    } while (update !== firstRenderPhaseUpdate); // Mark that the fiber performed work, but only if the new state is
	    // different from the current state.


	    if (!objectIs(newState, hook.memoizedState)) {
	      markWorkInProgressReceivedUpdate();
	    }

	    hook.memoizedState = newState; // Don't persist the state accumulated from the render phase updates to
	    // the base state unless the queue is empty.
	    // TODO: Not sure if this is the desired semantics, but it's what we
	    // do for gDSFP. I can't remember why.

	    if (hook.baseQueue === null) {
	      hook.baseState = newState;
	    }

	    queue.lastRenderedState = newState;
	  }

	  return [newState, dispatch];
	}

	function mountMutableSource(source, getSnapshot, subscribe) {
	  {
	    return undefined;
	  }
	}

	function updateMutableSource(source, getSnapshot, subscribe) {
	  {
	    return undefined;
	  }
	}

	function mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
	  var fiber = currentlyRenderingFiber$1;
	  var hook = mountWorkInProgressHook();
	  var nextSnapshot;
	  var isHydrating = getIsHydrating();

	  if (isHydrating) {
	    if (getServerSnapshot === undefined) {
	      throw new Error('Missing getServerSnapshot, which is required for ' + 'server-rendered content. Will revert to client rendering.');
	    }

	    nextSnapshot = getServerSnapshot();

	    {
	      if (!didWarnUncachedGetSnapshot) {
	        if (nextSnapshot !== getServerSnapshot()) {
	          error('The result of getServerSnapshot should be cached to avoid an infinite loop');

	          didWarnUncachedGetSnapshot = true;
	        }
	      }
	    }
	  } else {
	    nextSnapshot = getSnapshot();

	    {
	      if (!didWarnUncachedGetSnapshot) {
	        var cachedSnapshot = getSnapshot();

	        if (!objectIs(nextSnapshot, cachedSnapshot)) {
	          error('The result of getSnapshot should be cached to avoid an infinite loop');

	          didWarnUncachedGetSnapshot = true;
	        }
	      }
	    } // Unless we're rendering a blocking lane, schedule a consistency check.
	    // Right before committing, we will walk the tree and check if any of the
	    // stores were mutated.
	    //
	    // We won't do this if we're hydrating server-rendered content, because if
	    // the content is stale, it's already visible anyway. Instead we'll patch
	    // it up in a passive effect.


	    var root = getWorkInProgressRoot();

	    if (root === null) {
	      throw new Error('Expected a work-in-progress root. This is a bug in React. Please file an issue.');
	    }

	    if (!includesBlockingLane(root, renderLanes)) {
	      pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
	    }
	  } // Read the current snapshot from the store on every render. This breaks the
	  // normal rules of React, and only works because store updates are
	  // always synchronous.


	  hook.memoizedState = nextSnapshot;
	  var inst = {
	    value: nextSnapshot,
	    getSnapshot: getSnapshot
	  };
	  hook.queue = inst; // Schedule an effect to subscribe to the store.

	  mountEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [subscribe]); // Schedule an effect to update the mutable instance fields. We will update
	  // this whenever subscribe, getSnapshot, or value changes. Because there's no
	  // clean-up function, and we track the deps correctly, we can call pushEffect
	  // directly, without storing any additional state. For the same reason, we
	  // don't need to set a static flag, either.
	  // TODO: We can move this to the passive phase once we add a pre-commit
	  // consistency check. See the next comment.

	  fiber.flags |= Passive;
	  pushEffect(HasEffect | Passive$1, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), undefined, null);
	  return nextSnapshot;
	}

	function updateSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
	  var fiber = currentlyRenderingFiber$1;
	  var hook = updateWorkInProgressHook(); // Read the current snapshot from the store on every render. This breaks the
	  // normal rules of React, and only works because store updates are
	  // always synchronous.

	  var nextSnapshot = getSnapshot();

	  {
	    if (!didWarnUncachedGetSnapshot) {
	      var cachedSnapshot = getSnapshot();

	      if (!objectIs(nextSnapshot, cachedSnapshot)) {
	        error('The result of getSnapshot should be cached to avoid an infinite loop');

	        didWarnUncachedGetSnapshot = true;
	      }
	    }
	  }

	  var prevSnapshot = hook.memoizedState;
	  var snapshotChanged = !objectIs(prevSnapshot, nextSnapshot);

	  if (snapshotChanged) {
	    hook.memoizedState = nextSnapshot;
	    markWorkInProgressReceivedUpdate();
	  }

	  var inst = hook.queue;
	  updateEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [subscribe]); // Whenever getSnapshot or subscribe changes, we need to check in the
	  // commit phase if there was an interleaved mutation. In concurrent mode
	  // this can happen all the time, but even in synchronous mode, an earlier
	  // effect may have mutated the store.

	  if (inst.getSnapshot !== getSnapshot || snapshotChanged || // Check if the susbcribe function changed. We can save some memory by
	  // checking whether we scheduled a subscription effect above.
	  workInProgressHook !== null && workInProgressHook.memoizedState.tag & HasEffect) {
	    fiber.flags |= Passive;
	    pushEffect(HasEffect | Passive$1, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), undefined, null); // Unless we're rendering a blocking lane, schedule a consistency check.
	    // Right before committing, we will walk the tree and check if any of the
	    // stores were mutated.

	    var root = getWorkInProgressRoot();

	    if (root === null) {
	      throw new Error('Expected a work-in-progress root. This is a bug in React. Please file an issue.');
	    }

	    if (!includesBlockingLane(root, renderLanes)) {
	      pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
	    }
	  }

	  return nextSnapshot;
	}

	function pushStoreConsistencyCheck(fiber, getSnapshot, renderedSnapshot) {
	  fiber.flags |= StoreConsistency;
	  var check = {
	    getSnapshot: getSnapshot,
	    value: renderedSnapshot
	  };
	  var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;

	  if (componentUpdateQueue === null) {
	    componentUpdateQueue = createFunctionComponentUpdateQueue();
	    currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
	    componentUpdateQueue.stores = [check];
	  } else {
	    var stores = componentUpdateQueue.stores;

	    if (stores === null) {
	      componentUpdateQueue.stores = [check];
	    } else {
	      stores.push(check);
	    }
	  }
	}

	function updateStoreInstance(fiber, inst, nextSnapshot, getSnapshot) {
	  // These are updated in the passive phase
	  inst.value = nextSnapshot;
	  inst.getSnapshot = getSnapshot; // Something may have been mutated in between render and commit. This could
	  // have been in an event that fired before the passive effects, or it could
	  // have been in a layout effect. In that case, we would have used the old
	  // snapsho and getSnapshot values to bail out. We need to check one more time.

	  if (checkIfSnapshotChanged(inst)) {
	    // Force a re-render.
	    forceStoreRerender(fiber);
	  }
	}

	function subscribeToStore(fiber, inst, subscribe) {
	  var handleStoreChange = function () {
	    // The store changed. Check if the snapshot changed since the last time we
	    // read from the store.
	    if (checkIfSnapshotChanged(inst)) {
	      // Force a re-render.
	      forceStoreRerender(fiber);
	    }
	  }; // Subscribe to the store and return a clean-up function.


	  return subscribe(handleStoreChange);
	}

	function checkIfSnapshotChanged(inst) {
	  var latestGetSnapshot = inst.getSnapshot;
	  var prevValue = inst.value;

	  try {
	    var nextValue = latestGetSnapshot();
	    return !objectIs(prevValue, nextValue);
	  } catch (error) {
	    return true;
	  }
	}

	function forceStoreRerender(fiber) {
	  var root = enqueueConcurrentRenderForLane(fiber, SyncLane);

	  if (root !== null) {
	    scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);
	  }
	}

	function mountState(initialState) {
	  var hook = mountWorkInProgressHook();

	  if (typeof initialState === 'function') {
	    // $FlowFixMe: Flow doesn't like mixed types
	    initialState = initialState();
	  }

	  hook.memoizedState = hook.baseState = initialState;
	  var queue = {
	    pending: null,
	    interleaved: null,
	    lanes: NoLanes,
	    dispatch: null,
	    lastRenderedReducer: basicStateReducer,
	    lastRenderedState: initialState
	  };
	  hook.queue = queue;
	  var dispatch = queue.dispatch = dispatchSetState.bind(null, currentlyRenderingFiber$1, queue);
	  return [hook.memoizedState, dispatch];
	}

	function updateState(initialState) {
	  return updateReducer(basicStateReducer);
	}

	function rerenderState(initialState) {
	  return rerenderReducer(basicStateReducer);
	}

	function pushEffect(tag, create, destroy, deps) {
	  var effect = {
	    tag: tag,
	    create: create,
	    destroy: destroy,
	    deps: deps,
	    // Circular
	    next: null
	  };
	  var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;

	  if (componentUpdateQueue === null) {
	    componentUpdateQueue = createFunctionComponentUpdateQueue();
	    currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
	    componentUpdateQueue.lastEffect = effect.next = effect;
	  } else {
	    var lastEffect = componentUpdateQueue.lastEffect;

	    if (lastEffect === null) {
	      componentUpdateQueue.lastEffect = effect.next = effect;
	    } else {
	      var firstEffect = lastEffect.next;
	      lastEffect.next = effect;
	      effect.next = firstEffect;
	      componentUpdateQueue.lastEffect = effect;
	    }
	  }

	  return effect;
	}

	function mountRef(initialValue) {
	  var hook = mountWorkInProgressHook();

	  {
	    var _ref2 = {
	      current: initialValue
	    };
	    hook.memoizedState = _ref2;
	    return _ref2;
	  }
	}

	function updateRef(initialValue) {
	  var hook = updateWorkInProgressHook();
	  return hook.memoizedState;
	}

	function mountEffectImpl(fiberFlags, hookFlags, create, deps) {
	  var hook = mountWorkInProgressHook();
	  var nextDeps = deps === undefined ? null : deps;
	  currentlyRenderingFiber$1.flags |= fiberFlags;
	  hook.memoizedState = pushEffect(HasEffect | hookFlags, create, undefined, nextDeps);
	}

	function updateEffectImpl(fiberFlags, hookFlags, create, deps) {
	  var hook = updateWorkInProgressHook();
	  var nextDeps = deps === undefined ? null : deps;
	  var destroy = undefined;

	  if (currentHook !== null) {
	    var prevEffect = currentHook.memoizedState;
	    destroy = prevEffect.destroy;

	    if (nextDeps !== null) {
	      var prevDeps = prevEffect.deps;

	      if (areHookInputsEqual(nextDeps, prevDeps)) {
	        hook.memoizedState = pushEffect(hookFlags, create, destroy, nextDeps);
	        return;
	      }
	    }
	  }

	  currentlyRenderingFiber$1.flags |= fiberFlags;
	  hook.memoizedState = pushEffect(HasEffect | hookFlags, create, destroy, nextDeps);
	}

	function mountEffect(create, deps) {
	  if ( (currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
	    return mountEffectImpl(MountPassiveDev | Passive | PassiveStatic, Passive$1, create, deps);
	  } else {
	    return mountEffectImpl(Passive | PassiveStatic, Passive$1, create, deps);
	  }
	}

	function updateEffect(create, deps) {
	  return updateEffectImpl(Passive, Passive$1, create, deps);
	}

	function mountInsertionEffect(create, deps) {
	  return mountEffectImpl(Update, Insertion, create, deps);
	}

	function updateInsertionEffect(create, deps) {
	  return updateEffectImpl(Update, Insertion, create, deps);
	}

	function mountLayoutEffect(create, deps) {
	  var fiberFlags = Update;

	  {
	    fiberFlags |= LayoutStatic;
	  }

	  if ( (currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
	    fiberFlags |= MountLayoutDev;
	  }

	  return mountEffectImpl(fiberFlags, Layout, create, deps);
	}

	function updateLayoutEffect(create, deps) {
	  return updateEffectImpl(Update, Layout, create, deps);
	}

	function imperativeHandleEffect(create, ref) {
	  if (typeof ref === 'function') {
	    var refCallback = ref;

	    var _inst = create();

	    refCallback(_inst);
	    return function () {
	      refCallback(null);
	    };
	  } else if (ref !== null && ref !== undefined) {
	    var refObject = ref;

	    {
	      if (!refObject.hasOwnProperty('current')) {
	        error('Expected useImperativeHandle() first argument to either be a ' + 'ref callback or React.createRef() object. Instead received: %s.', 'an object with keys {' + Object.keys(refObject).join(', ') + '}');
	      }
	    }

	    var _inst2 = create();

	    refObject.current = _inst2;
	    return function () {
	      refObject.current = null;
	    };
	  }
	}

	function mountImperativeHandle(ref, create, deps) {
	  {
	    if (typeof create !== 'function') {
	      error('Expected useImperativeHandle() second argument to be a function ' + 'that creates a handle. Instead received: %s.', create !== null ? typeof create : 'null');
	    }
	  } // TODO: If deps are provided, should we skip comparing the ref itself?


	  var effectDeps = deps !== null && deps !== undefined ? deps.concat([ref]) : null;
	  var fiberFlags = Update;

	  {
	    fiberFlags |= LayoutStatic;
	  }

	  if ( (currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
	    fiberFlags |= MountLayoutDev;
	  }

	  return mountEffectImpl(fiberFlags, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
	}

	function updateImperativeHandle(ref, create, deps) {
	  {
	    if (typeof create !== 'function') {
	      error('Expected useImperativeHandle() second argument to be a function ' + 'that creates a handle. Instead received: %s.', create !== null ? typeof create : 'null');
	    }
	  } // TODO: If deps are provided, should we skip comparing the ref itself?


	  var effectDeps = deps !== null && deps !== undefined ? deps.concat([ref]) : null;
	  return updateEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
	}

	function mountDebugValue(value, formatterFn) {// This hook is normally a no-op.
	  // The react-debug-hooks package injects its own implementation
	  // so that e.g. DevTools can display custom hook values.
	}

	var updateDebugValue = mountDebugValue;

	function mountCallback(callback, deps) {
	  var hook = mountWorkInProgressHook();
	  var nextDeps = deps === undefined ? null : deps;
	  hook.memoizedState = [callback, nextDeps];
	  return callback;
	}

	function updateCallback(callback, deps) {
	  var hook = updateWorkInProgressHook();
	  var nextDeps = deps === undefined ? null : deps;
	  var prevState = hook.memoizedState;

	  if (prevState !== null) {
	    if (nextDeps !== null) {
	      var prevDeps = prevState[1];

	      if (areHookInputsEqual(nextDeps, prevDeps)) {
	        return prevState[0];
	      }
	    }
	  }

	  hook.memoizedState = [callback, nextDeps];
	  return callback;
	}

	function mountMemo(nextCreate, deps) {
	  var hook = mountWorkInProgressHook();
	  var nextDeps = deps === undefined ? null : deps;
	  var nextValue = nextCreate();
	  hook.memoizedState = [nextValue, nextDeps];
	  return nextValue;
	}

	function updateMemo(nextCreate, deps) {
	  var hook = updateWorkInProgressHook();
	  var nextDeps = deps === undefined ? null : deps;
	  var prevState = hook.memoizedState;

	  if (prevState !== null) {
	    // Assume these are defined. If they're not, areHookInputsEqual will warn.
	    if (nextDeps !== null) {
	      var prevDeps = prevState[1];

	      if (areHookInputsEqual(nextDeps, prevDeps)) {
	        return prevState[0];
	      }
	    }
	  }

	  var nextValue = nextCreate();
	  hook.memoizedState = [nextValue, nextDeps];
	  return nextValue;
	}

	function mountDeferredValue(value) {
	  var hook = mountWorkInProgressHook();
	  hook.memoizedState = value;
	  return value;
	}

	function updateDeferredValue(value) {
	  var hook = updateWorkInProgressHook();
	  var resolvedCurrentHook = currentHook;
	  var prevValue = resolvedCurrentHook.memoizedState;
	  return updateDeferredValueImpl(hook, prevValue, value);
	}

	function rerenderDeferredValue(value) {
	  var hook = updateWorkInProgressHook();

	  if (currentHook === null) {
	    // This is a rerender during a mount.
	    hook.memoizedState = value;
	    return value;
	  } else {
	    // This is a rerender during an update.
	    var prevValue = currentHook.memoizedState;
	    return updateDeferredValueImpl(hook, prevValue, value);
	  }
	}

	function updateDeferredValueImpl(hook, prevValue, value) {
	  var shouldDeferValue = !includesOnlyNonUrgentLanes(renderLanes);

	  if (shouldDeferValue) {
	    // This is an urgent update. If the value has changed, keep using the
	    // previous value and spawn a deferred render to update it later.
	    if (!objectIs(value, prevValue)) {
	      // Schedule a deferred render
	      var deferredLane = claimNextTransitionLane();
	      currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, deferredLane);
	      markSkippedUpdateLanes(deferredLane); // Set this to true to indicate that the rendered value is inconsistent
	      // from the latest value. The name "baseState" doesn't really match how we
	      // use it because we're reusing a state hook field instead of creating a
	      // new one.

	      hook.baseState = true;
	    } // Reuse the previous value


	    return prevValue;
	  } else {
	    // This is not an urgent update, so we can use the latest value regardless
	    // of what it is. No need to defer it.
	    // However, if we're currently inside a spawned render, then we need to mark
	    // this as an update to prevent the fiber from bailing out.
	    //
	    // `baseState` is true when the current value is different from the rendered
	    // value. The name doesn't really match how we use it because we're reusing
	    // a state hook field instead of creating a new one.
	    if (hook.baseState) {
	      // Flip this back to false.
	      hook.baseState = false;
	      markWorkInProgressReceivedUpdate();
	    }

	    hook.memoizedState = value;
	    return value;
	  }
	}

	function startTransition(setPending, callback, options) {
	  var previousPriority = getCurrentUpdatePriority();
	  setCurrentUpdatePriority(higherEventPriority(previousPriority, ContinuousEventPriority));
	  setPending(true);
	  var prevTransition = ReactCurrentBatchConfig$2.transition;
	  ReactCurrentBatchConfig$2.transition = {};
	  var currentTransition = ReactCurrentBatchConfig$2.transition;

	  {
	    ReactCurrentBatchConfig$2.transition._updatedFibers = new Set();
	  }

	  try {
	    setPending(false);
	    callback();
	  } finally {
	    setCurrentUpdatePriority(previousPriority);
	    ReactCurrentBatchConfig$2.transition = prevTransition;

	    {
	      if (prevTransition === null && currentTransition._updatedFibers) {
	        var updatedFibersCount = currentTransition._updatedFibers.size;

	        if (updatedFibersCount > 10) {
	          warn('Detected a large number of updates inside startTransition. ' + 'If this is due to a subscription please re-write it to use React provided hooks. ' + 'Otherwise concurrent mode guarantees are off the table.');
	        }

	        currentTransition._updatedFibers.clear();
	      }
	    }
	  }
	}

	function mountTransition() {
	  var _mountState = mountState(false),
	      isPending = _mountState[0],
	      setPending = _mountState[1]; // The `start` method never changes.


	  var start = startTransition.bind(null, setPending);
	  var hook = mountWorkInProgressHook();
	  hook.memoizedState = start;
	  return [isPending, start];
	}

	function updateTransition() {
	  var _updateState = updateState(),
	      isPending = _updateState[0];

	  var hook = updateWorkInProgressHook();
	  var start = hook.memoizedState;
	  return [isPending, start];
	}

	function rerenderTransition() {
	  var _rerenderState = rerenderState(),
	      isPending = _rerenderState[0];

	  var hook = updateWorkInProgressHook();
	  var start = hook.memoizedState;
	  return [isPending, start];
	}

	var isUpdatingOpaqueValueInRenderPhase = false;
	function getIsUpdatingOpaqueValueInRenderPhaseInDEV() {
	  {
	    return isUpdatingOpaqueValueInRenderPhase;
	  }
	}

	function mountId() {
	  var hook = mountWorkInProgressHook();
	  var root = getWorkInProgressRoot(); // TODO: In Fizz, id generation is specific to each server config. Maybe we
	  // should do this in Fiber, too? Deferring this decision for now because
	  // there's no other place to store the prefix except for an internal field on
	  // the public createRoot object, which the fiber tree does not currently have
	  // a reference to.

	  var identifierPrefix = root.identifierPrefix;
	  var id;

	  if (getIsHydrating()) {
	    var treeId = getTreeId(); // Use a captial R prefix for server-generated ids.

	    id = ':' + identifierPrefix + 'R' + treeId; // Unless this is the first id at this level, append a number at the end
	    // that represents the position of this useId hook among all the useId
	    // hooks for this fiber.

	    var localId = localIdCounter++;

	    if (localId > 0) {
	      id += 'H' + localId.toString(32);
	    }

	    id += ':';
	  } else {
	    // Use a lowercase r prefix for client-generated ids.
	    var globalClientId = globalClientIdCounter++;
	    id = ':' + identifierPrefix + 'r' + globalClientId.toString(32) + ':';
	  }

	  hook.memoizedState = id;
	  return id;
	}

	function updateId() {
	  var hook = updateWorkInProgressHook();
	  var id = hook.memoizedState;
	  return id;
	}

	function dispatchReducerAction(fiber, queue, action) {
	  {
	    if (typeof arguments[3] === 'function') {
	      error("State updates from the useState() and useReducer() Hooks don't support the " + 'second callback argument. To execute a side effect after ' + 'rendering, declare it in the component body with useEffect().');
	    }
	  }

	  var lane = requestUpdateLane(fiber);
	  var update = {
	    lane: lane,
	    action: action,
	    hasEagerState: false,
	    eagerState: null,
	    next: null
	  };

	  if (isRenderPhaseUpdate(fiber)) {
	    enqueueRenderPhaseUpdate(queue, update);
	  } else {
	    var root = enqueueConcurrentHookUpdate(fiber, queue, update, lane);

	    if (root !== null) {
	      var eventTime = requestEventTime();
	      scheduleUpdateOnFiber(root, fiber, lane, eventTime);
	      entangleTransitionUpdate(root, queue, lane);
	    }
	  }

	  markUpdateInDevTools(fiber, lane);
	}

	function dispatchSetState(fiber, queue, action) {
	  {
	    if (typeof arguments[3] === 'function') {
	      error("State updates from the useState() and useReducer() Hooks don't support the " + 'second callback argument. To execute a side effect after ' + 'rendering, declare it in the component body with useEffect().');
	    }
	  }

	  var lane = requestUpdateLane(fiber);
	  var update = {
	    lane: lane,
	    action: action,
	    hasEagerState: false,
	    eagerState: null,
	    next: null
	  };

	  if (isRenderPhaseUpdate(fiber)) {
	    enqueueRenderPhaseUpdate(queue, update);
	  } else {
	    var alternate = fiber.alternate;

	    if (fiber.lanes === NoLanes && (alternate === null || alternate.lanes === NoLanes)) {
	      // The queue is currently empty, which means we can eagerly compute the
	      // next state before entering the render phase. If the new state is the
	      // same as the current state, we may be able to bail out entirely.
	      var lastRenderedReducer = queue.lastRenderedReducer;

	      if (lastRenderedReducer !== null) {
	        var prevDispatcher;

	        {
	          prevDispatcher = ReactCurrentDispatcher$1.current;
	          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
	        }

	        try {
	          var currentState = queue.lastRenderedState;
	          var eagerState = lastRenderedReducer(currentState, action); // Stash the eagerly computed state, and the reducer used to compute
	          // it, on the update object. If the reducer hasn't changed by the
	          // time we enter the render phase, then the eager state can be used
	          // without calling the reducer again.

	          update.hasEagerState = true;
	          update.eagerState = eagerState;

	          if (objectIs(eagerState, currentState)) {
	            // Fast path. We can bail out without scheduling React to re-render.
	            // It's still possible that we'll need to rebase this update later,
	            // if the component re-renders for a different reason and by that
	            // time the reducer has changed.
	            // TODO: Do we still need to entangle transitions in this case?
	            enqueueConcurrentHookUpdateAndEagerlyBailout(fiber, queue, update, lane);
	            return;
	          }
	        } catch (error) {// Suppress the error. It will throw again in the render phase.
	        } finally {
	          {
	            ReactCurrentDispatcher$1.current = prevDispatcher;
	          }
	        }
	      }
	    }

	    var root = enqueueConcurrentHookUpdate(fiber, queue, update, lane);

	    if (root !== null) {
	      var eventTime = requestEventTime();
	      scheduleUpdateOnFiber(root, fiber, lane, eventTime);
	      entangleTransitionUpdate(root, queue, lane);
	    }
	  }

	  markUpdateInDevTools(fiber, lane);
	}

	function isRenderPhaseUpdate(fiber) {
	  var alternate = fiber.alternate;
	  return fiber === currentlyRenderingFiber$1 || alternate !== null && alternate === currentlyRenderingFiber$1;
	}

	function enqueueRenderPhaseUpdate(queue, update) {
	  // This is a render phase update. Stash it in a lazily-created map of
	  // queue -> linked list of updates. After this render pass, we'll restart
	  // and apply the stashed updates on top of the work-in-progress hook.
	  didScheduleRenderPhaseUpdateDuringThisPass = didScheduleRenderPhaseUpdate = true;
	  var pending = queue.pending;

	  if (pending === null) {
	    // This is the first update. Create a circular list.
	    update.next = update;
	  } else {
	    update.next = pending.next;
	    pending.next = update;
	  }

	  queue.pending = update;
	} // TODO: Move to ReactFiberConcurrentUpdates?


	function entangleTransitionUpdate(root, queue, lane) {
	  if (isTransitionLane(lane)) {
	    var queueLanes = queue.lanes; // If any entangled lanes are no longer pending on the root, then they
	    // must have finished. We can remove them from the shared queue, which
	    // represents a superset of the actually pending lanes. In some cases we
	    // may entangle more than we need to, but that's OK. In fact it's worse if
	    // we *don't* entangle when we should.

	    queueLanes = intersectLanes(queueLanes, root.pendingLanes); // Entangle the new transition lane with the other transition lanes.

	    var newQueueLanes = mergeLanes(queueLanes, lane);
	    queue.lanes = newQueueLanes; // Even if queue.lanes already include lane, we don't know for certain if
	    // the lane finished since the last time we entangled it. So we need to
	    // entangle it again, just to be sure.

	    markRootEntangled(root, newQueueLanes);
	  }
	}

	function markUpdateInDevTools(fiber, lane, action) {

	  {
	    markStateUpdateScheduled(fiber, lane);
	  }
	}

	var ContextOnlyDispatcher = {
	  readContext: readContext,
	  useCallback: throwInvalidHookError,
	  useContext: throwInvalidHookError,
	  useEffect: throwInvalidHookError,
	  useImperativeHandle: throwInvalidHookError,
	  useInsertionEffect: throwInvalidHookError,
	  useLayoutEffect: throwInvalidHookError,
	  useMemo: throwInvalidHookError,
	  useReducer: throwInvalidHookError,
	  useRef: throwInvalidHookError,
	  useState: throwInvalidHookError,
	  useDebugValue: throwInvalidHookError,
	  useDeferredValue: throwInvalidHookError,
	  useTransition: throwInvalidHookError,
	  useMutableSource: throwInvalidHookError,
	  useSyncExternalStore: throwInvalidHookError,
	  useId: throwInvalidHookError,
	  unstable_isNewReconciler: enableNewReconciler
	};

	var HooksDispatcherOnMountInDEV = null;
	var HooksDispatcherOnMountWithHookTypesInDEV = null;
	var HooksDispatcherOnUpdateInDEV = null;
	var HooksDispatcherOnRerenderInDEV = null;
	var InvalidNestedHooksDispatcherOnMountInDEV = null;
	var InvalidNestedHooksDispatcherOnUpdateInDEV = null;
	var InvalidNestedHooksDispatcherOnRerenderInDEV = null;

	{
	  var warnInvalidContextAccess = function () {
	    error('Context can only be read while React is rendering. ' + 'In classes, you can read it in the render method or getDerivedStateFromProps. ' + 'In function components, you can read it directly in the function body, but not ' + 'inside Hooks like useReducer() or useMemo().');
	  };

	  var warnInvalidHookAccess = function () {
	    error('Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. ' + 'You can only call Hooks at the top level of your React function. ' + 'For more information, see ' + 'https://reactjs.org/link/rules-of-hooks');
	  };

	  HooksDispatcherOnMountInDEV = {
	    readContext: function (context) {
	      return readContext(context);
	    },
	    useCallback: function (callback, deps) {
	      currentHookNameInDev = 'useCallback';
	      mountHookTypesDev();
	      checkDepsAreArrayDev(deps);
	      return mountCallback(callback, deps);
	    },
	    useContext: function (context) {
	      currentHookNameInDev = 'useContext';
	      mountHookTypesDev();
	      return readContext(context);
	    },
	    useEffect: function (create, deps) {
	      currentHookNameInDev = 'useEffect';
	      mountHookTypesDev();
	      checkDepsAreArrayDev(deps);
	      return mountEffect(create, deps);
	    },
	    useImperativeHandle: function (ref, create, deps) {
	      currentHookNameInDev = 'useImperativeHandle';
	      mountHookTypesDev();
	      checkDepsAreArrayDev(deps);
	      return mountImperativeHandle(ref, create, deps);
	    },
	    useInsertionEffect: function (create, deps) {
	      currentHookNameInDev = 'useInsertionEffect';
	      mountHookTypesDev();
	      checkDepsAreArrayDev(deps);
	      return mountInsertionEffect(create, deps);
	    },
	    useLayoutEffect: function (create, deps) {
	      currentHookNameInDev = 'useLayoutEffect';
	      mountHookTypesDev();
	      checkDepsAreArrayDev(deps);
	      return mountLayoutEffect(create, deps);
	    },
	    useMemo: function (create, deps) {
	      currentHookNameInDev = 'useMemo';
	      mountHookTypesDev();
	      checkDepsAreArrayDev(deps);
	      var prevDispatcher = ReactCurrentDispatcher$1.current;
	      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

	      try {
	        return mountMemo(create, deps);
	      } finally {
	        ReactCurrentDispatcher$1.current = prevDispatcher;
	      }
	    },
	    useReducer: function (reducer, initialArg, init) {
	      currentHookNameInDev = 'useReducer';
	      mountHookTypesDev();
	      var prevDispatcher = ReactCurrentDispatcher$1.current;
	      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

	      try {
	        return mountReducer(reducer, initialArg, init);
	      } finally {
	        ReactCurrentDispatcher$1.current = prevDispatcher;
	      }
	    },
	    useRef: function (initialValue) {
	      currentHookNameInDev = 'useRef';
	      mountHookTypesDev();
	      return mountRef(initialValue);
	    },
	    useState: function (initialState) {
	      currentHookNameInDev = 'useState';
	      mountHookTypesDev();
	      var prevDispatcher = ReactCurrentDispatcher$1.current;
	      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

	      try {
	        return mountState(initialState);
	      } finally {
	        ReactCurrentDispatcher$1.current = prevDispatcher;
	      }
	    },
	    useDebugValue: function (value, formatterFn) {
	      currentHookNameInDev = 'useDebugValue';
	      mountHookTypesDev();
	      return mountDebugValue();
	    },
	    useDeferredValue: function (value) {
	      currentHookNameInDev = 'useDeferredValue';
	      mountHookTypesDev();
	      return mountDeferredValue(value);
	    },
	    useTransition: function () {
	      currentHookNameInDev = 'useTransition';
	      mountHookTypesDev();
	      return mountTransition();
	    },
	    useMutableSource: function (source, getSnapshot, subscribe) {
	      currentHookNameInDev = 'useMutableSource';
	      mountHookTypesDev();
	      return mountMutableSource();
	    },
	    useSyncExternalStore: function (subscribe, getSnapshot, getServerSnapshot) {
	      currentHookNameInDev = 'useSyncExternalStore';
	      mountHookTypesDev();
	      return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
	    },
	    useId: function () {
	      currentHookNameInDev = 'useId';
	      mountHookTypesDev();
	      return mountId();
	    },
	    unstable_isNewReconciler: enableNewReconciler
	  };

	  HooksDispatcherOnMountWithHookTypesInDEV = {
	    readContext: function (context) {
	      return readContext(context);
	    },
	    useCallback: function (callback, deps) {
	      currentHookNameInDev = 'useCallback';
	      updateHookTypesDev();
	      return mountCallback(callback, deps);
	    },
	    useContext: function (context) {
	      currentHookNameInDev = 'useContext';
	      updateHookTypesDev();
	      return readContext(context);
	    },
	    useEffect: function (create, deps) {
	      currentHookNameInDev = 'useEffect';
	      updateHookTypesDev();
	      return mountEffect(create, deps);
	    },
	    useImperativeHandle: function (ref, create, deps) {
	      currentHookNameInDev = 'useImperativeHandle';
	      updateHookTypesDev();
	      return mountImperativeHandle(ref, create, deps);
	    },
	    useInsertionEffect: function (create, deps) {
	      currentHookNameInDev = 'useInsertionEffect';
	      updateHookTypesDev();
	      return mountInsertionEffect(create, deps);
	    },
	    useLayoutEffect: function (create, deps) {
	      currentHookNameInDev = 'useLayoutEffect';
	      updateHookTypesDev();
	      return mountLayoutEffect(create, deps);
	    },
	    useMemo: function (create, deps) {
	      currentHookNameInDev = 'useMemo';
	      updateHookTypesDev();
	      var prevDispatcher = ReactCurrentDispatcher$1.current;
	      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

	      try {
	        return mountMemo(create, deps);
	      } finally {
	        ReactCurrentDispatcher$1.current = prevDispatcher;
	      }
	    },
	    useReducer: function (reducer, initialArg, init) {
	      currentHookNameInDev = 'useReducer';
	      updateHookTypesDev();
	      var prevDispatcher = ReactCurrentDispatcher$1.current;
	      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

	      try {
	        return mountReducer(reducer, initialArg, init);
	      } finally {
	        ReactCurrentDispatcher$1.current = prevDispatcher;
	      }
	    },
	    useRef: function (initialValue) {
	      currentHookNameInDev = 'useRef';
	      updateHookTypesDev();
	      return mountRef(initialValue);
	    },
	    useState: function (initialState) {
	      currentHookNameInDev = 'useState';
	      updateHookTypesDev();
	      var prevDispatcher = ReactCurrentDispatcher$1.current;
	      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

	      try {
	        return mountState(initialState);
	      } finally {
	        ReactCurrentDispatcher$1.current = prevDispatcher;
	      }
	    },
	    useDebugValue: function (value, formatterFn) {
	      currentHookNameInDev = 'useDebugValue';
	      updateHookTypesDev();
	      return mountDebugValue();
	    },
	    useDeferredValue: function (value) {
	      currentHookNameInDev = 'useDeferredValue';
	      updateHookTypesDev();
	      return mountDeferredValue(value);
	    },
	    useTransition: function () {
	      currentHookNameInDev = 'useTransition';
	      updateHookTypesDev();
	      return mountTransition();
	    },
	    useMutableSource: function (source, getSnapshot, subscribe) {
	      currentHookNameInDev = 'useMutableSource';
	      updateHookTypesDev();
	      return mountMutableSource();
	    },
	    useSyncExternalStore: function (subscribe, getSnapshot, getServerSnapshot) {
	      currentHookNameInDev = 'useSyncExternalStore';
	      updateHookTypesDev();
	      return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
	    },
	    useId: function () {
	      currentHookNameInDev = 'useId';
	      updateHookTypesDev();
	      return mountId();
	    },
	    unstable_isNewReconciler: enableNewReconciler
	  };

	  HooksDispatcherOnUpdateInDEV = {
	    readContext: function (context) {
	      return readContext(context);
	    },
	    useCallback: function (callback, deps) {
	      currentHookNameInDev = 'useCallback';
	      updateHookTypesDev();
	      return updateCallback(callback, deps);
	    },
	    useContext: function (context) {
	      currentHookNameInDev = 'useContext';
	      updateHookTypesDev();
	      return readContext(context);
	    },
	    useEffect: function (create, deps) {
	      currentHookNameInDev = 'useEffect';
	      updateHookTypesDev();
	      return updateEffect(create, deps);
	    },
	    useImperativeHandle: function (ref, create, deps) {
	      currentHookNameInDev = 'useImperativeHandle';
	      updateHookTypesDev();
	      return updateImperativeHandle(ref, create, deps);
	    },
	    useInsertionEffect: function (create, deps) {
	      currentHookNameInDev = 'useInsertionEffect';
	      updateHookTypesDev();
	      return updateInsertionEffect(create, deps);
	    },
	    useLayoutEffect: function (create, deps) {
	      currentHookNameInDev = 'useLayoutEffect';
	      updateHookTypesDev();
	      return updateLayoutEffect(create, deps);
	    },
	    useMemo: function (create, deps) {
	      currentHookNameInDev = 'useMemo';
	      updateHookTypesDev();
	      var prevDispatcher = ReactCurrentDispatcher$1.current;
	      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

	      try {
	        return updateMemo(create, deps);
	      } finally {
	        ReactCurrentDispatcher$1.current = prevDispatcher;
	      }
	    },
	    useReducer: function (reducer, initialArg, init) {
	      currentHookNameInDev = 'useReducer';
	      updateHookTypesDev();
	      var prevDispatcher = ReactCurrentDispatcher$1.current;
	      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

	      try {
	        return updateReducer(reducer, initialArg, init);
	      } finally {
	        ReactCurrentDispatcher$1.current = prevDispatcher;
	      }
	    },
	    useRef: function (initialValue) {
	      currentHookNameInDev = 'useRef';
	      updateHookTypesDev();
	      return updateRef();
	    },
	    useState: function (initialState) {
	      currentHookNameInDev = 'useState';
	      updateHookTypesDev();
	      var prevDispatcher = ReactCurrentDispatcher$1.current;
	      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

	      try {
	        return updateState(initialState);
	      } finally {
	        ReactCurrentDispatcher$1.current = prevDispatcher;
	      }
	    },
	    useDebugValue: function (value, formatterFn) {
	      currentHookNameInDev = 'useDebugValue';
	      updateHookTypesDev();
	      return updateDebugValue();
	    },
	    useDeferredValue: function (value) {
	      currentHookNameInDev = 'useDeferredValue';
	      updateHookTypesDev();
	      return updateDeferredValue(value);
	    },
	    useTransition: function () {
	      currentHookNameInDev = 'useTransition';
	      updateHookTypesDev();
	      return updateTransition();
	    },
	    useMutableSource: function (source, getSnapshot, subscribe) {
	      currentHookNameInDev = 'useMutableSource';
	      updateHookTypesDev();
	      return updateMutableSource();
	    },
	    useSyncExternalStore: function (subscribe, getSnapshot, getServerSnapshot) {
	      currentHookNameInDev = 'useSyncExternalStore';
	      updateHookTypesDev();
	      return updateSyncExternalStore(subscribe, getSnapshot);
	    },
	    useId: function () {
	      currentHookNameInDev = 'useId';
	      updateHookTypesDev();
	      return updateId();
	    },
	    unstable_isNewReconciler: enableNewReconciler
	  };

	  HooksDispatcherOnRerenderInDEV = {
	    readContext: function (context) {
	      return readContext(context);
	    },
	    useCallback: function (callback, deps) {
	      currentHookNameInDev = 'useCallback';
	      updateHookTypesDev();
	      return updateCallback(callback, deps);
	    },
	    useContext: function (context) {
	      currentHookNameInDev = 'useContext';
	      updateHookTypesDev();
	      return readContext(context);
	    },
	    useEffect: function (create, deps) {
	      currentHookNameInDev = 'useEffect';
	      updateHookTypesDev();
	      return updateEffect(create, deps);
	    },
	    useImperativeHandle: function (ref, create, deps) {
	      currentHookNameInDev = 'useImperativeHandle';
	      updateHookTypesDev();
	      return updateImperativeHandle(ref, create, deps);
	    },
	    useInsertionEffect: function (create, deps) {
	      currentHookNameInDev = 'useInsertionEffect';
	      updateHookTypesDev();
	      return updateInsertionEffect(create, deps);
	    },
	    useLayoutEffect: function (create, deps) {
	      currentHookNameInDev = 'useLayoutEffect';
	      updateHookTypesDev();
	      return updateLayoutEffect(create, deps);
	    },
	    useMemo: function (create, deps) {
	      currentHookNameInDev = 'useMemo';
	      updateHookTypesDev();
	      var prevDispatcher = ReactCurrentDispatcher$1.current;
	      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;

	      try {
	        return updateMemo(create, deps);
	      } finally {
	        ReactCurrentDispatcher$1.current = prevDispatcher;
	      }
	    },
	    useReducer: function (reducer, initialArg, init) {
	      currentHookNameInDev = 'useReducer';
	      updateHookTypesDev();
	      var prevDispatcher = ReactCurrentDispatcher$1.current;
	      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;

	      try {
	        return rerenderReducer(reducer, initialArg, init);
	      } finally {
	        ReactCurrentDispatcher$1.current = prevDispatcher;
	      }
	    },
	    useRef: function (initialValue) {
	      currentHookNameInDev = 'useRef';
	      updateHookTypesDev();
	      return updateRef();
	    },
	    useState: function (initialState) {
	      currentHookNameInDev = 'useState';
	      updateHookTypesDev();
	      var prevDispatcher = ReactCurrentDispatcher$1.current;
	      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;

	      try {
	        return rerenderState(initialState);
	      } finally {
	        ReactCurrentDispatcher$1.current = prevDispatcher;
	      }
	    },
	    useDebugValue: function (value, formatterFn) {
	      currentHookNameInDev = 'useDebugValue';
	      updateHookTypesDev();
	      return updateDebugValue();
	    },
	    useDeferredValue: function (value) {
	      currentHookNameInDev = 'useDeferredValue';
	      updateHookTypesDev();
	      return rerenderDeferredValue(value);
	    },
	    useTransition: function () {
	      currentHookNameInDev = 'useTransition';
	      updateHookTypesDev();
	      return rerenderTransition();
	    },
	    useMutableSource: function (source, getSnapshot, subscribe) {
	      currentHookNameInDev = 'useMutableSource';
	      updateHookTypesDev();
	      return updateMutableSource();
	    },
	    useSyncExternalStore: function (subscribe, getSnapshot, getServerSnapshot) {
	      currentHookNameInDev = 'useSyncExternalStore';
	      updateHookTypesDev();
	      return updateSyncExternalStore(subscribe, getSnapshot);
	    },
	    useId: function () {
	      currentHookNameInDev = 'useId';
	      updateHookTypesDev();
	      return updateId();
	    },
	    unstable_isNewReconciler: enableNewReconciler
	  };

	  InvalidNestedHooksDispatcherOnMountInDEV = {
	    readContext: function (context) {
	      warnInvalidContextAccess();
	      return readContext(context);
	    },
	    useCallback: function (callback, deps) {
	      currentHookNameInDev = 'useCallback';
	      warnInvalidHookAccess();
	      mountHookTypesDev();
	      return mountCallback(callback, deps);
	    },
	    useContext: function (context) {
	      currentHookNameInDev = 'useContext';
	      warnInvalidHookAccess();
	      mountHookTypesDev();
	      return readContext(context);
	    },
	    useEffect: function (create, deps) {
	      currentHookNameInDev = 'useEffect';
	      warnInvalidHookAccess();
	      mountHookTypesDev();
	      return mountEffect(create, deps);
	    },
	    useImperativeHandle: function (ref, create, deps) {
	      currentHookNameInDev = 'useImperativeHandle';
	      warnInvalidHookAccess();
	      mountHookTypesDev();
	      return mountImperativeHandle(ref, create, deps);
	    },
	    useInsertionEffect: function (create, deps) {
	      currentHookNameInDev = 'useInsertionEffect';
	      warnInvalidHookAccess();
	      mountHookTypesDev();
	      return mountInsertionEffect(create, deps);
	    },
	    useLayoutEffect: function (create, deps) {
	      currentHookNameInDev = 'useLayoutEffect';
	      warnInvalidHookAccess();
	      mountHookTypesDev();
	      return mountLayoutEffect(create, deps);
	    },
	    useMemo: function (create, deps) {
	      currentHookNameInDev = 'useMemo';
	      warnInvalidHookAccess();
	      mountHookTypesDev();
	      var prevDispatcher = ReactCurrentDispatcher$1.current;
	      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

	      try {
	        return mountMemo(create, deps);
	      } finally {
	        ReactCurrentDispatcher$1.current = prevDispatcher;
	      }
	    },
	    useReducer: function (reducer, initialArg, init) {
	      currentHookNameInDev = 'useReducer';
	      warnInvalidHookAccess();
	      mountHookTypesDev();
	      var prevDispatcher = ReactCurrentDispatcher$1.current;
	      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

	      try {
	        return mountReducer(reducer, initialArg, init);
	      } finally {
	        ReactCurrentDispatcher$1.current = prevDispatcher;
	      }
	    },
	    useRef: function (initialValue) {
	      currentHookNameInDev = 'useRef';
	      warnInvalidHookAccess();
	      mountHookTypesDev();
	      return mountRef(initialValue);
	    },
	    useState: function (initialState) {
	      currentHookNameInDev = 'useState';
	      warnInvalidHookAccess();
	      mountHookTypesDev();
	      var prevDispatcher = ReactCurrentDispatcher$1.current;
	      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

	      try {
	        return mountState(initialState);
	      } finally {
	        ReactCurrentDispatcher$1.current = prevDispatcher;
	      }
	    },
	    useDebugValue: function (value, formatterFn) {
	      currentHookNameInDev = 'useDebugValue';
	      warnInvalidHookAccess();
	      mountHookTypesDev();
	      return mountDebugValue();
	    },
	    useDeferredValue: function (value) {
	      currentHookNameInDev = 'useDeferredValue';
	      warnInvalidHookAccess();
	      mountHookTypesDev();
	      return mountDeferredValue(value);
	    },
	    useTransition: function () {
	      currentHookNameInDev = 'useTransition';
	      warnInvalidHookAccess();
	      mountHookTypesDev();
	      return mountTransition();
	    },
	    useMutableSource: function (source, getSnapshot, subscribe) {
	      currentHookNameInDev = 'useMutableSource';
	      warnInvalidHookAccess();
	      mountHookTypesDev();
	      return mountMutableSource();
	    },
	    useSyncExternalStore: function (subscribe, getSnapshot, getServerSnapshot) {
	      currentHookNameInDev = 'useSyncExternalStore';
	      warnInvalidHookAccess();
	      mountHookTypesDev();
	      return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
	    },
	    useId: function () {
	      currentHookNameInDev = 'useId';
	      warnInvalidHookAccess();
	      mountHookTypesDev();
	      return mountId();
	    },
	    unstable_isNewReconciler: enableNewReconciler
	  };

	  InvalidNestedHooksDispatcherOnUpdateInDEV = {
	    readContext: function (context) {
	      warnInvalidContextAccess();
	      return readContext(context);
	    },
	    useCallback: function (callback, deps) {
	      currentHookNameInDev = 'useCallback';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      return updateCallback(callback, deps);
	    },
	    useContext: function (context) {
	      currentHookNameInDev = 'useContext';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      return readContext(context);
	    },
	    useEffect: function (create, deps) {
	      currentHookNameInDev = 'useEffect';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      return updateEffect(create, deps);
	    },
	    useImperativeHandle: function (ref, create, deps) {
	      currentHookNameInDev = 'useImperativeHandle';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      return updateImperativeHandle(ref, create, deps);
	    },
	    useInsertionEffect: function (create, deps) {
	      currentHookNameInDev = 'useInsertionEffect';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      return updateInsertionEffect(create, deps);
	    },
	    useLayoutEffect: function (create, deps) {
	      currentHookNameInDev = 'useLayoutEffect';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      return updateLayoutEffect(create, deps);
	    },
	    useMemo: function (create, deps) {
	      currentHookNameInDev = 'useMemo';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      var prevDispatcher = ReactCurrentDispatcher$1.current;
	      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

	      try {
	        return updateMemo(create, deps);
	      } finally {
	        ReactCurrentDispatcher$1.current = prevDispatcher;
	      }
	    },
	    useReducer: function (reducer, initialArg, init) {
	      currentHookNameInDev = 'useReducer';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      var prevDispatcher = ReactCurrentDispatcher$1.current;
	      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

	      try {
	        return updateReducer(reducer, initialArg, init);
	      } finally {
	        ReactCurrentDispatcher$1.current = prevDispatcher;
	      }
	    },
	    useRef: function (initialValue) {
	      currentHookNameInDev = 'useRef';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      return updateRef();
	    },
	    useState: function (initialState) {
	      currentHookNameInDev = 'useState';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      var prevDispatcher = ReactCurrentDispatcher$1.current;
	      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

	      try {
	        return updateState(initialState);
	      } finally {
	        ReactCurrentDispatcher$1.current = prevDispatcher;
	      }
	    },
	    useDebugValue: function (value, formatterFn) {
	      currentHookNameInDev = 'useDebugValue';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      return updateDebugValue();
	    },
	    useDeferredValue: function (value) {
	      currentHookNameInDev = 'useDeferredValue';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      return updateDeferredValue(value);
	    },
	    useTransition: function () {
	      currentHookNameInDev = 'useTransition';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      return updateTransition();
	    },
	    useMutableSource: function (source, getSnapshot, subscribe) {
	      currentHookNameInDev = 'useMutableSource';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      return updateMutableSource();
	    },
	    useSyncExternalStore: function (subscribe, getSnapshot, getServerSnapshot) {
	      currentHookNameInDev = 'useSyncExternalStore';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      return updateSyncExternalStore(subscribe, getSnapshot);
	    },
	    useId: function () {
	      currentHookNameInDev = 'useId';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      return updateId();
	    },
	    unstable_isNewReconciler: enableNewReconciler
	  };

	  InvalidNestedHooksDispatcherOnRerenderInDEV = {
	    readContext: function (context) {
	      warnInvalidContextAccess();
	      return readContext(context);
	    },
	    useCallback: function (callback, deps) {
	      currentHookNameInDev = 'useCallback';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      return updateCallback(callback, deps);
	    },
	    useContext: function (context) {
	      currentHookNameInDev = 'useContext';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      return readContext(context);
	    },
	    useEffect: function (create, deps) {
	      currentHookNameInDev = 'useEffect';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      return updateEffect(create, deps);
	    },
	    useImperativeHandle: function (ref, create, deps) {
	      currentHookNameInDev = 'useImperativeHandle';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      return updateImperativeHandle(ref, create, deps);
	    },
	    useInsertionEffect: function (create, deps) {
	      currentHookNameInDev = 'useInsertionEffect';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      return updateInsertionEffect(create, deps);
	    },
	    useLayoutEffect: function (create, deps) {
	      currentHookNameInDev = 'useLayoutEffect';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      return updateLayoutEffect(create, deps);
	    },
	    useMemo: function (create, deps) {
	      currentHookNameInDev = 'useMemo';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      var prevDispatcher = ReactCurrentDispatcher$1.current;
	      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

	      try {
	        return updateMemo(create, deps);
	      } finally {
	        ReactCurrentDispatcher$1.current = prevDispatcher;
	      }
	    },
	    useReducer: function (reducer, initialArg, init) {
	      currentHookNameInDev = 'useReducer';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      var prevDispatcher = ReactCurrentDispatcher$1.current;
	      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

	      try {
	        return rerenderReducer(reducer, initialArg, init);
	      } finally {
	        ReactCurrentDispatcher$1.current = prevDispatcher;
	      }
	    },
	    useRef: function (initialValue) {
	      currentHookNameInDev = 'useRef';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      return updateRef();
	    },
	    useState: function (initialState) {
	      currentHookNameInDev = 'useState';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      var prevDispatcher = ReactCurrentDispatcher$1.current;
	      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

	      try {
	        return rerenderState(initialState);
	      } finally {
	        ReactCurrentDispatcher$1.current = prevDispatcher;
	      }
	    },
	    useDebugValue: function (value, formatterFn) {
	      currentHookNameInDev = 'useDebugValue';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      return updateDebugValue();
	    },
	    useDeferredValue: function (value) {
	      currentHookNameInDev = 'useDeferredValue';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      return rerenderDeferredValue(value);
	    },
	    useTransition: function () {
	      currentHookNameInDev = 'useTransition';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      return rerenderTransition();
	    },
	    useMutableSource: function (source, getSnapshot, subscribe) {
	      currentHookNameInDev = 'useMutableSource';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      return updateMutableSource();
	    },
	    useSyncExternalStore: function (subscribe, getSnapshot, getServerSnapshot) {
	      currentHookNameInDev = 'useSyncExternalStore';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      return updateSyncExternalStore(subscribe, getSnapshot);
	    },
	    useId: function () {
	      currentHookNameInDev = 'useId';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      return updateId();
	    },
	    unstable_isNewReconciler: enableNewReconciler
	  };
	}

	var now$1 = Scheduler.unstable_now;
	var commitTime = 0;
	var layoutEffectStartTime = -1;
	var profilerStartTime = -1;
	var passiveEffectStartTime = -1;
	/**
	 * Tracks whether the current update was a nested/cascading update (scheduled from a layout effect).
	 *
	 * The overall sequence is:
	 *   1. render
	 *   2. commit (and call `onRender`, `onCommit`)
	 *   3. check for nested updates
	 *   4. flush passive effects (and call `onPostCommit`)
	 *
	 * Nested updates are identified in step 3 above,
	 * but step 4 still applies to the work that was just committed.
	 * We use two flags to track nested updates then:
	 * one tracks whether the upcoming update is a nested update,
	 * and the other tracks whether the current update was a nested update.
	 * The first value gets synced to the second at the start of the render phase.
	 */

	var currentUpdateIsNested = false;
	var nestedUpdateScheduled = false;

	function isCurrentUpdateNested() {
	  return currentUpdateIsNested;
	}

	function markNestedUpdateScheduled() {
	  {
	    nestedUpdateScheduled = true;
	  }
	}

	function resetNestedUpdateFlag() {
	  {
	    currentUpdateIsNested = false;
	    nestedUpdateScheduled = false;
	  }
	}

	function syncNestedUpdateFlag() {
	  {
	    currentUpdateIsNested = nestedUpdateScheduled;
	    nestedUpdateScheduled = false;
	  }
	}

	function getCommitTime() {
	  return commitTime;
	}

	function recordCommitTime() {

	  commitTime = now$1();
	}

	function startProfilerTimer(fiber) {

	  profilerStartTime = now$1();

	  if (fiber.actualStartTime < 0) {
	    fiber.actualStartTime = now$1();
	  }
	}

	function stopProfilerTimerIfRunning(fiber) {

	  profilerStartTime = -1;
	}

	function stopProfilerTimerIfRunningAndRecordDelta(fiber, overrideBaseTime) {

	  if (profilerStartTime >= 0) {
	    var elapsedTime = now$1() - profilerStartTime;
	    fiber.actualDuration += elapsedTime;

	    if (overrideBaseTime) {
	      fiber.selfBaseDuration = elapsedTime;
	    }

	    profilerStartTime = -1;
	  }
	}

	function recordLayoutEffectDuration(fiber) {

	  if (layoutEffectStartTime >= 0) {
	    var elapsedTime = now$1() - layoutEffectStartTime;
	    layoutEffectStartTime = -1; // Store duration on the next nearest Profiler ancestor
	    // Or the root (for the DevTools Profiler to read)

	    var parentFiber = fiber.return;

	    while (parentFiber !== null) {
	      switch (parentFiber.tag) {
	        case HostRoot:
	          var root = parentFiber.stateNode;
	          root.effectDuration += elapsedTime;
	          return;

	        case Profiler:
	          var parentStateNode = parentFiber.stateNode;
	          parentStateNode.effectDuration += elapsedTime;
	          return;
	      }

	      parentFiber = parentFiber.return;
	    }
	  }
	}

	function recordPassiveEffectDuration(fiber) {

	  if (passiveEffectStartTime >= 0) {
	    var elapsedTime = now$1() - passiveEffectStartTime;
	    passiveEffectStartTime = -1; // Store duration on the next nearest Profiler ancestor
	    // Or the root (for the DevTools Profiler to read)

	    var parentFiber = fiber.return;

	    while (parentFiber !== null) {
	      switch (parentFiber.tag) {
	        case HostRoot:
	          var root = parentFiber.stateNode;

	          if (root !== null) {
	            root.passiveEffectDuration += elapsedTime;
	          }

	          return;

	        case Profiler:
	          var parentStateNode = parentFiber.stateNode;

	          if (parentStateNode !== null) {
	            // Detached fibers have their state node cleared out.
	            // In this case, the return pointer is also cleared out,
	            // so we won't be able to report the time spent in this Profiler's subtree.
	            parentStateNode.passiveEffectDuration += elapsedTime;
	          }

	          return;
	      }

	      parentFiber = parentFiber.return;
	    }
	  }
	}

	function startLayoutEffectTimer() {

	  layoutEffectStartTime = now$1();
	}

	function startPassiveEffectTimer() {

	  passiveEffectStartTime = now$1();
	}

	function transferActualDuration(fiber) {
	  // Transfer time spent rendering these children so we don't lose it
	  // after we rerender. This is used as a helper in special cases
	  // where we should count the work of multiple passes.
	  var child = fiber.child;

	  while (child) {
	    fiber.actualDuration += child.actualDuration;
	    child = child.sibling;
	  }
	}

	function resolveDefaultProps(Component, baseProps) {
	  if (Component && Component.defaultProps) {
	    // Resolve default props. Taken from ReactElement
	    var props = assign({}, baseProps);
	    var defaultProps = Component.defaultProps;

	    for (var propName in defaultProps) {
	      if (props[propName] === undefined) {
	        props[propName] = defaultProps[propName];
	      }
	    }

	    return props;
	  }

	  return baseProps;
	}

	var fakeInternalInstance = {};
	var didWarnAboutStateAssignmentForComponent;
	var didWarnAboutUninitializedState;
	var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;
	var didWarnAboutLegacyLifecyclesAndDerivedState;
	var didWarnAboutUndefinedDerivedState;
	var warnOnUndefinedDerivedState;
	var warnOnInvalidCallback;
	var didWarnAboutDirectlyAssigningPropsToState;
	var didWarnAboutContextTypeAndContextTypes;
	var didWarnAboutInvalidateContextType;
	var didWarnAboutLegacyContext$1;

	{
	  didWarnAboutStateAssignmentForComponent = new Set();
	  didWarnAboutUninitializedState = new Set();
	  didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = new Set();
	  didWarnAboutLegacyLifecyclesAndDerivedState = new Set();
	  didWarnAboutDirectlyAssigningPropsToState = new Set();
	  didWarnAboutUndefinedDerivedState = new Set();
	  didWarnAboutContextTypeAndContextTypes = new Set();
	  didWarnAboutInvalidateContextType = new Set();
	  didWarnAboutLegacyContext$1 = new Set();
	  var didWarnOnInvalidCallback = new Set();

	  warnOnInvalidCallback = function (callback, callerName) {
	    if (callback === null || typeof callback === 'function') {
	      return;
	    }

	    var key = callerName + '_' + callback;

	    if (!didWarnOnInvalidCallback.has(key)) {
	      didWarnOnInvalidCallback.add(key);

	      error('%s(...): Expected the last optional `callback` argument to be a ' + 'function. Instead received: %s.', callerName, callback);
	    }
	  };

	  warnOnUndefinedDerivedState = function (type, partialState) {
	    if (partialState === undefined) {
	      var componentName = getComponentNameFromType(type) || 'Component';

	      if (!didWarnAboutUndefinedDerivedState.has(componentName)) {
	        didWarnAboutUndefinedDerivedState.add(componentName);

	        error('%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. ' + 'You have returned undefined.', componentName);
	      }
	    }
	  }; // This is so gross but it's at least non-critical and can be removed if
	  // it causes problems. This is meant to give a nicer error message for
	  // ReactDOM15.unstable_renderSubtreeIntoContainer(reactDOM16Component,
	  // ...)) which otherwise throws a "_processChildContext is not a function"
	  // exception.


	  Object.defineProperty(fakeInternalInstance, '_processChildContext', {
	    enumerable: false,
	    value: function () {
	      throw new Error('_processChildContext is not available in React 16+. This likely ' + 'means you have multiple copies of React and are attempting to nest ' + 'a React 15 tree inside a React 16 tree using ' + "unstable_renderSubtreeIntoContainer, which isn't supported. Try " + 'to make sure you have only one copy of React (and ideally, switch ' + 'to ReactDOM.createPortal).');
	    }
	  });
	  Object.freeze(fakeInternalInstance);
	}

	function applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, nextProps) {
	  var prevState = workInProgress.memoizedState;
	  var partialState = getDerivedStateFromProps(nextProps, prevState);

	  {
	    if ( workInProgress.mode & StrictLegacyMode) {
	      setIsStrictModeForDevtools(true);

	      try {
	        // Invoke the function an extra time to help detect side-effects.
	        partialState = getDerivedStateFromProps(nextProps, prevState);
	      } finally {
	        setIsStrictModeForDevtools(false);
	      }
	    }

	    warnOnUndefinedDerivedState(ctor, partialState);
	  } // Merge the partial state and the previous state.


	  var memoizedState = partialState === null || partialState === undefined ? prevState : assign({}, prevState, partialState);
	  workInProgress.memoizedState = memoizedState; // Once the update queue is empty, persist the derived state onto the
	  // base state.

	  if (workInProgress.lanes === NoLanes) {
	    // Queue is always non-null for classes
	    var updateQueue = workInProgress.updateQueue;
	    updateQueue.baseState = memoizedState;
	  }
	}

	var classComponentUpdater = {
	  isMounted: isMounted,
	  enqueueSetState: function (inst, payload, callback) {
	    var fiber = get(inst);
	    var eventTime = requestEventTime();
	    var lane = requestUpdateLane(fiber);
	    var update = createUpdate(eventTime, lane);
	    update.payload = payload;

	    if (callback !== undefined && callback !== null) {
	      {
	        warnOnInvalidCallback(callback, 'setState');
	      }

	      update.callback = callback;
	    }

	    var root = enqueueUpdate(fiber, update, lane);

	    if (root !== null) {
	      scheduleUpdateOnFiber(root, fiber, lane, eventTime);
	      entangleTransitions(root, fiber, lane);
	    }

	    {
	      markStateUpdateScheduled(fiber, lane);
	    }
	  },
	  enqueueReplaceState: function (inst, payload, callback) {
	    var fiber = get(inst);
	    var eventTime = requestEventTime();
	    var lane = requestUpdateLane(fiber);
	    var update = createUpdate(eventTime, lane);
	    update.tag = ReplaceState;
	    update.payload = payload;

	    if (callback !== undefined && callback !== null) {
	      {
	        warnOnInvalidCallback(callback, 'replaceState');
	      }

	      update.callback = callback;
	    }

	    var root = enqueueUpdate(fiber, update, lane);

	    if (root !== null) {
	      scheduleUpdateOnFiber(root, fiber, lane, eventTime);
	      entangleTransitions(root, fiber, lane);
	    }

	    {
	      markStateUpdateScheduled(fiber, lane);
	    }
	  },
	  enqueueForceUpdate: function (inst, callback) {
	    var fiber = get(inst);
	    var eventTime = requestEventTime();
	    var lane = requestUpdateLane(fiber);
	    var update = createUpdate(eventTime, lane);
	    update.tag = ForceUpdate;

	    if (callback !== undefined && callback !== null) {
	      {
	        warnOnInvalidCallback(callback, 'forceUpdate');
	      }

	      update.callback = callback;
	    }

	    var root = enqueueUpdate(fiber, update, lane);

	    if (root !== null) {
	      scheduleUpdateOnFiber(root, fiber, lane, eventTime);
	      entangleTransitions(root, fiber, lane);
	    }

	    {
	      markForceUpdateScheduled(fiber, lane);
	    }
	  }
	};

	function checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext) {
	  var instance = workInProgress.stateNode;

	  if (typeof instance.shouldComponentUpdate === 'function') {
	    var shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);

	    {
	      if ( workInProgress.mode & StrictLegacyMode) {
	        setIsStrictModeForDevtools(true);

	        try {
	          // Invoke the function an extra time to help detect side-effects.
	          shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
	        } finally {
	          setIsStrictModeForDevtools(false);
	        }
	      }

	      if (shouldUpdate === undefined) {
	        error('%s.shouldComponentUpdate(): Returned undefined instead of a ' + 'boolean value. Make sure to return true or false.', getComponentNameFromType(ctor) || 'Component');
	      }
	    }

	    return shouldUpdate;
	  }

	  if (ctor.prototype && ctor.prototype.isPureReactComponent) {
	    return !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState);
	  }

	  return true;
	}

	function checkClassInstance(workInProgress, ctor, newProps) {
	  var instance = workInProgress.stateNode;

	  {
	    var name = getComponentNameFromType(ctor) || 'Component';
	    var renderPresent = instance.render;

	    if (!renderPresent) {
	      if (ctor.prototype && typeof ctor.prototype.render === 'function') {
	        error('%s(...): No `render` method found on the returned component ' + 'instance: did you accidentally return an object from the constructor?', name);
	      } else {
	        error('%s(...): No `render` method found on the returned component ' + 'instance: you may have forgotten to define `render`.', name);
	      }
	    }

	    if (instance.getInitialState && !instance.getInitialState.isReactClassApproved && !instance.state) {
	      error('getInitialState was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Did you mean to define a state property instead?', name);
	    }

	    if (instance.getDefaultProps && !instance.getDefaultProps.isReactClassApproved) {
	      error('getDefaultProps was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Use a static property to define defaultProps instead.', name);
	    }

	    if (instance.propTypes) {
	      error('propTypes was defined as an instance property on %s. Use a static ' + 'property to define propTypes instead.', name);
	    }

	    if (instance.contextType) {
	      error('contextType was defined as an instance property on %s. Use a static ' + 'property to define contextType instead.', name);
	    }

	    {
	      if (ctor.childContextTypes && !didWarnAboutLegacyContext$1.has(ctor) && // Strict Mode has its own warning for legacy context, so we can skip
	      // this one.
	      (workInProgress.mode & StrictLegacyMode) === NoMode) {
	        didWarnAboutLegacyContext$1.add(ctor);

	        error('%s uses the legacy childContextTypes API which is no longer ' + 'supported and will be removed in the next major release. Use ' + 'React.createContext() instead\n\n.' + 'Learn more about this warning here: https://reactjs.org/link/legacy-context', name);
	      }

	      if (ctor.contextTypes && !didWarnAboutLegacyContext$1.has(ctor) && // Strict Mode has its own warning for legacy context, so we can skip
	      // this one.
	      (workInProgress.mode & StrictLegacyMode) === NoMode) {
	        didWarnAboutLegacyContext$1.add(ctor);

	        error('%s uses the legacy contextTypes API which is no longer supported ' + 'and will be removed in the next major release. Use ' + 'React.createContext() with static contextType instead.\n\n' + 'Learn more about this warning here: https://reactjs.org/link/legacy-context', name);
	      }

	      if (instance.contextTypes) {
	        error('contextTypes was defined as an instance property on %s. Use a static ' + 'property to define contextTypes instead.', name);
	      }

	      if (ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor)) {
	        didWarnAboutContextTypeAndContextTypes.add(ctor);

	        error('%s declares both contextTypes and contextType static properties. ' + 'The legacy contextTypes property will be ignored.', name);
	      }
	    }

	    if (typeof instance.componentShouldUpdate === 'function') {
	      error('%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', name);
	    }

	    if (ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== 'undefined') {
	      error('%s has a method called shouldComponentUpdate(). ' + 'shouldComponentUpdate should not be used when extending React.PureComponent. ' + 'Please extend React.Component if shouldComponentUpdate is used.', getComponentNameFromType(ctor) || 'A pure component');
	    }

	    if (typeof instance.componentDidUnmount === 'function') {
	      error('%s has a method called ' + 'componentDidUnmount(). But there is no such lifecycle method. ' + 'Did you mean componentWillUnmount()?', name);
	    }

	    if (typeof instance.componentDidReceiveProps === 'function') {
	      error('%s has a method called ' + 'componentDidReceiveProps(). But there is no such lifecycle method. ' + 'If you meant to update the state in response to changing props, ' + 'use componentWillReceiveProps(). If you meant to fetch data or ' + 'run side-effects or mutations after React has updated the UI, use componentDidUpdate().', name);
	    }

	    if (typeof instance.componentWillRecieveProps === 'function') {
	      error('%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', name);
	    }

	    if (typeof instance.UNSAFE_componentWillRecieveProps === 'function') {
	      error('%s has a method called ' + 'UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?', name);
	    }

	    var hasMutatedProps = instance.props !== newProps;

	    if (instance.props !== undefined && hasMutatedProps) {
	      error('%s(...): When calling super() in `%s`, make sure to pass ' + "up the same props that your component's constructor was passed.", name, name);
	    }

	    if (instance.defaultProps) {
	      error('Setting defaultProps as an instance property on %s is not supported and will be ignored.' + ' Instead, define defaultProps as a static property on %s.', name, name);
	    }

	    if (typeof instance.getSnapshotBeforeUpdate === 'function' && typeof instance.componentDidUpdate !== 'function' && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)) {
	      didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);

	      error('%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). ' + 'This component defines getSnapshotBeforeUpdate() only.', getComponentNameFromType(ctor));
	    }

	    if (typeof instance.getDerivedStateFromProps === 'function') {
	      error('%s: getDerivedStateFromProps() is defined as an instance method ' + 'and will be ignored. Instead, declare it as a static method.', name);
	    }

	    if (typeof instance.getDerivedStateFromError === 'function') {
	      error('%s: getDerivedStateFromError() is defined as an instance method ' + 'and will be ignored. Instead, declare it as a static method.', name);
	    }

	    if (typeof ctor.getSnapshotBeforeUpdate === 'function') {
	      error('%s: getSnapshotBeforeUpdate() is defined as a static method ' + 'and will be ignored. Instead, declare it as an instance method.', name);
	    }

	    var _state = instance.state;

	    if (_state && (typeof _state !== 'object' || isArray(_state))) {
	      error('%s.state: must be set to an object or null', name);
	    }

	    if (typeof instance.getChildContext === 'function' && typeof ctor.childContextTypes !== 'object') {
	      error('%s.getChildContext(): childContextTypes must be defined in order to ' + 'use getChildContext().', name);
	    }
	  }
	}

	function adoptClassInstance(workInProgress, instance) {
	  instance.updater = classComponentUpdater;
	  workInProgress.stateNode = instance; // The instance needs access to the fiber so that it can schedule updates

	  set(instance, workInProgress);

	  {
	    instance._reactInternalInstance = fakeInternalInstance;
	  }
	}

	function constructClassInstance(workInProgress, ctor, props) {
	  var isLegacyContextConsumer = false;
	  var unmaskedContext = emptyContextObject;
	  var context = emptyContextObject;
	  var contextType = ctor.contextType;

	  {
	    if ('contextType' in ctor) {
	      var isValid = // Allow null for conditional declaration
	      contextType === null || contextType !== undefined && contextType.$$typeof === REACT_CONTEXT_TYPE && contextType._context === undefined; // Not a <Context.Consumer>

	      if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {
	        didWarnAboutInvalidateContextType.add(ctor);
	        var addendum = '';

	        if (contextType === undefined) {
	          addendum = ' However, it is set to undefined. ' + 'This can be caused by a typo or by mixing up named and default imports. ' + 'This can also happen due to a circular dependency, so ' + 'try moving the createContext() call to a separate file.';
	        } else if (typeof contextType !== 'object') {
	          addendum = ' However, it is set to a ' + typeof contextType + '.';
	        } else if (contextType.$$typeof === REACT_PROVIDER_TYPE) {
	          addendum = ' Did you accidentally pass the Context.Provider instead?';
	        } else if (contextType._context !== undefined) {
	          // <Context.Consumer>
	          addendum = ' Did you accidentally pass the Context.Consumer instead?';
	        } else {
	          addendum = ' However, it is set to an object with keys {' + Object.keys(contextType).join(', ') + '}.';
	        }

	        error('%s defines an invalid contextType. ' + 'contextType should point to the Context object returned by React.createContext().%s', getComponentNameFromType(ctor) || 'Component', addendum);
	      }
	    }
	  }

	  if (typeof contextType === 'object' && contextType !== null) {
	    context = readContext(contextType);
	  } else {
	    unmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
	    var contextTypes = ctor.contextTypes;
	    isLegacyContextConsumer = contextTypes !== null && contextTypes !== undefined;
	    context = isLegacyContextConsumer ? getMaskedContext(workInProgress, unmaskedContext) : emptyContextObject;
	  }

	  var instance = new ctor(props, context); // Instantiate twice to help detect side-effects.

	  {
	    if ( workInProgress.mode & StrictLegacyMode) {
	      setIsStrictModeForDevtools(true);

	      try {
	        instance = new ctor(props, context); // eslint-disable-line no-new
	      } finally {
	        setIsStrictModeForDevtools(false);
	      }
	    }
	  }

	  var state = workInProgress.memoizedState = instance.state !== null && instance.state !== undefined ? instance.state : null;
	  adoptClassInstance(workInProgress, instance);

	  {
	    if (typeof ctor.getDerivedStateFromProps === 'function' && state === null) {
	      var componentName = getComponentNameFromType(ctor) || 'Component';

	      if (!didWarnAboutUninitializedState.has(componentName)) {
	        didWarnAboutUninitializedState.add(componentName);

	        error('`%s` uses `getDerivedStateFromProps` but its initial state is ' + '%s. This is not recommended. Instead, define the initial state by ' + 'assigning an object to `this.state` in the constructor of `%s`. ' + 'This ensures that `getDerivedStateFromProps` arguments have a consistent shape.', componentName, instance.state === null ? 'null' : 'undefined', componentName);
	      }
	    } // If new component APIs are defined, "unsafe" lifecycles won't be called.
	    // Warn about these lifecycles if they are present.
	    // Don't warn about react-lifecycles-compat polyfilled methods though.


	    if (typeof ctor.getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function') {
	      var foundWillMountName = null;
	      var foundWillReceivePropsName = null;
	      var foundWillUpdateName = null;

	      if (typeof instance.componentWillMount === 'function' && instance.componentWillMount.__suppressDeprecationWarning !== true) {
	        foundWillMountName = 'componentWillMount';
	      } else if (typeof instance.UNSAFE_componentWillMount === 'function') {
	        foundWillMountName = 'UNSAFE_componentWillMount';
	      }

	      if (typeof instance.componentWillReceiveProps === 'function' && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
	        foundWillReceivePropsName = 'componentWillReceiveProps';
	      } else if (typeof instance.UNSAFE_componentWillReceiveProps === 'function') {
	        foundWillReceivePropsName = 'UNSAFE_componentWillReceiveProps';
	      }

	      if (typeof instance.componentWillUpdate === 'function' && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
	        foundWillUpdateName = 'componentWillUpdate';
	      } else if (typeof instance.UNSAFE_componentWillUpdate === 'function') {
	        foundWillUpdateName = 'UNSAFE_componentWillUpdate';
	      }

	      if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
	        var _componentName = getComponentNameFromType(ctor) || 'Component';

	        var newApiName = typeof ctor.getDerivedStateFromProps === 'function' ? 'getDerivedStateFromProps()' : 'getSnapshotBeforeUpdate()';

	        if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {
	          didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);

	          error('Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n' + '%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\n' + 'The above lifecycles should be removed. Learn more about this warning here:\n' + 'https://reactjs.org/link/unsafe-component-lifecycles', _componentName, newApiName, foundWillMountName !== null ? "\n  " + foundWillMountName : '', foundWillReceivePropsName !== null ? "\n  " + foundWillReceivePropsName : '', foundWillUpdateName !== null ? "\n  " + foundWillUpdateName : '');
	        }
	      }
	    }
	  } // Cache unmasked context so we can avoid recreating masked context unless necessary.
	  // ReactFiberContext usually updates this cache but can't for newly-created instances.


	  if (isLegacyContextConsumer) {
	    cacheContext(workInProgress, unmaskedContext, context);
	  }

	  return instance;
	}

	function callComponentWillMount(workInProgress, instance) {
	  var oldState = instance.state;

	  if (typeof instance.componentWillMount === 'function') {
	    instance.componentWillMount();
	  }

	  if (typeof instance.UNSAFE_componentWillMount === 'function') {
	    instance.UNSAFE_componentWillMount();
	  }

	  if (oldState !== instance.state) {
	    {
	      error('%s.componentWillMount(): Assigning directly to this.state is ' + "deprecated (except inside a component's " + 'constructor). Use setState instead.', getComponentNameFromFiber(workInProgress) || 'Component');
	    }

	    classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
	  }
	}

	function callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext) {
	  var oldState = instance.state;

	  if (typeof instance.componentWillReceiveProps === 'function') {
	    instance.componentWillReceiveProps(newProps, nextContext);
	  }

	  if (typeof instance.UNSAFE_componentWillReceiveProps === 'function') {
	    instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);
	  }

	  if (instance.state !== oldState) {
	    {
	      var componentName = getComponentNameFromFiber(workInProgress) || 'Component';

	      if (!didWarnAboutStateAssignmentForComponent.has(componentName)) {
	        didWarnAboutStateAssignmentForComponent.add(componentName);

	        error('%s.componentWillReceiveProps(): Assigning directly to ' + "this.state is deprecated (except inside a component's " + 'constructor). Use setState instead.', componentName);
	      }
	    }

	    classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
	  }
	} // Invokes the mount life-cycles on a previously never rendered instance.


	function mountClassInstance(workInProgress, ctor, newProps, renderLanes) {
	  {
	    checkClassInstance(workInProgress, ctor, newProps);
	  }

	  var instance = workInProgress.stateNode;
	  instance.props = newProps;
	  instance.state = workInProgress.memoizedState;
	  instance.refs = {};
	  initializeUpdateQueue(workInProgress);
	  var contextType = ctor.contextType;

	  if (typeof contextType === 'object' && contextType !== null) {
	    instance.context = readContext(contextType);
	  } else {
	    var unmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
	    instance.context = getMaskedContext(workInProgress, unmaskedContext);
	  }

	  {
	    if (instance.state === newProps) {
	      var componentName = getComponentNameFromType(ctor) || 'Component';

	      if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {
	        didWarnAboutDirectlyAssigningPropsToState.add(componentName);

	        error('%s: It is not recommended to assign props directly to state ' + "because updates to props won't be reflected in state. " + 'In most cases, it is better to use props directly.', componentName);
	      }
	    }

	    if (workInProgress.mode & StrictLegacyMode) {
	      ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress, instance);
	    }

	    {
	      ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(workInProgress, instance);
	    }
	  }

	  instance.state = workInProgress.memoizedState;
	  var getDerivedStateFromProps = ctor.getDerivedStateFromProps;

	  if (typeof getDerivedStateFromProps === 'function') {
	    applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);
	    instance.state = workInProgress.memoizedState;
	  } // In order to support react-lifecycles-compat polyfilled components,
	  // Unsafe lifecycles should not be invoked for components using the new APIs.


	  if (typeof ctor.getDerivedStateFromProps !== 'function' && typeof instance.getSnapshotBeforeUpdate !== 'function' && (typeof instance.UNSAFE_componentWillMount === 'function' || typeof instance.componentWillMount === 'function')) {
	    callComponentWillMount(workInProgress, instance); // If we had additional state updates during this life-cycle, let's
	    // process them now.

	    processUpdateQueue(workInProgress, newProps, instance, renderLanes);
	    instance.state = workInProgress.memoizedState;
	  }

	  if (typeof instance.componentDidMount === 'function') {
	    var fiberFlags = Update;

	    {
	      fiberFlags |= LayoutStatic;
	    }

	    if ( (workInProgress.mode & StrictEffectsMode) !== NoMode) {
	      fiberFlags |= MountLayoutDev;
	    }

	    workInProgress.flags |= fiberFlags;
	  }
	}

	function resumeMountClassInstance(workInProgress, ctor, newProps, renderLanes) {
	  var instance = workInProgress.stateNode;
	  var oldProps = workInProgress.memoizedProps;
	  instance.props = oldProps;
	  var oldContext = instance.context;
	  var contextType = ctor.contextType;
	  var nextContext = emptyContextObject;

	  if (typeof contextType === 'object' && contextType !== null) {
	    nextContext = readContext(contextType);
	  } else {
	    var nextLegacyUnmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
	    nextContext = getMaskedContext(workInProgress, nextLegacyUnmaskedContext);
	  }

	  var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
	  var hasNewLifecycles = typeof getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function'; // Note: During these life-cycles, instance.props/instance.state are what
	  // ever the previously attempted to render - not the "current". However,
	  // during componentDidUpdate we pass the "current" props.
	  // In order to support react-lifecycles-compat polyfilled components,
	  // Unsafe lifecycles should not be invoked for components using the new APIs.

	  if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === 'function' || typeof instance.componentWillReceiveProps === 'function')) {
	    if (oldProps !== newProps || oldContext !== nextContext) {
	      callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext);
	    }
	  }

	  resetHasForceUpdateBeforeProcessing();
	  var oldState = workInProgress.memoizedState;
	  var newState = instance.state = oldState;
	  processUpdateQueue(workInProgress, newProps, instance, renderLanes);
	  newState = workInProgress.memoizedState;

	  if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
	    // If an update was already in progress, we should schedule an Update
	    // effect even though we're bailing out, so that cWU/cDU are called.
	    if (typeof instance.componentDidMount === 'function') {
	      var fiberFlags = Update;

	      {
	        fiberFlags |= LayoutStatic;
	      }

	      if ( (workInProgress.mode & StrictEffectsMode) !== NoMode) {
	        fiberFlags |= MountLayoutDev;
	      }

	      workInProgress.flags |= fiberFlags;
	    }

	    return false;
	  }

	  if (typeof getDerivedStateFromProps === 'function') {
	    applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);
	    newState = workInProgress.memoizedState;
	  }

	  var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext);

	  if (shouldUpdate) {
	    // In order to support react-lifecycles-compat polyfilled components,
	    // Unsafe lifecycles should not be invoked for components using the new APIs.
	    if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillMount === 'function' || typeof instance.componentWillMount === 'function')) {
	      if (typeof instance.componentWillMount === 'function') {
	        instance.componentWillMount();
	      }

	      if (typeof instance.UNSAFE_componentWillMount === 'function') {
	        instance.UNSAFE_componentWillMount();
	      }
	    }

	    if (typeof instance.componentDidMount === 'function') {
	      var _fiberFlags = Update;

	      {
	        _fiberFlags |= LayoutStatic;
	      }

	      if ( (workInProgress.mode & StrictEffectsMode) !== NoMode) {
	        _fiberFlags |= MountLayoutDev;
	      }

	      workInProgress.flags |= _fiberFlags;
	    }
	  } else {
	    // If an update was already in progress, we should schedule an Update
	    // effect even though we're bailing out, so that cWU/cDU are called.
	    if (typeof instance.componentDidMount === 'function') {
	      var _fiberFlags2 = Update;

	      {
	        _fiberFlags2 |= LayoutStatic;
	      }

	      if ( (workInProgress.mode & StrictEffectsMode) !== NoMode) {
	        _fiberFlags2 |= MountLayoutDev;
	      }

	      workInProgress.flags |= _fiberFlags2;
	    } // If shouldComponentUpdate returned false, we should still update the
	    // memoized state to indicate that this work can be reused.


	    workInProgress.memoizedProps = newProps;
	    workInProgress.memoizedState = newState;
	  } // Update the existing instance's state, props, and context pointers even
	  // if shouldComponentUpdate returns false.


	  instance.props = newProps;
	  instance.state = newState;
	  instance.context = nextContext;
	  return shouldUpdate;
	} // Invokes the update life-cycles and returns false if it shouldn't rerender.


	function updateClassInstance(current, workInProgress, ctor, newProps, renderLanes) {
	  var instance = workInProgress.stateNode;
	  cloneUpdateQueue(current, workInProgress);
	  var unresolvedOldProps = workInProgress.memoizedProps;
	  var oldProps = workInProgress.type === workInProgress.elementType ? unresolvedOldProps : resolveDefaultProps(workInProgress.type, unresolvedOldProps);
	  instance.props = oldProps;
	  var unresolvedNewProps = workInProgress.pendingProps;
	  var oldContext = instance.context;
	  var contextType = ctor.contextType;
	  var nextContext = emptyContextObject;

	  if (typeof contextType === 'object' && contextType !== null) {
	    nextContext = readContext(contextType);
	  } else {
	    var nextUnmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
	    nextContext = getMaskedContext(workInProgress, nextUnmaskedContext);
	  }

	  var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
	  var hasNewLifecycles = typeof getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function'; // Note: During these life-cycles, instance.props/instance.state are what
	  // ever the previously attempted to render - not the "current". However,
	  // during componentDidUpdate we pass the "current" props.
	  // In order to support react-lifecycles-compat polyfilled components,
	  // Unsafe lifecycles should not be invoked for components using the new APIs.

	  if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === 'function' || typeof instance.componentWillReceiveProps === 'function')) {
	    if (unresolvedOldProps !== unresolvedNewProps || oldContext !== nextContext) {
	      callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext);
	    }
	  }

	  resetHasForceUpdateBeforeProcessing();
	  var oldState = workInProgress.memoizedState;
	  var newState = instance.state = oldState;
	  processUpdateQueue(workInProgress, newProps, instance, renderLanes);
	  newState = workInProgress.memoizedState;

	  if (unresolvedOldProps === unresolvedNewProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing() && !(enableLazyContextPropagation   )) {
	    // If an update was already in progress, we should schedule an Update
	    // effect even though we're bailing out, so that cWU/cDU are called.
	    if (typeof instance.componentDidUpdate === 'function') {
	      if (unresolvedOldProps !== current.memoizedProps || oldState !== current.memoizedState) {
	        workInProgress.flags |= Update;
	      }
	    }

	    if (typeof instance.getSnapshotBeforeUpdate === 'function') {
	      if (unresolvedOldProps !== current.memoizedProps || oldState !== current.memoizedState) {
	        workInProgress.flags |= Snapshot;
	      }
	    }

	    return false;
	  }

	  if (typeof getDerivedStateFromProps === 'function') {
	    applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);
	    newState = workInProgress.memoizedState;
	  }

	  var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext) || // TODO: In some cases, we'll end up checking if context has changed twice,
	  // both before and after `shouldComponentUpdate` has been called. Not ideal,
	  // but I'm loath to refactor this function. This only happens for memoized
	  // components so it's not that common.
	  enableLazyContextPropagation   ;

	  if (shouldUpdate) {
	    // In order to support react-lifecycles-compat polyfilled components,
	    // Unsafe lifecycles should not be invoked for components using the new APIs.
	    if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillUpdate === 'function' || typeof instance.componentWillUpdate === 'function')) {
	      if (typeof instance.componentWillUpdate === 'function') {
	        instance.componentWillUpdate(newProps, newState, nextContext);
	      }

	      if (typeof instance.UNSAFE_componentWillUpdate === 'function') {
	        instance.UNSAFE_componentWillUpdate(newProps, newState, nextContext);
	      }
	    }

	    if (typeof instance.componentDidUpdate === 'function') {
	      workInProgress.flags |= Update;
	    }

	    if (typeof instance.getSnapshotBeforeUpdate === 'function') {
	      workInProgress.flags |= Snapshot;
	    }
	  } else {
	    // If an update was already in progress, we should schedule an Update
	    // effect even though we're bailing out, so that cWU/cDU are called.
	    if (typeof instance.componentDidUpdate === 'function') {
	      if (unresolvedOldProps !== current.memoizedProps || oldState !== current.memoizedState) {
	        workInProgress.flags |= Update;
	      }
	    }

	    if (typeof instance.getSnapshotBeforeUpdate === 'function') {
	      if (unresolvedOldProps !== current.memoizedProps || oldState !== current.memoizedState) {
	        workInProgress.flags |= Snapshot;
	      }
	    } // If shouldComponentUpdate returned false, we should still update the
	    // memoized props/state to indicate that this work can be reused.


	    workInProgress.memoizedProps = newProps;
	    workInProgress.memoizedState = newState;
	  } // Update the existing instance's state, props, and context pointers even
	  // if shouldComponentUpdate returns false.


	  instance.props = newProps;
	  instance.state = newState;
	  instance.context = nextContext;
	  return shouldUpdate;
	}

	function createCapturedValueAtFiber(value, source) {
	  // If the value is an error, call this function immediately after it is thrown
	  // so the stack is accurate.
	  return {
	    value: value,
	    source: source,
	    stack: getStackByFiberInDevAndProd(source),
	    digest: null
	  };
	}
	function createCapturedValue(value, digest, stack) {
	  return {
	    value: value,
	    source: null,
	    stack: stack != null ? stack : null,
	    digest: digest != null ? digest : null
	  };
	}

	// This module is forked in different environments.
	// By default, return `true` to log errors to the console.
	// Forks can return `false` if this isn't desirable.
	function showErrorDialog(boundary, errorInfo) {
	  return true;
	}

	function logCapturedError(boundary, errorInfo) {
	  try {
	    var logError = showErrorDialog(boundary, errorInfo); // Allow injected showErrorDialog() to prevent default console.error logging.
	    // This enables renderers like ReactNative to better manage redbox behavior.

	    if (logError === false) {
	      return;
	    }

	    var error = errorInfo.value;

	    if (true) {
	      var source = errorInfo.source;
	      var stack = errorInfo.stack;
	      var componentStack = stack !== null ? stack : ''; // Browsers support silencing uncaught errors by calling
	      // `preventDefault()` in window `error` handler.
	      // We record this information as an expando on the error.

	      if (error != null && error._suppressLogging) {
	        if (boundary.tag === ClassComponent) {
	          // The error is recoverable and was silenced.
	          // Ignore it and don't print the stack addendum.
	          // This is handy for testing error boundaries without noise.
	          return;
	        } // The error is fatal. Since the silencing might have
	        // been accidental, we'll surface it anyway.
	        // However, the browser would have silenced the original error
	        // so we'll print it first, and then print the stack addendum.


	        console['error'](error); // Don't transform to our wrapper
	        // For a more detailed description of this block, see:
	        // https://github.com/facebook/react/pull/13384
	      }

	      var componentName = source ? getComponentNameFromFiber(source) : null;
	      var componentNameMessage = componentName ? "The above error occurred in the <" + componentName + "> component:" : 'The above error occurred in one of your React components:';
	      var errorBoundaryMessage;

	      if (boundary.tag === HostRoot) {
	        errorBoundaryMessage = 'Consider adding an error boundary to your tree to customize error handling behavior.\n' + 'Visit https://reactjs.org/link/error-boundaries to learn more about error boundaries.';
	      } else {
	        var errorBoundaryName = getComponentNameFromFiber(boundary) || 'Anonymous';
	        errorBoundaryMessage = "React will try to recreate this component tree from scratch " + ("using the error boundary you provided, " + errorBoundaryName + ".");
	      }

	      var combinedMessage = componentNameMessage + "\n" + componentStack + "\n\n" + ("" + errorBoundaryMessage); // In development, we provide our own message with just the component stack.
	      // We don't include the original error message and JS stack because the browser
	      // has already printed it. Even if the application swallows the error, it is still
	      // displayed by the browser thanks to the DEV-only fake event trick in ReactErrorUtils.

	      console['error'](combinedMessage); // Don't transform to our wrapper
	    }
	  } catch (e) {
	    // This method must not throw, or React internal state will get messed up.
	    // If console.error is overridden, or logCapturedError() shows a dialog that throws,
	    // we want to report this error outside of the normal stack as a last resort.
	    // https://github.com/facebook/react/issues/13188
	    setTimeout(function () {
	      throw e;
	    });
	  }
	}

	var PossiblyWeakMap$1 = typeof WeakMap === 'function' ? WeakMap : Map;

	function createRootErrorUpdate(fiber, errorInfo, lane) {
	  var update = createUpdate(NoTimestamp, lane); // Unmount the root by rendering null.

	  update.tag = CaptureUpdate; // Caution: React DevTools currently depends on this property
	  // being called "element".

	  update.payload = {
	    element: null
	  };
	  var error = errorInfo.value;

	  update.callback = function () {
	    onUncaughtError(error);
	    logCapturedError(fiber, errorInfo);
	  };

	  return update;
	}

	function createClassErrorUpdate(fiber, errorInfo, lane) {
	  var update = createUpdate(NoTimestamp, lane);
	  update.tag = CaptureUpdate;
	  var getDerivedStateFromError = fiber.type.getDerivedStateFromError;

	  if (typeof getDerivedStateFromError === 'function') {
	    var error$1 = errorInfo.value;

	    update.payload = function () {
	      return getDerivedStateFromError(error$1);
	    };

	    update.callback = function () {
	      {
	        markFailedErrorBoundaryForHotReloading(fiber);
	      }

	      logCapturedError(fiber, errorInfo);
	    };
	  }

	  var inst = fiber.stateNode;

	  if (inst !== null && typeof inst.componentDidCatch === 'function') {
	    update.callback = function callback() {
	      {
	        markFailedErrorBoundaryForHotReloading(fiber);
	      }

	      logCapturedError(fiber, errorInfo);

	      if (typeof getDerivedStateFromError !== 'function') {
	        // To preserve the preexisting retry behavior of error boundaries,
	        // we keep track of which ones already failed during this batch.
	        // This gets reset before we yield back to the browser.
	        // TODO: Warn in strict mode if getDerivedStateFromError is
	        // not defined.
	        markLegacyErrorBoundaryAsFailed(this);
	      }

	      var error$1 = errorInfo.value;
	      var stack = errorInfo.stack;
	      this.componentDidCatch(error$1, {
	        componentStack: stack !== null ? stack : ''
	      });

	      {
	        if (typeof getDerivedStateFromError !== 'function') {
	          // If componentDidCatch is the only error boundary method defined,
	          // then it needs to call setState to recover from errors.
	          // If no state update is scheduled then the boundary will swallow the error.
	          if (!includesSomeLane(fiber.lanes, SyncLane)) {
	            error('%s: Error boundaries should implement getDerivedStateFromError(). ' + 'In that method, return a state update to display an error message or fallback UI.', getComponentNameFromFiber(fiber) || 'Unknown');
	          }
	        }
	      }
	    };
	  }

	  return update;
	}

	function attachPingListener(root, wakeable, lanes) {
	  // Attach a ping listener
	  //
	  // The data might resolve before we have a chance to commit the fallback. Or,
	  // in the case of a refresh, we'll never commit a fallback. So we need to
	  // attach a listener now. When it resolves ("pings"), we can decide whether to
	  // try rendering the tree again.
	  //
	  // Only attach a listener if one does not already exist for the lanes
	  // we're currently rendering (which acts like a "thread ID" here).
	  //
	  // We only need to do this in concurrent mode. Legacy Suspense always
	  // commits fallbacks synchronously, so there are no pings.
	  var pingCache = root.pingCache;
	  var threadIDs;

	  if (pingCache === null) {
	    pingCache = root.pingCache = new PossiblyWeakMap$1();
	    threadIDs = new Set();
	    pingCache.set(wakeable, threadIDs);
	  } else {
	    threadIDs = pingCache.get(wakeable);

	    if (threadIDs === undefined) {
	      threadIDs = new Set();
	      pingCache.set(wakeable, threadIDs);
	    }
	  }

	  if (!threadIDs.has(lanes)) {
	    // Memoize using the thread ID to prevent redundant listeners.
	    threadIDs.add(lanes);
	    var ping = pingSuspendedRoot.bind(null, root, wakeable, lanes);

	    {
	      if (isDevToolsPresent) {
	        // If we have pending work still, restore the original updaters
	        restorePendingUpdaters(root, lanes);
	      }
	    }

	    wakeable.then(ping, ping);
	  }
	}

	function attachRetryListener(suspenseBoundary, root, wakeable, lanes) {
	  // Retry listener
	  //
	  // If the fallback does commit, we need to attach a different type of
	  // listener. This one schedules an update on the Suspense boundary to turn
	  // the fallback state off.
	  //
	  // Stash the wakeable on the boundary fiber so we can access it in the
	  // commit phase.
	  //
	  // When the wakeable resolves, we'll attempt to render the boundary
	  // again ("retry").
	  var wakeables = suspenseBoundary.updateQueue;

	  if (wakeables === null) {
	    var updateQueue = new Set();
	    updateQueue.add(wakeable);
	    suspenseBoundary.updateQueue = updateQueue;
	  } else {
	    wakeables.add(wakeable);
	  }
	}

	function resetSuspendedComponent(sourceFiber, rootRenderLanes) {
	  // A legacy mode Suspense quirk, only relevant to hook components.


	  var tag = sourceFiber.tag;

	  if ((sourceFiber.mode & ConcurrentMode) === NoMode && (tag === FunctionComponent || tag === ForwardRef || tag === SimpleMemoComponent)) {
	    var currentSource = sourceFiber.alternate;

	    if (currentSource) {
	      sourceFiber.updateQueue = currentSource.updateQueue;
	      sourceFiber.memoizedState = currentSource.memoizedState;
	      sourceFiber.lanes = currentSource.lanes;
	    } else {
	      sourceFiber.updateQueue = null;
	      sourceFiber.memoizedState = null;
	    }
	  }
	}

	function getNearestSuspenseBoundaryToCapture(returnFiber) {
	  var node = returnFiber;

	  do {
	    if (node.tag === SuspenseComponent && shouldCaptureSuspense(node)) {
	      return node;
	    } // This boundary already captured during this render. Continue to the next
	    // boundary.


	    node = node.return;
	  } while (node !== null);

	  return null;
	}

	function markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root, rootRenderLanes) {
	  // This marks a Suspense boundary so that when we're unwinding the stack,
	  // it captures the suspended "exception" and does a second (fallback) pass.
	  if ((suspenseBoundary.mode & ConcurrentMode) === NoMode) {
	    // Legacy Mode Suspense
	    //
	    // If the boundary is in legacy mode, we should *not*
	    // suspend the commit. Pretend as if the suspended component rendered
	    // null and keep rendering. When the Suspense boundary completes,
	    // we'll do a second pass to render the fallback.
	    if (suspenseBoundary === returnFiber) {
	      // Special case where we suspended while reconciling the children of
	      // a Suspense boundary's inner Offscreen wrapper fiber. This happens
	      // when a React.lazy component is a direct child of a
	      // Suspense boundary.
	      //
	      // Suspense boundaries are implemented as multiple fibers, but they
	      // are a single conceptual unit. The legacy mode behavior where we
	      // pretend the suspended fiber committed as `null` won't work,
	      // because in this case the "suspended" fiber is the inner
	      // Offscreen wrapper.
	      //
	      // Because the contents of the boundary haven't started rendering
	      // yet (i.e. nothing in the tree has partially rendered) we can
	      // switch to the regular, concurrent mode behavior: mark the
	      // boundary with ShouldCapture and enter the unwind phase.
	      suspenseBoundary.flags |= ShouldCapture;
	    } else {
	      suspenseBoundary.flags |= DidCapture;
	      sourceFiber.flags |= ForceUpdateForLegacySuspense; // We're going to commit this fiber even though it didn't complete.
	      // But we shouldn't call any lifecycle methods or callbacks. Remove
	      // all lifecycle effect tags.

	      sourceFiber.flags &= ~(LifecycleEffectMask | Incomplete);

	      if (sourceFiber.tag === ClassComponent) {
	        var currentSourceFiber = sourceFiber.alternate;

	        if (currentSourceFiber === null) {
	          // This is a new mount. Change the tag so it's not mistaken for a
	          // completed class component. For example, we should not call
	          // componentWillUnmount if it is deleted.
	          sourceFiber.tag = IncompleteClassComponent;
	        } else {
	          // When we try rendering again, we should not reuse the current fiber,
	          // since it's known to be in an inconsistent state. Use a force update to
	          // prevent a bail out.
	          var update = createUpdate(NoTimestamp, SyncLane);
	          update.tag = ForceUpdate;
	          enqueueUpdate(sourceFiber, update, SyncLane);
	        }
	      } // The source fiber did not complete. Mark it with Sync priority to
	      // indicate that it still has pending work.


	      sourceFiber.lanes = mergeLanes(sourceFiber.lanes, SyncLane);
	    }

	    return suspenseBoundary;
	  } // Confirmed that the boundary is in a concurrent mode tree. Continue
	  // with the normal suspend path.
	  //
	  // After this we'll use a set of heuristics to determine whether this
	  // render pass will run to completion or restart or "suspend" the commit.
	  // The actual logic for this is spread out in different places.
	  //
	  // This first principle is that if we're going to suspend when we complete
	  // a root, then we should also restart if we get an update or ping that
	  // might unsuspend it, and vice versa. The only reason to suspend is
	  // because you think you might want to restart before committing. However,
	  // it doesn't make sense to restart only while in the period we're suspended.
	  //
	  // Restarting too aggressively is also not good because it starves out any
	  // intermediate loading state. So we use heuristics to determine when.
	  // Suspense Heuristics
	  //
	  // If nothing threw a Promise or all the same fallbacks are already showing,
	  // then don't suspend/restart.
	  //
	  // If this is an initial render of a new tree of Suspense boundaries and
	  // those trigger a fallback, then don't suspend/restart. We want to ensure
	  // that we can show the initial loading state as quickly as possible.
	  //
	  // If we hit a "Delayed" case, such as when we'd switch from content back into
	  // a fallback, then we should always suspend/restart. Transitions apply
	  // to this case. If none is defined, JND is used instead.
	  //
	  // If we're already showing a fallback and it gets "retried", allowing us to show
	  // another level, but there's still an inner boundary that would show a fallback,
	  // then we suspend/restart for 500ms since the last time we showed a fallback
	  // anywhere in the tree. This effectively throttles progressive loading into a
	  // consistent train of commits. This also gives us an opportunity to restart to
	  // get to the completed state slightly earlier.
	  //
	  // If there's ambiguity due to batching it's resolved in preference of:
	  // 1) "delayed", 2) "initial render", 3) "retry".
	  //
	  // We want to ensure that a "busy" state doesn't get force committed. We want to
	  // ensure that new initial loading states can commit as soon as possible.


	  suspenseBoundary.flags |= ShouldCapture; // TODO: I think we can remove this, since we now use `DidCapture` in
	  // the begin phase to prevent an early bailout.

	  suspenseBoundary.lanes = rootRenderLanes;
	  return suspenseBoundary;
	}

	function throwException(root, returnFiber, sourceFiber, value, rootRenderLanes) {
	  // The source fiber did not complete.
	  sourceFiber.flags |= Incomplete;

	  {
	    if (isDevToolsPresent) {
	      // If we have pending work still, restore the original updaters
	      restorePendingUpdaters(root, rootRenderLanes);
	    }
	  }

	  if (value !== null && typeof value === 'object' && typeof value.then === 'function') {
	    // This is a wakeable. The component suspended.
	    var wakeable = value;
	    resetSuspendedComponent(sourceFiber);

	    {
	      if (getIsHydrating() && sourceFiber.mode & ConcurrentMode) {
	        markDidThrowWhileHydratingDEV();
	      }
	    }


	    var suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber);

	    if (suspenseBoundary !== null) {
	      suspenseBoundary.flags &= ~ForceClientRender;
	      markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root, rootRenderLanes); // We only attach ping listeners in concurrent mode. Legacy Suspense always
	      // commits fallbacks synchronously, so there are no pings.

	      if (suspenseBoundary.mode & ConcurrentMode) {
	        attachPingListener(root, wakeable, rootRenderLanes);
	      }

	      attachRetryListener(suspenseBoundary, root, wakeable);
	      return;
	    } else {
	      // No boundary was found. Unless this is a sync update, this is OK.
	      // We can suspend and wait for more data to arrive.
	      if (!includesSyncLane(rootRenderLanes)) {
	        // This is not a sync update. Suspend. Since we're not activating a
	        // Suspense boundary, this will unwind all the way to the root without
	        // performing a second pass to render a fallback. (This is arguably how
	        // refresh transitions should work, too, since we're not going to commit
	        // the fallbacks anyway.)
	        //
	        // This case also applies to initial hydration.
	        attachPingListener(root, wakeable, rootRenderLanes);
	        renderDidSuspendDelayIfPossible();
	        return;
	      } // This is a sync/discrete update. We treat this case like an error
	      // because discrete renders are expected to produce a complete tree
	      // synchronously to maintain consistency with external state.


	      var uncaughtSuspenseError = new Error('A component suspended while responding to synchronous input. This ' + 'will cause the UI to be replaced with a loading indicator. To ' + 'fix, updates that suspend should be wrapped ' + 'with startTransition.'); // If we're outside a transition, fall through to the regular error path.
	      // The error will be caught by the nearest suspense boundary.

	      value = uncaughtSuspenseError;
	    }
	  } else {
	    // This is a regular error, not a Suspense wakeable.
	    if (getIsHydrating() && sourceFiber.mode & ConcurrentMode) {
	      markDidThrowWhileHydratingDEV();

	      var _suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber); // If the error was thrown during hydration, we may be able to recover by
	      // discarding the dehydrated content and switching to a client render.
	      // Instead of surfacing the error, find the nearest Suspense boundary
	      // and render it again without hydration.


	      if (_suspenseBoundary !== null) {
	        if ((_suspenseBoundary.flags & ShouldCapture) === NoFlags) {
	          // Set a flag to indicate that we should try rendering the normal
	          // children again, not the fallback.
	          _suspenseBoundary.flags |= ForceClientRender;
	        }

	        markSuspenseBoundaryShouldCapture(_suspenseBoundary, returnFiber, sourceFiber, root, rootRenderLanes); // Even though the user may not be affected by this error, we should
	        // still log it so it can be fixed.

	        queueHydrationError(createCapturedValueAtFiber(value, sourceFiber));
	        return;
	      }
	    }
	  }

	  value = createCapturedValueAtFiber(value, sourceFiber);
	  renderDidError(value); // We didn't find a boundary that could handle this type of exception. Start
	  // over and traverse parent path again, this time treating the exception
	  // as an error.

	  var workInProgress = returnFiber;

	  do {
	    switch (workInProgress.tag) {
	      case HostRoot:
	        {
	          var _errorInfo = value;
	          workInProgress.flags |= ShouldCapture;
	          var lane = pickArbitraryLane(rootRenderLanes);
	          workInProgress.lanes = mergeLanes(workInProgress.lanes, lane);
	          var update = createRootErrorUpdate(workInProgress, _errorInfo, lane);
	          enqueueCapturedUpdate(workInProgress, update);
	          return;
	        }

	      case ClassComponent:
	        // Capture and retry
	        var errorInfo = value;
	        var ctor = workInProgress.type;
	        var instance = workInProgress.stateNode;

	        if ((workInProgress.flags & DidCapture) === NoFlags && (typeof ctor.getDerivedStateFromError === 'function' || instance !== null && typeof instance.componentDidCatch === 'function' && !isAlreadyFailedLegacyErrorBoundary(instance))) {
	          workInProgress.flags |= ShouldCapture;

	          var _lane = pickArbitraryLane(rootRenderLanes);

	          workInProgress.lanes = mergeLanes(workInProgress.lanes, _lane); // Schedule the error boundary to re-render using updated state

	          var _update = createClassErrorUpdate(workInProgress, errorInfo, _lane);

	          enqueueCapturedUpdate(workInProgress, _update);
	          return;
	        }

	        break;
	    }

	    workInProgress = workInProgress.return;
	  } while (workInProgress !== null);
	}

	function getSuspendedCache() {
	  {
	    return null;
	  } // This function is called when a Suspense boundary suspends. It returns the
	}

	var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
	var didReceiveUpdate = false;
	var didWarnAboutBadClass;
	var didWarnAboutModulePatternComponent;
	var didWarnAboutContextTypeOnFunctionComponent;
	var didWarnAboutGetDerivedStateOnFunctionComponent;
	var didWarnAboutFunctionRefs;
	var didWarnAboutReassigningProps;
	var didWarnAboutRevealOrder;
	var didWarnAboutTailOptions;
	var didWarnAboutDefaultPropsOnFunctionComponent;

	{
	  didWarnAboutBadClass = {};
	  didWarnAboutModulePatternComponent = {};
	  didWarnAboutContextTypeOnFunctionComponent = {};
	  didWarnAboutGetDerivedStateOnFunctionComponent = {};
	  didWarnAboutFunctionRefs = {};
	  didWarnAboutReassigningProps = false;
	  didWarnAboutRevealOrder = {};
	  didWarnAboutTailOptions = {};
	  didWarnAboutDefaultPropsOnFunctionComponent = {};
	}

	function reconcileChildren(current, workInProgress, nextChildren, renderLanes) {
	  if (current === null) {
	    // If this is a fresh new component that hasn't been rendered yet, we
	    // won't update its child set by applying minimal side-effects. Instead,
	    // we will add them all to the child before it gets rendered. That means
	    // we can optimize this reconciliation pass by not tracking side-effects.
	    workInProgress.child = mountChildFibers(workInProgress, null, nextChildren, renderLanes);
	  } else {
	    // If the current child is the same as the work in progress, it means that
	    // we haven't yet started any work on these children. Therefore, we use
	    // the clone algorithm to create a copy of all the current children.
	    // If we had any progressed work already, that is invalid at this point so
	    // let's throw it out.
	    workInProgress.child = reconcileChildFibers(workInProgress, current.child, nextChildren, renderLanes);
	  }
	}

	function forceUnmountCurrentAndReconcile(current, workInProgress, nextChildren, renderLanes) {
	  // This function is fork of reconcileChildren. It's used in cases where we
	  // want to reconcile without matching against the existing set. This has the
	  // effect of all current children being unmounted; even if the type and key
	  // are the same, the old child is unmounted and a new child is created.
	  //
	  // To do this, we're going to go through the reconcile algorithm twice. In
	  // the first pass, we schedule a deletion for all the current children by
	  // passing null.
	  workInProgress.child = reconcileChildFibers(workInProgress, current.child, null, renderLanes); // In the second pass, we mount the new children. The trick here is that we
	  // pass null in place of where we usually pass the current child set. This has
	  // the effect of remounting all children regardless of whether their
	  // identities match.

	  workInProgress.child = reconcileChildFibers(workInProgress, null, nextChildren, renderLanes);
	}

	function updateForwardRef(current, workInProgress, Component, nextProps, renderLanes) {
	  // TODO: current can be non-null here even if the component
	  // hasn't yet mounted. This happens after the first render suspends.
	  // We'll need to figure out if this is fine or can cause issues.
	  {
	    if (workInProgress.type !== workInProgress.elementType) {
	      // Lazy component props can't be validated in createElement
	      // because they're only guaranteed to be resolved here.
	      var innerPropTypes = Component.propTypes;

	      if (innerPropTypes) {
	        checkPropTypes(innerPropTypes, nextProps, // Resolved props
	        'prop', getComponentNameFromType(Component));
	      }
	    }
	  }

	  var render = Component.render;
	  var ref = workInProgress.ref; // The rest is a fork of updateFunctionComponent

	  var nextChildren;
	  var hasId;
	  prepareToReadContext(workInProgress, renderLanes);

	  {
	    markComponentRenderStarted(workInProgress);
	  }

	  {
	    ReactCurrentOwner$1.current = workInProgress;
	    setIsRendering(true);
	    nextChildren = renderWithHooks(current, workInProgress, render, nextProps, ref, renderLanes);
	    hasId = checkDidRenderIdHook();

	    if ( workInProgress.mode & StrictLegacyMode) {
	      setIsStrictModeForDevtools(true);

	      try {
	        nextChildren = renderWithHooks(current, workInProgress, render, nextProps, ref, renderLanes);
	        hasId = checkDidRenderIdHook();
	      } finally {
	        setIsStrictModeForDevtools(false);
	      }
	    }

	    setIsRendering(false);
	  }

	  {
	    markComponentRenderStopped();
	  }

	  if (current !== null && !didReceiveUpdate) {
	    bailoutHooks(current, workInProgress, renderLanes);
	    return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
	  }

	  if (getIsHydrating() && hasId) {
	    pushMaterializedTreeId(workInProgress);
	  } // React DevTools reads this flag.


	  workInProgress.flags |= PerformedWork;
	  reconcileChildren(current, workInProgress, nextChildren, renderLanes);
	  return workInProgress.child;
	}

	function updateMemoComponent(current, workInProgress, Component, nextProps, renderLanes) {
	  if (current === null) {
	    var type = Component.type;

	    if (isSimpleFunctionComponent(type) && Component.compare === null && // SimpleMemoComponent codepath doesn't resolve outer props either.
	    Component.defaultProps === undefined) {
	      var resolvedType = type;

	      {
	        resolvedType = resolveFunctionForHotReloading(type);
	      } // If this is a plain function component without default props,
	      // and with only the default shallow comparison, we upgrade it
	      // to a SimpleMemoComponent to allow fast path updates.


	      workInProgress.tag = SimpleMemoComponent;
	      workInProgress.type = resolvedType;

	      {
	        validateFunctionComponentInDev(workInProgress, type);
	      }

	      return updateSimpleMemoComponent(current, workInProgress, resolvedType, nextProps, renderLanes);
	    }

	    {
	      var innerPropTypes = type.propTypes;

	      if (innerPropTypes) {
	        // Inner memo component props aren't currently validated in createElement.
	        // We could move it there, but we'd still need this for lazy code path.
	        checkPropTypes(innerPropTypes, nextProps, // Resolved props
	        'prop', getComponentNameFromType(type));
	      }

	      if ( Component.defaultProps !== undefined) {
	        var componentName = getComponentNameFromType(type) || 'Unknown';

	        if (!didWarnAboutDefaultPropsOnFunctionComponent[componentName]) {
	          error('%s: Support for defaultProps will be removed from memo components ' + 'in a future major release. Use JavaScript default parameters instead.', componentName);

	          didWarnAboutDefaultPropsOnFunctionComponent[componentName] = true;
	        }
	      }
	    }

	    var child = createFiberFromTypeAndProps(Component.type, null, nextProps, workInProgress, workInProgress.mode, renderLanes);
	    child.ref = workInProgress.ref;
	    child.return = workInProgress;
	    workInProgress.child = child;
	    return child;
	  }

	  {
	    var _type = Component.type;
	    var _innerPropTypes = _type.propTypes;

	    if (_innerPropTypes) {
	      // Inner memo component props aren't currently validated in createElement.
	      // We could move it there, but we'd still need this for lazy code path.
	      checkPropTypes(_innerPropTypes, nextProps, // Resolved props
	      'prop', getComponentNameFromType(_type));
	    }
	  }

	  var currentChild = current.child; // This is always exactly one child

	  var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current, renderLanes);

	  if (!hasScheduledUpdateOrContext) {
	    // This will be the props with resolved defaultProps,
	    // unlike current.memoizedProps which will be the unresolved ones.
	    var prevProps = currentChild.memoizedProps; // Default to shallow comparison

	    var compare = Component.compare;
	    compare = compare !== null ? compare : shallowEqual;

	    if (compare(prevProps, nextProps) && current.ref === workInProgress.ref) {
	      return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
	    }
	  } // React DevTools reads this flag.


	  workInProgress.flags |= PerformedWork;
	  var newChild = createWorkInProgress(currentChild, nextProps);
	  newChild.ref = workInProgress.ref;
	  newChild.return = workInProgress;
	  workInProgress.child = newChild;
	  return newChild;
	}

	function updateSimpleMemoComponent(current, workInProgress, Component, nextProps, renderLanes) {
	  // TODO: current can be non-null here even if the component
	  // hasn't yet mounted. This happens when the inner render suspends.
	  // We'll need to figure out if this is fine or can cause issues.
	  {
	    if (workInProgress.type !== workInProgress.elementType) {
	      // Lazy component props can't be validated in createElement
	      // because they're only guaranteed to be resolved here.
	      var outerMemoType = workInProgress.elementType;

	      if (outerMemoType.$$typeof === REACT_LAZY_TYPE) {
	        // We warn when you define propTypes on lazy()
	        // so let's just skip over it to find memo() outer wrapper.
	        // Inner props for memo are validated later.
	        var lazyComponent = outerMemoType;
	        var payload = lazyComponent._payload;
	        var init = lazyComponent._init;

	        try {
	          outerMemoType = init(payload);
	        } catch (x) {
	          outerMemoType = null;
	        } // Inner propTypes will be validated in the function component path.


	        var outerPropTypes = outerMemoType && outerMemoType.propTypes;

	        if (outerPropTypes) {
	          checkPropTypes(outerPropTypes, nextProps, // Resolved (SimpleMemoComponent has no defaultProps)
	          'prop', getComponentNameFromType(outerMemoType));
	        }
	      }
	    }
	  }

	  if (current !== null) {
	    var prevProps = current.memoizedProps;

	    if (shallowEqual(prevProps, nextProps) && current.ref === workInProgress.ref && ( // Prevent bailout if the implementation changed due to hot reload.
	     workInProgress.type === current.type )) {
	      didReceiveUpdate = false; // The props are shallowly equal. Reuse the previous props object, like we
	      // would during a normal fiber bailout.
	      //
	      // We don't have strong guarantees that the props object is referentially
	      // equal during updates where we can't bail out anyway — like if the props
	      // are shallowly equal, but there's a local state or context update in the
	      // same batch.
	      //
	      // However, as a principle, we should aim to make the behavior consistent
	      // across different ways of memoizing a component. For example, React.memo
	      // has a different internal Fiber layout if you pass a normal function
	      // component (SimpleMemoComponent) versus if you pass a different type
	      // like forwardRef (MemoComponent). But this is an implementation detail.
	      // Wrapping a component in forwardRef (or React.lazy, etc) shouldn't
	      // affect whether the props object is reused during a bailout.

	      workInProgress.pendingProps = nextProps = prevProps;

	      if (!checkScheduledUpdateOrContext(current, renderLanes)) {
	        // The pending lanes were cleared at the beginning of beginWork. We're
	        // about to bail out, but there might be other lanes that weren't
	        // included in the current render. Usually, the priority level of the
	        // remaining updates is accumulated during the evaluation of the
	        // component (i.e. when processing the update queue). But since since
	        // we're bailing out early *without* evaluating the component, we need
	        // to account for it here, too. Reset to the value of the current fiber.
	        // NOTE: This only applies to SimpleMemoComponent, not MemoComponent,
	        // because a MemoComponent fiber does not have hooks or an update queue;
	        // rather, it wraps around an inner component, which may or may not
	        // contains hooks.
	        // TODO: Move the reset at in beginWork out of the common path so that
	        // this is no longer necessary.
	        workInProgress.lanes = current.lanes;
	        return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
	      } else if ((current.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
	        // This is a special case that only exists for legacy mode.
	        // See https://github.com/facebook/react/pull/19216.
	        didReceiveUpdate = true;
	      }
	    }
	  }

	  return updateFunctionComponent(current, workInProgress, Component, nextProps, renderLanes);
	}

	function updateOffscreenComponent(current, workInProgress, renderLanes) {
	  var nextProps = workInProgress.pendingProps;
	  var nextChildren = nextProps.children;
	  var prevState = current !== null ? current.memoizedState : null;

	  if (nextProps.mode === 'hidden' || enableLegacyHidden ) {
	    // Rendering a hidden tree.
	    if ((workInProgress.mode & ConcurrentMode) === NoMode) {
	      // In legacy sync mode, don't defer the subtree. Render it now.
	      // TODO: Consider how Offscreen should work with transitions in the future
	      var nextState = {
	        baseLanes: NoLanes,
	        cachePool: null,
	        transitions: null
	      };
	      workInProgress.memoizedState = nextState;

	      pushRenderLanes(workInProgress, renderLanes);
	    } else if (!includesSomeLane(renderLanes, OffscreenLane)) {
	      var spawnedCachePool = null; // We're hidden, and we're not rendering at Offscreen. We will bail out
	      // and resume this tree later.

	      var nextBaseLanes;

	      if (prevState !== null) {
	        var prevBaseLanes = prevState.baseLanes;
	        nextBaseLanes = mergeLanes(prevBaseLanes, renderLanes);
	      } else {
	        nextBaseLanes = renderLanes;
	      } // Schedule this fiber to re-render at offscreen priority. Then bailout.


	      workInProgress.lanes = workInProgress.childLanes = laneToLanes(OffscreenLane);
	      var _nextState = {
	        baseLanes: nextBaseLanes,
	        cachePool: spawnedCachePool,
	        transitions: null
	      };
	      workInProgress.memoizedState = _nextState;
	      workInProgress.updateQueue = null;
	      // to avoid a push/pop misalignment.


	      pushRenderLanes(workInProgress, nextBaseLanes);

	      return null;
	    } else {
	      // This is the second render. The surrounding visible content has already
	      // committed. Now we resume rendering the hidden tree.
	      // Rendering at offscreen, so we can clear the base lanes.
	      var _nextState2 = {
	        baseLanes: NoLanes,
	        cachePool: null,
	        transitions: null
	      };
	      workInProgress.memoizedState = _nextState2; // Push the lanes that were skipped when we bailed out.

	      var subtreeRenderLanes = prevState !== null ? prevState.baseLanes : renderLanes;

	      pushRenderLanes(workInProgress, subtreeRenderLanes);
	    }
	  } else {
	    // Rendering a visible tree.
	    var _subtreeRenderLanes;

	    if (prevState !== null) {
	      // We're going from hidden -> visible.
	      _subtreeRenderLanes = mergeLanes(prevState.baseLanes, renderLanes);

	      workInProgress.memoizedState = null;
	    } else {
	      // We weren't previously hidden, and we still aren't, so there's nothing
	      // special to do. Need to push to the stack regardless, though, to avoid
	      // a push/pop misalignment.
	      _subtreeRenderLanes = renderLanes;
	    }

	    pushRenderLanes(workInProgress, _subtreeRenderLanes);
	  }

	  reconcileChildren(current, workInProgress, nextChildren, renderLanes);
	  return workInProgress.child;
	} // Note: These happen to have identical begin phases, for now. We shouldn't hold

	function updateFragment(current, workInProgress, renderLanes) {
	  var nextChildren = workInProgress.pendingProps;
	  reconcileChildren(current, workInProgress, nextChildren, renderLanes);
	  return workInProgress.child;
	}

	function updateMode(current, workInProgress, renderLanes) {
	  var nextChildren = workInProgress.pendingProps.children;
	  reconcileChildren(current, workInProgress, nextChildren, renderLanes);
	  return workInProgress.child;
	}

	function updateProfiler(current, workInProgress, renderLanes) {
	  {
	    workInProgress.flags |= Update;

	    {
	      // Reset effect durations for the next eventual effect phase.
	      // These are reset during render to allow the DevTools commit hook a chance to read them,
	      var stateNode = workInProgress.stateNode;
	      stateNode.effectDuration = 0;
	      stateNode.passiveEffectDuration = 0;
	    }
	  }

	  var nextProps = workInProgress.pendingProps;
	  var nextChildren = nextProps.children;
	  reconcileChildren(current, workInProgress, nextChildren, renderLanes);
	  return workInProgress.child;
	}

	function markRef(current, workInProgress) {
	  var ref = workInProgress.ref;

	  if (current === null && ref !== null || current !== null && current.ref !== ref) {
	    // Schedule a Ref effect
	    workInProgress.flags |= Ref;

	    {
	      workInProgress.flags |= RefStatic;
	    }
	  }
	}

	function updateFunctionComponent(current, workInProgress, Component, nextProps, renderLanes) {
	  {
	    if (workInProgress.type !== workInProgress.elementType) {
	      // Lazy component props can't be validated in createElement
	      // because they're only guaranteed to be resolved here.
	      var innerPropTypes = Component.propTypes;

	      if (innerPropTypes) {
	        checkPropTypes(innerPropTypes, nextProps, // Resolved props
	        'prop', getComponentNameFromType(Component));
	      }
	    }
	  }

	  var context;

	  {
	    var unmaskedContext = getUnmaskedContext(workInProgress, Component, true);
	    context = getMaskedContext(workInProgress, unmaskedContext);
	  }

	  var nextChildren;
	  var hasId;
	  prepareToReadContext(workInProgress, renderLanes);

	  {
	    markComponentRenderStarted(workInProgress);
	  }

	  {
	    ReactCurrentOwner$1.current = workInProgress;
	    setIsRendering(true);
	    nextChildren = renderWithHooks(current, workInProgress, Component, nextProps, context, renderLanes);
	    hasId = checkDidRenderIdHook();

	    if ( workInProgress.mode & StrictLegacyMode) {
	      setIsStrictModeForDevtools(true);

	      try {
	        nextChildren = renderWithHooks(current, workInProgress, Component, nextProps, context, renderLanes);
	        hasId = checkDidRenderIdHook();
	      } finally {
	        setIsStrictModeForDevtools(false);
	      }
	    }

	    setIsRendering(false);
	  }

	  {
	    markComponentRenderStopped();
	  }

	  if (current !== null && !didReceiveUpdate) {
	    bailoutHooks(current, workInProgress, renderLanes);
	    return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
	  }

	  if (getIsHydrating() && hasId) {
	    pushMaterializedTreeId(workInProgress);
	  } // React DevTools reads this flag.


	  workInProgress.flags |= PerformedWork;
	  reconcileChildren(current, workInProgress, nextChildren, renderLanes);
	  return workInProgress.child;
	}

	function updateClassComponent(current, workInProgress, Component, nextProps, renderLanes) {
	  {
	    // This is used by DevTools to force a boundary to error.
	    switch (shouldError(workInProgress)) {
	      case false:
	        {
	          var _instance = workInProgress.stateNode;
	          var ctor = workInProgress.type; // TODO This way of resetting the error boundary state is a hack.
	          // Is there a better way to do this?

	          var tempInstance = new ctor(workInProgress.memoizedProps, _instance.context);
	          var state = tempInstance.state;

	          _instance.updater.enqueueSetState(_instance, state, null);

	          break;
	        }

	      case true:
	        {
	          workInProgress.flags |= DidCapture;
	          workInProgress.flags |= ShouldCapture; // eslint-disable-next-line react-internal/prod-error-codes

	          var error$1 = new Error('Simulated error coming from DevTools');
	          var lane = pickArbitraryLane(renderLanes);
	          workInProgress.lanes = mergeLanes(workInProgress.lanes, lane); // Schedule the error boundary to re-render using updated state

	          var update = createClassErrorUpdate(workInProgress, createCapturedValueAtFiber(error$1, workInProgress), lane);
	          enqueueCapturedUpdate(workInProgress, update);
	          break;
	        }
	    }

	    if (workInProgress.type !== workInProgress.elementType) {
	      // Lazy component props can't be validated in createElement
	      // because they're only guaranteed to be resolved here.
	      var innerPropTypes = Component.propTypes;

	      if (innerPropTypes) {
	        checkPropTypes(innerPropTypes, nextProps, // Resolved props
	        'prop', getComponentNameFromType(Component));
	      }
	    }
	  } // Push context providers early to prevent context stack mismatches.
	  // During mounting we don't know the child context yet as the instance doesn't exist.
	  // We will invalidate the child context in finishClassComponent() right after rendering.


	  var hasContext;

	  if (isContextProvider(Component)) {
	    hasContext = true;
	    pushContextProvider(workInProgress);
	  } else {
	    hasContext = false;
	  }

	  prepareToReadContext(workInProgress, renderLanes);
	  var instance = workInProgress.stateNode;
	  var shouldUpdate;

	  if (instance === null) {
	    resetSuspendedCurrentOnMountInLegacyMode(current, workInProgress); // In the initial pass we might need to construct the instance.

	    constructClassInstance(workInProgress, Component, nextProps);
	    mountClassInstance(workInProgress, Component, nextProps, renderLanes);
	    shouldUpdate = true;
	  } else if (current === null) {
	    // In a resume, we'll already have an instance we can reuse.
	    shouldUpdate = resumeMountClassInstance(workInProgress, Component, nextProps, renderLanes);
	  } else {
	    shouldUpdate = updateClassInstance(current, workInProgress, Component, nextProps, renderLanes);
	  }

	  var nextUnitOfWork = finishClassComponent(current, workInProgress, Component, shouldUpdate, hasContext, renderLanes);

	  {
	    var inst = workInProgress.stateNode;

	    if (shouldUpdate && inst.props !== nextProps) {
	      if (!didWarnAboutReassigningProps) {
	        error('It looks like %s is reassigning its own `this.props` while rendering. ' + 'This is not supported and can lead to confusing bugs.', getComponentNameFromFiber(workInProgress) || 'a component');
	      }

	      didWarnAboutReassigningProps = true;
	    }
	  }

	  return nextUnitOfWork;
	}

	function finishClassComponent(current, workInProgress, Component, shouldUpdate, hasContext, renderLanes) {
	  // Refs should update even if shouldComponentUpdate returns false
	  markRef(current, workInProgress);
	  var didCaptureError = (workInProgress.flags & DidCapture) !== NoFlags;

	  if (!shouldUpdate && !didCaptureError) {
	    // Context providers should defer to sCU for rendering
	    if (hasContext) {
	      invalidateContextProvider(workInProgress, Component, false);
	    }

	    return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
	  }

	  var instance = workInProgress.stateNode; // Rerender

	  ReactCurrentOwner$1.current = workInProgress;
	  var nextChildren;

	  if (didCaptureError && typeof Component.getDerivedStateFromError !== 'function') {
	    // If we captured an error, but getDerivedStateFromError is not defined,
	    // unmount all the children. componentDidCatch will schedule an update to
	    // re-render a fallback. This is temporary until we migrate everyone to
	    // the new API.
	    // TODO: Warn in a future release.
	    nextChildren = null;

	    {
	      stopProfilerTimerIfRunning();
	    }
	  } else {
	    {
	      markComponentRenderStarted(workInProgress);
	    }

	    {
	      setIsRendering(true);
	      nextChildren = instance.render();

	      if ( workInProgress.mode & StrictLegacyMode) {
	        setIsStrictModeForDevtools(true);

	        try {
	          instance.render();
	        } finally {
	          setIsStrictModeForDevtools(false);
	        }
	      }

	      setIsRendering(false);
	    }

	    {
	      markComponentRenderStopped();
	    }
	  } // React DevTools reads this flag.


	  workInProgress.flags |= PerformedWork;

	  if (current !== null && didCaptureError) {
	    // If we're recovering from an error, reconcile without reusing any of
	    // the existing children. Conceptually, the normal children and the children
	    // that are shown on error are two different sets, so we shouldn't reuse
	    // normal children even if their identities match.
	    forceUnmountCurrentAndReconcile(current, workInProgress, nextChildren, renderLanes);
	  } else {
	    reconcileChildren(current, workInProgress, nextChildren, renderLanes);
	  } // Memoize state using the values we just used to render.
	  // TODO: Restructure so we never read values from the instance.


	  workInProgress.memoizedState = instance.state; // The context might have changed so we need to recalculate it.

	  if (hasContext) {
	    invalidateContextProvider(workInProgress, Component, true);
	  }

	  return workInProgress.child;
	}

	function pushHostRootContext(workInProgress) {
	  var root = workInProgress.stateNode;

	  if (root.pendingContext) {
	    pushTopLevelContextObject(workInProgress, root.pendingContext, root.pendingContext !== root.context);
	  } else if (root.context) {
	    // Should always be set
	    pushTopLevelContextObject(workInProgress, root.context, false);
	  }

	  pushHostContainer(workInProgress, root.containerInfo);
	}

	function updateHostRoot(current, workInProgress, renderLanes) {
	  pushHostRootContext(workInProgress);

	  if (current === null) {
	    throw new Error('Should have a current fiber. This is a bug in React.');
	  }

	  var nextProps = workInProgress.pendingProps;
	  var prevState = workInProgress.memoizedState;
	  var prevChildren = prevState.element;
	  cloneUpdateQueue(current, workInProgress);
	  processUpdateQueue(workInProgress, nextProps, null, renderLanes);
	  var nextState = workInProgress.memoizedState;
	  workInProgress.stateNode;
	  // being called "element".


	  var nextChildren = nextState.element;

	  if ( prevState.isDehydrated) {
	    // This is a hydration root whose shell has not yet hydrated. We should
	    // attempt to hydrate.
	    // Flip isDehydrated to false to indicate that when this render
	    // finishes, the root will no longer be dehydrated.
	    var overrideState = {
	      element: nextChildren,
	      isDehydrated: false,
	      cache: nextState.cache,
	      pendingSuspenseBoundaries: nextState.pendingSuspenseBoundaries,
	      transitions: nextState.transitions
	    };
	    var updateQueue = workInProgress.updateQueue; // `baseState` can always be the last state because the root doesn't
	    // have reducer functions so it doesn't need rebasing.

	    updateQueue.baseState = overrideState;
	    workInProgress.memoizedState = overrideState;

	    if (workInProgress.flags & ForceClientRender) {
	      // Something errored during a previous attempt to hydrate the shell, so we
	      // forced a client render.
	      var recoverableError = createCapturedValueAtFiber(new Error('There was an error while hydrating. Because the error happened outside ' + 'of a Suspense boundary, the entire root will switch to ' + 'client rendering.'), workInProgress);
	      return mountHostRootWithoutHydrating(current, workInProgress, nextChildren, renderLanes, recoverableError);
	    } else if (nextChildren !== prevChildren) {
	      var _recoverableError = createCapturedValueAtFiber(new Error('This root received an early update, before anything was able ' + 'hydrate. Switched the entire root to client rendering.'), workInProgress);

	      return mountHostRootWithoutHydrating(current, workInProgress, nextChildren, renderLanes, _recoverableError);
	    } else {
	      // The outermost shell has not hydrated yet. Start hydrating.
	      enterHydrationState(workInProgress);

	      var child = mountChildFibers(workInProgress, null, nextChildren, renderLanes);
	      workInProgress.child = child;
	      var node = child;

	      while (node) {
	        // Mark each child as hydrating. This is a fast path to know whether this
	        // tree is part of a hydrating tree. This is used to determine if a child
	        // node has fully mounted yet, and for scheduling event replaying.
	        // Conceptually this is similar to Placement in that a new subtree is
	        // inserted into the React tree here. It just happens to not need DOM
	        // mutations because it already exists.
	        node.flags = node.flags & ~Placement | Hydrating;
	        node = node.sibling;
	      }
	    }
	  } else {
	    // Root is not dehydrated. Either this is a client-only root, or it
	    // already hydrated.
	    resetHydrationState();

	    if (nextChildren === prevChildren) {
	      return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
	    }

	    reconcileChildren(current, workInProgress, nextChildren, renderLanes);
	  }

	  return workInProgress.child;
	}

	function mountHostRootWithoutHydrating(current, workInProgress, nextChildren, renderLanes, recoverableError) {
	  // Revert to client rendering.
	  resetHydrationState();
	  queueHydrationError(recoverableError);
	  workInProgress.flags |= ForceClientRender;
	  reconcileChildren(current, workInProgress, nextChildren, renderLanes);
	  return workInProgress.child;
	}

	function updateHostComponent(current, workInProgress, renderLanes) {
	  pushHostContext(workInProgress);

	  if (current === null) {
	    tryToClaimNextHydratableInstance(workInProgress);
	  }

	  var type = workInProgress.type;
	  var nextProps = workInProgress.pendingProps;
	  var prevProps = current !== null ? current.memoizedProps : null;
	  var nextChildren = nextProps.children;
	  var isDirectTextChild = shouldSetTextContent(type, nextProps);

	  if (isDirectTextChild) {
	    // We special case a direct text child of a host node. This is a common
	    // case. We won't handle it as a reified child. We will instead handle
	    // this in the host environment that also has access to this prop. That
	    // avoids allocating another HostText fiber and traversing it.
	    nextChildren = null;
	  } else if (prevProps !== null && shouldSetTextContent(type, prevProps)) {
	    // If we're switching from a direct text child to a normal child, or to
	    // empty, we need to schedule the text content to be reset.
	    workInProgress.flags |= ContentReset;
	  }

	  markRef(current, workInProgress);
	  reconcileChildren(current, workInProgress, nextChildren, renderLanes);
	  return workInProgress.child;
	}

	function updateHostText(current, workInProgress) {
	  if (current === null) {
	    tryToClaimNextHydratableInstance(workInProgress);
	  } // Nothing to do here. This is terminal. We'll do the completion step
	  // immediately after.


	  return null;
	}

	function mountLazyComponent(_current, workInProgress, elementType, renderLanes) {
	  resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress);
	  var props = workInProgress.pendingProps;
	  var lazyComponent = elementType;
	  var payload = lazyComponent._payload;
	  var init = lazyComponent._init;
	  var Component = init(payload); // Store the unwrapped component in the type.

	  workInProgress.type = Component;
	  var resolvedTag = workInProgress.tag = resolveLazyComponentTag(Component);
	  var resolvedProps = resolveDefaultProps(Component, props);
	  var child;

	  switch (resolvedTag) {
	    case FunctionComponent:
	      {
	        {
	          validateFunctionComponentInDev(workInProgress, Component);
	          workInProgress.type = Component = resolveFunctionForHotReloading(Component);
	        }

	        child = updateFunctionComponent(null, workInProgress, Component, resolvedProps, renderLanes);
	        return child;
	      }

	    case ClassComponent:
	      {
	        {
	          workInProgress.type = Component = resolveClassForHotReloading(Component);
	        }

	        child = updateClassComponent(null, workInProgress, Component, resolvedProps, renderLanes);
	        return child;
	      }

	    case ForwardRef:
	      {
	        {
	          workInProgress.type = Component = resolveForwardRefForHotReloading(Component);
	        }

	        child = updateForwardRef(null, workInProgress, Component, resolvedProps, renderLanes);
	        return child;
	      }

	    case MemoComponent:
	      {
	        {
	          if (workInProgress.type !== workInProgress.elementType) {
	            var outerPropTypes = Component.propTypes;

	            if (outerPropTypes) {
	              checkPropTypes(outerPropTypes, resolvedProps, // Resolved for outer only
	              'prop', getComponentNameFromType(Component));
	            }
	          }
	        }

	        child = updateMemoComponent(null, workInProgress, Component, resolveDefaultProps(Component.type, resolvedProps), // The inner type can have defaults too
	        renderLanes);
	        return child;
	      }
	  }

	  var hint = '';

	  {
	    if (Component !== null && typeof Component === 'object' && Component.$$typeof === REACT_LAZY_TYPE) {
	      hint = ' Did you wrap a component in React.lazy() more than once?';
	    }
	  } // This message intentionally doesn't mention ForwardRef or MemoComponent
	  // because the fact that it's a separate type of work is an
	  // implementation detail.


	  throw new Error("Element type is invalid. Received a promise that resolves to: " + Component + ". " + ("Lazy element type must resolve to a class or function." + hint));
	}

	function mountIncompleteClassComponent(_current, workInProgress, Component, nextProps, renderLanes) {
	  resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress); // Promote the fiber to a class and try rendering again.

	  workInProgress.tag = ClassComponent; // The rest of this function is a fork of `updateClassComponent`
	  // Push context providers early to prevent context stack mismatches.
	  // During mounting we don't know the child context yet as the instance doesn't exist.
	  // We will invalidate the child context in finishClassComponent() right after rendering.

	  var hasContext;

	  if (isContextProvider(Component)) {
	    hasContext = true;
	    pushContextProvider(workInProgress);
	  } else {
	    hasContext = false;
	  }

	  prepareToReadContext(workInProgress, renderLanes);
	  constructClassInstance(workInProgress, Component, nextProps);
	  mountClassInstance(workInProgress, Component, nextProps, renderLanes);
	  return finishClassComponent(null, workInProgress, Component, true, hasContext, renderLanes);
	}

	function mountIndeterminateComponent(_current, workInProgress, Component, renderLanes) {
	  resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress);
	  var props = workInProgress.pendingProps;
	  var context;

	  {
	    var unmaskedContext = getUnmaskedContext(workInProgress, Component, false);
	    context = getMaskedContext(workInProgress, unmaskedContext);
	  }

	  prepareToReadContext(workInProgress, renderLanes);
	  var value;
	  var hasId;

	  {
	    markComponentRenderStarted(workInProgress);
	  }

	  {
	    if (Component.prototype && typeof Component.prototype.render === 'function') {
	      var componentName = getComponentNameFromType(Component) || 'Unknown';

	      if (!didWarnAboutBadClass[componentName]) {
	        error("The <%s /> component appears to have a render method, but doesn't extend React.Component. " + 'This is likely to cause errors. Change %s to extend React.Component instead.', componentName, componentName);

	        didWarnAboutBadClass[componentName] = true;
	      }
	    }

	    if (workInProgress.mode & StrictLegacyMode) {
	      ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress, null);
	    }

	    setIsRendering(true);
	    ReactCurrentOwner$1.current = workInProgress;
	    value = renderWithHooks(null, workInProgress, Component, props, context, renderLanes);
	    hasId = checkDidRenderIdHook();
	    setIsRendering(false);
	  }

	  {
	    markComponentRenderStopped();
	  } // React DevTools reads this flag.


	  workInProgress.flags |= PerformedWork;

	  {
	    // Support for module components is deprecated and is removed behind a flag.
	    // Whether or not it would crash later, we want to show a good message in DEV first.
	    if (typeof value === 'object' && value !== null && typeof value.render === 'function' && value.$$typeof === undefined) {
	      var _componentName = getComponentNameFromType(Component) || 'Unknown';

	      if (!didWarnAboutModulePatternComponent[_componentName]) {
	        error('The <%s /> component appears to be a function component that returns a class instance. ' + 'Change %s to a class that extends React.Component instead. ' + "If you can't use a class try assigning the prototype on the function as a workaround. " + "`%s.prototype = React.Component.prototype`. Don't use an arrow function since it " + 'cannot be called with `new` by React.', _componentName, _componentName, _componentName);

	        didWarnAboutModulePatternComponent[_componentName] = true;
	      }
	    }
	  }

	  if ( // Run these checks in production only if the flag is off.
	  // Eventually we'll delete this branch altogether.
	   typeof value === 'object' && value !== null && typeof value.render === 'function' && value.$$typeof === undefined) {
	    {
	      var _componentName2 = getComponentNameFromType(Component) || 'Unknown';

	      if (!didWarnAboutModulePatternComponent[_componentName2]) {
	        error('The <%s /> component appears to be a function component that returns a class instance. ' + 'Change %s to a class that extends React.Component instead. ' + "If you can't use a class try assigning the prototype on the function as a workaround. " + "`%s.prototype = React.Component.prototype`. Don't use an arrow function since it " + 'cannot be called with `new` by React.', _componentName2, _componentName2, _componentName2);

	        didWarnAboutModulePatternComponent[_componentName2] = true;
	      }
	    } // Proceed under the assumption that this is a class instance


	    workInProgress.tag = ClassComponent; // Throw out any hooks that were used.

	    workInProgress.memoizedState = null;
	    workInProgress.updateQueue = null; // Push context providers early to prevent context stack mismatches.
	    // During mounting we don't know the child context yet as the instance doesn't exist.
	    // We will invalidate the child context in finishClassComponent() right after rendering.

	    var hasContext = false;

	    if (isContextProvider(Component)) {
	      hasContext = true;
	      pushContextProvider(workInProgress);
	    } else {
	      hasContext = false;
	    }

	    workInProgress.memoizedState = value.state !== null && value.state !== undefined ? value.state : null;
	    initializeUpdateQueue(workInProgress);
	    adoptClassInstance(workInProgress, value);
	    mountClassInstance(workInProgress, Component, props, renderLanes);
	    return finishClassComponent(null, workInProgress, Component, true, hasContext, renderLanes);
	  } else {
	    // Proceed under the assumption that this is a function component
	    workInProgress.tag = FunctionComponent;

	    {

	      if ( workInProgress.mode & StrictLegacyMode) {
	        setIsStrictModeForDevtools(true);

	        try {
	          value = renderWithHooks(null, workInProgress, Component, props, context, renderLanes);
	          hasId = checkDidRenderIdHook();
	        } finally {
	          setIsStrictModeForDevtools(false);
	        }
	      }
	    }

	    if (getIsHydrating() && hasId) {
	      pushMaterializedTreeId(workInProgress);
	    }

	    reconcileChildren(null, workInProgress, value, renderLanes);

	    {
	      validateFunctionComponentInDev(workInProgress, Component);
	    }

	    return workInProgress.child;
	  }
	}

	function validateFunctionComponentInDev(workInProgress, Component) {
	  {
	    if (Component) {
	      if (Component.childContextTypes) {
	        error('%s(...): childContextTypes cannot be defined on a function component.', Component.displayName || Component.name || 'Component');
	      }
	    }

	    if (workInProgress.ref !== null) {
	      var info = '';
	      var ownerName = getCurrentFiberOwnerNameInDevOrNull();

	      if (ownerName) {
	        info += '\n\nCheck the render method of `' + ownerName + '`.';
	      }

	      var warningKey = ownerName || '';
	      var debugSource = workInProgress._debugSource;

	      if (debugSource) {
	        warningKey = debugSource.fileName + ':' + debugSource.lineNumber;
	      }

	      if (!didWarnAboutFunctionRefs[warningKey]) {
	        didWarnAboutFunctionRefs[warningKey] = true;

	        error('Function components cannot be given refs. ' + 'Attempts to access this ref will fail. ' + 'Did you mean to use React.forwardRef()?%s', info);
	      }
	    }

	    if ( Component.defaultProps !== undefined) {
	      var componentName = getComponentNameFromType(Component) || 'Unknown';

	      if (!didWarnAboutDefaultPropsOnFunctionComponent[componentName]) {
	        error('%s: Support for defaultProps will be removed from function components ' + 'in a future major release. Use JavaScript default parameters instead.', componentName);

	        didWarnAboutDefaultPropsOnFunctionComponent[componentName] = true;
	      }
	    }

	    if (typeof Component.getDerivedStateFromProps === 'function') {
	      var _componentName3 = getComponentNameFromType(Component) || 'Unknown';

	      if (!didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3]) {
	        error('%s: Function components do not support getDerivedStateFromProps.', _componentName3);

	        didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3] = true;
	      }
	    }

	    if (typeof Component.contextType === 'object' && Component.contextType !== null) {
	      var _componentName4 = getComponentNameFromType(Component) || 'Unknown';

	      if (!didWarnAboutContextTypeOnFunctionComponent[_componentName4]) {
	        error('%s: Function components do not support contextType.', _componentName4);

	        didWarnAboutContextTypeOnFunctionComponent[_componentName4] = true;
	      }
	    }
	  }
	}

	var SUSPENDED_MARKER = {
	  dehydrated: null,
	  treeContext: null,
	  retryLane: NoLane
	};

	function mountSuspenseOffscreenState(renderLanes) {
	  return {
	    baseLanes: renderLanes,
	    cachePool: getSuspendedCache(),
	    transitions: null
	  };
	}

	function updateSuspenseOffscreenState(prevOffscreenState, renderLanes) {
	  var cachePool = null;

	  return {
	    baseLanes: mergeLanes(prevOffscreenState.baseLanes, renderLanes),
	    cachePool: cachePool,
	    transitions: prevOffscreenState.transitions
	  };
	} // TODO: Probably should inline this back


	function shouldRemainOnFallback(suspenseContext, current, workInProgress, renderLanes) {
	  // If we're already showing a fallback, there are cases where we need to
	  // remain on that fallback regardless of whether the content has resolved.
	  // For example, SuspenseList coordinates when nested content appears.
	  if (current !== null) {
	    var suspenseState = current.memoizedState;

	    if (suspenseState === null) {
	      // Currently showing content. Don't hide it, even if ForceSuspenseFallback
	      // is true. More precise name might be "ForceRemainSuspenseFallback".
	      // Note: This is a factoring smell. Can't remain on a fallback if there's
	      // no fallback to remain on.
	      return false;
	    }
	  } // Not currently showing content. Consult the Suspense context.


	  return hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
	}

	function getRemainingWorkInPrimaryTree(current, renderLanes) {
	  // TODO: Should not remove render lanes that were pinged during this render
	  return removeLanes(current.childLanes, renderLanes);
	}

	function updateSuspenseComponent(current, workInProgress, renderLanes) {
	  var nextProps = workInProgress.pendingProps; // This is used by DevTools to force a boundary to suspend.

	  {
	    if (shouldSuspend(workInProgress)) {
	      workInProgress.flags |= DidCapture;
	    }
	  }

	  var suspenseContext = suspenseStackCursor.current;
	  var showFallback = false;
	  var didSuspend = (workInProgress.flags & DidCapture) !== NoFlags;

	  if (didSuspend || shouldRemainOnFallback(suspenseContext, current)) {
	    // Something in this boundary's subtree already suspended. Switch to
	    // rendering the fallback children.
	    showFallback = true;
	    workInProgress.flags &= ~DidCapture;
	  } else {
	    // Attempting the main content
	    if (current === null || current.memoizedState !== null) {
	      // This is a new mount or this boundary is already showing a fallback state.
	      // Mark this subtree context as having at least one invisible parent that could
	      // handle the fallback state.
	      // Avoided boundaries are not considered since they cannot handle preferred fallback states.
	      {
	        suspenseContext = addSubtreeSuspenseContext(suspenseContext, InvisibleParentSuspenseContext);
	      }
	    }
	  }

	  suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
	  pushSuspenseContext(workInProgress, suspenseContext); // OK, the next part is confusing. We're about to reconcile the Suspense
	  // boundary's children. This involves some custom reconciliation logic. Two
	  // main reasons this is so complicated.
	  //
	  // First, Legacy Mode has different semantics for backwards compatibility. The
	  // primary tree will commit in an inconsistent state, so when we do the
	  // second pass to render the fallback, we do some exceedingly, uh, clever
	  // hacks to make that not totally break. Like transferring effects and
	  // deletions from hidden tree. In Concurrent Mode, it's much simpler,
	  // because we bailout on the primary tree completely and leave it in its old
	  // state, no effects. Same as what we do for Offscreen (except that
	  // Offscreen doesn't have the first render pass).
	  //
	  // Second is hydration. During hydration, the Suspense fiber has a slightly
	  // different layout, where the child points to a dehydrated fragment, which
	  // contains the DOM rendered by the server.
	  //
	  // Third, even if you set all that aside, Suspense is like error boundaries in
	  // that we first we try to render one tree, and if that fails, we render again
	  // and switch to a different tree. Like a try/catch block. So we have to track
	  // which branch we're currently rendering. Ideally we would model this using
	  // a stack.

	  if (current === null) {
	    // Initial mount
	    // Special path for hydration
	    // If we're currently hydrating, try to hydrate this boundary.
	    tryToClaimNextHydratableInstance(workInProgress); // This could've been a dehydrated suspense component.

	    var suspenseState = workInProgress.memoizedState;

	    if (suspenseState !== null) {
	      var dehydrated = suspenseState.dehydrated;

	      if (dehydrated !== null) {
	        return mountDehydratedSuspenseComponent(workInProgress, dehydrated);
	      }
	    }

	    var nextPrimaryChildren = nextProps.children;
	    var nextFallbackChildren = nextProps.fallback;

	    if (showFallback) {
	      var fallbackFragment = mountSuspenseFallbackChildren(workInProgress, nextPrimaryChildren, nextFallbackChildren, renderLanes);
	      var primaryChildFragment = workInProgress.child;
	      primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes);
	      workInProgress.memoizedState = SUSPENDED_MARKER;

	      return fallbackFragment;
	    } else {
	      return mountSuspensePrimaryChildren(workInProgress, nextPrimaryChildren);
	    }
	  } else {
	    // This is an update.
	    // Special path for hydration
	    var prevState = current.memoizedState;

	    if (prevState !== null) {
	      var _dehydrated = prevState.dehydrated;

	      if (_dehydrated !== null) {
	        return updateDehydratedSuspenseComponent(current, workInProgress, didSuspend, nextProps, _dehydrated, prevState, renderLanes);
	      }
	    }

	    if (showFallback) {
	      var _nextFallbackChildren = nextProps.fallback;
	      var _nextPrimaryChildren = nextProps.children;
	      var fallbackChildFragment = updateSuspenseFallbackChildren(current, workInProgress, _nextPrimaryChildren, _nextFallbackChildren, renderLanes);
	      var _primaryChildFragment2 = workInProgress.child;
	      var prevOffscreenState = current.child.memoizedState;
	      _primaryChildFragment2.memoizedState = prevOffscreenState === null ? mountSuspenseOffscreenState(renderLanes) : updateSuspenseOffscreenState(prevOffscreenState, renderLanes);

	      _primaryChildFragment2.childLanes = getRemainingWorkInPrimaryTree(current, renderLanes);
	      workInProgress.memoizedState = SUSPENDED_MARKER;
	      return fallbackChildFragment;
	    } else {
	      var _nextPrimaryChildren2 = nextProps.children;

	      var _primaryChildFragment3 = updateSuspensePrimaryChildren(current, workInProgress, _nextPrimaryChildren2, renderLanes);

	      workInProgress.memoizedState = null;
	      return _primaryChildFragment3;
	    }
	  }
	}

	function mountSuspensePrimaryChildren(workInProgress, primaryChildren, renderLanes) {
	  var mode = workInProgress.mode;
	  var primaryChildProps = {
	    mode: 'visible',
	    children: primaryChildren
	  };
	  var primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode);
	  primaryChildFragment.return = workInProgress;
	  workInProgress.child = primaryChildFragment;
	  return primaryChildFragment;
	}

	function mountSuspenseFallbackChildren(workInProgress, primaryChildren, fallbackChildren, renderLanes) {
	  var mode = workInProgress.mode;
	  var progressedPrimaryFragment = workInProgress.child;
	  var primaryChildProps = {
	    mode: 'hidden',
	    children: primaryChildren
	  };
	  var primaryChildFragment;
	  var fallbackChildFragment;

	  if ((mode & ConcurrentMode) === NoMode && progressedPrimaryFragment !== null) {
	    // In legacy mode, we commit the primary tree as if it successfully
	    // completed, even though it's in an inconsistent state.
	    primaryChildFragment = progressedPrimaryFragment;
	    primaryChildFragment.childLanes = NoLanes;
	    primaryChildFragment.pendingProps = primaryChildProps;

	    if ( workInProgress.mode & ProfileMode) {
	      // Reset the durations from the first pass so they aren't included in the
	      // final amounts. This seems counterintuitive, since we're intentionally
	      // not measuring part of the render phase, but this makes it match what we
	      // do in Concurrent Mode.
	      primaryChildFragment.actualDuration = 0;
	      primaryChildFragment.actualStartTime = -1;
	      primaryChildFragment.selfBaseDuration = 0;
	      primaryChildFragment.treeBaseDuration = 0;
	    }

	    fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes, null);
	  } else {
	    primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode);
	    fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes, null);
	  }

	  primaryChildFragment.return = workInProgress;
	  fallbackChildFragment.return = workInProgress;
	  primaryChildFragment.sibling = fallbackChildFragment;
	  workInProgress.child = primaryChildFragment;
	  return fallbackChildFragment;
	}

	function mountWorkInProgressOffscreenFiber(offscreenProps, mode, renderLanes) {
	  // The props argument to `createFiberFromOffscreen` is `any` typed, so we use
	  // this wrapper function to constrain it.
	  return createFiberFromOffscreen(offscreenProps, mode, NoLanes, null);
	}

	function updateWorkInProgressOffscreenFiber(current, offscreenProps) {
	  // The props argument to `createWorkInProgress` is `any` typed, so we use this
	  // wrapper function to constrain it.
	  return createWorkInProgress(current, offscreenProps);
	}

	function updateSuspensePrimaryChildren(current, workInProgress, primaryChildren, renderLanes) {
	  var currentPrimaryChildFragment = current.child;
	  var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
	  var primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, {
	    mode: 'visible',
	    children: primaryChildren
	  });

	  if ((workInProgress.mode & ConcurrentMode) === NoMode) {
	    primaryChildFragment.lanes = renderLanes;
	  }

	  primaryChildFragment.return = workInProgress;
	  primaryChildFragment.sibling = null;

	  if (currentFallbackChildFragment !== null) {
	    // Delete the fallback child fragment
	    var deletions = workInProgress.deletions;

	    if (deletions === null) {
	      workInProgress.deletions = [currentFallbackChildFragment];
	      workInProgress.flags |= ChildDeletion;
	    } else {
	      deletions.push(currentFallbackChildFragment);
	    }
	  }

	  workInProgress.child = primaryChildFragment;
	  return primaryChildFragment;
	}

	function updateSuspenseFallbackChildren(current, workInProgress, primaryChildren, fallbackChildren, renderLanes) {
	  var mode = workInProgress.mode;
	  var currentPrimaryChildFragment = current.child;
	  var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
	  var primaryChildProps = {
	    mode: 'hidden',
	    children: primaryChildren
	  };
	  var primaryChildFragment;

	  if ( // In legacy mode, we commit the primary tree as if it successfully
	  // completed, even though it's in an inconsistent state.
	  (mode & ConcurrentMode) === NoMode && // Make sure we're on the second pass, i.e. the primary child fragment was
	  // already cloned. In legacy mode, the only case where this isn't true is
	  // when DevTools forces us to display a fallback; we skip the first render
	  // pass entirely and go straight to rendering the fallback. (In Concurrent
	  // Mode, SuspenseList can also trigger this scenario, but this is a legacy-
	  // only codepath.)
	  workInProgress.child !== currentPrimaryChildFragment) {
	    var progressedPrimaryFragment = workInProgress.child;
	    primaryChildFragment = progressedPrimaryFragment;
	    primaryChildFragment.childLanes = NoLanes;
	    primaryChildFragment.pendingProps = primaryChildProps;

	    if ( workInProgress.mode & ProfileMode) {
	      // Reset the durations from the first pass so they aren't included in the
	      // final amounts. This seems counterintuitive, since we're intentionally
	      // not measuring part of the render phase, but this makes it match what we
	      // do in Concurrent Mode.
	      primaryChildFragment.actualDuration = 0;
	      primaryChildFragment.actualStartTime = -1;
	      primaryChildFragment.selfBaseDuration = currentPrimaryChildFragment.selfBaseDuration;
	      primaryChildFragment.treeBaseDuration = currentPrimaryChildFragment.treeBaseDuration;
	    } // The fallback fiber was added as a deletion during the first pass.
	    // However, since we're going to remain on the fallback, we no longer want
	    // to delete it.


	    workInProgress.deletions = null;
	  } else {
	    primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, primaryChildProps); // Since we're reusing a current tree, we need to reuse the flags, too.
	    // (We don't do this in legacy mode, because in legacy mode we don't re-use
	    // the current tree; see previous branch.)

	    primaryChildFragment.subtreeFlags = currentPrimaryChildFragment.subtreeFlags & StaticMask;
	  }

	  var fallbackChildFragment;

	  if (currentFallbackChildFragment !== null) {
	    fallbackChildFragment = createWorkInProgress(currentFallbackChildFragment, fallbackChildren);
	  } else {
	    fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes, null); // Needs a placement effect because the parent (the Suspense boundary) already
	    // mounted but this is a new fiber.

	    fallbackChildFragment.flags |= Placement;
	  }

	  fallbackChildFragment.return = workInProgress;
	  primaryChildFragment.return = workInProgress;
	  primaryChildFragment.sibling = fallbackChildFragment;
	  workInProgress.child = primaryChildFragment;
	  return fallbackChildFragment;
	}

	function retrySuspenseComponentWithoutHydrating(current, workInProgress, renderLanes, recoverableError) {
	  // Falling back to client rendering. Because this has performance
	  // implications, it's considered a recoverable error, even though the user
	  // likely won't observe anything wrong with the UI.
	  //
	  // The error is passed in as an argument to enforce that every caller provide
	  // a custom message, or explicitly opt out (currently the only path that opts
	  // out is legacy mode; every concurrent path provides an error).
	  if (recoverableError !== null) {
	    queueHydrationError(recoverableError);
	  } // This will add the old fiber to the deletion list


	  reconcileChildFibers(workInProgress, current.child, null, renderLanes); // We're now not suspended nor dehydrated.

	  var nextProps = workInProgress.pendingProps;
	  var primaryChildren = nextProps.children;
	  var primaryChildFragment = mountSuspensePrimaryChildren(workInProgress, primaryChildren); // Needs a placement effect because the parent (the Suspense boundary) already
	  // mounted but this is a new fiber.

	  primaryChildFragment.flags |= Placement;
	  workInProgress.memoizedState = null;
	  return primaryChildFragment;
	}

	function mountSuspenseFallbackAfterRetryWithoutHydrating(current, workInProgress, primaryChildren, fallbackChildren, renderLanes) {
	  var fiberMode = workInProgress.mode;
	  var primaryChildProps = {
	    mode: 'visible',
	    children: primaryChildren
	  };
	  var primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, fiberMode);
	  var fallbackChildFragment = createFiberFromFragment(fallbackChildren, fiberMode, renderLanes, null); // Needs a placement effect because the parent (the Suspense
	  // boundary) already mounted but this is a new fiber.

	  fallbackChildFragment.flags |= Placement;
	  primaryChildFragment.return = workInProgress;
	  fallbackChildFragment.return = workInProgress;
	  primaryChildFragment.sibling = fallbackChildFragment;
	  workInProgress.child = primaryChildFragment;

	  if ((workInProgress.mode & ConcurrentMode) !== NoMode) {
	    // We will have dropped the effect list which contains the
	    // deletion. We need to reconcile to delete the current child.
	    reconcileChildFibers(workInProgress, current.child, null, renderLanes);
	  }

	  return fallbackChildFragment;
	}

	function mountDehydratedSuspenseComponent(workInProgress, suspenseInstance, renderLanes) {
	  // During the first pass, we'll bail out and not drill into the children.
	  // Instead, we'll leave the content in place and try to hydrate it later.
	  if ((workInProgress.mode & ConcurrentMode) === NoMode) {
	    {
	      error('Cannot hydrate Suspense in legacy mode. Switch from ' + 'ReactDOM.hydrate(element, container) to ' + 'ReactDOMClient.hydrateRoot(container, <App />)' + '.render(element) or remove the Suspense components from ' + 'the server rendered components.');
	    }

	    workInProgress.lanes = laneToLanes(SyncLane);
	  } else if (isSuspenseInstanceFallback(suspenseInstance)) {
	    // This is a client-only boundary. Since we won't get any content from the server
	    // for this, we need to schedule that at a higher priority based on when it would
	    // have timed out. In theory we could render it in this pass but it would have the
	    // wrong priority associated with it and will prevent hydration of parent path.
	    // Instead, we'll leave work left on it to render it in a separate commit.
	    // TODO This time should be the time at which the server rendered response that is
	    // a parent to this boundary was displayed. However, since we currently don't have
	    // a protocol to transfer that time, we'll just estimate it by using the current
	    // time. This will mean that Suspense timeouts are slightly shifted to later than
	    // they should be.
	    // Schedule a normal pri update to render this content.
	    workInProgress.lanes = laneToLanes(DefaultHydrationLane);
	  } else {
	    // We'll continue hydrating the rest at offscreen priority since we'll already
	    // be showing the right content coming from the server, it is no rush.
	    workInProgress.lanes = laneToLanes(OffscreenLane);
	  }

	  return null;
	}

	function updateDehydratedSuspenseComponent(current, workInProgress, didSuspend, nextProps, suspenseInstance, suspenseState, renderLanes) {
	  if (!didSuspend) {
	    // This is the first render pass. Attempt to hydrate.
	    // We should never be hydrating at this point because it is the first pass,
	    // but after we've already committed once.
	    warnIfHydrating();

	    if ((workInProgress.mode & ConcurrentMode) === NoMode) {
	      return retrySuspenseComponentWithoutHydrating(current, workInProgress, renderLanes, // TODO: When we delete legacy mode, we should make this error argument
	      // required — every concurrent mode path that causes hydration to
	      // de-opt to client rendering should have an error message.
	      null);
	    }

	    if (isSuspenseInstanceFallback(suspenseInstance)) {
	      // This boundary is in a permanent fallback state. In this case, we'll never
	      // get an update and we'll never be able to hydrate the final content. Let's just try the
	      // client side render instead.
	      var digest, message, stack;

	      {
	        var _getSuspenseInstanceF = getSuspenseInstanceFallbackErrorDetails(suspenseInstance);

	        digest = _getSuspenseInstanceF.digest;
	        message = _getSuspenseInstanceF.message;
	        stack = _getSuspenseInstanceF.stack;
	      }

	      var error;

	      if (message) {
	        // eslint-disable-next-line react-internal/prod-error-codes
	        error = new Error(message);
	      } else {
	        error = new Error('The server could not finish this Suspense boundary, likely ' + 'due to an error during server rendering. Switched to ' + 'client rendering.');
	      }

	      var capturedValue = createCapturedValue(error, digest, stack);
	      return retrySuspenseComponentWithoutHydrating(current, workInProgress, renderLanes, capturedValue);
	    }
	    // any context has changed, we need to treat is as if the input might have changed.


	    var hasContextChanged = includesSomeLane(renderLanes, current.childLanes);

	    if (didReceiveUpdate || hasContextChanged) {
	      // This boundary has changed since the first render. This means that we are now unable to
	      // hydrate it. We might still be able to hydrate it using a higher priority lane.
	      var root = getWorkInProgressRoot();

	      if (root !== null) {
	        var attemptHydrationAtLane = getBumpedLaneForHydration(root, renderLanes);

	        if (attemptHydrationAtLane !== NoLane && attemptHydrationAtLane !== suspenseState.retryLane) {
	          // Intentionally mutating since this render will get interrupted. This
	          // is one of the very rare times where we mutate the current tree
	          // during the render phase.
	          suspenseState.retryLane = attemptHydrationAtLane; // TODO: Ideally this would inherit the event time of the current render

	          var eventTime = NoTimestamp;
	          enqueueConcurrentRenderForLane(current, attemptHydrationAtLane);
	          scheduleUpdateOnFiber(root, current, attemptHydrationAtLane, eventTime);
	        }
	      } // If we have scheduled higher pri work above, this will probably just abort the render
	      // since we now have higher priority work, but in case it doesn't, we need to prepare to
	      // render something, if we time out. Even if that requires us to delete everything and
	      // skip hydration.
	      // Delay having to do this as long as the suspense timeout allows us.


	      renderDidSuspendDelayIfPossible();

	      var _capturedValue = createCapturedValue(new Error('This Suspense boundary received an update before it finished ' + 'hydrating. This caused the boundary to switch to client rendering. ' + 'The usual way to fix this is to wrap the original update ' + 'in startTransition.'));

	      return retrySuspenseComponentWithoutHydrating(current, workInProgress, renderLanes, _capturedValue);
	    } else if (isSuspenseInstancePending(suspenseInstance)) {
	      // This component is still pending more data from the server, so we can't hydrate its
	      // content. We treat it as if this component suspended itself. It might seem as if
	      // we could just try to render it client-side instead. However, this will perform a
	      // lot of unnecessary work and is unlikely to complete since it often will suspend
	      // on missing data anyway. Additionally, the server might be able to render more
	      // than we can on the client yet. In that case we'd end up with more fallback states
	      // on the client than if we just leave it alone. If the server times out or errors
	      // these should update this boundary to the permanent Fallback state instead.
	      // Mark it as having captured (i.e. suspended).
	      workInProgress.flags |= DidCapture; // Leave the child in place. I.e. the dehydrated fragment.

	      workInProgress.child = current.child; // Register a callback to retry this boundary once the server has sent the result.

	      var retry = retryDehydratedSuspenseBoundary.bind(null, current);
	      registerSuspenseInstanceRetry(suspenseInstance, retry);
	      return null;
	    } else {
	      // This is the first attempt.
	      reenterHydrationStateFromDehydratedSuspenseInstance(workInProgress, suspenseInstance, suspenseState.treeContext);
	      var primaryChildren = nextProps.children;
	      var primaryChildFragment = mountSuspensePrimaryChildren(workInProgress, primaryChildren); // Mark the children as hydrating. This is a fast path to know whether this
	      // tree is part of a hydrating tree. This is used to determine if a child
	      // node has fully mounted yet, and for scheduling event replaying.
	      // Conceptually this is similar to Placement in that a new subtree is
	      // inserted into the React tree here. It just happens to not need DOM
	      // mutations because it already exists.

	      primaryChildFragment.flags |= Hydrating;
	      return primaryChildFragment;
	    }
	  } else {
	    // This is the second render pass. We already attempted to hydrated, but
	    // something either suspended or errored.
	    if (workInProgress.flags & ForceClientRender) {
	      // Something errored during hydration. Try again without hydrating.
	      workInProgress.flags &= ~ForceClientRender;

	      var _capturedValue2 = createCapturedValue(new Error('There was an error while hydrating this Suspense boundary. ' + 'Switched to client rendering.'));

	      return retrySuspenseComponentWithoutHydrating(current, workInProgress, renderLanes, _capturedValue2);
	    } else if (workInProgress.memoizedState !== null) {
	      // Something suspended and we should still be in dehydrated mode.
	      // Leave the existing child in place.
	      workInProgress.child = current.child; // The dehydrated completion pass expects this flag to be there
	      // but the normal suspense pass doesn't.

	      workInProgress.flags |= DidCapture;
	      return null;
	    } else {
	      // Suspended but we should no longer be in dehydrated mode.
	      // Therefore we now have to render the fallback.
	      var nextPrimaryChildren = nextProps.children;
	      var nextFallbackChildren = nextProps.fallback;
	      var fallbackChildFragment = mountSuspenseFallbackAfterRetryWithoutHydrating(current, workInProgress, nextPrimaryChildren, nextFallbackChildren, renderLanes);
	      var _primaryChildFragment4 = workInProgress.child;
	      _primaryChildFragment4.memoizedState = mountSuspenseOffscreenState(renderLanes);
	      workInProgress.memoizedState = SUSPENDED_MARKER;
	      return fallbackChildFragment;
	    }
	  }
	}

	function scheduleSuspenseWorkOnFiber(fiber, renderLanes, propagationRoot) {
	  fiber.lanes = mergeLanes(fiber.lanes, renderLanes);
	  var alternate = fiber.alternate;

	  if (alternate !== null) {
	    alternate.lanes = mergeLanes(alternate.lanes, renderLanes);
	  }

	  scheduleContextWorkOnParentPath(fiber.return, renderLanes, propagationRoot);
	}

	function propagateSuspenseContextChange(workInProgress, firstChild, renderLanes) {
	  // Mark any Suspense boundaries with fallbacks as having work to do.
	  // If they were previously forced into fallbacks, they may now be able
	  // to unblock.
	  var node = firstChild;

	  while (node !== null) {
	    if (node.tag === SuspenseComponent) {
	      var state = node.memoizedState;

	      if (state !== null) {
	        scheduleSuspenseWorkOnFiber(node, renderLanes, workInProgress);
	      }
	    } else if (node.tag === SuspenseListComponent) {
	      // If the tail is hidden there might not be an Suspense boundaries
	      // to schedule work on. In this case we have to schedule it on the
	      // list itself.
	      // We don't have to traverse to the children of the list since
	      // the list will propagate the change when it rerenders.
	      scheduleSuspenseWorkOnFiber(node, renderLanes, workInProgress);
	    } else if (node.child !== null) {
	      node.child.return = node;
	      node = node.child;
	      continue;
	    }

	    if (node === workInProgress) {
	      return;
	    }

	    while (node.sibling === null) {
	      if (node.return === null || node.return === workInProgress) {
	        return;
	      }

	      node = node.return;
	    }

	    node.sibling.return = node.return;
	    node = node.sibling;
	  }
	}

	function findLastContentRow(firstChild) {
	  // This is going to find the last row among these children that is already
	  // showing content on the screen, as opposed to being in fallback state or
	  // new. If a row has multiple Suspense boundaries, any of them being in the
	  // fallback state, counts as the whole row being in a fallback state.
	  // Note that the "rows" will be workInProgress, but any nested children
	  // will still be current since we haven't rendered them yet. The mounted
	  // order may not be the same as the new order. We use the new order.
	  var row = firstChild;
	  var lastContentRow = null;

	  while (row !== null) {
	    var currentRow = row.alternate; // New rows can't be content rows.

	    if (currentRow !== null && findFirstSuspended(currentRow) === null) {
	      lastContentRow = row;
	    }

	    row = row.sibling;
	  }

	  return lastContentRow;
	}

	function validateRevealOrder(revealOrder) {
	  {
	    if (revealOrder !== undefined && revealOrder !== 'forwards' && revealOrder !== 'backwards' && revealOrder !== 'together' && !didWarnAboutRevealOrder[revealOrder]) {
	      didWarnAboutRevealOrder[revealOrder] = true;

	      if (typeof revealOrder === 'string') {
	        switch (revealOrder.toLowerCase()) {
	          case 'together':
	          case 'forwards':
	          case 'backwards':
	            {
	              error('"%s" is not a valid value for revealOrder on <SuspenseList />. ' + 'Use lowercase "%s" instead.', revealOrder, revealOrder.toLowerCase());

	              break;
	            }

	          case 'forward':
	          case 'backward':
	            {
	              error('"%s" is not a valid value for revealOrder on <SuspenseList />. ' + 'React uses the -s suffix in the spelling. Use "%ss" instead.', revealOrder, revealOrder.toLowerCase());

	              break;
	            }

	          default:
	            error('"%s" is not a supported revealOrder on <SuspenseList />. ' + 'Did you mean "together", "forwards" or "backwards"?', revealOrder);

	            break;
	        }
	      } else {
	        error('%s is not a supported value for revealOrder on <SuspenseList />. ' + 'Did you mean "together", "forwards" or "backwards"?', revealOrder);
	      }
	    }
	  }
	}

	function validateTailOptions(tailMode, revealOrder) {
	  {
	    if (tailMode !== undefined && !didWarnAboutTailOptions[tailMode]) {
	      if (tailMode !== 'collapsed' && tailMode !== 'hidden') {
	        didWarnAboutTailOptions[tailMode] = true;

	        error('"%s" is not a supported value for tail on <SuspenseList />. ' + 'Did you mean "collapsed" or "hidden"?', tailMode);
	      } else if (revealOrder !== 'forwards' && revealOrder !== 'backwards') {
	        didWarnAboutTailOptions[tailMode] = true;

	        error('<SuspenseList tail="%s" /> is only valid if revealOrder is ' + '"forwards" or "backwards". ' + 'Did you mean to specify revealOrder="forwards"?', tailMode);
	      }
	    }
	  }
	}

	function validateSuspenseListNestedChild(childSlot, index) {
	  {
	    var isAnArray = isArray(childSlot);
	    var isIterable = !isAnArray && typeof getIteratorFn(childSlot) === 'function';

	    if (isAnArray || isIterable) {
	      var type = isAnArray ? 'array' : 'iterable';

	      error('A nested %s was passed to row #%s in <SuspenseList />. Wrap it in ' + 'an additional SuspenseList to configure its revealOrder: ' + '<SuspenseList revealOrder=...> ... ' + '<SuspenseList revealOrder=...>{%s}</SuspenseList> ... ' + '</SuspenseList>', type, index, type);

	      return false;
	    }
	  }

	  return true;
	}

	function validateSuspenseListChildren(children, revealOrder) {
	  {
	    if ((revealOrder === 'forwards' || revealOrder === 'backwards') && children !== undefined && children !== null && children !== false) {
	      if (isArray(children)) {
	        for (var i = 0; i < children.length; i++) {
	          if (!validateSuspenseListNestedChild(children[i], i)) {
	            return;
	          }
	        }
	      } else {
	        var iteratorFn = getIteratorFn(children);

	        if (typeof iteratorFn === 'function') {
	          var childrenIterator = iteratorFn.call(children);

	          if (childrenIterator) {
	            var step = childrenIterator.next();
	            var _i = 0;

	            for (; !step.done; step = childrenIterator.next()) {
	              if (!validateSuspenseListNestedChild(step.value, _i)) {
	                return;
	              }

	              _i++;
	            }
	          }
	        } else {
	          error('A single row was passed to a <SuspenseList revealOrder="%s" />. ' + 'This is not useful since it needs multiple rows. ' + 'Did you mean to pass multiple children or an array?', revealOrder);
	        }
	      }
	    }
	  }
	}

	function initSuspenseListRenderState(workInProgress, isBackwards, tail, lastContentRow, tailMode) {
	  var renderState = workInProgress.memoizedState;

	  if (renderState === null) {
	    workInProgress.memoizedState = {
	      isBackwards: isBackwards,
	      rendering: null,
	      renderingStartTime: 0,
	      last: lastContentRow,
	      tail: tail,
	      tailMode: tailMode
	    };
	  } else {
	    // We can reuse the existing object from previous renders.
	    renderState.isBackwards = isBackwards;
	    renderState.rendering = null;
	    renderState.renderingStartTime = 0;
	    renderState.last = lastContentRow;
	    renderState.tail = tail;
	    renderState.tailMode = tailMode;
	  }
	} // This can end up rendering this component multiple passes.
	// The first pass splits the children fibers into two sets. A head and tail.
	// We first render the head. If anything is in fallback state, we do another
	// pass through beginWork to rerender all children (including the tail) with
	// the force suspend context. If the first render didn't have anything in
	// in fallback state. Then we render each row in the tail one-by-one.
	// That happens in the completeWork phase without going back to beginWork.


	function updateSuspenseListComponent(current, workInProgress, renderLanes) {
	  var nextProps = workInProgress.pendingProps;
	  var revealOrder = nextProps.revealOrder;
	  var tailMode = nextProps.tail;
	  var newChildren = nextProps.children;
	  validateRevealOrder(revealOrder);
	  validateTailOptions(tailMode, revealOrder);
	  validateSuspenseListChildren(newChildren, revealOrder);
	  reconcileChildren(current, workInProgress, newChildren, renderLanes);
	  var suspenseContext = suspenseStackCursor.current;
	  var shouldForceFallback = hasSuspenseContext(suspenseContext, ForceSuspenseFallback);

	  if (shouldForceFallback) {
	    suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
	    workInProgress.flags |= DidCapture;
	  } else {
	    var didSuspendBefore = current !== null && (current.flags & DidCapture) !== NoFlags;

	    if (didSuspendBefore) {
	      // If we previously forced a fallback, we need to schedule work
	      // on any nested boundaries to let them know to try to render
	      // again. This is the same as context updating.
	      propagateSuspenseContextChange(workInProgress, workInProgress.child, renderLanes);
	    }

	    suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
	  }

	  pushSuspenseContext(workInProgress, suspenseContext);

	  if ((workInProgress.mode & ConcurrentMode) === NoMode) {
	    // In legacy mode, SuspenseList doesn't work so we just
	    // use make it a noop by treating it as the default revealOrder.
	    workInProgress.memoizedState = null;
	  } else {
	    switch (revealOrder) {
	      case 'forwards':
	        {
	          var lastContentRow = findLastContentRow(workInProgress.child);
	          var tail;

	          if (lastContentRow === null) {
	            // The whole list is part of the tail.
	            // TODO: We could fast path by just rendering the tail now.
	            tail = workInProgress.child;
	            workInProgress.child = null;
	          } else {
	            // Disconnect the tail rows after the content row.
	            // We're going to render them separately later.
	            tail = lastContentRow.sibling;
	            lastContentRow.sibling = null;
	          }

	          initSuspenseListRenderState(workInProgress, false, // isBackwards
	          tail, lastContentRow, tailMode);
	          break;
	        }

	      case 'backwards':
	        {
	          // We're going to find the first row that has existing content.
	          // At the same time we're going to reverse the list of everything
	          // we pass in the meantime. That's going to be our tail in reverse
	          // order.
	          var _tail = null;
	          var row = workInProgress.child;
	          workInProgress.child = null;

	          while (row !== null) {
	            var currentRow = row.alternate; // New rows can't be content rows.

	            if (currentRow !== null && findFirstSuspended(currentRow) === null) {
	              // This is the beginning of the main content.
	              workInProgress.child = row;
	              break;
	            }

	            var nextRow = row.sibling;
	            row.sibling = _tail;
	            _tail = row;
	            row = nextRow;
	          } // TODO: If workInProgress.child is null, we can continue on the tail immediately.


	          initSuspenseListRenderState(workInProgress, true, // isBackwards
	          _tail, null, // last
	          tailMode);
	          break;
	        }

	      case 'together':
	        {
	          initSuspenseListRenderState(workInProgress, false, // isBackwards
	          null, // tail
	          null, // last
	          undefined);
	          break;
	        }

	      default:
	        {
	          // The default reveal order is the same as not having
	          // a boundary.
	          workInProgress.memoizedState = null;
	        }
	    }
	  }

	  return workInProgress.child;
	}

	function updatePortalComponent(current, workInProgress, renderLanes) {
	  pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
	  var nextChildren = workInProgress.pendingProps;

	  if (current === null) {
	    // Portals are special because we don't append the children during mount
	    // but at commit. Therefore we need to track insertions which the normal
	    // flow doesn't do during mount. This doesn't happen at the root because
	    // the root always starts with a "current" with a null child.
	    // TODO: Consider unifying this with how the root works.
	    workInProgress.child = reconcileChildFibers(workInProgress, null, nextChildren, renderLanes);
	  } else {
	    reconcileChildren(current, workInProgress, nextChildren, renderLanes);
	  }

	  return workInProgress.child;
	}

	var hasWarnedAboutUsingNoValuePropOnContextProvider = false;

	function updateContextProvider(current, workInProgress, renderLanes) {
	  var providerType = workInProgress.type;
	  var context = providerType._context;
	  var newProps = workInProgress.pendingProps;
	  var oldProps = workInProgress.memoizedProps;
	  var newValue = newProps.value;

	  {
	    if (!('value' in newProps)) {
	      if (!hasWarnedAboutUsingNoValuePropOnContextProvider) {
	        hasWarnedAboutUsingNoValuePropOnContextProvider = true;

	        error('The `value` prop is required for the `<Context.Provider>`. Did you misspell it or forget to pass it?');
	      }
	    }

	    var providerPropTypes = workInProgress.type.propTypes;

	    if (providerPropTypes) {
	      checkPropTypes(providerPropTypes, newProps, 'prop', 'Context.Provider');
	    }
	  }

	  pushProvider(workInProgress, context, newValue);

	  {
	    if (oldProps !== null) {
	      var oldValue = oldProps.value;

	      if (objectIs(oldValue, newValue)) {
	        // No change. Bailout early if children are the same.
	        if (oldProps.children === newProps.children && !hasContextChanged()) {
	          return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
	        }
	      } else {
	        // The context value changed. Search for matching consumers and schedule
	        // them to update.
	        propagateContextChange(workInProgress, context, renderLanes);
	      }
	    }
	  }

	  var newChildren = newProps.children;
	  reconcileChildren(current, workInProgress, newChildren, renderLanes);
	  return workInProgress.child;
	}

	var hasWarnedAboutUsingContextAsConsumer = false;

	function updateContextConsumer(current, workInProgress, renderLanes) {
	  var context = workInProgress.type; // The logic below for Context differs depending on PROD or DEV mode. In
	  // DEV mode, we create a separate object for Context.Consumer that acts
	  // like a proxy to Context. This proxy object adds unnecessary code in PROD
	  // so we use the old behaviour (Context.Consumer references Context) to
	  // reduce size and overhead. The separate object references context via
	  // a property called "_context", which also gives us the ability to check
	  // in DEV mode if this property exists or not and warn if it does not.

	  {
	    if (context._context === undefined) {
	      // This may be because it's a Context (rather than a Consumer).
	      // Or it may be because it's older React where they're the same thing.
	      // We only want to warn if we're sure it's a new React.
	      if (context !== context.Consumer) {
	        if (!hasWarnedAboutUsingContextAsConsumer) {
	          hasWarnedAboutUsingContextAsConsumer = true;

	          error('Rendering <Context> directly is not supported and will be removed in ' + 'a future major release. Did you mean to render <Context.Consumer> instead?');
	        }
	      }
	    } else {
	      context = context._context;
	    }
	  }

	  var newProps = workInProgress.pendingProps;
	  var render = newProps.children;

	  {
	    if (typeof render !== 'function') {
	      error('A context consumer was rendered with multiple children, or a child ' + "that isn't a function. A context consumer expects a single child " + 'that is a function. If you did pass a function, make sure there ' + 'is no trailing or leading whitespace around it.');
	    }
	  }

	  prepareToReadContext(workInProgress, renderLanes);
	  var newValue = readContext(context);

	  {
	    markComponentRenderStarted(workInProgress);
	  }

	  var newChildren;

	  {
	    ReactCurrentOwner$1.current = workInProgress;
	    setIsRendering(true);
	    newChildren = render(newValue);
	    setIsRendering(false);
	  }

	  {
	    markComponentRenderStopped();
	  } // React DevTools reads this flag.


	  workInProgress.flags |= PerformedWork;
	  reconcileChildren(current, workInProgress, newChildren, renderLanes);
	  return workInProgress.child;
	}

	function markWorkInProgressReceivedUpdate() {
	  didReceiveUpdate = true;
	}

	function resetSuspendedCurrentOnMountInLegacyMode(current, workInProgress) {
	  if ((workInProgress.mode & ConcurrentMode) === NoMode) {
	    if (current !== null) {
	      // A lazy component only mounts if it suspended inside a non-
	      // concurrent tree, in an inconsistent state. We want to treat it like
	      // a new mount, even though an empty version of it already committed.
	      // Disconnect the alternate pointers.
	      current.alternate = null;
	      workInProgress.alternate = null; // Since this is conceptually a new fiber, schedule a Placement effect

	      workInProgress.flags |= Placement;
	    }
	  }
	}

	function bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes) {
	  if (current !== null) {
	    // Reuse previous dependencies
	    workInProgress.dependencies = current.dependencies;
	  }

	  {
	    // Don't update "base" render times for bailouts.
	    stopProfilerTimerIfRunning();
	  }

	  markSkippedUpdateLanes(workInProgress.lanes); // Check if the children have any pending work.

	  if (!includesSomeLane(renderLanes, workInProgress.childLanes)) {
	    // The children don't have any work either. We can skip them.
	    // TODO: Once we add back resuming, we should check if the children are
	    // a work-in-progress set. If so, we need to transfer their effects.
	    {
	      return null;
	    }
	  } // This fiber doesn't have work, but its subtree does. Clone the child
	  // fibers and continue.


	  cloneChildFibers(current, workInProgress);
	  return workInProgress.child;
	}

	function remountFiber(current, oldWorkInProgress, newWorkInProgress) {
	  {
	    var returnFiber = oldWorkInProgress.return;

	    if (returnFiber === null) {
	      // eslint-disable-next-line react-internal/prod-error-codes
	      throw new Error('Cannot swap the root fiber.');
	    } // Disconnect from the old current.
	    // It will get deleted.


	    current.alternate = null;
	    oldWorkInProgress.alternate = null; // Connect to the new tree.

	    newWorkInProgress.index = oldWorkInProgress.index;
	    newWorkInProgress.sibling = oldWorkInProgress.sibling;
	    newWorkInProgress.return = oldWorkInProgress.return;
	    newWorkInProgress.ref = oldWorkInProgress.ref; // Replace the child/sibling pointers above it.

	    if (oldWorkInProgress === returnFiber.child) {
	      returnFiber.child = newWorkInProgress;
	    } else {
	      var prevSibling = returnFiber.child;

	      if (prevSibling === null) {
	        // eslint-disable-next-line react-internal/prod-error-codes
	        throw new Error('Expected parent to have a child.');
	      }

	      while (prevSibling.sibling !== oldWorkInProgress) {
	        prevSibling = prevSibling.sibling;

	        if (prevSibling === null) {
	          // eslint-disable-next-line react-internal/prod-error-codes
	          throw new Error('Expected to find the previous sibling.');
	        }
	      }

	      prevSibling.sibling = newWorkInProgress;
	    } // Delete the old fiber and place the new one.
	    // Since the old fiber is disconnected, we have to schedule it manually.


	    var deletions = returnFiber.deletions;

	    if (deletions === null) {
	      returnFiber.deletions = [current];
	      returnFiber.flags |= ChildDeletion;
	    } else {
	      deletions.push(current);
	    }

	    newWorkInProgress.flags |= Placement; // Restart work from the new fiber.

	    return newWorkInProgress;
	  }
	}

	function checkScheduledUpdateOrContext(current, renderLanes) {
	  // Before performing an early bailout, we must check if there are pending
	  // updates or context.
	  var updateLanes = current.lanes;

	  if (includesSomeLane(updateLanes, renderLanes)) {
	    return true;
	  } // No pending update, but because context is propagated lazily, we need

	  return false;
	}

	function attemptEarlyBailoutIfNoScheduledUpdate(current, workInProgress, renderLanes) {
	  // This fiber does not have any pending work. Bailout without entering
	  // the begin phase. There's still some bookkeeping we that needs to be done
	  // in this optimized path, mostly pushing stuff onto the stack.
	  switch (workInProgress.tag) {
	    case HostRoot:
	      pushHostRootContext(workInProgress);
	      workInProgress.stateNode;

	      resetHydrationState();
	      break;

	    case HostComponent:
	      pushHostContext(workInProgress);
	      break;

	    case ClassComponent:
	      {
	        var Component = workInProgress.type;

	        if (isContextProvider(Component)) {
	          pushContextProvider(workInProgress);
	        }

	        break;
	      }

	    case HostPortal:
	      pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
	      break;

	    case ContextProvider:
	      {
	        var newValue = workInProgress.memoizedProps.value;
	        var context = workInProgress.type._context;
	        pushProvider(workInProgress, context, newValue);
	        break;
	      }

	    case Profiler:
	      {
	        // Profiler should only call onRender when one of its descendants actually rendered.
	        var hasChildWork = includesSomeLane(renderLanes, workInProgress.childLanes);

	        if (hasChildWork) {
	          workInProgress.flags |= Update;
	        }

	        {
	          // Reset effect durations for the next eventual effect phase.
	          // These are reset during render to allow the DevTools commit hook a chance to read them,
	          var stateNode = workInProgress.stateNode;
	          stateNode.effectDuration = 0;
	          stateNode.passiveEffectDuration = 0;
	        }
	      }

	      break;

	    case SuspenseComponent:
	      {
	        var state = workInProgress.memoizedState;

	        if (state !== null) {
	          if (state.dehydrated !== null) {
	            pushSuspenseContext(workInProgress, setDefaultShallowSuspenseContext(suspenseStackCursor.current)); // We know that this component will suspend again because if it has
	            // been unsuspended it has committed as a resolved Suspense component.
	            // If it needs to be retried, it should have work scheduled on it.

	            workInProgress.flags |= DidCapture; // We should never render the children of a dehydrated boundary until we
	            // upgrade it. We return null instead of bailoutOnAlreadyFinishedWork.

	            return null;
	          } // If this boundary is currently timed out, we need to decide
	          // whether to retry the primary children, or to skip over it and
	          // go straight to the fallback. Check the priority of the primary
	          // child fragment.


	          var primaryChildFragment = workInProgress.child;
	          var primaryChildLanes = primaryChildFragment.childLanes;

	          if (includesSomeLane(renderLanes, primaryChildLanes)) {
	            // The primary children have pending work. Use the normal path
	            // to attempt to render the primary children again.
	            return updateSuspenseComponent(current, workInProgress, renderLanes);
	          } else {
	            // The primary child fragment does not have pending work marked
	            // on it
	            pushSuspenseContext(workInProgress, setDefaultShallowSuspenseContext(suspenseStackCursor.current)); // The primary children do not have pending work with sufficient
	            // priority. Bailout.

	            var child = bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);

	            if (child !== null) {
	              // The fallback children have pending work. Skip over the
	              // primary children and work on the fallback.
	              return child.sibling;
	            } else {
	              // Note: We can return `null` here because we already checked
	              // whether there were nested context consumers, via the call to
	              // `bailoutOnAlreadyFinishedWork` above.
	              return null;
	            }
	          }
	        } else {
	          pushSuspenseContext(workInProgress, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
	        }

	        break;
	      }

	    case SuspenseListComponent:
	      {
	        var didSuspendBefore = (current.flags & DidCapture) !== NoFlags;

	        var _hasChildWork = includesSomeLane(renderLanes, workInProgress.childLanes);

	        if (didSuspendBefore) {
	          if (_hasChildWork) {
	            // If something was in fallback state last time, and we have all the
	            // same children then we're still in progressive loading state.
	            // Something might get unblocked by state updates or retries in the
	            // tree which will affect the tail. So we need to use the normal
	            // path to compute the correct tail.
	            return updateSuspenseListComponent(current, workInProgress, renderLanes);
	          } // If none of the children had any work, that means that none of
	          // them got retried so they'll still be blocked in the same way
	          // as before. We can fast bail out.


	          workInProgress.flags |= DidCapture;
	        } // If nothing suspended before and we're rendering the same children,
	        // then the tail doesn't matter. Anything new that suspends will work
	        // in the "together" mode, so we can continue from the state we had.


	        var renderState = workInProgress.memoizedState;

	        if (renderState !== null) {
	          // Reset to the "together" mode in case we've started a different
	          // update in the past but didn't complete it.
	          renderState.rendering = null;
	          renderState.tail = null;
	          renderState.lastEffect = null;
	        }

	        pushSuspenseContext(workInProgress, suspenseStackCursor.current);

	        if (_hasChildWork) {
	          break;
	        } else {
	          // If none of the children had any work, that means that none of
	          // them got retried so they'll still be blocked in the same way
	          // as before. We can fast bail out.
	          return null;
	        }
	      }

	    case OffscreenComponent:
	    case LegacyHiddenComponent:
	      {
	        // Need to check if the tree still needs to be deferred. This is
	        // almost identical to the logic used in the normal update path,
	        // so we'll just enter that. The only difference is we'll bail out
	        // at the next level instead of this one, because the child props
	        // have not changed. Which is fine.
	        // TODO: Probably should refactor `beginWork` to split the bailout
	        // path from the normal path. I'm tempted to do a labeled break here
	        // but I won't :)
	        workInProgress.lanes = NoLanes;
	        return updateOffscreenComponent(current, workInProgress, renderLanes);
	      }
	  }

	  return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
	}

	function beginWork(current, workInProgress, renderLanes) {
	  {
	    if (workInProgress._debugNeedsRemount && current !== null) {
	      // This will restart the begin phase with a new fiber.
	      return remountFiber(current, workInProgress, createFiberFromTypeAndProps(workInProgress.type, workInProgress.key, workInProgress.pendingProps, workInProgress._debugOwner || null, workInProgress.mode, workInProgress.lanes));
	    }
	  }

	  if (current !== null) {
	    var oldProps = current.memoizedProps;
	    var newProps = workInProgress.pendingProps;

	    if (oldProps !== newProps || hasContextChanged() || ( // Force a re-render if the implementation changed due to hot reload:
	     workInProgress.type !== current.type )) {
	      // If props or context changed, mark the fiber as having performed work.
	      // This may be unset if the props are determined to be equal later (memo).
	      didReceiveUpdate = true;
	    } else {
	      // Neither props nor legacy context changes. Check if there's a pending
	      // update or context change.
	      var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current, renderLanes);

	      if (!hasScheduledUpdateOrContext && // If this is the second pass of an error or suspense boundary, there
	      // may not be work scheduled on `current`, so we check for this flag.
	      (workInProgress.flags & DidCapture) === NoFlags) {
	        // No pending updates or context. Bail out now.
	        didReceiveUpdate = false;
	        return attemptEarlyBailoutIfNoScheduledUpdate(current, workInProgress, renderLanes);
	      }

	      if ((current.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
	        // This is a special case that only exists for legacy mode.
	        // See https://github.com/facebook/react/pull/19216.
	        didReceiveUpdate = true;
	      } else {
	        // An update was scheduled on this fiber, but there are no new props
	        // nor legacy context. Set this to false. If an update queue or context
	        // consumer produces a changed value, it will set this to true. Otherwise,
	        // the component will assume the children have not changed and bail out.
	        didReceiveUpdate = false;
	      }
	    }
	  } else {
	    didReceiveUpdate = false;

	    if (getIsHydrating() && isForkedChild(workInProgress)) {
	      // Check if this child belongs to a list of muliple children in
	      // its parent.
	      //
	      // In a true multi-threaded implementation, we would render children on
	      // parallel threads. This would represent the beginning of a new render
	      // thread for this subtree.
	      //
	      // We only use this for id generation during hydration, which is why the
	      // logic is located in this special branch.
	      var slotIndex = workInProgress.index;
	      var numberOfForks = getForksAtLevel();
	      pushTreeId(workInProgress, numberOfForks, slotIndex);
	    }
	  } // Before entering the begin phase, clear pending update priority.
	  // TODO: This assumes that we're about to evaluate the component and process
	  // the update queue. However, there's an exception: SimpleMemoComponent
	  // sometimes bails out later in the begin phase. This indicates that we should
	  // move this assignment out of the common path and into each branch.


	  workInProgress.lanes = NoLanes;

	  switch (workInProgress.tag) {
	    case IndeterminateComponent:
	      {
	        return mountIndeterminateComponent(current, workInProgress, workInProgress.type, renderLanes);
	      }

	    case LazyComponent:
	      {
	        var elementType = workInProgress.elementType;
	        return mountLazyComponent(current, workInProgress, elementType, renderLanes);
	      }

	    case FunctionComponent:
	      {
	        var Component = workInProgress.type;
	        var unresolvedProps = workInProgress.pendingProps;
	        var resolvedProps = workInProgress.elementType === Component ? unresolvedProps : resolveDefaultProps(Component, unresolvedProps);
	        return updateFunctionComponent(current, workInProgress, Component, resolvedProps, renderLanes);
	      }

	    case ClassComponent:
	      {
	        var _Component = workInProgress.type;
	        var _unresolvedProps = workInProgress.pendingProps;

	        var _resolvedProps = workInProgress.elementType === _Component ? _unresolvedProps : resolveDefaultProps(_Component, _unresolvedProps);

	        return updateClassComponent(current, workInProgress, _Component, _resolvedProps, renderLanes);
	      }

	    case HostRoot:
	      return updateHostRoot(current, workInProgress, renderLanes);

	    case HostComponent:
	      return updateHostComponent(current, workInProgress, renderLanes);

	    case HostText:
	      return updateHostText(current, workInProgress);

	    case SuspenseComponent:
	      return updateSuspenseComponent(current, workInProgress, renderLanes);

	    case HostPortal:
	      return updatePortalComponent(current, workInProgress, renderLanes);

	    case ForwardRef:
	      {
	        var type = workInProgress.type;
	        var _unresolvedProps2 = workInProgress.pendingProps;

	        var _resolvedProps2 = workInProgress.elementType === type ? _unresolvedProps2 : resolveDefaultProps(type, _unresolvedProps2);

	        return updateForwardRef(current, workInProgress, type, _resolvedProps2, renderLanes);
	      }

	    case Fragment:
	      return updateFragment(current, workInProgress, renderLanes);

	    case Mode:
	      return updateMode(current, workInProgress, renderLanes);

	    case Profiler:
	      return updateProfiler(current, workInProgress, renderLanes);

	    case ContextProvider:
	      return updateContextProvider(current, workInProgress, renderLanes);

	    case ContextConsumer:
	      return updateContextConsumer(current, workInProgress, renderLanes);

	    case MemoComponent:
	      {
	        var _type2 = workInProgress.type;
	        var _unresolvedProps3 = workInProgress.pendingProps; // Resolve outer props first, then resolve inner props.

	        var _resolvedProps3 = resolveDefaultProps(_type2, _unresolvedProps3);

	        {
	          if (workInProgress.type !== workInProgress.elementType) {
	            var outerPropTypes = _type2.propTypes;

	            if (outerPropTypes) {
	              checkPropTypes(outerPropTypes, _resolvedProps3, // Resolved for outer only
	              'prop', getComponentNameFromType(_type2));
	            }
	          }
	        }

	        _resolvedProps3 = resolveDefaultProps(_type2.type, _resolvedProps3);
	        return updateMemoComponent(current, workInProgress, _type2, _resolvedProps3, renderLanes);
	      }

	    case SimpleMemoComponent:
	      {
	        return updateSimpleMemoComponent(current, workInProgress, workInProgress.type, workInProgress.pendingProps, renderLanes);
	      }

	    case IncompleteClassComponent:
	      {
	        var _Component2 = workInProgress.type;
	        var _unresolvedProps4 = workInProgress.pendingProps;

	        var _resolvedProps4 = workInProgress.elementType === _Component2 ? _unresolvedProps4 : resolveDefaultProps(_Component2, _unresolvedProps4);

	        return mountIncompleteClassComponent(current, workInProgress, _Component2, _resolvedProps4, renderLanes);
	      }

	    case SuspenseListComponent:
	      {
	        return updateSuspenseListComponent(current, workInProgress, renderLanes);
	      }

	    case ScopeComponent:
	      {

	        break;
	      }

	    case OffscreenComponent:
	      {
	        return updateOffscreenComponent(current, workInProgress, renderLanes);
	      }
	  }

	  throw new Error("Unknown unit of work tag (" + workInProgress.tag + "). This error is likely caused by a bug in " + 'React. Please file an issue.');
	}

	function markUpdate(workInProgress) {
	  // Tag the fiber with an update effect. This turns a Placement into
	  // a PlacementAndUpdate.
	  workInProgress.flags |= Update;
	}

	function markRef$1(workInProgress) {
	  workInProgress.flags |= Ref;

	  {
	    workInProgress.flags |= RefStatic;
	  }
	}

	var appendAllChildren;
	var updateHostContainer;
	var updateHostComponent$1;
	var updateHostText$1;

	{
	  // Mutation mode
	  appendAllChildren = function (parent, workInProgress, needsVisibilityToggle, isHidden) {
	    // We only have the top Fiber that was created but we need recurse down its
	    // children to find all the terminal nodes.
	    var node = workInProgress.child;

	    while (node !== null) {
	      if (node.tag === HostComponent || node.tag === HostText) {
	        appendInitialChild(parent, node.stateNode);
	      } else if (node.tag === HostPortal) ; else if (node.child !== null) {
	        node.child.return = node;
	        node = node.child;
	        continue;
	      }

	      if (node === workInProgress) {
	        return;
	      }

	      while (node.sibling === null) {
	        if (node.return === null || node.return === workInProgress) {
	          return;
	        }

	        node = node.return;
	      }

	      node.sibling.return = node.return;
	      node = node.sibling;
	    }
	  };

	  updateHostContainer = function (current, workInProgress) {// Noop
	  };

	  updateHostComponent$1 = function (current, workInProgress, type, newProps, rootContainerInstance) {
	    // If we have an alternate, that means this is an update and we need to
	    // schedule a side-effect to do the updates.
	    var oldProps = current.memoizedProps;

	    if (oldProps === newProps) {
	      // In mutation mode, this is sufficient for a bailout because
	      // we won't touch this node even if children changed.
	      return;
	    } // If we get updated because one of our children updated, we don't
	    // have newProps so we'll have to reuse them.
	    // TODO: Split the update API as separate for the props vs. children.
	    // Even better would be if children weren't special cased at all tho.


	    var instance = workInProgress.stateNode;
	    var currentHostContext = getHostContext(); // TODO: Experiencing an error where oldProps is null. Suggests a host
	    // component is hitting the resume path. Figure out why. Possibly
	    // related to `hidden`.

	    var updatePayload = prepareUpdate(instance, type, oldProps, newProps, rootContainerInstance, currentHostContext); // TODO: Type this specific to this type of component.

	    workInProgress.updateQueue = updatePayload; // If the update payload indicates that there is a change or if there
	    // is a new ref we mark this as an update. All the work is done in commitWork.

	    if (updatePayload) {
	      markUpdate(workInProgress);
	    }
	  };

	  updateHostText$1 = function (current, workInProgress, oldText, newText) {
	    // If the text differs, mark it as an update. All the work in done in commitWork.
	    if (oldText !== newText) {
	      markUpdate(workInProgress);
	    }
	  };
	}

	function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {
	  if (getIsHydrating()) {
	    // If we're hydrating, we should consume as many items as we can
	    // so we don't leave any behind.
	    return;
	  }

	  switch (renderState.tailMode) {
	    case 'hidden':
	      {
	        // Any insertions at the end of the tail list after this point
	        // should be invisible. If there are already mounted boundaries
	        // anything before them are not considered for collapsing.
	        // Therefore we need to go through the whole tail to find if
	        // there are any.
	        var tailNode = renderState.tail;
	        var lastTailNode = null;

	        while (tailNode !== null) {
	          if (tailNode.alternate !== null) {
	            lastTailNode = tailNode;
	          }

	          tailNode = tailNode.sibling;
	        } // Next we're simply going to delete all insertions after the
	        // last rendered item.


	        if (lastTailNode === null) {
	          // All remaining items in the tail are insertions.
	          renderState.tail = null;
	        } else {
	          // Detach the insertion after the last node that was already
	          // inserted.
	          lastTailNode.sibling = null;
	        }

	        break;
	      }

	    case 'collapsed':
	      {
	        // Any insertions at the end of the tail list after this point
	        // should be invisible. If there are already mounted boundaries
	        // anything before them are not considered for collapsing.
	        // Therefore we need to go through the whole tail to find if
	        // there are any.
	        var _tailNode = renderState.tail;
	        var _lastTailNode = null;

	        while (_tailNode !== null) {
	          if (_tailNode.alternate !== null) {
	            _lastTailNode = _tailNode;
	          }

	          _tailNode = _tailNode.sibling;
	        } // Next we're simply going to delete all insertions after the
	        // last rendered item.


	        if (_lastTailNode === null) {
	          // All remaining items in the tail are insertions.
	          if (!hasRenderedATailFallback && renderState.tail !== null) {
	            // We suspended during the head. We want to show at least one
	            // row at the tail. So we'll keep on and cut off the rest.
	            renderState.tail.sibling = null;
	          } else {
	            renderState.tail = null;
	          }
	        } else {
	          // Detach the insertion after the last node that was already
	          // inserted.
	          _lastTailNode.sibling = null;
	        }

	        break;
	      }
	  }
	}

	function bubbleProperties(completedWork) {
	  var didBailout = completedWork.alternate !== null && completedWork.alternate.child === completedWork.child;
	  var newChildLanes = NoLanes;
	  var subtreeFlags = NoFlags;

	  if (!didBailout) {
	    // Bubble up the earliest expiration time.
	    if ( (completedWork.mode & ProfileMode) !== NoMode) {
	      // In profiling mode, resetChildExpirationTime is also used to reset
	      // profiler durations.
	      var actualDuration = completedWork.actualDuration;
	      var treeBaseDuration = completedWork.selfBaseDuration;
	      var child = completedWork.child;

	      while (child !== null) {
	        newChildLanes = mergeLanes(newChildLanes, mergeLanes(child.lanes, child.childLanes));
	        subtreeFlags |= child.subtreeFlags;
	        subtreeFlags |= child.flags; // When a fiber is cloned, its actualDuration is reset to 0. This value will
	        // only be updated if work is done on the fiber (i.e. it doesn't bailout).
	        // When work is done, it should bubble to the parent's actualDuration. If
	        // the fiber has not been cloned though, (meaning no work was done), then
	        // this value will reflect the amount of time spent working on a previous
	        // render. In that case it should not bubble. We determine whether it was
	        // cloned by comparing the child pointer.

	        actualDuration += child.actualDuration;
	        treeBaseDuration += child.treeBaseDuration;
	        child = child.sibling;
	      }

	      completedWork.actualDuration = actualDuration;
	      completedWork.treeBaseDuration = treeBaseDuration;
	    } else {
	      var _child = completedWork.child;

	      while (_child !== null) {
	        newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child.lanes, _child.childLanes));
	        subtreeFlags |= _child.subtreeFlags;
	        subtreeFlags |= _child.flags; // Update the return pointer so the tree is consistent. This is a code
	        // smell because it assumes the commit phase is never concurrent with
	        // the render phase. Will address during refactor to alternate model.

	        _child.return = completedWork;
	        _child = _child.sibling;
	      }
	    }

	    completedWork.subtreeFlags |= subtreeFlags;
	  } else {
	    // Bubble up the earliest expiration time.
	    if ( (completedWork.mode & ProfileMode) !== NoMode) {
	      // In profiling mode, resetChildExpirationTime is also used to reset
	      // profiler durations.
	      var _treeBaseDuration = completedWork.selfBaseDuration;
	      var _child2 = completedWork.child;

	      while (_child2 !== null) {
	        newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child2.lanes, _child2.childLanes)); // "Static" flags share the lifetime of the fiber/hook they belong to,
	        // so we should bubble those up even during a bailout. All the other
	        // flags have a lifetime only of a single render + commit, so we should
	        // ignore them.

	        subtreeFlags |= _child2.subtreeFlags & StaticMask;
	        subtreeFlags |= _child2.flags & StaticMask;
	        _treeBaseDuration += _child2.treeBaseDuration;
	        _child2 = _child2.sibling;
	      }

	      completedWork.treeBaseDuration = _treeBaseDuration;
	    } else {
	      var _child3 = completedWork.child;

	      while (_child3 !== null) {
	        newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child3.lanes, _child3.childLanes)); // "Static" flags share the lifetime of the fiber/hook they belong to,
	        // so we should bubble those up even during a bailout. All the other
	        // flags have a lifetime only of a single render + commit, so we should
	        // ignore them.

	        subtreeFlags |= _child3.subtreeFlags & StaticMask;
	        subtreeFlags |= _child3.flags & StaticMask; // Update the return pointer so the tree is consistent. This is a code
	        // smell because it assumes the commit phase is never concurrent with
	        // the render phase. Will address during refactor to alternate model.

	        _child3.return = completedWork;
	        _child3 = _child3.sibling;
	      }
	    }

	    completedWork.subtreeFlags |= subtreeFlags;
	  }

	  completedWork.childLanes = newChildLanes;
	  return didBailout;
	}

	function completeDehydratedSuspenseBoundary(current, workInProgress, nextState) {
	  if (hasUnhydratedTailNodes() && (workInProgress.mode & ConcurrentMode) !== NoMode && (workInProgress.flags & DidCapture) === NoFlags) {
	    warnIfUnhydratedTailNodes(workInProgress);
	    resetHydrationState();
	    workInProgress.flags |= ForceClientRender | Incomplete | ShouldCapture;
	    return false;
	  }

	  var wasHydrated = popHydrationState(workInProgress);

	  if (nextState !== null && nextState.dehydrated !== null) {
	    // We might be inside a hydration state the first time we're picking up this
	    // Suspense boundary, and also after we've reentered it for further hydration.
	    if (current === null) {
	      if (!wasHydrated) {
	        throw new Error('A dehydrated suspense component was completed without a hydrated node. ' + 'This is probably a bug in React.');
	      }

	      prepareToHydrateHostSuspenseInstance(workInProgress);
	      bubbleProperties(workInProgress);

	      {
	        if ((workInProgress.mode & ProfileMode) !== NoMode) {
	          var isTimedOutSuspense = nextState !== null;

	          if (isTimedOutSuspense) {
	            // Don't count time spent in a timed out Suspense subtree as part of the base duration.
	            var primaryChildFragment = workInProgress.child;

	            if (primaryChildFragment !== null) {
	              // $FlowFixMe Flow doesn't support type casting in combination with the -= operator
	              workInProgress.treeBaseDuration -= primaryChildFragment.treeBaseDuration;
	            }
	          }
	        }
	      }

	      return false;
	    } else {
	      // We might have reentered this boundary to hydrate it. If so, we need to reset the hydration
	      // state since we're now exiting out of it. popHydrationState doesn't do that for us.
	      resetHydrationState();

	      if ((workInProgress.flags & DidCapture) === NoFlags) {
	        // This boundary did not suspend so it's now hydrated and unsuspended.
	        workInProgress.memoizedState = null;
	      } // If nothing suspended, we need to schedule an effect to mark this boundary
	      // as having hydrated so events know that they're free to be invoked.
	      // It's also a signal to replay events and the suspense callback.
	      // If something suspended, schedule an effect to attach retry listeners.
	      // So we might as well always mark this.


	      workInProgress.flags |= Update;
	      bubbleProperties(workInProgress);

	      {
	        if ((workInProgress.mode & ProfileMode) !== NoMode) {
	          var _isTimedOutSuspense = nextState !== null;

	          if (_isTimedOutSuspense) {
	            // Don't count time spent in a timed out Suspense subtree as part of the base duration.
	            var _primaryChildFragment = workInProgress.child;

	            if (_primaryChildFragment !== null) {
	              // $FlowFixMe Flow doesn't support type casting in combination with the -= operator
	              workInProgress.treeBaseDuration -= _primaryChildFragment.treeBaseDuration;
	            }
	          }
	        }
	      }

	      return false;
	    }
	  } else {
	    // Successfully completed this tree. If this was a forced client render,
	    // there may have been recoverable errors during first hydration
	    // attempt. If so, add them to a queue so we can log them in the
	    // commit phase.
	    upgradeHydrationErrorsToRecoverable(); // Fall through to normal Suspense path

	    return true;
	  }
	}

	function completeWork(current, workInProgress, renderLanes) {
	  var newProps = workInProgress.pendingProps; // Note: This intentionally doesn't check if we're hydrating because comparing
	  // to the current tree provider fiber is just as fast and less error-prone.
	  // Ideally we would have a special version of the work loop only
	  // for hydration.

	  popTreeContext(workInProgress);

	  switch (workInProgress.tag) {
	    case IndeterminateComponent:
	    case LazyComponent:
	    case SimpleMemoComponent:
	    case FunctionComponent:
	    case ForwardRef:
	    case Fragment:
	    case Mode:
	    case Profiler:
	    case ContextConsumer:
	    case MemoComponent:
	      bubbleProperties(workInProgress);
	      return null;

	    case ClassComponent:
	      {
	        var Component = workInProgress.type;

	        if (isContextProvider(Component)) {
	          popContext(workInProgress);
	        }

	        bubbleProperties(workInProgress);
	        return null;
	      }

	    case HostRoot:
	      {
	        var fiberRoot = workInProgress.stateNode;
	        popHostContainer(workInProgress);
	        popTopLevelContextObject(workInProgress);
	        resetWorkInProgressVersions();

	        if (fiberRoot.pendingContext) {
	          fiberRoot.context = fiberRoot.pendingContext;
	          fiberRoot.pendingContext = null;
	        }

	        if (current === null || current.child === null) {
	          // If we hydrated, pop so that we can delete any remaining children
	          // that weren't hydrated.
	          var wasHydrated = popHydrationState(workInProgress);

	          if (wasHydrated) {
	            // If we hydrated, then we'll need to schedule an update for
	            // the commit side-effects on the root.
	            markUpdate(workInProgress);
	          } else {
	            if (current !== null) {
	              var prevState = current.memoizedState;

	              if ( // Check if this is a client root
	              !prevState.isDehydrated || // Check if we reverted to client rendering (e.g. due to an error)
	              (workInProgress.flags & ForceClientRender) !== NoFlags) {
	                // Schedule an effect to clear this container at the start of the
	                // next commit. This handles the case of React rendering into a
	                // container with previous children. It's also safe to do for
	                // updates too, because current.child would only be null if the
	                // previous render was null (so the container would already
	                // be empty).
	                workInProgress.flags |= Snapshot; // If this was a forced client render, there may have been
	                // recoverable errors during first hydration attempt. If so, add
	                // them to a queue so we can log them in the commit phase.

	                upgradeHydrationErrorsToRecoverable();
	              }
	            }
	          }
	        }

	        updateHostContainer(current, workInProgress);
	        bubbleProperties(workInProgress);

	        return null;
	      }

	    case HostComponent:
	      {
	        popHostContext(workInProgress);
	        var rootContainerInstance = getRootHostContainer();
	        var type = workInProgress.type;

	        if (current !== null && workInProgress.stateNode != null) {
	          updateHostComponent$1(current, workInProgress, type, newProps, rootContainerInstance);

	          if (current.ref !== workInProgress.ref) {
	            markRef$1(workInProgress);
	          }
	        } else {
	          if (!newProps) {
	            if (workInProgress.stateNode === null) {
	              throw new Error('We must have new props for new mounts. This error is likely ' + 'caused by a bug in React. Please file an issue.');
	            } // This can happen when we abort work.


	            bubbleProperties(workInProgress);
	            return null;
	          }

	          var currentHostContext = getHostContext(); // TODO: Move createInstance to beginWork and keep it on a context
	          // "stack" as the parent. Then append children as we go in beginWork
	          // or completeWork depending on whether we want to add them top->down or
	          // bottom->up. Top->down is faster in IE11.

	          var _wasHydrated = popHydrationState(workInProgress);

	          if (_wasHydrated) {
	            // TODO: Move this and createInstance step into the beginPhase
	            // to consolidate.
	            if (prepareToHydrateHostInstance(workInProgress, rootContainerInstance, currentHostContext)) {
	              // If changes to the hydrated node need to be applied at the
	              // commit-phase we mark this as such.
	              markUpdate(workInProgress);
	            }
	          } else {
	            var instance = createInstance(type, newProps, rootContainerInstance, currentHostContext, workInProgress);
	            appendAllChildren(instance, workInProgress, false, false);
	            workInProgress.stateNode = instance; // Certain renderers require commit-time effects for initial mount.
	            // (eg DOM renderer supports auto-focus for certain elements).
	            // Make sure such renderers get scheduled for later work.

	            if (finalizeInitialChildren(instance, type, newProps, rootContainerInstance)) {
	              markUpdate(workInProgress);
	            }
	          }

	          if (workInProgress.ref !== null) {
	            // If there is a ref on a host node we need to schedule a callback
	            markRef$1(workInProgress);
	          }
	        }

	        bubbleProperties(workInProgress);
	        return null;
	      }

	    case HostText:
	      {
	        var newText = newProps;

	        if (current && workInProgress.stateNode != null) {
	          var oldText = current.memoizedProps; // If we have an alternate, that means this is an update and we need
	          // to schedule a side-effect to do the updates.

	          updateHostText$1(current, workInProgress, oldText, newText);
	        } else {
	          if (typeof newText !== 'string') {
	            if (workInProgress.stateNode === null) {
	              throw new Error('We must have new props for new mounts. This error is likely ' + 'caused by a bug in React. Please file an issue.');
	            } // This can happen when we abort work.

	          }

	          var _rootContainerInstance = getRootHostContainer();

	          var _currentHostContext = getHostContext();

	          var _wasHydrated2 = popHydrationState(workInProgress);

	          if (_wasHydrated2) {
	            if (prepareToHydrateHostTextInstance(workInProgress)) {
	              markUpdate(workInProgress);
	            }
	          } else {
	            workInProgress.stateNode = createTextInstance(newText, _rootContainerInstance, _currentHostContext, workInProgress);
	          }
	        }

	        bubbleProperties(workInProgress);
	        return null;
	      }

	    case SuspenseComponent:
	      {
	        popSuspenseContext(workInProgress);
	        var nextState = workInProgress.memoizedState; // Special path for dehydrated boundaries. We may eventually move this
	        // to its own fiber type so that we can add other kinds of hydration
	        // boundaries that aren't associated with a Suspense tree. In anticipation
	        // of such a refactor, all the hydration logic is contained in
	        // this branch.

	        if (current === null || current.memoizedState !== null && current.memoizedState.dehydrated !== null) {
	          var fallthroughToNormalSuspensePath = completeDehydratedSuspenseBoundary(current, workInProgress, nextState);

	          if (!fallthroughToNormalSuspensePath) {
	            if (workInProgress.flags & ShouldCapture) {
	              // Special case. There were remaining unhydrated nodes. We treat
	              // this as a mismatch. Revert to client rendering.
	              return workInProgress;
	            } else {
	              // Did not finish hydrating, either because this is the initial
	              // render or because something suspended.
	              return null;
	            }
	          } // Continue with the normal Suspense path.

	        }

	        if ((workInProgress.flags & DidCapture) !== NoFlags) {
	          // Something suspended. Re-render with the fallback children.
	          workInProgress.lanes = renderLanes; // Do not reset the effect list.

	          if ( (workInProgress.mode & ProfileMode) !== NoMode) {
	            transferActualDuration(workInProgress);
	          } // Don't bubble properties in this case.


	          return workInProgress;
	        }

	        var nextDidTimeout = nextState !== null;
	        var prevDidTimeout = current !== null && current.memoizedState !== null;
	        // a passive effect, which is when we process the transitions


	        if (nextDidTimeout !== prevDidTimeout) {
	          // an effect to toggle the subtree's visibility. When we switch from
	          // fallback -> primary, the inner Offscreen fiber schedules this effect
	          // as part of its normal complete phase. But when we switch from
	          // primary -> fallback, the inner Offscreen fiber does not have a complete
	          // phase. So we need to schedule its effect here.
	          //
	          // We also use this flag to connect/disconnect the effects, but the same
	          // logic applies: when re-connecting, the Offscreen fiber's complete
	          // phase will handle scheduling the effect. It's only when the fallback
	          // is active that we have to do anything special.


	          if (nextDidTimeout) {
	            var _offscreenFiber2 = workInProgress.child;
	            _offscreenFiber2.flags |= Visibility; // TODO: This will still suspend a synchronous tree if anything
	            // in the concurrent tree already suspended during this render.
	            // This is a known bug.

	            if ((workInProgress.mode & ConcurrentMode) !== NoMode) {
	              // TODO: Move this back to throwException because this is too late
	              // if this is a large tree which is common for initial loads. We
	              // don't know if we should restart a render or not until we get
	              // this marker, and this is too late.
	              // If this render already had a ping or lower pri updates,
	              // and this is the first time we know we're going to suspend we
	              // should be able to immediately restart from within throwException.
	              var hasInvisibleChildContext = current === null && (workInProgress.memoizedProps.unstable_avoidThisFallback !== true || !enableSuspenseAvoidThisFallback);

	              if (hasInvisibleChildContext || hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext)) {
	                // If this was in an invisible tree or a new render, then showing
	                // this boundary is ok.
	                renderDidSuspend();
	              } else {
	                // Otherwise, we're going to have to hide content so we should
	                // suspend for longer if possible.
	                renderDidSuspendDelayIfPossible();
	              }
	            }
	          }
	        }

	        var wakeables = workInProgress.updateQueue;

	        if (wakeables !== null) {
	          // Schedule an effect to attach a retry listener to the promise.
	          // TODO: Move to passive phase
	          workInProgress.flags |= Update;
	        }

	        bubbleProperties(workInProgress);

	        {
	          if ((workInProgress.mode & ProfileMode) !== NoMode) {
	            if (nextDidTimeout) {
	              // Don't count time spent in a timed out Suspense subtree as part of the base duration.
	              var primaryChildFragment = workInProgress.child;

	              if (primaryChildFragment !== null) {
	                // $FlowFixMe Flow doesn't support type casting in combination with the -= operator
	                workInProgress.treeBaseDuration -= primaryChildFragment.treeBaseDuration;
	              }
	            }
	          }
	        }

	        return null;
	      }

	    case HostPortal:
	      popHostContainer(workInProgress);
	      updateHostContainer(current, workInProgress);

	      if (current === null) {
	        preparePortalMount(workInProgress.stateNode.containerInfo);
	      }

	      bubbleProperties(workInProgress);
	      return null;

	    case ContextProvider:
	      // Pop provider fiber
	      var context = workInProgress.type._context;
	      popProvider(context, workInProgress);
	      bubbleProperties(workInProgress);
	      return null;

	    case IncompleteClassComponent:
	      {
	        // Same as class component case. I put it down here so that the tags are
	        // sequential to ensure this switch is compiled to a jump table.
	        var _Component = workInProgress.type;

	        if (isContextProvider(_Component)) {
	          popContext(workInProgress);
	        }

	        bubbleProperties(workInProgress);
	        return null;
	      }

	    case SuspenseListComponent:
	      {
	        popSuspenseContext(workInProgress);
	        var renderState = workInProgress.memoizedState;

	        if (renderState === null) {
	          // We're running in the default, "independent" mode.
	          // We don't do anything in this mode.
	          bubbleProperties(workInProgress);
	          return null;
	        }

	        var didSuspendAlready = (workInProgress.flags & DidCapture) !== NoFlags;
	        var renderedTail = renderState.rendering;

	        if (renderedTail === null) {
	          // We just rendered the head.
	          if (!didSuspendAlready) {
	            // This is the first pass. We need to figure out if anything is still
	            // suspended in the rendered set.
	            // If new content unsuspended, but there's still some content that
	            // didn't. Then we need to do a second pass that forces everything
	            // to keep showing their fallbacks.
	            // We might be suspended if something in this render pass suspended, or
	            // something in the previous committed pass suspended. Otherwise,
	            // there's no chance so we can skip the expensive call to
	            // findFirstSuspended.
	            var cannotBeSuspended = renderHasNotSuspendedYet() && (current === null || (current.flags & DidCapture) === NoFlags);

	            if (!cannotBeSuspended) {
	              var row = workInProgress.child;

	              while (row !== null) {
	                var suspended = findFirstSuspended(row);

	                if (suspended !== null) {
	                  didSuspendAlready = true;
	                  workInProgress.flags |= DidCapture;
	                  cutOffTailIfNeeded(renderState, false); // If this is a newly suspended tree, it might not get committed as
	                  // part of the second pass. In that case nothing will subscribe to
	                  // its thenables. Instead, we'll transfer its thenables to the
	                  // SuspenseList so that it can retry if they resolve.
	                  // There might be multiple of these in the list but since we're
	                  // going to wait for all of them anyway, it doesn't really matter
	                  // which ones gets to ping. In theory we could get clever and keep
	                  // track of how many dependencies remain but it gets tricky because
	                  // in the meantime, we can add/remove/change items and dependencies.
	                  // We might bail out of the loop before finding any but that
	                  // doesn't matter since that means that the other boundaries that
	                  // we did find already has their listeners attached.

	                  var newThenables = suspended.updateQueue;

	                  if (newThenables !== null) {
	                    workInProgress.updateQueue = newThenables;
	                    workInProgress.flags |= Update;
	                  } // Rerender the whole list, but this time, we'll force fallbacks
	                  // to stay in place.
	                  // Reset the effect flags before doing the second pass since that's now invalid.
	                  // Reset the child fibers to their original state.


	                  workInProgress.subtreeFlags = NoFlags;
	                  resetChildFibers(workInProgress, renderLanes); // Set up the Suspense Context to force suspense and immediately
	                  // rerender the children.

	                  pushSuspenseContext(workInProgress, setShallowSuspenseContext(suspenseStackCursor.current, ForceSuspenseFallback)); // Don't bubble properties in this case.

	                  return workInProgress.child;
	                }

	                row = row.sibling;
	              }
	            }

	            if (renderState.tail !== null && now() > getRenderTargetTime()) {
	              // We have already passed our CPU deadline but we still have rows
	              // left in the tail. We'll just give up further attempts to render
	              // the main content and only render fallbacks.
	              workInProgress.flags |= DidCapture;
	              didSuspendAlready = true;
	              cutOffTailIfNeeded(renderState, false); // Since nothing actually suspended, there will nothing to ping this
	              // to get it started back up to attempt the next item. While in terms
	              // of priority this work has the same priority as this current render,
	              // it's not part of the same transition once the transition has
	              // committed. If it's sync, we still want to yield so that it can be
	              // painted. Conceptually, this is really the same as pinging.
	              // We can use any RetryLane even if it's the one currently rendering
	              // since we're leaving it behind on this node.

	              workInProgress.lanes = SomeRetryLane;
	            }
	          } else {
	            cutOffTailIfNeeded(renderState, false);
	          } // Next we're going to render the tail.

	        } else {
	          // Append the rendered row to the child list.
	          if (!didSuspendAlready) {
	            var _suspended = findFirstSuspended(renderedTail);

	            if (_suspended !== null) {
	              workInProgress.flags |= DidCapture;
	              didSuspendAlready = true; // Ensure we transfer the update queue to the parent so that it doesn't
	              // get lost if this row ends up dropped during a second pass.

	              var _newThenables = _suspended.updateQueue;

	              if (_newThenables !== null) {
	                workInProgress.updateQueue = _newThenables;
	                workInProgress.flags |= Update;
	              }

	              cutOffTailIfNeeded(renderState, true); // This might have been modified.

	              if (renderState.tail === null && renderState.tailMode === 'hidden' && !renderedTail.alternate && !getIsHydrating() // We don't cut it if we're hydrating.
	              ) {
	                  // We're done.
	                  bubbleProperties(workInProgress);
	                  return null;
	                }
	            } else if ( // The time it took to render last row is greater than the remaining
	            // time we have to render. So rendering one more row would likely
	            // exceed it.
	            now() * 2 - renderState.renderingStartTime > getRenderTargetTime() && renderLanes !== OffscreenLane) {
	              // We have now passed our CPU deadline and we'll just give up further
	              // attempts to render the main content and only render fallbacks.
	              // The assumption is that this is usually faster.
	              workInProgress.flags |= DidCapture;
	              didSuspendAlready = true;
	              cutOffTailIfNeeded(renderState, false); // Since nothing actually suspended, there will nothing to ping this
	              // to get it started back up to attempt the next item. While in terms
	              // of priority this work has the same priority as this current render,
	              // it's not part of the same transition once the transition has
	              // committed. If it's sync, we still want to yield so that it can be
	              // painted. Conceptually, this is really the same as pinging.
	              // We can use any RetryLane even if it's the one currently rendering
	              // since we're leaving it behind on this node.

	              workInProgress.lanes = SomeRetryLane;
	            }
	          }

	          if (renderState.isBackwards) {
	            // The effect list of the backwards tail will have been added
	            // to the end. This breaks the guarantee that life-cycles fire in
	            // sibling order but that isn't a strong guarantee promised by React.
	            // Especially since these might also just pop in during future commits.
	            // Append to the beginning of the list.
	            renderedTail.sibling = workInProgress.child;
	            workInProgress.child = renderedTail;
	          } else {
	            var previousSibling = renderState.last;

	            if (previousSibling !== null) {
	              previousSibling.sibling = renderedTail;
	            } else {
	              workInProgress.child = renderedTail;
	            }

	            renderState.last = renderedTail;
	          }
	        }

	        if (renderState.tail !== null) {
	          // We still have tail rows to render.
	          // Pop a row.
	          var next = renderState.tail;
	          renderState.rendering = next;
	          renderState.tail = next.sibling;
	          renderState.renderingStartTime = now();
	          next.sibling = null; // Restore the context.
	          // TODO: We can probably just avoid popping it instead and only
	          // setting it the first time we go from not suspended to suspended.

	          var suspenseContext = suspenseStackCursor.current;

	          if (didSuspendAlready) {
	            suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
	          } else {
	            suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
	          }

	          pushSuspenseContext(workInProgress, suspenseContext); // Do a pass over the next row.
	          // Don't bubble properties in this case.

	          return next;
	        }

	        bubbleProperties(workInProgress);
	        return null;
	      }

	    case ScopeComponent:
	      {

	        break;
	      }

	    case OffscreenComponent:
	    case LegacyHiddenComponent:
	      {
	        popRenderLanes(workInProgress);
	        var _nextState = workInProgress.memoizedState;
	        var nextIsHidden = _nextState !== null;

	        if (current !== null) {
	          var _prevState = current.memoizedState;
	          var prevIsHidden = _prevState !== null;

	          if (prevIsHidden !== nextIsHidden && ( // LegacyHidden doesn't do any hiding — it only pre-renders.
	          !enableLegacyHidden )) {
	            workInProgress.flags |= Visibility;
	          }
	        }

	        if (!nextIsHidden || (workInProgress.mode & ConcurrentMode) === NoMode) {
	          bubbleProperties(workInProgress);
	        } else {
	          // Don't bubble properties for hidden children unless we're rendering
	          // at offscreen priority.
	          if (includesSomeLane(subtreeRenderLanes, OffscreenLane)) {
	            bubbleProperties(workInProgress);

	            {
	              // Check if there was an insertion or update in the hidden subtree.
	              // If so, we need to hide those nodes in the commit phase, so
	              // schedule a visibility effect.
	              if ( workInProgress.subtreeFlags & (Placement | Update)) {
	                workInProgress.flags |= Visibility;
	              }
	            }
	          }
	        }
	        return null;
	      }

	    case CacheComponent:
	      {

	        return null;
	      }

	    case TracingMarkerComponent:
	      {

	        return null;
	      }
	  }

	  throw new Error("Unknown unit of work tag (" + workInProgress.tag + "). This error is likely caused by a bug in " + 'React. Please file an issue.');
	}

	function unwindWork(current, workInProgress, renderLanes) {
	  // Note: This intentionally doesn't check if we're hydrating because comparing
	  // to the current tree provider fiber is just as fast and less error-prone.
	  // Ideally we would have a special version of the work loop only
	  // for hydration.
	  popTreeContext(workInProgress);

	  switch (workInProgress.tag) {
	    case ClassComponent:
	      {
	        var Component = workInProgress.type;

	        if (isContextProvider(Component)) {
	          popContext(workInProgress);
	        }

	        var flags = workInProgress.flags;

	        if (flags & ShouldCapture) {
	          workInProgress.flags = flags & ~ShouldCapture | DidCapture;

	          if ( (workInProgress.mode & ProfileMode) !== NoMode) {
	            transferActualDuration(workInProgress);
	          }

	          return workInProgress;
	        }

	        return null;
	      }

	    case HostRoot:
	      {
	        workInProgress.stateNode;
	        popHostContainer(workInProgress);
	        popTopLevelContextObject(workInProgress);
	        resetWorkInProgressVersions();
	        var _flags = workInProgress.flags;

	        if ((_flags & ShouldCapture) !== NoFlags && (_flags & DidCapture) === NoFlags) {
	          // There was an error during render that wasn't captured by a suspense
	          // boundary. Do a second pass on the root to unmount the children.
	          workInProgress.flags = _flags & ~ShouldCapture | DidCapture;
	          return workInProgress;
	        } // We unwound to the root without completing it. Exit.


	        return null;
	      }

	    case HostComponent:
	      {
	        // TODO: popHydrationState
	        popHostContext(workInProgress);
	        return null;
	      }

	    case SuspenseComponent:
	      {
	        popSuspenseContext(workInProgress);
	        var suspenseState = workInProgress.memoizedState;

	        if (suspenseState !== null && suspenseState.dehydrated !== null) {
	          if (workInProgress.alternate === null) {
	            throw new Error('Threw in newly mounted dehydrated component. This is likely a bug in ' + 'React. Please file an issue.');
	          }

	          resetHydrationState();
	        }

	        var _flags2 = workInProgress.flags;

	        if (_flags2 & ShouldCapture) {
	          workInProgress.flags = _flags2 & ~ShouldCapture | DidCapture; // Captured a suspense effect. Re-render the boundary.

	          if ( (workInProgress.mode & ProfileMode) !== NoMode) {
	            transferActualDuration(workInProgress);
	          }

	          return workInProgress;
	        }

	        return null;
	      }

	    case SuspenseListComponent:
	      {
	        popSuspenseContext(workInProgress); // SuspenseList doesn't actually catch anything. It should've been
	        // caught by a nested boundary. If not, it should bubble through.

	        return null;
	      }

	    case HostPortal:
	      popHostContainer(workInProgress);
	      return null;

	    case ContextProvider:
	      var context = workInProgress.type._context;
	      popProvider(context, workInProgress);
	      return null;

	    case OffscreenComponent:
	    case LegacyHiddenComponent:
	      popRenderLanes(workInProgress);
	      return null;

	    case CacheComponent:

	      return null;

	    default:
	      return null;
	  }
	}

	function unwindInterruptedWork(current, interruptedWork, renderLanes) {
	  // Note: This intentionally doesn't check if we're hydrating because comparing
	  // to the current tree provider fiber is just as fast and less error-prone.
	  // Ideally we would have a special version of the work loop only
	  // for hydration.
	  popTreeContext(interruptedWork);

	  switch (interruptedWork.tag) {
	    case ClassComponent:
	      {
	        var childContextTypes = interruptedWork.type.childContextTypes;

	        if (childContextTypes !== null && childContextTypes !== undefined) {
	          popContext(interruptedWork);
	        }

	        break;
	      }

	    case HostRoot:
	      {
	        interruptedWork.stateNode;
	        popHostContainer(interruptedWork);
	        popTopLevelContextObject(interruptedWork);
	        resetWorkInProgressVersions();
	        break;
	      }

	    case HostComponent:
	      {
	        popHostContext(interruptedWork);
	        break;
	      }

	    case HostPortal:
	      popHostContainer(interruptedWork);
	      break;

	    case SuspenseComponent:
	      popSuspenseContext(interruptedWork);
	      break;

	    case SuspenseListComponent:
	      popSuspenseContext(interruptedWork);
	      break;

	    case ContextProvider:
	      var context = interruptedWork.type._context;
	      popProvider(context, interruptedWork);
	      break;

	    case OffscreenComponent:
	    case LegacyHiddenComponent:
	      popRenderLanes(interruptedWork);
	      break;
	  }
	}

	var didWarnAboutUndefinedSnapshotBeforeUpdate = null;

	{
	  didWarnAboutUndefinedSnapshotBeforeUpdate = new Set();
	} // Used during the commit phase to track the state of the Offscreen component stack.
	// Allows us to avoid traversing the return path to find the nearest Offscreen ancestor.
	// Only used when enableSuspenseLayoutEffectSemantics is enabled.


	var offscreenSubtreeIsHidden = false;
	var offscreenSubtreeWasHidden = false;
	var PossiblyWeakSet = typeof WeakSet === 'function' ? WeakSet : Set;
	var nextEffect = null; // Used for Profiling builds to track updaters.

	var inProgressLanes = null;
	var inProgressRoot = null;
	function reportUncaughtErrorInDEV(error) {
	  // Wrapping each small part of the commit phase into a guarded
	  // callback is a bit too slow (https://github.com/facebook/react/pull/21666).
	  // But we rely on it to surface errors to DEV tools like overlays
	  // (https://github.com/facebook/react/issues/21712).
	  // As a compromise, rethrow only caught errors in a guard.
	  {
	    invokeGuardedCallback(null, function () {
	      throw error;
	    });
	    clearCaughtError();
	  }
	}

	var callComponentWillUnmountWithTimer = function (current, instance) {
	  instance.props = current.memoizedProps;
	  instance.state = current.memoizedState;

	  if ( current.mode & ProfileMode) {
	    try {
	      startLayoutEffectTimer();
	      instance.componentWillUnmount();
	    } finally {
	      recordLayoutEffectDuration(current);
	    }
	  } else {
	    instance.componentWillUnmount();
	  }
	}; // Capture errors so they don't interrupt mounting.


	function safelyCallCommitHookLayoutEffectListMount(current, nearestMountedAncestor) {
	  try {
	    commitHookEffectListMount(Layout, current);
	  } catch (error) {
	    captureCommitPhaseError(current, nearestMountedAncestor, error);
	  }
	} // Capture errors so they don't interrupt unmounting.


	function safelyCallComponentWillUnmount(current, nearestMountedAncestor, instance) {
	  try {
	    callComponentWillUnmountWithTimer(current, instance);
	  } catch (error) {
	    captureCommitPhaseError(current, nearestMountedAncestor, error);
	  }
	} // Capture errors so they don't interrupt mounting.


	function safelyCallComponentDidMount(current, nearestMountedAncestor, instance) {
	  try {
	    instance.componentDidMount();
	  } catch (error) {
	    captureCommitPhaseError(current, nearestMountedAncestor, error);
	  }
	} // Capture errors so they don't interrupt mounting.


	function safelyAttachRef(current, nearestMountedAncestor) {
	  try {
	    commitAttachRef(current);
	  } catch (error) {
	    captureCommitPhaseError(current, nearestMountedAncestor, error);
	  }
	}

	function safelyDetachRef(current, nearestMountedAncestor) {
	  var ref = current.ref;

	  if (ref !== null) {
	    if (typeof ref === 'function') {
	      var retVal;

	      try {
	        if (enableProfilerTimer && enableProfilerCommitHooks && current.mode & ProfileMode) {
	          try {
	            startLayoutEffectTimer();
	            retVal = ref(null);
	          } finally {
	            recordLayoutEffectDuration(current);
	          }
	        } else {
	          retVal = ref(null);
	        }
	      } catch (error) {
	        captureCommitPhaseError(current, nearestMountedAncestor, error);
	      }

	      {
	        if (typeof retVal === 'function') {
	          error('Unexpected return value from a callback ref in %s. ' + 'A callback ref should not return a function.', getComponentNameFromFiber(current));
	        }
	      }
	    } else {
	      ref.current = null;
	    }
	  }
	}

	function safelyCallDestroy(current, nearestMountedAncestor, destroy) {
	  try {
	    destroy();
	  } catch (error) {
	    captureCommitPhaseError(current, nearestMountedAncestor, error);
	  }
	}
	var shouldFireAfterActiveInstanceBlur = false;
	function commitBeforeMutationEffects(root, firstChild) {
	  prepareForCommit(root.containerInfo);
	  nextEffect = firstChild;
	  commitBeforeMutationEffects_begin(); // We no longer need to track the active instance fiber

	  var shouldFire = shouldFireAfterActiveInstanceBlur;
	  shouldFireAfterActiveInstanceBlur = false;
	  return shouldFire;
	}

	function commitBeforeMutationEffects_begin() {
	  while (nextEffect !== null) {
	    var fiber = nextEffect; // This phase is only used for beforeActiveInstanceBlur.

	    var child = fiber.child;

	    if ((fiber.subtreeFlags & BeforeMutationMask) !== NoFlags && child !== null) {
	      child.return = fiber;
	      nextEffect = child;
	    } else {
	      commitBeforeMutationEffects_complete();
	    }
	  }
	}

	function commitBeforeMutationEffects_complete() {
	  while (nextEffect !== null) {
	    var fiber = nextEffect;
	    setCurrentFiber(fiber);

	    try {
	      commitBeforeMutationEffectsOnFiber(fiber);
	    } catch (error) {
	      captureCommitPhaseError(fiber, fiber.return, error);
	    }

	    resetCurrentFiber();
	    var sibling = fiber.sibling;

	    if (sibling !== null) {
	      sibling.return = fiber.return;
	      nextEffect = sibling;
	      return;
	    }

	    nextEffect = fiber.return;
	  }
	}

	function commitBeforeMutationEffectsOnFiber(finishedWork) {
	  var current = finishedWork.alternate;
	  var flags = finishedWork.flags;

	  if ((flags & Snapshot) !== NoFlags) {
	    setCurrentFiber(finishedWork);

	    switch (finishedWork.tag) {
	      case FunctionComponent:
	      case ForwardRef:
	      case SimpleMemoComponent:
	        {
	          break;
	        }

	      case ClassComponent:
	        {
	          if (current !== null) {
	            var prevProps = current.memoizedProps;
	            var prevState = current.memoizedState;
	            var instance = finishedWork.stateNode; // We could update instance props and state here,
	            // but instead we rely on them being set during last render.
	            // TODO: revisit this when we implement resuming.

	            {
	              if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
	                if (instance.props !== finishedWork.memoizedProps) {
	                  error('Expected %s props to match memoized props before ' + 'getSnapshotBeforeUpdate. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentNameFromFiber(finishedWork) || 'instance');
	                }

	                if (instance.state !== finishedWork.memoizedState) {
	                  error('Expected %s state to match memoized state before ' + 'getSnapshotBeforeUpdate. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.state`. ' + 'Please file an issue.', getComponentNameFromFiber(finishedWork) || 'instance');
	                }
	              }
	            }

	            var snapshot = instance.getSnapshotBeforeUpdate(finishedWork.elementType === finishedWork.type ? prevProps : resolveDefaultProps(finishedWork.type, prevProps), prevState);

	            {
	              var didWarnSet = didWarnAboutUndefinedSnapshotBeforeUpdate;

	              if (snapshot === undefined && !didWarnSet.has(finishedWork.type)) {
	                didWarnSet.add(finishedWork.type);

	                error('%s.getSnapshotBeforeUpdate(): A snapshot value (or null) ' + 'must be returned. You have returned undefined.', getComponentNameFromFiber(finishedWork));
	              }
	            }

	            instance.__reactInternalSnapshotBeforeUpdate = snapshot;
	          }

	          break;
	        }

	      case HostRoot:
	        {
	          {
	            var root = finishedWork.stateNode;
	            clearContainer(root.containerInfo);
	          }

	          break;
	        }

	      case HostComponent:
	      case HostText:
	      case HostPortal:
	      case IncompleteClassComponent:
	        // Nothing to do for these component types
	        break;

	      default:
	        {
	          throw new Error('This unit of work tag should not have side-effects. This error is ' + 'likely caused by a bug in React. Please file an issue.');
	        }
	    }

	    resetCurrentFiber();
	  }
	}

	function commitHookEffectListUnmount(flags, finishedWork, nearestMountedAncestor) {
	  var updateQueue = finishedWork.updateQueue;
	  var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;

	  if (lastEffect !== null) {
	    var firstEffect = lastEffect.next;
	    var effect = firstEffect;

	    do {
	      if ((effect.tag & flags) === flags) {
	        // Unmount
	        var destroy = effect.destroy;
	        effect.destroy = undefined;

	        if (destroy !== undefined) {
	          {
	            if ((flags & Passive$1) !== NoFlags$1) {
	              markComponentPassiveEffectUnmountStarted(finishedWork);
	            } else if ((flags & Layout) !== NoFlags$1) {
	              markComponentLayoutEffectUnmountStarted(finishedWork);
	            }
	          }

	          {
	            if ((flags & Insertion) !== NoFlags$1) {
	              setIsRunningInsertionEffect(true);
	            }
	          }

	          safelyCallDestroy(finishedWork, nearestMountedAncestor, destroy);

	          {
	            if ((flags & Insertion) !== NoFlags$1) {
	              setIsRunningInsertionEffect(false);
	            }
	          }

	          {
	            if ((flags & Passive$1) !== NoFlags$1) {
	              markComponentPassiveEffectUnmountStopped();
	            } else if ((flags & Layout) !== NoFlags$1) {
	              markComponentLayoutEffectUnmountStopped();
	            }
	          }
	        }
	      }

	      effect = effect.next;
	    } while (effect !== firstEffect);
	  }
	}

	function commitHookEffectListMount(flags, finishedWork) {
	  var updateQueue = finishedWork.updateQueue;
	  var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;

	  if (lastEffect !== null) {
	    var firstEffect = lastEffect.next;
	    var effect = firstEffect;

	    do {
	      if ((effect.tag & flags) === flags) {
	        {
	          if ((flags & Passive$1) !== NoFlags$1) {
	            markComponentPassiveEffectMountStarted(finishedWork);
	          } else if ((flags & Layout) !== NoFlags$1) {
	            markComponentLayoutEffectMountStarted(finishedWork);
	          }
	        } // Mount


	        var create = effect.create;

	        {
	          if ((flags & Insertion) !== NoFlags$1) {
	            setIsRunningInsertionEffect(true);
	          }
	        }

	        effect.destroy = create();

	        {
	          if ((flags & Insertion) !== NoFlags$1) {
	            setIsRunningInsertionEffect(false);
	          }
	        }

	        {
	          if ((flags & Passive$1) !== NoFlags$1) {
	            markComponentPassiveEffectMountStopped();
	          } else if ((flags & Layout) !== NoFlags$1) {
	            markComponentLayoutEffectMountStopped();
	          }
	        }

	        {
	          var destroy = effect.destroy;

	          if (destroy !== undefined && typeof destroy !== 'function') {
	            var hookName = void 0;

	            if ((effect.tag & Layout) !== NoFlags) {
	              hookName = 'useLayoutEffect';
	            } else if ((effect.tag & Insertion) !== NoFlags) {
	              hookName = 'useInsertionEffect';
	            } else {
	              hookName = 'useEffect';
	            }

	            var addendum = void 0;

	            if (destroy === null) {
	              addendum = ' You returned null. If your effect does not require clean ' + 'up, return undefined (or nothing).';
	            } else if (typeof destroy.then === 'function') {
	              addendum = '\n\nIt looks like you wrote ' + hookName + '(async () => ...) or returned a Promise. ' + 'Instead, write the async function inside your effect ' + 'and call it immediately:\n\n' + hookName + '(() => {\n' + '  async function fetchData() {\n' + '    // You can await here\n' + '    const response = await MyAPI.getData(someId);\n' + '    // ...\n' + '  }\n' + '  fetchData();\n' + "}, [someId]); // Or [] if effect doesn't need props or state\n\n" + 'Learn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching';
	            } else {
	              addendum = ' You returned: ' + destroy;
	            }

	            error('%s must not return anything besides a function, ' + 'which is used for clean-up.%s', hookName, addendum);
	          }
	        }
	      }

	      effect = effect.next;
	    } while (effect !== firstEffect);
	  }
	}

	function commitPassiveEffectDurations(finishedRoot, finishedWork) {
	  {
	    // Only Profilers with work in their subtree will have an Update effect scheduled.
	    if ((finishedWork.flags & Update) !== NoFlags) {
	      switch (finishedWork.tag) {
	        case Profiler:
	          {
	            var passiveEffectDuration = finishedWork.stateNode.passiveEffectDuration;
	            var _finishedWork$memoize = finishedWork.memoizedProps,
	                id = _finishedWork$memoize.id,
	                onPostCommit = _finishedWork$memoize.onPostCommit; // This value will still reflect the previous commit phase.
	            // It does not get reset until the start of the next commit phase.

	            var commitTime = getCommitTime();
	            var phase = finishedWork.alternate === null ? 'mount' : 'update';

	            {
	              if (isCurrentUpdateNested()) {
	                phase = 'nested-update';
	              }
	            }

	            if (typeof onPostCommit === 'function') {
	              onPostCommit(id, phase, passiveEffectDuration, commitTime);
	            } // Bubble times to the next nearest ancestor Profiler.
	            // After we process that Profiler, we'll bubble further up.


	            var parentFiber = finishedWork.return;

	            outer: while (parentFiber !== null) {
	              switch (parentFiber.tag) {
	                case HostRoot:
	                  var root = parentFiber.stateNode;
	                  root.passiveEffectDuration += passiveEffectDuration;
	                  break outer;

	                case Profiler:
	                  var parentStateNode = parentFiber.stateNode;
	                  parentStateNode.passiveEffectDuration += passiveEffectDuration;
	                  break outer;
	              }

	              parentFiber = parentFiber.return;
	            }

	            break;
	          }
	      }
	    }
	  }
	}

	function commitLayoutEffectOnFiber(finishedRoot, current, finishedWork, committedLanes) {
	  if ((finishedWork.flags & LayoutMask) !== NoFlags) {
	    switch (finishedWork.tag) {
	      case FunctionComponent:
	      case ForwardRef:
	      case SimpleMemoComponent:
	        {
	          if ( !offscreenSubtreeWasHidden) {
	            // At this point layout effects have already been destroyed (during mutation phase).
	            // This is done to prevent sibling component effects from interfering with each other,
	            // e.g. a destroy function in one component should never override a ref set
	            // by a create function in another component during the same commit.
	            if ( finishedWork.mode & ProfileMode) {
	              try {
	                startLayoutEffectTimer();
	                commitHookEffectListMount(Layout | HasEffect, finishedWork);
	              } finally {
	                recordLayoutEffectDuration(finishedWork);
	              }
	            } else {
	              commitHookEffectListMount(Layout | HasEffect, finishedWork);
	            }
	          }

	          break;
	        }

	      case ClassComponent:
	        {
	          var instance = finishedWork.stateNode;

	          if (finishedWork.flags & Update) {
	            if (!offscreenSubtreeWasHidden) {
	              if (current === null) {
	                // We could update instance props and state here,
	                // but instead we rely on them being set during last render.
	                // TODO: revisit this when we implement resuming.
	                {
	                  if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
	                    if (instance.props !== finishedWork.memoizedProps) {
	                      error('Expected %s props to match memoized props before ' + 'componentDidMount. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentNameFromFiber(finishedWork) || 'instance');
	                    }

	                    if (instance.state !== finishedWork.memoizedState) {
	                      error('Expected %s state to match memoized state before ' + 'componentDidMount. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.state`. ' + 'Please file an issue.', getComponentNameFromFiber(finishedWork) || 'instance');
	                    }
	                  }
	                }

	                if ( finishedWork.mode & ProfileMode) {
	                  try {
	                    startLayoutEffectTimer();
	                    instance.componentDidMount();
	                  } finally {
	                    recordLayoutEffectDuration(finishedWork);
	                  }
	                } else {
	                  instance.componentDidMount();
	                }
	              } else {
	                var prevProps = finishedWork.elementType === finishedWork.type ? current.memoizedProps : resolveDefaultProps(finishedWork.type, current.memoizedProps);
	                var prevState = current.memoizedState; // We could update instance props and state here,
	                // but instead we rely on them being set during last render.
	                // TODO: revisit this when we implement resuming.

	                {
	                  if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
	                    if (instance.props !== finishedWork.memoizedProps) {
	                      error('Expected %s props to match memoized props before ' + 'componentDidUpdate. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentNameFromFiber(finishedWork) || 'instance');
	                    }

	                    if (instance.state !== finishedWork.memoizedState) {
	                      error('Expected %s state to match memoized state before ' + 'componentDidUpdate. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.state`. ' + 'Please file an issue.', getComponentNameFromFiber(finishedWork) || 'instance');
	                    }
	                  }
	                }

	                if ( finishedWork.mode & ProfileMode) {
	                  try {
	                    startLayoutEffectTimer();
	                    instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
	                  } finally {
	                    recordLayoutEffectDuration(finishedWork);
	                  }
	                } else {
	                  instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
	                }
	              }
	            }
	          } // TODO: I think this is now always non-null by the time it reaches the
	          // commit phase. Consider removing the type check.


	          var updateQueue = finishedWork.updateQueue;

	          if (updateQueue !== null) {
	            {
	              if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
	                if (instance.props !== finishedWork.memoizedProps) {
	                  error('Expected %s props to match memoized props before ' + 'processing the update queue. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentNameFromFiber(finishedWork) || 'instance');
	                }

	                if (instance.state !== finishedWork.memoizedState) {
	                  error('Expected %s state to match memoized state before ' + 'processing the update queue. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.state`. ' + 'Please file an issue.', getComponentNameFromFiber(finishedWork) || 'instance');
	                }
	              }
	            } // We could update instance props and state here,
	            // but instead we rely on them being set during last render.
	            // TODO: revisit this when we implement resuming.


	            commitUpdateQueue(finishedWork, updateQueue, instance);
	          }

	          break;
	        }

	      case HostRoot:
	        {
	          // TODO: I think this is now always non-null by the time it reaches the
	          // commit phase. Consider removing the type check.
	          var _updateQueue = finishedWork.updateQueue;

	          if (_updateQueue !== null) {
	            var _instance = null;

	            if (finishedWork.child !== null) {
	              switch (finishedWork.child.tag) {
	                case HostComponent:
	                  _instance = getPublicInstance(finishedWork.child.stateNode);
	                  break;

	                case ClassComponent:
	                  _instance = finishedWork.child.stateNode;
	                  break;
	              }
	            }

	            commitUpdateQueue(finishedWork, _updateQueue, _instance);
	          }

	          break;
	        }

	      case HostComponent:
	        {
	          var _instance2 = finishedWork.stateNode; // Renderers may schedule work to be done after host components are mounted
	          // (eg DOM renderer may schedule auto-focus for inputs and form controls).
	          // These effects should only be committed when components are first mounted,
	          // aka when there is no current/alternate.

	          if (current === null && finishedWork.flags & Update) {
	            var type = finishedWork.type;
	            var props = finishedWork.memoizedProps;
	            commitMount(_instance2, type, props);
	          }

	          break;
	        }

	      case HostText:
	        {
	          // We have no life-cycles associated with text.
	          break;
	        }

	      case HostPortal:
	        {
	          // We have no life-cycles associated with portals.
	          break;
	        }

	      case Profiler:
	        {
	          {
	            var _finishedWork$memoize2 = finishedWork.memoizedProps,
	                onCommit = _finishedWork$memoize2.onCommit,
	                onRender = _finishedWork$memoize2.onRender;
	            var effectDuration = finishedWork.stateNode.effectDuration;
	            var commitTime = getCommitTime();
	            var phase = current === null ? 'mount' : 'update';

	            {
	              if (isCurrentUpdateNested()) {
	                phase = 'nested-update';
	              }
	            }

	            if (typeof onRender === 'function') {
	              onRender(finishedWork.memoizedProps.id, phase, finishedWork.actualDuration, finishedWork.treeBaseDuration, finishedWork.actualStartTime, commitTime);
	            }

	            {
	              if (typeof onCommit === 'function') {
	                onCommit(finishedWork.memoizedProps.id, phase, effectDuration, commitTime);
	              } // Schedule a passive effect for this Profiler to call onPostCommit hooks.
	              // This effect should be scheduled even if there is no onPostCommit callback for this Profiler,
	              // because the effect is also where times bubble to parent Profilers.


	              enqueuePendingPassiveProfilerEffect(finishedWork); // Propagate layout effect durations to the next nearest Profiler ancestor.
	              // Do not reset these values until the next render so DevTools has a chance to read them first.

	              var parentFiber = finishedWork.return;

	              outer: while (parentFiber !== null) {
	                switch (parentFiber.tag) {
	                  case HostRoot:
	                    var root = parentFiber.stateNode;
	                    root.effectDuration += effectDuration;
	                    break outer;

	                  case Profiler:
	                    var parentStateNode = parentFiber.stateNode;
	                    parentStateNode.effectDuration += effectDuration;
	                    break outer;
	                }

	                parentFiber = parentFiber.return;
	              }
	            }
	          }

	          break;
	        }

	      case SuspenseComponent:
	        {
	          commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);
	          break;
	        }

	      case SuspenseListComponent:
	      case IncompleteClassComponent:
	      case ScopeComponent:
	      case OffscreenComponent:
	      case LegacyHiddenComponent:
	      case TracingMarkerComponent:
	        {
	          break;
	        }

	      default:
	        throw new Error('This unit of work tag should not have side-effects. This error is ' + 'likely caused by a bug in React. Please file an issue.');
	    }
	  }

	  if ( !offscreenSubtreeWasHidden) {
	    {
	      if (finishedWork.flags & Ref) {
	        commitAttachRef(finishedWork);
	      }
	    }
	  }
	}

	function reappearLayoutEffectsOnFiber(node) {
	  // Turn on layout effects in a tree that previously disappeared.
	  // TODO (Offscreen) Check: flags & LayoutStatic
	  switch (node.tag) {
	    case FunctionComponent:
	    case ForwardRef:
	    case SimpleMemoComponent:
	      {
	        if ( node.mode & ProfileMode) {
	          try {
	            startLayoutEffectTimer();
	            safelyCallCommitHookLayoutEffectListMount(node, node.return);
	          } finally {
	            recordLayoutEffectDuration(node);
	          }
	        } else {
	          safelyCallCommitHookLayoutEffectListMount(node, node.return);
	        }

	        break;
	      }

	    case ClassComponent:
	      {
	        var instance = node.stateNode;

	        if (typeof instance.componentDidMount === 'function') {
	          safelyCallComponentDidMount(node, node.return, instance);
	        }

	        safelyAttachRef(node, node.return);
	        break;
	      }

	    case HostComponent:
	      {
	        safelyAttachRef(node, node.return);
	        break;
	      }
	  }
	}

	function hideOrUnhideAllChildren(finishedWork, isHidden) {
	  // Only hide or unhide the top-most host nodes.
	  var hostSubtreeRoot = null;

	  {
	    // We only have the top Fiber that was inserted but we need to recurse down its
	    // children to find all the terminal nodes.
	    var node = finishedWork;

	    while (true) {
	      if (node.tag === HostComponent) {
	        if (hostSubtreeRoot === null) {
	          hostSubtreeRoot = node;

	          try {
	            var instance = node.stateNode;

	            if (isHidden) {
	              hideInstance(instance);
	            } else {
	              unhideInstance(node.stateNode, node.memoizedProps);
	            }
	          } catch (error) {
	            captureCommitPhaseError(finishedWork, finishedWork.return, error);
	          }
	        }
	      } else if (node.tag === HostText) {
	        if (hostSubtreeRoot === null) {
	          try {
	            var _instance3 = node.stateNode;

	            if (isHidden) {
	              hideTextInstance(_instance3);
	            } else {
	              unhideTextInstance(_instance3, node.memoizedProps);
	            }
	          } catch (error) {
	            captureCommitPhaseError(finishedWork, finishedWork.return, error);
	          }
	        }
	      } else if ((node.tag === OffscreenComponent || node.tag === LegacyHiddenComponent) && node.memoizedState !== null && node !== finishedWork) ; else if (node.child !== null) {
	        node.child.return = node;
	        node = node.child;
	        continue;
	      }

	      if (node === finishedWork) {
	        return;
	      }

	      while (node.sibling === null) {
	        if (node.return === null || node.return === finishedWork) {
	          return;
	        }

	        if (hostSubtreeRoot === node) {
	          hostSubtreeRoot = null;
	        }

	        node = node.return;
	      }

	      if (hostSubtreeRoot === node) {
	        hostSubtreeRoot = null;
	      }

	      node.sibling.return = node.return;
	      node = node.sibling;
	    }
	  }
	}

	function commitAttachRef(finishedWork) {
	  var ref = finishedWork.ref;

	  if (ref !== null) {
	    var instance = finishedWork.stateNode;
	    var instanceToUse;

	    switch (finishedWork.tag) {
	      case HostComponent:
	        instanceToUse = getPublicInstance(instance);
	        break;

	      default:
	        instanceToUse = instance;
	    } // Moved outside to ensure DCE works with this flag

	    if (typeof ref === 'function') {
	      var retVal;

	      if ( finishedWork.mode & ProfileMode) {
	        try {
	          startLayoutEffectTimer();
	          retVal = ref(instanceToUse);
	        } finally {
	          recordLayoutEffectDuration(finishedWork);
	        }
	      } else {
	        retVal = ref(instanceToUse);
	      }

	      {
	        if (typeof retVal === 'function') {
	          error('Unexpected return value from a callback ref in %s. ' + 'A callback ref should not return a function.', getComponentNameFromFiber(finishedWork));
	        }
	      }
	    } else {
	      {
	        if (!ref.hasOwnProperty('current')) {
	          error('Unexpected ref object provided for %s. ' + 'Use either a ref-setter function or React.createRef().', getComponentNameFromFiber(finishedWork));
	        }
	      }

	      ref.current = instanceToUse;
	    }
	  }
	}

	function detachFiberMutation(fiber) {
	  // Cut off the return pointer to disconnect it from the tree.
	  // This enables us to detect and warn against state updates on an unmounted component.
	  // It also prevents events from bubbling from within disconnected components.
	  //
	  // Ideally, we should also clear the child pointer of the parent alternate to let this
	  // get GC:ed but we don't know which for sure which parent is the current
	  // one so we'll settle for GC:ing the subtree of this child.
	  // This child itself will be GC:ed when the parent updates the next time.
	  //
	  // Note that we can't clear child or sibling pointers yet.
	  // They're needed for passive effects and for findDOMNode.
	  // We defer those fields, and all other cleanup, to the passive phase (see detachFiberAfterEffects).
	  //
	  // Don't reset the alternate yet, either. We need that so we can detach the
	  // alternate's fields in the passive phase. Clearing the return pointer is
	  // sufficient for findDOMNode semantics.
	  var alternate = fiber.alternate;

	  if (alternate !== null) {
	    alternate.return = null;
	  }

	  fiber.return = null;
	}

	function detachFiberAfterEffects(fiber) {
	  var alternate = fiber.alternate;

	  if (alternate !== null) {
	    fiber.alternate = null;
	    detachFiberAfterEffects(alternate);
	  } // Note: Defensively using negation instead of < in case
	  // `deletedTreeCleanUpLevel` is undefined.


	  {
	    // Clear cyclical Fiber fields. This level alone is designed to roughly
	    // approximate the planned Fiber refactor. In that world, `setState` will be
	    // bound to a special "instance" object instead of a Fiber. The Instance
	    // object will not have any of these fields. It will only be connected to
	    // the fiber tree via a single link at the root. So if this level alone is
	    // sufficient to fix memory issues, that bodes well for our plans.
	    fiber.child = null;
	    fiber.deletions = null;
	    fiber.sibling = null; // The `stateNode` is cyclical because on host nodes it points to the host
	    // tree, which has its own pointers to children, parents, and siblings.
	    // The other host nodes also point back to fibers, so we should detach that
	    // one, too.

	    if (fiber.tag === HostComponent) {
	      var hostInstance = fiber.stateNode;

	      if (hostInstance !== null) {
	        detachDeletedInstance(hostInstance);
	      }
	    }

	    fiber.stateNode = null; // I'm intentionally not clearing the `return` field in this level. We
	    // already disconnect the `return` pointer at the root of the deleted
	    // subtree (in `detachFiberMutation`). Besides, `return` by itself is not
	    // cyclical — it's only cyclical when combined with `child`, `sibling`, and
	    // `alternate`. But we'll clear it in the next level anyway, just in case.

	    {
	      fiber._debugOwner = null;
	    }

	    {
	      // Theoretically, nothing in here should be necessary, because we already
	      // disconnected the fiber from the tree. So even if something leaks this
	      // particular fiber, it won't leak anything else
	      //
	      // The purpose of this branch is to be super aggressive so we can measure
	      // if there's any difference in memory impact. If there is, that could
	      // indicate a React leak we don't know about.
	      fiber.return = null;
	      fiber.dependencies = null;
	      fiber.memoizedProps = null;
	      fiber.memoizedState = null;
	      fiber.pendingProps = null;
	      fiber.stateNode = null; // TODO: Move to `commitPassiveUnmountInsideDeletedTreeOnFiber` instead.

	      fiber.updateQueue = null;
	    }
	  }
	}

	function getHostParentFiber(fiber) {
	  var parent = fiber.return;

	  while (parent !== null) {
	    if (isHostParent(parent)) {
	      return parent;
	    }

	    parent = parent.return;
	  }

	  throw new Error('Expected to find a host parent. This error is likely caused by a bug ' + 'in React. Please file an issue.');
	}

	function isHostParent(fiber) {
	  return fiber.tag === HostComponent || fiber.tag === HostRoot || fiber.tag === HostPortal;
	}

	function getHostSibling(fiber) {
	  // We're going to search forward into the tree until we find a sibling host
	  // node. Unfortunately, if multiple insertions are done in a row we have to
	  // search past them. This leads to exponential search for the next sibling.
	  // TODO: Find a more efficient way to do this.
	  var node = fiber;

	  siblings: while (true) {
	    // If we didn't find anything, let's try the next sibling.
	    while (node.sibling === null) {
	      if (node.return === null || isHostParent(node.return)) {
	        // If we pop out of the root or hit the parent the fiber we are the
	        // last sibling.
	        return null;
	      }

	      node = node.return;
	    }

	    node.sibling.return = node.return;
	    node = node.sibling;

	    while (node.tag !== HostComponent && node.tag !== HostText && node.tag !== DehydratedFragment) {
	      // If it is not host node and, we might have a host node inside it.
	      // Try to search down until we find one.
	      if (node.flags & Placement) {
	        // If we don't have a child, try the siblings instead.
	        continue siblings;
	      } // If we don't have a child, try the siblings instead.
	      // We also skip portals because they are not part of this host tree.


	      if (node.child === null || node.tag === HostPortal) {
	        continue siblings;
	      } else {
	        node.child.return = node;
	        node = node.child;
	      }
	    } // Check if this host node is stable or about to be placed.


	    if (!(node.flags & Placement)) {
	      // Found it!
	      return node.stateNode;
	    }
	  }
	}

	function commitPlacement(finishedWork) {


	  var parentFiber = getHostParentFiber(finishedWork); // Note: these two variables *must* always be updated together.

	  switch (parentFiber.tag) {
	    case HostComponent:
	      {
	        var parent = parentFiber.stateNode;

	        if (parentFiber.flags & ContentReset) {
	          // Reset the text content of the parent before doing any insertions
	          resetTextContent(parent); // Clear ContentReset from the effect tag

	          parentFiber.flags &= ~ContentReset;
	        }

	        var before = getHostSibling(finishedWork); // We only have the top Fiber that was inserted but we need to recurse down its
	        // children to find all the terminal nodes.

	        insertOrAppendPlacementNode(finishedWork, before, parent);
	        break;
	      }

	    case HostRoot:
	    case HostPortal:
	      {
	        var _parent = parentFiber.stateNode.containerInfo;

	        var _before = getHostSibling(finishedWork);

	        insertOrAppendPlacementNodeIntoContainer(finishedWork, _before, _parent);
	        break;
	      }
	    // eslint-disable-next-line-no-fallthrough

	    default:
	      throw new Error('Invalid host parent fiber. This error is likely caused by a bug ' + 'in React. Please file an issue.');
	  }
	}

	function insertOrAppendPlacementNodeIntoContainer(node, before, parent) {
	  var tag = node.tag;
	  var isHost = tag === HostComponent || tag === HostText;

	  if (isHost) {
	    var stateNode = node.stateNode;

	    if (before) {
	      insertInContainerBefore(parent, stateNode, before);
	    } else {
	      appendChildToContainer(parent, stateNode);
	    }
	  } else if (tag === HostPortal) ; else {
	    var child = node.child;

	    if (child !== null) {
	      insertOrAppendPlacementNodeIntoContainer(child, before, parent);
	      var sibling = child.sibling;

	      while (sibling !== null) {
	        insertOrAppendPlacementNodeIntoContainer(sibling, before, parent);
	        sibling = sibling.sibling;
	      }
	    }
	  }
	}

	function insertOrAppendPlacementNode(node, before, parent) {
	  var tag = node.tag;
	  var isHost = tag === HostComponent || tag === HostText;

	  if (isHost) {
	    var stateNode = node.stateNode;

	    if (before) {
	      insertBefore(parent, stateNode, before);
	    } else {
	      appendChild(parent, stateNode);
	    }
	  } else if (tag === HostPortal) ; else {
	    var child = node.child;

	    if (child !== null) {
	      insertOrAppendPlacementNode(child, before, parent);
	      var sibling = child.sibling;

	      while (sibling !== null) {
	        insertOrAppendPlacementNode(sibling, before, parent);
	        sibling = sibling.sibling;
	      }
	    }
	  }
	} // These are tracked on the stack as we recursively traverse a
	// deleted subtree.
	// TODO: Update these during the whole mutation phase, not just during
	// a deletion.


	var hostParent = null;
	var hostParentIsContainer = false;

	function commitDeletionEffects(root, returnFiber, deletedFiber) {
	  {
	    // We only have the top Fiber that was deleted but we need to recurse down its
	    // children to find all the terminal nodes.
	    // Recursively delete all host nodes from the parent, detach refs, clean
	    // up mounted layout effects, and call componentWillUnmount.
	    // We only need to remove the topmost host child in each branch. But then we
	    // still need to keep traversing to unmount effects, refs, and cWU. TODO: We
	    // could split this into two separate traversals functions, where the second
	    // one doesn't include any removeChild logic. This is maybe the same
	    // function as "disappearLayoutEffects" (or whatever that turns into after
	    // the layout phase is refactored to use recursion).
	    // Before starting, find the nearest host parent on the stack so we know
	    // which instance/container to remove the children from.
	    // TODO: Instead of searching up the fiber return path on every deletion, we
	    // can track the nearest host component on the JS stack as we traverse the
	    // tree during the commit phase. This would make insertions faster, too.
	    var parent = returnFiber;

	    findParent: while (parent !== null) {
	      switch (parent.tag) {
	        case HostComponent:
	          {
	            hostParent = parent.stateNode;
	            hostParentIsContainer = false;
	            break findParent;
	          }

	        case HostRoot:
	          {
	            hostParent = parent.stateNode.containerInfo;
	            hostParentIsContainer = true;
	            break findParent;
	          }

	        case HostPortal:
	          {
	            hostParent = parent.stateNode.containerInfo;
	            hostParentIsContainer = true;
	            break findParent;
	          }
	      }

	      parent = parent.return;
	    }

	    if (hostParent === null) {
	      throw new Error('Expected to find a host parent. This error is likely caused by ' + 'a bug in React. Please file an issue.');
	    }

	    commitDeletionEffectsOnFiber(root, returnFiber, deletedFiber);
	    hostParent = null;
	    hostParentIsContainer = false;
	  }

	  detachFiberMutation(deletedFiber);
	}

	function recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, parent) {
	  // TODO: Use a static flag to skip trees that don't have unmount effects
	  var child = parent.child;

	  while (child !== null) {
	    commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, child);
	    child = child.sibling;
	  }
	}

	function commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, deletedFiber) {
	  onCommitUnmount(deletedFiber); // The cases in this outer switch modify the stack before they traverse
	  // into their subtree. There are simpler cases in the inner switch
	  // that don't modify the stack.

	  switch (deletedFiber.tag) {
	    case HostComponent:
	      {
	        if (!offscreenSubtreeWasHidden) {
	          safelyDetachRef(deletedFiber, nearestMountedAncestor);
	        } // Intentional fallthrough to next branch

	      }
	    // eslint-disable-next-line-no-fallthrough

	    case HostText:
	      {
	        // We only need to remove the nearest host child. Set the host parent
	        // to `null` on the stack to indicate that nested children don't
	        // need to be removed.
	        {
	          var prevHostParent = hostParent;
	          var prevHostParentIsContainer = hostParentIsContainer;
	          hostParent = null;
	          recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
	          hostParent = prevHostParent;
	          hostParentIsContainer = prevHostParentIsContainer;

	          if (hostParent !== null) {
	            // Now that all the child effects have unmounted, we can remove the
	            // node from the tree.
	            if (hostParentIsContainer) {
	              removeChildFromContainer(hostParent, deletedFiber.stateNode);
	            } else {
	              removeChild(hostParent, deletedFiber.stateNode);
	            }
	          }
	        }

	        return;
	      }

	    case DehydratedFragment:
	      {
	        // Delete the dehydrated suspense boundary and all of its content.


	        {
	          if (hostParent !== null) {
	            if (hostParentIsContainer) {
	              clearSuspenseBoundaryFromContainer(hostParent, deletedFiber.stateNode);
	            } else {
	              clearSuspenseBoundary(hostParent, deletedFiber.stateNode);
	            }
	          }
	        }

	        return;
	      }

	    case HostPortal:
	      {
	        {
	          // When we go into a portal, it becomes the parent to remove from.
	          var _prevHostParent = hostParent;
	          var _prevHostParentIsContainer = hostParentIsContainer;
	          hostParent = deletedFiber.stateNode.containerInfo;
	          hostParentIsContainer = true;
	          recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
	          hostParent = _prevHostParent;
	          hostParentIsContainer = _prevHostParentIsContainer;
	        }

	        return;
	      }

	    case FunctionComponent:
	    case ForwardRef:
	    case MemoComponent:
	    case SimpleMemoComponent:
	      {
	        if (!offscreenSubtreeWasHidden) {
	          var updateQueue = deletedFiber.updateQueue;

	          if (updateQueue !== null) {
	            var lastEffect = updateQueue.lastEffect;

	            if (lastEffect !== null) {
	              var firstEffect = lastEffect.next;
	              var effect = firstEffect;

	              do {
	                var _effect = effect,
	                    destroy = _effect.destroy,
	                    tag = _effect.tag;

	                if (destroy !== undefined) {
	                  if ((tag & Insertion) !== NoFlags$1) {
	                    safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
	                  } else if ((tag & Layout) !== NoFlags$1) {
	                    {
	                      markComponentLayoutEffectUnmountStarted(deletedFiber);
	                    }

	                    if ( deletedFiber.mode & ProfileMode) {
	                      startLayoutEffectTimer();
	                      safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
	                      recordLayoutEffectDuration(deletedFiber);
	                    } else {
	                      safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
	                    }

	                    {
	                      markComponentLayoutEffectUnmountStopped();
	                    }
	                  }
	                }

	                effect = effect.next;
	              } while (effect !== firstEffect);
	            }
	          }
	        }

	        recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
	        return;
	      }

	    case ClassComponent:
	      {
	        if (!offscreenSubtreeWasHidden) {
	          safelyDetachRef(deletedFiber, nearestMountedAncestor);
	          var instance = deletedFiber.stateNode;

	          if (typeof instance.componentWillUnmount === 'function') {
	            safelyCallComponentWillUnmount(deletedFiber, nearestMountedAncestor, instance);
	          }
	        }

	        recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
	        return;
	      }

	    case ScopeComponent:
	      {

	        recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
	        return;
	      }

	    case OffscreenComponent:
	      {
	        if ( // TODO: Remove this dead flag
	         deletedFiber.mode & ConcurrentMode) {
	          // If this offscreen component is hidden, we already unmounted it. Before
	          // deleting the children, track that it's already unmounted so that we
	          // don't attempt to unmount the effects again.
	          // TODO: If the tree is hidden, in most cases we should be able to skip
	          // over the nested children entirely. An exception is we haven't yet found
	          // the topmost host node to delete, which we already track on the stack.
	          // But the other case is portals, which need to be detached no matter how
	          // deeply they are nested. We should use a subtree flag to track whether a
	          // subtree includes a nested portal.
	          var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
	          offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || deletedFiber.memoizedState !== null;
	          recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
	          offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
	        } else {
	          recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
	        }

	        break;
	      }

	    default:
	      {
	        recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
	        return;
	      }
	  }
	}

	function commitSuspenseCallback(finishedWork) {
	  // TODO: Move this to passive phase
	  finishedWork.memoizedState;
	}

	function commitSuspenseHydrationCallbacks(finishedRoot, finishedWork) {

	  var newState = finishedWork.memoizedState;

	  if (newState === null) {
	    var current = finishedWork.alternate;

	    if (current !== null) {
	      var prevState = current.memoizedState;

	      if (prevState !== null) {
	        var suspenseInstance = prevState.dehydrated;

	        if (suspenseInstance !== null) {
	          commitHydratedSuspenseInstance(suspenseInstance);
	        }
	      }
	    }
	  }
	}

	function attachSuspenseRetryListeners(finishedWork) {
	  // If this boundary just timed out, then it will have a set of wakeables.
	  // For each wakeable, attach a listener so that when it resolves, React
	  // attempts to re-render the boundary in the primary (pre-timeout) state.
	  var wakeables = finishedWork.updateQueue;

	  if (wakeables !== null) {
	    finishedWork.updateQueue = null;
	    var retryCache = finishedWork.stateNode;

	    if (retryCache === null) {
	      retryCache = finishedWork.stateNode = new PossiblyWeakSet();
	    }

	    wakeables.forEach(function (wakeable) {
	      // Memoize using the boundary fiber to prevent redundant listeners.
	      var retry = resolveRetryWakeable.bind(null, finishedWork, wakeable);

	      if (!retryCache.has(wakeable)) {
	        retryCache.add(wakeable);

	        {
	          if (isDevToolsPresent) {
	            if (inProgressLanes !== null && inProgressRoot !== null) {
	              // If we have pending work still, associate the original updaters with it.
	              restorePendingUpdaters(inProgressRoot, inProgressLanes);
	            } else {
	              throw Error('Expected finished root and lanes to be set. This is a bug in React.');
	            }
	          }
	        }

	        wakeable.then(retry, retry);
	      }
	    });
	  }
	} // This function detects when a Suspense boundary goes from visible to hidden.
	function commitMutationEffects(root, finishedWork, committedLanes) {
	  inProgressLanes = committedLanes;
	  inProgressRoot = root;
	  setCurrentFiber(finishedWork);
	  commitMutationEffectsOnFiber(finishedWork, root);
	  setCurrentFiber(finishedWork);
	  inProgressLanes = null;
	  inProgressRoot = null;
	}

	function recursivelyTraverseMutationEffects(root, parentFiber, lanes) {
	  // Deletions effects can be scheduled on any fiber type. They need to happen
	  // before the children effects hae fired.
	  var deletions = parentFiber.deletions;

	  if (deletions !== null) {
	    for (var i = 0; i < deletions.length; i++) {
	      var childToDelete = deletions[i];

	      try {
	        commitDeletionEffects(root, parentFiber, childToDelete);
	      } catch (error) {
	        captureCommitPhaseError(childToDelete, parentFiber, error);
	      }
	    }
	  }

	  var prevDebugFiber = getCurrentFiber();

	  if (parentFiber.subtreeFlags & MutationMask) {
	    var child = parentFiber.child;

	    while (child !== null) {
	      setCurrentFiber(child);
	      commitMutationEffectsOnFiber(child, root);
	      child = child.sibling;
	    }
	  }

	  setCurrentFiber(prevDebugFiber);
	}

	function commitMutationEffectsOnFiber(finishedWork, root, lanes) {
	  var current = finishedWork.alternate;
	  var flags = finishedWork.flags; // The effect flag should be checked *after* we refine the type of fiber,
	  // because the fiber tag is more specific. An exception is any flag related
	  // to reconcilation, because those can be set on all fiber types.

	  switch (finishedWork.tag) {
	    case FunctionComponent:
	    case ForwardRef:
	    case MemoComponent:
	    case SimpleMemoComponent:
	      {
	        recursivelyTraverseMutationEffects(root, finishedWork);
	        commitReconciliationEffects(finishedWork);

	        if (flags & Update) {
	          try {
	            commitHookEffectListUnmount(Insertion | HasEffect, finishedWork, finishedWork.return);
	            commitHookEffectListMount(Insertion | HasEffect, finishedWork);
	          } catch (error) {
	            captureCommitPhaseError(finishedWork, finishedWork.return, error);
	          } // Layout effects are destroyed during the mutation phase so that all
	          // destroy functions for all fibers are called before any create functions.
	          // This prevents sibling component effects from interfering with each other,
	          // e.g. a destroy function in one component should never override a ref set
	          // by a create function in another component during the same commit.


	          if ( finishedWork.mode & ProfileMode) {
	            try {
	              startLayoutEffectTimer();
	              commitHookEffectListUnmount(Layout | HasEffect, finishedWork, finishedWork.return);
	            } catch (error) {
	              captureCommitPhaseError(finishedWork, finishedWork.return, error);
	            }

	            recordLayoutEffectDuration(finishedWork);
	          } else {
	            try {
	              commitHookEffectListUnmount(Layout | HasEffect, finishedWork, finishedWork.return);
	            } catch (error) {
	              captureCommitPhaseError(finishedWork, finishedWork.return, error);
	            }
	          }
	        }

	        return;
	      }

	    case ClassComponent:
	      {
	        recursivelyTraverseMutationEffects(root, finishedWork);
	        commitReconciliationEffects(finishedWork);

	        if (flags & Ref) {
	          if (current !== null) {
	            safelyDetachRef(current, current.return);
	          }
	        }

	        return;
	      }

	    case HostComponent:
	      {
	        recursivelyTraverseMutationEffects(root, finishedWork);
	        commitReconciliationEffects(finishedWork);

	        if (flags & Ref) {
	          if (current !== null) {
	            safelyDetachRef(current, current.return);
	          }
	        }

	        {
	          // TODO: ContentReset gets cleared by the children during the commit
	          // phase. This is a refactor hazard because it means we must read
	          // flags the flags after `commitReconciliationEffects` has already run;
	          // the order matters. We should refactor so that ContentReset does not
	          // rely on mutating the flag during commit. Like by setting a flag
	          // during the render phase instead.
	          if (finishedWork.flags & ContentReset) {
	            var instance = finishedWork.stateNode;

	            try {
	              resetTextContent(instance);
	            } catch (error) {
	              captureCommitPhaseError(finishedWork, finishedWork.return, error);
	            }
	          }

	          if (flags & Update) {
	            var _instance4 = finishedWork.stateNode;

	            if (_instance4 != null) {
	              // Commit the work prepared earlier.
	              var newProps = finishedWork.memoizedProps; // For hydration we reuse the update path but we treat the oldProps
	              // as the newProps. The updatePayload will contain the real change in
	              // this case.

	              var oldProps = current !== null ? current.memoizedProps : newProps;
	              var type = finishedWork.type; // TODO: Type the updateQueue to be specific to host components.

	              var updatePayload = finishedWork.updateQueue;
	              finishedWork.updateQueue = null;

	              if (updatePayload !== null) {
	                try {
	                  commitUpdate(_instance4, updatePayload, type, oldProps, newProps, finishedWork);
	                } catch (error) {
	                  captureCommitPhaseError(finishedWork, finishedWork.return, error);
	                }
	              }
	            }
	          }
	        }

	        return;
	      }

	    case HostText:
	      {
	        recursivelyTraverseMutationEffects(root, finishedWork);
	        commitReconciliationEffects(finishedWork);

	        if (flags & Update) {
	          {
	            if (finishedWork.stateNode === null) {
	              throw new Error('This should have a text node initialized. This error is likely ' + 'caused by a bug in React. Please file an issue.');
	            }

	            var textInstance = finishedWork.stateNode;
	            var newText = finishedWork.memoizedProps; // For hydration we reuse the update path but we treat the oldProps
	            // as the newProps. The updatePayload will contain the real change in
	            // this case.

	            var oldText = current !== null ? current.memoizedProps : newText;

	            try {
	              commitTextUpdate(textInstance, oldText, newText);
	            } catch (error) {
	              captureCommitPhaseError(finishedWork, finishedWork.return, error);
	            }
	          }
	        }

	        return;
	      }

	    case HostRoot:
	      {
	        recursivelyTraverseMutationEffects(root, finishedWork);
	        commitReconciliationEffects(finishedWork);

	        if (flags & Update) {
	          {
	            if (current !== null) {
	              var prevRootState = current.memoizedState;

	              if (prevRootState.isDehydrated) {
	                try {
	                  commitHydratedContainer(root.containerInfo);
	                } catch (error) {
	                  captureCommitPhaseError(finishedWork, finishedWork.return, error);
	                }
	              }
	            }
	          }
	        }

	        return;
	      }

	    case HostPortal:
	      {
	        recursivelyTraverseMutationEffects(root, finishedWork);
	        commitReconciliationEffects(finishedWork);

	        return;
	      }

	    case SuspenseComponent:
	      {
	        recursivelyTraverseMutationEffects(root, finishedWork);
	        commitReconciliationEffects(finishedWork);
	        var offscreenFiber = finishedWork.child;

	        if (offscreenFiber.flags & Visibility) {
	          var offscreenInstance = offscreenFiber.stateNode;
	          var newState = offscreenFiber.memoizedState;
	          var isHidden = newState !== null; // Track the current state on the Offscreen instance so we can
	          // read it during an event

	          offscreenInstance.isHidden = isHidden;

	          if (isHidden) {
	            var wasHidden = offscreenFiber.alternate !== null && offscreenFiber.alternate.memoizedState !== null;

	            if (!wasHidden) {
	              // TODO: Move to passive phase
	              markCommitTimeOfFallback();
	            }
	          }
	        }

	        if (flags & Update) {
	          try {
	            commitSuspenseCallback(finishedWork);
	          } catch (error) {
	            captureCommitPhaseError(finishedWork, finishedWork.return, error);
	          }

	          attachSuspenseRetryListeners(finishedWork);
	        }

	        return;
	      }

	    case OffscreenComponent:
	      {
	        var _wasHidden = current !== null && current.memoizedState !== null;

	        if ( // TODO: Remove this dead flag
	         finishedWork.mode & ConcurrentMode) {
	          // Before committing the children, track on the stack whether this
	          // offscreen subtree was already hidden, so that we don't unmount the
	          // effects again.
	          var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
	          offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || _wasHidden;
	          recursivelyTraverseMutationEffects(root, finishedWork);
	          offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
	        } else {
	          recursivelyTraverseMutationEffects(root, finishedWork);
	        }

	        commitReconciliationEffects(finishedWork);

	        if (flags & Visibility) {
	          var _offscreenInstance = finishedWork.stateNode;
	          var _newState = finishedWork.memoizedState;

	          var _isHidden = _newState !== null;

	          var offscreenBoundary = finishedWork; // Track the current state on the Offscreen instance so we can
	          // read it during an event

	          _offscreenInstance.isHidden = _isHidden;

	          {
	            if (_isHidden) {
	              if (!_wasHidden) {
	                if ((offscreenBoundary.mode & ConcurrentMode) !== NoMode) {
	                  nextEffect = offscreenBoundary;
	                  var offscreenChild = offscreenBoundary.child;

	                  while (offscreenChild !== null) {
	                    nextEffect = offscreenChild;
	                    disappearLayoutEffects_begin(offscreenChild);
	                    offscreenChild = offscreenChild.sibling;
	                  }
	                }
	              }
	            }
	          }

	          {
	            // TODO: This needs to run whenever there's an insertion or update
	            // inside a hidden Offscreen tree.
	            hideOrUnhideAllChildren(offscreenBoundary, _isHidden);
	          }
	        }

	        return;
	      }

	    case SuspenseListComponent:
	      {
	        recursivelyTraverseMutationEffects(root, finishedWork);
	        commitReconciliationEffects(finishedWork);

	        if (flags & Update) {
	          attachSuspenseRetryListeners(finishedWork);
	        }

	        return;
	      }

	    case ScopeComponent:
	      {

	        return;
	      }

	    default:
	      {
	        recursivelyTraverseMutationEffects(root, finishedWork);
	        commitReconciliationEffects(finishedWork);
	        return;
	      }
	  }
	}

	function commitReconciliationEffects(finishedWork) {
	  // Placement effects (insertions, reorders) can be scheduled on any fiber
	  // type. They needs to happen after the children effects have fired, but
	  // before the effects on this fiber have fired.
	  var flags = finishedWork.flags;

	  if (flags & Placement) {
	    try {
	      commitPlacement(finishedWork);
	    } catch (error) {
	      captureCommitPhaseError(finishedWork, finishedWork.return, error);
	    } // Clear the "placement" from effect tag so that we know that this is
	    // inserted, before any life-cycles like componentDidMount gets called.
	    // TODO: findDOMNode doesn't rely on this any more but isMounted does
	    // and isMounted is deprecated anyway so we should be able to kill this.


	    finishedWork.flags &= ~Placement;
	  }

	  if (flags & Hydrating) {
	    finishedWork.flags &= ~Hydrating;
	  }
	}

	function commitLayoutEffects(finishedWork, root, committedLanes) {
	  inProgressLanes = committedLanes;
	  inProgressRoot = root;
	  nextEffect = finishedWork;
	  commitLayoutEffects_begin(finishedWork, root, committedLanes);
	  inProgressLanes = null;
	  inProgressRoot = null;
	}

	function commitLayoutEffects_begin(subtreeRoot, root, committedLanes) {
	  // Suspense layout effects semantics don't change for legacy roots.
	  var isModernRoot = (subtreeRoot.mode & ConcurrentMode) !== NoMode;

	  while (nextEffect !== null) {
	    var fiber = nextEffect;
	    var firstChild = fiber.child;

	    if ( fiber.tag === OffscreenComponent && isModernRoot) {
	      // Keep track of the current Offscreen stack's state.
	      var isHidden = fiber.memoizedState !== null;
	      var newOffscreenSubtreeIsHidden = isHidden || offscreenSubtreeIsHidden;

	      if (newOffscreenSubtreeIsHidden) {
	        // The Offscreen tree is hidden. Skip over its layout effects.
	        commitLayoutMountEffects_complete(subtreeRoot, root, committedLanes);
	        continue;
	      } else {
	        // TODO (Offscreen) Also check: subtreeFlags & LayoutMask
	        var current = fiber.alternate;
	        var wasHidden = current !== null && current.memoizedState !== null;
	        var newOffscreenSubtreeWasHidden = wasHidden || offscreenSubtreeWasHidden;
	        var prevOffscreenSubtreeIsHidden = offscreenSubtreeIsHidden;
	        var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden; // Traverse the Offscreen subtree with the current Offscreen as the root.

	        offscreenSubtreeIsHidden = newOffscreenSubtreeIsHidden;
	        offscreenSubtreeWasHidden = newOffscreenSubtreeWasHidden;

	        if (offscreenSubtreeWasHidden && !prevOffscreenSubtreeWasHidden) {
	          // This is the root of a reappearing boundary. Turn its layout effects
	          // back on.
	          nextEffect = fiber;
	          reappearLayoutEffects_begin(fiber);
	        }

	        var child = firstChild;

	        while (child !== null) {
	          nextEffect = child;
	          commitLayoutEffects_begin(child, // New root; bubble back up to here and stop.
	          root, committedLanes);
	          child = child.sibling;
	        } // Restore Offscreen state and resume in our-progress traversal.


	        nextEffect = fiber;
	        offscreenSubtreeIsHidden = prevOffscreenSubtreeIsHidden;
	        offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
	        commitLayoutMountEffects_complete(subtreeRoot, root, committedLanes);
	        continue;
	      }
	    }

	    if ((fiber.subtreeFlags & LayoutMask) !== NoFlags && firstChild !== null) {
	      firstChild.return = fiber;
	      nextEffect = firstChild;
	    } else {
	      commitLayoutMountEffects_complete(subtreeRoot, root, committedLanes);
	    }
	  }
	}

	function commitLayoutMountEffects_complete(subtreeRoot, root, committedLanes) {
	  while (nextEffect !== null) {
	    var fiber = nextEffect;

	    if ((fiber.flags & LayoutMask) !== NoFlags) {
	      var current = fiber.alternate;
	      setCurrentFiber(fiber);

	      try {
	        commitLayoutEffectOnFiber(root, current, fiber, committedLanes);
	      } catch (error) {
	        captureCommitPhaseError(fiber, fiber.return, error);
	      }

	      resetCurrentFiber();
	    }

	    if (fiber === subtreeRoot) {
	      nextEffect = null;
	      return;
	    }

	    var sibling = fiber.sibling;

	    if (sibling !== null) {
	      sibling.return = fiber.return;
	      nextEffect = sibling;
	      return;
	    }

	    nextEffect = fiber.return;
	  }
	}

	function disappearLayoutEffects_begin(subtreeRoot) {
	  while (nextEffect !== null) {
	    var fiber = nextEffect;
	    var firstChild = fiber.child; // TODO (Offscreen) Check: flags & (RefStatic | LayoutStatic)

	    switch (fiber.tag) {
	      case FunctionComponent:
	      case ForwardRef:
	      case MemoComponent:
	      case SimpleMemoComponent:
	        {
	          if ( fiber.mode & ProfileMode) {
	            try {
	              startLayoutEffectTimer();
	              commitHookEffectListUnmount(Layout, fiber, fiber.return);
	            } finally {
	              recordLayoutEffectDuration(fiber);
	            }
	          } else {
	            commitHookEffectListUnmount(Layout, fiber, fiber.return);
	          }

	          break;
	        }

	      case ClassComponent:
	        {
	          // TODO (Offscreen) Check: flags & RefStatic
	          safelyDetachRef(fiber, fiber.return);
	          var instance = fiber.stateNode;

	          if (typeof instance.componentWillUnmount === 'function') {
	            safelyCallComponentWillUnmount(fiber, fiber.return, instance);
	          }

	          break;
	        }

	      case HostComponent:
	        {
	          safelyDetachRef(fiber, fiber.return);
	          break;
	        }

	      case OffscreenComponent:
	        {
	          // Check if this is a
	          var isHidden = fiber.memoizedState !== null;

	          if (isHidden) {
	            // Nested Offscreen tree is already hidden. Don't disappear
	            // its effects.
	            disappearLayoutEffects_complete(subtreeRoot);
	            continue;
	          }

	          break;
	        }
	    } // TODO (Offscreen) Check: subtreeFlags & LayoutStatic


	    if (firstChild !== null) {
	      firstChild.return = fiber;
	      nextEffect = firstChild;
	    } else {
	      disappearLayoutEffects_complete(subtreeRoot);
	    }
	  }
	}

	function disappearLayoutEffects_complete(subtreeRoot) {
	  while (nextEffect !== null) {
	    var fiber = nextEffect;

	    if (fiber === subtreeRoot) {
	      nextEffect = null;
	      return;
	    }

	    var sibling = fiber.sibling;

	    if (sibling !== null) {
	      sibling.return = fiber.return;
	      nextEffect = sibling;
	      return;
	    }

	    nextEffect = fiber.return;
	  }
	}

	function reappearLayoutEffects_begin(subtreeRoot) {
	  while (nextEffect !== null) {
	    var fiber = nextEffect;
	    var firstChild = fiber.child;

	    if (fiber.tag === OffscreenComponent) {
	      var isHidden = fiber.memoizedState !== null;

	      if (isHidden) {
	        // Nested Offscreen tree is still hidden. Don't re-appear its effects.
	        reappearLayoutEffects_complete(subtreeRoot);
	        continue;
	      }
	    } // TODO (Offscreen) Check: subtreeFlags & LayoutStatic


	    if (firstChild !== null) {
	      // This node may have been reused from a previous render, so we can't
	      // assume its return pointer is correct.
	      firstChild.return = fiber;
	      nextEffect = firstChild;
	    } else {
	      reappearLayoutEffects_complete(subtreeRoot);
	    }
	  }
	}

	function reappearLayoutEffects_complete(subtreeRoot) {
	  while (nextEffect !== null) {
	    var fiber = nextEffect; // TODO (Offscreen) Check: flags & LayoutStatic

	    setCurrentFiber(fiber);

	    try {
	      reappearLayoutEffectsOnFiber(fiber);
	    } catch (error) {
	      captureCommitPhaseError(fiber, fiber.return, error);
	    }

	    resetCurrentFiber();

	    if (fiber === subtreeRoot) {
	      nextEffect = null;
	      return;
	    }

	    var sibling = fiber.sibling;

	    if (sibling !== null) {
	      // This node may have been reused from a previous render, so we can't
	      // assume its return pointer is correct.
	      sibling.return = fiber.return;
	      nextEffect = sibling;
	      return;
	    }

	    nextEffect = fiber.return;
	  }
	}

	function commitPassiveMountEffects(root, finishedWork, committedLanes, committedTransitions) {
	  nextEffect = finishedWork;
	  commitPassiveMountEffects_begin(finishedWork, root, committedLanes, committedTransitions);
	}

	function commitPassiveMountEffects_begin(subtreeRoot, root, committedLanes, committedTransitions) {
	  while (nextEffect !== null) {
	    var fiber = nextEffect;
	    var firstChild = fiber.child;

	    if ((fiber.subtreeFlags & PassiveMask) !== NoFlags && firstChild !== null) {
	      firstChild.return = fiber;
	      nextEffect = firstChild;
	    } else {
	      commitPassiveMountEffects_complete(subtreeRoot, root, committedLanes, committedTransitions);
	    }
	  }
	}

	function commitPassiveMountEffects_complete(subtreeRoot, root, committedLanes, committedTransitions) {
	  while (nextEffect !== null) {
	    var fiber = nextEffect;

	    if ((fiber.flags & Passive) !== NoFlags) {
	      setCurrentFiber(fiber);

	      try {
	        commitPassiveMountOnFiber(root, fiber, committedLanes, committedTransitions);
	      } catch (error) {
	        captureCommitPhaseError(fiber, fiber.return, error);
	      }

	      resetCurrentFiber();
	    }

	    if (fiber === subtreeRoot) {
	      nextEffect = null;
	      return;
	    }

	    var sibling = fiber.sibling;

	    if (sibling !== null) {
	      sibling.return = fiber.return;
	      nextEffect = sibling;
	      return;
	    }

	    nextEffect = fiber.return;
	  }
	}

	function commitPassiveMountOnFiber(finishedRoot, finishedWork, committedLanes, committedTransitions) {
	  switch (finishedWork.tag) {
	    case FunctionComponent:
	    case ForwardRef:
	    case SimpleMemoComponent:
	      {
	        if ( finishedWork.mode & ProfileMode) {
	          startPassiveEffectTimer();

	          try {
	            commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);
	          } finally {
	            recordPassiveEffectDuration(finishedWork);
	          }
	        } else {
	          commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);
	        }

	        break;
	      }
	  }
	}

	function commitPassiveUnmountEffects(firstChild) {
	  nextEffect = firstChild;
	  commitPassiveUnmountEffects_begin();
	}

	function commitPassiveUnmountEffects_begin() {
	  while (nextEffect !== null) {
	    var fiber = nextEffect;
	    var child = fiber.child;

	    if ((nextEffect.flags & ChildDeletion) !== NoFlags) {
	      var deletions = fiber.deletions;

	      if (deletions !== null) {
	        for (var i = 0; i < deletions.length; i++) {
	          var fiberToDelete = deletions[i];
	          nextEffect = fiberToDelete;
	          commitPassiveUnmountEffectsInsideOfDeletedTree_begin(fiberToDelete, fiber);
	        }

	        {
	          // A fiber was deleted from this parent fiber, but it's still part of
	          // the previous (alternate) parent fiber's list of children. Because
	          // children are a linked list, an earlier sibling that's still alive
	          // will be connected to the deleted fiber via its `alternate`:
	          //
	          //   live fiber
	          //   --alternate--> previous live fiber
	          //   --sibling--> deleted fiber
	          //
	          // We can't disconnect `alternate` on nodes that haven't been deleted
	          // yet, but we can disconnect the `sibling` and `child` pointers.
	          var previousFiber = fiber.alternate;

	          if (previousFiber !== null) {
	            var detachedChild = previousFiber.child;

	            if (detachedChild !== null) {
	              previousFiber.child = null;

	              do {
	                var detachedSibling = detachedChild.sibling;
	                detachedChild.sibling = null;
	                detachedChild = detachedSibling;
	              } while (detachedChild !== null);
	            }
	          }
	        }

	        nextEffect = fiber;
	      }
	    }

	    if ((fiber.subtreeFlags & PassiveMask) !== NoFlags && child !== null) {
	      child.return = fiber;
	      nextEffect = child;
	    } else {
	      commitPassiveUnmountEffects_complete();
	    }
	  }
	}

	function commitPassiveUnmountEffects_complete() {
	  while (nextEffect !== null) {
	    var fiber = nextEffect;

	    if ((fiber.flags & Passive) !== NoFlags) {
	      setCurrentFiber(fiber);
	      commitPassiveUnmountOnFiber(fiber);
	      resetCurrentFiber();
	    }

	    var sibling = fiber.sibling;

	    if (sibling !== null) {
	      sibling.return = fiber.return;
	      nextEffect = sibling;
	      return;
	    }

	    nextEffect = fiber.return;
	  }
	}

	function commitPassiveUnmountOnFiber(finishedWork) {
	  switch (finishedWork.tag) {
	    case FunctionComponent:
	    case ForwardRef:
	    case SimpleMemoComponent:
	      {
	        if ( finishedWork.mode & ProfileMode) {
	          startPassiveEffectTimer();
	          commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork, finishedWork.return);
	          recordPassiveEffectDuration(finishedWork);
	        } else {
	          commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork, finishedWork.return);
	        }

	        break;
	      }
	  }
	}

	function commitPassiveUnmountEffectsInsideOfDeletedTree_begin(deletedSubtreeRoot, nearestMountedAncestor) {
	  while (nextEffect !== null) {
	    var fiber = nextEffect; // Deletion effects fire in parent -> child order
	    // TODO: Check if fiber has a PassiveStatic flag

	    setCurrentFiber(fiber);
	    commitPassiveUnmountInsideDeletedTreeOnFiber(fiber, nearestMountedAncestor);
	    resetCurrentFiber();
	    var child = fiber.child; // TODO: Only traverse subtree if it has a PassiveStatic flag. (But, if we
	    // do this, still need to handle `deletedTreeCleanUpLevel` correctly.)

	    if (child !== null) {
	      child.return = fiber;
	      nextEffect = child;
	    } else {
	      commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot);
	    }
	  }
	}

	function commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot) {
	  while (nextEffect !== null) {
	    var fiber = nextEffect;
	    var sibling = fiber.sibling;
	    var returnFiber = fiber.return;

	    {
	      // Recursively traverse the entire deleted tree and clean up fiber fields.
	      // This is more aggressive than ideal, and the long term goal is to only
	      // have to detach the deleted tree at the root.
	      detachFiberAfterEffects(fiber);

	      if (fiber === deletedSubtreeRoot) {
	        nextEffect = null;
	        return;
	      }
	    }

	    if (sibling !== null) {
	      sibling.return = returnFiber;
	      nextEffect = sibling;
	      return;
	    }

	    nextEffect = returnFiber;
	  }
	}

	function commitPassiveUnmountInsideDeletedTreeOnFiber(current, nearestMountedAncestor) {
	  switch (current.tag) {
	    case FunctionComponent:
	    case ForwardRef:
	    case SimpleMemoComponent:
	      {
	        if ( current.mode & ProfileMode) {
	          startPassiveEffectTimer();
	          commitHookEffectListUnmount(Passive$1, current, nearestMountedAncestor);
	          recordPassiveEffectDuration(current);
	        } else {
	          commitHookEffectListUnmount(Passive$1, current, nearestMountedAncestor);
	        }

	        break;
	      }
	  }
	} // TODO: Reuse reappearLayoutEffects traversal here?


	function invokeLayoutEffectMountInDEV(fiber) {
	  {
	    // We don't need to re-check StrictEffectsMode here.
	    // This function is only called if that check has already passed.
	    switch (fiber.tag) {
	      case FunctionComponent:
	      case ForwardRef:
	      case SimpleMemoComponent:
	        {
	          try {
	            commitHookEffectListMount(Layout | HasEffect, fiber);
	          } catch (error) {
	            captureCommitPhaseError(fiber, fiber.return, error);
	          }

	          break;
	        }

	      case ClassComponent:
	        {
	          var instance = fiber.stateNode;

	          try {
	            instance.componentDidMount();
	          } catch (error) {
	            captureCommitPhaseError(fiber, fiber.return, error);
	          }

	          break;
	        }
	    }
	  }
	}

	function invokePassiveEffectMountInDEV(fiber) {
	  {
	    // We don't need to re-check StrictEffectsMode here.
	    // This function is only called if that check has already passed.
	    switch (fiber.tag) {
	      case FunctionComponent:
	      case ForwardRef:
	      case SimpleMemoComponent:
	        {
	          try {
	            commitHookEffectListMount(Passive$1 | HasEffect, fiber);
	          } catch (error) {
	            captureCommitPhaseError(fiber, fiber.return, error);
	          }

	          break;
	        }
	    }
	  }
	}

	function invokeLayoutEffectUnmountInDEV(fiber) {
	  {
	    // We don't need to re-check StrictEffectsMode here.
	    // This function is only called if that check has already passed.
	    switch (fiber.tag) {
	      case FunctionComponent:
	      case ForwardRef:
	      case SimpleMemoComponent:
	        {
	          try {
	            commitHookEffectListUnmount(Layout | HasEffect, fiber, fiber.return);
	          } catch (error) {
	            captureCommitPhaseError(fiber, fiber.return, error);
	          }

	          break;
	        }

	      case ClassComponent:
	        {
	          var instance = fiber.stateNode;

	          if (typeof instance.componentWillUnmount === 'function') {
	            safelyCallComponentWillUnmount(fiber, fiber.return, instance);
	          }

	          break;
	        }
	    }
	  }
	}

	function invokePassiveEffectUnmountInDEV(fiber) {
	  {
	    // We don't need to re-check StrictEffectsMode here.
	    // This function is only called if that check has already passed.
	    switch (fiber.tag) {
	      case FunctionComponent:
	      case ForwardRef:
	      case SimpleMemoComponent:
	        {
	          try {
	            commitHookEffectListUnmount(Passive$1 | HasEffect, fiber, fiber.return);
	          } catch (error) {
	            captureCommitPhaseError(fiber, fiber.return, error);
	          }
	        }
	    }
	  }
	}

	if (typeof Symbol === 'function' && Symbol.for) {
	  var symbolFor = Symbol.for;
	  symbolFor('selector.component');
	  symbolFor('selector.has_pseudo_class');
	  symbolFor('selector.role');
	  symbolFor('selector.test_id');
	  symbolFor('selector.text');
	}
	var commitHooks = [];
	function onCommitRoot$1() {
	  {
	    commitHooks.forEach(function (commitHook) {
	      return commitHook();
	    });
	  }
	}

	var ReactCurrentActQueue = ReactSharedInternals.ReactCurrentActQueue;
	function isLegacyActEnvironment(fiber) {
	  {
	    // Legacy mode. We preserve the behavior of React 17's act. It assumes an
	    // act environment whenever `jest` is defined, but you can still turn off
	    // spurious warnings by setting IS_REACT_ACT_ENVIRONMENT explicitly
	    // to false.
	    var isReactActEnvironmentGlobal = // $FlowExpectedError – Flow doesn't know about IS_REACT_ACT_ENVIRONMENT global
	    typeof IS_REACT_ACT_ENVIRONMENT !== 'undefined' ? IS_REACT_ACT_ENVIRONMENT : undefined; // $FlowExpectedError - Flow doesn't know about jest

	    var jestIsDefined = typeof jest !== 'undefined';
	    return  jestIsDefined && isReactActEnvironmentGlobal !== false;
	  }
	}
	function isConcurrentActEnvironment() {
	  {
	    var isReactActEnvironmentGlobal = // $FlowExpectedError – Flow doesn't know about IS_REACT_ACT_ENVIRONMENT global
	    typeof IS_REACT_ACT_ENVIRONMENT !== 'undefined' ? IS_REACT_ACT_ENVIRONMENT : undefined;

	    if (!isReactActEnvironmentGlobal && ReactCurrentActQueue.current !== null) {
	      // TODO: Include link to relevant documentation page.
	      error('The current testing environment is not configured to support ' + 'act(...)');
	    }

	    return isReactActEnvironmentGlobal;
	  }
	}

	var ceil = Math.ceil;
	var ReactCurrentDispatcher$2 = ReactSharedInternals.ReactCurrentDispatcher,
	    ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner,
	    ReactCurrentBatchConfig$3 = ReactSharedInternals.ReactCurrentBatchConfig,
	    ReactCurrentActQueue$1 = ReactSharedInternals.ReactCurrentActQueue;
	var NoContext =
	/*             */
	0;
	var BatchedContext =
	/*               */
	1;
	var RenderContext =
	/*                */
	2;
	var CommitContext =
	/*                */
	4;
	var RootInProgress = 0;
	var RootFatalErrored = 1;
	var RootErrored = 2;
	var RootSuspended = 3;
	var RootSuspendedWithDelay = 4;
	var RootCompleted = 5;
	var RootDidNotComplete = 6; // Describes where we are in the React execution stack

	var executionContext = NoContext; // The root we're working on

	var workInProgressRoot = null; // The fiber we're working on

	var workInProgress = null; // The lanes we're rendering

	var workInProgressRootRenderLanes = NoLanes; // Stack that allows components to change the render lanes for its subtree
	// This is a superset of the lanes we started working on at the root. The only
	// case where it's different from `workInProgressRootRenderLanes` is when we
	// enter a subtree that is hidden and needs to be unhidden: Suspense and
	// Offscreen component.
	//
	// Most things in the work loop should deal with workInProgressRootRenderLanes.
	// Most things in begin/complete phases should deal with subtreeRenderLanes.

	var subtreeRenderLanes = NoLanes;
	var subtreeRenderLanesCursor = createCursor(NoLanes); // Whether to root completed, errored, suspended, etc.

	var workInProgressRootExitStatus = RootInProgress; // A fatal error, if one is thrown

	var workInProgressRootFatalError = null; // "Included" lanes refer to lanes that were worked on during this render. It's
	// includes unprocessed updates, not work in bailed out children.

	var workInProgressRootSkippedLanes = NoLanes; // Lanes that were updated (in an interleaved event) during this render.

	var workInProgressRootInterleavedUpdatedLanes = NoLanes; // Lanes that were updated during the render phase (*not* an interleaved event).

	var workInProgressRootPingedLanes = NoLanes; // Errors that are thrown during the render phase.

	var workInProgressRootConcurrentErrors = null; // These are errors that we recovered from without surfacing them to the UI.
	// We will log them once the tree commits.

	var workInProgressRootRecoverableErrors = null; // The most recent time we committed a fallback. This lets us ensure a train
	// model where we don't commit new loading states in too quick succession.

	var globalMostRecentFallbackTime = 0;
	var FALLBACK_THROTTLE_MS = 500; // The absolute time for when we should start giving up on rendering
	// more and prefer CPU suspense heuristics instead.

	var workInProgressRootRenderTargetTime = Infinity; // How long a render is supposed to take before we start following CPU
	// suspense heuristics and opt out of rendering more content.

	var RENDER_TIMEOUT_MS = 500;
	var workInProgressTransitions = null;

	function resetRenderTimer() {
	  workInProgressRootRenderTargetTime = now() + RENDER_TIMEOUT_MS;
	}

	function getRenderTargetTime() {
	  return workInProgressRootRenderTargetTime;
	}
	var hasUncaughtError = false;
	var firstUncaughtError = null;
	var legacyErrorBoundariesThatAlreadyFailed = null; // Only used when enableProfilerNestedUpdateScheduledHook is true;
	var rootDoesHavePassiveEffects = false;
	var rootWithPendingPassiveEffects = null;
	var pendingPassiveEffectsLanes = NoLanes;
	var pendingPassiveProfilerEffects = [];
	var pendingPassiveTransitions = null; // Use these to prevent an infinite loop of nested updates

	var NESTED_UPDATE_LIMIT = 50;
	var nestedUpdateCount = 0;
	var rootWithNestedUpdates = null;
	var isFlushingPassiveEffects = false;
	var didScheduleUpdateDuringPassiveEffects = false;
	var NESTED_PASSIVE_UPDATE_LIMIT = 50;
	var nestedPassiveUpdateCount = 0;
	var rootWithPassiveNestedUpdates = null; // If two updates are scheduled within the same event, we should treat their
	// event times as simultaneous, even if the actual clock time has advanced
	// between the first and second call.

	var currentEventTime = NoTimestamp;
	var currentEventTransitionLane = NoLanes;
	var isRunningInsertionEffect = false;
	function getWorkInProgressRoot() {
	  return workInProgressRoot;
	}
	function requestEventTime() {
	  if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
	    // We're inside React, so it's fine to read the actual time.
	    return now();
	  } // We're not inside React, so we may be in the middle of a browser event.


	  if (currentEventTime !== NoTimestamp) {
	    // Use the same start time for all updates until we enter React again.
	    return currentEventTime;
	  } // This is the first update since React yielded. Compute a new start time.


	  currentEventTime = now();
	  return currentEventTime;
	}
	function requestUpdateLane(fiber) {
	  // Special cases
	  var mode = fiber.mode;

	  if ((mode & ConcurrentMode) === NoMode) {
	    return SyncLane;
	  } else if ( (executionContext & RenderContext) !== NoContext && workInProgressRootRenderLanes !== NoLanes) {
	    // This is a render phase update. These are not officially supported. The
	    // old behavior is to give this the same "thread" (lanes) as
	    // whatever is currently rendering. So if you call `setState` on a component
	    // that happens later in the same render, it will flush. Ideally, we want to
	    // remove the special case and treat them as if they came from an
	    // interleaved event. Regardless, this pattern is not officially supported.
	    // This behavior is only a fallback. The flag only exists until we can roll
	    // out the setState warning, since existing code might accidentally rely on
	    // the current behavior.
	    return pickArbitraryLane(workInProgressRootRenderLanes);
	  }

	  var isTransition = requestCurrentTransition() !== NoTransition;

	  if (isTransition) {
	    if ( ReactCurrentBatchConfig$3.transition !== null) {
	      var transition = ReactCurrentBatchConfig$3.transition;

	      if (!transition._updatedFibers) {
	        transition._updatedFibers = new Set();
	      }

	      transition._updatedFibers.add(fiber);
	    } // The algorithm for assigning an update to a lane should be stable for all
	    // updates at the same priority within the same event. To do this, the
	    // inputs to the algorithm must be the same.
	    //
	    // The trick we use is to cache the first of each of these inputs within an
	    // event. Then reset the cached values once we can be sure the event is
	    // over. Our heuristic for that is whenever we enter a concurrent work loop.


	    if (currentEventTransitionLane === NoLane) {
	      // All transitions within the same event are assigned the same lane.
	      currentEventTransitionLane = claimNextTransitionLane();
	    }

	    return currentEventTransitionLane;
	  } // Updates originating inside certain React methods, like flushSync, have
	  // their priority set by tracking it with a context variable.
	  //
	  // The opaque type returned by the host config is internally a lane, so we can
	  // use that directly.
	  // TODO: Move this type conversion to the event priority module.


	  var updateLane = getCurrentUpdatePriority();

	  if (updateLane !== NoLane) {
	    return updateLane;
	  } // This update originated outside React. Ask the host environment for an
	  // appropriate priority, based on the type of event.
	  //
	  // The opaque type returned by the host config is internally a lane, so we can
	  // use that directly.
	  // TODO: Move this type conversion to the event priority module.


	  var eventLane = getCurrentEventPriority();
	  return eventLane;
	}

	function requestRetryLane(fiber) {
	  // This is a fork of `requestUpdateLane` designed specifically for Suspense
	  // "retries" — a special update that attempts to flip a Suspense boundary
	  // from its placeholder state to its primary/resolved state.
	  // Special cases
	  var mode = fiber.mode;

	  if ((mode & ConcurrentMode) === NoMode) {
	    return SyncLane;
	  }

	  return claimNextRetryLane();
	}

	function scheduleUpdateOnFiber(root, fiber, lane, eventTime) {
	  checkForNestedUpdates();

	  {
	    if (isRunningInsertionEffect) {
	      error('useInsertionEffect must not schedule updates.');
	    }
	  }

	  {
	    if (isFlushingPassiveEffects) {
	      didScheduleUpdateDuringPassiveEffects = true;
	    }
	  } // Mark that the root has a pending update.


	  markRootUpdated(root, lane, eventTime);

	  if ((executionContext & RenderContext) !== NoLanes && root === workInProgressRoot) {
	    // This update was dispatched during the render phase. This is a mistake
	    // if the update originates from user space (with the exception of local
	    // hook updates, which are handled differently and don't reach this
	    // function), but there are some internal React features that use this as
	    // an implementation detail, like selective hydration.
	    warnAboutRenderPhaseUpdatesInDEV(fiber); // Track lanes that were updated during the render phase
	  } else {
	    // This is a normal update, scheduled from outside the render phase. For
	    // example, during an input event.
	    {
	      if (isDevToolsPresent) {
	        addFiberToLanesMap(root, fiber, lane);
	      }
	    }

	    warnIfUpdatesNotWrappedWithActDEV(fiber);

	    if (root === workInProgressRoot) {
	      // Received an update to a tree that's in the middle of rendering. Mark
	      // that there was an interleaved update work on this root. Unless the
	      // `deferRenderPhaseUpdateToNextBatch` flag is off and this is a render
	      // phase update. In that case, we don't treat render phase updates as if
	      // they were interleaved, for backwards compat reasons.
	      if ( (executionContext & RenderContext) === NoContext) {
	        workInProgressRootInterleavedUpdatedLanes = mergeLanes(workInProgressRootInterleavedUpdatedLanes, lane);
	      }

	      if (workInProgressRootExitStatus === RootSuspendedWithDelay) {
	        // The root already suspended with a delay, which means this render
	        // definitely won't finish. Since we have a new update, let's mark it as
	        // suspended now, right before marking the incoming update. This has the
	        // effect of interrupting the current render and switching to the update.
	        // TODO: Make sure this doesn't override pings that happen while we've
	        // already started rendering.
	        markRootSuspended$1(root, workInProgressRootRenderLanes);
	      }
	    }

	    ensureRootIsScheduled(root, eventTime);

	    if (lane === SyncLane && executionContext === NoContext && (fiber.mode & ConcurrentMode) === NoMode && // Treat `act` as if it's inside `batchedUpdates`, even in legacy mode.
	    !( ReactCurrentActQueue$1.isBatchingLegacy)) {
	      // Flush the synchronous work now, unless we're already working or inside
	      // a batch. This is intentionally inside scheduleUpdateOnFiber instead of
	      // scheduleCallbackForFiber to preserve the ability to schedule a callback
	      // without immediately flushing it. We only do this for user-initiated
	      // updates, to preserve historical behavior of legacy mode.
	      resetRenderTimer();
	      flushSyncCallbacksOnlyInLegacyMode();
	    }
	  }
	}
	function scheduleInitialHydrationOnRoot(root, lane, eventTime) {
	  // This is a special fork of scheduleUpdateOnFiber that is only used to
	  // schedule the initial hydration of a root that has just been created. Most
	  // of the stuff in scheduleUpdateOnFiber can be skipped.
	  //
	  // The main reason for this separate path, though, is to distinguish the
	  // initial children from subsequent updates. In fully client-rendered roots
	  // (createRoot instead of hydrateRoot), all top-level renders are modeled as
	  // updates, but hydration roots are special because the initial render must
	  // match what was rendered on the server.
	  var current = root.current;
	  current.lanes = lane;
	  markRootUpdated(root, lane, eventTime);
	  ensureRootIsScheduled(root, eventTime);
	}
	function isUnsafeClassRenderPhaseUpdate(fiber) {
	  // Check if this is a render phase update. Only called by class components,
	  // which special (deprecated) behavior for UNSAFE_componentWillReceive props.
	  return (// TODO: Remove outdated deferRenderPhaseUpdateToNextBatch experiment. We
	    // decided not to enable it.
	     (executionContext & RenderContext) !== NoContext
	  );
	} // Use this function to schedule a task for a root. There's only one task per
	// root; if a task was already scheduled, we'll check to make sure the priority
	// of the existing task is the same as the priority of the next level that the
	// root has work on. This function is called on every update, and right before
	// exiting a task.

	function ensureRootIsScheduled(root, currentTime) {
	  var existingCallbackNode = root.callbackNode; // Check if any lanes are being starved by other work. If so, mark them as
	  // expired so we know to work on those next.

	  markStarvedLanesAsExpired(root, currentTime); // Determine the next lanes to work on, and their priority.

	  var nextLanes = getNextLanes(root, root === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);

	  if (nextLanes === NoLanes) {
	    // Special case: There's nothing to work on.
	    if (existingCallbackNode !== null) {
	      cancelCallback$1(existingCallbackNode);
	    }

	    root.callbackNode = null;
	    root.callbackPriority = NoLane;
	    return;
	  } // We use the highest priority lane to represent the priority of the callback.


	  var newCallbackPriority = getHighestPriorityLane(nextLanes); // Check if there's an existing task. We may be able to reuse it.

	  var existingCallbackPriority = root.callbackPriority;

	  if (existingCallbackPriority === newCallbackPriority && // Special case related to `act`. If the currently scheduled task is a
	  // Scheduler task, rather than an `act` task, cancel it and re-scheduled
	  // on the `act` queue.
	  !( ReactCurrentActQueue$1.current !== null && existingCallbackNode !== fakeActCallbackNode)) {
	    {
	      // If we're going to re-use an existing task, it needs to exist.
	      // Assume that discrete update microtasks are non-cancellable and null.
	      // TODO: Temporary until we confirm this warning is not fired.
	      if (existingCallbackNode == null && existingCallbackPriority !== SyncLane) {
	        error('Expected scheduled callback to exist. This error is likely caused by a bug in React. Please file an issue.');
	      }
	    } // The priority hasn't changed. We can reuse the existing task. Exit.


	    return;
	  }

	  if (existingCallbackNode != null) {
	    // Cancel the existing callback. We'll schedule a new one below.
	    cancelCallback$1(existingCallbackNode);
	  } // Schedule a new callback.


	  var newCallbackNode;

	  if (newCallbackPriority === SyncLane) {
	    // Special case: Sync React callbacks are scheduled on a special
	    // internal queue
	    if (root.tag === LegacyRoot) {
	      if ( ReactCurrentActQueue$1.isBatchingLegacy !== null) {
	        ReactCurrentActQueue$1.didScheduleLegacyUpdate = true;
	      }

	      scheduleLegacySyncCallback(performSyncWorkOnRoot.bind(null, root));
	    } else {
	      scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root));
	    }

	    {
	      // Flush the queue in a microtask.
	      if ( ReactCurrentActQueue$1.current !== null) {
	        // Inside `act`, use our internal `act` queue so that these get flushed
	        // at the end of the current scope even when using the sync version
	        // of `act`.
	        ReactCurrentActQueue$1.current.push(flushSyncCallbacks);
	      } else {
	        scheduleMicrotask(function () {
	          // In Safari, appending an iframe forces microtasks to run.
	          // https://github.com/facebook/react/issues/22459
	          // We don't support running callbacks in the middle of render
	          // or commit so we need to check against that.
	          if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
	            // Note that this would still prematurely flush the callbacks
	            // if this happens outside render or commit phase (e.g. in an event).
	            flushSyncCallbacks();
	          }
	        });
	      }
	    }

	    newCallbackNode = null;
	  } else {
	    var schedulerPriorityLevel;

	    switch (lanesToEventPriority(nextLanes)) {
	      case DiscreteEventPriority:
	        schedulerPriorityLevel = ImmediatePriority;
	        break;

	      case ContinuousEventPriority:
	        schedulerPriorityLevel = UserBlockingPriority;
	        break;

	      case DefaultEventPriority:
	        schedulerPriorityLevel = NormalPriority;
	        break;

	      case IdleEventPriority:
	        schedulerPriorityLevel = IdlePriority;
	        break;

	      default:
	        schedulerPriorityLevel = NormalPriority;
	        break;
	    }

	    newCallbackNode = scheduleCallback$1(schedulerPriorityLevel, performConcurrentWorkOnRoot.bind(null, root));
	  }

	  root.callbackPriority = newCallbackPriority;
	  root.callbackNode = newCallbackNode;
	} // This is the entry point for every concurrent task, i.e. anything that
	// goes through Scheduler.


	function performConcurrentWorkOnRoot(root, didTimeout) {
	  {
	    resetNestedUpdateFlag();
	  } // Since we know we're in a React event, we can clear the current
	  // event time. The next update will compute a new event time.


	  currentEventTime = NoTimestamp;
	  currentEventTransitionLane = NoLanes;

	  if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
	    throw new Error('Should not already be working.');
	  } // Flush any pending passive effects before deciding which lanes to work on,
	  // in case they schedule additional work.


	  var originalCallbackNode = root.callbackNode;
	  var didFlushPassiveEffects = flushPassiveEffects();

	  if (didFlushPassiveEffects) {
	    // Something in the passive effect phase may have canceled the current task.
	    // Check if the task node for this root was changed.
	    if (root.callbackNode !== originalCallbackNode) {
	      // The current task was canceled. Exit. We don't need to call
	      // `ensureRootIsScheduled` because the check above implies either that
	      // there's a new task, or that there's no remaining work on this root.
	      return null;
	    }
	  } // Determine the next lanes to work on, using the fields stored
	  // on the root.


	  var lanes = getNextLanes(root, root === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);

	  if (lanes === NoLanes) {
	    // Defensive coding. This is never expected to happen.
	    return null;
	  } // We disable time-slicing in some cases: if the work has been CPU-bound
	  // for too long ("expired" work, to prevent starvation), or we're in
	  // sync-updates-by-default mode.
	  // TODO: We only check `didTimeout` defensively, to account for a Scheduler
	  // bug we're still investigating. Once the bug in Scheduler is fixed,
	  // we can remove this, since we track expiration ourselves.


	  var shouldTimeSlice = !includesBlockingLane(root, lanes) && !includesExpiredLane(root, lanes) && ( !didTimeout);
	  var exitStatus = shouldTimeSlice ? renderRootConcurrent(root, lanes) : renderRootSync(root, lanes);

	  if (exitStatus !== RootInProgress) {
	    if (exitStatus === RootErrored) {
	      // If something threw an error, try rendering one more time. We'll
	      // render synchronously to block concurrent data mutations, and we'll
	      // includes all pending updates are included. If it still fails after
	      // the second attempt, we'll give up and commit the resulting tree.
	      var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root);

	      if (errorRetryLanes !== NoLanes) {
	        lanes = errorRetryLanes;
	        exitStatus = recoverFromConcurrentError(root, errorRetryLanes);
	      }
	    }

	    if (exitStatus === RootFatalErrored) {
	      var fatalError = workInProgressRootFatalError;
	      prepareFreshStack(root, NoLanes);
	      markRootSuspended$1(root, lanes);
	      ensureRootIsScheduled(root, now());
	      throw fatalError;
	    }

	    if (exitStatus === RootDidNotComplete) {
	      // The render unwound without completing the tree. This happens in special
	      // cases where need to exit the current render without producing a
	      // consistent tree or committing.
	      //
	      // This should only happen during a concurrent render, not a discrete or
	      // synchronous update. We should have already checked for this when we
	      // unwound the stack.
	      markRootSuspended$1(root, lanes);
	    } else {
	      // The render completed.
	      // Check if this render may have yielded to a concurrent event, and if so,
	      // confirm that any newly rendered stores are consistent.
	      // TODO: It's possible that even a concurrent render may never have yielded
	      // to the main thread, if it was fast enough, or if it expired. We could
	      // skip the consistency check in that case, too.
	      var renderWasConcurrent = !includesBlockingLane(root, lanes);
	      var finishedWork = root.current.alternate;

	      if (renderWasConcurrent && !isRenderConsistentWithExternalStores(finishedWork)) {
	        // A store was mutated in an interleaved event. Render again,
	        // synchronously, to block further mutations.
	        exitStatus = renderRootSync(root, lanes); // We need to check again if something threw

	        if (exitStatus === RootErrored) {
	          var _errorRetryLanes = getLanesToRetrySynchronouslyOnError(root);

	          if (_errorRetryLanes !== NoLanes) {
	            lanes = _errorRetryLanes;
	            exitStatus = recoverFromConcurrentError(root, _errorRetryLanes); // We assume the tree is now consistent because we didn't yield to any
	            // concurrent events.
	          }
	        }

	        if (exitStatus === RootFatalErrored) {
	          var _fatalError = workInProgressRootFatalError;
	          prepareFreshStack(root, NoLanes);
	          markRootSuspended$1(root, lanes);
	          ensureRootIsScheduled(root, now());
	          throw _fatalError;
	        }
	      } // We now have a consistent tree. The next step is either to commit it,
	      // or, if something suspended, wait to commit it after a timeout.


	      root.finishedWork = finishedWork;
	      root.finishedLanes = lanes;
	      finishConcurrentRender(root, exitStatus, lanes);
	    }
	  }

	  ensureRootIsScheduled(root, now());

	  if (root.callbackNode === originalCallbackNode) {
	    // The task node scheduled for this root is the same one that's
	    // currently executed. Need to return a continuation.
	    return performConcurrentWorkOnRoot.bind(null, root);
	  }

	  return null;
	}

	function recoverFromConcurrentError(root, errorRetryLanes) {
	  // If an error occurred during hydration, discard server response and fall
	  // back to client side render.
	  // Before rendering again, save the errors from the previous attempt.
	  var errorsFromFirstAttempt = workInProgressRootConcurrentErrors;

	  if (isRootDehydrated(root)) {
	    // The shell failed to hydrate. Set a flag to force a client rendering
	    // during the next attempt. To do this, we call prepareFreshStack now
	    // to create the root work-in-progress fiber. This is a bit weird in terms
	    // of factoring, because it relies on renderRootSync not calling
	    // prepareFreshStack again in the call below, which happens because the
	    // root and lanes haven't changed.
	    //
	    // TODO: I think what we should do is set ForceClientRender inside
	    // throwException, like we do for nested Suspense boundaries. The reason
	    // it's here instead is so we can switch to the synchronous work loop, too.
	    // Something to consider for a future refactor.
	    var rootWorkInProgress = prepareFreshStack(root, errorRetryLanes);
	    rootWorkInProgress.flags |= ForceClientRender;

	    {
	      errorHydratingContainer(root.containerInfo);
	    }
	  }

	  var exitStatus = renderRootSync(root, errorRetryLanes);

	  if (exitStatus !== RootErrored) {
	    // Successfully finished rendering on retry
	    // The errors from the failed first attempt have been recovered. Add
	    // them to the collection of recoverable errors. We'll log them in the
	    // commit phase.
	    var errorsFromSecondAttempt = workInProgressRootRecoverableErrors;
	    workInProgressRootRecoverableErrors = errorsFromFirstAttempt; // The errors from the second attempt should be queued after the errors
	    // from the first attempt, to preserve the causal sequence.

	    if (errorsFromSecondAttempt !== null) {
	      queueRecoverableErrors(errorsFromSecondAttempt);
	    }
	  }

	  return exitStatus;
	}

	function queueRecoverableErrors(errors) {
	  if (workInProgressRootRecoverableErrors === null) {
	    workInProgressRootRecoverableErrors = errors;
	  } else {
	    workInProgressRootRecoverableErrors.push.apply(workInProgressRootRecoverableErrors, errors);
	  }
	}

	function finishConcurrentRender(root, exitStatus, lanes) {
	  switch (exitStatus) {
	    case RootInProgress:
	    case RootFatalErrored:
	      {
	        throw new Error('Root did not complete. This is a bug in React.');
	      }
	    // Flow knows about invariant, so it complains if I add a break
	    // statement, but eslint doesn't know about invariant, so it complains
	    // if I do. eslint-disable-next-line no-fallthrough

	    case RootErrored:
	      {
	        // We should have already attempted to retry this tree. If we reached
	        // this point, it errored again. Commit it.
	        commitRoot(root, workInProgressRootRecoverableErrors, workInProgressTransitions);
	        break;
	      }

	    case RootSuspended:
	      {
	        markRootSuspended$1(root, lanes); // We have an acceptable loading state. We need to figure out if we
	        // should immediately commit it or wait a bit.

	        if (includesOnlyRetries(lanes) && // do not delay if we're inside an act() scope
	        !shouldForceFlushFallbacksInDEV()) {
	          // This render only included retries, no updates. Throttle committing
	          // retries so that we don't show too many loading states too quickly.
	          var msUntilTimeout = globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now(); // Don't bother with a very short suspense time.

	          if (msUntilTimeout > 10) {
	            var nextLanes = getNextLanes(root, NoLanes);

	            if (nextLanes !== NoLanes) {
	              // There's additional work on this root.
	              break;
	            }

	            var suspendedLanes = root.suspendedLanes;

	            if (!isSubsetOfLanes(suspendedLanes, lanes)) {
	              // We should prefer to render the fallback of at the last
	              // suspended level. Ping the last suspended level to try
	              // rendering it again.
	              // FIXME: What if the suspended lanes are Idle? Should not restart.
	              requestEventTime();
	              markRootPinged(root, suspendedLanes);
	              break;
	            } // The render is suspended, it hasn't timed out, and there's no
	            // lower priority work to do. Instead of committing the fallback
	            // immediately, wait for more data to arrive.


	            root.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root, workInProgressRootRecoverableErrors, workInProgressTransitions), msUntilTimeout);
	            break;
	          }
	        } // The work expired. Commit immediately.


	        commitRoot(root, workInProgressRootRecoverableErrors, workInProgressTransitions);
	        break;
	      }

	    case RootSuspendedWithDelay:
	      {
	        markRootSuspended$1(root, lanes);

	        if (includesOnlyTransitions(lanes)) {
	          // This is a transition, so we should exit without committing a
	          // placeholder and without scheduling a timeout. Delay indefinitely
	          // until we receive more data.
	          break;
	        }

	        if (!shouldForceFlushFallbacksInDEV()) {
	          // This is not a transition, but we did trigger an avoided state.
	          // Schedule a placeholder to display after a short delay, using the Just
	          // Noticeable Difference.
	          // TODO: Is the JND optimization worth the added complexity? If this is
	          // the only reason we track the event time, then probably not.
	          // Consider removing.
	          var mostRecentEventTime = getMostRecentEventTime(root, lanes);
	          var eventTimeMs = mostRecentEventTime;
	          var timeElapsedMs = now() - eventTimeMs;

	          var _msUntilTimeout = jnd(timeElapsedMs) - timeElapsedMs; // Don't bother with a very short suspense time.


	          if (_msUntilTimeout > 10) {
	            // Instead of committing the fallback immediately, wait for more data
	            // to arrive.
	            root.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root, workInProgressRootRecoverableErrors, workInProgressTransitions), _msUntilTimeout);
	            break;
	          }
	        } // Commit the placeholder.


	        commitRoot(root, workInProgressRootRecoverableErrors, workInProgressTransitions);
	        break;
	      }

	    case RootCompleted:
	      {
	        // The work completed. Ready to commit.
	        commitRoot(root, workInProgressRootRecoverableErrors, workInProgressTransitions);
	        break;
	      }

	    default:
	      {
	        throw new Error('Unknown root exit status.');
	      }
	  }
	}

	function isRenderConsistentWithExternalStores(finishedWork) {
	  // Search the rendered tree for external store reads, and check whether the
	  // stores were mutated in a concurrent event. Intentionally using an iterative
	  // loop instead of recursion so we can exit early.
	  var node = finishedWork;

	  while (true) {
	    if (node.flags & StoreConsistency) {
	      var updateQueue = node.updateQueue;

	      if (updateQueue !== null) {
	        var checks = updateQueue.stores;

	        if (checks !== null) {
	          for (var i = 0; i < checks.length; i++) {
	            var check = checks[i];
	            var getSnapshot = check.getSnapshot;
	            var renderedValue = check.value;

	            try {
	              if (!objectIs(getSnapshot(), renderedValue)) {
	                // Found an inconsistent store.
	                return false;
	              }
	            } catch (error) {
	              // If `getSnapshot` throws, return `false`. This will schedule
	              // a re-render, and the error will be rethrown during render.
	              return false;
	            }
	          }
	        }
	      }
	    }

	    var child = node.child;

	    if (node.subtreeFlags & StoreConsistency && child !== null) {
	      child.return = node;
	      node = child;
	      continue;
	    }

	    if (node === finishedWork) {
	      return true;
	    }

	    while (node.sibling === null) {
	      if (node.return === null || node.return === finishedWork) {
	        return true;
	      }

	      node = node.return;
	    }

	    node.sibling.return = node.return;
	    node = node.sibling;
	  } // Flow doesn't know this is unreachable, but eslint does
	  // eslint-disable-next-line no-unreachable


	  return true;
	}

	function markRootSuspended$1(root, suspendedLanes) {
	  // When suspending, we should always exclude lanes that were pinged or (more
	  // rarely, since we try to avoid it) updated during the render phase.
	  // TODO: Lol maybe there's a better way to factor this besides this
	  // obnoxiously named function :)
	  suspendedLanes = removeLanes(suspendedLanes, workInProgressRootPingedLanes);
	  suspendedLanes = removeLanes(suspendedLanes, workInProgressRootInterleavedUpdatedLanes);
	  markRootSuspended(root, suspendedLanes);
	} // This is the entry point for synchronous tasks that don't go
	// through Scheduler


	function performSyncWorkOnRoot(root) {
	  {
	    syncNestedUpdateFlag();
	  }

	  if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
	    throw new Error('Should not already be working.');
	  }

	  flushPassiveEffects();
	  var lanes = getNextLanes(root, NoLanes);

	  if (!includesSomeLane(lanes, SyncLane)) {
	    // There's no remaining sync work left.
	    ensureRootIsScheduled(root, now());
	    return null;
	  }

	  var exitStatus = renderRootSync(root, lanes);

	  if (root.tag !== LegacyRoot && exitStatus === RootErrored) {
	    // If something threw an error, try rendering one more time. We'll render
	    // synchronously to block concurrent data mutations, and we'll includes
	    // all pending updates are included. If it still fails after the second
	    // attempt, we'll give up and commit the resulting tree.
	    var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root);

	    if (errorRetryLanes !== NoLanes) {
	      lanes = errorRetryLanes;
	      exitStatus = recoverFromConcurrentError(root, errorRetryLanes);
	    }
	  }

	  if (exitStatus === RootFatalErrored) {
	    var fatalError = workInProgressRootFatalError;
	    prepareFreshStack(root, NoLanes);
	    markRootSuspended$1(root, lanes);
	    ensureRootIsScheduled(root, now());
	    throw fatalError;
	  }

	  if (exitStatus === RootDidNotComplete) {
	    throw new Error('Root did not complete. This is a bug in React.');
	  } // We now have a consistent tree. Because this is a sync render, we
	  // will commit it even if something suspended.


	  var finishedWork = root.current.alternate;
	  root.finishedWork = finishedWork;
	  root.finishedLanes = lanes;
	  commitRoot(root, workInProgressRootRecoverableErrors, workInProgressTransitions); // Before exiting, make sure there's a callback scheduled for the next
	  // pending level.

	  ensureRootIsScheduled(root, now());
	  return null;
	}

	function flushRoot(root, lanes) {
	  if (lanes !== NoLanes) {
	    markRootEntangled(root, mergeLanes(lanes, SyncLane));
	    ensureRootIsScheduled(root, now());

	    if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
	      resetRenderTimer();
	      flushSyncCallbacks();
	    }
	  }
	}
	function batchedUpdates$1(fn, a) {
	  var prevExecutionContext = executionContext;
	  executionContext |= BatchedContext;

	  try {
	    return fn(a);
	  } finally {
	    executionContext = prevExecutionContext; // If there were legacy sync updates, flush them at the end of the outer
	    // most batchedUpdates-like method.

	    if (executionContext === NoContext && // Treat `act` as if it's inside `batchedUpdates`, even in legacy mode.
	    !( ReactCurrentActQueue$1.isBatchingLegacy)) {
	      resetRenderTimer();
	      flushSyncCallbacksOnlyInLegacyMode();
	    }
	  }
	}
	function discreteUpdates(fn, a, b, c, d) {
	  var previousPriority = getCurrentUpdatePriority();
	  var prevTransition = ReactCurrentBatchConfig$3.transition;

	  try {
	    ReactCurrentBatchConfig$3.transition = null;
	    setCurrentUpdatePriority(DiscreteEventPriority);
	    return fn(a, b, c, d);
	  } finally {
	    setCurrentUpdatePriority(previousPriority);
	    ReactCurrentBatchConfig$3.transition = prevTransition;

	    if (executionContext === NoContext) {
	      resetRenderTimer();
	    }
	  }
	} // Overload the definition to the two valid signatures.
	// Warning, this opts-out of checking the function body.

	// eslint-disable-next-line no-redeclare
	function flushSync(fn) {
	  // In legacy mode, we flush pending passive effects at the beginning of the
	  // next event, not at the end of the previous one.
	  if (rootWithPendingPassiveEffects !== null && rootWithPendingPassiveEffects.tag === LegacyRoot && (executionContext & (RenderContext | CommitContext)) === NoContext) {
	    flushPassiveEffects();
	  }

	  var prevExecutionContext = executionContext;
	  executionContext |= BatchedContext;
	  var prevTransition = ReactCurrentBatchConfig$3.transition;
	  var previousPriority = getCurrentUpdatePriority();

	  try {
	    ReactCurrentBatchConfig$3.transition = null;
	    setCurrentUpdatePriority(DiscreteEventPriority);

	    if (fn) {
	      return fn();
	    } else {
	      return undefined;
	    }
	  } finally {
	    setCurrentUpdatePriority(previousPriority);
	    ReactCurrentBatchConfig$3.transition = prevTransition;
	    executionContext = prevExecutionContext; // Flush the immediate callbacks that were scheduled during this batch.
	    // Note that this will happen even if batchedUpdates is higher up
	    // the stack.

	    if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
	      flushSyncCallbacks();
	    }
	  }
	}
	function isAlreadyRendering() {
	  // Used by the renderer to print a warning if certain APIs are called from
	  // the wrong context.
	  return  (executionContext & (RenderContext | CommitContext)) !== NoContext;
	}
	function pushRenderLanes(fiber, lanes) {
	  push(subtreeRenderLanesCursor, subtreeRenderLanes, fiber);
	  subtreeRenderLanes = mergeLanes(subtreeRenderLanes, lanes);
	}
	function popRenderLanes(fiber) {
	  subtreeRenderLanes = subtreeRenderLanesCursor.current;
	  pop(subtreeRenderLanesCursor, fiber);
	}

	function prepareFreshStack(root, lanes) {
	  root.finishedWork = null;
	  root.finishedLanes = NoLanes;
	  var timeoutHandle = root.timeoutHandle;

	  if (timeoutHandle !== noTimeout) {
	    // The root previous suspended and scheduled a timeout to commit a fallback
	    // state. Now that we have additional work, cancel the timeout.
	    root.timeoutHandle = noTimeout; // $FlowFixMe Complains noTimeout is not a TimeoutID, despite the check above

	    cancelTimeout(timeoutHandle);
	  }

	  if (workInProgress !== null) {
	    var interruptedWork = workInProgress.return;

	    while (interruptedWork !== null) {
	      var current = interruptedWork.alternate;
	      unwindInterruptedWork(current, interruptedWork);
	      interruptedWork = interruptedWork.return;
	    }
	  }

	  workInProgressRoot = root;
	  var rootWorkInProgress = createWorkInProgress(root.current, null);
	  workInProgress = rootWorkInProgress;
	  workInProgressRootRenderLanes = subtreeRenderLanes = lanes;
	  workInProgressRootExitStatus = RootInProgress;
	  workInProgressRootFatalError = null;
	  workInProgressRootSkippedLanes = NoLanes;
	  workInProgressRootInterleavedUpdatedLanes = NoLanes;
	  workInProgressRootPingedLanes = NoLanes;
	  workInProgressRootConcurrentErrors = null;
	  workInProgressRootRecoverableErrors = null;
	  finishQueueingConcurrentUpdates();

	  {
	    ReactStrictModeWarnings.discardPendingWarnings();
	  }

	  return rootWorkInProgress;
	}

	function handleError(root, thrownValue) {
	  do {
	    var erroredWork = workInProgress;

	    try {
	      // Reset module-level state that was set during the render phase.
	      resetContextDependencies();
	      resetHooksAfterThrow();
	      resetCurrentFiber(); // TODO: I found and added this missing line while investigating a
	      // separate issue. Write a regression test using string refs.

	      ReactCurrentOwner$2.current = null;

	      if (erroredWork === null || erroredWork.return === null) {
	        // Expected to be working on a non-root fiber. This is a fatal error
	        // because there's no ancestor that can handle it; the root is
	        // supposed to capture all errors that weren't caught by an error
	        // boundary.
	        workInProgressRootExitStatus = RootFatalErrored;
	        workInProgressRootFatalError = thrownValue; // Set `workInProgress` to null. This represents advancing to the next
	        // sibling, or the parent if there are no siblings. But since the root
	        // has no siblings nor a parent, we set it to null. Usually this is
	        // handled by `completeUnitOfWork` or `unwindWork`, but since we're
	        // intentionally not calling those, we need set it here.
	        // TODO: Consider calling `unwindWork` to pop the contexts.

	        workInProgress = null;
	        return;
	      }

	      if (enableProfilerTimer && erroredWork.mode & ProfileMode) {
	        // Record the time spent rendering before an error was thrown. This
	        // avoids inaccurate Profiler durations in the case of a
	        // suspended render.
	        stopProfilerTimerIfRunningAndRecordDelta(erroredWork, true);
	      }

	      if (enableSchedulingProfiler) {
	        markComponentRenderStopped();

	        if (thrownValue !== null && typeof thrownValue === 'object' && typeof thrownValue.then === 'function') {
	          var wakeable = thrownValue;
	          markComponentSuspended(erroredWork, wakeable, workInProgressRootRenderLanes);
	        } else {
	          markComponentErrored(erroredWork, thrownValue, workInProgressRootRenderLanes);
	        }
	      }

	      throwException(root, erroredWork.return, erroredWork, thrownValue, workInProgressRootRenderLanes);
	      completeUnitOfWork(erroredWork);
	    } catch (yetAnotherThrownValue) {
	      // Something in the return path also threw.
	      thrownValue = yetAnotherThrownValue;

	      if (workInProgress === erroredWork && erroredWork !== null) {
	        // If this boundary has already errored, then we had trouble processing
	        // the error. Bubble it to the next boundary.
	        erroredWork = erroredWork.return;
	        workInProgress = erroredWork;
	      } else {
	        erroredWork = workInProgress;
	      }

	      continue;
	    } // Return to the normal work loop.


	    return;
	  } while (true);
	}

	function pushDispatcher() {
	  var prevDispatcher = ReactCurrentDispatcher$2.current;
	  ReactCurrentDispatcher$2.current = ContextOnlyDispatcher;

	  if (prevDispatcher === null) {
	    // The React isomorphic package does not include a default dispatcher.
	    // Instead the first renderer will lazily attach one, in order to give
	    // nicer error messages.
	    return ContextOnlyDispatcher;
	  } else {
	    return prevDispatcher;
	  }
	}

	function popDispatcher(prevDispatcher) {
	  ReactCurrentDispatcher$2.current = prevDispatcher;
	}

	function markCommitTimeOfFallback() {
	  globalMostRecentFallbackTime = now();
	}
	function markSkippedUpdateLanes(lane) {
	  workInProgressRootSkippedLanes = mergeLanes(lane, workInProgressRootSkippedLanes);
	}
	function renderDidSuspend() {
	  if (workInProgressRootExitStatus === RootInProgress) {
	    workInProgressRootExitStatus = RootSuspended;
	  }
	}
	function renderDidSuspendDelayIfPossible() {
	  if (workInProgressRootExitStatus === RootInProgress || workInProgressRootExitStatus === RootSuspended || workInProgressRootExitStatus === RootErrored) {
	    workInProgressRootExitStatus = RootSuspendedWithDelay;
	  } // Check if there are updates that we skipped tree that might have unblocked
	  // this render.


	  if (workInProgressRoot !== null && (includesNonIdleWork(workInProgressRootSkippedLanes) || includesNonIdleWork(workInProgressRootInterleavedUpdatedLanes))) {
	    // Mark the current render as suspended so that we switch to working on
	    // the updates that were skipped. Usually we only suspend at the end of
	    // the render phase.
	    // TODO: We should probably always mark the root as suspended immediately
	    // (inside this function), since by suspending at the end of the render
	    // phase introduces a potential mistake where we suspend lanes that were
	    // pinged or updated while we were rendering.
	    markRootSuspended$1(workInProgressRoot, workInProgressRootRenderLanes);
	  }
	}
	function renderDidError(error) {
	  if (workInProgressRootExitStatus !== RootSuspendedWithDelay) {
	    workInProgressRootExitStatus = RootErrored;
	  }

	  if (workInProgressRootConcurrentErrors === null) {
	    workInProgressRootConcurrentErrors = [error];
	  } else {
	    workInProgressRootConcurrentErrors.push(error);
	  }
	} // Called during render to determine if anything has suspended.
	// Returns false if we're not sure.

	function renderHasNotSuspendedYet() {
	  // If something errored or completed, we can't really be sure,
	  // so those are false.
	  return workInProgressRootExitStatus === RootInProgress;
	}

	function renderRootSync(root, lanes) {
	  var prevExecutionContext = executionContext;
	  executionContext |= RenderContext;
	  var prevDispatcher = pushDispatcher(); // If the root or lanes have changed, throw out the existing stack
	  // and prepare a fresh one. Otherwise we'll continue where we left off.

	  if (workInProgressRoot !== root || workInProgressRootRenderLanes !== lanes) {
	    {
	      if (isDevToolsPresent) {
	        var memoizedUpdaters = root.memoizedUpdaters;

	        if (memoizedUpdaters.size > 0) {
	          restorePendingUpdaters(root, workInProgressRootRenderLanes);
	          memoizedUpdaters.clear();
	        } // At this point, move Fibers that scheduled the upcoming work from the Map to the Set.
	        // If we bailout on this work, we'll move them back (like above).
	        // It's important to move them now in case the work spawns more work at the same priority with different updaters.
	        // That way we can keep the current update and future updates separate.


	        movePendingFibersToMemoized(root, lanes);
	      }
	    }

	    workInProgressTransitions = getTransitionsForLanes();
	    prepareFreshStack(root, lanes);
	  }

	  {
	    markRenderStarted(lanes);
	  }

	  do {
	    try {
	      workLoopSync();
	      break;
	    } catch (thrownValue) {
	      handleError(root, thrownValue);
	    }
	  } while (true);

	  resetContextDependencies();
	  executionContext = prevExecutionContext;
	  popDispatcher(prevDispatcher);

	  if (workInProgress !== null) {
	    // This is a sync render, so we should have finished the whole tree.
	    throw new Error('Cannot commit an incomplete root. This error is likely caused by a ' + 'bug in React. Please file an issue.');
	  }

	  {
	    markRenderStopped();
	  } // Set this to null to indicate there's no in-progress render.


	  workInProgressRoot = null;
	  workInProgressRootRenderLanes = NoLanes;
	  return workInProgressRootExitStatus;
	} // The work loop is an extremely hot path. Tell Closure not to inline it.

	/** @noinline */


	function workLoopSync() {
	  // Already timed out, so perform work without checking if we need to yield.
	  while (workInProgress !== null) {
	    performUnitOfWork(workInProgress);
	  }
	}

	function renderRootConcurrent(root, lanes) {
	  var prevExecutionContext = executionContext;
	  executionContext |= RenderContext;
	  var prevDispatcher = pushDispatcher(); // If the root or lanes have changed, throw out the existing stack
	  // and prepare a fresh one. Otherwise we'll continue where we left off.

	  if (workInProgressRoot !== root || workInProgressRootRenderLanes !== lanes) {
	    {
	      if (isDevToolsPresent) {
	        var memoizedUpdaters = root.memoizedUpdaters;

	        if (memoizedUpdaters.size > 0) {
	          restorePendingUpdaters(root, workInProgressRootRenderLanes);
	          memoizedUpdaters.clear();
	        } // At this point, move Fibers that scheduled the upcoming work from the Map to the Set.
	        // If we bailout on this work, we'll move them back (like above).
	        // It's important to move them now in case the work spawns more work at the same priority with different updaters.
	        // That way we can keep the current update and future updates separate.


	        movePendingFibersToMemoized(root, lanes);
	      }
	    }

	    workInProgressTransitions = getTransitionsForLanes();
	    resetRenderTimer();
	    prepareFreshStack(root, lanes);
	  }

	  {
	    markRenderStarted(lanes);
	  }

	  do {
	    try {
	      workLoopConcurrent();
	      break;
	    } catch (thrownValue) {
	      handleError(root, thrownValue);
	    }
	  } while (true);

	  resetContextDependencies();
	  popDispatcher(prevDispatcher);
	  executionContext = prevExecutionContext;


	  if (workInProgress !== null) {
	    // Still work remaining.
	    {
	      markRenderYielded();
	    }

	    return RootInProgress;
	  } else {
	    // Completed the tree.
	    {
	      markRenderStopped();
	    } // Set this to null to indicate there's no in-progress render.


	    workInProgressRoot = null;
	    workInProgressRootRenderLanes = NoLanes; // Return the final exit status.

	    return workInProgressRootExitStatus;
	  }
	}
	/** @noinline */


	function workLoopConcurrent() {
	  // Perform work until Scheduler asks us to yield
	  while (workInProgress !== null && !shouldYield()) {
	    performUnitOfWork(workInProgress);
	  }
	}

	function performUnitOfWork(unitOfWork) {
	  // The current, flushed, state of this fiber is the alternate. Ideally
	  // nothing should rely on this, but relying on it here means that we don't
	  // need an additional field on the work in progress.
	  var current = unitOfWork.alternate;
	  setCurrentFiber(unitOfWork);
	  var next;

	  if ( (unitOfWork.mode & ProfileMode) !== NoMode) {
	    startProfilerTimer(unitOfWork);
	    next = beginWork$1(current, unitOfWork, subtreeRenderLanes);
	    stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, true);
	  } else {
	    next = beginWork$1(current, unitOfWork, subtreeRenderLanes);
	  }

	  resetCurrentFiber();
	  unitOfWork.memoizedProps = unitOfWork.pendingProps;

	  if (next === null) {
	    // If this doesn't spawn new work, complete the current work.
	    completeUnitOfWork(unitOfWork);
	  } else {
	    workInProgress = next;
	  }

	  ReactCurrentOwner$2.current = null;
	}

	function completeUnitOfWork(unitOfWork) {
	  // Attempt to complete the current unit of work, then move to the next
	  // sibling. If there are no more siblings, return to the parent fiber.
	  var completedWork = unitOfWork;

	  do {
	    // The current, flushed, state of this fiber is the alternate. Ideally
	    // nothing should rely on this, but relying on it here means that we don't
	    // need an additional field on the work in progress.
	    var current = completedWork.alternate;
	    var returnFiber = completedWork.return; // Check if the work completed or if something threw.

	    if ((completedWork.flags & Incomplete) === NoFlags) {
	      setCurrentFiber(completedWork);
	      var next = void 0;

	      if ( (completedWork.mode & ProfileMode) === NoMode) {
	        next = completeWork(current, completedWork, subtreeRenderLanes);
	      } else {
	        startProfilerTimer(completedWork);
	        next = completeWork(current, completedWork, subtreeRenderLanes); // Update render duration assuming we didn't error.

	        stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
	      }

	      resetCurrentFiber();

	      if (next !== null) {
	        // Completing this fiber spawned new work. Work on that next.
	        workInProgress = next;
	        return;
	      }
	    } else {
	      // This fiber did not complete because something threw. Pop values off
	      // the stack without entering the complete phase. If this is a boundary,
	      // capture values if possible.
	      var _next = unwindWork(current, completedWork); // Because this fiber did not complete, don't reset its lanes.


	      if (_next !== null) {
	        // If completing this work spawned new work, do that next. We'll come
	        // back here again.
	        // Since we're restarting, remove anything that is not a host effect
	        // from the effect tag.
	        _next.flags &= HostEffectMask;
	        workInProgress = _next;
	        return;
	      }

	      if ( (completedWork.mode & ProfileMode) !== NoMode) {
	        // Record the render duration for the fiber that errored.
	        stopProfilerTimerIfRunningAndRecordDelta(completedWork, false); // Include the time spent working on failed children before continuing.

	        var actualDuration = completedWork.actualDuration;
	        var child = completedWork.child;

	        while (child !== null) {
	          actualDuration += child.actualDuration;
	          child = child.sibling;
	        }

	        completedWork.actualDuration = actualDuration;
	      }

	      if (returnFiber !== null) {
	        // Mark the parent fiber as incomplete and clear its subtree flags.
	        returnFiber.flags |= Incomplete;
	        returnFiber.subtreeFlags = NoFlags;
	        returnFiber.deletions = null;
	      } else {
	        // We've unwound all the way to the root.
	        workInProgressRootExitStatus = RootDidNotComplete;
	        workInProgress = null;
	        return;
	      }
	    }

	    var siblingFiber = completedWork.sibling;

	    if (siblingFiber !== null) {
	      // If there is more work to do in this returnFiber, do that next.
	      workInProgress = siblingFiber;
	      return;
	    } // Otherwise, return to the parent


	    completedWork = returnFiber; // Update the next thing we're working on in case something throws.

	    workInProgress = completedWork;
	  } while (completedWork !== null); // We've reached the root.


	  if (workInProgressRootExitStatus === RootInProgress) {
	    workInProgressRootExitStatus = RootCompleted;
	  }
	}

	function commitRoot(root, recoverableErrors, transitions) {
	  // TODO: This no longer makes any sense. We already wrap the mutation and
	  // layout phases. Should be able to remove.
	  var previousUpdateLanePriority = getCurrentUpdatePriority();
	  var prevTransition = ReactCurrentBatchConfig$3.transition;

	  try {
	    ReactCurrentBatchConfig$3.transition = null;
	    setCurrentUpdatePriority(DiscreteEventPriority);
	    commitRootImpl(root, recoverableErrors, transitions, previousUpdateLanePriority);
	  } finally {
	    ReactCurrentBatchConfig$3.transition = prevTransition;
	    setCurrentUpdatePriority(previousUpdateLanePriority);
	  }

	  return null;
	}

	function commitRootImpl(root, recoverableErrors, transitions, renderPriorityLevel) {
	  do {
	    // `flushPassiveEffects` will call `flushSyncUpdateQueue` at the end, which
	    // means `flushPassiveEffects` will sometimes result in additional
	    // passive effects. So we need to keep flushing in a loop until there are
	    // no more pending effects.
	    // TODO: Might be better if `flushPassiveEffects` did not automatically
	    // flush synchronous work at the end, to avoid factoring hazards like this.
	    flushPassiveEffects();
	  } while (rootWithPendingPassiveEffects !== null);

	  flushRenderPhaseStrictModeWarningsInDEV();

	  if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
	    throw new Error('Should not already be working.');
	  }

	  var finishedWork = root.finishedWork;
	  var lanes = root.finishedLanes;

	  {
	    markCommitStarted(lanes);
	  }

	  if (finishedWork === null) {

	    {
	      markCommitStopped();
	    }

	    return null;
	  } else {
	    {
	      if (lanes === NoLanes) {
	        error('root.finishedLanes should not be empty during a commit. This is a ' + 'bug in React.');
	      }
	    }
	  }

	  root.finishedWork = null;
	  root.finishedLanes = NoLanes;

	  if (finishedWork === root.current) {
	    throw new Error('Cannot commit the same tree as before. This error is likely caused by ' + 'a bug in React. Please file an issue.');
	  } // commitRoot never returns a continuation; it always finishes synchronously.
	  // So we can clear these now to allow a new callback to be scheduled.


	  root.callbackNode = null;
	  root.callbackPriority = NoLane; // Update the first and last pending times on this root. The new first
	  // pending time is whatever is left on the root fiber.

	  var remainingLanes = mergeLanes(finishedWork.lanes, finishedWork.childLanes);
	  markRootFinished(root, remainingLanes);

	  if (root === workInProgressRoot) {
	    // We can reset these now that they are finished.
	    workInProgressRoot = null;
	    workInProgress = null;
	    workInProgressRootRenderLanes = NoLanes;
	  } // If there are pending passive effects, schedule a callback to process them.
	  // Do this as early as possible, so it is queued before anything else that
	  // might get scheduled in the commit phase. (See #16714.)
	  // TODO: Delete all other places that schedule the passive effect callback
	  // They're redundant.


	  if ((finishedWork.subtreeFlags & PassiveMask) !== NoFlags || (finishedWork.flags & PassiveMask) !== NoFlags) {
	    if (!rootDoesHavePassiveEffects) {
	      rootDoesHavePassiveEffects = true;
	      // to store it in pendingPassiveTransitions until they get processed
	      // We need to pass this through as an argument to commitRoot
	      // because workInProgressTransitions might have changed between
	      // the previous render and commit if we throttle the commit
	      // with setTimeout

	      pendingPassiveTransitions = transitions;
	      scheduleCallback$1(NormalPriority, function () {
	        flushPassiveEffects(); // This render triggered passive effects: release the root cache pool
	        // *after* passive effects fire to avoid freeing a cache pool that may
	        // be referenced by a node in the tree (HostRoot, Cache boundary etc)

	        return null;
	      });
	    }
	  } // Check if there are any effects in the whole tree.
	  // TODO: This is left over from the effect list implementation, where we had
	  // to check for the existence of `firstEffect` to satisfy Flow. I think the
	  // only other reason this optimization exists is because it affects profiling.
	  // Reconsider whether this is necessary.


	  var subtreeHasEffects = (finishedWork.subtreeFlags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags;
	  var rootHasEffect = (finishedWork.flags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags;

	  if (subtreeHasEffects || rootHasEffect) {
	    var prevTransition = ReactCurrentBatchConfig$3.transition;
	    ReactCurrentBatchConfig$3.transition = null;
	    var previousPriority = getCurrentUpdatePriority();
	    setCurrentUpdatePriority(DiscreteEventPriority);
	    var prevExecutionContext = executionContext;
	    executionContext |= CommitContext; // Reset this to null before calling lifecycles

	    ReactCurrentOwner$2.current = null; // The commit phase is broken into several sub-phases. We do a separate pass
	    // of the effect list for each phase: all mutation effects come before all
	    // layout effects, and so on.
	    // The first phase a "before mutation" phase. We use this phase to read the
	    // state of the host tree right before we mutate it. This is where
	    // getSnapshotBeforeUpdate is called.

	    commitBeforeMutationEffects(root, finishedWork);

	    {
	      // Mark the current commit time to be shared by all Profilers in this
	      // batch. This enables them to be grouped later.
	      recordCommitTime();
	    }


	    commitMutationEffects(root, finishedWork, lanes);

	    resetAfterCommit(root.containerInfo); // The work-in-progress tree is now the current tree. This must come after
	    // the mutation phase, so that the previous tree is still current during
	    // componentWillUnmount, but before the layout phase, so that the finished
	    // work is current during componentDidMount/Update.

	    root.current = finishedWork; // The next phase is the layout phase, where we call effects that read

	    {
	      markLayoutEffectsStarted(lanes);
	    }

	    commitLayoutEffects(finishedWork, root, lanes);

	    {
	      markLayoutEffectsStopped();
	    }
	    // opportunity to paint.


	    requestPaint();
	    executionContext = prevExecutionContext; // Reset the priority to the previous non-sync value.

	    setCurrentUpdatePriority(previousPriority);
	    ReactCurrentBatchConfig$3.transition = prevTransition;
	  } else {
	    // No effects.
	    root.current = finishedWork; // Measure these anyway so the flamegraph explicitly shows that there were
	    // no effects.
	    // TODO: Maybe there's a better way to report this.

	    {
	      recordCommitTime();
	    }
	  }

	  var rootDidHavePassiveEffects = rootDoesHavePassiveEffects;

	  if (rootDoesHavePassiveEffects) {
	    // This commit has passive effects. Stash a reference to them. But don't
	    // schedule a callback until after flushing layout work.
	    rootDoesHavePassiveEffects = false;
	    rootWithPendingPassiveEffects = root;
	    pendingPassiveEffectsLanes = lanes;
	  } else {

	    {
	      nestedPassiveUpdateCount = 0;
	      rootWithPassiveNestedUpdates = null;
	    }
	  } // Read this again, since an effect might have updated it


	  remainingLanes = root.pendingLanes; // Check if there's remaining work on this root
	  // TODO: This is part of the `componentDidCatch` implementation. Its purpose
	  // is to detect whether something might have called setState inside
	  // `componentDidCatch`. The mechanism is known to be flawed because `setState`
	  // inside `componentDidCatch` is itself flawed — that's why we recommend
	  // `getDerivedStateFromError` instead. However, it could be improved by
	  // checking if remainingLanes includes Sync work, instead of whether there's
	  // any work remaining at all (which would also include stuff like Suspense
	  // retries or transitions). It's been like this for a while, though, so fixing
	  // it probably isn't that urgent.

	  if (remainingLanes === NoLanes) {
	    // If there's no remaining work, we can clear the set of already failed
	    // error boundaries.
	    legacyErrorBoundariesThatAlreadyFailed = null;
	  }

	  {
	    if (!rootDidHavePassiveEffects) {
	      commitDoubleInvokeEffectsInDEV(root.current, false);
	    }
	  }

	  onCommitRoot(finishedWork.stateNode, renderPriorityLevel);

	  {
	    if (isDevToolsPresent) {
	      root.memoizedUpdaters.clear();
	    }
	  }

	  {
	    onCommitRoot$1();
	  } // Always call this before exiting `commitRoot`, to ensure that any
	  // additional work on this root is scheduled.


	  ensureRootIsScheduled(root, now());

	  if (recoverableErrors !== null) {
	    // There were errors during this render, but recovered from them without
	    // needing to surface it to the UI. We log them here.
	    var onRecoverableError = root.onRecoverableError;

	    for (var i = 0; i < recoverableErrors.length; i++) {
	      var recoverableError = recoverableErrors[i];
	      var componentStack = recoverableError.stack;
	      var digest = recoverableError.digest;
	      onRecoverableError(recoverableError.value, {
	        componentStack: componentStack,
	        digest: digest
	      });
	    }
	  }

	  if (hasUncaughtError) {
	    hasUncaughtError = false;
	    var error$1 = firstUncaughtError;
	    firstUncaughtError = null;
	    throw error$1;
	  } // If the passive effects are the result of a discrete render, flush them
	  // synchronously at the end of the current task so that the result is
	  // immediately observable. Otherwise, we assume that they are not
	  // order-dependent and do not need to be observed by external systems, so we
	  // can wait until after paint.
	  // TODO: We can optimize this by not scheduling the callback earlier. Since we
	  // currently schedule the callback in multiple places, will wait until those
	  // are consolidated.


	  if (includesSomeLane(pendingPassiveEffectsLanes, SyncLane) && root.tag !== LegacyRoot) {
	    flushPassiveEffects();
	  } // Read this again, since a passive effect might have updated it


	  remainingLanes = root.pendingLanes;

	  if (includesSomeLane(remainingLanes, SyncLane)) {
	    {
	      markNestedUpdateScheduled();
	    } // Count the number of times the root synchronously re-renders without
	    // finishing. If there are too many, it indicates an infinite update loop.


	    if (root === rootWithNestedUpdates) {
	      nestedUpdateCount++;
	    } else {
	      nestedUpdateCount = 0;
	      rootWithNestedUpdates = root;
	    }
	  } else {
	    nestedUpdateCount = 0;
	  } // If layout work was scheduled, flush it now.


	  flushSyncCallbacks();

	  {
	    markCommitStopped();
	  }

	  return null;
	}

	function flushPassiveEffects() {
	  // Returns whether passive effects were flushed.
	  // TODO: Combine this check with the one in flushPassiveEFfectsImpl. We should
	  // probably just combine the two functions. I believe they were only separate
	  // in the first place because we used to wrap it with
	  // `Scheduler.runWithPriority`, which accepts a function. But now we track the
	  // priority within React itself, so we can mutate the variable directly.
	  if (rootWithPendingPassiveEffects !== null) {
	    var renderPriority = lanesToEventPriority(pendingPassiveEffectsLanes);
	    var priority = lowerEventPriority(DefaultEventPriority, renderPriority);
	    var prevTransition = ReactCurrentBatchConfig$3.transition;
	    var previousPriority = getCurrentUpdatePriority();

	    try {
	      ReactCurrentBatchConfig$3.transition = null;
	      setCurrentUpdatePriority(priority);
	      return flushPassiveEffectsImpl();
	    } finally {
	      setCurrentUpdatePriority(previousPriority);
	      ReactCurrentBatchConfig$3.transition = prevTransition; // Once passive effects have run for the tree - giving components a
	    }
	  }

	  return false;
	}
	function enqueuePendingPassiveProfilerEffect(fiber) {
	  {
	    pendingPassiveProfilerEffects.push(fiber);

	    if (!rootDoesHavePassiveEffects) {
	      rootDoesHavePassiveEffects = true;
	      scheduleCallback$1(NormalPriority, function () {
	        flushPassiveEffects();
	        return null;
	      });
	    }
	  }
	}

	function flushPassiveEffectsImpl() {
	  if (rootWithPendingPassiveEffects === null) {
	    return false;
	  } // Cache and clear the transitions flag


	  var transitions = pendingPassiveTransitions;
	  pendingPassiveTransitions = null;
	  var root = rootWithPendingPassiveEffects;
	  var lanes = pendingPassiveEffectsLanes;
	  rootWithPendingPassiveEffects = null; // TODO: This is sometimes out of sync with rootWithPendingPassiveEffects.
	  // Figure out why and fix it. It's not causing any known issues (probably
	  // because it's only used for profiling), but it's a refactor hazard.

	  pendingPassiveEffectsLanes = NoLanes;

	  if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
	    throw new Error('Cannot flush passive effects while already rendering.');
	  }

	  {
	    isFlushingPassiveEffects = true;
	    didScheduleUpdateDuringPassiveEffects = false;
	  }

	  {
	    markPassiveEffectsStarted(lanes);
	  }

	  var prevExecutionContext = executionContext;
	  executionContext |= CommitContext;
	  commitPassiveUnmountEffects(root.current);
	  commitPassiveMountEffects(root, root.current, lanes, transitions); // TODO: Move to commitPassiveMountEffects

	  {
	    var profilerEffects = pendingPassiveProfilerEffects;
	    pendingPassiveProfilerEffects = [];

	    for (var i = 0; i < profilerEffects.length; i++) {
	      var _fiber = profilerEffects[i];
	      commitPassiveEffectDurations(root, _fiber);
	    }
	  }

	  {
	    markPassiveEffectsStopped();
	  }

	  {
	    commitDoubleInvokeEffectsInDEV(root.current, true);
	  }

	  executionContext = prevExecutionContext;
	  flushSyncCallbacks();

	  {
	    // If additional passive effects were scheduled, increment a counter. If this
	    // exceeds the limit, we'll fire a warning.
	    if (didScheduleUpdateDuringPassiveEffects) {
	      if (root === rootWithPassiveNestedUpdates) {
	        nestedPassiveUpdateCount++;
	      } else {
	        nestedPassiveUpdateCount = 0;
	        rootWithPassiveNestedUpdates = root;
	      }
	    } else {
	      nestedPassiveUpdateCount = 0;
	    }

	    isFlushingPassiveEffects = false;
	    didScheduleUpdateDuringPassiveEffects = false;
	  } // TODO: Move to commitPassiveMountEffects


	  onPostCommitRoot(root);

	  {
	    var stateNode = root.current.stateNode;
	    stateNode.effectDuration = 0;
	    stateNode.passiveEffectDuration = 0;
	  }

	  return true;
	}

	function isAlreadyFailedLegacyErrorBoundary(instance) {
	  return legacyErrorBoundariesThatAlreadyFailed !== null && legacyErrorBoundariesThatAlreadyFailed.has(instance);
	}
	function markLegacyErrorBoundaryAsFailed(instance) {
	  if (legacyErrorBoundariesThatAlreadyFailed === null) {
	    legacyErrorBoundariesThatAlreadyFailed = new Set([instance]);
	  } else {
	    legacyErrorBoundariesThatAlreadyFailed.add(instance);
	  }
	}

	function prepareToThrowUncaughtError(error) {
	  if (!hasUncaughtError) {
	    hasUncaughtError = true;
	    firstUncaughtError = error;
	  }
	}

	var onUncaughtError = prepareToThrowUncaughtError;

	function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error) {
	  var errorInfo = createCapturedValueAtFiber(error, sourceFiber);
	  var update = createRootErrorUpdate(rootFiber, errorInfo, SyncLane);
	  var root = enqueueUpdate(rootFiber, update, SyncLane);
	  var eventTime = requestEventTime();

	  if (root !== null) {
	    markRootUpdated(root, SyncLane, eventTime);
	    ensureRootIsScheduled(root, eventTime);
	  }
	}

	function captureCommitPhaseError(sourceFiber, nearestMountedAncestor, error$1) {
	  {
	    reportUncaughtErrorInDEV(error$1);
	    setIsRunningInsertionEffect(false);
	  }

	  if (sourceFiber.tag === HostRoot) {
	    // Error was thrown at the root. There is no parent, so the root
	    // itself should capture it.
	    captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error$1);
	    return;
	  }

	  var fiber = null;

	  {
	    fiber = nearestMountedAncestor;
	  }

	  while (fiber !== null) {
	    if (fiber.tag === HostRoot) {
	      captureCommitPhaseErrorOnRoot(fiber, sourceFiber, error$1);
	      return;
	    } else if (fiber.tag === ClassComponent) {
	      var ctor = fiber.type;
	      var instance = fiber.stateNode;

	      if (typeof ctor.getDerivedStateFromError === 'function' || typeof instance.componentDidCatch === 'function' && !isAlreadyFailedLegacyErrorBoundary(instance)) {
	        var errorInfo = createCapturedValueAtFiber(error$1, sourceFiber);
	        var update = createClassErrorUpdate(fiber, errorInfo, SyncLane);
	        var root = enqueueUpdate(fiber, update, SyncLane);
	        var eventTime = requestEventTime();

	        if (root !== null) {
	          markRootUpdated(root, SyncLane, eventTime);
	          ensureRootIsScheduled(root, eventTime);
	        }

	        return;
	      }
	    }

	    fiber = fiber.return;
	  }

	  {
	    // TODO: Until we re-land skipUnmountedBoundaries (see #20147), this warning
	    // will fire for errors that are thrown by destroy functions inside deleted
	    // trees. What it should instead do is propagate the error to the parent of
	    // the deleted tree. In the meantime, do not add this warning to the
	    // allowlist; this is only for our internal use.
	    error('Internal React error: Attempted to capture a commit phase error ' + 'inside a detached tree. This indicates a bug in React. Likely ' + 'causes include deleting the same fiber more than once, committing an ' + 'already-finished tree, or an inconsistent return pointer.\n\n' + 'Error message:\n\n%s', error$1);
	  }
	}
	function pingSuspendedRoot(root, wakeable, pingedLanes) {
	  var pingCache = root.pingCache;

	  if (pingCache !== null) {
	    // The wakeable resolved, so we no longer need to memoize, because it will
	    // never be thrown again.
	    pingCache.delete(wakeable);
	  }

	  var eventTime = requestEventTime();
	  markRootPinged(root, pingedLanes);
	  warnIfSuspenseResolutionNotWrappedWithActDEV(root);

	  if (workInProgressRoot === root && isSubsetOfLanes(workInProgressRootRenderLanes, pingedLanes)) {
	    // Received a ping at the same priority level at which we're currently
	    // rendering. We might want to restart this render. This should mirror
	    // the logic of whether or not a root suspends once it completes.
	    // TODO: If we're rendering sync either due to Sync, Batched or expired,
	    // we should probably never restart.
	    // If we're suspended with delay, or if it's a retry, we'll always suspend
	    // so we can always restart.
	    if (workInProgressRootExitStatus === RootSuspendedWithDelay || workInProgressRootExitStatus === RootSuspended && includesOnlyRetries(workInProgressRootRenderLanes) && now() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS) {
	      // Restart from the root.
	      prepareFreshStack(root, NoLanes);
	    } else {
	      // Even though we can't restart right now, we might get an
	      // opportunity later. So we mark this render as having a ping.
	      workInProgressRootPingedLanes = mergeLanes(workInProgressRootPingedLanes, pingedLanes);
	    }
	  }

	  ensureRootIsScheduled(root, eventTime);
	}

	function retryTimedOutBoundary(boundaryFiber, retryLane) {
	  // The boundary fiber (a Suspense component or SuspenseList component)
	  // previously was rendered in its fallback state. One of the promises that
	  // suspended it has resolved, which means at least part of the tree was
	  // likely unblocked. Try rendering again, at a new lanes.
	  if (retryLane === NoLane) {
	    // TODO: Assign this to `suspenseState.retryLane`? to avoid
	    // unnecessary entanglement?
	    retryLane = requestRetryLane(boundaryFiber);
	  } // TODO: Special case idle priority?


	  var eventTime = requestEventTime();
	  var root = enqueueConcurrentRenderForLane(boundaryFiber, retryLane);

	  if (root !== null) {
	    markRootUpdated(root, retryLane, eventTime);
	    ensureRootIsScheduled(root, eventTime);
	  }
	}

	function retryDehydratedSuspenseBoundary(boundaryFiber) {
	  var suspenseState = boundaryFiber.memoizedState;
	  var retryLane = NoLane;

	  if (suspenseState !== null) {
	    retryLane = suspenseState.retryLane;
	  }

	  retryTimedOutBoundary(boundaryFiber, retryLane);
	}
	function resolveRetryWakeable(boundaryFiber, wakeable) {
	  var retryLane = NoLane; // Default

	  var retryCache;

	  switch (boundaryFiber.tag) {
	    case SuspenseComponent:
	      retryCache = boundaryFiber.stateNode;
	      var suspenseState = boundaryFiber.memoizedState;

	      if (suspenseState !== null) {
	        retryLane = suspenseState.retryLane;
	      }

	      break;

	    case SuspenseListComponent:
	      retryCache = boundaryFiber.stateNode;
	      break;

	    default:
	      throw new Error('Pinged unknown suspense boundary type. ' + 'This is probably a bug in React.');
	  }

	  if (retryCache !== null) {
	    // The wakeable resolved, so we no longer need to memoize, because it will
	    // never be thrown again.
	    retryCache.delete(wakeable);
	  }

	  retryTimedOutBoundary(boundaryFiber, retryLane);
	} // Computes the next Just Noticeable Difference (JND) boundary.
	// The theory is that a person can't tell the difference between small differences in time.
	// Therefore, if we wait a bit longer than necessary that won't translate to a noticeable
	// difference in the experience. However, waiting for longer might mean that we can avoid
	// showing an intermediate loading state. The longer we have already waited, the harder it
	// is to tell small differences in time. Therefore, the longer we've already waited,
	// the longer we can wait additionally. At some point we have to give up though.
	// We pick a train model where the next boundary commits at a consistent schedule.
	// These particular numbers are vague estimates. We expect to adjust them based on research.

	function jnd(timeElapsed) {
	  return timeElapsed < 120 ? 120 : timeElapsed < 480 ? 480 : timeElapsed < 1080 ? 1080 : timeElapsed < 1920 ? 1920 : timeElapsed < 3000 ? 3000 : timeElapsed < 4320 ? 4320 : ceil(timeElapsed / 1960) * 1960;
	}

	function checkForNestedUpdates() {
	  if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {
	    nestedUpdateCount = 0;
	    rootWithNestedUpdates = null;
	    throw new Error('Maximum update depth exceeded. This can happen when a component ' + 'repeatedly calls setState inside componentWillUpdate or ' + 'componentDidUpdate. React limits the number of nested updates to ' + 'prevent infinite loops.');
	  }

	  {
	    if (nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT) {
	      nestedPassiveUpdateCount = 0;
	      rootWithPassiveNestedUpdates = null;

	      error('Maximum update depth exceeded. This can happen when a component ' + "calls setState inside useEffect, but useEffect either doesn't " + 'have a dependency array, or one of the dependencies changes on ' + 'every render.');
	    }
	  }
	}

	function flushRenderPhaseStrictModeWarningsInDEV() {
	  {
	    ReactStrictModeWarnings.flushLegacyContextWarning();

	    {
	      ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();
	    }
	  }
	}

	function commitDoubleInvokeEffectsInDEV(fiber, hasPassiveEffects) {
	  {
	    // TODO (StrictEffects) Should we set a marker on the root if it contains strict effects
	    // so we don't traverse unnecessarily? similar to subtreeFlags but just at the root level.
	    // Maybe not a big deal since this is DEV only behavior.
	    setCurrentFiber(fiber);
	    invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectUnmountInDEV);

	    if (hasPassiveEffects) {
	      invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectUnmountInDEV);
	    }

	    invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectMountInDEV);

	    if (hasPassiveEffects) {
	      invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectMountInDEV);
	    }

	    resetCurrentFiber();
	  }
	}

	function invokeEffectsInDev(firstChild, fiberFlags, invokeEffectFn) {
	  {
	    // We don't need to re-check StrictEffectsMode here.
	    // This function is only called if that check has already passed.
	    var current = firstChild;
	    var subtreeRoot = null;

	    while (current !== null) {
	      var primarySubtreeFlag = current.subtreeFlags & fiberFlags;

	      if (current !== subtreeRoot && current.child !== null && primarySubtreeFlag !== NoFlags) {
	        current = current.child;
	      } else {
	        if ((current.flags & fiberFlags) !== NoFlags) {
	          invokeEffectFn(current);
	        }

	        if (current.sibling !== null) {
	          current = current.sibling;
	        } else {
	          current = subtreeRoot = current.return;
	        }
	      }
	    }
	  }
	}

	var didWarnStateUpdateForNotYetMountedComponent = null;
	function warnAboutUpdateOnNotYetMountedFiberInDEV(fiber) {
	  {
	    if ((executionContext & RenderContext) !== NoContext) {
	      // We let the other warning about render phase updates deal with this one.
	      return;
	    }

	    if (!(fiber.mode & ConcurrentMode)) {
	      return;
	    }

	    var tag = fiber.tag;

	    if (tag !== IndeterminateComponent && tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef && tag !== MemoComponent && tag !== SimpleMemoComponent) {
	      // Only warn for user-defined components, not internal ones like Suspense.
	      return;
	    } // We show the whole stack but dedupe on the top component's name because
	    // the problematic code almost always lies inside that component.


	    var componentName = getComponentNameFromFiber(fiber) || 'ReactComponent';

	    if (didWarnStateUpdateForNotYetMountedComponent !== null) {
	      if (didWarnStateUpdateForNotYetMountedComponent.has(componentName)) {
	        return;
	      }

	      didWarnStateUpdateForNotYetMountedComponent.add(componentName);
	    } else {
	      didWarnStateUpdateForNotYetMountedComponent = new Set([componentName]);
	    }

	    var previousFiber = current;

	    try {
	      setCurrentFiber(fiber);

	      error("Can't perform a React state update on a component that hasn't mounted yet. " + 'This indicates that you have a side-effect in your render function that ' + 'asynchronously later calls tries to update the component. Move this work to ' + 'useEffect instead.');
	    } finally {
	      if (previousFiber) {
	        setCurrentFiber(fiber);
	      } else {
	        resetCurrentFiber();
	      }
	    }
	  }
	}
	var beginWork$1;

	{
	  var dummyFiber = null;

	  beginWork$1 = function (current, unitOfWork, lanes) {
	    // If a component throws an error, we replay it again in a synchronously
	    // dispatched event, so that the debugger will treat it as an uncaught
	    // error See ReactErrorUtils for more information.
	    // Before entering the begin phase, copy the work-in-progress onto a dummy
	    // fiber. If beginWork throws, we'll use this to reset the state.
	    var originalWorkInProgressCopy = assignFiberPropertiesInDEV(dummyFiber, unitOfWork);

	    try {
	      return beginWork(current, unitOfWork, lanes);
	    } catch (originalError) {
	      if (didSuspendOrErrorWhileHydratingDEV() || originalError !== null && typeof originalError === 'object' && typeof originalError.then === 'function') {
	        // Don't replay promises.
	        // Don't replay errors if we are hydrating and have already suspended or handled an error
	        throw originalError;
	      } // Keep this code in sync with handleError; any changes here must have
	      // corresponding changes there.


	      resetContextDependencies();
	      resetHooksAfterThrow(); // Don't reset current debug fiber, since we're about to work on the
	      // same fiber again.
	      // Unwind the failed stack frame

	      unwindInterruptedWork(current, unitOfWork); // Restore the original properties of the fiber.

	      assignFiberPropertiesInDEV(unitOfWork, originalWorkInProgressCopy);

	      if ( unitOfWork.mode & ProfileMode) {
	        // Reset the profiler timer.
	        startProfilerTimer(unitOfWork);
	      } // Run beginWork again.


	      invokeGuardedCallback(null, beginWork, null, current, unitOfWork, lanes);

	      if (hasCaughtError()) {
	        var replayError = clearCaughtError();

	        if (typeof replayError === 'object' && replayError !== null && replayError._suppressLogging && typeof originalError === 'object' && originalError !== null && !originalError._suppressLogging) {
	          // If suppressed, let the flag carry over to the original error which is the one we'll rethrow.
	          originalError._suppressLogging = true;
	        }
	      } // We always throw the original error in case the second render pass is not idempotent.
	      // This can happen if a memoized function or CommonJS module doesn't throw after first invocation.


	      throw originalError;
	    }
	  };
	}

	var didWarnAboutUpdateInRender = false;
	var didWarnAboutUpdateInRenderForAnotherComponent;

	{
	  didWarnAboutUpdateInRenderForAnotherComponent = new Set();
	}

	function warnAboutRenderPhaseUpdatesInDEV(fiber) {
	  {
	    if (isRendering && !getIsUpdatingOpaqueValueInRenderPhaseInDEV()) {
	      switch (fiber.tag) {
	        case FunctionComponent:
	        case ForwardRef:
	        case SimpleMemoComponent:
	          {
	            var renderingComponentName = workInProgress && getComponentNameFromFiber(workInProgress) || 'Unknown'; // Dedupe by the rendering component because it's the one that needs to be fixed.

	            var dedupeKey = renderingComponentName;

	            if (!didWarnAboutUpdateInRenderForAnotherComponent.has(dedupeKey)) {
	              didWarnAboutUpdateInRenderForAnotherComponent.add(dedupeKey);
	              var setStateComponentName = getComponentNameFromFiber(fiber) || 'Unknown';

	              error('Cannot update a component (`%s`) while rendering a ' + 'different component (`%s`). To locate the bad setState() call inside `%s`, ' + 'follow the stack trace as described in https://reactjs.org/link/setstate-in-render', setStateComponentName, renderingComponentName, renderingComponentName);
	            }

	            break;
	          }

	        case ClassComponent:
	          {
	            if (!didWarnAboutUpdateInRender) {
	              error('Cannot update during an existing state transition (such as ' + 'within `render`). Render methods should be a pure ' + 'function of props and state.');

	              didWarnAboutUpdateInRender = true;
	            }

	            break;
	          }
	      }
	    }
	  }
	}

	function restorePendingUpdaters(root, lanes) {
	  {
	    if (isDevToolsPresent) {
	      var memoizedUpdaters = root.memoizedUpdaters;
	      memoizedUpdaters.forEach(function (schedulingFiber) {
	        addFiberToLanesMap(root, schedulingFiber, lanes);
	      }); // This function intentionally does not clear memoized updaters.
	      // Those may still be relevant to the current commit
	      // and a future one (e.g. Suspense).
	    }
	  }
	}
	var fakeActCallbackNode = {};

	function scheduleCallback$1(priorityLevel, callback) {
	  {
	    // If we're currently inside an `act` scope, bypass Scheduler and push to
	    // the `act` queue instead.
	    var actQueue = ReactCurrentActQueue$1.current;

	    if (actQueue !== null) {
	      actQueue.push(callback);
	      return fakeActCallbackNode;
	    } else {
	      return scheduleCallback(priorityLevel, callback);
	    }
	  }
	}

	function cancelCallback$1(callbackNode) {
	  if ( callbackNode === fakeActCallbackNode) {
	    return;
	  } // In production, always call Scheduler. This function will be stripped out.


	  return cancelCallback(callbackNode);
	}

	function shouldForceFlushFallbacksInDEV() {
	  // Never force flush in production. This function should get stripped out.
	  return  ReactCurrentActQueue$1.current !== null;
	}

	function warnIfUpdatesNotWrappedWithActDEV(fiber) {
	  {
	    if (fiber.mode & ConcurrentMode) {
	      if (!isConcurrentActEnvironment()) {
	        // Not in an act environment. No need to warn.
	        return;
	      }
	    } else {
	      // Legacy mode has additional cases where we suppress a warning.
	      if (!isLegacyActEnvironment()) {
	        // Not in an act environment. No need to warn.
	        return;
	      }

	      if (executionContext !== NoContext) {
	        // Legacy mode doesn't warn if the update is batched, i.e.
	        // batchedUpdates or flushSync.
	        return;
	      }

	      if (fiber.tag !== FunctionComponent && fiber.tag !== ForwardRef && fiber.tag !== SimpleMemoComponent) {
	        // For backwards compatibility with pre-hooks code, legacy mode only
	        // warns for updates that originate from a hook.
	        return;
	      }
	    }

	    if (ReactCurrentActQueue$1.current === null) {
	      var previousFiber = current;

	      try {
	        setCurrentFiber(fiber);

	        error('An update to %s inside a test was not wrapped in act(...).\n\n' + 'When testing, code that causes React state updates should be ' + 'wrapped into act(...):\n\n' + 'act(() => {\n' + '  /* fire events that update state */\n' + '});\n' + '/* assert on the output */\n\n' + "This ensures that you're testing the behavior the user would see " + 'in the browser.' + ' Learn more at https://reactjs.org/link/wrap-tests-with-act', getComponentNameFromFiber(fiber));
	      } finally {
	        if (previousFiber) {
	          setCurrentFiber(fiber);
	        } else {
	          resetCurrentFiber();
	        }
	      }
	    }
	  }
	}

	function warnIfSuspenseResolutionNotWrappedWithActDEV(root) {
	  {
	    if (root.tag !== LegacyRoot && isConcurrentActEnvironment() && ReactCurrentActQueue$1.current === null) {
	      error('A suspended resource finished loading inside a test, but the event ' + 'was not wrapped in act(...).\n\n' + 'When testing, code that resolves suspended data should be wrapped ' + 'into act(...):\n\n' + 'act(() => {\n' + '  /* finish loading suspended data */\n' + '});\n' + '/* assert on the output */\n\n' + "This ensures that you're testing the behavior the user would see " + 'in the browser.' + ' Learn more at https://reactjs.org/link/wrap-tests-with-act');
	    }
	  }
	}

	function setIsRunningInsertionEffect(isRunning) {
	  {
	    isRunningInsertionEffect = isRunning;
	  }
	}

	/* eslint-disable react-internal/prod-error-codes */
	var resolveFamily = null; // $FlowFixMe Flow gets confused by a WeakSet feature check below.

	var failedBoundaries = null;
	var setRefreshHandler = function (handler) {
	  {
	    resolveFamily = handler;
	  }
	};
	function resolveFunctionForHotReloading(type) {
	  {
	    if (resolveFamily === null) {
	      // Hot reloading is disabled.
	      return type;
	    }

	    var family = resolveFamily(type);

	    if (family === undefined) {
	      return type;
	    } // Use the latest known implementation.


	    return family.current;
	  }
	}
	function resolveClassForHotReloading(type) {
	  // No implementation differences.
	  return resolveFunctionForHotReloading(type);
	}
	function resolveForwardRefForHotReloading(type) {
	  {
	    if (resolveFamily === null) {
	      // Hot reloading is disabled.
	      return type;
	    }

	    var family = resolveFamily(type);

	    if (family === undefined) {
	      // Check if we're dealing with a real forwardRef. Don't want to crash early.
	      if (type !== null && type !== undefined && typeof type.render === 'function') {
	        // ForwardRef is special because its resolved .type is an object,
	        // but it's possible that we only have its inner render function in the map.
	        // If that inner render function is different, we'll build a new forwardRef type.
	        var currentRender = resolveFunctionForHotReloading(type.render);

	        if (type.render !== currentRender) {
	          var syntheticType = {
	            $$typeof: REACT_FORWARD_REF_TYPE,
	            render: currentRender
	          };

	          if (type.displayName !== undefined) {
	            syntheticType.displayName = type.displayName;
	          }

	          return syntheticType;
	        }
	      }

	      return type;
	    } // Use the latest known implementation.


	    return family.current;
	  }
	}
	function isCompatibleFamilyForHotReloading(fiber, element) {
	  {
	    if (resolveFamily === null) {
	      // Hot reloading is disabled.
	      return false;
	    }

	    var prevType = fiber.elementType;
	    var nextType = element.type; // If we got here, we know types aren't === equal.

	    var needsCompareFamilies = false;
	    var $$typeofNextType = typeof nextType === 'object' && nextType !== null ? nextType.$$typeof : null;

	    switch (fiber.tag) {
	      case ClassComponent:
	        {
	          if (typeof nextType === 'function') {
	            needsCompareFamilies = true;
	          }

	          break;
	        }

	      case FunctionComponent:
	        {
	          if (typeof nextType === 'function') {
	            needsCompareFamilies = true;
	          } else if ($$typeofNextType === REACT_LAZY_TYPE) {
	            // We don't know the inner type yet.
	            // We're going to assume that the lazy inner type is stable,
	            // and so it is sufficient to avoid reconciling it away.
	            // We're not going to unwrap or actually use the new lazy type.
	            needsCompareFamilies = true;
	          }

	          break;
	        }

	      case ForwardRef:
	        {
	          if ($$typeofNextType === REACT_FORWARD_REF_TYPE) {
	            needsCompareFamilies = true;
	          } else if ($$typeofNextType === REACT_LAZY_TYPE) {
	            needsCompareFamilies = true;
	          }

	          break;
	        }

	      case MemoComponent:
	      case SimpleMemoComponent:
	        {
	          if ($$typeofNextType === REACT_MEMO_TYPE) {
	            // TODO: if it was but can no longer be simple,
	            // we shouldn't set this.
	            needsCompareFamilies = true;
	          } else if ($$typeofNextType === REACT_LAZY_TYPE) {
	            needsCompareFamilies = true;
	          }

	          break;
	        }

	      default:
	        return false;
	    } // Check if both types have a family and it's the same one.


	    if (needsCompareFamilies) {
	      // Note: memo() and forwardRef() we'll compare outer rather than inner type.
	      // This means both of them need to be registered to preserve state.
	      // If we unwrapped and compared the inner types for wrappers instead,
	      // then we would risk falsely saying two separate memo(Foo)
	      // calls are equivalent because they wrap the same Foo function.
	      var prevFamily = resolveFamily(prevType);

	      if (prevFamily !== undefined && prevFamily === resolveFamily(nextType)) {
	        return true;
	      }
	    }

	    return false;
	  }
	}
	function markFailedErrorBoundaryForHotReloading(fiber) {
	  {
	    if (resolveFamily === null) {
	      // Hot reloading is disabled.
	      return;
	    }

	    if (typeof WeakSet !== 'function') {
	      return;
	    }

	    if (failedBoundaries === null) {
	      failedBoundaries = new WeakSet();
	    }

	    failedBoundaries.add(fiber);
	  }
	}
	var scheduleRefresh = function (root, update) {
	  {
	    if (resolveFamily === null) {
	      // Hot reloading is disabled.
	      return;
	    }

	    var staleFamilies = update.staleFamilies,
	        updatedFamilies = update.updatedFamilies;
	    flushPassiveEffects();
	    flushSync(function () {
	      scheduleFibersWithFamiliesRecursively(root.current, updatedFamilies, staleFamilies);
	    });
	  }
	};
	var scheduleRoot = function (root, element) {
	  {
	    if (root.context !== emptyContextObject) {
	      // Super edge case: root has a legacy _renderSubtree context
	      // but we don't know the parentComponent so we can't pass it.
	      // Just ignore. We'll delete this with _renderSubtree code path later.
	      return;
	    }

	    flushPassiveEffects();
	    flushSync(function () {
	      updateContainer(element, root, null, null);
	    });
	  }
	};

	function scheduleFibersWithFamiliesRecursively(fiber, updatedFamilies, staleFamilies) {
	  {
	    var alternate = fiber.alternate,
	        child = fiber.child,
	        sibling = fiber.sibling,
	        tag = fiber.tag,
	        type = fiber.type;
	    var candidateType = null;

	    switch (tag) {
	      case FunctionComponent:
	      case SimpleMemoComponent:
	      case ClassComponent:
	        candidateType = type;
	        break;

	      case ForwardRef:
	        candidateType = type.render;
	        break;
	    }

	    if (resolveFamily === null) {
	      throw new Error('Expected resolveFamily to be set during hot reload.');
	    }

	    var needsRender = false;
	    var needsRemount = false;

	    if (candidateType !== null) {
	      var family = resolveFamily(candidateType);

	      if (family !== undefined) {
	        if (staleFamilies.has(family)) {
	          needsRemount = true;
	        } else if (updatedFamilies.has(family)) {
	          if (tag === ClassComponent) {
	            needsRemount = true;
	          } else {
	            needsRender = true;
	          }
	        }
	      }
	    }

	    if (failedBoundaries !== null) {
	      if (failedBoundaries.has(fiber) || alternate !== null && failedBoundaries.has(alternate)) {
	        needsRemount = true;
	      }
	    }

	    if (needsRemount) {
	      fiber._debugNeedsRemount = true;
	    }

	    if (needsRemount || needsRender) {
	      var _root = enqueueConcurrentRenderForLane(fiber, SyncLane);

	      if (_root !== null) {
	        scheduleUpdateOnFiber(_root, fiber, SyncLane, NoTimestamp);
	      }
	    }

	    if (child !== null && !needsRemount) {
	      scheduleFibersWithFamiliesRecursively(child, updatedFamilies, staleFamilies);
	    }

	    if (sibling !== null) {
	      scheduleFibersWithFamiliesRecursively(sibling, updatedFamilies, staleFamilies);
	    }
	  }
	}

	var findHostInstancesForRefresh = function (root, families) {
	  {
	    var hostInstances = new Set();
	    var types = new Set(families.map(function (family) {
	      return family.current;
	    }));
	    findHostInstancesForMatchingFibersRecursively(root.current, types, hostInstances);
	    return hostInstances;
	  }
	};

	function findHostInstancesForMatchingFibersRecursively(fiber, types, hostInstances) {
	  {
	    var child = fiber.child,
	        sibling = fiber.sibling,
	        tag = fiber.tag,
	        type = fiber.type;
	    var candidateType = null;

	    switch (tag) {
	      case FunctionComponent:
	      case SimpleMemoComponent:
	      case ClassComponent:
	        candidateType = type;
	        break;

	      case ForwardRef:
	        candidateType = type.render;
	        break;
	    }

	    var didMatch = false;

	    if (candidateType !== null) {
	      if (types.has(candidateType)) {
	        didMatch = true;
	      }
	    }

	    if (didMatch) {
	      // We have a match. This only drills down to the closest host components.
	      // There's no need to search deeper because for the purpose of giving
	      // visual feedback, "flashing" outermost parent rectangles is sufficient.
	      findHostInstancesForFiberShallowly(fiber, hostInstances);
	    } else {
	      // If there's no match, maybe there will be one further down in the child tree.
	      if (child !== null) {
	        findHostInstancesForMatchingFibersRecursively(child, types, hostInstances);
	      }
	    }

	    if (sibling !== null) {
	      findHostInstancesForMatchingFibersRecursively(sibling, types, hostInstances);
	    }
	  }
	}

	function findHostInstancesForFiberShallowly(fiber, hostInstances) {
	  {
	    var foundHostInstances = findChildHostInstancesForFiberShallowly(fiber, hostInstances);

	    if (foundHostInstances) {
	      return;
	    } // If we didn't find any host children, fallback to closest host parent.


	    var node = fiber;

	    while (true) {
	      switch (node.tag) {
	        case HostComponent:
	          hostInstances.add(node.stateNode);
	          return;

	        case HostPortal:
	          hostInstances.add(node.stateNode.containerInfo);
	          return;

	        case HostRoot:
	          hostInstances.add(node.stateNode.containerInfo);
	          return;
	      }

	      if (node.return === null) {
	        throw new Error('Expected to reach root first.');
	      }

	      node = node.return;
	    }
	  }
	}

	function findChildHostInstancesForFiberShallowly(fiber, hostInstances) {
	  {
	    var node = fiber;
	    var foundHostInstances = false;

	    while (true) {
	      if (node.tag === HostComponent) {
	        // We got a match.
	        foundHostInstances = true;
	        hostInstances.add(node.stateNode); // There may still be more, so keep searching.
	      } else if (node.child !== null) {
	        node.child.return = node;
	        node = node.child;
	        continue;
	      }

	      if (node === fiber) {
	        return foundHostInstances;
	      }

	      while (node.sibling === null) {
	        if (node.return === null || node.return === fiber) {
	          return foundHostInstances;
	        }

	        node = node.return;
	      }

	      node.sibling.return = node.return;
	      node = node.sibling;
	    }
	  }

	  return false;
	}

	var hasBadMapPolyfill;

	{
	  hasBadMapPolyfill = false;

	  try {
	    var nonExtensibleObject = Object.preventExtensions({});
	    /* eslint-disable no-new */

	    new Map([[nonExtensibleObject, null]]);
	    new Set([nonExtensibleObject]);
	    /* eslint-enable no-new */
	  } catch (e) {
	    // TODO: Consider warning about bad polyfills
	    hasBadMapPolyfill = true;
	  }
	}

	function FiberNode(tag, pendingProps, key, mode) {
	  // Instance
	  this.tag = tag;
	  this.key = key;
	  this.elementType = null;
	  this.type = null;
	  this.stateNode = null; // Fiber

	  this.return = null;
	  this.child = null;
	  this.sibling = null;
	  this.index = 0;
	  this.ref = null;
	  this.pendingProps = pendingProps;
	  this.memoizedProps = null;
	  this.updateQueue = null;
	  this.memoizedState = null;
	  this.dependencies = null;
	  this.mode = mode; // Effects

	  this.flags = NoFlags;
	  this.subtreeFlags = NoFlags;
	  this.deletions = null;
	  this.lanes = NoLanes;
	  this.childLanes = NoLanes;
	  this.alternate = null;

	  {
	    // Note: The following is done to avoid a v8 performance cliff.
	    //
	    // Initializing the fields below to smis and later updating them with
	    // double values will cause Fibers to end up having separate shapes.
	    // This behavior/bug has something to do with Object.preventExtension().
	    // Fortunately this only impacts DEV builds.
	    // Unfortunately it makes React unusably slow for some applications.
	    // To work around this, initialize the fields below with doubles.
	    //
	    // Learn more about this here:
	    // https://github.com/facebook/react/issues/14365
	    // https://bugs.chromium.org/p/v8/issues/detail?id=8538
	    this.actualDuration = Number.NaN;
	    this.actualStartTime = Number.NaN;
	    this.selfBaseDuration = Number.NaN;
	    this.treeBaseDuration = Number.NaN; // It's okay to replace the initial doubles with smis after initialization.
	    // This won't trigger the performance cliff mentioned above,
	    // and it simplifies other profiler code (including DevTools).

	    this.actualDuration = 0;
	    this.actualStartTime = -1;
	    this.selfBaseDuration = 0;
	    this.treeBaseDuration = 0;
	  }

	  {
	    // This isn't directly used but is handy for debugging internals:
	    this._debugSource = null;
	    this._debugOwner = null;
	    this._debugNeedsRemount = false;
	    this._debugHookTypes = null;

	    if (!hasBadMapPolyfill && typeof Object.preventExtensions === 'function') {
	      Object.preventExtensions(this);
	    }
	  }
	} // This is a constructor function, rather than a POJO constructor, still
	// please ensure we do the following:
	// 1) Nobody should add any instance methods on this. Instance methods can be
	//    more difficult to predict when they get optimized and they are almost
	//    never inlined properly in static compilers.
	// 2) Nobody should rely on `instanceof Fiber` for type testing. We should
	//    always know when it is a fiber.
	// 3) We might want to experiment with using numeric keys since they are easier
	//    to optimize in a non-JIT environment.
	// 4) We can easily go from a constructor to a createFiber object literal if that
	//    is faster.
	// 5) It should be easy to port this to a C struct and keep a C implementation
	//    compatible.


	var createFiber = function (tag, pendingProps, key, mode) {
	  // $FlowFixMe: the shapes are exact here but Flow doesn't like constructors
	  return new FiberNode(tag, pendingProps, key, mode);
	};

	function shouldConstruct$1(Component) {
	  var prototype = Component.prototype;
	  return !!(prototype && prototype.isReactComponent);
	}

	function isSimpleFunctionComponent(type) {
	  return typeof type === 'function' && !shouldConstruct$1(type) && type.defaultProps === undefined;
	}
	function resolveLazyComponentTag(Component) {
	  if (typeof Component === 'function') {
	    return shouldConstruct$1(Component) ? ClassComponent : FunctionComponent;
	  } else if (Component !== undefined && Component !== null) {
	    var $$typeof = Component.$$typeof;

	    if ($$typeof === REACT_FORWARD_REF_TYPE) {
	      return ForwardRef;
	    }

	    if ($$typeof === REACT_MEMO_TYPE) {
	      return MemoComponent;
	    }
	  }

	  return IndeterminateComponent;
	} // This is used to create an alternate fiber to do work on.

	function createWorkInProgress(current, pendingProps) {
	  var workInProgress = current.alternate;

	  if (workInProgress === null) {
	    // We use a double buffering pooling technique because we know that we'll
	    // only ever need at most two versions of a tree. We pool the "other" unused
	    // node that we're free to reuse. This is lazily created to avoid allocating
	    // extra objects for things that are never updated. It also allow us to
	    // reclaim the extra memory if needed.
	    workInProgress = createFiber(current.tag, pendingProps, current.key, current.mode);
	    workInProgress.elementType = current.elementType;
	    workInProgress.type = current.type;
	    workInProgress.stateNode = current.stateNode;

	    {
	      // DEV-only fields
	      workInProgress._debugSource = current._debugSource;
	      workInProgress._debugOwner = current._debugOwner;
	      workInProgress._debugHookTypes = current._debugHookTypes;
	    }

	    workInProgress.alternate = current;
	    current.alternate = workInProgress;
	  } else {
	    workInProgress.pendingProps = pendingProps; // Needed because Blocks store data on type.

	    workInProgress.type = current.type; // We already have an alternate.
	    // Reset the effect tag.

	    workInProgress.flags = NoFlags; // The effects are no longer valid.

	    workInProgress.subtreeFlags = NoFlags;
	    workInProgress.deletions = null;

	    {
	      // We intentionally reset, rather than copy, actualDuration & actualStartTime.
	      // This prevents time from endlessly accumulating in new commits.
	      // This has the downside of resetting values for different priority renders,
	      // But works for yielding (the common case) and should support resuming.
	      workInProgress.actualDuration = 0;
	      workInProgress.actualStartTime = -1;
	    }
	  } // Reset all effects except static ones.
	  // Static effects are not specific to a render.


	  workInProgress.flags = current.flags & StaticMask;
	  workInProgress.childLanes = current.childLanes;
	  workInProgress.lanes = current.lanes;
	  workInProgress.child = current.child;
	  workInProgress.memoizedProps = current.memoizedProps;
	  workInProgress.memoizedState = current.memoizedState;
	  workInProgress.updateQueue = current.updateQueue; // Clone the dependencies object. This is mutated during the render phase, so
	  // it cannot be shared with the current fiber.

	  var currentDependencies = current.dependencies;
	  workInProgress.dependencies = currentDependencies === null ? null : {
	    lanes: currentDependencies.lanes,
	    firstContext: currentDependencies.firstContext
	  }; // These will be overridden during the parent's reconciliation

	  workInProgress.sibling = current.sibling;
	  workInProgress.index = current.index;
	  workInProgress.ref = current.ref;

	  {
	    workInProgress.selfBaseDuration = current.selfBaseDuration;
	    workInProgress.treeBaseDuration = current.treeBaseDuration;
	  }

	  {
	    workInProgress._debugNeedsRemount = current._debugNeedsRemount;

	    switch (workInProgress.tag) {
	      case IndeterminateComponent:
	      case FunctionComponent:
	      case SimpleMemoComponent:
	        workInProgress.type = resolveFunctionForHotReloading(current.type);
	        break;

	      case ClassComponent:
	        workInProgress.type = resolveClassForHotReloading(current.type);
	        break;

	      case ForwardRef:
	        workInProgress.type = resolveForwardRefForHotReloading(current.type);
	        break;
	    }
	  }

	  return workInProgress;
	} // Used to reuse a Fiber for a second pass.

	function resetWorkInProgress(workInProgress, renderLanes) {
	  // This resets the Fiber to what createFiber or createWorkInProgress would
	  // have set the values to before during the first pass. Ideally this wouldn't
	  // be necessary but unfortunately many code paths reads from the workInProgress
	  // when they should be reading from current and writing to workInProgress.
	  // We assume pendingProps, index, key, ref, return are still untouched to
	  // avoid doing another reconciliation.
	  // Reset the effect flags but keep any Placement tags, since that's something
	  // that child fiber is setting, not the reconciliation.
	  workInProgress.flags &= StaticMask | Placement; // The effects are no longer valid.

	  var current = workInProgress.alternate;

	  if (current === null) {
	    // Reset to createFiber's initial values.
	    workInProgress.childLanes = NoLanes;
	    workInProgress.lanes = renderLanes;
	    workInProgress.child = null;
	    workInProgress.subtreeFlags = NoFlags;
	    workInProgress.memoizedProps = null;
	    workInProgress.memoizedState = null;
	    workInProgress.updateQueue = null;
	    workInProgress.dependencies = null;
	    workInProgress.stateNode = null;

	    {
	      // Note: We don't reset the actualTime counts. It's useful to accumulate
	      // actual time across multiple render passes.
	      workInProgress.selfBaseDuration = 0;
	      workInProgress.treeBaseDuration = 0;
	    }
	  } else {
	    // Reset to the cloned values that createWorkInProgress would've.
	    workInProgress.childLanes = current.childLanes;
	    workInProgress.lanes = current.lanes;
	    workInProgress.child = current.child;
	    workInProgress.subtreeFlags = NoFlags;
	    workInProgress.deletions = null;
	    workInProgress.memoizedProps = current.memoizedProps;
	    workInProgress.memoizedState = current.memoizedState;
	    workInProgress.updateQueue = current.updateQueue; // Needed because Blocks store data on type.

	    workInProgress.type = current.type; // Clone the dependencies object. This is mutated during the render phase, so
	    // it cannot be shared with the current fiber.

	    var currentDependencies = current.dependencies;
	    workInProgress.dependencies = currentDependencies === null ? null : {
	      lanes: currentDependencies.lanes,
	      firstContext: currentDependencies.firstContext
	    };

	    {
	      // Note: We don't reset the actualTime counts. It's useful to accumulate
	      // actual time across multiple render passes.
	      workInProgress.selfBaseDuration = current.selfBaseDuration;
	      workInProgress.treeBaseDuration = current.treeBaseDuration;
	    }
	  }

	  return workInProgress;
	}
	function createHostRootFiber(tag, isStrictMode, concurrentUpdatesByDefaultOverride) {
	  var mode;

	  if (tag === ConcurrentRoot) {
	    mode = ConcurrentMode;

	    if (isStrictMode === true) {
	      mode |= StrictLegacyMode;

	      {
	        mode |= StrictEffectsMode;
	      }
	    }
	  } else {
	    mode = NoMode;
	  }

	  if ( isDevToolsPresent) {
	    // Always collect profile timings when DevTools are present.
	    // This enables DevTools to start capturing timing at any point–
	    // Without some nodes in the tree having empty base times.
	    mode |= ProfileMode;
	  }

	  return createFiber(HostRoot, null, null, mode);
	}
	function createFiberFromTypeAndProps(type, // React$ElementType
	key, pendingProps, owner, mode, lanes) {
	  var fiberTag = IndeterminateComponent; // The resolved type is set if we know what the final type will be. I.e. it's not lazy.

	  var resolvedType = type;

	  if (typeof type === 'function') {
	    if (shouldConstruct$1(type)) {
	      fiberTag = ClassComponent;

	      {
	        resolvedType = resolveClassForHotReloading(resolvedType);
	      }
	    } else {
	      {
	        resolvedType = resolveFunctionForHotReloading(resolvedType);
	      }
	    }
	  } else if (typeof type === 'string') {
	    fiberTag = HostComponent;
	  } else {
	    getTag: switch (type) {
	      case REACT_FRAGMENT_TYPE:
	        return createFiberFromFragment(pendingProps.children, mode, lanes, key);

	      case REACT_STRICT_MODE_TYPE:
	        fiberTag = Mode;
	        mode |= StrictLegacyMode;

	        if ( (mode & ConcurrentMode) !== NoMode) {
	          // Strict effects should never run on legacy roots
	          mode |= StrictEffectsMode;
	        }

	        break;

	      case REACT_PROFILER_TYPE:
	        return createFiberFromProfiler(pendingProps, mode, lanes, key);

	      case REACT_SUSPENSE_TYPE:
	        return createFiberFromSuspense(pendingProps, mode, lanes, key);

	      case REACT_SUSPENSE_LIST_TYPE:
	        return createFiberFromSuspenseList(pendingProps, mode, lanes, key);

	      case REACT_OFFSCREEN_TYPE:
	        return createFiberFromOffscreen(pendingProps, mode, lanes, key);

	      case REACT_LEGACY_HIDDEN_TYPE:

	      // eslint-disable-next-line no-fallthrough

	      case REACT_SCOPE_TYPE:

	      // eslint-disable-next-line no-fallthrough

	      case REACT_CACHE_TYPE:

	      // eslint-disable-next-line no-fallthrough

	      case REACT_TRACING_MARKER_TYPE:

	      // eslint-disable-next-line no-fallthrough

	      case REACT_DEBUG_TRACING_MODE_TYPE:

	      // eslint-disable-next-line no-fallthrough

	      default:
	        {
	          if (typeof type === 'object' && type !== null) {
	            switch (type.$$typeof) {
	              case REACT_PROVIDER_TYPE:
	                fiberTag = ContextProvider;
	                break getTag;

	              case REACT_CONTEXT_TYPE:
	                // This is a consumer
	                fiberTag = ContextConsumer;
	                break getTag;

	              case REACT_FORWARD_REF_TYPE:
	                fiberTag = ForwardRef;

	                {
	                  resolvedType = resolveForwardRefForHotReloading(resolvedType);
	                }

	                break getTag;

	              case REACT_MEMO_TYPE:
	                fiberTag = MemoComponent;
	                break getTag;

	              case REACT_LAZY_TYPE:
	                fiberTag = LazyComponent;
	                resolvedType = null;
	                break getTag;
	            }
	          }

	          var info = '';

	          {
	            if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {
	              info += ' You likely forgot to export your component from the file ' + "it's defined in, or you might have mixed up default and " + 'named imports.';
	            }

	            var ownerName = owner ? getComponentNameFromFiber(owner) : null;

	            if (ownerName) {
	              info += '\n\nCheck the render method of `' + ownerName + '`.';
	            }
	          }

	          throw new Error('Element type is invalid: expected a string (for built-in ' + 'components) or a class/function (for composite components) ' + ("but got: " + (type == null ? type : typeof type) + "." + info));
	        }
	    }
	  }

	  var fiber = createFiber(fiberTag, pendingProps, key, mode);
	  fiber.elementType = type;
	  fiber.type = resolvedType;
	  fiber.lanes = lanes;

	  {
	    fiber._debugOwner = owner;
	  }

	  return fiber;
	}
	function createFiberFromElement(element, mode, lanes) {
	  var owner = null;

	  {
	    owner = element._owner;
	  }

	  var type = element.type;
	  var key = element.key;
	  var pendingProps = element.props;
	  var fiber = createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes);

	  {
	    fiber._debugSource = element._source;
	    fiber._debugOwner = element._owner;
	  }

	  return fiber;
	}
	function createFiberFromFragment(elements, mode, lanes, key) {
	  var fiber = createFiber(Fragment, elements, key, mode);
	  fiber.lanes = lanes;
	  return fiber;
	}

	function createFiberFromProfiler(pendingProps, mode, lanes, key) {
	  {
	    if (typeof pendingProps.id !== 'string') {
	      error('Profiler must specify an "id" of type `string` as a prop. Received the type `%s` instead.', typeof pendingProps.id);
	    }
	  }

	  var fiber = createFiber(Profiler, pendingProps, key, mode | ProfileMode);
	  fiber.elementType = REACT_PROFILER_TYPE;
	  fiber.lanes = lanes;

	  {
	    fiber.stateNode = {
	      effectDuration: 0,
	      passiveEffectDuration: 0
	    };
	  }

	  return fiber;
	}

	function createFiberFromSuspense(pendingProps, mode, lanes, key) {
	  var fiber = createFiber(SuspenseComponent, pendingProps, key, mode);
	  fiber.elementType = REACT_SUSPENSE_TYPE;
	  fiber.lanes = lanes;
	  return fiber;
	}
	function createFiberFromSuspenseList(pendingProps, mode, lanes, key) {
	  var fiber = createFiber(SuspenseListComponent, pendingProps, key, mode);
	  fiber.elementType = REACT_SUSPENSE_LIST_TYPE;
	  fiber.lanes = lanes;
	  return fiber;
	}
	function createFiberFromOffscreen(pendingProps, mode, lanes, key) {
	  var fiber = createFiber(OffscreenComponent, pendingProps, key, mode);
	  fiber.elementType = REACT_OFFSCREEN_TYPE;
	  fiber.lanes = lanes;
	  var primaryChildInstance = {
	    isHidden: false
	  };
	  fiber.stateNode = primaryChildInstance;
	  return fiber;
	}
	function createFiberFromText(content, mode, lanes) {
	  var fiber = createFiber(HostText, content, null, mode);
	  fiber.lanes = lanes;
	  return fiber;
	}
	function createFiberFromHostInstanceForDeletion() {
	  var fiber = createFiber(HostComponent, null, null, NoMode);
	  fiber.elementType = 'DELETED';
	  return fiber;
	}
	function createFiberFromDehydratedFragment(dehydratedNode) {
	  var fiber = createFiber(DehydratedFragment, null, null, NoMode);
	  fiber.stateNode = dehydratedNode;
	  return fiber;
	}
	function createFiberFromPortal(portal, mode, lanes) {
	  var pendingProps = portal.children !== null ? portal.children : [];
	  var fiber = createFiber(HostPortal, pendingProps, portal.key, mode);
	  fiber.lanes = lanes;
	  fiber.stateNode = {
	    containerInfo: portal.containerInfo,
	    pendingChildren: null,
	    // Used by persistent updates
	    implementation: portal.implementation
	  };
	  return fiber;
	} // Used for stashing WIP properties to replay failed work in DEV.

	function assignFiberPropertiesInDEV(target, source) {
	  if (target === null) {
	    // This Fiber's initial properties will always be overwritten.
	    // We only use a Fiber to ensure the same hidden class so DEV isn't slow.
	    target = createFiber(IndeterminateComponent, null, null, NoMode);
	  } // This is intentionally written as a list of all properties.
	  // We tried to use Object.assign() instead but this is called in
	  // the hottest path, and Object.assign() was too slow:
	  // https://github.com/facebook/react/issues/12502
	  // This code is DEV-only so size is not a concern.


	  target.tag = source.tag;
	  target.key = source.key;
	  target.elementType = source.elementType;
	  target.type = source.type;
	  target.stateNode = source.stateNode;
	  target.return = source.return;
	  target.child = source.child;
	  target.sibling = source.sibling;
	  target.index = source.index;
	  target.ref = source.ref;
	  target.pendingProps = source.pendingProps;
	  target.memoizedProps = source.memoizedProps;
	  target.updateQueue = source.updateQueue;
	  target.memoizedState = source.memoizedState;
	  target.dependencies = source.dependencies;
	  target.mode = source.mode;
	  target.flags = source.flags;
	  target.subtreeFlags = source.subtreeFlags;
	  target.deletions = source.deletions;
	  target.lanes = source.lanes;
	  target.childLanes = source.childLanes;
	  target.alternate = source.alternate;

	  {
	    target.actualDuration = source.actualDuration;
	    target.actualStartTime = source.actualStartTime;
	    target.selfBaseDuration = source.selfBaseDuration;
	    target.treeBaseDuration = source.treeBaseDuration;
	  }

	  target._debugSource = source._debugSource;
	  target._debugOwner = source._debugOwner;
	  target._debugNeedsRemount = source._debugNeedsRemount;
	  target._debugHookTypes = source._debugHookTypes;
	  return target;
	}

	function FiberRootNode(containerInfo, tag, hydrate, identifierPrefix, onRecoverableError) {
	  this.tag = tag;
	  this.containerInfo = containerInfo;
	  this.pendingChildren = null;
	  this.current = null;
	  this.pingCache = null;
	  this.finishedWork = null;
	  this.timeoutHandle = noTimeout;
	  this.context = null;
	  this.pendingContext = null;
	  this.callbackNode = null;
	  this.callbackPriority = NoLane;
	  this.eventTimes = createLaneMap(NoLanes);
	  this.expirationTimes = createLaneMap(NoTimestamp);
	  this.pendingLanes = NoLanes;
	  this.suspendedLanes = NoLanes;
	  this.pingedLanes = NoLanes;
	  this.expiredLanes = NoLanes;
	  this.mutableReadLanes = NoLanes;
	  this.finishedLanes = NoLanes;
	  this.entangledLanes = NoLanes;
	  this.entanglements = createLaneMap(NoLanes);
	  this.identifierPrefix = identifierPrefix;
	  this.onRecoverableError = onRecoverableError;

	  {
	    this.mutableSourceEagerHydrationData = null;
	  }

	  {
	    this.effectDuration = 0;
	    this.passiveEffectDuration = 0;
	  }

	  {
	    this.memoizedUpdaters = new Set();
	    var pendingUpdatersLaneMap = this.pendingUpdatersLaneMap = [];

	    for (var _i = 0; _i < TotalLanes; _i++) {
	      pendingUpdatersLaneMap.push(new Set());
	    }
	  }

	  {
	    switch (tag) {
	      case ConcurrentRoot:
	        this._debugRootType = hydrate ? 'hydrateRoot()' : 'createRoot()';
	        break;

	      case LegacyRoot:
	        this._debugRootType = hydrate ? 'hydrate()' : 'render()';
	        break;
	    }
	  }
	}

	function createFiberRoot(containerInfo, tag, hydrate, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, // TODO: We have several of these arguments that are conceptually part of the
	// host config, but because they are passed in at runtime, we have to thread
	// them through the root constructor. Perhaps we should put them all into a
	// single type, like a DynamicHostConfig that is defined by the renderer.
	identifierPrefix, onRecoverableError, transitionCallbacks) {
	  var root = new FiberRootNode(containerInfo, tag, hydrate, identifierPrefix, onRecoverableError);
	  // stateNode is any.


	  var uninitializedFiber = createHostRootFiber(tag, isStrictMode);
	  root.current = uninitializedFiber;
	  uninitializedFiber.stateNode = root;

	  {
	    var _initialState = {
	      element: initialChildren,
	      isDehydrated: hydrate,
	      cache: null,
	      // not enabled yet
	      transitions: null,
	      pendingSuspenseBoundaries: null
	    };
	    uninitializedFiber.memoizedState = _initialState;
	  }

	  initializeUpdateQueue(uninitializedFiber);
	  return root;
	}

	var ReactVersion = '18.3.1';

	function createPortal(children, containerInfo, // TODO: figure out the API for cross-renderer implementation.
	implementation) {
	  var key = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;

	  {
	    checkKeyStringCoercion(key);
	  }

	  return {
	    // This tag allow us to uniquely identify this as a React Portal
	    $$typeof: REACT_PORTAL_TYPE,
	    key: key == null ? null : '' + key,
	    children: children,
	    containerInfo: containerInfo,
	    implementation: implementation
	  };
	}

	var didWarnAboutNestedUpdates;
	var didWarnAboutFindNodeInStrictMode;

	{
	  didWarnAboutNestedUpdates = false;
	  didWarnAboutFindNodeInStrictMode = {};
	}

	function getContextForSubtree(parentComponent) {
	  if (!parentComponent) {
	    return emptyContextObject;
	  }

	  var fiber = get(parentComponent);
	  var parentContext = findCurrentUnmaskedContext(fiber);

	  if (fiber.tag === ClassComponent) {
	    var Component = fiber.type;

	    if (isContextProvider(Component)) {
	      return processChildContext(fiber, Component, parentContext);
	    }
	  }

	  return parentContext;
	}

	function findHostInstanceWithWarning(component, methodName) {
	  {
	    var fiber = get(component);

	    if (fiber === undefined) {
	      if (typeof component.render === 'function') {
	        throw new Error('Unable to find node on an unmounted component.');
	      } else {
	        var keys = Object.keys(component).join(',');
	        throw new Error("Argument appears to not be a ReactComponent. Keys: " + keys);
	      }
	    }

	    var hostFiber = findCurrentHostFiber(fiber);

	    if (hostFiber === null) {
	      return null;
	    }

	    if (hostFiber.mode & StrictLegacyMode) {
	      var componentName = getComponentNameFromFiber(fiber) || 'Component';

	      if (!didWarnAboutFindNodeInStrictMode[componentName]) {
	        didWarnAboutFindNodeInStrictMode[componentName] = true;
	        var previousFiber = current;

	        try {
	          setCurrentFiber(hostFiber);

	          if (fiber.mode & StrictLegacyMode) {
	            error('%s is deprecated in StrictMode. ' + '%s was passed an instance of %s which is inside StrictMode. ' + 'Instead, add a ref directly to the element you want to reference. ' + 'Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-find-node', methodName, methodName, componentName);
	          } else {
	            error('%s is deprecated in StrictMode. ' + '%s was passed an instance of %s which renders StrictMode children. ' + 'Instead, add a ref directly to the element you want to reference. ' + 'Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-find-node', methodName, methodName, componentName);
	          }
	        } finally {
	          // Ideally this should reset to previous but this shouldn't be called in
	          // render and there's another warning for that anyway.
	          if (previousFiber) {
	            setCurrentFiber(previousFiber);
	          } else {
	            resetCurrentFiber();
	          }
	        }
	      }
	    }

	    return hostFiber.stateNode;
	  }
	}

	function createContainer(containerInfo, tag, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
	  var hydrate = false;
	  var initialChildren = null;
	  return createFiberRoot(containerInfo, tag, hydrate, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
	}
	function createHydrationContainer(initialChildren, // TODO: Remove `callback` when we delete legacy mode.
	callback, containerInfo, tag, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
	  var hydrate = true;
	  var root = createFiberRoot(containerInfo, tag, hydrate, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError); // TODO: Move this to FiberRoot constructor

	  root.context = getContextForSubtree(null); // Schedule the initial render. In a hydration root, this is different from
	  // a regular update because the initial render must match was was rendered
	  // on the server.
	  // NOTE: This update intentionally doesn't have a payload. We're only using
	  // the update to schedule work on the root fiber (and, for legacy roots, to
	  // enqueue the callback if one is provided).

	  var current = root.current;
	  var eventTime = requestEventTime();
	  var lane = requestUpdateLane(current);
	  var update = createUpdate(eventTime, lane);
	  update.callback = callback !== undefined && callback !== null ? callback : null;
	  enqueueUpdate(current, update, lane);
	  scheduleInitialHydrationOnRoot(root, lane, eventTime);
	  return root;
	}
	function updateContainer(element, container, parentComponent, callback) {
	  {
	    onScheduleRoot(container, element);
	  }

	  var current$1 = container.current;
	  var eventTime = requestEventTime();
	  var lane = requestUpdateLane(current$1);

	  {
	    markRenderScheduled(lane);
	  }

	  var context = getContextForSubtree(parentComponent);

	  if (container.context === null) {
	    container.context = context;
	  } else {
	    container.pendingContext = context;
	  }

	  {
	    if (isRendering && current !== null && !didWarnAboutNestedUpdates) {
	      didWarnAboutNestedUpdates = true;

	      error('Render methods should be a pure function of props and state; ' + 'triggering nested component updates from render is not allowed. ' + 'If necessary, trigger nested updates in componentDidUpdate.\n\n' + 'Check the render method of %s.', getComponentNameFromFiber(current) || 'Unknown');
	    }
	  }

	  var update = createUpdate(eventTime, lane); // Caution: React DevTools currently depends on this property
	  // being called "element".

	  update.payload = {
	    element: element
	  };
	  callback = callback === undefined ? null : callback;

	  if (callback !== null) {
	    {
	      if (typeof callback !== 'function') {
	        error('render(...): Expected the last optional `callback` argument to be a ' + 'function. Instead received: %s.', callback);
	      }
	    }

	    update.callback = callback;
	  }

	  var root = enqueueUpdate(current$1, update, lane);

	  if (root !== null) {
	    scheduleUpdateOnFiber(root, current$1, lane, eventTime);
	    entangleTransitions(root, current$1, lane);
	  }

	  return lane;
	}
	function getPublicRootInstance(container) {
	  var containerFiber = container.current;

	  if (!containerFiber.child) {
	    return null;
	  }

	  switch (containerFiber.child.tag) {
	    case HostComponent:
	      return getPublicInstance(containerFiber.child.stateNode);

	    default:
	      return containerFiber.child.stateNode;
	  }
	}
	function attemptSynchronousHydration$1(fiber) {
	  switch (fiber.tag) {
	    case HostRoot:
	      {
	        var root = fiber.stateNode;

	        if (isRootDehydrated(root)) {
	          // Flush the first scheduled "update".
	          var lanes = getHighestPriorityPendingLanes(root);
	          flushRoot(root, lanes);
	        }

	        break;
	      }

	    case SuspenseComponent:
	      {
	        flushSync(function () {
	          var root = enqueueConcurrentRenderForLane(fiber, SyncLane);

	          if (root !== null) {
	            var eventTime = requestEventTime();
	            scheduleUpdateOnFiber(root, fiber, SyncLane, eventTime);
	          }
	        }); // If we're still blocked after this, we need to increase
	        // the priority of any promises resolving within this
	        // boundary so that they next attempt also has higher pri.

	        var retryLane = SyncLane;
	        markRetryLaneIfNotHydrated(fiber, retryLane);
	        break;
	      }
	  }
	}

	function markRetryLaneImpl(fiber, retryLane) {
	  var suspenseState = fiber.memoizedState;

	  if (suspenseState !== null && suspenseState.dehydrated !== null) {
	    suspenseState.retryLane = higherPriorityLane(suspenseState.retryLane, retryLane);
	  }
	} // Increases the priority of thenables when they resolve within this boundary.


	function markRetryLaneIfNotHydrated(fiber, retryLane) {
	  markRetryLaneImpl(fiber, retryLane);
	  var alternate = fiber.alternate;

	  if (alternate) {
	    markRetryLaneImpl(alternate, retryLane);
	  }
	}
	function attemptContinuousHydration$1(fiber) {
	  if (fiber.tag !== SuspenseComponent) {
	    // We ignore HostRoots here because we can't increase
	    // their priority and they should not suspend on I/O,
	    // since you have to wrap anything that might suspend in
	    // Suspense.
	    return;
	  }

	  var lane = SelectiveHydrationLane;
	  var root = enqueueConcurrentRenderForLane(fiber, lane);

	  if (root !== null) {
	    var eventTime = requestEventTime();
	    scheduleUpdateOnFiber(root, fiber, lane, eventTime);
	  }

	  markRetryLaneIfNotHydrated(fiber, lane);
	}
	function attemptHydrationAtCurrentPriority$1(fiber) {
	  if (fiber.tag !== SuspenseComponent) {
	    // We ignore HostRoots here because we can't increase
	    // their priority other than synchronously flush it.
	    return;
	  }

	  var lane = requestUpdateLane(fiber);
	  var root = enqueueConcurrentRenderForLane(fiber, lane);

	  if (root !== null) {
	    var eventTime = requestEventTime();
	    scheduleUpdateOnFiber(root, fiber, lane, eventTime);
	  }

	  markRetryLaneIfNotHydrated(fiber, lane);
	}
	function findHostInstanceWithNoPortals(fiber) {
	  var hostFiber = findCurrentHostFiberWithNoPortals(fiber);

	  if (hostFiber === null) {
	    return null;
	  }

	  return hostFiber.stateNode;
	}

	var shouldErrorImpl = function (fiber) {
	  return null;
	};

	function shouldError(fiber) {
	  return shouldErrorImpl(fiber);
	}

	var shouldSuspendImpl = function (fiber) {
	  return false;
	};

	function shouldSuspend(fiber) {
	  return shouldSuspendImpl(fiber);
	}
	var overrideHookState = null;
	var overrideHookStateDeletePath = null;
	var overrideHookStateRenamePath = null;
	var overrideProps = null;
	var overridePropsDeletePath = null;
	var overridePropsRenamePath = null;
	var scheduleUpdate = null;
	var setErrorHandler = null;
	var setSuspenseHandler = null;

	{
	  var copyWithDeleteImpl = function (obj, path, index) {
	    var key = path[index];
	    var updated = isArray(obj) ? obj.slice() : assign({}, obj);

	    if (index + 1 === path.length) {
	      if (isArray(updated)) {
	        updated.splice(key, 1);
	      } else {
	        delete updated[key];
	      }

	      return updated;
	    } // $FlowFixMe number or string is fine here


	    updated[key] = copyWithDeleteImpl(obj[key], path, index + 1);
	    return updated;
	  };

	  var copyWithDelete = function (obj, path) {
	    return copyWithDeleteImpl(obj, path, 0);
	  };

	  var copyWithRenameImpl = function (obj, oldPath, newPath, index) {
	    var oldKey = oldPath[index];
	    var updated = isArray(obj) ? obj.slice() : assign({}, obj);

	    if (index + 1 === oldPath.length) {
	      var newKey = newPath[index]; // $FlowFixMe number or string is fine here

	      updated[newKey] = updated[oldKey];

	      if (isArray(updated)) {
	        updated.splice(oldKey, 1);
	      } else {
	        delete updated[oldKey];
	      }
	    } else {
	      // $FlowFixMe number or string is fine here
	      updated[oldKey] = copyWithRenameImpl( // $FlowFixMe number or string is fine here
	      obj[oldKey], oldPath, newPath, index + 1);
	    }

	    return updated;
	  };

	  var copyWithRename = function (obj, oldPath, newPath) {
	    if (oldPath.length !== newPath.length) {
	      warn('copyWithRename() expects paths of the same length');

	      return;
	    } else {
	      for (var i = 0; i < newPath.length - 1; i++) {
	        if (oldPath[i] !== newPath[i]) {
	          warn('copyWithRename() expects paths to be the same except for the deepest key');

	          return;
	        }
	      }
	    }

	    return copyWithRenameImpl(obj, oldPath, newPath, 0);
	  };

	  var copyWithSetImpl = function (obj, path, index, value) {
	    if (index >= path.length) {
	      return value;
	    }

	    var key = path[index];
	    var updated = isArray(obj) ? obj.slice() : assign({}, obj); // $FlowFixMe number or string is fine here

	    updated[key] = copyWithSetImpl(obj[key], path, index + 1, value);
	    return updated;
	  };

	  var copyWithSet = function (obj, path, value) {
	    return copyWithSetImpl(obj, path, 0, value);
	  };

	  var findHook = function (fiber, id) {
	    // For now, the "id" of stateful hooks is just the stateful hook index.
	    // This may change in the future with e.g. nested hooks.
	    var currentHook = fiber.memoizedState;

	    while (currentHook !== null && id > 0) {
	      currentHook = currentHook.next;
	      id--;
	    }

	    return currentHook;
	  }; // Support DevTools editable values for useState and useReducer.


	  overrideHookState = function (fiber, id, path, value) {
	    var hook = findHook(fiber, id);

	    if (hook !== null) {
	      var newState = copyWithSet(hook.memoizedState, path, value);
	      hook.memoizedState = newState;
	      hook.baseState = newState; // We aren't actually adding an update to the queue,
	      // because there is no update we can add for useReducer hooks that won't trigger an error.
	      // (There's no appropriate action type for DevTools overrides.)
	      // As a result though, React will see the scheduled update as a noop and bailout.
	      // Shallow cloning props works as a workaround for now to bypass the bailout check.

	      fiber.memoizedProps = assign({}, fiber.memoizedProps);
	      var root = enqueueConcurrentRenderForLane(fiber, SyncLane);

	      if (root !== null) {
	        scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);
	      }
	    }
	  };

	  overrideHookStateDeletePath = function (fiber, id, path) {
	    var hook = findHook(fiber, id);

	    if (hook !== null) {
	      var newState = copyWithDelete(hook.memoizedState, path);
	      hook.memoizedState = newState;
	      hook.baseState = newState; // We aren't actually adding an update to the queue,
	      // because there is no update we can add for useReducer hooks that won't trigger an error.
	      // (There's no appropriate action type for DevTools overrides.)
	      // As a result though, React will see the scheduled update as a noop and bailout.
	      // Shallow cloning props works as a workaround for now to bypass the bailout check.

	      fiber.memoizedProps = assign({}, fiber.memoizedProps);
	      var root = enqueueConcurrentRenderForLane(fiber, SyncLane);

	      if (root !== null) {
	        scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);
	      }
	    }
	  };

	  overrideHookStateRenamePath = function (fiber, id, oldPath, newPath) {
	    var hook = findHook(fiber, id);

	    if (hook !== null) {
	      var newState = copyWithRename(hook.memoizedState, oldPath, newPath);
	      hook.memoizedState = newState;
	      hook.baseState = newState; // We aren't actually adding an update to the queue,
	      // because there is no update we can add for useReducer hooks that won't trigger an error.
	      // (There's no appropriate action type for DevTools overrides.)
	      // As a result though, React will see the scheduled update as a noop and bailout.
	      // Shallow cloning props works as a workaround for now to bypass the bailout check.

	      fiber.memoizedProps = assign({}, fiber.memoizedProps);
	      var root = enqueueConcurrentRenderForLane(fiber, SyncLane);

	      if (root !== null) {
	        scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);
	      }
	    }
	  }; // Support DevTools props for function components, forwardRef, memo, host components, etc.


	  overrideProps = function (fiber, path, value) {
	    fiber.pendingProps = copyWithSet(fiber.memoizedProps, path, value);

	    if (fiber.alternate) {
	      fiber.alternate.pendingProps = fiber.pendingProps;
	    }

	    var root = enqueueConcurrentRenderForLane(fiber, SyncLane);

	    if (root !== null) {
	      scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);
	    }
	  };

	  overridePropsDeletePath = function (fiber, path) {
	    fiber.pendingProps = copyWithDelete(fiber.memoizedProps, path);

	    if (fiber.alternate) {
	      fiber.alternate.pendingProps = fiber.pendingProps;
	    }

	    var root = enqueueConcurrentRenderForLane(fiber, SyncLane);

	    if (root !== null) {
	      scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);
	    }
	  };

	  overridePropsRenamePath = function (fiber, oldPath, newPath) {
	    fiber.pendingProps = copyWithRename(fiber.memoizedProps, oldPath, newPath);

	    if (fiber.alternate) {
	      fiber.alternate.pendingProps = fiber.pendingProps;
	    }

	    var root = enqueueConcurrentRenderForLane(fiber, SyncLane);

	    if (root !== null) {
	      scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);
	    }
	  };

	  scheduleUpdate = function (fiber) {
	    var root = enqueueConcurrentRenderForLane(fiber, SyncLane);

	    if (root !== null) {
	      scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);
	    }
	  };

	  setErrorHandler = function (newShouldErrorImpl) {
	    shouldErrorImpl = newShouldErrorImpl;
	  };

	  setSuspenseHandler = function (newShouldSuspendImpl) {
	    shouldSuspendImpl = newShouldSuspendImpl;
	  };
	}

	function findHostInstanceByFiber(fiber) {
	  var hostFiber = findCurrentHostFiber(fiber);

	  if (hostFiber === null) {
	    return null;
	  }

	  return hostFiber.stateNode;
	}

	function emptyFindFiberByHostInstance(instance) {
	  return null;
	}

	function getCurrentFiberForDevTools() {
	  return current;
	}

	function injectIntoDevTools(devToolsConfig) {
	  var findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;
	  var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
	  return injectInternals({
	    bundleType: devToolsConfig.bundleType,
	    version: devToolsConfig.version,
	    rendererPackageName: devToolsConfig.rendererPackageName,
	    rendererConfig: devToolsConfig.rendererConfig,
	    overrideHookState: overrideHookState,
	    overrideHookStateDeletePath: overrideHookStateDeletePath,
	    overrideHookStateRenamePath: overrideHookStateRenamePath,
	    overrideProps: overrideProps,
	    overridePropsDeletePath: overridePropsDeletePath,
	    overridePropsRenamePath: overridePropsRenamePath,
	    setErrorHandler: setErrorHandler,
	    setSuspenseHandler: setSuspenseHandler,
	    scheduleUpdate: scheduleUpdate,
	    currentDispatcherRef: ReactCurrentDispatcher,
	    findHostInstanceByFiber: findHostInstanceByFiber,
	    findFiberByHostInstance: findFiberByHostInstance || emptyFindFiberByHostInstance,
	    // React Refresh
	    findHostInstancesForRefresh:  findHostInstancesForRefresh ,
	    scheduleRefresh:  scheduleRefresh ,
	    scheduleRoot:  scheduleRoot ,
	    setRefreshHandler:  setRefreshHandler ,
	    // Enables DevTools to append owner stacks to error messages in DEV mode.
	    getCurrentFiber:  getCurrentFiberForDevTools ,
	    // Enables DevTools to detect reconciler version rather than renderer version
	    // which may not match for third party renderers.
	    reconcilerVersion: ReactVersion
	  });
	}

	/* global reportError */

	var defaultOnRecoverableError = typeof reportError === 'function' ? // In modern browsers, reportError will dispatch an error event,
	// emulating an uncaught JavaScript error.
	reportError : function (error) {
	  // In older browsers and test environments, fallback to console.error.
	  // eslint-disable-next-line react-internal/no-production-logging
	  console['error'](error);
	};

	function ReactDOMRoot(internalRoot) {
	  this._internalRoot = internalRoot;
	}

	ReactDOMHydrationRoot.prototype.render = ReactDOMRoot.prototype.render = function (children) {
	  var root = this._internalRoot;

	  if (root === null) {
	    throw new Error('Cannot update an unmounted root.');
	  }

	  {
	    if (typeof arguments[1] === 'function') {
	      error('render(...): does not support the second callback argument. ' + 'To execute a side effect after rendering, declare it in a component body with useEffect().');
	    } else if (isValidContainer(arguments[1])) {
	      error('You passed a container to the second argument of root.render(...). ' + "You don't need to pass it again since you already passed it to create the root.");
	    } else if (typeof arguments[1] !== 'undefined') {
	      error('You passed a second argument to root.render(...) but it only accepts ' + 'one argument.');
	    }

	    var container = root.containerInfo;

	    if (container.nodeType !== COMMENT_NODE) {
	      var hostInstance = findHostInstanceWithNoPortals(root.current);

	      if (hostInstance) {
	        if (hostInstance.parentNode !== container) {
	          error('render(...): It looks like the React-rendered content of the ' + 'root container was removed without using React. This is not ' + 'supported and will cause errors. Instead, call ' + "root.unmount() to empty a root's container.");
	        }
	      }
	    }
	  }

	  updateContainer(children, root, null, null);
	};

	ReactDOMHydrationRoot.prototype.unmount = ReactDOMRoot.prototype.unmount = function () {
	  {
	    if (typeof arguments[0] === 'function') {
	      error('unmount(...): does not support a callback argument. ' + 'To execute a side effect after rendering, declare it in a component body with useEffect().');
	    }
	  }

	  var root = this._internalRoot;

	  if (root !== null) {
	    this._internalRoot = null;
	    var container = root.containerInfo;

	    {
	      if (isAlreadyRendering()) {
	        error('Attempted to synchronously unmount a root while React was already ' + 'rendering. React cannot finish unmounting the root until the ' + 'current render has completed, which may lead to a race condition.');
	      }
	    }

	    flushSync(function () {
	      updateContainer(null, root, null, null);
	    });
	    unmarkContainerAsRoot(container);
	  }
	};

	function createRoot(container, options) {
	  if (!isValidContainer(container)) {
	    throw new Error('createRoot(...): Target container is not a DOM element.');
	  }

	  warnIfReactDOMContainerInDEV(container);
	  var isStrictMode = false;
	  var concurrentUpdatesByDefaultOverride = false;
	  var identifierPrefix = '';
	  var onRecoverableError = defaultOnRecoverableError;

	  if (options !== null && options !== undefined) {
	    {
	      if (options.hydrate) {
	        warn('hydrate through createRoot is deprecated. Use ReactDOMClient.hydrateRoot(container, <App />) instead.');
	      } else {
	        if (typeof options === 'object' && options !== null && options.$$typeof === REACT_ELEMENT_TYPE) {
	          error('You passed a JSX element to createRoot. You probably meant to ' + 'call root.render instead. ' + 'Example usage:\n\n' + '  let root = createRoot(domContainer);\n' + '  root.render(<App />);');
	        }
	      }
	    }

	    if (options.unstable_strictMode === true) {
	      isStrictMode = true;
	    }

	    if (options.identifierPrefix !== undefined) {
	      identifierPrefix = options.identifierPrefix;
	    }

	    if (options.onRecoverableError !== undefined) {
	      onRecoverableError = options.onRecoverableError;
	    }

	    if (options.transitionCallbacks !== undefined) {
	      options.transitionCallbacks;
	    }
	  }

	  var root = createContainer(container, ConcurrentRoot, null, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
	  markContainerAsRoot(root.current, container);
	  var rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
	  listenToAllSupportedEvents(rootContainerElement);
	  return new ReactDOMRoot(root);
	}

	function ReactDOMHydrationRoot(internalRoot) {
	  this._internalRoot = internalRoot;
	}

	function scheduleHydration(target) {
	  if (target) {
	    queueExplicitHydrationTarget(target);
	  }
	}

	ReactDOMHydrationRoot.prototype.unstable_scheduleHydration = scheduleHydration;
	function hydrateRoot(container, initialChildren, options) {
	  if (!isValidContainer(container)) {
	    throw new Error('hydrateRoot(...): Target container is not a DOM element.');
	  }

	  warnIfReactDOMContainerInDEV(container);

	  {
	    if (initialChildren === undefined) {
	      error('Must provide initial children as second argument to hydrateRoot. ' + 'Example usage: hydrateRoot(domContainer, <App />)');
	    }
	  } // For now we reuse the whole bag of options since they contain
	  // the hydration callbacks.


	  var hydrationCallbacks = options != null ? options : null; // TODO: Delete this option

	  var mutableSources = options != null && options.hydratedSources || null;
	  var isStrictMode = false;
	  var concurrentUpdatesByDefaultOverride = false;
	  var identifierPrefix = '';
	  var onRecoverableError = defaultOnRecoverableError;

	  if (options !== null && options !== undefined) {
	    if (options.unstable_strictMode === true) {
	      isStrictMode = true;
	    }

	    if (options.identifierPrefix !== undefined) {
	      identifierPrefix = options.identifierPrefix;
	    }

	    if (options.onRecoverableError !== undefined) {
	      onRecoverableError = options.onRecoverableError;
	    }
	  }

	  var root = createHydrationContainer(initialChildren, null, container, ConcurrentRoot, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
	  markContainerAsRoot(root.current, container); // This can't be a comment node since hydration doesn't work on comment nodes anyway.

	  listenToAllSupportedEvents(container);

	  if (mutableSources) {
	    for (var i = 0; i < mutableSources.length; i++) {
	      var mutableSource = mutableSources[i];
	      registerMutableSourceForHydration(root, mutableSource);
	    }
	  }

	  return new ReactDOMHydrationRoot(root);
	}
	function isValidContainer(node) {
	  return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || !disableCommentsAsDOMContainers  ));
	} // TODO: Remove this function which also includes comment nodes.
	// We only use it in places that are currently more relaxed.

	function isValidContainerLegacy(node) {
	  return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || node.nodeType === COMMENT_NODE && node.nodeValue === ' react-mount-point-unstable '));
	}

	function warnIfReactDOMContainerInDEV(container) {
	  {
	    if (container.nodeType === ELEMENT_NODE && container.tagName && container.tagName.toUpperCase() === 'BODY') {
	      error('createRoot(): Creating roots directly with document.body is ' + 'discouraged, since its children are often manipulated by third-party ' + 'scripts and browser extensions. This may lead to subtle ' + 'reconciliation issues. Try using a container element created ' + 'for your app.');
	    }

	    if (isContainerMarkedAsRoot(container)) {
	      if (container._reactRootContainer) {
	        error('You are calling ReactDOMClient.createRoot() on a container that was previously ' + 'passed to ReactDOM.render(). This is not supported.');
	      } else {
	        error('You are calling ReactDOMClient.createRoot() on a container that ' + 'has already been passed to createRoot() before. Instead, call ' + 'root.render() on the existing root instead if you want to update it.');
	      }
	    }
	  }
	}

	var ReactCurrentOwner$3 = ReactSharedInternals.ReactCurrentOwner;
	var topLevelUpdateWarnings;

	{
	  topLevelUpdateWarnings = function (container) {
	    if (container._reactRootContainer && container.nodeType !== COMMENT_NODE) {
	      var hostInstance = findHostInstanceWithNoPortals(container._reactRootContainer.current);

	      if (hostInstance) {
	        if (hostInstance.parentNode !== container) {
	          error('render(...): It looks like the React-rendered content of this ' + 'container was removed without using React. This is not ' + 'supported and will cause errors. Instead, call ' + 'ReactDOM.unmountComponentAtNode to empty a container.');
	        }
	      }
	    }

	    var isRootRenderedBySomeReact = !!container._reactRootContainer;
	    var rootEl = getReactRootElementInContainer(container);
	    var hasNonRootReactChild = !!(rootEl && getInstanceFromNode(rootEl));

	    if (hasNonRootReactChild && !isRootRenderedBySomeReact) {
	      error('render(...): Replacing React-rendered children with a new root ' + 'component. If you intended to update the children of this node, ' + 'you should instead have the existing children update their state ' + 'and render the new components instead of calling ReactDOM.render.');
	    }

	    if (container.nodeType === ELEMENT_NODE && container.tagName && container.tagName.toUpperCase() === 'BODY') {
	      error('render(): Rendering components directly into document.body is ' + 'discouraged, since its children are often manipulated by third-party ' + 'scripts and browser extensions. This may lead to subtle ' + 'reconciliation issues. Try rendering into a container element created ' + 'for your app.');
	    }
	  };
	}

	function getReactRootElementInContainer(container) {
	  if (!container) {
	    return null;
	  }

	  if (container.nodeType === DOCUMENT_NODE) {
	    return container.documentElement;
	  } else {
	    return container.firstChild;
	  }
	}

	function noopOnRecoverableError() {// This isn't reachable because onRecoverableError isn't called in the
	  // legacy API.
	}

	function legacyCreateRootFromDOMContainer(container, initialChildren, parentComponent, callback, isHydrationContainer) {
	  if (isHydrationContainer) {
	    if (typeof callback === 'function') {
	      var originalCallback = callback;

	      callback = function () {
	        var instance = getPublicRootInstance(root);
	        originalCallback.call(instance);
	      };
	    }

	    var root = createHydrationContainer(initialChildren, callback, container, LegacyRoot, null, // hydrationCallbacks
	    false, // isStrictMode
	    false, // concurrentUpdatesByDefaultOverride,
	    '', // identifierPrefix
	    noopOnRecoverableError);
	    container._reactRootContainer = root;
	    markContainerAsRoot(root.current, container);
	    var rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
	    listenToAllSupportedEvents(rootContainerElement);
	    flushSync();
	    return root;
	  } else {
	    // First clear any existing content.
	    var rootSibling;

	    while (rootSibling = container.lastChild) {
	      container.removeChild(rootSibling);
	    }

	    if (typeof callback === 'function') {
	      var _originalCallback = callback;

	      callback = function () {
	        var instance = getPublicRootInstance(_root);

	        _originalCallback.call(instance);
	      };
	    }

	    var _root = createContainer(container, LegacyRoot, null, // hydrationCallbacks
	    false, // isStrictMode
	    false, // concurrentUpdatesByDefaultOverride,
	    '', // identifierPrefix
	    noopOnRecoverableError);

	    container._reactRootContainer = _root;
	    markContainerAsRoot(_root.current, container);

	    var _rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;

	    listenToAllSupportedEvents(_rootContainerElement); // Initial mount should not be batched.

	    flushSync(function () {
	      updateContainer(initialChildren, _root, parentComponent, callback);
	    });
	    return _root;
	  }
	}

	function warnOnInvalidCallback$1(callback, callerName) {
	  {
	    if (callback !== null && typeof callback !== 'function') {
	      error('%s(...): Expected the last optional `callback` argument to be a ' + 'function. Instead received: %s.', callerName, callback);
	    }
	  }
	}

	function legacyRenderSubtreeIntoContainer(parentComponent, children, container, forceHydrate, callback) {
	  {
	    topLevelUpdateWarnings(container);
	    warnOnInvalidCallback$1(callback === undefined ? null : callback, 'render');
	  }

	  var maybeRoot = container._reactRootContainer;
	  var root;

	  if (!maybeRoot) {
	    // Initial mount
	    root = legacyCreateRootFromDOMContainer(container, children, parentComponent, callback, forceHydrate);
	  } else {
	    root = maybeRoot;

	    if (typeof callback === 'function') {
	      var originalCallback = callback;

	      callback = function () {
	        var instance = getPublicRootInstance(root);
	        originalCallback.call(instance);
	      };
	    } // Update


	    updateContainer(children, root, parentComponent, callback);
	  }

	  return getPublicRootInstance(root);
	}

	var didWarnAboutFindDOMNode = false;
	function findDOMNode(componentOrElement) {
	  {
	    if (!didWarnAboutFindDOMNode) {
	      didWarnAboutFindDOMNode = true;

	      error('findDOMNode is deprecated and will be removed in the next major ' + 'release. Instead, add a ref directly to the element you want ' + 'to reference. Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-find-node');
	    }

	    var owner = ReactCurrentOwner$3.current;

	    if (owner !== null && owner.stateNode !== null) {
	      var warnedAboutRefsInRender = owner.stateNode._warnedAboutRefsInRender;

	      if (!warnedAboutRefsInRender) {
	        error('%s is accessing findDOMNode inside its render(). ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', getComponentNameFromType(owner.type) || 'A component');
	      }

	      owner.stateNode._warnedAboutRefsInRender = true;
	    }
	  }

	  if (componentOrElement == null) {
	    return null;
	  }

	  if (componentOrElement.nodeType === ELEMENT_NODE) {
	    return componentOrElement;
	  }

	  {
	    return findHostInstanceWithWarning(componentOrElement, 'findDOMNode');
	  }
	}
	function hydrate(element, container, callback) {
	  {
	    error('ReactDOM.hydrate is no longer supported in React 18. Use hydrateRoot ' + 'instead. Until you switch to the new API, your app will behave as ' + "if it's running React 17. Learn " + 'more: https://reactjs.org/link/switch-to-createroot');
	  }

	  if (!isValidContainerLegacy(container)) {
	    throw new Error('Target container is not a DOM element.');
	  }

	  {
	    var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === undefined;

	    if (isModernRoot) {
	      error('You are calling ReactDOM.hydrate() on a container that was previously ' + 'passed to ReactDOMClient.createRoot(). This is not supported. ' + 'Did you mean to call hydrateRoot(container, element)?');
	    }
	  } // TODO: throw or warn if we couldn't hydrate?


	  return legacyRenderSubtreeIntoContainer(null, element, container, true, callback);
	}
	function render(element, container, callback) {
	  {
	    error('ReactDOM.render is no longer supported in React 18. Use createRoot ' + 'instead. Until you switch to the new API, your app will behave as ' + "if it's running React 17. Learn " + 'more: https://reactjs.org/link/switch-to-createroot');
	  }

	  if (!isValidContainerLegacy(container)) {
	    throw new Error('Target container is not a DOM element.');
	  }

	  {
	    var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === undefined;

	    if (isModernRoot) {
	      error('You are calling ReactDOM.render() on a container that was previously ' + 'passed to ReactDOMClient.createRoot(). This is not supported. ' + 'Did you mean to call root.render(element)?');
	    }
	  }

	  return legacyRenderSubtreeIntoContainer(null, element, container, false, callback);
	}
	function unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
	  {
	    error('ReactDOM.unstable_renderSubtreeIntoContainer() is no longer supported ' + 'in React 18. Consider using a portal instead. Until you switch to ' + "the createRoot API, your app will behave as if it's running React " + '17. Learn more: https://reactjs.org/link/switch-to-createroot');
	  }

	  if (!isValidContainerLegacy(containerNode)) {
	    throw new Error('Target container is not a DOM element.');
	  }

	  if (parentComponent == null || !has(parentComponent)) {
	    throw new Error('parentComponent must be a valid React Component');
	  }

	  return legacyRenderSubtreeIntoContainer(parentComponent, element, containerNode, false, callback);
	}
	var didWarnAboutUnmountComponentAtNode = false;
	function unmountComponentAtNode(container) {
	  {
	    if (!didWarnAboutUnmountComponentAtNode) {
	      didWarnAboutUnmountComponentAtNode = true;

	      error('unmountComponentAtNode is deprecated and will be removed in the ' + 'next major release. Switch to the createRoot API. Learn ' + 'more: https://reactjs.org/link/switch-to-createroot');
	    }
	  }

	  if (!isValidContainerLegacy(container)) {
	    throw new Error('unmountComponentAtNode(...): Target container is not a DOM element.');
	  }

	  {
	    var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === undefined;

	    if (isModernRoot) {
	      error('You are calling ReactDOM.unmountComponentAtNode() on a container that was previously ' + 'passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call root.unmount()?');
	    }
	  }

	  if (container._reactRootContainer) {
	    {
	      var rootEl = getReactRootElementInContainer(container);
	      var renderedByDifferentReact = rootEl && !getInstanceFromNode(rootEl);

	      if (renderedByDifferentReact) {
	        error("unmountComponentAtNode(): The node you're attempting to unmount " + 'was rendered by another copy of React.');
	      }
	    } // Unmount should not be batched.


	    flushSync(function () {
	      legacyRenderSubtreeIntoContainer(null, null, container, false, function () {
	        // $FlowFixMe This should probably use `delete container._reactRootContainer`
	        container._reactRootContainer = null;
	        unmarkContainerAsRoot(container);
	      });
	    }); // If you call unmountComponentAtNode twice in quick succession, you'll
	    // get `true` twice. That's probably fine?

	    return true;
	  } else {
	    {
	      var _rootEl = getReactRootElementInContainer(container);

	      var hasNonRootReactChild = !!(_rootEl && getInstanceFromNode(_rootEl)); // Check if the container itself is a React root node.

	      var isContainerReactRoot = container.nodeType === ELEMENT_NODE && isValidContainerLegacy(container.parentNode) && !!container.parentNode._reactRootContainer;

	      if (hasNonRootReactChild) {
	        error("unmountComponentAtNode(): The node you're attempting to unmount " + 'was rendered by React and is not a top-level container. %s', isContainerReactRoot ? 'You may have accidentally passed in a React root node instead ' + 'of its container.' : 'Instead, have the parent component update its state and ' + 'rerender in order to remove this component.');
	      }
	    }

	    return false;
	  }
	}

	setAttemptSynchronousHydration(attemptSynchronousHydration$1);
	setAttemptContinuousHydration(attemptContinuousHydration$1);
	setAttemptHydrationAtCurrentPriority(attemptHydrationAtCurrentPriority$1);
	setGetCurrentUpdatePriority(getCurrentUpdatePriority);
	setAttemptHydrationAtPriority(runWithPriority);

	{
	  if (typeof Map !== 'function' || // $FlowIssue Flow incorrectly thinks Map has no prototype
	  Map.prototype == null || typeof Map.prototype.forEach !== 'function' || typeof Set !== 'function' || // $FlowIssue Flow incorrectly thinks Set has no prototype
	  Set.prototype == null || typeof Set.prototype.clear !== 'function' || typeof Set.prototype.forEach !== 'function') {
	    error('React depends on Map and Set built-in types. Make sure that you load a ' + 'polyfill in older browsers. https://reactjs.org/link/react-polyfills');
	  }
	}

	setRestoreImplementation(restoreControlledState$3);
	setBatchingImplementation(batchedUpdates$1, discreteUpdates, flushSync);

	function createPortal$1(children, container) {
	  var key = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

	  if (!isValidContainer(container)) {
	    throw new Error('Target container is not a DOM element.');
	  } // TODO: pass ReactDOM portal implementation as third argument
	  // $FlowFixMe The Flow type is opaque but there's no way to actually create it.


	  return createPortal(children, container, null, key);
	}

	function renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
	  return unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback);
	}

	var Internals = {
	  usingClientEntryPoint: false,
	  // Keep in sync with ReactTestUtils.js.
	  // This is an array for better minification.
	  Events: [getInstanceFromNode, getNodeFromInstance, getFiberCurrentPropsFromNode, enqueueStateRestore, restoreStateIfNeeded, batchedUpdates$1]
	};

	function createRoot$1(container, options) {
	  {
	    if (!Internals.usingClientEntryPoint && !false) {
	      error('You are importing createRoot from "react-dom" which is not supported. ' + 'You should instead import it from "react-dom/client".');
	    }
	  }

	  return createRoot(container, options);
	}

	function hydrateRoot$1(container, initialChildren, options) {
	  {
	    if (!Internals.usingClientEntryPoint && !false) {
	      error('You are importing hydrateRoot from "react-dom" which is not supported. ' + 'You should instead import it from "react-dom/client".');
	    }
	  }

	  return hydrateRoot(container, initialChildren, options);
	} // Overload the definition to the two valid signatures.
	// Warning, this opts-out of checking the function body.


	// eslint-disable-next-line no-redeclare
	function flushSync$1(fn) {
	  {
	    if (isAlreadyRendering()) {
	      error('flushSync was called from inside a lifecycle method. React cannot ' + 'flush when React is already rendering. Consider moving this call to ' + 'a scheduler task or micro task.');
	    }
	  }

	  return flushSync(fn);
	}
	var foundDevTools = injectIntoDevTools({
	  findFiberByHostInstance: getClosestInstanceFromNode,
	  bundleType:  1 ,
	  version: ReactVersion,
	  rendererPackageName: 'react-dom'
	});

	{
	  if (!foundDevTools && canUseDOM && window.top === window.self) {
	    // If we're in Chrome or Firefox, provide a download link if not installed.
	    if (navigator.userAgent.indexOf('Chrome') > -1 && navigator.userAgent.indexOf('Edge') === -1 || navigator.userAgent.indexOf('Firefox') > -1) {
	      var protocol = window.location.protocol; // Don't warn in exotic cases like chrome-extension://.

	      if (/^(https?|file):$/.test(protocol)) {
	        // eslint-disable-next-line react-internal/no-production-logging
	        console.info('%cDownload the React DevTools ' + 'for a better development experience: ' + 'https://reactjs.org/link/react-devtools' + (protocol === 'file:' ? '\nYou might need to use a local HTTP server (instead of file://): ' + 'https://reactjs.org/link/react-devtools-faq' : ''), 'font-weight:bold');
	      }
	    }
	  }
	}

	reactDom_development.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = Internals;
	reactDom_development.createPortal = createPortal$1;
	reactDom_development.createRoot = createRoot$1;
	reactDom_development.findDOMNode = findDOMNode;
	reactDom_development.flushSync = flushSync$1;
	reactDom_development.hydrate = hydrate;
	reactDom_development.hydrateRoot = hydrateRoot$1;
	reactDom_development.render = render;
	reactDom_development.unmountComponentAtNode = unmountComponentAtNode;
	reactDom_development.unstable_batchedUpdates = batchedUpdates$1;
	reactDom_development.unstable_renderSubtreeIntoContainer = renderSubtreeIntoContainer;
	reactDom_development.version = ReactVersion;
	          /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */
	if (
	  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' &&
	  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop ===
	    'function'
	) {
	  __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
	}
	        
	  })();
	}
	return reactDom_development;
}

function checkDCE() {
  /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */
  if (
    typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined' ||
    typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE !== 'function'
  ) {
    return;
  }
  if (process.env.NODE_ENV !== 'production') {
    // This branch is unreachable because this function is only called
    // in production, but the condition is true only in development.
    // Therefore if the branch is still here, dead code elimination wasn't
    // properly applied.
    // Don't change the message. React DevTools relies on it. Also make sure
    // this message doesn't occur elsewhere in this function, or it will cause
    // a false positive.
    throw new Error('^_^');
  }
  try {
    // Verify that the code above has been dead code eliminated (DCE'd).
    __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(checkDCE);
  } catch (err) {
    // DevTools shouldn't crash React, no matter what.
    // We should still report in case we break this code.
    console.error(err);
  }
}

if (process.env.NODE_ENV === 'production') {
  // DCE check should happen before ReactDOM bundle executes so that
  // DevTools can report bad minification during injection.
  checkDCE();
  reactDom.exports = requireReactDom_production_min();
} else {
  reactDom.exports = requireReactDom_development();
}

var reactDomExports = reactDom.exports;
var $dbSRa$reactdom = /*@__PURE__*/getDefaultExportFromCjs(reactDomExports);

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 


const $f57aed4a881a3485$var$Context = /*#__PURE__*/ (React).createContext(null);
function $f57aed4a881a3485$export$178405afcd8c5eb(props) {
    let { children: children } = props;
    let parent = (reactExports.useContext)($f57aed4a881a3485$var$Context);
    let [modalCount, setModalCount] = (reactExports.useState)(0);
    let context = (reactExports.useMemo)(()=>({
            parent: parent,
            modalCount: modalCount,
            addModal () {
                setModalCount((count)=>count + 1);
                if (parent) parent.addModal();
            },
            removeModal () {
                setModalCount((count)=>count - 1);
                if (parent) parent.removeModal();
            }
        }), [
        parent,
        modalCount
    ]);
    return /*#__PURE__*/ (React).createElement($f57aed4a881a3485$var$Context.Provider, {
        value: context
    }, children);
}
function $f57aed4a881a3485$export$d9aaed4c3ece1bc0() {
    let context = (reactExports.useContext)($f57aed4a881a3485$var$Context);
    return {
        modalProviderProps: {
            'aria-hidden': context && context.modalCount > 0 ? true : null
        }
    };
}
/**
 * Creates a root node that will be aria-hidden if there are other modals open.
 */ function $f57aed4a881a3485$var$OverlayContainerDOM(props) {
    let { modalProviderProps: modalProviderProps } = $f57aed4a881a3485$export$d9aaed4c3ece1bc0();
    return /*#__PURE__*/ (React).createElement("div", {
        "data-overlay-container": true,
        ...props,
        ...modalProviderProps
    });
}
function $f57aed4a881a3485$export$bf688221f59024e5(props) {
    return /*#__PURE__*/ (React).createElement($f57aed4a881a3485$export$178405afcd8c5eb, null, /*#__PURE__*/ (React).createElement($f57aed4a881a3485$var$OverlayContainerDOM, props));
}
function $f57aed4a881a3485$export$b47c3594eab58386(props) {
    let isSSR = ($b5e257d569688ac6$export$535bd6ca7f90a273)();
    let { portalContainer: portalContainer = isSSR ? null : document.body, ...rest } = props;
    (React).useEffect(()=>{
        if (portalContainer === null || portalContainer === void 0 ? void 0 : portalContainer.closest('[data-overlay-container]')) throw new Error('An OverlayContainer must not be inside another container. Please change the portalContainer prop.');
    }, [
        portalContainer
    ]);
    if (!portalContainer) return null;
    let contents = /*#__PURE__*/ (React).createElement($f57aed4a881a3485$export$bf688221f59024e5, rest);
    return /*#__PURE__*/ ($dbSRa$reactdom).createPortal(contents, portalContainer);
}

var $773d5888b972f1cf$exports = {};
$773d5888b972f1cf$exports = {
    "dismiss": `\u{62A}\u{62C}\u{627}\u{647}\u{644}`
};

var $d11f19852b941573$exports = {};
$d11f19852b941573$exports = {
    "dismiss": `\u{41E}\u{442}\u{445}\u{432}\u{44A}\u{440}\u{43B}\u{44F}\u{43D}\u{435}`
};

var $b983974c2ee1efb3$exports = {};
$b983974c2ee1efb3$exports = {
    "dismiss": `Odstranit`
};

var $5809cc9d4e92de73$exports = {};
$5809cc9d4e92de73$exports = {
    "dismiss": `Luk`
};

var $c68c2e4fc74398d1$exports = {};
$c68c2e4fc74398d1$exports = {
    "dismiss": `Schlie\xdfen`
};

var $0898b4c153db2b77$exports = {};
$0898b4c153db2b77$exports = {
    "dismiss": `\u{391}\u{3C0}\u{3CC}\u{3C1}\u{3C1}\u{3B9}\u{3C8}\u{3B7}`
};

var $6d74810286a15183$exports = {};
$6d74810286a15183$exports = {
    "dismiss": `Dismiss`
};

var $309d73dc65f78055$exports = {};
$309d73dc65f78055$exports = {
    "dismiss": `Descartar`
};

var $44ad94f7205cf593$exports = {};
$44ad94f7205cf593$exports = {
    "dismiss": `L\xf5peta`
};

var $7c28f5687f0779a9$exports = {};
$7c28f5687f0779a9$exports = {
    "dismiss": `Hylk\xe4\xe4`
};

var $e6d75df4b68bd73a$exports = {};
$e6d75df4b68bd73a$exports = {
    "dismiss": `Rejeter`
};

var $87505c9dab186d0f$exports = {};
$87505c9dab186d0f$exports = {
    "dismiss": `\u{5D4}\u{5EA}\u{5E2}\u{5DC}\u{5DD}`
};

var $553439c3ffb3e492$exports = {};
$553439c3ffb3e492$exports = {
    "dismiss": `Odbaci`
};

var $74cf411061b983a2$exports = {};
$74cf411061b983a2$exports = {
    "dismiss": `Elutas\xedt\xe1s`
};

var $e933f298574dc435$exports = {};
$e933f298574dc435$exports = {
    "dismiss": `Ignora`
};

var $ac91fc9fe02f71f6$exports = {};
$ac91fc9fe02f71f6$exports = {
    "dismiss": `\u{9589}\u{3058}\u{308B}`
};

var $52b96f86422025af$exports = {};
$52b96f86422025af$exports = {
    "dismiss": `\u{BB34}\u{C2DC}`
};

var $c0d724c3e51dafa6$exports = {};
$c0d724c3e51dafa6$exports = {
    "dismiss": `Atmesti`
};

var $c92899672a3fe72e$exports = {};
$c92899672a3fe72e$exports = {
    "dismiss": `Ner\u{101}d\u{12B}t`
};

var $9f576b39d8e7a9d6$exports = {};
$9f576b39d8e7a9d6$exports = {
    "dismiss": `Lukk`
};

var $9d025808aeec81a7$exports = {};
$9d025808aeec81a7$exports = {
    "dismiss": `Negeren`
};

var $fce709921e2c0fa6$exports = {};
$fce709921e2c0fa6$exports = {
    "dismiss": `Zignoruj`
};

var $2599cf0c4ab37f59$exports = {};
$2599cf0c4ab37f59$exports = {
    "dismiss": `Descartar`
};

var $3c220ae7ef8a35fd$exports = {};
$3c220ae7ef8a35fd$exports = {
    "dismiss": `Dispensar`
};

var $93562b5094072f54$exports = {};
$93562b5094072f54$exports = {
    "dismiss": `Revocare`
};

var $cd9e2abd0d06c7b4$exports = {};
$cd9e2abd0d06c7b4$exports = {
    "dismiss": `\u{41F}\u{440}\u{43E}\u{43F}\u{443}\u{441}\u{442}\u{438}\u{442}\u{44C}`
};

var $45375701f409adf1$exports = {};
$45375701f409adf1$exports = {
    "dismiss": `Zru\u{161}i\u{165}`
};

var $27fab53a576de9dd$exports = {};
$27fab53a576de9dd$exports = {
    "dismiss": `Opusti`
};

var $4438748d9952e7c7$exports = {};
$4438748d9952e7c7$exports = {
    "dismiss": `Odbaci`
};

var $0936d7347ef4da4c$exports = {};
$0936d7347ef4da4c$exports = {
    "dismiss": `Avvisa`
};

var $29700c92185d38f8$exports = {};
$29700c92185d38f8$exports = {
    "dismiss": `Kapat`
};

var $662ccaf2be4c25b3$exports = {};
$662ccaf2be4c25b3$exports = {
    "dismiss": `\u{421}\u{43A}\u{430}\u{441}\u{443}\u{432}\u{430}\u{442}\u{438}`
};

var $d80a27deda7cdb3c$exports = {};
$d80a27deda7cdb3c$exports = {
    "dismiss": `\u{53D6}\u{6D88}`
};

var $2b2734393847c884$exports = {};
$2b2734393847c884$exports = {
    "dismiss": `\u{95DC}\u{9589}`
};

var $a2f21f5f14f60553$exports = {};


































$a2f21f5f14f60553$exports = {
    "ar-AE": $773d5888b972f1cf$exports,
    "bg-BG": $d11f19852b941573$exports,
    "cs-CZ": $b983974c2ee1efb3$exports,
    "da-DK": $5809cc9d4e92de73$exports,
    "de-DE": $c68c2e4fc74398d1$exports,
    "el-GR": $0898b4c153db2b77$exports,
    "en-US": $6d74810286a15183$exports,
    "es-ES": $309d73dc65f78055$exports,
    "et-EE": $44ad94f7205cf593$exports,
    "fi-FI": $7c28f5687f0779a9$exports,
    "fr-FR": $e6d75df4b68bd73a$exports,
    "he-IL": $87505c9dab186d0f$exports,
    "hr-HR": $553439c3ffb3e492$exports,
    "hu-HU": $74cf411061b983a2$exports,
    "it-IT": $e933f298574dc435$exports,
    "ja-JP": $ac91fc9fe02f71f6$exports,
    "ko-KR": $52b96f86422025af$exports,
    "lt-LT": $c0d724c3e51dafa6$exports,
    "lv-LV": $c92899672a3fe72e$exports,
    "nb-NO": $9f576b39d8e7a9d6$exports,
    "nl-NL": $9d025808aeec81a7$exports,
    "pl-PL": $fce709921e2c0fa6$exports,
    "pt-BR": $2599cf0c4ab37f59$exports,
    "pt-PT": $3c220ae7ef8a35fd$exports,
    "ro-RO": $93562b5094072f54$exports,
    "ru-RU": $cd9e2abd0d06c7b4$exports,
    "sk-SK": $45375701f409adf1$exports,
    "sl-SI": $27fab53a576de9dd$exports,
    "sr-SP": $4438748d9952e7c7$exports,
    "sv-SE": $0936d7347ef4da4c$exports,
    "tr-TR": $29700c92185d38f8$exports,
    "uk-UA": $662ccaf2be4c25b3$exports,
    "zh-CN": $d80a27deda7cdb3c$exports,
    "zh-TW": $2b2734393847c884$exports
};

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 


const $5c3e21d68f1c4674$var$styles = {
    border: 0,
    clip: 'rect(0 0 0 0)',
    clipPath: 'inset(50%)',
    height: '1px',
    margin: '-1px',
    overflow: 'hidden',
    padding: 0,
    position: 'absolute',
    width: '1px',
    whiteSpace: 'nowrap'
};
function $5c3e21d68f1c4674$export$a966af930f325cab(props = {}) {
    let { style: style, isFocusable: isFocusable } = props;
    let [isFocused, setFocused] = (reactExports.useState)(false);
    let { focusWithinProps: focusWithinProps } = ($9ab94262bd0047c7$export$420e68273165f4ec)({
        isDisabled: !isFocusable,
        onFocusWithinChange: (val)=>setFocused(val)
    });
    // If focused, don't hide the element.
    let combinedStyles = (reactExports.useMemo)(()=>{
        if (isFocused) return style;
        else if (style) return {
            ...$5c3e21d68f1c4674$var$styles,
            ...style
        };
        else return $5c3e21d68f1c4674$var$styles;
    // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [
        isFocused
    ]);
    return {
        visuallyHiddenProps: {
            ...focusWithinProps,
            style: combinedStyles
        }
    };
}
function $5c3e21d68f1c4674$export$439d29a4e110a164(props) {
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    let { children: children, elementType: Element = 'div', isFocusable: isFocusable, style: style, ...otherProps } = props;
    let { visuallyHiddenProps: visuallyHiddenProps } = $5c3e21d68f1c4674$export$a966af930f325cab(props);
    return /*#__PURE__*/ (React).createElement(Element, ($3ef42575df84b30b$export$9d1611c77c2fe928)(otherProps, visuallyHiddenProps), children);
}

function $parcel$interopDefault$m(a) {
  return a && a.__esModule ? a.default : a;
}
/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 




function $86ea4cb521eb2e37$export$2317d149ed6f78c4(props) {
    let { onDismiss: onDismiss, ...otherProps } = props;
    let stringFormatter = ($fca6afa0e843324b$export$f12b703ca79dfbb1)((($parcel$interopDefault$m($a2f21f5f14f60553$exports))), '@react-aria/overlays');
    let labels = ($313b98861ee5dd6c$export$d6875122194c7b44)(otherProps, stringFormatter.format('dismiss'));
    let onClick = ()=>{
        if (onDismiss) onDismiss();
    };
    return /*#__PURE__*/ (React).createElement(($5c3e21d68f1c4674$export$439d29a4e110a164), null, /*#__PURE__*/ (React).createElement("button", {
        ...labels,
        tabIndex: -1,
        onClick: onClick,
        style: {
            width: 1,
            height: 1
        }
    }));
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ // Keeps a ref count of all hidden elements. Added to when hiding an element, and
// subtracted from when showing it again. When it reaches zero, aria-hidden is removed.
let $5e3802645cc19319$var$refCountMap = new WeakMap();
let $5e3802645cc19319$var$observerStack = [];
function $5e3802645cc19319$export$1c3ebcada18427bf(targets, root = document.body) {
    let visibleNodes = new Set(targets);
    let hiddenNodes = new Set();
    let walk = (root)=>{
        // Keep live announcer and top layer elements (e.g. toasts) visible.
        for (let element of root.querySelectorAll('[data-live-announcer], [data-react-aria-top-layer]'))visibleNodes.add(element);
        let acceptNode = (node)=>{
            // Skip this node and its children if it is one of the target nodes, or a live announcer.
            // Also skip children of already hidden nodes, as aria-hidden is recursive. An exception is
            // made for elements with role="row" since VoiceOver on iOS has issues hiding elements with role="row".
            // For that case we want to hide the cells inside as well (https://bugs.webkit.org/show_bug.cgi?id=222623).
            if (visibleNodes.has(node) || hiddenNodes.has(node.parentElement) && node.parentElement.getAttribute('role') !== 'row') return NodeFilter.FILTER_REJECT;
            // Skip this node but continue to children if one of the targets is inside the node.
            for (let target of visibleNodes){
                if (node.contains(target)) return NodeFilter.FILTER_SKIP;
            }
            return NodeFilter.FILTER_ACCEPT;
        };
        let walker = document.createTreeWalker(root, NodeFilter.SHOW_ELEMENT, {
            acceptNode: acceptNode
        });
        // TreeWalker does not include the root.
        let acceptRoot = acceptNode(root);
        if (acceptRoot === NodeFilter.FILTER_ACCEPT) hide(root);
        if (acceptRoot !== NodeFilter.FILTER_REJECT) {
            let node = walker.nextNode();
            while(node != null){
                hide(node);
                node = walker.nextNode();
            }
        }
    };
    let hide = (node)=>{
        var _refCountMap_get;
        let refCount = (_refCountMap_get = $5e3802645cc19319$var$refCountMap.get(node)) !== null && _refCountMap_get !== void 0 ? _refCountMap_get : 0;
        // If already aria-hidden, and the ref count is zero, then this element
        // was already hidden and there's nothing for us to do.
        if (node.getAttribute('aria-hidden') === 'true' && refCount === 0) return;
        if (refCount === 0) node.setAttribute('aria-hidden', 'true');
        hiddenNodes.add(node);
        $5e3802645cc19319$var$refCountMap.set(node, refCount + 1);
    };
    // If there is already a MutationObserver listening from a previous call,
    // disconnect it so the new on takes over.
    if ($5e3802645cc19319$var$observerStack.length) $5e3802645cc19319$var$observerStack[$5e3802645cc19319$var$observerStack.length - 1].disconnect();
    walk(root);
    let observer = new MutationObserver((changes)=>{
        for (let change of changes){
            if (change.type !== 'childList' || change.addedNodes.length === 0) continue;
            // If the parent element of the added nodes is not within one of the targets,
            // and not already inside a hidden node, hide all of the new children.
            if (![
                ...visibleNodes,
                ...hiddenNodes
            ].some((node)=>node.contains(change.target))) {
                for (let node of change.removedNodes)if (node instanceof Element) {
                    visibleNodes.delete(node);
                    hiddenNodes.delete(node);
                }
                for (let node of change.addedNodes){
                    if ((node instanceof HTMLElement || node instanceof SVGElement) && (node.dataset.liveAnnouncer === 'true' || node.dataset.reactAriaTopLayer === 'true')) visibleNodes.add(node);
                    else if (node instanceof Element) walk(node);
                }
            }
        }
    });
    observer.observe(root, {
        childList: true,
        subtree: true
    });
    let observerWrapper = {
        observe () {
            observer.observe(root, {
                childList: true,
                subtree: true
            });
        },
        disconnect () {
            observer.disconnect();
        }
    };
    $5e3802645cc19319$var$observerStack.push(observerWrapper);
    return ()=>{
        observer.disconnect();
        for (let node of hiddenNodes){
            let count = $5e3802645cc19319$var$refCountMap.get(node);
            if (count === 1) {
                node.removeAttribute('aria-hidden');
                $5e3802645cc19319$var$refCountMap.delete(node);
            } else $5e3802645cc19319$var$refCountMap.set(node, count - 1);
        }
        // Remove this observer from the stack, and start the previous one.
        if (observerWrapper === $5e3802645cc19319$var$observerStack[$5e3802645cc19319$var$observerStack.length - 1]) {
            $5e3802645cc19319$var$observerStack.pop();
            if ($5e3802645cc19319$var$observerStack.length) $5e3802645cc19319$var$observerStack[$5e3802645cc19319$var$observerStack.length - 1].observe();
        } else $5e3802645cc19319$var$observerStack.splice($5e3802645cc19319$var$observerStack.indexOf(observerWrapper), 1);
    };
}

/*
 * Copyright 2022 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 




function $f2f8a6077418541e$export$542a6fd13ac93354(props, state) {
    let { triggerRef: triggerRef, popoverRef: popoverRef, isNonModal: isNonModal, isKeyboardDismissDisabled: isKeyboardDismissDisabled, shouldCloseOnInteractOutside: shouldCloseOnInteractOutside, ...otherProps } = props;
    let { overlayProps: overlayProps, underlayProps: underlayProps } = ($a11501f3d1d39e6c$export$ea8f71083e90600f)({
        isOpen: state.isOpen,
        onClose: state.close,
        shouldCloseOnBlur: true,
        isDismissable: !isNonModal,
        isKeyboardDismissDisabled: isKeyboardDismissDisabled,
        shouldCloseOnInteractOutside: shouldCloseOnInteractOutside
    }, popoverRef);
    let { overlayProps: positionProps, arrowProps: arrowProps, placement: placement } = ($2a41e45df1593e64$export$d39e1813b3bdd0e1)({
        ...otherProps,
        targetRef: triggerRef,
        overlayRef: popoverRef,
        isOpen: state.isOpen,
        onClose: isNonModal ? state.close : null
    });
    ($49c51c25361d4cd2$export$ee0f7cc6afcd1c18)({
        isDisabled: isNonModal || !state.isOpen
    });
    ($f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(()=>{
        if (state.isOpen && !isNonModal && popoverRef.current) return ($5e3802645cc19319$export$1c3ebcada18427bf)([
            popoverRef.current
        ]);
    }, [
        isNonModal,
        state.isOpen,
        popoverRef
    ]);
    return {
        popoverProps: ($3ef42575df84b30b$export$9d1611c77c2fe928)(overlayProps, positionProps),
        arrowProps: arrowProps,
        underlayProps: underlayProps,
        placement: placement
    };
}

/*
 * Copyright 2024 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 
const $96b38030c423d352$export$60d741e20e0aa309 = /*#__PURE__*/ (reactExports.createContext)({});
function $96b38030c423d352$export$574e9b0fb070c3b0() {
    var _useContext;
    return (_useContext = (reactExports.useContext)($96b38030c423d352$export$60d741e20e0aa309)) !== null && _useContext !== void 0 ? _useContext : {};
}

/*
 * Copyright 2022 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 






const $337b884510726a0d$export$a2200b96afd16271 = /*#__PURE__*/ (React).createContext(null);
function $337b884510726a0d$export$c6fdb837b070b4ff(props) {
    let isSSR = ($b5e257d569688ac6$export$535bd6ca7f90a273)();
    let { portalContainer: portalContainer = isSSR ? null : document.body, isExiting: isExiting } = props;
    let [contain, setContain] = (reactExports.useState)(false);
    let contextValue = (reactExports.useMemo)(()=>({
            contain: contain,
            setContain: setContain
        }), [
        contain,
        setContain
    ]);
    let { getContainer: getContainer } = ($96b38030c423d352$export$574e9b0fb070c3b0)();
    if (!props.portalContainer && getContainer) portalContainer = getContainer();
    if (!portalContainer) return null;
    let contents = props.children;
    if (!props.disableFocusManagement) contents = /*#__PURE__*/ (React).createElement(($9bf71ea28793e738$export$20e40289641fbbb6), {
        restoreFocus: true,
        contain: contain && !isExiting
    }, contents);
    contents = /*#__PURE__*/ (React).createElement($337b884510726a0d$export$a2200b96afd16271.Provider, {
        value: contextValue
    }, /*#__PURE__*/ (React).createElement(($f1ab8c75478c6f73$export$cf75428e0b9ed1ea), null, contents));
    return /*#__PURE__*/ ($dbSRa$reactdom).createPortal(contents, portalContainer);
}
function $337b884510726a0d$export$14c98a7594375490() {
    let ctx = (reactExports.useContext)($337b884510726a0d$export$a2200b96afd16271);
    let setContain = ctx === null || ctx === void 0 ? void 0 : ctx.setContain;
    ($f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(()=>{
        setContain === null || setContain === void 0 ? void 0 : setContain(true);
    }, [
        setContain
    ]);
}

/*
 * Copyright 2022 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 





function $8ac8429251c45e4b$export$dbc0f175b25fb0fb(props, state, ref) {
    let { overlayProps: overlayProps, underlayProps: underlayProps } = ($a11501f3d1d39e6c$export$ea8f71083e90600f)({
        ...props,
        isOpen: state.isOpen,
        onClose: state.close
    }, ref);
    ($49c51c25361d4cd2$export$ee0f7cc6afcd1c18)({
        isDisabled: !state.isOpen
    });
    ($337b884510726a0d$export$14c98a7594375490)();
    (reactExports.useEffect)(()=>{
        if (state.isOpen) return ($5e3802645cc19319$export$1c3ebcada18427bf)([
            ref.current
        ]);
    }, [
        state.isOpen,
        ref
    ]);
    return {
        modalProps: ($3ef42575df84b30b$export$9d1611c77c2fe928)(overlayProps),
        underlayProps: underlayProps
    };
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ const $b1f0cad8af73213b$export$3585ede4d035bf14 = new WeakMap();
function $b1f0cad8af73213b$var$normalizeKey(key) {
    if (typeof key === 'string') return key.replace(/\s*/g, '');
    return '' + key;
}
function $b1f0cad8af73213b$export$9145995848b05025(state, itemKey) {
    let data = $b1f0cad8af73213b$export$3585ede4d035bf14.get(state);
    if (!data) throw new Error('Unknown list');
    return `${data.id}-option-${$b1f0cad8af73213b$var$normalizeKey(itemKey)}`;
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 
function $feb5ffebff200149$export$d3e3bd3e26688c04(e) {
    // Ctrl + Arrow Up/Arrow Down has a system wide meaning on macOS, so use Alt instead.
    // On Windows and Ubuntu, Alt + Space has a system wide meaning.
    return ($c87311424ea30a05$export$e1865c3bedcd822b)() ? e.altKey : e.ctrlKey;
}
function $feb5ffebff200149$export$16792effe837dba3(e) {
    if (($c87311424ea30a05$export$9ac100e40613ea10)()) return e.metaKey;
    return e.ctrlKey;
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 
/**
 * Controls how long to wait before clearing the typeahead buffer.
 */ const $fb3050f43d946246$var$TYPEAHEAD_DEBOUNCE_WAIT_MS = 1000; // 1 second
function $fb3050f43d946246$export$e32c88dfddc6e1d8(options) {
    let { keyboardDelegate: keyboardDelegate, selectionManager: selectionManager, onTypeSelect: onTypeSelect } = options;
    let state = (reactExports.useRef)({
        search: '',
        timeout: null
    }).current;
    let onKeyDown = (e)=>{
        let character = $fb3050f43d946246$var$getStringForKey(e.key);
        if (!character || e.ctrlKey || e.metaKey || !e.currentTarget.contains(e.target)) return;
        // Do not propagate the Spacebar event if it's meant to be part of the search.
        // When we time out, the search term becomes empty, hence the check on length.
        // Trimming is to account for the case of pressing the Spacebar more than once,
        // which should cycle through the selection/deselection of the focused item.
        if (character === ' ' && state.search.trim().length > 0) {
            e.preventDefault();
            if (!('continuePropagation' in e)) e.stopPropagation();
        }
        state.search += character;
        // Use the delegate to find a key to focus.
        // Prioritize items after the currently focused item, falling back to searching the whole list.
        let key = keyboardDelegate.getKeyForSearch(state.search, selectionManager.focusedKey);
        // If no key found, search from the top.
        if (key == null) key = keyboardDelegate.getKeyForSearch(state.search);
        if (key != null) {
            selectionManager.setFocusedKey(key);
            if (onTypeSelect) onTypeSelect(key);
        }
        clearTimeout(state.timeout);
        state.timeout = setTimeout(()=>{
            state.search = '';
        }, $fb3050f43d946246$var$TYPEAHEAD_DEBOUNCE_WAIT_MS);
    };
    return {
        typeSelectProps: {
            // Using a capturing listener to catch the keydown event before
            // other hooks in order to handle the Spacebar event.
            onKeyDownCapture: keyboardDelegate.getKeyForSearch ? onKeyDown : null
        }
    };
}
function $fb3050f43d946246$var$getStringForKey(key) {
    // If the key is of length 1, it is an ASCII value.
    // Otherwise, if there are no ASCII characters in the key name,
    // it is a Unicode character.
    // See https://www.w3.org/TR/uievents-key/
    if (key.length === 1 || !/^[A-Z]/i.test(key)) return key;
    return '';
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 







function $ae20dd8cbca75726$export$d6daf82dcd84e87c(options) {
    let { selectionManager: manager, keyboardDelegate: delegate, ref: ref, autoFocus: autoFocus = false, shouldFocusWrap: shouldFocusWrap = false, disallowEmptySelection: disallowEmptySelection = false, disallowSelectAll: disallowSelectAll = false, selectOnFocus: selectOnFocus = manager.selectionBehavior === 'replace', disallowTypeAhead: disallowTypeAhead = false, shouldUseVirtualFocus: shouldUseVirtualFocus, allowsTabNavigation: allowsTabNavigation = false, isVirtualized: isVirtualized, scrollRef: // If no scrollRef is provided, assume the collection ref is the scrollable region
    scrollRef = ref, linkBehavior: linkBehavior = 'action' } = options;
    let { direction: direction } = ($18f2051aff69b9bf$export$43bb16f9c6d9e3f7)();
    let router = ($ea8dcbcb9ea1b556$export$9a302a45f65d0572)();
    let onKeyDown = (e)=>{
        // Prevent option + tab from doing anything since it doesn't move focus to the cells, only buttons/checkboxes
        if (e.altKey && e.key === 'Tab') e.preventDefault();
        // Keyboard events bubble through portals. Don't handle keyboard events
        // for elements outside the collection (e.g. menus).
        if (!ref.current.contains(e.target)) return;
        const navigateToKey = (key, childFocus)=>{
            if (key != null) {
                if (manager.isLink(key) && linkBehavior === 'selection' && selectOnFocus && !($feb5ffebff200149$export$d3e3bd3e26688c04)(e)) {
                    // Set focused key and re-render synchronously to bring item into view if needed.
                    (reactDomExports.flushSync)(()=>{
                        manager.setFocusedKey(key, childFocus);
                    });
                    let item = scrollRef.current.querySelector(`[data-key="${CSS.escape(key.toString())}"]`);
                    let itemProps = manager.getItemProps(key);
                    router.open(item, e, itemProps.href, itemProps.routerOptions);
                    return;
                }
                manager.setFocusedKey(key, childFocus);
                if (manager.isLink(key) && linkBehavior === 'override') return;
                if (e.shiftKey && manager.selectionMode === 'multiple') manager.extendSelection(key);
                else if (selectOnFocus && !($feb5ffebff200149$export$d3e3bd3e26688c04)(e)) manager.replaceSelection(key);
            }
        };
        switch(e.key){
            case 'ArrowDown':
                if (delegate.getKeyBelow) {
                    var _delegate_getFirstKey, _delegate_getFirstKey1;
                    e.preventDefault();
                    let nextKey = manager.focusedKey != null ? delegate.getKeyBelow(manager.focusedKey) : (_delegate_getFirstKey = delegate.getFirstKey) === null || _delegate_getFirstKey === void 0 ? void 0 : _delegate_getFirstKey.call(delegate);
                    if (nextKey == null && shouldFocusWrap) nextKey = (_delegate_getFirstKey1 = delegate.getFirstKey) === null || _delegate_getFirstKey1 === void 0 ? void 0 : _delegate_getFirstKey1.call(delegate, manager.focusedKey);
                    navigateToKey(nextKey);
                }
                break;
            case 'ArrowUp':
                if (delegate.getKeyAbove) {
                    var _delegate_getLastKey, _delegate_getLastKey1;
                    e.preventDefault();
                    let nextKey = manager.focusedKey != null ? delegate.getKeyAbove(manager.focusedKey) : (_delegate_getLastKey = delegate.getLastKey) === null || _delegate_getLastKey === void 0 ? void 0 : _delegate_getLastKey.call(delegate);
                    if (nextKey == null && shouldFocusWrap) nextKey = (_delegate_getLastKey1 = delegate.getLastKey) === null || _delegate_getLastKey1 === void 0 ? void 0 : _delegate_getLastKey1.call(delegate, manager.focusedKey);
                    navigateToKey(nextKey);
                }
                break;
            case 'ArrowLeft':
                if (delegate.getKeyLeftOf) {
                    var _delegate_getFirstKey2, _delegate_getLastKey2;
                    e.preventDefault();
                    let nextKey = delegate.getKeyLeftOf(manager.focusedKey);
                    if (nextKey == null && shouldFocusWrap) nextKey = direction === 'rtl' ? (_delegate_getFirstKey2 = delegate.getFirstKey) === null || _delegate_getFirstKey2 === void 0 ? void 0 : _delegate_getFirstKey2.call(delegate, manager.focusedKey) : (_delegate_getLastKey2 = delegate.getLastKey) === null || _delegate_getLastKey2 === void 0 ? void 0 : _delegate_getLastKey2.call(delegate, manager.focusedKey);
                    navigateToKey(nextKey, direction === 'rtl' ? 'first' : 'last');
                }
                break;
            case 'ArrowRight':
                if (delegate.getKeyRightOf) {
                    var _delegate_getLastKey3, _delegate_getFirstKey3;
                    e.preventDefault();
                    let nextKey = delegate.getKeyRightOf(manager.focusedKey);
                    if (nextKey == null && shouldFocusWrap) nextKey = direction === 'rtl' ? (_delegate_getLastKey3 = delegate.getLastKey) === null || _delegate_getLastKey3 === void 0 ? void 0 : _delegate_getLastKey3.call(delegate, manager.focusedKey) : (_delegate_getFirstKey3 = delegate.getFirstKey) === null || _delegate_getFirstKey3 === void 0 ? void 0 : _delegate_getFirstKey3.call(delegate, manager.focusedKey);
                    navigateToKey(nextKey, direction === 'rtl' ? 'last' : 'first');
                }
                break;
            case 'Home':
                if (delegate.getFirstKey) {
                    e.preventDefault();
                    let firstKey = delegate.getFirstKey(manager.focusedKey, ($feb5ffebff200149$export$16792effe837dba3)(e));
                    manager.setFocusedKey(firstKey);
                    if (($feb5ffebff200149$export$16792effe837dba3)(e) && e.shiftKey && manager.selectionMode === 'multiple') manager.extendSelection(firstKey);
                    else if (selectOnFocus) manager.replaceSelection(firstKey);
                }
                break;
            case 'End':
                if (delegate.getLastKey) {
                    e.preventDefault();
                    let lastKey = delegate.getLastKey(manager.focusedKey, ($feb5ffebff200149$export$16792effe837dba3)(e));
                    manager.setFocusedKey(lastKey);
                    if (($feb5ffebff200149$export$16792effe837dba3)(e) && e.shiftKey && manager.selectionMode === 'multiple') manager.extendSelection(lastKey);
                    else if (selectOnFocus) manager.replaceSelection(lastKey);
                }
                break;
            case 'PageDown':
                if (delegate.getKeyPageBelow) {
                    e.preventDefault();
                    let nextKey = delegate.getKeyPageBelow(manager.focusedKey);
                    navigateToKey(nextKey);
                }
                break;
            case 'PageUp':
                if (delegate.getKeyPageAbove) {
                    e.preventDefault();
                    let nextKey = delegate.getKeyPageAbove(manager.focusedKey);
                    navigateToKey(nextKey);
                }
                break;
            case 'a':
                if (($feb5ffebff200149$export$16792effe837dba3)(e) && manager.selectionMode === 'multiple' && disallowSelectAll !== true) {
                    e.preventDefault();
                    manager.selectAll();
                }
                break;
            case 'Escape':
                if (!disallowEmptySelection && manager.selectedKeys.size !== 0) {
                    e.stopPropagation();
                    e.preventDefault();
                    manager.clearSelection();
                }
                break;
            case 'Tab':
                if (!allowsTabNavigation) {
                    // There may be elements that are "tabbable" inside a collection (e.g. in a grid cell).
                    // However, collections should be treated as a single tab stop, with arrow key navigation internally.
                    // We don't control the rendering of these, so we can't override the tabIndex to prevent tabbing.
                    // Instead, we handle the Tab key, and move focus manually to the first/last tabbable element
                    // in the collection, so that the browser default behavior will apply starting from that element
                    // rather than the currently focused one.
                    if (e.shiftKey) ref.current.focus();
                    else {
                        let walker = ($9bf71ea28793e738$export$2d6ec8fc375ceafa)(ref.current, {
                            tabbable: true
                        });
                        let next;
                        let last;
                        do {
                            last = walker.lastChild();
                            if (last) next = last;
                        }while (last);
                        if (next && !next.contains(document.activeElement)) ($7215afc6de606d6b$export$de79e2c695e052f3)(next);
                    }
                    break;
                }
        }
    };
    // Store the scroll position so we can restore it later.
    /// TODO: should this happen all the time??
    let scrollPos = (reactExports.useRef)({
        top: 0,
        left: 0
    });
    ($e9faafb641e167db$export$90fc3a17d93f704c)(scrollRef, 'scroll', isVirtualized ? null : ()=>{
        scrollPos.current = {
            top: scrollRef.current.scrollTop,
            left: scrollRef.current.scrollLeft
        };
    });
    let onFocus = (e)=>{
        if (manager.isFocused) {
            // If a focus event bubbled through a portal, reset focus state.
            if (!e.currentTarget.contains(e.target)) manager.setFocused(false);
            return;
        }
        // Focus events can bubble through portals. Ignore these events.
        if (!e.currentTarget.contains(e.target)) return;
        manager.setFocused(true);
        if (manager.focusedKey == null) {
            let navigateToFirstKey = (key)=>{
                if (key != null) {
                    manager.setFocusedKey(key);
                    if (selectOnFocus) manager.replaceSelection(key);
                }
            };
            // If the user hasn't yet interacted with the collection, there will be no focusedKey set.
            // Attempt to detect whether the user is tabbing forward or backward into the collection
            // and either focus the first or last item accordingly.
            let relatedTarget = e.relatedTarget;
            var _manager_lastSelectedKey, _manager_firstSelectedKey;
            if (relatedTarget && e.currentTarget.compareDocumentPosition(relatedTarget) & Node.DOCUMENT_POSITION_FOLLOWING) navigateToFirstKey((_manager_lastSelectedKey = manager.lastSelectedKey) !== null && _manager_lastSelectedKey !== void 0 ? _manager_lastSelectedKey : delegate.getLastKey());
            else navigateToFirstKey((_manager_firstSelectedKey = manager.firstSelectedKey) !== null && _manager_firstSelectedKey !== void 0 ? _manager_firstSelectedKey : delegate.getFirstKey());
        } else if (!isVirtualized) {
            // Restore the scroll position to what it was before.
            scrollRef.current.scrollTop = scrollPos.current.top;
            scrollRef.current.scrollLeft = scrollPos.current.left;
        }
        if (manager.focusedKey != null) {
            // Refocus and scroll the focused item into view if it exists within the scrollable region.
            let element = scrollRef.current.querySelector(`[data-key="${CSS.escape(manager.focusedKey.toString())}"]`);
            if (element) {
                // This prevents a flash of focus on the first/last element in the collection, or the collection itself.
                if (!element.contains(document.activeElement)) ($7215afc6de606d6b$export$de79e2c695e052f3)(element);
                let modality = ($507fabe10e71c6fb$export$630ff653c5ada6a9)();
                if (modality === 'keyboard') ($2f04cbc44ee30ce0$export$c826860796309d1b)(element, {
                    containingElement: ref.current
                });
            }
        }
    };
    let onBlur = (e)=>{
        // Don't set blurred and then focused again if moving focus within the collection.
        if (!e.currentTarget.contains(e.relatedTarget)) manager.setFocused(false);
    };
    const autoFocusRef = (reactExports.useRef)(autoFocus);
    (reactExports.useEffect)(()=>{
        if (autoFocusRef.current) {
            let focusedKey = null;
            // Check focus strategy to determine which item to focus
            if (autoFocus === 'first') focusedKey = delegate.getFirstKey();
            if (autoFocus === 'last') focusedKey = delegate.getLastKey();
            // If there are any selected keys, make the first one the new focus target
            let selectedKeys = manager.selectedKeys;
            if (selectedKeys.size) {
                for (let key of selectedKeys)if (manager.canSelectItem(key)) {
                    focusedKey = key;
                    break;
                }
            }
            manager.setFocused(true);
            manager.setFocusedKey(focusedKey);
            // If no default focus key is selected, focus the collection itself.
            if (focusedKey == null && !shouldUseVirtualFocus) ($6a99195332edec8b$export$80f3e147d781571c)(ref.current);
        }
    // eslint-disable-next-line react-hooks/exhaustive-deps
    }, []);
    // Scroll the focused element into view when the focusedKey changes.
    let lastFocusedKey = (reactExports.useRef)(manager.focusedKey);
    (reactExports.useEffect)(()=>{
        if (manager.isFocused && manager.focusedKey != null && (manager.focusedKey !== lastFocusedKey.current || autoFocusRef.current) && (scrollRef === null || scrollRef === void 0 ? void 0 : scrollRef.current)) {
            let modality = ($507fabe10e71c6fb$export$630ff653c5ada6a9)();
            let element = ref.current.querySelector(`[data-key="${CSS.escape(manager.focusedKey.toString())}"]`);
            if (!element) // If item element wasn't found, return early (don't update autoFocusRef and lastFocusedKey).
            // The collection may initially be empty (e.g. virtualizer), so wait until the element exists.
            return;
            if (modality === 'keyboard' || autoFocusRef.current) {
                ($2f04cbc44ee30ce0$export$53a0910f038337bd)(scrollRef.current, element);
                // Avoid scroll in iOS VO, since it may cause overlay to close (i.e. RAC submenu)
                if (modality !== 'virtual') ($2f04cbc44ee30ce0$export$c826860796309d1b)(element, {
                    containingElement: ref.current
                });
            }
        }
        // If the focused key becomes null (e.g. the last item is deleted), focus the whole collection.
        if (!shouldUseVirtualFocus && manager.isFocused && manager.focusedKey == null && lastFocusedKey.current != null) ($6a99195332edec8b$export$80f3e147d781571c)(ref.current);
        lastFocusedKey.current = manager.focusedKey;
        autoFocusRef.current = false;
    });
    // Intercept FocusScope restoration since virtualized collections can reuse DOM nodes.
    ($e9faafb641e167db$export$90fc3a17d93f704c)(ref, 'react-aria-focus-scope-restore', (e)=>{
        e.preventDefault();
        manager.setFocused(true);
    });
    let handlers = {
        onKeyDown: onKeyDown,
        onFocus: onFocus,
        onBlur: onBlur,
        onMouseDown (e) {
            // Ignore events that bubbled through portals.
            if (scrollRef.current === e.target) // Prevent focus going to the collection when clicking on the scrollbar.
            e.preventDefault();
        }
    };
    let { typeSelectProps: typeSelectProps } = ($fb3050f43d946246$export$e32c88dfddc6e1d8)({
        keyboardDelegate: delegate,
        selectionManager: manager
    });
    if (!disallowTypeAhead) handlers = ($3ef42575df84b30b$export$9d1611c77c2fe928)(typeSelectProps, handlers);
    // If nothing is focused within the collection, make the collection itself tabbable.
    // This will be marshalled to either the first or last item depending on where focus came from.
    // If using virtual focus, don't set a tabIndex at all so that VoiceOver on iOS 14 doesn't try
    // to move real DOM focus to the element anyway.
    let tabIndex;
    if (!shouldUseVirtualFocus) tabIndex = manager.focusedKey == null ? 0 : -1;
    return {
        collectionProps: {
            ...handlers,
            tabIndex: tabIndex
        }
    };
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 




function $880e95eb8b93ba9a$export$ecf600387e221c37(options) {
    let { selectionManager: manager, key: key, ref: ref, shouldSelectOnPressUp: shouldSelectOnPressUp, shouldUseVirtualFocus: shouldUseVirtualFocus, focus: focus, isDisabled: isDisabled, onAction: onAction, allowsDifferentPressOrigin: allowsDifferentPressOrigin, linkBehavior: linkBehavior = 'action' } = options;
    let router = ($ea8dcbcb9ea1b556$export$9a302a45f65d0572)();
    let onSelect = (e)=>{
        if (e.pointerType === 'keyboard' && ($feb5ffebff200149$export$d3e3bd3e26688c04)(e)) manager.toggleSelection(key);
        else {
            if (manager.selectionMode === 'none') return;
            if (manager.isLink(key)) {
                if (linkBehavior === 'selection') {
                    let itemProps = manager.getItemProps(key);
                    router.open(ref.current, e, itemProps.href, itemProps.routerOptions);
                    // Always set selected keys back to what they were so that select and combobox close.
                    manager.setSelectedKeys(manager.selectedKeys);
                    return;
                } else if (linkBehavior === 'override' || linkBehavior === 'none') return;
            }
            if (manager.selectionMode === 'single') {
                if (manager.isSelected(key) && !manager.disallowEmptySelection) manager.toggleSelection(key);
                else manager.replaceSelection(key);
            } else if (e && e.shiftKey) manager.extendSelection(key);
            else if (manager.selectionBehavior === 'toggle' || e && (($feb5ffebff200149$export$16792effe837dba3)(e) || e.pointerType === 'touch' || e.pointerType === 'virtual')) // if touch or virtual (VO) then we just want to toggle, otherwise it's impossible to multi select because they don't have modifier keys
            manager.toggleSelection(key);
            else manager.replaceSelection(key);
        }
    };
    // Focus the associated DOM node when this item becomes the focusedKey
    (reactExports.useEffect)(()=>{
        let isFocused = key === manager.focusedKey;
        if (isFocused && manager.isFocused && !shouldUseVirtualFocus) {
            if (focus) focus();
            else if (document.activeElement !== ref.current) ($6a99195332edec8b$export$80f3e147d781571c)(ref.current);
        }
    // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [
        ref,
        key,
        manager.focusedKey,
        manager.childFocusStrategy,
        manager.isFocused,
        shouldUseVirtualFocus
    ]);
    isDisabled = isDisabled || manager.isDisabled(key);
    // Set tabIndex to 0 if the element is focused, or -1 otherwise so that only the last focused
    // item is tabbable.  If using virtual focus, don't set a tabIndex at all so that VoiceOver
    // on iOS 14 doesn't try to move real DOM focus to the item anyway.
    let itemProps = {};
    if (!shouldUseVirtualFocus && !isDisabled) itemProps = {
        tabIndex: key === manager.focusedKey ? 0 : -1,
        onFocus (e) {
            if (e.target === ref.current) manager.setFocusedKey(key);
        }
    };
    else if (isDisabled) itemProps.onMouseDown = (e)=>{
        // Prevent focus going to the body when clicking on a disabled item.
        e.preventDefault();
    };
    // With checkbox selection, onAction (i.e. navigation) becomes primary, and occurs on a single click of the row.
    // Clicking the checkbox enters selection mode, after which clicking anywhere on any row toggles selection for that row.
    // With highlight selection, onAction is secondary, and occurs on double click. Single click selects the row.
    // With touch, onAction occurs on single tap, and long press enters selection mode.
    let isLinkOverride = manager.isLink(key) && linkBehavior === 'override';
    let hasLinkAction = manager.isLink(key) && linkBehavior !== 'selection' && linkBehavior !== 'none';
    let allowsSelection = !isDisabled && manager.canSelectItem(key) && !isLinkOverride;
    let allowsActions = (onAction || hasLinkAction) && !isDisabled;
    let hasPrimaryAction = allowsActions && (manager.selectionBehavior === 'replace' ? !allowsSelection : !allowsSelection || manager.isEmpty);
    let hasSecondaryAction = allowsActions && allowsSelection && manager.selectionBehavior === 'replace';
    let hasAction = hasPrimaryAction || hasSecondaryAction;
    let modality = (reactExports.useRef)(null);
    let longPressEnabled = hasAction && allowsSelection;
    let longPressEnabledOnPressStart = (reactExports.useRef)(false);
    let hadPrimaryActionOnPressStart = (reactExports.useRef)(false);
    let performAction = (e)=>{
        if (onAction) onAction();
        if (hasLinkAction) {
            let itemProps = manager.getItemProps(key);
            router.open(ref.current, e, itemProps.href, itemProps.routerOptions);
        }
    };
    // By default, selection occurs on pointer down. This can be strange if selecting an
    // item causes the UI to disappear immediately (e.g. menus).
    // If shouldSelectOnPressUp is true, we use onPressUp instead of onPressStart.
    // onPress requires a pointer down event on the same element as pointer up. For menus,
    // we want to be able to have the pointer down on the trigger that opens the menu and
    // the pointer up on the menu item rather than requiring a separate press.
    // For keyboard events, selection still occurs on key down.
    let itemPressProps = {};
    if (shouldSelectOnPressUp) {
        itemPressProps.onPressStart = (e)=>{
            modality.current = e.pointerType;
            longPressEnabledOnPressStart.current = longPressEnabled;
            if (e.pointerType === 'keyboard' && (!hasAction || $880e95eb8b93ba9a$var$isSelectionKey())) onSelect(e);
        };
        // If allowsDifferentPressOrigin, make selection happen on pressUp (e.g. open menu on press down, selection on menu item happens on press up.)
        // Otherwise, have selection happen onPress (prevents listview row selection when clicking on interactable elements in the row)
        if (!allowsDifferentPressOrigin) itemPressProps.onPress = (e)=>{
            if (hasPrimaryAction || hasSecondaryAction && e.pointerType !== 'mouse') {
                if (e.pointerType === 'keyboard' && !$880e95eb8b93ba9a$var$isActionKey()) return;
                performAction(e);
            } else if (e.pointerType !== 'keyboard' && allowsSelection) onSelect(e);
        };
        else {
            itemPressProps.onPressUp = hasPrimaryAction ? null : (e)=>{
                if (e.pointerType !== 'keyboard' && allowsSelection) onSelect(e);
            };
            itemPressProps.onPress = hasPrimaryAction ? performAction : null;
        }
    } else {
        itemPressProps.onPressStart = (e)=>{
            modality.current = e.pointerType;
            longPressEnabledOnPressStart.current = longPressEnabled;
            hadPrimaryActionOnPressStart.current = hasPrimaryAction;
            // Select on mouse down unless there is a primary action which will occur on mouse up.
            // For keyboard, select on key down. If there is an action, the Space key selects on key down,
            // and the Enter key performs onAction on key up.
            if (allowsSelection && (e.pointerType === 'mouse' && !hasPrimaryAction || e.pointerType === 'keyboard' && (!allowsActions || $880e95eb8b93ba9a$var$isSelectionKey()))) onSelect(e);
        };
        itemPressProps.onPress = (e)=>{
            // Selection occurs on touch up. Primary actions always occur on pointer up.
            // Both primary and secondary actions occur on Enter key up. The only exception
            // is secondary actions, which occur on double click with a mouse.
            if (e.pointerType === 'touch' || e.pointerType === 'pen' || e.pointerType === 'virtual' || e.pointerType === 'keyboard' && hasAction && $880e95eb8b93ba9a$var$isActionKey() || e.pointerType === 'mouse' && hadPrimaryActionOnPressStart.current) {
                if (hasAction) performAction(e);
                else if (allowsSelection) onSelect(e);
            }
        };
    }
    itemProps['data-key'] = key;
    itemPressProps.preventFocusOnPress = shouldUseVirtualFocus;
    let { pressProps: pressProps, isPressed: isPressed } = ($f6c31cce2adf654f$export$45712eceda6fad21)(itemPressProps);
    // Double clicking with a mouse with selectionBehavior = 'replace' performs an action.
    let onDoubleClick = hasSecondaryAction ? (e)=>{
        if (modality.current === 'mouse') {
            e.stopPropagation();
            e.preventDefault();
            performAction(e);
        }
    } : undefined;
    // Long pressing an item with touch when selectionBehavior = 'replace' switches the selection behavior
    // to 'toggle'. This changes the single tap behavior from performing an action (i.e. navigating) to
    // selecting, and may toggle the appearance of a UI affordance like checkboxes on each item.
    let { longPressProps: longPressProps } = ($8a26561d2877236e$export$c24ed0104d07eab9)({
        isDisabled: !longPressEnabled,
        onLongPress (e) {
            if (e.pointerType === 'touch') {
                onSelect(e);
                manager.setSelectionBehavior('toggle');
            }
        }
    });
    // Prevent native drag and drop on long press if we also select on long press.
    // Once the user is in selection mode, they can long press again to drag.
    // Use a capturing listener to ensure this runs before useDrag, regardless of
    // the order the props get merged.
    let onDragStartCapture = (e)=>{
        if (modality.current === 'touch' && longPressEnabledOnPressStart.current) e.preventDefault();
    };
    // Prevent default on link clicks so that we control exactly
    // when they open (to match selection behavior).
    let onClick = manager.isLink(key) ? (e)=>{
        if (!($ea8dcbcb9ea1b556$export$95185d699e05d4d7).isOpening) e.preventDefault();
    } : undefined;
    return {
        itemProps: ($3ef42575df84b30b$export$9d1611c77c2fe928)(itemProps, allowsSelection || hasPrimaryAction ? pressProps : {}, longPressEnabled ? longPressProps : {}, {
            onDoubleClick: onDoubleClick,
            onDragStartCapture: onDragStartCapture,
            onClick: onClick
        }),
        isPressed: isPressed,
        isSelected: manager.isSelected(key),
        isFocused: manager.isFocused && manager.focusedKey === key,
        isDisabled: isDisabled,
        allowsSelection: allowsSelection,
        hasAction: hasAction
    };
}
function $880e95eb8b93ba9a$var$isActionKey() {
    let event = window.event;
    return (event === null || event === void 0 ? void 0 : event.key) === 'Enter';
}
function $880e95eb8b93ba9a$var$isSelectionKey() {
    let event = window.event;
    return (event === null || event === void 0 ? void 0 : event.key) === ' ' || (event === null || event === void 0 ? void 0 : event.code) === 'Space';
}

/*
 * Copyright 2024 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ class $657e4dc4a6e88df0$export$8f5ed9ff9f511381 {
    getItemRect(key) {
        let container = this.ref.current;
        let item = key != null ? container.querySelector(`[data-key="${CSS.escape(key.toString())}"]`) : null;
        if (!item) return null;
        let containerRect = container.getBoundingClientRect();
        let itemRect = item.getBoundingClientRect();
        return {
            x: itemRect.left - containerRect.left + container.scrollLeft,
            y: itemRect.top - containerRect.top + container.scrollTop,
            width: itemRect.width,
            height: itemRect.height
        };
    }
    getContentSize() {
        let container = this.ref.current;
        return {
            width: container.scrollWidth,
            height: container.scrollHeight
        };
    }
    getVisibleRect() {
        let container = this.ref.current;
        return {
            x: container.scrollLeft,
            y: container.scrollTop,
            width: container.offsetWidth,
            height: container.offsetHeight
        };
    }
    constructor(ref){
        this.ref = ref;
    }
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 

class $2a25aae57d74318e$export$a05409b8bb224a5a {
    isDisabled(item) {
        var _item_props;
        return this.disabledBehavior === 'all' && (((_item_props = item.props) === null || _item_props === void 0 ? void 0 : _item_props.isDisabled) || this.disabledKeys.has(item.key));
    }
    getNextKey(key) {
        key = this.collection.getKeyAfter(key);
        while(key != null){
            let item = this.collection.getItem(key);
            if (item.type === 'item' && !this.isDisabled(item)) return key;
            key = this.collection.getKeyAfter(key);
        }
        return null;
    }
    getPreviousKey(key) {
        key = this.collection.getKeyBefore(key);
        while(key != null){
            let item = this.collection.getItem(key);
            if (item.type === 'item' && !this.isDisabled(item)) return key;
            key = this.collection.getKeyBefore(key);
        }
        return null;
    }
    findKey(key, nextKey, shouldSkip) {
        let itemRect = this.layoutDelegate.getItemRect(key);
        if (!itemRect) return null;
        // Find the item above or below in the same column.
        let prevRect = itemRect;
        do {
            key = nextKey(key);
            itemRect = this.layoutDelegate.getItemRect(key);
        }while (itemRect && shouldSkip(prevRect, itemRect));
        return key;
    }
    isSameRow(prevRect, itemRect) {
        return prevRect.y === itemRect.y || prevRect.x !== itemRect.x;
    }
    isSameColumn(prevRect, itemRect) {
        return prevRect.x === itemRect.x || prevRect.y !== itemRect.y;
    }
    getKeyBelow(key) {
        if (this.layout === 'grid' && this.orientation === 'vertical') return this.findKey(key, (key)=>this.getNextKey(key), this.isSameRow);
        else return this.getNextKey(key);
    }
    getKeyAbove(key) {
        if (this.layout === 'grid' && this.orientation === 'vertical') return this.findKey(key, (key)=>this.getPreviousKey(key), this.isSameRow);
        else return this.getPreviousKey(key);
    }
    getNextColumn(key, right) {
        return right ? this.getPreviousKey(key) : this.getNextKey(key);
    }
    getKeyRightOf(key) {
        if (this.layout === 'grid') {
            if (this.orientation === 'vertical') return this.getNextColumn(key, this.direction === 'rtl');
            else return this.findKey(key, (key)=>this.getNextColumn(key, this.direction === 'rtl'), this.isSameColumn);
        } else if (this.orientation === 'horizontal') return this.getNextColumn(key, this.direction === 'rtl');
        return null;
    }
    getKeyLeftOf(key) {
        if (this.layout === 'grid') {
            if (this.orientation === 'vertical') return this.getNextColumn(key, this.direction === 'ltr');
            else return this.findKey(key, (key)=>this.getNextColumn(key, this.direction === 'ltr'), this.isSameColumn);
        } else if (this.orientation === 'horizontal') return this.getNextColumn(key, this.direction === 'ltr');
        return null;
    }
    getFirstKey() {
        let key = this.collection.getFirstKey();
        while(key != null){
            let item = this.collection.getItem(key);
            if ((item === null || item === void 0 ? void 0 : item.type) === 'item' && !this.isDisabled(item)) return key;
            key = this.collection.getKeyAfter(key);
        }
        return null;
    }
    getLastKey() {
        let key = this.collection.getLastKey();
        while(key != null){
            let item = this.collection.getItem(key);
            if (item.type === 'item' && !this.isDisabled(item)) return key;
            key = this.collection.getKeyBefore(key);
        }
        return null;
    }
    getKeyPageAbove(key) {
        let menu = this.ref.current;
        let itemRect = this.layoutDelegate.getItemRect(key);
        if (!itemRect) return null;
        if (!($cc38e7bd3fc7b213$export$2bb74740c4e19def)(menu)) return this.getFirstKey();
        if (this.orientation === 'horizontal') {
            let pageX = Math.max(0, itemRect.x + itemRect.width - this.layoutDelegate.getVisibleRect().width);
            while(itemRect && itemRect.x > pageX){
                key = this.getKeyAbove(key);
                itemRect = key == null ? null : this.layoutDelegate.getItemRect(key);
            }
        } else {
            let pageY = Math.max(0, itemRect.y + itemRect.height - this.layoutDelegate.getVisibleRect().height);
            while(itemRect && itemRect.y > pageY){
                key = this.getKeyAbove(key);
                itemRect = key == null ? null : this.layoutDelegate.getItemRect(key);
            }
        }
        return key !== null && key !== void 0 ? key : this.getFirstKey();
    }
    getKeyPageBelow(key) {
        let menu = this.ref.current;
        let itemRect = this.layoutDelegate.getItemRect(key);
        if (!itemRect) return null;
        if (!($cc38e7bd3fc7b213$export$2bb74740c4e19def)(menu)) return this.getLastKey();
        if (this.orientation === 'horizontal') {
            let pageX = Math.min(this.layoutDelegate.getContentSize().width, itemRect.y - itemRect.width + this.layoutDelegate.getVisibleRect().width);
            while(itemRect && itemRect.x < pageX){
                key = this.getKeyBelow(key);
                itemRect = key == null ? null : this.layoutDelegate.getItemRect(key);
            }
        } else {
            let pageY = Math.min(this.layoutDelegate.getContentSize().height, itemRect.y - itemRect.height + this.layoutDelegate.getVisibleRect().height);
            while(itemRect && itemRect.y < pageY){
                key = this.getKeyBelow(key);
                itemRect = key == null ? null : this.layoutDelegate.getItemRect(key);
            }
        }
        return key !== null && key !== void 0 ? key : this.getLastKey();
    }
    getKeyForSearch(search, fromKey) {
        if (!this.collator) return null;
        let collection = this.collection;
        let key = fromKey || this.getFirstKey();
        while(key != null){
            let item = collection.getItem(key);
            let substring = item.textValue.slice(0, search.length);
            if (item.textValue && this.collator.compare(substring, search) === 0) return key;
            key = this.getKeyBelow(key);
        }
        return null;
    }
    constructor(...args){
        if (args.length === 1) {
            let opts = args[0];
            this.collection = opts.collection;
            this.ref = opts.ref;
            this.collator = opts.collator;
            this.disabledKeys = opts.disabledKeys || new Set();
            this.disabledBehavior = opts.disabledBehavior || 'all';
            this.orientation = opts.orientation || 'vertical';
            this.direction = opts.direction;
            this.layout = opts.layout || 'stack';
            this.layoutDelegate = opts.layoutDelegate || new ($657e4dc4a6e88df0$export$8f5ed9ff9f511381)(opts.ref);
        } else {
            this.collection = args[0];
            this.disabledKeys = args[1];
            this.ref = args[2];
            this.collator = args[3];
            this.layout = 'stack';
            this.orientation = 'vertical';
            this.disabledBehavior = 'all';
            this.layoutDelegate = new ($657e4dc4a6e88df0$export$8f5ed9ff9f511381)(this.ref);
        }
        // If this is a vertical stack, remove the left/right methods completely
        // so they aren't called by useDroppableCollection.
        if (this.layout === 'stack' && this.orientation === 'vertical') {
            this.getKeyLeftOf = undefined;
            this.getKeyRightOf = undefined;
        }
    }
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 



function $982254629710d113$export$b95089534ab7c1fd(props) {
    let { selectionManager: selectionManager, collection: collection, disabledKeys: disabledKeys, ref: ref, keyboardDelegate: keyboardDelegate, layoutDelegate: layoutDelegate } = props;
    // By default, a KeyboardDelegate is provided which uses the DOM to query layout information (e.g. for page up/page down).
    // When virtualized, the layout object will be passed in as a prop and override this.
    let collator = ($325a3faab7a68acd$export$a16aca283550c30d)({
        usage: 'search',
        sensitivity: 'base'
    });
    let disabledBehavior = selectionManager.disabledBehavior;
    let delegate = (reactExports.useMemo)(()=>keyboardDelegate || new ($2a25aae57d74318e$export$a05409b8bb224a5a)({
            collection: collection,
            disabledKeys: disabledKeys,
            disabledBehavior: disabledBehavior,
            ref: ref,
            collator: collator,
            layoutDelegate: layoutDelegate
        }), [
        keyboardDelegate,
        layoutDelegate,
        collection,
        disabledKeys,
        ref,
        collator,
        disabledBehavior
    ]);
    let { collectionProps: collectionProps } = ($ae20dd8cbca75726$export$d6daf82dcd84e87c)({
        ...props,
        ref: ref,
        selectionManager: selectionManager,
        keyboardDelegate: delegate
    });
    return {
        listProps: collectionProps
    };
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 




function $c132121280ec012d$export$50eacbbf140a3141(props, state, ref) {
    let domProps = ($65484d02dcb7eb3e$export$457c3d6518dd4c6f)(props, {
        labelable: true
    });
    // Use props instead of state here. We don't want this to change due to long press.
    let selectionBehavior = props.selectionBehavior || 'toggle';
    let linkBehavior = props.linkBehavior || (selectionBehavior === 'replace' ? 'action' : 'override');
    if (selectionBehavior === 'toggle' && linkBehavior === 'action') // linkBehavior="action" does not work with selectionBehavior="toggle" because there is no way
    // to initiate selection (checkboxes are not allowed inside a listbox). Link items will not be
    // selectable in this configuration.
    linkBehavior = 'override';
    let { listProps: listProps } = ($982254629710d113$export$b95089534ab7c1fd)({
        ...props,
        ref: ref,
        selectionManager: state.selectionManager,
        collection: state.collection,
        disabledKeys: state.disabledKeys,
        linkBehavior: linkBehavior
    });
    let { focusWithinProps: focusWithinProps } = ($9ab94262bd0047c7$export$420e68273165f4ec)({
        onFocusWithin: props.onFocus,
        onBlurWithin: props.onBlur,
        onFocusWithinChange: props.onFocusChange
    });
    // Share list id and some props with child options.
    let id = ($bdb11010cef70236$export$f680877a34711e37)(props.id);
    ($b1f0cad8af73213b$export$3585ede4d035bf14).set(state, {
        id: id,
        shouldUseVirtualFocus: props.shouldUseVirtualFocus,
        shouldSelectOnPressUp: props.shouldSelectOnPressUp,
        shouldFocusOnHover: props.shouldFocusOnHover,
        isVirtualized: props.isVirtualized,
        onAction: props.onAction,
        linkBehavior: linkBehavior
    });
    let { labelProps: labelProps, fieldProps: fieldProps } = ($d191a55c9702f145$export$8467354a121f1b9f)({
        ...props,
        id: id,
        // listbox is not an HTML input element so it
        // shouldn't be labeled by a <label> element.
        labelElementType: 'span'
    });
    return {
        labelProps: labelProps,
        listBoxProps: ($3ef42575df84b30b$export$9d1611c77c2fe928)(domProps, focusWithinProps, state.selectionManager.selectionMode === 'multiple' ? {
            'aria-multiselectable': 'true'
        } : {}, {
            role: 'listbox',
            ...($3ef42575df84b30b$export$9d1611c77c2fe928)(fieldProps, listProps)
        })
    };
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 
class $eb2240fc39a57fa5$export$bf788dd355e3a401 {
    build(props, context) {
        this.context = context;
        return $eb2240fc39a57fa5$var$iterable(()=>this.iterateCollection(props));
    }
    *iterateCollection(props) {
        let { children: children, items: items } = props;
        if (typeof children === 'function') {
            if (!items) throw new Error('props.children was a function but props.items is missing');
            for (let item of props.items)yield* this.getFullNode({
                value: item
            }, {
                renderer: children
            });
        } else {
            let items = [];
            (React).Children.forEach(children, (child)=>{
                items.push(child);
            });
            let index = 0;
            for (let item of items){
                let nodes = this.getFullNode({
                    element: item,
                    index: index
                }, {});
                for (let node of nodes){
                    index++;
                    yield node;
                }
            }
        }
    }
    getKey(item, partialNode, state, parentKey) {
        if (item.key != null) return item.key;
        if (partialNode.type === 'cell' && partialNode.key != null) return `${parentKey}${partialNode.key}`;
        let v = partialNode.value;
        if (v != null) {
            var _v_key;
            let key = (_v_key = v.key) !== null && _v_key !== void 0 ? _v_key : v.id;
            if (key == null) throw new Error('No key found for item');
            return key;
        }
        return parentKey ? `${parentKey}.${partialNode.index}` : `$.${partialNode.index}`;
    }
    getChildState(state, partialNode) {
        return {
            renderer: partialNode.renderer || state.renderer
        };
    }
    *getFullNode(partialNode, state, parentKey, parentNode) {
        // If there's a value instead of an element on the node, and a parent renderer function is available,
        // use it to render an element for the value.
        let element = partialNode.element;
        if (!element && partialNode.value && state && state.renderer) {
            let cached = this.cache.get(partialNode.value);
            if (cached && (!cached.shouldInvalidate || !cached.shouldInvalidate(this.context))) {
                cached.index = partialNode.index;
                cached.parentKey = parentNode ? parentNode.key : null;
                yield cached;
                return;
            }
            element = state.renderer(partialNode.value);
        }
        // If there's an element with a getCollectionNode function on its type, then it's a supported component.
        // Call this function to get a partial node, and recursively build a full node from there.
        if ((React).isValidElement(element)) {
            let type = element.type;
            if (typeof type !== 'function' && typeof type.getCollectionNode !== 'function') {
                let name = typeof element.type === 'function' ? element.type.name : element.type;
                throw new Error(`Unknown element <${name}> in collection.`);
            }
            let childNodes = type.getCollectionNode(element.props, this.context);
            let index = partialNode.index;
            let result = childNodes.next();
            while(!result.done && result.value){
                let childNode = result.value;
                partialNode.index = index;
                let nodeKey = childNode.key;
                if (!nodeKey) nodeKey = childNode.element ? null : this.getKey(element, partialNode, state, parentKey);
                let nodes = this.getFullNode({
                    ...childNode,
                    key: nodeKey,
                    index: index,
                    wrapper: $eb2240fc39a57fa5$var$compose(partialNode.wrapper, childNode.wrapper)
                }, this.getChildState(state, childNode), parentKey ? `${parentKey}${element.key}` : element.key, parentNode);
                let children = [
                    ...nodes
                ];
                for (let node of children){
                    // Cache the node based on its value
                    node.value = childNode.value || partialNode.value;
                    if (node.value) this.cache.set(node.value, node);
                    // The partial node may have specified a type for the child in order to specify a constraint.
                    // Verify that the full node that was built recursively matches this type.
                    if (partialNode.type && node.type !== partialNode.type) throw new Error(`Unsupported type <${$eb2240fc39a57fa5$var$capitalize(node.type)}> in <${$eb2240fc39a57fa5$var$capitalize(parentNode.type)}>. Only <${$eb2240fc39a57fa5$var$capitalize(partialNode.type)}> is supported.`);
                    index++;
                    yield node;
                }
                result = childNodes.next(children);
            }
            return;
        }
        // Ignore invalid elements
        if (partialNode.key == null) return;
        // Create full node
        let builder = this;
        let node = {
            type: partialNode.type,
            props: partialNode.props,
            key: partialNode.key,
            parentKey: parentNode ? parentNode.key : null,
            value: partialNode.value,
            level: parentNode ? parentNode.level + 1 : 0,
            index: partialNode.index,
            rendered: partialNode.rendered,
            textValue: partialNode.textValue,
            'aria-label': partialNode['aria-label'],
            wrapper: partialNode.wrapper,
            shouldInvalidate: partialNode.shouldInvalidate,
            hasChildNodes: partialNode.hasChildNodes,
            childNodes: $eb2240fc39a57fa5$var$iterable(function*() {
                if (!partialNode.hasChildNodes) return;
                let index = 0;
                for (let child of partialNode.childNodes()){
                    // Ensure child keys are globally unique by prepending the parent node's key
                    if (child.key != null) // TODO: Remove this line entirely and enforce that users always provide unique keys.
                    // Currently this line will have issues when a parent has a key `a` and a child with key `bc`
                    // but another parent has key `ab` and its child has a key `c`. The combined keys would result in both
                    // children having a key of `abc`.
                    child.key = `${node.key}${child.key}`;
                    child.index = index;
                    let nodes = builder.getFullNode(child, builder.getChildState(state, child), node.key, node);
                    for (let node of nodes){
                        index++;
                        yield node;
                    }
                }
            })
        };
        yield node;
    }
    constructor(){
        this.cache = new WeakMap();
    }
}
// Wraps an iterator function as an iterable object, and caches the results.
function $eb2240fc39a57fa5$var$iterable(iterator) {
    let cache = [];
    let iterable = null;
    return {
        *[Symbol.iterator] () {
            for (let item of cache)yield item;
            if (!iterable) iterable = iterator();
            for (let item of iterable){
                cache.push(item);
                yield item;
            }
        }
    };
}
function $eb2240fc39a57fa5$var$compose(outer, inner) {
    if (outer && inner) return (element)=>outer(inner(element));
    if (outer) return outer;
    if (inner) return inner;
}
function $eb2240fc39a57fa5$var$capitalize(str) {
    return str[0].toUpperCase() + str.slice(1);
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 

function $7613b1592d41b092$export$6cd28814d92fa9c9(props, factory, context) {
    let builder = (reactExports.useMemo)(()=>new ($eb2240fc39a57fa5$export$bf788dd355e3a401)(), []);
    let { children: children, items: items, collection: collection } = props;
    let result = (reactExports.useMemo)(()=>{
        if (collection) return collection;
        let nodes = builder.build({
            children: children,
            items: items
        }, context);
        return factory(nodes);
    }, [
        builder,
        children,
        items,
        collection,
        context,
        factory
    ]);
    return result;
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ function $c5a24bc478652b5f$export$1005530eda016c13(node, collection) {
    // New API: call collection.getChildren with the node key.
    if (typeof collection.getChildren === 'function') return collection.getChildren(node.key);
    // Old API: access childNodes directly.
    return node.childNodes;
}
function $c5a24bc478652b5f$export$fbdeaa6a76694f71(iterable) {
    return $c5a24bc478652b5f$export$5f3398f8733f90e2(iterable, 0);
}
function $c5a24bc478652b5f$export$5f3398f8733f90e2(iterable, index) {
    if (index < 0) return undefined;
    let i = 0;
    for (let item of iterable){
        if (i === index) return item;
        i++;
    }
}
function $c5a24bc478652b5f$export$7475b2c64539e4cf(iterable) {
    let lastItem = undefined;
    for (let value of iterable)lastItem = value;
    return lastItem;
}
function $c5a24bc478652b5f$export$8c434b3a7a4dad6(collection, a, b) {
    // If the two nodes have the same parent, compare their indices.
    if (a.parentKey === b.parentKey) return a.index - b.index;
    // Otherwise, collect all of the ancestors from each node, and find the first one that doesn't match starting from the root.
    // Include the base nodes in case we are comparing nodes of different levels so that we can compare the higher node to the lower level node's
    // ancestor of the same level
    let aAncestors = [
        ...$c5a24bc478652b5f$var$getAncestors(collection, a),
        a
    ];
    let bAncestors = [
        ...$c5a24bc478652b5f$var$getAncestors(collection, b),
        b
    ];
    let firstNonMatchingAncestor = aAncestors.slice(0, bAncestors.length).findIndex((a, i)=>a !== bAncestors[i]);
    if (firstNonMatchingAncestor !== -1) {
        // Compare the indices of two children within the common ancestor.
        a = aAncestors[firstNonMatchingAncestor];
        b = bAncestors[firstNonMatchingAncestor];
        return a.index - b.index;
    }
    // If there isn't a non matching ancestor, we might be in a case where one of the nodes is the ancestor of the other.
    if (aAncestors.findIndex((node)=>node === b) >= 0) return 1;
    else if (bAncestors.findIndex((node)=>node === a) >= 0) return -1;
    // 🤷
    return -1;
}
function $c5a24bc478652b5f$var$getAncestors(collection, node) {
    let parents = [];
    while((node === null || node === void 0 ? void 0 : node.parentKey) != null){
        node = collection.getItem(node.parentKey);
        parents.unshift(node);
    }
    return parents;
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 
const $453cc9f0df89c0a5$var$cache = new WeakMap();
function $453cc9f0df89c0a5$export$77d5aafae4e095b2(collection) {
    let count = $453cc9f0df89c0a5$var$cache.get(collection);
    if (count != null) return count;
    count = 0;
    let countItems = (items)=>{
        for (let item of items)if (item.type === 'section') countItems(($c5a24bc478652b5f$export$1005530eda016c13)(item, collection));
        else count++;
    };
    countItems(collection);
    $453cc9f0df89c0a5$var$cache.set(collection, count);
    return count;
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 




function $293f70390ea03370$export$497855f14858aa34(props, state, ref) {
    var _item_props, _item_props1;
    let { key: key } = props;
    let data = ($b1f0cad8af73213b$export$3585ede4d035bf14).get(state);
    var _props_isDisabled;
    let isDisabled = (_props_isDisabled = props.isDisabled) !== null && _props_isDisabled !== void 0 ? _props_isDisabled : state.selectionManager.isDisabled(key);
    var _props_isSelected;
    let isSelected = (_props_isSelected = props.isSelected) !== null && _props_isSelected !== void 0 ? _props_isSelected : state.selectionManager.isSelected(key);
    var _props_shouldSelectOnPressUp;
    let shouldSelectOnPressUp = (_props_shouldSelectOnPressUp = props.shouldSelectOnPressUp) !== null && _props_shouldSelectOnPressUp !== void 0 ? _props_shouldSelectOnPressUp : data === null || data === void 0 ? void 0 : data.shouldSelectOnPressUp;
    var _props_shouldFocusOnHover;
    let shouldFocusOnHover = (_props_shouldFocusOnHover = props.shouldFocusOnHover) !== null && _props_shouldFocusOnHover !== void 0 ? _props_shouldFocusOnHover : data === null || data === void 0 ? void 0 : data.shouldFocusOnHover;
    var _props_shouldUseVirtualFocus;
    let shouldUseVirtualFocus = (_props_shouldUseVirtualFocus = props.shouldUseVirtualFocus) !== null && _props_shouldUseVirtualFocus !== void 0 ? _props_shouldUseVirtualFocus : data === null || data === void 0 ? void 0 : data.shouldUseVirtualFocus;
    var _props_isVirtualized;
    let isVirtualized = (_props_isVirtualized = props.isVirtualized) !== null && _props_isVirtualized !== void 0 ? _props_isVirtualized : data === null || data === void 0 ? void 0 : data.isVirtualized;
    let labelId = ($bdb11010cef70236$export$b4cc09c592e8fdb8)();
    let descriptionId = ($bdb11010cef70236$export$b4cc09c592e8fdb8)();
    let optionProps = {
        role: 'option',
        'aria-disabled': isDisabled || undefined,
        'aria-selected': state.selectionManager.selectionMode !== 'none' ? isSelected : undefined
    };
    // Safari with VoiceOver on macOS misreads options with aria-labelledby or aria-label as simply "text".
    // We should not map slots to the label and description on Safari and instead just have VoiceOver read the textContent.
    // https://bugs.webkit.org/show_bug.cgi?id=209279
    if (!(($c87311424ea30a05$export$9ac100e40613ea10)() && ($c87311424ea30a05$export$78551043582a6a98)())) {
        optionProps['aria-label'] = props['aria-label'];
        optionProps['aria-labelledby'] = labelId;
        optionProps['aria-describedby'] = descriptionId;
    }
    let item = state.collection.getItem(key);
    if (isVirtualized) {
        let index = Number(item === null || item === void 0 ? void 0 : item.index);
        optionProps['aria-posinset'] = Number.isNaN(index) ? undefined : index + 1;
        optionProps['aria-setsize'] = ($453cc9f0df89c0a5$export$77d5aafae4e095b2)(state.collection);
    }
    let onAction = (data === null || data === void 0 ? void 0 : data.onAction) ? ()=>{
        var _data_onAction;
        return data === null || data === void 0 ? void 0 : (_data_onAction = data.onAction) === null || _data_onAction === void 0 ? void 0 : _data_onAction.call(data, key);
    } : undefined;
    let { itemProps: itemProps, isPressed: isPressed, isFocused: isFocused, hasAction: hasAction, allowsSelection: allowsSelection } = ($880e95eb8b93ba9a$export$ecf600387e221c37)({
        selectionManager: state.selectionManager,
        key: key,
        ref: ref,
        shouldSelectOnPressUp: shouldSelectOnPressUp,
        allowsDifferentPressOrigin: shouldSelectOnPressUp && shouldFocusOnHover,
        isVirtualized: isVirtualized,
        shouldUseVirtualFocus: shouldUseVirtualFocus,
        isDisabled: isDisabled,
        onAction: onAction || (item === null || item === void 0 ? void 0 : (_item_props = item.props) === null || _item_props === void 0 ? void 0 : _item_props.onAction) ? ($ff5963eb1fccf552$export$e08e3b67e392101e)(item === null || item === void 0 ? void 0 : (_item_props1 = item.props) === null || _item_props1 === void 0 ? void 0 : _item_props1.onAction, onAction) : undefined,
        linkBehavior: data === null || data === void 0 ? void 0 : data.linkBehavior
    });
    let { hoverProps: hoverProps } = ($6179b936705e76d3$export$ae780daf29e6d456)({
        isDisabled: isDisabled || !shouldFocusOnHover,
        onHoverStart () {
            if (!($507fabe10e71c6fb$export$b9b3dfddab17db27)()) {
                state.selectionManager.setFocused(true);
                state.selectionManager.setFocusedKey(key);
            }
        }
    });
    let domProps = ($65484d02dcb7eb3e$export$457c3d6518dd4c6f)(item === null || item === void 0 ? void 0 : item.props);
    delete domProps.id;
    let linkProps = ($ea8dcbcb9ea1b556$export$7e924b3091a3bd18)(item === null || item === void 0 ? void 0 : item.props);
    return {
        optionProps: {
            ...optionProps,
            ...($3ef42575df84b30b$export$9d1611c77c2fe928)(domProps, itemProps, hoverProps, linkProps),
            id: ($b1f0cad8af73213b$export$9145995848b05025)(state, key)
        },
        labelProps: {
            id: labelId
        },
        descriptionProps: {
            id: descriptionId
        },
        isFocused: isFocused,
        isFocusVisible: isFocused && ($507fabe10e71c6fb$export$b9b3dfddab17db27)(),
        isSelected: isSelected,
        isDisabled: isDisabled,
        isPressed: isPressed,
        allowsSelection: allowsSelection,
        hasAction: hasAction
    };
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 
function $af383d3bef1cfdc9$export$c3f9f39876e4bc7(props) {
    let { heading: heading, 'aria-label': ariaLabel } = props;
    let headingId = ($bdb11010cef70236$export$f680877a34711e37)();
    return {
        itemProps: {
            role: 'presentation'
        },
        headingProps: heading ? {
            // Techincally, listbox cannot contain headings according to ARIA.
            // We hide the heading from assistive technology, using role="presentation",
            // and only use it as a visual label for the nested group.
            id: headingId,
            role: 'presentation'
        } : {},
        groupProps: {
            role: 'group',
            'aria-label': ariaLabel,
            'aria-labelledby': heading ? headingId : undefined
        }
    };
}

var $c0398ad35c3639b7$exports = {};
$c0398ad35c3639b7$exports = {
    "longPressMessage": `\u{627}\u{636}\u{63A}\u{637} \u{645}\u{637}\u{648}\u{644}\u{627}\u{64B} \u{623}\u{648} \u{627}\u{636}\u{63A}\u{637} \u{639}\u{644}\u{649} Alt + \u{627}\u{644}\u{633}\u{647}\u{645} \u{644}\u{623}\u{633}\u{641}\u{644} \u{644}\u{641}\u{62A}\u{62D} \u{627}\u{644}\u{642}\u{627}\u{626}\u{645}\u{629}`
};

var $7af657c4165927c3$exports = {};
$7af657c4165927c3$exports = {
    "longPressMessage": `\u{41D}\u{430}\u{442}\u{438}\u{441}\u{43D}\u{435}\u{442}\u{435} \u{43F}\u{440}\u{43E}\u{434}\u{44A}\u{43B}\u{436}\u{438}\u{442}\u{435}\u{43B}\u{43D}\u{43E} \u{438}\u{43B}\u{438} \u{43D}\u{430}\u{442}\u{438}\u{441}\u{43D}\u{435}\u{442}\u{435} Alt+ \u{441}\u{442}\u{440}\u{435}\u{43B}\u{43A}\u{430} \u{43D}\u{430}\u{434}\u{43E}\u{43B}\u{443}, \u{437}\u{430} \u{434}\u{430} \u{43E}\u{442}\u{432}\u{43E}\u{440}\u{438}\u{442}\u{435} \u{43C}\u{435}\u{43D}\u{44E}\u{442}\u{43E}`
};

var $d95d4da6d531ab81$exports = {};
$d95d4da6d531ab81$exports = {
    "longPressMessage": `Dlouh\xfdm stiskem nebo stisknut\xedm kl\xe1ves Alt + \u{161}ipka dol\u{16F} otev\u{159}ete nab\xeddku`
};

var $24ebda9c775dca17$exports = {};
$24ebda9c775dca17$exports = {
    "longPressMessage": `Langt tryk eller tryk p\xe5 Alt + pil ned for at \xe5bne menuen`
};

var $743e0dfca6cab1e9$exports = {};
$743e0dfca6cab1e9$exports = {
    "longPressMessage": `Dr\xfccken Sie lange oder dr\xfccken Sie Alt + Nach-unten, um das Men\xfc zu \xf6ffnen`
};

var $a2f41026e05f1c84$exports = {};
$a2f41026e05f1c84$exports = {
    "longPressMessage": `\u{3A0}\u{3B9}\u{3AD}\u{3C3}\u{3C4}\u{3B5} \u{3C0}\u{3B1}\u{3C1}\u{3B1}\u{3C4}\u{3B5}\u{3C4}\u{3B1}\u{3BC}\u{3AD}\u{3BD}\u{3B1} \u{3AE} \u{3C0}\u{3B1}\u{3C4}\u{3AE}\u{3C3}\u{3C4}\u{3B5} Alt + \u{3BA}\u{3AC}\u{3C4}\u{3C9} \u{3B2}\u{3AD}\u{3BB}\u{3BF}\u{3C2} \u{3B3}\u{3B9}\u{3B1} \u{3BD}\u{3B1} \u{3B1}\u{3BD}\u{3BF}\u{3AF}\u{3BE}\u{3B5}\u{3C4}\u{3B5} \u{3C4}\u{3BF} \u{3BC}\u{3B5}\u{3BD}\u{3BF}\u{3CD}`
};

var $43b800e97c901737$exports = {};
$43b800e97c901737$exports = {
    "longPressMessage": `Long press or press Alt + ArrowDown to open menu`
};

var $442f5f6ac211e29f$exports = {};
$442f5f6ac211e29f$exports = {
    "longPressMessage": `Mantenga pulsado o pulse Alt + flecha abajo para abrir el men\xfa`
};

var $dff280acfeb2d8ac$exports = {};
$dff280acfeb2d8ac$exports = {
    "longPressMessage": `Men\xfc\xfc avamiseks vajutage pikalt v\xf5i vajutage klahve Alt + allanool`
};

var $51608325613944d7$exports = {};
$51608325613944d7$exports = {
    "longPressMessage": `Avaa valikko painamalla pohjassa tai n\xe4pp\xe4inyhdistelm\xe4ll\xe4 Alt + Alanuoli`
};

var $c4a1b1eabeaa87be$exports = {};
$c4a1b1eabeaa87be$exports = {
    "longPressMessage": `Appuyez de mani\xe8re prolong\xe9e ou appuyez sur Alt\xa0+\xa0Fl\xe8che vers le bas pour ouvrir le menu.`
};

var $8c74815cdee18d1b$exports = {};
$8c74815cdee18d1b$exports = {
    "longPressMessage": `\u{5DC}\u{5D7}\u{5E5} \u{5DC}\u{5D7}\u{5D9}\u{5E6}\u{5D4} \u{5D0}\u{5E8}\u{5D5}\u{5DB}\u{5D4} \u{5D0}\u{5D5} \u{5D4}\u{5E7}\u{5E9} Alt + ArrowDown \u{5DB}\u{5D3}\u{5D9} \u{5DC}\u{5E4}\u{5EA}\u{5D5}\u{5D7} \u{5D0}\u{5EA} \u{5D4}\u{5EA}\u{5E4}\u{5E8}\u{5D9}\u{5D8}`
};

var $fd0e9ef6a7fe0ec9$exports = {};
$fd0e9ef6a7fe0ec9$exports = {
    "longPressMessage": `Dugo pritisnite ili pritisnite Alt + strelicu prema dolje za otvaranje izbornika`
};

var $a89a74a39eba465a$exports = {};
$a89a74a39eba465a$exports = {
    "longPressMessage": `Nyomja meg hosszan, vagy nyomja meg az Alt + lefele ny\xedl gombot a men\xfc megnyit\xe1s\xe1hoz`
};

var $edc7c66594a0ae8a$exports = {};
$edc7c66594a0ae8a$exports = {
    "longPressMessage": `Premere a lungo o premere Alt + Freccia gi\xf9 per aprire il menu`
};

var $f1ab51510712db52$exports = {};
$f1ab51510712db52$exports = {
    "longPressMessage": `\u{9577}\u{62BC}\u{3057}\u{307E}\u{305F}\u{306F} Alt+\u{4E0B}\u{77E2}\u{5370}\u{30AD}\u{30FC}\u{3067}\u{30E1}\u{30CB}\u{30E5}\u{30FC}\u{3092}\u{958B}\u{304F}`
};

var $f9b672d9b82fa3d6$exports = {};
$f9b672d9b82fa3d6$exports = {
    "longPressMessage": `\u{AE38}\u{AC8C} \u{B204}\u{B974}\u{AC70}\u{B098} Alt + \u{C544}\u{B798}\u{CABD} \u{D654}\u{C0B4}\u{D45C}\u{B97C} \u{B20C}\u{B7EC} \u{BA54}\u{B274} \u{C5F4}\u{AE30}`
};

var $a385f3910feda499$exports = {};
$a385f3910feda499$exports = {
    "longPressMessage": `Nor\u{117}dami atidaryti meniu, nuspaud\u{119} palaikykite arba paspauskite \u{201E}Alt + ArrowDown\u{201C}.`
};

var $4f1bde932c441789$exports = {};
$4f1bde932c441789$exports = {
    "longPressMessage": `Lai atv\u{113}rtu izv\u{113}lni, turiet nospiestu vai nospiediet tausti\u{146}u kombin\u{101}ciju Alt + lejupv\u{113}rst\u{101} bulti\u{146}a`
};

var $914a51a8a594d5be$exports = {};
$914a51a8a594d5be$exports = {
    "longPressMessage": `Langt trykk eller trykk Alt + PilNed for \xe5 \xe5pne menyen`
};

var $89aaf803103bb500$exports = {};
$89aaf803103bb500$exports = {
    "longPressMessage": `Druk lang op Alt + pijl-omlaag of druk op Alt om het menu te openen`
};

var $c685891476dbaaca$exports = {};
$c685891476dbaaca$exports = {
    "longPressMessage": `Naci\u{15B}nij i przytrzymaj lub naci\u{15B}nij klawisze Alt + Strza\u{142}ka w d\xf3\u{142}, aby otworzy\u{107} menu`
};

var $885879b9b10c2959$exports = {};
$885879b9b10c2959$exports = {
    "longPressMessage": `Pressione e segure ou pressione Alt + Seta para baixo para abrir o menu`
};

var $6b39616688a51692$exports = {};
$6b39616688a51692$exports = {
    "longPressMessage": `Prima continuamente ou prima Alt + Seta Para Baixo para abrir o menu`
};

var $f26362aed63f47e2$exports = {};
$f26362aed63f47e2$exports = {
    "longPressMessage": `Ap\u{103}sa\u{21B}i lung sau ap\u{103}sa\u{21B}i pe Alt + s\u{103}geat\u{103} \xeen jos pentru a deschide meniul`
};

var $06cbade644558bf0$exports = {};
$06cbade644558bf0$exports = {
    "longPressMessage": `\u{41D}\u{430}\u{436}\u{43C}\u{438}\u{442}\u{435} \u{438} \u{443}\u{434}\u{435}\u{440}\u{436}\u{438}\u{432}\u{430}\u{439}\u{442}\u{435} \u{438}\u{43B}\u{438} \u{43D}\u{430}\u{436}\u{43C}\u{438}\u{442}\u{435} Alt + \u{421}\u{442}\u{440}\u{435}\u{43B}\u{43A}\u{430} \u{432}\u{43D}\u{438}\u{437}, \u{447}\u{442}\u{43E}\u{431}\u{44B} \u{43E}\u{442}\u{43A}\u{440}\u{44B}\u{442}\u{44C} \u{43C}\u{435}\u{43D}\u{44E}`
};

var $0a391ff68f9d59b1$exports = {};
$0a391ff68f9d59b1$exports = {
    "longPressMessage": `Ponuku otvor\xedte dlh\xfdm stla\u{10D}en\xedm alebo stla\u{10D}en\xedm kl\xe1vesu Alt + kl\xe1vesu so \u{161}\xedpkou nadol`
};

var $8193cf0e649c7928$exports = {};
$8193cf0e649c7928$exports = {
    "longPressMessage": `Za odprtje menija pritisnite in dr\u{17E}ite gumb ali pritisnite Alt+pu\u{161}\u{10D}ica navzdol`
};

var $f398debcce5a5c55$exports = {};
$f398debcce5a5c55$exports = {
    "longPressMessage": `Dugo pritisnite ili pritisnite Alt + strelicu prema dole da otvorite meni`
};

var $9e9fef000aa4c013$exports = {};
$9e9fef000aa4c013$exports = {
    "longPressMessage": `H\xe5ll nedtryckt eller tryck p\xe5 Alt + pil ned\xe5t f\xf6r att \xf6ppna menyn`
};

var $c016c8183bbe3d68$exports = {};
$c016c8183bbe3d68$exports = {
    "longPressMessage": `Men\xfcy\xfc a\xe7mak i\xe7in uzun bas\u{131}n veya Alt + A\u{15F}a\u{11F}\u{131} Ok tu\u{15F}una bas\u{131}n`
};

var $ca4f6c8462244e62$exports = {};
$ca4f6c8462244e62$exports = {
    "longPressMessage": `\u{414}\u{43E}\u{432}\u{433}\u{43E} \u{430}\u{431}\u{43E} \u{437}\u{432}\u{438}\u{447}\u{430}\u{439}\u{43D}\u{43E} \u{43D}\u{430}\u{442}\u{438}\u{441}\u{43D}\u{456}\u{442}\u{44C} \u{43A}\u{43E}\u{43C}\u{431}\u{456}\u{43D}\u{430}\u{446}\u{456}\u{44E} \u{43A}\u{43B}\u{430}\u{432}\u{456}\u{448} Alt \u{456} \u{441}\u{442}\u{440}\u{456}\u{43B}\u{43A}\u{430} \u{432}\u{43D}\u{438}\u{437}, \u{449}\u{43E}\u{431} \u{432}\u{456}\u{434}\u{43A}\u{440}\u{438}\u{442}\u{438} \u{43C}\u{435}\u{43D}\u{44E}`
};

var $2d9960c02ccac927$exports = {};
$2d9960c02ccac927$exports = {
    "longPressMessage": `\u{957F}\u{6309}\u{6216}\u{6309} Alt + \u{5411}\u{4E0B}\u{65B9}\u{5411}\u{952E}\u{4EE5}\u{6253}\u{5F00}\u{83DC}\u{5355}`
};

var $f1b682a4c8c5631c$exports = {};
$f1b682a4c8c5631c$exports = {
    "longPressMessage": `\u{9577}\u{6309}\u{6216}\u{6309} Alt+\u{5411}\u{4E0B}\u{9375}\u{4EE5}\u{958B}\u{555F}\u{529F}\u{80FD}\u{8868}`
};

var $2cbb7ca666678a14$exports = {};


































$2cbb7ca666678a14$exports = {
    "ar-AE": $c0398ad35c3639b7$exports,
    "bg-BG": $7af657c4165927c3$exports,
    "cs-CZ": $d95d4da6d531ab81$exports,
    "da-DK": $24ebda9c775dca17$exports,
    "de-DE": $743e0dfca6cab1e9$exports,
    "el-GR": $a2f41026e05f1c84$exports,
    "en-US": $43b800e97c901737$exports,
    "es-ES": $442f5f6ac211e29f$exports,
    "et-EE": $dff280acfeb2d8ac$exports,
    "fi-FI": $51608325613944d7$exports,
    "fr-FR": $c4a1b1eabeaa87be$exports,
    "he-IL": $8c74815cdee18d1b$exports,
    "hr-HR": $fd0e9ef6a7fe0ec9$exports,
    "hu-HU": $a89a74a39eba465a$exports,
    "it-IT": $edc7c66594a0ae8a$exports,
    "ja-JP": $f1ab51510712db52$exports,
    "ko-KR": $f9b672d9b82fa3d6$exports,
    "lt-LT": $a385f3910feda499$exports,
    "lv-LV": $4f1bde932c441789$exports,
    "nb-NO": $914a51a8a594d5be$exports,
    "nl-NL": $89aaf803103bb500$exports,
    "pl-PL": $c685891476dbaaca$exports,
    "pt-BR": $885879b9b10c2959$exports,
    "pt-PT": $6b39616688a51692$exports,
    "ro-RO": $f26362aed63f47e2$exports,
    "ru-RU": $06cbade644558bf0$exports,
    "sk-SK": $0a391ff68f9d59b1$exports,
    "sl-SI": $8193cf0e649c7928$exports,
    "sr-SP": $f398debcce5a5c55$exports,
    "sv-SE": $9e9fef000aa4c013$exports,
    "tr-TR": $c016c8183bbe3d68$exports,
    "uk-UA": $ca4f6c8462244e62$exports,
    "zh-CN": $2d9960c02ccac927$exports,
    "zh-TW": $f1b682a4c8c5631c$exports
};

function $parcel$interopDefault$l(a) {
  return a && a.__esModule ? a.default : a;
}
/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 




function $168583247155ddda$export$dc9c12ed27dd1b49(props, state, ref) {
    let { type: type = 'menu', isDisabled: isDisabled, trigger: trigger = 'press' } = props;
    let menuTriggerId = ($bdb11010cef70236$export$f680877a34711e37)();
    let { triggerProps: triggerProps, overlayProps: overlayProps } = ($628037886ba31236$export$f9d5c8beee7d008d)({
        type: type
    }, state, ref);
    let onKeyDown = (e)=>{
        if (isDisabled) return;
        if (trigger === 'longPress' && !e.altKey) return;
        if (ref && ref.current) switch(e.key){
            case 'Enter':
            case ' ':
                if (trigger === 'longPress') return;
            // fallthrough
            case 'ArrowDown':
                // Stop propagation, unless it would already be handled by useKeyboard.
                if (!('continuePropagation' in e)) e.stopPropagation();
                e.preventDefault();
                state.toggle('first');
                break;
            case 'ArrowUp':
                if (!('continuePropagation' in e)) e.stopPropagation();
                e.preventDefault();
                state.toggle('last');
                break;
            default:
                // Allow other keys.
                if ('continuePropagation' in e) e.continuePropagation();
        }
    };
    let stringFormatter = ($fca6afa0e843324b$export$f12b703ca79dfbb1)((($parcel$interopDefault$l($2cbb7ca666678a14$exports))), '@react-aria/menu');
    let { longPressProps: longPressProps } = ($8a26561d2877236e$export$c24ed0104d07eab9)({
        isDisabled: isDisabled || trigger !== 'longPress',
        accessibilityDescription: stringFormatter.format('longPressMessage'),
        onLongPressStart () {
            state.close();
        },
        onLongPress () {
            state.open('first');
        }
    });
    let pressProps = {
        onPressStart (e) {
            // For consistency with native, open the menu on mouse/key down, but touch up.
            if (e.pointerType !== 'touch' && e.pointerType !== 'keyboard' && !isDisabled) // If opened with a screen reader, auto focus the first item.
            // Otherwise, the menu itself will be focused.
            state.open(e.pointerType === 'virtual' ? 'first' : null);
        },
        onPress (e) {
            if (e.pointerType === 'touch' && !isDisabled) state.toggle();
        }
    };
    // omit onPress from triggerProps since we override it above.
    delete triggerProps.onPress;
    return {
        menuTriggerProps: {
            ...triggerProps,
            ...trigger === 'press' ? pressProps : longPressProps,
            id: menuTriggerId,
            onKeyDown: onKeyDown
        },
        menuProps: {
            ...overlayProps,
            'aria-labelledby': menuTriggerId,
            autoFocus: state.focusStrategy || true,
            onClose: state.close
        }
    };
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 

const $d5336fe17ce95402$export$6f49b4016bfc8d56 = new WeakMap();
function $d5336fe17ce95402$export$38eaa17faae8f579(props, state, ref) {
    let { shouldFocusWrap: shouldFocusWrap = true, onKeyDown: onKeyDown, onKeyUp: onKeyUp, ...otherProps } = props;
    if (!props['aria-label'] && !props['aria-labelledby']) console.warn('An aria-label or aria-labelledby prop is required for accessibility.');
    let domProps = ($65484d02dcb7eb3e$export$457c3d6518dd4c6f)(props, {
        labelable: true
    });
    let { listProps: listProps } = ($982254629710d113$export$b95089534ab7c1fd)({
        ...otherProps,
        ref: ref,
        selectionManager: state.selectionManager,
        collection: state.collection,
        disabledKeys: state.disabledKeys,
        shouldFocusWrap: shouldFocusWrap,
        linkBehavior: 'override'
    });
    $d5336fe17ce95402$export$6f49b4016bfc8d56.set(state, {
        onClose: props.onClose,
        onAction: props.onAction
    });
    return {
        menuProps: ($3ef42575df84b30b$export$9d1611c77c2fe928)(domProps, {
            onKeyDown: onKeyDown,
            onKeyUp: onKeyUp
        }, {
            role: 'menu',
            ...listProps,
            onKeyDown: (e)=>{
                // don't clear the menu selected keys if the user is presses escape since escape closes the menu
                if (e.key !== 'Escape') listProps.onKeyDown(e);
            }
        })
    };
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 




function $a2e5df62f93c7633$export$9d32628fc2aea7da(props, state, ref) {
    let { id: id, key: key, closeOnSelect: closeOnSelect, isVirtualized: isVirtualized, 'aria-haspopup': hasPopup, onPressStart: pressStartProp, onPressUp: pressUpProp, onPress: onPress, onPressChange: onPressChange, onPressEnd: onPressEnd, onHoverStart: hoverStartProp, onHoverChange: onHoverChange, onHoverEnd: onHoverEnd, onKeyDown: onKeyDown, onKeyUp: onKeyUp, onFocus: onFocus, onFocusChange: onFocusChange, onBlur: onBlur } = props;
    let isTrigger = !!hasPopup;
    var _props_isDisabled;
    let isDisabled = (_props_isDisabled = props.isDisabled) !== null && _props_isDisabled !== void 0 ? _props_isDisabled : state.selectionManager.isDisabled(key);
    var _props_isSelected;
    let isSelected = (_props_isSelected = props.isSelected) !== null && _props_isSelected !== void 0 ? _props_isSelected : state.selectionManager.isSelected(key);
    let data = ($d5336fe17ce95402$export$6f49b4016bfc8d56).get(state);
    let item = state.collection.getItem(key);
    let onClose = props.onClose || data.onClose;
    let router = ($ea8dcbcb9ea1b556$export$9a302a45f65d0572)();
    let performAction = (e)=>{
        var _item_props;
        if (isTrigger) return;
        if (item === null || item === void 0 ? void 0 : (_item_props = item.props) === null || _item_props === void 0 ? void 0 : _item_props.onAction) item.props.onAction();
        else if (props.onAction) props.onAction(key);
        if (data.onAction) {
            // Must reassign to variable otherwise `this` binding gets messed up. Something to do with WeakMap.
            let onAction = data.onAction;
            onAction(key);
        }
        if (e.target instanceof HTMLAnchorElement) router.open(e.target, e, item.props.href, item.props.routerOptions);
    };
    let role = 'menuitem';
    if (!isTrigger) {
        if (state.selectionManager.selectionMode === 'single') role = 'menuitemradio';
        else if (state.selectionManager.selectionMode === 'multiple') role = 'menuitemcheckbox';
    }
    let labelId = ($bdb11010cef70236$export$b4cc09c592e8fdb8)();
    let descriptionId = ($bdb11010cef70236$export$b4cc09c592e8fdb8)();
    let keyboardId = ($bdb11010cef70236$export$b4cc09c592e8fdb8)();
    let ariaProps = {
        id: id,
        'aria-disabled': isDisabled || undefined,
        role: role,
        'aria-label': props['aria-label'],
        'aria-labelledby': labelId,
        'aria-describedby': [
            descriptionId,
            keyboardId
        ].filter(Boolean).join(' ') || undefined,
        'aria-controls': props['aria-controls'],
        'aria-haspopup': hasPopup,
        'aria-expanded': props['aria-expanded']
    };
    if (state.selectionManager.selectionMode !== 'none' && !isTrigger) ariaProps['aria-checked'] = isSelected;
    if (isVirtualized) {
        ariaProps['aria-posinset'] = item === null || item === void 0 ? void 0 : item.index;
        ariaProps['aria-setsize'] = ($453cc9f0df89c0a5$export$77d5aafae4e095b2)(state.collection);
    }
    let onPressStart = (e)=>{
        if (e.pointerType === 'keyboard') performAction(e);
        pressStartProp === null || pressStartProp === void 0 ? void 0 : pressStartProp(e);
    };
    let onPressUp = (e)=>{
        if (e.pointerType !== 'keyboard') {
            performAction(e);
            // Pressing a menu item should close by default in single selection mode but not multiple
            // selection mode, except if overridden by the closeOnSelect prop.
            if (!isTrigger && onClose && (closeOnSelect !== null && closeOnSelect !== void 0 ? closeOnSelect : state.selectionManager.selectionMode !== 'multiple' || state.selectionManager.isLink(key))) onClose();
        }
        pressUpProp === null || pressUpProp === void 0 ? void 0 : pressUpProp(e);
    };
    let { itemProps: itemProps, isFocused: isFocused } = ($880e95eb8b93ba9a$export$ecf600387e221c37)({
        selectionManager: state.selectionManager,
        key: key,
        ref: ref,
        shouldSelectOnPressUp: true,
        allowsDifferentPressOrigin: true,
        // Disable all handling of links in useSelectable item
        // because we handle it ourselves. The behavior of menus
        // is slightly different from other collections because
        // actions are performed on key down rather than key up.
        linkBehavior: 'none'
    });
    let { pressProps: pressProps, isPressed: isPressed } = ($f6c31cce2adf654f$export$45712eceda6fad21)({
        onPressStart: onPressStart,
        onPress: onPress,
        onPressUp: onPressUp,
        onPressChange: onPressChange,
        onPressEnd: onPressEnd,
        isDisabled: isDisabled
    });
    let { hoverProps: hoverProps } = ($6179b936705e76d3$export$ae780daf29e6d456)({
        isDisabled: isDisabled,
        onHoverStart (e) {
            if (!($507fabe10e71c6fb$export$b9b3dfddab17db27)()) {
                state.selectionManager.setFocused(true);
                state.selectionManager.setFocusedKey(key);
            }
            hoverStartProp === null || hoverStartProp === void 0 ? void 0 : hoverStartProp(e);
        },
        onHoverChange: onHoverChange,
        onHoverEnd: onHoverEnd
    });
    let { keyboardProps: keyboardProps } = ($46d819fcbaf35654$export$8f71654801c2f7cd)({
        onKeyDown: (e)=>{
            // Ignore repeating events, which may have started on the menu trigger before moving
            // focus to the menu item. We want to wait for a second complete key press sequence.
            if (e.repeat) {
                e.continuePropagation();
                return;
            }
            switch(e.key){
                case ' ':
                    if (!isDisabled && state.selectionManager.selectionMode === 'none' && !isTrigger && closeOnSelect !== false && onClose) onClose();
                    break;
                case 'Enter':
                    // The Enter key should always close on select, except if overridden.
                    if (!isDisabled && closeOnSelect !== false && !isTrigger && onClose) onClose();
                    break;
                default:
                    if (!isTrigger) e.continuePropagation();
                    onKeyDown === null || onKeyDown === void 0 ? void 0 : onKeyDown(e);
                    break;
            }
        },
        onKeyUp: onKeyUp
    });
    let { focusProps: focusProps } = ($a1ea59d68270f0dd$export$f8168d8dd8fd66e6)({
        onBlur: onBlur,
        onFocus: onFocus,
        onFocusChange: onFocusChange
    });
    let domProps = ($65484d02dcb7eb3e$export$457c3d6518dd4c6f)(item.props);
    delete domProps.id;
    let linkProps = ($ea8dcbcb9ea1b556$export$7e924b3091a3bd18)(item.props);
    return {
        menuItemProps: {
            ...ariaProps,
            ...($3ef42575df84b30b$export$9d1611c77c2fe928)(domProps, linkProps, isTrigger ? {
                onFocus: itemProps.onFocus,
                'data-key': itemProps['data-key']
            } : itemProps, pressProps, hoverProps, keyboardProps, focusProps),
            tabIndex: itemProps.tabIndex != null ? -1 : undefined
        },
        labelProps: {
            id: labelId
        },
        descriptionProps: {
            id: descriptionId
        },
        keyboardShortcutProps: {
            id: keyboardId
        },
        isFocused: isFocused,
        isSelected: isSelected,
        isPressed: isPressed,
        isDisabled: isDisabled
    };
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 
function $3e5eb2498db5b506$export$73f7a44322579622(props) {
    let { heading: heading, 'aria-label': ariaLabel } = props;
    let headingId = ($bdb11010cef70236$export$f680877a34711e37)();
    return {
        itemProps: {
            role: 'presentation'
        },
        headingProps: heading ? {
            // Techincally, menus cannot contain headings according to ARIA.
            // We hide the heading from assistive technology, using role="presentation",
            // and only use it as a label for the nested group.
            id: headingId,
            role: 'presentation'
        } : {},
        groupProps: {
            role: 'group',
            'aria-label': ariaLabel,
            'aria-labelledby': heading ? headingId : undefined
        }
    };
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 






function $2d73ec29415bd339$export$712718f7aec83d5(props, ref) {
    let { inputElementType: inputElementType = 'input', isDisabled: isDisabled = false, isRequired: isRequired = false, isReadOnly: isReadOnly = false, type: type = 'text', validationBehavior: validationBehavior = 'aria' } = props;
    let [value, setValue] = ($458b0a5536c1a7cf$export$40bfa8c7b0832715)(props.value, props.defaultValue || '', props.onChange);
    let { focusableProps: focusableProps } = ($e6afbd83fe6ebbd2$export$4c014de7c8940b4c)(props, ref);
    let validationState = ($e5be200c675c3b3a$export$fc1a364ae1f3ff10)({
        ...props,
        value: value
    });
    let { isInvalid: isInvalid, validationErrors: validationErrors, validationDetails: validationDetails } = validationState.displayValidation;
    let { labelProps: labelProps, fieldProps: fieldProps, descriptionProps: descriptionProps, errorMessageProps: errorMessageProps } = ($2baaea4c71418dea$export$294aa081a6c6f55d)({
        ...props,
        isInvalid: isInvalid,
        errorMessage: props.errorMessage || validationErrors
    });
    let domProps = ($65484d02dcb7eb3e$export$457c3d6518dd4c6f)(props, {
        labelable: true
    });
    const inputOnlyProps = {
        type: type,
        pattern: props.pattern
    };
    ($99facab73266f662$export$5add1d006293d136)(ref, value, setValue);
    ($e93e671b31057976$export$b8473d3665f3a75a)(props, validationState, ref);
    (reactExports.useEffect)(()=>{
        // This works around a React/Chrome bug that prevents textarea elements from validating when controlled.
        // We prevent React from updating defaultValue (i.e. children) of textarea when `value` changes,
        // which causes Chrome to skip validation. Only updating `value` is ok in our case since our
        // textareas are always controlled. React is planning on removing this synchronization in a
        // future major version.
        // https://github.com/facebook/react/issues/19474
        // https://github.com/facebook/react/issues/11896
        if (ref.current instanceof ($431fbd86ca7dc216$export$f21a1ffae260145a)(ref.current).HTMLTextAreaElement) {
            let input = ref.current;
            Object.defineProperty(input, 'defaultValue', {
                get: ()=>input.value,
                set: ()=>{},
                configurable: true
            });
        }
    }, [
        ref
    ]);
    return {
        labelProps: labelProps,
        inputProps: ($3ef42575df84b30b$export$9d1611c77c2fe928)(domProps, inputElementType === 'input' ? inputOnlyProps : undefined, {
            disabled: isDisabled,
            readOnly: isReadOnly,
            required: isRequired && validationBehavior === 'native',
            'aria-required': isRequired && validationBehavior === 'aria' || undefined,
            'aria-invalid': isInvalid || undefined,
            'aria-errormessage': props['aria-errormessage'],
            'aria-activedescendant': props['aria-activedescendant'],
            'aria-autocomplete': props['aria-autocomplete'],
            'aria-haspopup': props['aria-haspopup'],
            value: value,
            onChange: (e)=>setValue(e.target.value),
            autoComplete: props.autoComplete,
            autoCapitalize: props.autoCapitalize,
            maxLength: props.maxLength,
            minLength: props.minLength,
            name: props.name,
            placeholder: props.placeholder,
            inputMode: props.inputMode,
            // Clipboard events
            onCopy: props.onCopy,
            onCut: props.onCut,
            onPaste: props.onPaste,
            // Composition events
            onCompositionEnd: props.onCompositionEnd,
            onCompositionStart: props.onCompositionStart,
            onCompositionUpdate: props.onCompositionUpdate,
            // Selection events
            onSelect: props.onSelect,
            // Input events
            onBeforeInput: props.onBeforeInput,
            onInput: props.onInput,
            ...focusableProps,
            ...fieldProps
        }),
        descriptionProps: descriptionProps,
        errorMessageProps: errorMessageProps,
        isInvalid: isInvalid,
        validationErrors: validationErrors,
        validationDetails: validationDetails
    };
}

/*
 * Copyright 2021 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 


function $d841c8010a73d545$var$supportsNativeBeforeInputEvent() {
    return typeof window !== 'undefined' && window.InputEvent && // @ts-ignore
    typeof InputEvent.prototype.getTargetRanges === 'function';
}
function $d841c8010a73d545$export$4f384c9210e583c3(props, state, inputRef) {
    // All browsers implement the 'beforeinput' event natively except Firefox
    // (currently behind a flag as of Firefox 84). React's polyfill does not
    // run in all cases that the native event fires, e.g. when deleting text.
    // Use the native event if available so that we can prevent invalid deletions.
    // We do not attempt to polyfill this in Firefox since it would be very complicated,
    // the benefit of doing so is fairly minor, and it's going to be natively supported soon.
    let onBeforeInputFallback = ($8ae05eaa5c114e9c$export$7f54fc3180508a52)((e)=>{
        let input = inputRef.current;
        // Compute the next value of the input if the event is allowed to proceed.
        // See https://www.w3.org/TR/input-events-2/#interface-InputEvent-Attributes for a full list of input types.
        let nextValue;
        switch(e.inputType){
            case 'historyUndo':
            case 'historyRedo':
                // Explicitly allow undo/redo. e.data is null in this case, but there's no need to validate,
                // because presumably the input would have already been validated previously.
                return;
            case 'insertLineBreak':
                // Explicitly allow "insertLineBreak" event, to allow onSubmit for "enter" key. e.data is null in this case.
                return;
            case 'deleteContent':
            case 'deleteByCut':
            case 'deleteByDrag':
                nextValue = input.value.slice(0, input.selectionStart) + input.value.slice(input.selectionEnd);
                break;
            case 'deleteContentForward':
                // This is potentially incorrect, since the browser may actually delete more than a single UTF-16
                // character. In reality, a full Unicode grapheme cluster consisting of multiple UTF-16 characters
                // or code points may be deleted. However, in our currently supported locales, there are no such cases.
                // If we support additional locales in the future, this may need to change.
                nextValue = input.selectionEnd === input.selectionStart ? input.value.slice(0, input.selectionStart) + input.value.slice(input.selectionEnd + 1) : input.value.slice(0, input.selectionStart) + input.value.slice(input.selectionEnd);
                break;
            case 'deleteContentBackward':
                nextValue = input.selectionEnd === input.selectionStart ? input.value.slice(0, input.selectionStart - 1) + input.value.slice(input.selectionStart) : input.value.slice(0, input.selectionStart) + input.value.slice(input.selectionEnd);
                break;
            case 'deleteSoftLineBackward':
            case 'deleteHardLineBackward':
                nextValue = input.value.slice(input.selectionStart);
                break;
            default:
                if (e.data != null) nextValue = input.value.slice(0, input.selectionStart) + e.data + input.value.slice(input.selectionEnd);
                break;
        }
        // If we did not compute a value, or the new value is invalid, prevent the event
        // so that the browser does not update the input text, move the selection, or add to
        // the undo/redo stack.
        if (nextValue == null || !state.validate(nextValue)) e.preventDefault();
    });
    (reactExports.useEffect)(()=>{
        if (!$d841c8010a73d545$var$supportsNativeBeforeInputEvent()) return;
        let input = inputRef.current;
        input.addEventListener('beforeinput', onBeforeInputFallback, false);
        return ()=>{
            input.removeEventListener('beforeinput', onBeforeInputFallback, false);
        };
    }, [
        inputRef,
        onBeforeInputFallback
    ]);
    let onBeforeInput = !$d841c8010a73d545$var$supportsNativeBeforeInputEvent() ? (e)=>{
        let nextValue = e.target.value.slice(0, e.target.selectionStart) + e.data + e.target.value.slice(e.target.selectionEnd);
        if (!state.validate(nextValue)) e.preventDefault();
    } : null;
    let { labelProps: labelProps, inputProps: textFieldProps, descriptionProps: descriptionProps, errorMessageProps: errorMessageProps, ...validation } = ($2d73ec29415bd339$export$712718f7aec83d5)(props, inputRef);
    let compositionStartState = (reactExports.useRef)(null);
    return {
        inputProps: ($3ef42575df84b30b$export$9d1611c77c2fe928)(textFieldProps, {
            onBeforeInput: onBeforeInput,
            onCompositionStart () {
                // Chrome does not implement Input Events Level 2, which specifies the insertFromComposition
                // and deleteByComposition inputType values for the beforeinput event. These are meant to occur
                // at the end of a composition (e.g. Pinyin IME, Android auto correct, etc.), and crucially, are
                // cancelable. The insertCompositionText and deleteCompositionText input types are not cancelable,
                // nor would we want to cancel them because the input from the user is incomplete at that point.
                // In Safari, insertFromComposition/deleteFromComposition will fire, however, allowing us to cancel
                // the final composition result if it is invalid. As a fallback for Chrome and Firefox, which either
                // don't support Input Events Level 2, or beforeinput at all, we store the state of the input when
                // the compositionstart event fires, and undo the changes in compositionend (below) if it is invalid.
                // Unfortunately, this messes up the undo/redo stack, but until insertFromComposition/deleteByComposition
                // are implemented, there is no other way to prevent composed input.
                // See https://bugs.chromium.org/p/chromium/issues/detail?id=1022204
                let { value: value, selectionStart: selectionStart, selectionEnd: selectionEnd } = inputRef.current;
                compositionStartState.current = {
                    value: value,
                    selectionStart: selectionStart,
                    selectionEnd: selectionEnd
                };
            },
            onCompositionEnd () {
                if (!state.validate(inputRef.current.value)) {
                    // Restore the input value in the DOM immediately so we can synchronously update the selection position.
                    // But also update the value in React state as well so it is correct for future updates.
                    let { value: value, selectionStart: selectionStart, selectionEnd: selectionEnd } = compositionStartState.current;
                    inputRef.current.value = value;
                    inputRef.current.setSelectionRange(selectionStart, selectionEnd);
                    state.setInputValue(value);
                }
            }
        }),
        labelProps: labelProps,
        descriptionProps: descriptionProps,
        errorMessageProps: errorMessageProps,
        ...validation
    };
}

function $parcel$interopDefault$k(a) {
  return a && a.__esModule ? a.default : a;
}
/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 











function $c350ade66beef0af$export$8c18d1b4f7232bbf(props, state) {
    let { buttonRef: buttonRef, popoverRef: popoverRef, inputRef: inputRef, listBoxRef: listBoxRef, keyboardDelegate: keyboardDelegate, layoutDelegate: layoutDelegate, shouldFocusWrap: // completionMode = 'suggest',
    shouldFocusWrap, isReadOnly: isReadOnly, isDisabled: isDisabled } = props;
    let stringFormatter = ($fca6afa0e843324b$export$f12b703ca79dfbb1)((($parcel$interopDefault$k($de5926a92e8ebc5b$exports))), '@react-aria/combobox');
    let { menuTriggerProps: menuTriggerProps, menuProps: menuProps } = ($168583247155ddda$export$dc9c12ed27dd1b49)({
        type: 'listbox',
        isDisabled: isDisabled || isReadOnly
    }, state, buttonRef);
    // Set listbox id so it can be used when calling getItemId later
    ($b1f0cad8af73213b$export$3585ede4d035bf14).set(state, {
        id: menuProps.id
    });
    // By default, a KeyboardDelegate is provided which uses the DOM to query layout information (e.g. for page up/page down).
    // When virtualized, the layout object will be passed in as a prop and override this.
    let { collection: collection } = state;
    let { disabledKeys: disabledKeys } = state.selectionManager;
    let delegate = (reactExports.useMemo)(()=>keyboardDelegate || new ($2a25aae57d74318e$export$a05409b8bb224a5a)({
            collection: collection,
            disabledKeys: disabledKeys,
            ref: listBoxRef,
            layoutDelegate: layoutDelegate
        }), [
        keyboardDelegate,
        layoutDelegate,
        collection,
        disabledKeys,
        listBoxRef
    ]);
    // Use useSelectableCollection to get the keyboard handlers to apply to the textfield
    let { collectionProps: collectionProps } = ($ae20dd8cbca75726$export$d6daf82dcd84e87c)({
        selectionManager: state.selectionManager,
        keyboardDelegate: delegate,
        disallowTypeAhead: true,
        disallowEmptySelection: true,
        shouldFocusWrap: shouldFocusWrap,
        ref: inputRef,
        // Prevent item scroll behavior from being applied here, should be handled in the user's Popover + ListBox component
        isVirtualized: true
    });
    let router = ($ea8dcbcb9ea1b556$export$9a302a45f65d0572)();
    // For textfield specific keydown operations
    let onKeyDown = (e)=>{
        if (e.nativeEvent.isComposing) return;
        switch(e.key){
            case 'Enter':
            case 'Tab':
                // Prevent form submission if menu is open since we may be selecting a option
                if (state.isOpen && e.key === 'Enter') e.preventDefault();
                // If the focused item is a link, trigger opening it. Items that are links are not selectable.
                if (state.isOpen && state.selectionManager.focusedKey != null && state.selectionManager.isLink(state.selectionManager.focusedKey)) {
                    if (e.key === 'Enter') {
                        let item = listBoxRef.current.querySelector(`[data-key="${CSS.escape(state.selectionManager.focusedKey.toString())}"]`);
                        if (item instanceof HTMLAnchorElement) {
                            let collectionItem = state.collection.getItem(state.selectionManager.focusedKey);
                            router.open(item, e, collectionItem.props.href, collectionItem.props.routerOptions);
                        }
                    }
                    state.close();
                } else state.commit();
                break;
            case 'Escape':
                if (state.selectedKey !== null || state.inputValue === '' || props.allowsCustomValue) e.continuePropagation();
                state.revert();
                break;
            case 'ArrowDown':
                state.open('first', 'manual');
                break;
            case 'ArrowUp':
                state.open('last', 'manual');
                break;
            case 'ArrowLeft':
            case 'ArrowRight':
                state.selectionManager.setFocusedKey(null);
                break;
        }
    };
    let onBlur = (e)=>{
        var _popoverRef_current;
        let blurFromButton = (buttonRef === null || buttonRef === void 0 ? void 0 : buttonRef.current) && buttonRef.current === e.relatedTarget;
        let blurIntoPopover = (_popoverRef_current = popoverRef.current) === null || _popoverRef_current === void 0 ? void 0 : _popoverRef_current.contains(e.relatedTarget);
        // Ignore blur if focused moved to the button(if exists) or into the popover.
        if (blurFromButton || blurIntoPopover) return;
        if (props.onBlur) props.onBlur(e);
        state.setFocused(false);
    };
    let onFocus = (e)=>{
        if (state.isFocused) return;
        if (props.onFocus) props.onFocus(e);
        state.setFocused(true);
    };
    let { isInvalid: isInvalid, validationErrors: validationErrors, validationDetails: validationDetails } = state.displayValidation;
    let { labelProps: labelProps, inputProps: inputProps, descriptionProps: descriptionProps, errorMessageProps: errorMessageProps } = ($2d73ec29415bd339$export$712718f7aec83d5)({
        ...props,
        onChange: state.setInputValue,
        onKeyDown: !isReadOnly ? ($ff5963eb1fccf552$export$e08e3b67e392101e)(state.isOpen && collectionProps.onKeyDown, onKeyDown, props.onKeyDown) : props.onKeyDown,
        onBlur: onBlur,
        value: state.inputValue,
        onFocus: onFocus,
        autoComplete: 'off',
        validate: undefined,
        [($e5be200c675c3b3a$export$a763b9476acd3eb)]: state
    }, inputRef);
    // Press handlers for the ComboBox button
    let onPress = (e)=>{
        if (e.pointerType === 'touch') {
            // Focus the input field in case it isn't focused yet
            inputRef.current.focus();
            state.toggle(null, 'manual');
        }
    };
    let onPressStart = (e)=>{
        if (e.pointerType !== 'touch') {
            inputRef.current.focus();
            state.toggle(e.pointerType === 'keyboard' || e.pointerType === 'virtual' ? 'first' : null, 'manual');
        }
    };
    let triggerLabelProps = ($313b98861ee5dd6c$export$d6875122194c7b44)({
        id: menuTriggerProps.id,
        'aria-label': stringFormatter.format('buttonLabel'),
        'aria-labelledby': props['aria-labelledby'] || labelProps.id
    });
    let listBoxProps = ($313b98861ee5dd6c$export$d6875122194c7b44)({
        id: menuProps.id,
        'aria-label': stringFormatter.format('listboxLabel'),
        'aria-labelledby': props['aria-labelledby'] || labelProps.id
    });
    // If a touch happens on direct center of ComboBox input, might be virtual click from iPad so open ComboBox menu
    let lastEventTime = (reactExports.useRef)(0);
    let onTouchEnd = (e)=>{
        if (isDisabled || isReadOnly) return;
        // Sometimes VoiceOver on iOS fires two touchend events in quick succession. Ignore the second one.
        if (e.timeStamp - lastEventTime.current < 500) {
            e.preventDefault();
            inputRef.current.focus();
            return;
        }
        let rect = e.target.getBoundingClientRect();
        let touch = e.changedTouches[0];
        let centerX = Math.ceil(rect.left + .5 * rect.width);
        let centerY = Math.ceil(rect.top + .5 * rect.height);
        if (touch.clientX === centerX && touch.clientY === centerY) {
            e.preventDefault();
            inputRef.current.focus();
            state.toggle(null, 'manual');
            lastEventTime.current = e.timeStamp;
        }
    };
    // VoiceOver has issues with announcing aria-activedescendant properly on change
    // (especially on iOS). We use a live region announcer to announce focus changes
    // manually. In addition, section titles are announced when navigating into a new section.
    let focusedItem = state.selectionManager.focusedKey != null && state.isOpen ? state.collection.getItem(state.selectionManager.focusedKey) : undefined;
    var _focusedItem_parentKey;
    let sectionKey = (_focusedItem_parentKey = focusedItem === null || focusedItem === void 0 ? void 0 : focusedItem.parentKey) !== null && _focusedItem_parentKey !== void 0 ? _focusedItem_parentKey : null;
    var _state_selectionManager_focusedKey;
    let itemKey = (_state_selectionManager_focusedKey = state.selectionManager.focusedKey) !== null && _state_selectionManager_focusedKey !== void 0 ? _state_selectionManager_focusedKey : null;
    let lastSection = (reactExports.useRef)(sectionKey);
    let lastItem = (reactExports.useRef)(itemKey);
    (reactExports.useEffect)(()=>{
        if (($c87311424ea30a05$export$e1865c3bedcd822b)() && focusedItem != null && itemKey !== lastItem.current) {
            let isSelected = state.selectionManager.isSelected(itemKey);
            let section = sectionKey != null ? state.collection.getItem(sectionKey) : null;
            let sectionTitle = (section === null || section === void 0 ? void 0 : section['aria-label']) || (typeof (section === null || section === void 0 ? void 0 : section.rendered) === 'string' ? section.rendered : '') || '';
            let announcement = stringFormatter.format('focusAnnouncement', {
                isGroupChange: section && sectionKey !== lastSection.current,
                groupTitle: sectionTitle,
                groupCount: section ? [
                    ...($c5a24bc478652b5f$export$1005530eda016c13)(section, state.collection)
                ].length : 0,
                optionText: focusedItem['aria-label'] || focusedItem.textValue || '',
                isSelected: isSelected
            });
            ($319e236875307eab$export$a9b970dcc4ae71a9)(announcement);
        }
        lastSection.current = sectionKey;
        lastItem.current = itemKey;
    });
    // Announce the number of available suggestions when it changes
    let optionCount = ($453cc9f0df89c0a5$export$77d5aafae4e095b2)(state.collection);
    let lastSize = (reactExports.useRef)(optionCount);
    let lastOpen = (reactExports.useRef)(state.isOpen);
    (reactExports.useEffect)(()=>{
        // Only announce the number of options available when the menu opens if there is no
        // focused item, otherwise screen readers will typically read e.g. "1 of 6".
        // The exception is VoiceOver since this isn't included in the message above.
        let didOpenWithoutFocusedItem = state.isOpen !== lastOpen.current && (state.selectionManager.focusedKey == null || ($c87311424ea30a05$export$e1865c3bedcd822b)());
        if (state.isOpen && (didOpenWithoutFocusedItem || optionCount !== lastSize.current)) {
            let announcement = stringFormatter.format('countAnnouncement', {
                optionCount: optionCount
            });
            ($319e236875307eab$export$a9b970dcc4ae71a9)(announcement);
        }
        lastSize.current = optionCount;
        lastOpen.current = state.isOpen;
    });
    // Announce when a selection occurs for VoiceOver. Other screen readers typically do this automatically.
    let lastSelectedKey = (reactExports.useRef)(state.selectedKey);
    (reactExports.useEffect)(()=>{
        if (($c87311424ea30a05$export$e1865c3bedcd822b)() && state.isFocused && state.selectedItem && state.selectedKey !== lastSelectedKey.current) {
            let optionText = state.selectedItem['aria-label'] || state.selectedItem.textValue || '';
            let announcement = stringFormatter.format('selectedAnnouncement', {
                optionText: optionText
            });
            ($319e236875307eab$export$a9b970dcc4ae71a9)(announcement);
        }
        lastSelectedKey.current = state.selectedKey;
    });
    (reactExports.useEffect)(()=>{
        if (state.isOpen) return ($5e3802645cc19319$export$1c3ebcada18427bf)([
            inputRef.current,
            popoverRef.current
        ]);
    }, [
        state.isOpen,
        inputRef,
        popoverRef
    ]);
    return {
        labelProps: labelProps,
        buttonProps: {
            ...menuTriggerProps,
            ...triggerLabelProps,
            excludeFromTabOrder: true,
            // @ts-ignore - undocumented
            preventFocusOnPress: true,
            onPress: onPress,
            onPressStart: onPressStart,
            isDisabled: isDisabled || isReadOnly
        },
        inputProps: ($3ef42575df84b30b$export$9d1611c77c2fe928)(inputProps, {
            role: 'combobox',
            'aria-expanded': menuTriggerProps['aria-expanded'],
            'aria-controls': state.isOpen ? menuProps.id : undefined,
            // TODO: readd proper logic for completionMode = complete (aria-autocomplete: both)
            'aria-autocomplete': 'list',
            'aria-activedescendant': focusedItem ? ($b1f0cad8af73213b$export$9145995848b05025)(state, focusedItem.key) : undefined,
            onTouchEnd: onTouchEnd,
            // This disable's iOS's autocorrect suggestions, since the combo box provides its own suggestions.
            autoCorrect: 'off',
            // This disable's the macOS Safari spell check auto corrections.
            spellCheck: 'false'
        }),
        listBoxProps: ($3ef42575df84b30b$export$9d1611c77c2fe928)(menuProps, listBoxProps, {
            autoFocus: state.focusStrategy,
            shouldUseVirtualFocus: true,
            shouldSelectOnPressUp: true,
            shouldFocusOnHover: true,
            linkBehavior: 'selection'
        }),
        descriptionProps: descriptionProps,
        errorMessageProps: errorMessageProps,
        isInvalid: isInvalid,
        validationErrors: validationErrors,
        validationDetails: validationDetails
    };
}

var $f23889fffbde9058$exports = {};
$f23889fffbde9058$exports = {
    "calendar": `\u{627}\u{644}\u{62A}\u{642}\u{648}\u{64A}\u{645}`,
    "day": `\u{64A}\u{648}\u{645}`,
    "dayPeriod": `\u{635}/\u{645}`,
    "endDate": `\u{62A}\u{627}\u{631}\u{64A}\u{62E} \u{627}\u{644}\u{627}\u{646}\u{62A}\u{647}\u{627}\u{621}`,
    "era": `\u{627}\u{644}\u{639}\u{635}\u{631}`,
    "hour": `\u{627}\u{644}\u{633}\u{627}\u{639}\u{627}\u{62A}`,
    "minute": `\u{627}\u{644}\u{62F}\u{642}\u{627}\u{626}\u{642}`,
    "month": `\u{627}\u{644}\u{634}\u{647}\u{631}`,
    "second": `\u{627}\u{644}\u{62B}\u{648}\u{627}\u{646}\u{64A}`,
    "selectedDateDescription": (args)=>`\u{62A}\u{627}\u{631}\u{64A}\u{62E} \u{645}\u{62D}\u{62F}\u{62F}: ${args.date}`,
    "selectedRangeDescription": (args)=>`\u{627}\u{644}\u{645}\u{62F}\u{649} \u{627}\u{644}\u{632}\u{645}\u{646}\u{64A} \u{627}\u{644}\u{645}\u{62D}\u{62F}\u{62F}: ${args.startDate} \u{625}\u{644}\u{649} ${args.endDate}`,
    "selectedTimeDescription": (args)=>`\u{627}\u{644}\u{648}\u{642}\u{62A} \u{627}\u{644}\u{645}\u{62D}\u{62F}\u{62F}: ${args.time}`,
    "startDate": `\u{62A}\u{627}\u{631}\u{64A}\u{62E} \u{627}\u{644}\u{628}\u{62F}\u{621}`,
    "timeZoneName": `\u{627}\u{644}\u{62A}\u{648}\u{642}\u{64A}\u{62A}`,
    "weekday": `\u{627}\u{644}\u{64A}\u{648}\u{645}`,
    "year": `\u{627}\u{644}\u{633}\u{646}\u{629}`
};

var $09d9badaa8903929$exports = {};
$09d9badaa8903929$exports = {
    "calendar": `\u{41A}\u{430}\u{43B}\u{435}\u{43D}\u{434}\u{430}\u{440}`,
    "day": `\u{434}\u{435}\u{43D}`,
    "dayPeriod": `\u{43F}\u{440}.\u{43E}\u{431}./\u{441}\u{43B}.\u{43E}\u{431}.`,
    "endDate": `\u{41A}\u{440}\u{430}\u{439}\u{43D}\u{430} \u{434}\u{430}\u{442}\u{430}`,
    "era": `\u{435}\u{440}\u{430}`,
    "hour": `\u{447}\u{430}\u{441}`,
    "minute": `\u{43C}\u{438}\u{43D}\u{443}\u{442}\u{430}`,
    "month": `\u{43C}\u{435}\u{441}\u{435}\u{446}`,
    "second": `\u{441}\u{435}\u{43A}\u{443}\u{43D}\u{434}\u{430}`,
    "selectedDateDescription": (args)=>`\u{418}\u{437}\u{431}\u{440}\u{430}\u{43D}\u{430} \u{434}\u{430}\u{442}\u{430}: ${args.date}`,
    "selectedRangeDescription": (args)=>`\u{418}\u{437}\u{431}\u{440}\u{430}\u{43D} \u{434}\u{438}\u{430}\u{43F}\u{430}\u{437}\u{43E}\u{43D}: ${args.startDate} \u{434}\u{43E} ${args.endDate}`,
    "selectedTimeDescription": (args)=>`\u{418}\u{437}\u{431}\u{440}\u{430}\u{43D}\u{43E} \u{432}\u{440}\u{435}\u{43C}\u{435}: ${args.time}`,
    "startDate": `\u{41D}\u{430}\u{447}\u{430}\u{43B}\u{43D}\u{430} \u{434}\u{430}\u{442}\u{430}`,
    "timeZoneName": `\u{447}\u{430}\u{441}\u{43E}\u{432}\u{430} \u{437}\u{43E}\u{43D}\u{430}`,
    "weekday": `\u{434}\u{435}\u{43D} \u{43E}\u{442} \u{441}\u{435}\u{434}\u{43C}\u{438}\u{446}\u{430}\u{442}\u{430}`,
    "year": `\u{433}\u{43E}\u{434}\u{438}\u{43D}\u{430}`
};

var $151b77e0fd711730$exports = {};
$151b77e0fd711730$exports = {
    "calendar": `Kalend\xe1\u{159}`,
    "day": `den`,
    "dayPeriod": `\u{10D}\xe1st dne`,
    "endDate": `Kone\u{10D}n\xe9 datum`,
    "era": `letopo\u{10D}et`,
    "hour": `hodina`,
    "minute": `minuta`,
    "month": `m\u{11B}s\xedc`,
    "second": `sekunda`,
    "selectedDateDescription": (args)=>`Vybran\xe9 datum: ${args.date}`,
    "selectedRangeDescription": (args)=>`Vybran\xe9 obdob\xed: ${args.startDate} a\u{17E} ${args.endDate}`,
    "selectedTimeDescription": (args)=>`Vybran\xfd \u{10D}as: ${args.time}`,
    "startDate": `Po\u{10D}\xe1te\u{10D}n\xed datum`,
    "timeZoneName": `\u{10D}asov\xe9 p\xe1smo`,
    "weekday": `den v t\xfddnu`,
    "year": `rok`
};

var $61915aa8630b90a2$exports = {};
$61915aa8630b90a2$exports = {
    "calendar": `Kalender`,
    "day": `dag`,
    "dayPeriod": `AM/PM`,
    "endDate": `Slutdato`,
    "era": `\xe6ra`,
    "hour": `time`,
    "minute": `minut`,
    "month": `m\xe5ned`,
    "second": `sekund`,
    "selectedDateDescription": (args)=>`Valgt dato: ${args.date}`,
    "selectedRangeDescription": (args)=>`Valgt interval: ${args.startDate} til ${args.endDate}`,
    "selectedTimeDescription": (args)=>`Valgt tidspunkt: ${args.time}`,
    "startDate": `Startdato`,
    "timeZoneName": `tidszone`,
    "weekday": `ugedag`,
    "year": `\xe5r`
};

var $35cea00159787840$exports = {};
$35cea00159787840$exports = {
    "calendar": `Kalender`,
    "day": `Tag`,
    "dayPeriod": `Tagesh\xe4lfte`,
    "endDate": `Enddatum`,
    "era": `Epoche`,
    "hour": `Stunde`,
    "minute": `Minute`,
    "month": `Monat`,
    "second": `Sekunde`,
    "selectedDateDescription": (args)=>`Ausgew\xe4hltes Datum: ${args.date}`,
    "selectedRangeDescription": (args)=>`Ausgew\xe4hlter Bereich: ${args.startDate} bis ${args.endDate}`,
    "selectedTimeDescription": (args)=>`Ausgew\xe4hlte Zeit: ${args.time}`,
    "startDate": `Anfangsdatum`,
    "timeZoneName": `Zeitzone`,
    "weekday": `Wochentag`,
    "year": `Jahr`
};

var $518b4e82b9eacafd$exports = {};
$518b4e82b9eacafd$exports = {
    "calendar": `\u{397}\u{3BC}\u{3B5}\u{3C1}\u{3BF}\u{3BB}\u{3CC}\u{3B3}\u{3B9}\u{3BF}`,
    "day": `\u{3B7}\u{3BC}\u{3AD}\u{3C1}\u{3B1}`,
    "dayPeriod": `\u{3C0}.\u{3BC}./\u{3BC}.\u{3BC}.`,
    "endDate": `\u{397}\u{3BC}\u{3B5}\u{3C1}\u{3BF}\u{3BC}\u{3B7}\u{3BD}\u{3AF}\u{3B1} \u{3BB}\u{3AE}\u{3BE}\u{3B7}\u{3C2}`,
    "era": `\u{3C0}\u{3B5}\u{3C1}\u{3AF}\u{3BF}\u{3B4}\u{3BF}\u{3C2}`,
    "hour": `\u{3CE}\u{3C1}\u{3B1}`,
    "minute": `\u{3BB}\u{3B5}\u{3C0}\u{3C4}\u{3CC}`,
    "month": `\u{3BC}\u{3AE}\u{3BD}\u{3B1}\u{3C2}`,
    "second": `\u{3B4}\u{3B5}\u{3C5}\u{3C4}\u{3B5}\u{3C1}\u{3CC}\u{3BB}\u{3B5}\u{3C0}\u{3C4}\u{3BF}`,
    "selectedDateDescription": (args)=>`\u{395}\u{3C0}\u{3B9}\u{3BB}\u{3B5}\u{3B3}\u{3BC}\u{3AD}\u{3BD}\u{3B7} \u{3B7}\u{3BC}\u{3B5}\u{3C1}\u{3BF}\u{3BC}\u{3B7}\u{3BD}\u{3AF}\u{3B1}: ${args.date}`,
    "selectedRangeDescription": (args)=>`\u{395}\u{3C0}\u{3B9}\u{3BB}\u{3B5}\u{3B3}\u{3BC}\u{3AD}\u{3BD}\u{3BF} \u{3B5}\u{3CD}\u{3C1}\u{3BF}\u{3C2}: ${args.startDate} \u{3AD}\u{3C9}\u{3C2} ${args.endDate}`,
    "selectedTimeDescription": (args)=>`\u{395}\u{3C0}\u{3B9}\u{3BB}\u{3B5}\u{3B3}\u{3BC}\u{3AD}\u{3BD}\u{3B7} \u{3CE}\u{3C1}\u{3B1}: ${args.time}`,
    "startDate": `\u{397}\u{3BC}\u{3B5}\u{3C1}\u{3BF}\u{3BC}\u{3B7}\u{3BD}\u{3AF}\u{3B1} \u{3AD}\u{3BD}\u{3B1}\u{3C1}\u{3BE}\u{3B7}\u{3C2}`,
    "timeZoneName": `\u{3B6}\u{3CE}\u{3BD}\u{3B7} \u{3CE}\u{3C1}\u{3B1}\u{3C2}`,
    "weekday": `\u{3BA}\u{3B1}\u{3B8}\u{3B7}\u{3BC}\u{3B5}\u{3C1}\u{3B9}\u{3BD}\u{3AE}`,
    "year": `\u{3AD}\u{3C4}\u{3BF}\u{3C2}`
};

var $1c2b297f7e2cf474$exports = {};
$1c2b297f7e2cf474$exports = {
    "era": `era`,
    "year": `year`,
    "month": `month`,
    "day": `day`,
    "hour": `hour`,
    "minute": `minute`,
    "second": `second`,
    "dayPeriod": `AM/PM`,
    "calendar": `Calendar`,
    "startDate": `Start Date`,
    "endDate": `End Date`,
    "weekday": `day of the week`,
    "timeZoneName": `time zone`,
    "selectedDateDescription": (args)=>`Selected Date: ${args.date}`,
    "selectedRangeDescription": (args)=>`Selected Range: ${args.startDate} to ${args.endDate}`,
    "selectedTimeDescription": (args)=>`Selected Time: ${args.time}`
};

var $07f628a707cf9b18$exports = {};
$07f628a707cf9b18$exports = {
    "calendar": `Calendario`,
    "day": `d\xeda`,
    "dayPeriod": `a.\xa0m./p.\xa0m.`,
    "endDate": `Fecha final`,
    "era": `era`,
    "hour": `hora`,
    "minute": `minuto`,
    "month": `mes`,
    "second": `segundo`,
    "selectedDateDescription": (args)=>`Fecha seleccionada: ${args.date}`,
    "selectedRangeDescription": (args)=>`Rango seleccionado: ${args.startDate} a ${args.endDate}`,
    "selectedTimeDescription": (args)=>`Hora seleccionada: ${args.time}`,
    "startDate": `Fecha de inicio`,
    "timeZoneName": `zona horaria`,
    "weekday": `d\xeda de la semana`,
    "year": `a\xf1o`
};

var $db553ffe17c7f4db$exports = {};
$db553ffe17c7f4db$exports = {
    "calendar": `Kalender`,
    "day": `p\xe4ev`,
    "dayPeriod": `enne/p\xe4rast l\xf5unat`,
    "endDate": `L\xf5ppkuup\xe4ev`,
    "era": `ajastu`,
    "hour": `tund`,
    "minute": `minut`,
    "month": `kuu`,
    "second": `sekund`,
    "selectedDateDescription": (args)=>`Valitud kuup\xe4ev: ${args.date}`,
    "selectedRangeDescription": (args)=>`Valitud vahemik: ${args.startDate} kuni ${args.endDate}`,
    "selectedTimeDescription": (args)=>`Valitud aeg: ${args.time}`,
    "startDate": `Alguskuup\xe4ev`,
    "timeZoneName": `ajav\xf6\xf6nd`,
    "weekday": `n\xe4dalap\xe4ev`,
    "year": `aasta`
};

var $4afcfe00cd703f83$exports = {};
$4afcfe00cd703f83$exports = {
    "calendar": `Kalenteri`,
    "day": `p\xe4iv\xe4`,
    "dayPeriod": `vuorokaudenaika`,
    "endDate": `P\xe4\xe4ttymisp\xe4iv\xe4`,
    "era": `aikakausi`,
    "hour": `tunti`,
    "minute": `minuutti`,
    "month": `kuukausi`,
    "second": `sekunti`,
    "selectedDateDescription": (args)=>`Valittu p\xe4iv\xe4m\xe4\xe4r\xe4: ${args.date}`,
    "selectedRangeDescription": (args)=>`Valittu aikav\xe4li: ${args.startDate} \u{2013} ${args.endDate}`,
    "selectedTimeDescription": (args)=>`Valittu aika: ${args.time}`,
    "startDate": `Alkamisp\xe4iv\xe4`,
    "timeZoneName": `aikavy\xf6hyke`,
    "weekday": `viikonp\xe4iv\xe4`,
    "year": `vuosi`
};

var $1d2645d18d4c5be0$exports = {};
$1d2645d18d4c5be0$exports = {
    "calendar": `Calendrier`,
    "day": `jour`,
    "dayPeriod": `cadran`,
    "endDate": `Date de fin`,
    "era": `\xe8re`,
    "hour": `heure`,
    "minute": `minute`,
    "month": `mois`,
    "second": `seconde`,
    "selectedDateDescription": (args)=>`Date s\xe9lectionn\xe9e\xa0: ${args.date}`,
    "selectedRangeDescription": (args)=>`Plage s\xe9lectionn\xe9e\xa0: ${args.startDate} au ${args.endDate}`,
    "selectedTimeDescription": (args)=>`Heure choisie\xa0: ${args.time}`,
    "startDate": `Date de d\xe9but`,
    "timeZoneName": `fuseau horaire`,
    "weekday": `jour de la semaine`,
    "year": `ann\xe9e`
};

var $64cb6a9be1f6fa48$exports = {};
$64cb6a9be1f6fa48$exports = {
    "calendar": `\u{5DC}\u{5D5}\u{5D7} \u{5E9}\u{5E0}\u{5D4}`,
    "day": `\u{5D9}\u{5D5}\u{5DD}`,
    "dayPeriod": `\u{5DC}\u{5E4}\u{5E0}\u{5D4}\u{5F4}\u{5E6}/\u{5D0}\u{5D7}\u{5D4}\u{5F4}\u{5E6}`,
    "endDate": `\u{5EA}\u{5D0}\u{5E8}\u{5D9}\u{5DA} \u{5E1}\u{5D9}\u{5D5}\u{5DD}`,
    "era": `\u{5EA}\u{5E7}\u{5D5}\u{5E4}\u{5D4}`,
    "hour": `\u{5E9}\u{5E2}\u{5D4}`,
    "minute": `\u{5D3}\u{5E7}\u{5D4}`,
    "month": `\u{5D7}\u{5D5}\u{5D3}\u{5E9}`,
    "second": `\u{5E9}\u{5E0}\u{5D9}\u{5D9}\u{5D4}`,
    "selectedDateDescription": (args)=>`\u{5EA}\u{5D0}\u{5E8}\u{5D9}\u{5DA} \u{5E0}\u{5D1}\u{5D7}\u{5E8}: ${args.date}`,
    "selectedRangeDescription": (args)=>`\u{5D8}\u{5D5}\u{5D5}\u{5D7} \u{5E0}\u{5D1}\u{5D7}\u{5E8}: ${args.startDate} \u{5E2}\u{5D3} ${args.endDate}`,
    "selectedTimeDescription": (args)=>`\u{5D6}\u{5DE}\u{5DF} \u{5E0}\u{5D1}\u{5D7}\u{5E8}: ${args.time}`,
    "startDate": `\u{5EA}\u{5D0}\u{5E8}\u{5D9}\u{5DA} \u{5D4}\u{5EA}\u{5D7}\u{5DC}\u{5D4}`,
    "timeZoneName": `\u{5D0}\u{5D6}\u{5D5}\u{5E8} \u{5D6}\u{5DE}\u{5DF}`,
    "weekday": `\u{5D9}\u{5D5}\u{5DD} \u{5D1}\u{5E9}\u{5D1}\u{5D5}\u{5E2}`,
    "year": `\u{5E9}\u{5E0}\u{5D4}`
};

var $2a1ef2e8050be27a$exports = {};
$2a1ef2e8050be27a$exports = {
    "calendar": `Kalendar`,
    "day": `dan`,
    "dayPeriod": `AM/PM`,
    "endDate": `Datum zavr\u{161}etka`,
    "era": `era`,
    "hour": `sat`,
    "minute": `minuta`,
    "month": `mjesec`,
    "second": `sekunda`,
    "selectedDateDescription": (args)=>`Odabrani datum: ${args.date}`,
    "selectedRangeDescription": (args)=>`Odabrani raspon: ${args.startDate} do ${args.endDate}`,
    "selectedTimeDescription": (args)=>`Odabrano vrijeme: ${args.time}`,
    "startDate": `Datum po\u{10D}etka`,
    "timeZoneName": `vremenska zona`,
    "weekday": `dan u tjednu`,
    "year": `godina`
};

var $ad429dca102acd0e$exports = {};
$ad429dca102acd0e$exports = {
    "calendar": `Napt\xe1r`,
    "day": `nap`,
    "dayPeriod": `napszak`,
    "endDate": `Befejez\u{151} d\xe1tum`,
    "era": `\xe9ra`,
    "hour": `\xf3ra`,
    "minute": `perc`,
    "month": `h\xf3nap`,
    "second": `m\xe1sodperc`,
    "selectedDateDescription": (args)=>`Kijel\xf6lt d\xe1tum: ${args.date}`,
    "selectedRangeDescription": (args)=>`Kijel\xf6lt tartom\xe1ny: ${args.startDate}\u{2013}${args.endDate}`,
    "selectedTimeDescription": (args)=>`Kijel\xf6lt id\u{151}: ${args.time}`,
    "startDate": `Kezd\u{151} d\xe1tum`,
    "timeZoneName": `id\u{151}z\xf3na`,
    "weekday": `h\xe9t napja`,
    "year": `\xe9v`
};

var $6e68cb5d1cb97bd2$exports = {};
$6e68cb5d1cb97bd2$exports = {
    "calendar": `Calendario`,
    "day": `giorno`,
    "dayPeriod": `AM/PM`,
    "endDate": `Data finale`,
    "era": `era`,
    "hour": `ora`,
    "minute": `minuto`,
    "month": `mese`,
    "second": `secondo`,
    "selectedDateDescription": (args)=>`Data selezionata: ${args.date}`,
    "selectedRangeDescription": (args)=>`Intervallo selezionato: da ${args.startDate} a ${args.endDate}`,
    "selectedTimeDescription": (args)=>`Ora selezionata: ${args.time}`,
    "startDate": `Data iniziale`,
    "timeZoneName": `fuso orario`,
    "weekday": `giorno della settimana`,
    "year": `anno`
};

var $a82ee9af063ee069$exports = {};
$a82ee9af063ee069$exports = {
    "calendar": `\u{30AB}\u{30EC}\u{30F3}\u{30C0}\u{30FC}`,
    "day": `\u{65E5}`,
    "dayPeriod": `\u{5348}\u{524D}/\u{5348}\u{5F8C}`,
    "endDate": `\u{7D42}\u{4E86}\u{65E5}`,
    "era": `\u{6642}\u{4EE3}`,
    "hour": `\u{6642}`,
    "minute": `\u{5206}`,
    "month": `\u{6708}`,
    "second": `\u{79D2}`,
    "selectedDateDescription": (args)=>`\u{9078}\u{629E}\u{3057}\u{305F}\u{65E5}\u{4ED8} : ${args.date}`,
    "selectedRangeDescription": (args)=>`\u{9078}\u{629E}\u{7BC4}\u{56F2} : ${args.startDate} \u{304B}\u{3089} ${args.endDate}`,
    "selectedTimeDescription": (args)=>`\u{9078}\u{629E}\u{3057}\u{305F}\u{6642}\u{9593} : ${args.time}`,
    "startDate": `\u{958B}\u{59CB}\u{65E5}`,
    "timeZoneName": `\u{30BF}\u{30A4}\u{30E0}\u{30BE}\u{30FC}\u{30F3}`,
    "weekday": `\u{66DC}\u{65E5}`,
    "year": `\u{5E74}`
};

var $67e9091dbf37d4eb$exports = {};
$67e9091dbf37d4eb$exports = {
    "calendar": `\u{B2EC}\u{B825}`,
    "day": `\u{C77C}`,
    "dayPeriod": `\u{C624}\u{C804}/\u{C624}\u{D6C4}`,
    "endDate": `\u{C885}\u{B8CC}\u{C77C}`,
    "era": `\u{C5F0}\u{D638}`,
    "hour": `\u{C2DC}`,
    "minute": `\u{BD84}`,
    "month": `\u{C6D4}`,
    "second": `\u{CD08}`,
    "selectedDateDescription": (args)=>`\u{C120}\u{D0DD} \u{C77C}\u{C790}: ${args.date}`,
    "selectedRangeDescription": (args)=>`\u{C120}\u{D0DD} \u{BC94}\u{C704}: ${args.startDate} ~ ${args.endDate}`,
    "selectedTimeDescription": (args)=>`\u{C120}\u{D0DD} \u{C2DC}\u{AC04}: ${args.time}`,
    "startDate": `\u{C2DC}\u{C791}\u{C77C}`,
    "timeZoneName": `\u{C2DC}\u{AC04}\u{B300}`,
    "weekday": `\u{C694}\u{C77C}`,
    "year": `\u{B144}`
};

var $75834f9729f653d1$exports = {};
$75834f9729f653d1$exports = {
    "calendar": `Kalendorius`,
    "day": `diena`,
    "dayPeriod": `iki piet\u{173} / po piet\u{173}`,
    "endDate": `Pabaigos data`,
    "era": `era`,
    "hour": `valanda`,
    "minute": `minut\u{117}`,
    "month": `m\u{117}nuo`,
    "second": `sekund\u{117}`,
    "selectedDateDescription": (args)=>`Pasirinkta data: ${args.date}`,
    "selectedRangeDescription": (args)=>`Pasirinktas intervalas: nuo ${args.startDate} iki ${args.endDate}`,
    "selectedTimeDescription": (args)=>`Pasirinktas laikas: ${args.time}`,
    "startDate": `Prad\u{17E}ios data`,
    "timeZoneName": `laiko juosta`,
    "weekday": `savait\u{117}s diena`,
    "year": `metai`
};

var $a2df2c2520b4a7f0$exports = {};
$a2df2c2520b4a7f0$exports = {
    "calendar": `Kalend\u{101}rs`,
    "day": `diena`,
    "dayPeriod": `priek\u{161}pusdien\u{101}/p\u{113}cpusdien\u{101}`,
    "endDate": `Beigu datums`,
    "era": `\u{113}ra`,
    "hour": `stundas`,
    "minute": `min\u{16B}tes`,
    "month": `m\u{113}nesis`,
    "second": `sekundes`,
    "selectedDateDescription": (args)=>`Atlas\u{12B}tais datums: ${args.date}`,
    "selectedRangeDescription": (args)=>`Atlas\u{12B}tais diapazons: no ${args.startDate} l\u{12B}dz ${args.endDate}`,
    "selectedTimeDescription": (args)=>`Atlas\u{12B}tais laiks: ${args.time}`,
    "startDate": `S\u{101}kuma datums`,
    "timeZoneName": `laika josla`,
    "weekday": `ned\u{113}\u{13C}as diena`,
    "year": `gads`
};

var $aedcd71db4933ed5$exports = {};
$aedcd71db4933ed5$exports = {
    "calendar": `Kalender`,
    "day": `dag`,
    "dayPeriod": `a.m./p.m.`,
    "endDate": `Sluttdato`,
    "era": `tidsalder`,
    "hour": `time`,
    "minute": `minutt`,
    "month": `m\xe5ned`,
    "second": `sekund`,
    "selectedDateDescription": (args)=>`Valgt dato: ${args.date}`,
    "selectedRangeDescription": (args)=>`Valgt omr\xe5de: ${args.startDate} til ${args.endDate}`,
    "selectedTimeDescription": (args)=>`Valgt tid: ${args.time}`,
    "startDate": `Startdato`,
    "timeZoneName": `tidssone`,
    "weekday": `ukedag`,
    "year": `\xe5r`
};

var $3b2df9e54353046c$exports = {};
$3b2df9e54353046c$exports = {
    "calendar": `Kalender`,
    "day": `dag`,
    "dayPeriod": `a.m./p.m.`,
    "endDate": `Einddatum`,
    "era": `tijdperk`,
    "hour": `uur`,
    "minute": `minuut`,
    "month": `maand`,
    "second": `seconde`,
    "selectedDateDescription": (args)=>`Geselecteerde datum: ${args.date}`,
    "selectedRangeDescription": (args)=>`Geselecteerd bereik: ${args.startDate} tot ${args.endDate}`,
    "selectedTimeDescription": (args)=>`Geselecteerde tijd: ${args.time}`,
    "startDate": `Startdatum`,
    "timeZoneName": `tijdzone`,
    "weekday": `dag van de week`,
    "year": `jaar`
};

var $c03fe977fcfafe93$exports = {};
$c03fe977fcfafe93$exports = {
    "calendar": `Kalendarz`,
    "day": `dzie\u{144}`,
    "dayPeriod": `rano / po po\u{142}udniu / wieczorem`,
    "endDate": `Data ko\u{144}cowa`,
    "era": `era`,
    "hour": `godzina`,
    "minute": `minuta`,
    "month": `miesi\u{105}c`,
    "second": `sekunda`,
    "selectedDateDescription": (args)=>`Wybrana data: ${args.date}`,
    "selectedRangeDescription": (args)=>`Wybrany zakres: ${args.startDate} do ${args.endDate}`,
    "selectedTimeDescription": (args)=>`Wybrany czas: ${args.time}`,
    "startDate": `Data pocz\u{105}tkowa`,
    "timeZoneName": `strefa czasowa`,
    "weekday": `dzie\u{144} tygodnia`,
    "year": `rok`
};

var $569f006fc292345f$exports = {};
$569f006fc292345f$exports = {
    "calendar": `Calend\xe1rio`,
    "day": `dia`,
    "dayPeriod": `AM/PM`,
    "endDate": `Data final`,
    "era": `era`,
    "hour": `hora`,
    "minute": `minuto`,
    "month": `m\xeas`,
    "second": `segundo`,
    "selectedDateDescription": (args)=>`Data selecionada: ${args.date}`,
    "selectedRangeDescription": (args)=>`Intervalo selecionado: ${args.startDate} a ${args.endDate}`,
    "selectedTimeDescription": (args)=>`Hora selecionada: ${args.time}`,
    "startDate": `Data inicial`,
    "timeZoneName": `fuso hor\xe1rio`,
    "weekday": `dia da semana`,
    "year": `ano`
};

var $7c2494e14452f2dd$exports = {};
$7c2494e14452f2dd$exports = {
    "calendar": `Calend\xe1rio`,
    "day": `dia`,
    "dayPeriod": `am/pm`,
    "endDate": `Data de T\xe9rmino`,
    "era": `era`,
    "hour": `hora`,
    "minute": `minuto`,
    "month": `m\xeas`,
    "second": `segundo`,
    "selectedDateDescription": (args)=>`Data selecionada: ${args.date}`,
    "selectedRangeDescription": (args)=>`Intervalo selecionado: ${args.startDate} a ${args.endDate}`,
    "selectedTimeDescription": (args)=>`Hora selecionada: ${args.time}`,
    "startDate": `Data de In\xedcio`,
    "timeZoneName": `fuso hor\xe1rio`,
    "weekday": `dia da semana`,
    "year": `ano`
};

var $eb82ef981b5592bf$exports = {};
$eb82ef981b5592bf$exports = {
    "calendar": `Calendar`,
    "day": `zi`,
    "dayPeriod": `a.m/p.m.`,
    "endDate": `Dat\u{103} final`,
    "era": `er\u{103}`,
    "hour": `or\u{103}`,
    "minute": `minut`,
    "month": `lun\u{103}`,
    "second": `secund\u{103}`,
    "selectedDateDescription": (args)=>`Dat\u{103} selectat\u{103}: ${args.date}`,
    "selectedRangeDescription": (args)=>`Interval selectat: de la ${args.startDate} p\xe2n\u{103} la ${args.endDate}`,
    "selectedTimeDescription": (args)=>`Ora selectat\u{103}: ${args.time}`,
    "startDate": `Dat\u{103} \xeenceput`,
    "timeZoneName": `fus orar`,
    "weekday": `ziua din s\u{103}pt\u{103}m\xe2n\u{103}`,
    "year": `an`
};

var $6efa0e119f396950$exports = {};
$6efa0e119f396950$exports = {
    "calendar": `\u{41A}\u{430}\u{43B}\u{435}\u{43D}\u{434}\u{430}\u{440}\u{44C}`,
    "day": `\u{434}\u{435}\u{43D}\u{44C}`,
    "dayPeriod": `AM/PM`,
    "endDate": `\u{414}\u{430}\u{442}\u{430} \u{43E}\u{43A}\u{43E}\u{43D}\u{447}\u{430}\u{43D}\u{438}\u{44F}`,
    "era": `\u{44D}\u{440}\u{430}`,
    "hour": `\u{447}\u{430}\u{441}`,
    "minute": `\u{43C}\u{438}\u{43D}\u{443}\u{442}\u{430}`,
    "month": `\u{43C}\u{435}\u{441}\u{44F}\u{446}`,
    "second": `\u{441}\u{435}\u{43A}\u{443}\u{43D}\u{434}\u{430}`,
    "selectedDateDescription": (args)=>`\u{412}\u{44B}\u{431}\u{440}\u{430}\u{43D}\u{43D}\u{430}\u{44F} \u{434}\u{430}\u{442}\u{430}: ${args.date}`,
    "selectedRangeDescription": (args)=>`\u{412}\u{44B}\u{431}\u{440}\u{430}\u{43D}\u{43D}\u{44B}\u{439} \u{434}\u{438}\u{430}\u{43F}\u{430}\u{437}\u{43E}\u{43D}: \u{441} ${args.startDate} \u{43F}\u{43E} ${args.endDate}`,
    "selectedTimeDescription": (args)=>`\u{412}\u{44B}\u{431}\u{440}\u{430}\u{43D}\u{43D}\u{43E}\u{435} \u{432}\u{440}\u{435}\u{43C}\u{44F}: ${args.time}`,
    "startDate": `\u{414}\u{430}\u{442}\u{430} \u{43D}\u{430}\u{447}\u{430}\u{43B}\u{430}`,
    "timeZoneName": `\u{447}\u{430}\u{441}\u{43E}\u{432}\u{43E}\u{439} \u{43F}\u{43E}\u{44F}\u{441}`,
    "weekday": `\u{434}\u{435}\u{43D}\u{44C} \u{43D}\u{435}\u{434}\u{435}\u{43B}\u{438}`,
    "year": `\u{433}\u{43E}\u{434}`
};

var $7f5e57085d7f5049$exports = {};
$7f5e57085d7f5049$exports = {
    "calendar": `Kalend\xe1r`,
    "day": `de\u{148}`,
    "dayPeriod": `AM/PM`,
    "endDate": `D\xe1tum ukon\u{10D}enia`,
    "era": `letopo\u{10D}et`,
    "hour": `hodina`,
    "minute": `min\xfata`,
    "month": `mesiac`,
    "second": `sekunda`,
    "selectedDateDescription": (args)=>`Vybrat\xfd d\xe1tum: ${args.date}`,
    "selectedRangeDescription": (args)=>`Vybrat\xfd rozsah: od ${args.startDate} do ${args.endDate}`,
    "selectedTimeDescription": (args)=>`Vybrat\xfd \u{10D}as: ${args.time}`,
    "startDate": `D\xe1tum za\u{10D}atia`,
    "timeZoneName": `\u{10D}asov\xe9 p\xe1smo`,
    "weekday": `de\u{148} t\xfd\u{17E}d\u{148}a`,
    "year": `rok`
};

var $578ee7c11dcdde7a$exports = {};
$578ee7c11dcdde7a$exports = {
    "calendar": `Koledar`,
    "day": `dan`,
    "dayPeriod": `dop/pop`,
    "endDate": `Datum konca`,
    "era": `doba`,
    "hour": `ura`,
    "minute": `minuta`,
    "month": `mesec`,
    "second": `sekunda`,
    "selectedDateDescription": (args)=>`Izbrani datum: ${args.date}`,
    "selectedRangeDescription": (args)=>`Izbrano obmo\u{10D}je: ${args.startDate} do ${args.endDate}`,
    "selectedTimeDescription": (args)=>`Izbrani \u{10D}as: ${args.time}`,
    "startDate": `Datum za\u{10D}etka`,
    "timeZoneName": `\u{10D}asovni pas`,
    "weekday": `dan v tednu`,
    "year": `leto`
};

var $bbc3fd6cd0bc9d50$exports = {};
$bbc3fd6cd0bc9d50$exports = {
    "calendar": `Kalendar`,
    "day": `\u{434}\u{430}\u{43D}`,
    "dayPeriod": `\u{43F}\u{440}\u{435} \u{43F}\u{43E}\u{434}\u{43D}\u{435}/\u{43F}\u{43E} \u{43F}\u{43E}\u{434}\u{43D}\u{435}`,
    "endDate": `Datum zavr\u{161}etka`,
    "era": `\u{435}\u{440}\u{430}`,
    "hour": `\u{441}\u{430}\u{442}`,
    "minute": `\u{43C}\u{438}\u{43D}\u{443}\u{442}`,
    "month": `\u{43C}\u{435}\u{441}\u{435}\u{446}`,
    "second": `\u{441}\u{435}\u{43A}\u{443}\u{43D}\u{434}`,
    "selectedDateDescription": (args)=>`Izabrani datum: ${args.date}`,
    "selectedRangeDescription": (args)=>`Izabrani opseg: od ${args.startDate} do ${args.endDate}`,
    "selectedTimeDescription": (args)=>`Izabrano vreme: ${args.time}`,
    "startDate": `Datum po\u{10D}etka`,
    "timeZoneName": `\u{432}\u{440}\u{435}\u{43C}\u{435}\u{43D}\u{441}\u{43A}\u{430} \u{437}\u{43E}\u{43D}\u{430}`,
    "weekday": `\u{434}\u{430}\u{43D} \u{443} \u{43D}\u{435}\u{434}\u{435}\u{459}\u{438}`,
    "year": `\u{433}\u{43E}\u{434}\u{438}\u{43D}\u{430}`
};

var $0b04512118591d2a$exports = {};
$0b04512118591d2a$exports = {
    "calendar": `Kalender`,
    "day": `dag`,
    "dayPeriod": `fm/em`,
    "endDate": `Slutdatum`,
    "era": `era`,
    "hour": `timme`,
    "minute": `minut`,
    "month": `m\xe5nad`,
    "second": `sekund`,
    "selectedDateDescription": (args)=>`Valt datum: ${args.date}`,
    "selectedRangeDescription": (args)=>`Valt intervall: ${args.startDate} till ${args.endDate}`,
    "selectedTimeDescription": (args)=>`Vald tid: ${args.time}`,
    "startDate": `Startdatum`,
    "timeZoneName": `tidszon`,
    "weekday": `veckodag`,
    "year": `\xe5r`
};

var $3a49d121fe4c9e1d$exports = {};
$3a49d121fe4c9e1d$exports = {
    "calendar": `Takvim`,
    "day": `g\xfcn`,
    "dayPeriod": `\xd6\xd6/\xd6S`,
    "endDate": `Biti\u{15F} Tarihi`,
    "era": `\xe7a\u{11F}`,
    "hour": `saat`,
    "minute": `dakika`,
    "month": `ay`,
    "second": `saniye`,
    "selectedDateDescription": (args)=>`Se\xe7ilen Tarih: ${args.date}`,
    "selectedRangeDescription": (args)=>`Se\xe7ilen Aral\u{131}k: ${args.startDate} - ${args.endDate}`,
    "selectedTimeDescription": (args)=>`Se\xe7ilen Zaman: ${args.time}`,
    "startDate": `Ba\u{15F}lang\u{131}\xe7 Tarihi`,
    "timeZoneName": `saat dilimi`,
    "weekday": `haftan\u{131}n g\xfcn\xfc`,
    "year": `y\u{131}l`
};

var $5ba21dbb8914919d$exports = {};
$5ba21dbb8914919d$exports = {
    "calendar": `\u{41A}\u{430}\u{43B}\u{435}\u{43D}\u{434}\u{430}\u{440}`,
    "day": `\u{434}\u{435}\u{43D}\u{44C}`,
    "dayPeriod": `\u{434}\u{43F}/\u{43F}\u{43F}`,
    "endDate": `\u{414}\u{430}\u{442}\u{430} \u{437}\u{430}\u{432}\u{435}\u{440}\u{448}\u{435}\u{43D}\u{43D}\u{44F}`,
    "era": `\u{435}\u{440}\u{430}`,
    "hour": `\u{433}\u{43E}\u{434}\u{438}\u{43D}\u{430}`,
    "minute": `\u{445}\u{432}\u{438}\u{43B}\u{438}\u{43D}\u{430}`,
    "month": `\u{43C}\u{456}\u{441}\u{44F}\u{446}\u{44C}`,
    "second": `\u{441}\u{435}\u{43A}\u{443}\u{43D}\u{434}\u{430}`,
    "selectedDateDescription": (args)=>`\u{412}\u{438}\u{431}\u{440}\u{430}\u{43D}\u{430} \u{434}\u{430}\u{442}\u{430}: ${args.date}`,
    "selectedRangeDescription": (args)=>`\u{412}\u{438}\u{431}\u{440}\u{430}\u{43D}\u{438}\u{439} \u{434}\u{456}\u{430}\u{43F}\u{430}\u{437}\u{43E}\u{43D}: ${args.startDate} \u{2014} ${args.endDate}`,
    "selectedTimeDescription": (args)=>`\u{412}\u{438}\u{431}\u{440}\u{430}\u{43D}\u{438}\u{439} \u{447}\u{430}\u{441}: ${args.time}`,
    "startDate": `\u{414}\u{430}\u{442}\u{430} \u{43F}\u{43E}\u{447}\u{430}\u{442}\u{43A}\u{443}`,
    "timeZoneName": `\u{447}\u{430}\u{441}\u{43E}\u{432}\u{438}\u{439} \u{43F}\u{43E}\u{44F}\u{441}`,
    "weekday": `\u{434}\u{435}\u{43D}\u{44C} \u{442}\u{438}\u{436}\u{43D}\u{44F}`,
    "year": `\u{440}\u{456}\u{43A}`
};

var $51078838e1b16cd7$exports = {};
$51078838e1b16cd7$exports = {
    "calendar": `\u{65E5}\u{5386}`,
    "day": `\u{65E5}`,
    "dayPeriod": `\u{4E0A}\u{5348}/\u{4E0B}\u{5348}`,
    "endDate": `\u{7ED3}\u{675F}\u{65E5}\u{671F}`,
    "era": `\u{7EAA}\u{5143}`,
    "hour": `\u{5C0F}\u{65F6}`,
    "minute": `\u{5206}\u{949F}`,
    "month": `\u{6708}`,
    "second": `\u{79D2}`,
    "selectedDateDescription": (args)=>`\u{9009}\u{5B9A}\u{7684}\u{65E5}\u{671F}\u{FF1A}${args.date}`,
    "selectedRangeDescription": (args)=>`\u{9009}\u{5B9A}\u{7684}\u{8303}\u{56F4}\u{FF1A}${args.startDate} \u{81F3} ${args.endDate}`,
    "selectedTimeDescription": (args)=>`\u{9009}\u{5B9A}\u{7684}\u{65F6}\u{95F4}\u{FF1A}${args.time}`,
    "startDate": `\u{5F00}\u{59CB}\u{65E5}\u{671F}`,
    "timeZoneName": `\u{65F6}\u{533A}`,
    "weekday": `\u{5DE5}\u{4F5C}\u{65E5}`,
    "year": `\u{5E74}`
};

var $33fab8219207655a$exports = {};
$33fab8219207655a$exports = {
    "calendar": `\u{65E5}\u{66C6}`,
    "day": `\u{65E5}`,
    "dayPeriod": `\u{4E0A}\u{5348}/\u{4E0B}\u{5348}`,
    "endDate": `\u{7D50}\u{675F}\u{65E5}\u{671F}`,
    "era": `\u{7EAA}\u{5143}`,
    "hour": `\u{5C0F}\u{65F6}`,
    "minute": `\u{5206}\u{949F}`,
    "month": `\u{6708}`,
    "second": `\u{79D2}`,
    "selectedDateDescription": (args)=>`\u{9078}\u{5B9A}\u{7684}\u{65E5}\u{671F}\u{FF1A}${args.date}`,
    "selectedRangeDescription": (args)=>`\u{9078}\u{5B9A}\u{7684}\u{7BC4}\u{570D}\u{FF1A}${args.startDate} \u{81F3} ${args.endDate}`,
    "selectedTimeDescription": (args)=>`\u{9078}\u{5B9A}\u{7684}\u{6642}\u{9593}\u{FF1A}${args.time}`,
    "startDate": `\u{958B}\u{59CB}\u{65E5}\u{671F}`,
    "timeZoneName": `\u{65F6}\u{533A}`,
    "weekday": `\u{5DE5}\u{4F5C}\u{65E5}`,
    "year": `\u{5E74}`
};

var $dfb4eba373ed9493$exports = {};


































$dfb4eba373ed9493$exports = {
    "ar-AE": $f23889fffbde9058$exports,
    "bg-BG": $09d9badaa8903929$exports,
    "cs-CZ": $151b77e0fd711730$exports,
    "da-DK": $61915aa8630b90a2$exports,
    "de-DE": $35cea00159787840$exports,
    "el-GR": $518b4e82b9eacafd$exports,
    "en-US": $1c2b297f7e2cf474$exports,
    "es-ES": $07f628a707cf9b18$exports,
    "et-EE": $db553ffe17c7f4db$exports,
    "fi-FI": $4afcfe00cd703f83$exports,
    "fr-FR": $1d2645d18d4c5be0$exports,
    "he-IL": $64cb6a9be1f6fa48$exports,
    "hr-HR": $2a1ef2e8050be27a$exports,
    "hu-HU": $ad429dca102acd0e$exports,
    "it-IT": $6e68cb5d1cb97bd2$exports,
    "ja-JP": $a82ee9af063ee069$exports,
    "ko-KR": $67e9091dbf37d4eb$exports,
    "lt-LT": $75834f9729f653d1$exports,
    "lv-LV": $a2df2c2520b4a7f0$exports,
    "nb-NO": $aedcd71db4933ed5$exports,
    "nl-NL": $3b2df9e54353046c$exports,
    "pl-PL": $c03fe977fcfafe93$exports,
    "pt-BR": $569f006fc292345f$exports,
    "pt-PT": $7c2494e14452f2dd$exports,
    "ro-RO": $eb82ef981b5592bf$exports,
    "ru-RU": $6efa0e119f396950$exports,
    "sk-SK": $7f5e57085d7f5049$exports,
    "sl-SI": $578ee7c11dcdde7a$exports,
    "sr-SP": $bbc3fd6cd0bc9d50$exports,
    "sv-SE": $0b04512118591d2a$exports,
    "tr-TR": $3a49d121fe4c9e1d$exports,
    "uk-UA": $5ba21dbb8914919d$exports,
    "zh-CN": $51078838e1b16cd7$exports,
    "zh-TW": $33fab8219207655a$exports
};

function $3dfb0f96be0d6a08$export$4a931266a3838b86(state, ref, disableArrowNavigation) {
    let { direction: direction } = ($18f2051aff69b9bf$export$43bb16f9c6d9e3f7)();
    let focusManager = (reactExports.useMemo)(()=>($9bf71ea28793e738$export$c5251b9e124bf29)(ref), [
        ref
    ]);
    // Open the popover on alt + arrow down
    let onKeyDown = (e)=>{
        if (!e.currentTarget.contains(e.target)) return;
        if (e.altKey && (e.key === 'ArrowDown' || e.key === 'ArrowUp') && 'setOpen' in state) {
            e.preventDefault();
            e.stopPropagation();
            state.setOpen(true);
        }
        if (disableArrowNavigation) return;
        switch(e.key){
            case 'ArrowLeft':
                e.preventDefault();
                e.stopPropagation();
                if (direction === 'rtl') focusManager.focusNext();
                else focusManager.focusPrevious();
                break;
            case 'ArrowRight':
                e.preventDefault();
                e.stopPropagation();
                if (direction === 'rtl') focusManager.focusPrevious();
                else focusManager.focusNext();
                break;
        }
    };
    // Focus the first placeholder segment from the end on mouse down/touch up in the field.
    let focusLast = ()=>{
        var _window_event;
        // Try to find the segment prior to the element that was clicked on.
        let target = (_window_event = window.event) === null || _window_event === void 0 ? void 0 : _window_event.target;
        let walker = ($9bf71ea28793e738$export$2d6ec8fc375ceafa)(ref.current, {
            tabbable: true
        });
        if (target) {
            walker.currentNode = target;
            target = walker.previousNode();
        }
        // If no target found, find the last element from the end.
        if (!target) {
            let last;
            do {
                last = walker.lastChild();
                if (last) target = last;
            }while (last);
        }
        // Now go backwards until we find an element that is not a placeholder.
        while(target === null || target === void 0 ? void 0 : target.hasAttribute('data-placeholder')){
            let prev = walker.previousNode();
            if (prev && prev.hasAttribute('data-placeholder')) target = prev;
            else break;
        }
        if (target) target.focus();
    };
    let { pressProps: pressProps } = ($f6c31cce2adf654f$export$45712eceda6fad21)({
        preventFocusOnPress: true,
        allowTextSelectionOnPress: true,
        onPressStart (e) {
            if (e.pointerType === 'mouse') focusLast();
        },
        onPress (e) {
            if (e.pointerType !== 'mouse') focusLast();
        }
    });
    return ($3ef42575df84b30b$export$9d1611c77c2fe928)(pressProps, {
        onKeyDown: onKeyDown
    });
}

function $parcel$interopDefault$j(a) {
  return a && a.__esModule ? a.default : a;
}
/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 








const $16f0b7bb276bc17e$export$653eddfc964b0f8a = new WeakMap();
const $16f0b7bb276bc17e$export$300019f83c56d282 = '__role_' + Date.now();
const $16f0b7bb276bc17e$export$7b3062cd49e80452 = '__focusManager_' + Date.now();
function $16f0b7bb276bc17e$export$5591b0b878c1a989(props, state, ref) {
    var _state_value;
    let { isInvalid: isInvalid, validationErrors: validationErrors, validationDetails: validationDetails } = state.displayValidation;
    let { labelProps: labelProps, fieldProps: fieldProps, descriptionProps: descriptionProps, errorMessageProps: errorMessageProps } = ($2baaea4c71418dea$export$294aa081a6c6f55d)({
        ...props,
        labelElementType: 'span',
        isInvalid: isInvalid,
        errorMessage: props.errorMessage || validationErrors
    });
    let valueOnFocus = (reactExports.useRef)(null);
    let { focusWithinProps: focusWithinProps } = ($9ab94262bd0047c7$export$420e68273165f4ec)({
        ...props,
        onFocusWithin (e) {
            var _props_onFocus;
            valueOnFocus.current = state.value;
            (_props_onFocus = props.onFocus) === null || _props_onFocus === void 0 ? void 0 : _props_onFocus.call(props, e);
        },
        onBlurWithin: (e)=>{
            var _props_onBlur;
            state.confirmPlaceholder();
            if (state.value !== valueOnFocus.current) state.commitValidation();
            (_props_onBlur = props.onBlur) === null || _props_onBlur === void 0 ? void 0 : _props_onBlur.call(props, e);
        },
        onFocusWithinChange: props.onFocusChange
    });
    let stringFormatter = ($fca6afa0e843324b$export$f12b703ca79dfbb1)((($parcel$interopDefault$j($dfb4eba373ed9493$exports))), '@react-aria/datepicker');
    let message = state.maxGranularity === 'hour' ? 'selectedTimeDescription' : 'selectedDateDescription';
    let field = state.maxGranularity === 'hour' ? 'time' : 'date';
    let description = state.value ? stringFormatter.format(message, {
        [field]: state.formatValue({
            month: 'long'
        })
    }) : '';
    let descProps = ($ef06256079686ba0$export$f8aeda7b10753fa1)(description);
    // If within a date picker or date range picker, the date field will have role="presentation" and an aria-describedby
    // will be passed in that references the value (e.g. entire range). Otherwise, add the field's value description.
    let describedBy = props[$16f0b7bb276bc17e$export$300019f83c56d282] === 'presentation' ? fieldProps['aria-describedby'] : [
        descProps['aria-describedby'],
        fieldProps['aria-describedby']
    ].filter(Boolean).join(' ') || undefined;
    let propsFocusManager = props[$16f0b7bb276bc17e$export$7b3062cd49e80452];
    let focusManager = (reactExports.useMemo)(()=>propsFocusManager || ($9bf71ea28793e738$export$c5251b9e124bf29)(ref), [
        propsFocusManager,
        ref
    ]);
    let groupProps = ($3dfb0f96be0d6a08$export$4a931266a3838b86)(state, ref, props[$16f0b7bb276bc17e$export$300019f83c56d282] === 'presentation');
    // Pass labels and other information to segments.
    $16f0b7bb276bc17e$export$653eddfc964b0f8a.set(state, {
        ariaLabel: props['aria-label'],
        ariaLabelledBy: [
            labelProps.id,
            props['aria-labelledby']
        ].filter(Boolean).join(' ') || undefined,
        ariaDescribedBy: describedBy,
        focusManager: focusManager
    });
    let autoFocusRef = (reactExports.useRef)(props.autoFocus);
    // When used within a date picker or date range picker, the field gets role="presentation"
    // rather than role="group". Since the date picker/date range picker already has a role="group"
    // with a label and description, and the segments are already labeled by this as well, this
    // avoids very verbose duplicate announcements.
    let fieldDOMProps;
    if (props[$16f0b7bb276bc17e$export$300019f83c56d282] === 'presentation') fieldDOMProps = {
        role: 'presentation'
    };
    else fieldDOMProps = ($3ef42575df84b30b$export$9d1611c77c2fe928)(fieldProps, {
        role: 'group',
        'aria-disabled': props.isDisabled || undefined,
        'aria-describedby': describedBy
    });
    (reactExports.useEffect)(()=>{
        if (autoFocusRef.current) focusManager.focusFirst();
        autoFocusRef.current = false;
    }, [
        focusManager
    ]);
    ($99facab73266f662$export$5add1d006293d136)(props.inputRef, state.value, state.setValue);
    ($e93e671b31057976$export$b8473d3665f3a75a)({
        ...props,
        focus () {
            focusManager.focusFirst();
        }
    }, state, props.inputRef);
    let inputProps = {
        type: 'hidden',
        name: props.name,
        value: ((_state_value = state.value) === null || _state_value === void 0 ? void 0 : _state_value.toString()) || '',
        disabled: props.isDisabled
    };
    if (props.validationBehavior === 'native') {
        // Use a hidden <input type="text"> rather than <input type="hidden">
        // so that an empty value blocks HTML form submission when the field is required.
        inputProps.type = 'text';
        inputProps.hidden = true;
        inputProps.required = props.isRequired;
        // Ignore react warning.
        inputProps.onChange = ()=>{};
    }
    let domProps = ($65484d02dcb7eb3e$export$457c3d6518dd4c6f)(props);
    return {
        labelProps: {
            ...labelProps,
            onClick: ()=>{
                focusManager.focusFirst();
            }
        },
        fieldProps: ($3ef42575df84b30b$export$9d1611c77c2fe928)(domProps, fieldDOMProps, groupProps, focusWithinProps, {
            onKeyDown (e) {
                if (props.onKeyDown) props.onKeyDown(e);
            },
            onKeyUp (e) {
                if (props.onKeyUp) props.onKeyUp(e);
            }
        }),
        inputProps: inputProps,
        descriptionProps: descriptionProps,
        errorMessageProps: errorMessageProps,
        isInvalid: isInvalid,
        validationErrors: validationErrors,
        validationDetails: validationDetails
    };
}
function $16f0b7bb276bc17e$export$4c842f6a241dc825(props, state, ref) {
    var _state_timeValue;
    let res = $16f0b7bb276bc17e$export$5591b0b878c1a989(props, state, ref);
    res.inputProps.value = ((_state_timeValue = state.timeValue) === null || _state_timeValue === void 0 ? void 0 : _state_timeValue.toString()) || '';
    return res;
}

function $parcel$interopDefault$i(a) {
  return a && a.__esModule ? a.default : a;
}
/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 









function $6057a3d2a53a12fd$export$42df105a73306d51(props, state, ref) {
    let buttonId = ($bdb11010cef70236$export$f680877a34711e37)();
    let dialogId = ($bdb11010cef70236$export$f680877a34711e37)();
    let fieldId = ($bdb11010cef70236$export$f680877a34711e37)();
    let stringFormatter = ($fca6afa0e843324b$export$f12b703ca79dfbb1)((($parcel$interopDefault$i($dfb4eba373ed9493$exports))), '@react-aria/datepicker');
    let { isInvalid: isInvalid, validationErrors: validationErrors, validationDetails: validationDetails } = state.displayValidation;
    let { labelProps: labelProps, fieldProps: fieldProps, descriptionProps: descriptionProps, errorMessageProps: errorMessageProps } = ($2baaea4c71418dea$export$294aa081a6c6f55d)({
        ...props,
        labelElementType: 'span',
        isInvalid: isInvalid,
        errorMessage: props.errorMessage || validationErrors
    });
    let groupProps = ($3dfb0f96be0d6a08$export$4a931266a3838b86)(state, ref);
    let labelledBy = fieldProps['aria-labelledby'] || fieldProps.id;
    let { locale: locale } = ($18f2051aff69b9bf$export$43bb16f9c6d9e3f7)();
    let date = state.formatValue(locale, {
        month: 'long'
    });
    let description = date ? stringFormatter.format('selectedDateDescription', {
        date: date
    }) : '';
    let descProps = ($ef06256079686ba0$export$f8aeda7b10753fa1)(description);
    let ariaDescribedBy = [
        descProps['aria-describedby'],
        fieldProps['aria-describedby']
    ].filter(Boolean).join(' ') || undefined;
    let domProps = ($65484d02dcb7eb3e$export$457c3d6518dd4c6f)(props);
    let focusManager = (reactExports.useMemo)(()=>($9bf71ea28793e738$export$c5251b9e124bf29)(ref), [
        ref
    ]);
    let { focusWithinProps: focusWithinProps } = ($9ab94262bd0047c7$export$420e68273165f4ec)({
        ...props,
        isDisabled: state.isOpen,
        onBlurWithin: props.onBlur,
        onFocusWithin: props.onFocus,
        onFocusWithinChange: props.onFocusChange
    });
    return {
        groupProps: ($3ef42575df84b30b$export$9d1611c77c2fe928)(domProps, groupProps, fieldProps, descProps, focusWithinProps, {
            role: 'group',
            'aria-disabled': props.isDisabled || null,
            'aria-labelledby': labelledBy,
            'aria-describedby': ariaDescribedBy,
            onKeyDown (e) {
                if (state.isOpen) return;
                if (props.onKeyDown) props.onKeyDown(e);
            },
            onKeyUp (e) {
                if (state.isOpen) return;
                if (props.onKeyUp) props.onKeyUp(e);
            }
        }),
        labelProps: {
            ...labelProps,
            onClick: ()=>{
                focusManager.focusFirst();
            }
        },
        fieldProps: {
            ...fieldProps,
            id: fieldId,
            [($16f0b7bb276bc17e$export$300019f83c56d282)]: 'presentation',
            'aria-describedby': ariaDescribedBy,
            value: state.value,
            onChange: state.setValue,
            placeholderValue: props.placeholderValue,
            hideTimeZone: props.hideTimeZone,
            hourCycle: props.hourCycle,
            shouldForceLeadingZeros: props.shouldForceLeadingZeros,
            granularity: props.granularity,
            isDisabled: props.isDisabled,
            isReadOnly: props.isReadOnly,
            isRequired: props.isRequired,
            validationBehavior: props.validationBehavior,
            // DatePicker owns the validation state for the date field.
            [($e5be200c675c3b3a$export$a763b9476acd3eb)]: state,
            autoFocus: props.autoFocus,
            name: props.name
        },
        descriptionProps: descriptionProps,
        errorMessageProps: errorMessageProps,
        buttonProps: {
            ...descProps,
            id: buttonId,
            'aria-haspopup': 'dialog',
            'aria-label': stringFormatter.format('calendar'),
            'aria-labelledby': `${buttonId} ${labelledBy}`,
            'aria-describedby': ariaDescribedBy,
            'aria-expanded': state.isOpen,
            isDisabled: props.isDisabled || props.isReadOnly,
            onPress: ()=>state.setOpen(true)
        },
        dialogProps: {
            id: dialogId,
            'aria-labelledby': `${buttonId} ${labelledBy}`
        },
        calendarProps: {
            autoFocus: true,
            value: state.dateValue,
            onChange: state.setDateValue,
            minValue: props.minValue,
            maxValue: props.maxValue,
            isDisabled: props.isDisabled,
            isReadOnly: props.isReadOnly,
            isDateUnavailable: props.isDateUnavailable,
            defaultFocusedValue: state.dateValue ? undefined : props.placeholderValue,
            isInvalid: state.isInvalid,
            errorMessage: typeof props.errorMessage === 'function' ? props.errorMessage(state.displayValidation) : props.errorMessage || state.displayValidation.validationErrors.join(' ')
        },
        isInvalid: isInvalid,
        validationErrors: validationErrors,
        validationDetails: validationDetails
    };
}

function $parcel$interopDefault$h(a) {
  return a && a.__esModule ? a.default : a;
}
/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ // @ts-ignore



function $3aeceb3a64eb8358$export$d42c60378c8168f8() {
    let { locale: locale } = ($18f2051aff69b9bf$export$43bb16f9c6d9e3f7)();
    let dictionary = ($fca6afa0e843324b$export$87b761675e8eaa10)((($parcel$interopDefault$h($dfb4eba373ed9493$exports))), '@react-aria/datepicker');
    return (reactExports.useMemo)(()=>{
        // Try to use Intl.DisplayNames if possible. It may be supported in browsers, but not support the dateTimeField
        // type as that was only added in v2. https://github.com/tc39/intl-displaynames-v2
        try {
            // @ts-ignore
            return new Intl.DisplayNames(locale, {
                type: 'dateTimeField'
            });
        } catch (err) {
            return new $3aeceb3a64eb8358$var$DisplayNamesPolyfill(locale, dictionary);
        }
    }, [
        locale,
        dictionary
    ]);
}
class $3aeceb3a64eb8358$var$DisplayNamesPolyfill {
    of(field) {
        return this.dictionary.getStringForLocale(field, this.locale);
    }
    constructor(locale, dictionary){
        this.locale = locale;
        this.dictionary = dictionary;
    }
}

var $ed6aae4e5f766f1e$exports = {};
$ed6aae4e5f766f1e$exports = {
    "Empty": `\u{641}\u{627}\u{631}\u{63A}`
};

var $38854e2b175151fa$exports = {};
$38854e2b175151fa$exports = {
    "Empty": `\u{418}\u{437}\u{43F}\u{440}\u{430}\u{437}\u{43D}\u{438}`
};

var $15b25ab20f3945b2$exports = {};
$15b25ab20f3945b2$exports = {
    "Empty": `Pr\xe1zdn\xe9`
};

var $692a4298b6b649a2$exports = {};
$692a4298b6b649a2$exports = {
    "Empty": `Tom`
};

var $1c6e1539193f1243$exports = {};
$1c6e1539193f1243$exports = {
    "Empty": `Leer`
};

var $1e8678632c464b6d$exports = {};
$1e8678632c464b6d$exports = {
    "Empty": `\u{386}\u{3B4}\u{3B5}\u{3B9}\u{3BF}`
};

var $4adc85d9bf5b9eed$exports = {};
$4adc85d9bf5b9eed$exports = {
    "Empty": `Empty`
};

var $41c4b2bb61dafbca$exports = {};
$41c4b2bb61dafbca$exports = {
    "Empty": `Vac\xedo`
};

var $405f8b24f5dd2a60$exports = {};
$405f8b24f5dd2a60$exports = {
    "Empty": `T\xfchjenda`
};

var $7efe3ed02b9b9dd4$exports = {};
$7efe3ed02b9b9dd4$exports = {
    "Empty": `Tyhj\xe4`
};

var $99fc4c101d92daf3$exports = {};
$99fc4c101d92daf3$exports = {
    "Empty": `Vide`
};

var $f9e155e6e8cacaa2$exports = {};
$f9e155e6e8cacaa2$exports = {
    "Empty": `\u{5E8}\u{5D9}\u{5E7}`
};

var $c31b5e8e9a249fd5$exports = {};
$c31b5e8e9a249fd5$exports = {
    "Empty": `Prazno`
};

var $9c5435bc17499bd9$exports = {};
$9c5435bc17499bd9$exports = {
    "Empty": `\xdcres`
};

var $6d1fc8e84d8165e1$exports = {};
$6d1fc8e84d8165e1$exports = {
    "Empty": `Vuoto`
};

var $46ea6b3641b83e71$exports = {};
$46ea6b3641b83e71$exports = {
    "Empty": `\u{7A7A}`
};

var $0e3cc9a288289dc5$exports = {};
$0e3cc9a288289dc5$exports = {
    "Empty": `\u{BE44}\u{C5B4} \u{C788}\u{C74C}`
};

var $4ff2bb25c0089ffb$exports = {};
$4ff2bb25c0089ffb$exports = {
    "Empty": `Tu\u{161}\u{10D}ias`
};

var $6cf33cd4c010a2fb$exports = {};
$6cf33cd4c010a2fb$exports = {
    "Empty": `Tuk\u{161}s`
};

var $5a9f8486f8b8837e$exports = {};
$5a9f8486f8b8837e$exports = {
    "Empty": `Tom`
};

var $583f94d807f6ecea$exports = {};
$583f94d807f6ecea$exports = {
    "Empty": `Leeg`
};

var $cc4dcfeea2b4050d$exports = {};
$cc4dcfeea2b4050d$exports = {
    "Empty": `Pusty`
};

var $68ac2954d56e12b4$exports = {};
$68ac2954d56e12b4$exports = {
    "Empty": `Vazio`
};

var $fdb0616f309780b0$exports = {};
$fdb0616f309780b0$exports = {
    "Empty": `Vazio`
};

var $fe1eccf4ee1d6f52$exports = {};
$fe1eccf4ee1d6f52$exports = {
    "Empty": `Gol`
};

var $a38b6c4e18725976$exports = {};
$a38b6c4e18725976$exports = {
    "Empty": `\u{41D}\u{435} \u{437}\u{430}\u{43F}\u{43E}\u{43B}\u{43D}\u{435}\u{43D}\u{43E}`
};

var $6c14ae2b766b652c$exports = {};
$6c14ae2b766b652c$exports = {
    "Empty": `Pr\xe1zdne`
};

var $8f1c9692e16dc5eb$exports = {};
$8f1c9692e16dc5eb$exports = {
    "Empty": `Prazen`
};

var $d2aa7abea627cafa$exports = {};
$d2aa7abea627cafa$exports = {
    "Empty": `Prazno`
};

var $676b82e4b56408e6$exports = {};
$676b82e4b56408e6$exports = {
    "Empty": `Tomt`
};

var $14c9042552d7ce08$exports = {};
$14c9042552d7ce08$exports = {
    "Empty": `Bo\u{15F}`
};

var $393254ebcb66c9f5$exports = {};
$393254ebcb66c9f5$exports = {
    "Empty": `\u{41F}\u{443}\u{441}\u{442}\u{43E}`
};

var $d49d621f310cf6ce$exports = {};
$d49d621f310cf6ce$exports = {
    "Empty": `\u{7A7A}`
};

var $94b60c866ca5dfe6$exports = {};
$94b60c866ca5dfe6$exports = {
    "Empty": `\u{7A7A}\u{767D}`
};

var $a99895ee3dc79e61$exports = {};


































$a99895ee3dc79e61$exports = {
    "ar-AE": $ed6aae4e5f766f1e$exports,
    "bg-BG": $38854e2b175151fa$exports,
    "cs-CZ": $15b25ab20f3945b2$exports,
    "da-DK": $692a4298b6b649a2$exports,
    "de-DE": $1c6e1539193f1243$exports,
    "el-GR": $1e8678632c464b6d$exports,
    "en-US": $4adc85d9bf5b9eed$exports,
    "es-ES": $41c4b2bb61dafbca$exports,
    "et-EE": $405f8b24f5dd2a60$exports,
    "fi-FI": $7efe3ed02b9b9dd4$exports,
    "fr-FR": $99fc4c101d92daf3$exports,
    "he-IL": $f9e155e6e8cacaa2$exports,
    "hr-HR": $c31b5e8e9a249fd5$exports,
    "hu-HU": $9c5435bc17499bd9$exports,
    "it-IT": $6d1fc8e84d8165e1$exports,
    "ja-JP": $46ea6b3641b83e71$exports,
    "ko-KR": $0e3cc9a288289dc5$exports,
    "lt-LT": $4ff2bb25c0089ffb$exports,
    "lv-LV": $6cf33cd4c010a2fb$exports,
    "nb-NO": $5a9f8486f8b8837e$exports,
    "nl-NL": $583f94d807f6ecea$exports,
    "pl-PL": $cc4dcfeea2b4050d$exports,
    "pt-BR": $68ac2954d56e12b4$exports,
    "pt-PT": $fdb0616f309780b0$exports,
    "ro-RO": $fe1eccf4ee1d6f52$exports,
    "ru-RU": $a38b6c4e18725976$exports,
    "sk-SK": $6c14ae2b766b652c$exports,
    "sl-SI": $8f1c9692e16dc5eb$exports,
    "sr-SP": $d2aa7abea627cafa$exports,
    "sv-SE": $676b82e4b56408e6$exports,
    "tr-TR": $14c9042552d7ce08$exports,
    "uk-UA": $393254ebcb66c9f5$exports,
    "zh-CN": $d49d621f310cf6ce$exports,
    "zh-TW": $94b60c866ca5dfe6$exports
};

function $parcel$interopDefault$g(a) {
  return a && a.__esModule ? a.default : a;
}
/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 




function $d2e8511e6f209edf$export$e908e06f4b8e3402(props) {
    const _async = (reactExports.useRef)(undefined);
    let { value: value, textValue: textValue, minValue: minValue, maxValue: maxValue, isDisabled: isDisabled, isReadOnly: isReadOnly, isRequired: isRequired, onIncrement: onIncrement, onIncrementPage: onIncrementPage, onDecrement: onDecrement, onDecrementPage: onDecrementPage, onDecrementToMin: onDecrementToMin, onIncrementToMax: onIncrementToMax } = props;
    const stringFormatter = ($fca6afa0e843324b$export$f12b703ca79dfbb1)((($parcel$interopDefault$g($a99895ee3dc79e61$exports))), '@react-aria/spinbutton');
    const clearAsync = ()=>clearTimeout(_async.current);
    // eslint-disable-next-line arrow-body-style
    (reactExports.useEffect)(()=>{
        return ()=>clearAsync();
    }, []);
    let onKeyDown = (e)=>{
        if (e.ctrlKey || e.metaKey || e.shiftKey || e.altKey || isReadOnly) return;
        switch(e.key){
            case 'PageUp':
                if (onIncrementPage) {
                    e.preventDefault();
                    onIncrementPage === null || onIncrementPage === void 0 ? void 0 : onIncrementPage();
                    break;
                }
            // fallthrough!
            case 'ArrowUp':
            case 'Up':
                if (onIncrement) {
                    e.preventDefault();
                    onIncrement === null || onIncrement === void 0 ? void 0 : onIncrement();
                }
                break;
            case 'PageDown':
                if (onDecrementPage) {
                    e.preventDefault();
                    onDecrementPage === null || onDecrementPage === void 0 ? void 0 : onDecrementPage();
                    break;
                }
            // fallthrough
            case 'ArrowDown':
            case 'Down':
                if (onDecrement) {
                    e.preventDefault();
                    onDecrement === null || onDecrement === void 0 ? void 0 : onDecrement();
                }
                break;
            case 'Home':
                if (onDecrementToMin) {
                    e.preventDefault();
                    onDecrementToMin === null || onDecrementToMin === void 0 ? void 0 : onDecrementToMin();
                }
                break;
            case 'End':
                if (onIncrementToMax) {
                    e.preventDefault();
                    onIncrementToMax === null || onIncrementToMax === void 0 ? void 0 : onIncrementToMax();
                }
                break;
        }
    };
    let isFocused = (reactExports.useRef)(false);
    let onFocus = ()=>{
        isFocused.current = true;
    };
    let onBlur = ()=>{
        isFocused.current = false;
    };
    // Replace Unicode hyphen-minus (U+002D) with minus sign (U+2212).
    // This ensures that macOS VoiceOver announces it as "minus" even with other characters between the minus sign
    // and the number (e.g. currency symbol). Otherwise it announces nothing because it assumes the character is a hyphen.
    // In addition, replace the empty string with the word "Empty" so that iOS VoiceOver does not read "50%" for an empty field.
    let ariaTextValue = textValue === '' ? stringFormatter.format('Empty') : (textValue || `${value}`).replace('-', '\u2212');
    (reactExports.useEffect)(()=>{
        if (isFocused.current) {
            ($319e236875307eab$export$d10ae4f68404609a)('assertive');
            ($319e236875307eab$export$a9b970dcc4ae71a9)(ariaTextValue, 'assertive');
        }
    }, [
        ariaTextValue
    ]);
    const onIncrementPressStart = ($8ae05eaa5c114e9c$export$7f54fc3180508a52)((initialStepDelay)=>{
        clearAsync();
        onIncrement === null || onIncrement === void 0 ? void 0 : onIncrement();
        // Start spinning after initial delay
        _async.current = window.setTimeout(()=>{
            if (maxValue === undefined || isNaN(maxValue) || value === undefined || isNaN(value) || value < maxValue) onIncrementPressStart(60);
        }, initialStepDelay);
    });
    const onDecrementPressStart = ($8ae05eaa5c114e9c$export$7f54fc3180508a52)((initialStepDelay)=>{
        clearAsync();
        onDecrement === null || onDecrement === void 0 ? void 0 : onDecrement();
        // Start spinning after initial delay
        _async.current = window.setTimeout(()=>{
            if (minValue === undefined || isNaN(minValue) || value === undefined || isNaN(value) || value > minValue) onDecrementPressStart(60);
        }, initialStepDelay);
    });
    let cancelContextMenu = (e)=>{
        e.preventDefault();
    };
    let { addGlobalListener: addGlobalListener, removeAllGlobalListeners: removeAllGlobalListeners } = ($03deb23ff14920c4$export$4eaf04e54aa8eed6)();
    return {
        spinButtonProps: {
            role: 'spinbutton',
            'aria-valuenow': value !== undefined && !isNaN(value) ? value : undefined,
            'aria-valuetext': ariaTextValue,
            'aria-valuemin': minValue,
            'aria-valuemax': maxValue,
            'aria-disabled': isDisabled || undefined,
            'aria-readonly': isReadOnly || undefined,
            'aria-required': isRequired || undefined,
            onKeyDown: onKeyDown,
            onFocus: onFocus,
            onBlur: onBlur
        },
        incrementButtonProps: {
            onPressStart: ()=>{
                onIncrementPressStart(400);
                addGlobalListener(window, 'contextmenu', cancelContextMenu);
            },
            onPressEnd: ()=>{
                clearAsync();
                removeAllGlobalListeners();
            },
            onFocus: onFocus,
            onBlur: onBlur
        },
        decrementButtonProps: {
            onPressStart: ()=>{
                onDecrementPressStart(400);
                addGlobalListener(window, 'contextmenu', cancelContextMenu);
            },
            onPressEnd: ()=>{
                clearAsync();
                removeAllGlobalListeners();
            },
            onFocus: onFocus,
            onBlur: onBlur
        }
    };
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 







function $32489daedd52963e$export$1315d136e6f7581(segment, state, ref) {
    let enteredKeys = (reactExports.useRef)('');
    let { locale: locale } = ($18f2051aff69b9bf$export$43bb16f9c6d9e3f7)();
    let displayNames = ($3aeceb3a64eb8358$export$d42c60378c8168f8)();
    let { ariaLabel: ariaLabel, ariaLabelledBy: ariaLabelledBy, ariaDescribedBy: ariaDescribedBy, focusManager: focusManager } = ($16f0b7bb276bc17e$export$653eddfc964b0f8a).get(state);
    let textValue = segment.isPlaceholder ? '' : segment.text;
    let options = (reactExports.useMemo)(()=>state.dateFormatter.resolvedOptions(), [
        state.dateFormatter
    ]);
    let monthDateFormatter = ($896ba0a80a8f4d36$export$85fd5fdf27bacc79)({
        month: 'long',
        timeZone: options.timeZone
    });
    let hourDateFormatter = ($896ba0a80a8f4d36$export$85fd5fdf27bacc79)({
        hour: 'numeric',
        hour12: options.hour12,
        timeZone: options.timeZone
    });
    if (segment.type === 'month' && !segment.isPlaceholder) {
        let monthTextValue = monthDateFormatter.format(state.dateValue);
        textValue = monthTextValue !== textValue ? `${textValue} \u{2013} ${monthTextValue}` : monthTextValue;
    } else if (segment.type === 'hour' && !segment.isPlaceholder) textValue = hourDateFormatter.format(state.dateValue);
    let { spinButtonProps: spinButtonProps } = ($d2e8511e6f209edf$export$e908e06f4b8e3402)({
        // The ARIA spec says aria-valuenow is optional if there's no value, but aXe seems to require it.
        // This doesn't seem to have any negative effects with real AT since we also use aria-valuetext.
        // https://github.com/dequelabs/axe-core/issues/3505
        value: segment.value,
        textValue: textValue,
        minValue: segment.minValue,
        maxValue: segment.maxValue,
        isDisabled: state.isDisabled,
        isReadOnly: state.isReadOnly || !segment.isEditable,
        isRequired: state.isRequired,
        onIncrement: ()=>{
            enteredKeys.current = '';
            state.increment(segment.type);
        },
        onDecrement: ()=>{
            enteredKeys.current = '';
            state.decrement(segment.type);
        },
        onIncrementPage: ()=>{
            enteredKeys.current = '';
            state.incrementPage(segment.type);
        },
        onDecrementPage: ()=>{
            enteredKeys.current = '';
            state.decrementPage(segment.type);
        },
        onIncrementToMax: ()=>{
            enteredKeys.current = '';
            state.setSegment(segment.type, segment.maxValue);
        },
        onDecrementToMin: ()=>{
            enteredKeys.current = '';
            state.setSegment(segment.type, segment.minValue);
        }
    });
    let parser = (reactExports.useMemo)(()=>new ($6c7bd7858deea686$export$cd11ab140839f11d)(locale, {
            maximumFractionDigits: 0
        }), [
        locale
    ]);
    let backspace = ()=>{
        if (segment.text === segment.placeholder) focusManager.focusPrevious();
        if (parser.isValidPartialNumber(segment.text) && !state.isReadOnly && !segment.isPlaceholder) {
            let newValue = segment.text.slice(0, -1);
            let parsed = parser.parse(newValue);
            newValue = parsed === 0 ? '' : newValue;
            if (newValue.length === 0 || parsed === 0) state.clearSegment(segment.type);
            else state.setSegment(segment.type, parsed);
            enteredKeys.current = newValue;
        } else if (segment.type === 'dayPeriod') state.clearSegment(segment.type);
    };
    let onKeyDown = (e)=>{
        // Firefox does not fire selectstart for Ctrl/Cmd + A
        // https://bugzilla.mozilla.org/show_bug.cgi?id=1742153
        if (e.key === 'a' && (($c87311424ea30a05$export$9ac100e40613ea10)() ? e.metaKey : e.ctrlKey)) e.preventDefault();
        if (e.ctrlKey || e.metaKey || e.shiftKey || e.altKey) return;
        switch(e.key){
            case 'Backspace':
            case 'Delete':
                // Safari on iOS does not fire beforeinput for the backspace key because the cursor is at the start.
                e.preventDefault();
                e.stopPropagation();
                backspace();
                break;
        }
    };
    // Safari dayPeriod option doesn't work...
    let { startsWith: startsWith } = ($bb77f239b46e8c72$export$3274cf84b703fff)({
        sensitivity: 'base'
    });
    let amPmFormatter = ($896ba0a80a8f4d36$export$85fd5fdf27bacc79)({
        hour: 'numeric',
        hour12: true
    });
    let am = (reactExports.useMemo)(()=>{
        let date = new Date();
        date.setHours(0);
        return amPmFormatter.formatToParts(date).find((part)=>part.type === 'dayPeriod').value;
    }, [
        amPmFormatter
    ]);
    let pm = (reactExports.useMemo)(()=>{
        let date = new Date();
        date.setHours(12);
        return amPmFormatter.formatToParts(date).find((part)=>part.type === 'dayPeriod').value;
    }, [
        amPmFormatter
    ]);
    // Get a list of formatted era names so users can type the first character to choose one.
    let eraFormatter = ($896ba0a80a8f4d36$export$85fd5fdf27bacc79)({
        year: 'numeric',
        era: 'narrow',
        timeZone: 'UTC'
    });
    let eras = (reactExports.useMemo)(()=>{
        if (segment.type !== 'era') return [];
        let date = ($11d87f3f76e88657$export$b4a036af3fc0b032)(new ($35ea8db9cb2ccb90$export$99faa760c7908e4f)(1, 1, 1), state.calendar);
        let eras = state.calendar.getEras().map((era)=>{
            let eraDate = date.set({
                year: 1,
                month: 1,
                day: 1,
                era: era
            }).toDate('UTC');
            let parts = eraFormatter.formatToParts(eraDate);
            let formatted = parts.find((p)=>p.type === 'era').value;
            return {
                era: era,
                formatted: formatted
            };
        });
        // Remove the common prefix from formatted values. This is so that in calendars with eras like
        // ERA0 and ERA1 (e.g. Ethiopic), users can press "0" and "1" to select an era. In other cases,
        // the first letter is used.
        let prefixLength = $32489daedd52963e$var$commonPrefixLength(eras.map((era)=>era.formatted));
        if (prefixLength) for (let era of eras)era.formatted = era.formatted.slice(prefixLength);
        return eras;
    }, [
        eraFormatter,
        state.calendar,
        segment.type
    ]);
    let onInput = (key)=>{
        if (state.isDisabled || state.isReadOnly) return;
        let newValue = enteredKeys.current + key;
        switch(segment.type){
            case 'dayPeriod':
                if (startsWith(am, key)) state.setSegment('dayPeriod', 0);
                else if (startsWith(pm, key)) state.setSegment('dayPeriod', 12);
                else break;
                focusManager.focusNext();
                break;
            case 'era':
                {
                    let matched = eras.find((e)=>startsWith(e.formatted, key));
                    if (matched) {
                        state.setSegment('era', matched.era);
                        focusManager.focusNext();
                    }
                    break;
                }
            case 'day':
            case 'hour':
            case 'minute':
            case 'second':
            case 'month':
            case 'year':
                {
                    if (!parser.isValidPartialNumber(newValue)) return;
                    let numberValue = parser.parse(newValue);
                    let segmentValue = numberValue;
                    let allowsZero = segment.minValue === 0;
                    if (segment.type === 'hour' && state.dateFormatter.resolvedOptions().hour12) {
                        switch(state.dateFormatter.resolvedOptions().hourCycle){
                            case 'h11':
                                if (numberValue > 11) segmentValue = parser.parse(key);
                                break;
                            case 'h12':
                                allowsZero = false;
                                if (numberValue > 12) segmentValue = parser.parse(key);
                                break;
                        }
                        if (segment.value >= 12 && numberValue > 1) numberValue += 12;
                    } else if (numberValue > segment.maxValue) segmentValue = parser.parse(key);
                    if (isNaN(numberValue)) return;
                    let shouldSetValue = segmentValue !== 0 || allowsZero;
                    if (shouldSetValue) state.setSegment(segment.type, segmentValue);
                    if (Number(numberValue + '0') > segment.maxValue || newValue.length >= String(segment.maxValue).length) {
                        enteredKeys.current = '';
                        if (shouldSetValue) focusManager.focusNext();
                    } else enteredKeys.current = newValue;
                    break;
                }
        }
    };
    let onFocus = ()=>{
        enteredKeys.current = '';
        ($2f04cbc44ee30ce0$export$c826860796309d1b)(ref.current, {
            containingElement: ($62d8ded9296f3872$export$cfa2225e87938781)(ref.current)
        });
        // Collapse selection to start or Chrome won't fire input events.
        let selection = window.getSelection();
        selection.collapse(ref.current);
    };
    let documentRef = (reactExports.useRef)(typeof document !== 'undefined' ? document : null);
    ($e9faafb641e167db$export$90fc3a17d93f704c)(documentRef, 'selectionchange', ()=>{
        // Enforce that the selection is collapsed when inside a date segment.
        // Otherwise, when tapping on a segment in Android Chrome and then entering text,
        // composition events will be fired that break the DOM structure and crash the page.
        let selection = window.getSelection();
        if (ref.current.contains(selection.anchorNode)) selection.collapse(ref.current);
    });
    let compositionRef = (reactExports.useRef)('');
    // @ts-ignore - TODO: possibly old TS version? doesn't fail in my editor...
    ($e9faafb641e167db$export$90fc3a17d93f704c)(ref, 'beforeinput', (e)=>{
        e.preventDefault();
        switch(e.inputType){
            case 'deleteContentBackward':
            case 'deleteContentForward':
                if (parser.isValidPartialNumber(segment.text) && !state.isReadOnly) backspace();
                break;
            case 'insertCompositionText':
                // insertCompositionText cannot be canceled.
                // Record the current state of the element so we can restore it in the `input` event below.
                compositionRef.current = ref.current.textContent;
                // Safari gets stuck in a composition state unless we also assign to the value here.
                // eslint-disable-next-line no-self-assign
                ref.current.textContent = ref.current.textContent;
                break;
            default:
                if (e.data != null) onInput(e.data);
                break;
        }
    });
    ($e9faafb641e167db$export$90fc3a17d93f704c)(ref, 'input', (e)=>{
        let { inputType: inputType, data: data } = e;
        switch(inputType){
            case 'insertCompositionText':
                // Reset the DOM to how it was in the beforeinput event.
                ref.current.textContent = compositionRef.current;
                // Android sometimes fires key presses of letters as composition events. Need to handle am/pm keys here too.
                // Can also happen e.g. with Pinyin keyboard on iOS.
                if (startsWith(am, data) || startsWith(pm, data)) onInput(data);
                break;
        }
    });
    ($f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(()=>{
        let element = ref.current;
        return ()=>{
            // If the focused segment is removed, focus the previous one, or the next one if there was no previous one.
            if (document.activeElement === element) {
                let prev = focusManager.focusPrevious();
                if (!prev) focusManager.focusNext();
            }
        };
    }, [
        ref,
        focusManager
    ]);
    // spinbuttons cannot be focused with VoiceOver on iOS.
    let touchPropOverrides = ($c87311424ea30a05$export$fedb369cb70207f1)() || segment.type === 'timeZoneName' ? {
        role: 'textbox',
        'aria-valuemax': null,
        'aria-valuemin': null,
        'aria-valuetext': null,
        'aria-valuenow': null
    } : {};
    // Only apply aria-describedby to the first segment, unless the field is invalid. This avoids it being
    // read every time the user navigates to a new segment.
    let firstSegment = (reactExports.useMemo)(()=>state.segments.find((s)=>s.isEditable), [
        state.segments
    ]);
    if (segment !== firstSegment && !state.isInvalid) ariaDescribedBy = undefined;
    let id = ($bdb11010cef70236$export$f680877a34711e37)();
    let isEditable = !state.isDisabled && !state.isReadOnly && segment.isEditable;
    // Prepend the label passed from the field to each segment name.
    // This is needed because VoiceOver on iOS does not announce groups.
    let name = segment.type === 'literal' ? '' : displayNames.of(segment.type);
    let labelProps = ($313b98861ee5dd6c$export$d6875122194c7b44)({
        'aria-label': `${name}${ariaLabel ? `, ${ariaLabel}` : ''}${ariaLabelledBy ? ', ' : ''}`,
        'aria-labelledby': ariaLabelledBy
    });
    // Literal segments should not be visible to screen readers. We don't really need any of the above,
    // but the rules of hooks mean hooks cannot be conditional so we have to put this condition here.
    if (segment.type === 'literal') return {
        segmentProps: {
            'aria-hidden': true
        }
    };
    return {
        segmentProps: ($3ef42575df84b30b$export$9d1611c77c2fe928)(spinButtonProps, labelProps, {
            id: id,
            ...touchPropOverrides,
            'aria-invalid': state.isInvalid ? 'true' : undefined,
            'aria-describedby': ariaDescribedBy,
            'aria-readonly': state.isReadOnly || !segment.isEditable ? 'true' : undefined,
            'data-placeholder': segment.isPlaceholder || undefined,
            contentEditable: isEditable,
            suppressContentEditableWarning: isEditable,
            spellCheck: isEditable ? 'false' : undefined,
            autoCorrect: isEditable ? 'off' : undefined,
            // Capitalization was changed in React 17...
            [parseInt((React).version, 10) >= 17 ? 'enterKeyHint' : 'enterkeyhint']: isEditable ? 'next' : undefined,
            inputMode: state.isDisabled || segment.type === 'dayPeriod' || segment.type === 'era' || !isEditable ? undefined : 'numeric',
            tabIndex: state.isDisabled ? undefined : 0,
            onKeyDown: onKeyDown,
            onFocus: onFocus,
            style: {
                caretColor: 'transparent'
            },
            // Prevent pointer events from reaching useDatePickerGroup, and allow native browser behavior to focus the segment.
            onPointerDown (e) {
                e.stopPropagation();
            },
            onMouseDown (e) {
                e.stopPropagation();
            }
        })
    };
}
function $32489daedd52963e$var$commonPrefixLength(strings) {
    // Sort the strings, and compare the characters in the first and last to find the common prefix.
    strings.sort();
    let first = strings[0];
    let last = strings[strings.length - 1];
    for(let i = 0; i < first.length; i++){
        if (first[i] !== last[i]) return i;
    }
    return 0;
}

function $parcel$interopDefault$f(a) {
  return a && a.__esModule ? a.default : a;
}
/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 









function $887cac91b7cc8801$export$12fd5f0e9f4bb192(props, state, ref) {
    var _state_value, _state_value1;
    let stringFormatter = ($fca6afa0e843324b$export$f12b703ca79dfbb1)((($parcel$interopDefault$f($dfb4eba373ed9493$exports))), '@react-aria/datepicker');
    let { isInvalid: isInvalid, validationErrors: validationErrors, validationDetails: validationDetails } = state.displayValidation;
    let { labelProps: labelProps, fieldProps: fieldProps, descriptionProps: descriptionProps, errorMessageProps: errorMessageProps } = ($2baaea4c71418dea$export$294aa081a6c6f55d)({
        ...props,
        labelElementType: 'span',
        isInvalid: isInvalid,
        errorMessage: props.errorMessage || validationErrors
    });
    let labelledBy = fieldProps['aria-labelledby'] || fieldProps.id;
    let { locale: locale } = ($18f2051aff69b9bf$export$43bb16f9c6d9e3f7)();
    let range = state.formatValue(locale, {
        month: 'long'
    });
    let description = range ? stringFormatter.format('selectedRangeDescription', {
        startDate: range.start,
        endDate: range.end
    }) : '';
    let descProps = ($ef06256079686ba0$export$f8aeda7b10753fa1)(description);
    let startFieldProps = {
        'aria-label': stringFormatter.format('startDate'),
        'aria-labelledby': labelledBy
    };
    let endFieldProps = {
        'aria-label': stringFormatter.format('endDate'),
        'aria-labelledby': labelledBy
    };
    let buttonId = ($bdb11010cef70236$export$f680877a34711e37)();
    let dialogId = ($bdb11010cef70236$export$f680877a34711e37)();
    let groupProps = ($3dfb0f96be0d6a08$export$4a931266a3838b86)(state, ref);
    let ariaDescribedBy = [
        descProps['aria-describedby'],
        fieldProps['aria-describedby']
    ].filter(Boolean).join(' ') || undefined;
    let focusManager = (reactExports.useMemo)(()=>($9bf71ea28793e738$export$c5251b9e124bf29)(ref, {
            // Exclude the button from the focus manager.
            accept: (element)=>element.id !== buttonId
        }), [
        ref,
        buttonId
    ]);
    let commonFieldProps = {
        [($16f0b7bb276bc17e$export$7b3062cd49e80452)]: focusManager,
        [($16f0b7bb276bc17e$export$300019f83c56d282)]: 'presentation',
        'aria-describedby': ariaDescribedBy,
        placeholderValue: props.placeholderValue,
        hideTimeZone: props.hideTimeZone,
        hourCycle: props.hourCycle,
        granularity: props.granularity,
        shouldForceLeadingZeros: props.shouldForceLeadingZeros,
        isDisabled: props.isDisabled,
        isReadOnly: props.isReadOnly,
        isRequired: props.isRequired,
        validationBehavior: props.validationBehavior
    };
    let domProps = ($65484d02dcb7eb3e$export$457c3d6518dd4c6f)(props);
    let { focusWithinProps: focusWithinProps } = ($9ab94262bd0047c7$export$420e68273165f4ec)({
        ...props,
        isDisabled: state.isOpen,
        onBlurWithin: props.onBlur,
        onFocusWithin: props.onFocus,
        onFocusWithinChange: props.onFocusChange
    });
    let startFieldValidation = (reactExports.useRef)(($e5be200c675c3b3a$export$dad6ae84456c676a));
    let endFieldValidation = (reactExports.useRef)(($e5be200c675c3b3a$export$dad6ae84456c676a));
    return {
        groupProps: ($3ef42575df84b30b$export$9d1611c77c2fe928)(domProps, groupProps, fieldProps, descProps, focusWithinProps, {
            role: 'group',
            'aria-disabled': props.isDisabled || null,
            'aria-describedby': ariaDescribedBy,
            onKeyDown (e) {
                if (state.isOpen) return;
                if (props.onKeyDown) props.onKeyDown(e);
            },
            onKeyUp (e) {
                if (state.isOpen) return;
                if (props.onKeyUp) props.onKeyUp(e);
            }
        }),
        labelProps: {
            ...labelProps,
            onClick: ()=>{
                focusManager.focusFirst();
            }
        },
        buttonProps: {
            ...descProps,
            id: buttonId,
            'aria-haspopup': 'dialog',
            'aria-label': stringFormatter.format('calendar'),
            'aria-labelledby': `${buttonId} ${labelledBy}`,
            'aria-describedby': ariaDescribedBy,
            'aria-expanded': state.isOpen,
            isDisabled: props.isDisabled || props.isReadOnly,
            onPress: ()=>state.setOpen(true)
        },
        dialogProps: {
            id: dialogId,
            'aria-labelledby': `${buttonId} ${labelledBy}`
        },
        startFieldProps: {
            ...startFieldProps,
            ...commonFieldProps,
            value: (_state_value = state.value) === null || _state_value === void 0 ? void 0 : _state_value.start,
            onChange: (start)=>state.setDateTime('start', start),
            autoFocus: props.autoFocus,
            name: props.startName,
            [($e5be200c675c3b3a$export$a763b9476acd3eb)]: {
                realtimeValidation: state.realtimeValidation,
                displayValidation: state.displayValidation,
                updateValidation (e) {
                    startFieldValidation.current = e;
                    state.updateValidation(($e5be200c675c3b3a$export$75ee7c75d68f5b0e)(e, endFieldValidation.current));
                },
                resetValidation: state.resetValidation,
                commitValidation: state.commitValidation
            }
        },
        endFieldProps: {
            ...endFieldProps,
            ...commonFieldProps,
            value: (_state_value1 = state.value) === null || _state_value1 === void 0 ? void 0 : _state_value1.end,
            onChange: (end)=>state.setDateTime('end', end),
            name: props.endName,
            [($e5be200c675c3b3a$export$a763b9476acd3eb)]: {
                realtimeValidation: state.realtimeValidation,
                displayValidation: state.displayValidation,
                updateValidation (e) {
                    endFieldValidation.current = e;
                    state.updateValidation(($e5be200c675c3b3a$export$75ee7c75d68f5b0e)(startFieldValidation.current, e));
                },
                resetValidation: state.resetValidation,
                commitValidation: state.commitValidation
            }
        },
        descriptionProps: descriptionProps,
        errorMessageProps: errorMessageProps,
        calendarProps: {
            autoFocus: true,
            value: state.dateRange,
            onChange: state.setDateRange,
            minValue: props.minValue,
            maxValue: props.maxValue,
            isDisabled: props.isDisabled,
            isReadOnly: props.isReadOnly,
            isDateUnavailable: props.isDateUnavailable,
            allowsNonContiguousRanges: props.allowsNonContiguousRanges,
            defaultFocusedValue: state.dateRange ? undefined : props.placeholderValue,
            isInvalid: state.isInvalid,
            errorMessage: typeof props.errorMessage === 'function' ? props.errorMessage(state.displayValidation) : props.errorMessage || state.displayValidation.validationErrors.join(' ')
        },
        isInvalid: isInvalid,
        validationErrors: validationErrors,
        validationDetails: validationDetails
    };
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 



function $40df3f8667284809$export$d55e7ee900f34e93(props, ref) {
    let { role: role = 'dialog' } = props;
    let titleId = ($bdb11010cef70236$export$b4cc09c592e8fdb8)();
    titleId = props['aria-label'] ? undefined : titleId;
    let isRefocusing = (reactExports.useRef)(false);
    // Focus the dialog itself on mount, unless a child element is already focused.
    (reactExports.useEffect)(()=>{
        if (ref.current && !ref.current.contains(document.activeElement)) {
            ($6a99195332edec8b$export$80f3e147d781571c)(ref.current);
            // Safari on iOS does not move the VoiceOver cursor to the dialog
            // or announce that it has opened until it has rendered. A workaround
            // is to wait for half a second, then blur and re-focus the dialog.
            let timeout = setTimeout(()=>{
                if (document.activeElement === ref.current) {
                    isRefocusing.current = true;
                    if (ref.current) {
                        ref.current.blur();
                        ($6a99195332edec8b$export$80f3e147d781571c)(ref.current);
                    }
                    isRefocusing.current = false;
                }
            }, 500);
            return ()=>{
                clearTimeout(timeout);
            };
        }
    }, [
        ref
    ]);
    ($337b884510726a0d$export$14c98a7594375490)();
    // We do not use aria-modal due to a Safari bug which forces the first focusable element to be focused
    // on mount when inside an iframe, no matter which element we programmatically focus.
    // See https://bugs.webkit.org/show_bug.cgi?id=211934.
    // useModal sets aria-hidden on all elements outside the dialog, so the dialog will behave as a modal
    // even without aria-modal on the dialog itself.
    return {
        dialogProps: {
            ...($65484d02dcb7eb3e$export$457c3d6518dd4c6f)(props, {
                labelable: true
            }),
            role: role,
            tabIndex: -1,
            'aria-labelledby': props['aria-labelledby'] || titleId,
            // Prevent blur events from reaching useOverlay, which may cause
            // popovers to close. Since focus is contained within the dialog,
            // we don't want this to occur due to the above useEffect.
            onBlur: (e)=>{
                if (isRefocusing.current) e.stopPropagation();
            }
        },
        titleProps: {
            id: titleId
        }
    };
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ var $103790afe9474d1c$export$60b7b4bcf3903d8e;
(function(DROP_OPERATION) {
    DROP_OPERATION[DROP_OPERATION["none"] = 0] = "none";
    DROP_OPERATION[DROP_OPERATION["cancel"] = 0] = "cancel";
    DROP_OPERATION[DROP_OPERATION["move"] = 1] = "move";
    DROP_OPERATION[DROP_OPERATION["copy"] = 2] = "copy";
    DROP_OPERATION[DROP_OPERATION["link"] = 4] = "link";
    DROP_OPERATION[DROP_OPERATION["all"] = 7] = "all";
})($103790afe9474d1c$export$60b7b4bcf3903d8e || ($103790afe9474d1c$export$60b7b4bcf3903d8e = {}));
const $103790afe9474d1c$export$9bbdfc78cf083e16 = {
    ...$103790afe9474d1c$export$60b7b4bcf3903d8e,
    copyMove: 3,
    copyLink: 6,
    linkMove: 5,
    all: 7,
    uninitialized: 7
};
const $103790afe9474d1c$export$dd0165308d8bff45 = $103790afe9474d1c$var$invert($103790afe9474d1c$export$9bbdfc78cf083e16);
$103790afe9474d1c$export$dd0165308d8bff45[7] = 'all'; // ensure we don't map to 'uninitialized'.
$103790afe9474d1c$var$invert($103790afe9474d1c$export$60b7b4bcf3903d8e);
const $103790afe9474d1c$export$608ecc6f1b23c35d = {
    none: 'cancel',
    link: 'link',
    copy: 'copy',
    move: 'move'
};
const $103790afe9474d1c$export$5eacb0769d26d3b2 = $103790afe9474d1c$var$invert($103790afe9474d1c$export$608ecc6f1b23c35d);
function $103790afe9474d1c$var$invert(object) {
    let res = {};
    for(let key in object)res[object[key]] = key;
    return res;
}
const $103790afe9474d1c$export$4a7729b856e9a690 = new Set([
    'text/plain',
    'text/uri-list',
    'text/html'
]);
const $103790afe9474d1c$export$fd9f9fc120c5402d = 'application/vnd.react-aria.items+json';
const $103790afe9474d1c$export$f8fc6581787339b3 = 'application/octet-stream';

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 

const $7252cd45fc48c07c$export$dfdf5deeaf27473f = new WeakMap();
const $7252cd45fc48c07c$export$990fced5dfac2637 = Symbol();
function $7252cd45fc48c07c$export$3093291712f09a77(state) {
    let { id: id } = $7252cd45fc48c07c$export$dfdf5deeaf27473f.get(state);
    if (!id) throw new Error('Droppable item outside a droppable collection');
    return id;
}
function $7252cd45fc48c07c$export$7e397efd01d3db27(state) {
    let { ref: ref } = $7252cd45fc48c07c$export$dfdf5deeaf27473f.get(state);
    if (!ref) throw new Error('Droppable item outside a droppable collection');
    return ref;
}
function $7252cd45fc48c07c$export$e1d41611756c6326(items) {
    let types = new Set();
    for (let item of items)for (let type of Object.keys(item))types.add(type);
    return types;
}
function $7252cd45fc48c07c$var$mapModality(modality) {
    if (!modality) modality = 'virtual';
    if (modality === 'pointer') modality = 'virtual';
    if (modality === 'virtual' && typeof window !== 'undefined' && 'ontouchstart' in window) modality = 'touch';
    return modality;
}
function $7252cd45fc48c07c$export$49bac5d6d4b352ea() {
    return $7252cd45fc48c07c$var$mapModality(($507fabe10e71c6fb$export$98e20ec92f614cfe)());
}
function $7252cd45fc48c07c$export$1fb2158d224b542c() {
    return $7252cd45fc48c07c$var$mapModality(($507fabe10e71c6fb$export$630ff653c5ada6a9)());
}
function $7252cd45fc48c07c$export$f9c1490890ddd063(dataTransfer, items) {
    // The data transfer API doesn't support more than one item of a given type at once.
    // In addition, only a small set of types are supported natively for transfer between applications.
    // We allow for both multiple items, as well as multiple representations of a single item.
    // In order to make our API work with the native API, we serialize all items to JSON and
    // store as a single native item. We only need to do this if there is more than one item
    // of the same type, or if an item has more than one representation. Otherwise the native
    // API is sufficient.
    //
    // The DataTransferItemList API also theoretically supports adding files, which would enable
    // dragging binary data out of the browser onto the user's desktop for example. Unfortunately,
    // this does not currently work in any browser, so it is not currently supported by our API.
    // See e.g. https://bugs.chromium.org/p/chromium/issues/detail?id=438479.
    let groupedByType = new Map();
    let needsCustomData = false;
    let customData = [];
    for (let item of items){
        let types = Object.keys(item);
        if (types.length > 1) needsCustomData = true;
        let dataByType = {};
        for (let type of types){
            let typeItems = groupedByType.get(type);
            if (!typeItems) {
                typeItems = [];
                groupedByType.set(type, typeItems);
            } else needsCustomData = true;
            let data = item[type];
            dataByType[type] = data;
            typeItems.push(data);
        }
        customData.push(dataByType);
    }
    for (let [type, items] of groupedByType)if (($103790afe9474d1c$export$4a7729b856e9a690).has(type)) {
        // Only one item of a given type can be set on a data transfer.
        // Join all of the items together separated by newlines.
        let data = items.join('\n');
        dataTransfer.items.add(data, type);
    } else // Set data to the first item so we have access to the list of types.
    dataTransfer.items.add(items[0], type);
    if (needsCustomData) {
        let data = JSON.stringify(customData);
        dataTransfer.items.add(data, ($103790afe9474d1c$export$fd9f9fc120c5402d));
    }
}
class $7252cd45fc48c07c$export$7f04ce188c91447c {
    has(type) {
        if (this.includesUnknownTypes || type === $7252cd45fc48c07c$export$990fced5dfac2637 && this.types.has(($103790afe9474d1c$export$f8fc6581787339b3))) return true;
        return typeof type === 'string' && this.types.has(type);
    }
    constructor(dataTransfer){
        this.types = new Set();
        let hasFiles = false;
        for (let item of dataTransfer.items)if (item.type !== ($103790afe9474d1c$export$fd9f9fc120c5402d)) {
            if (item.kind === 'file') hasFiles = true;
            if (item.type) this.types.add(item.type);
            else // Files with unknown types or extensions that don't map to a known mime type
            // are sometimes exposed as an empty string by the browser. Map to a generic
            // mime type instead. Note that this could also be a directory as there's no
            // way to determine if something is a file or directory until drop.
            this.types.add(($103790afe9474d1c$export$f8fc6581787339b3));
        }
        // In Safari, when dragging files, the dataTransfer.items list is empty, but dataTransfer.types contains "Files".
        // Unfortunately, this doesn't tell us what types of files the user is dragging, so we need to assume that any
        // type the user checks for is included. See https://bugs.webkit.org/show_bug.cgi?id=223517.
        this.includesUnknownTypes = !hasFiles && dataTransfer.types.includes('Files');
    }
}
function $7252cd45fc48c07c$export$d9e760437831f8b3(dataTransfer) {
    let items = [];
    // If our custom drag type is available, use that. This is a JSON serialized
    // representation of all items in the drag, set when there are multiple items
    // of the same type, or an individual item has multiple representations.
    let hasCustomType = false;
    if (dataTransfer.types.includes(($103790afe9474d1c$export$fd9f9fc120c5402d))) try {
        let data = dataTransfer.getData((0, $103790afe9474d1c$export$fd9f9fc120c5402d));
        let parsed = JSON.parse(data);
        for (let item of parsed)items.push({
            kind: 'text',
            types: new Set(Object.keys(item)),
            getText: (type)=>Promise.resolve(item[type])
        });
        hasCustomType = true;
    } catch (e) {
    // ignore
    }
    // Otherwise, map native drag items to items of a single representation.
    if (!hasCustomType) {
        let stringItems = new Map();
        for (let item of dataTransfer.items){
            if (item.kind === 'string') // The data for all formats must be read here because the data transfer gets
            // cleared out after the event handler finishes. If the item has an empty string
            // as a type, the mime type is unknown. Map to a generic mime type instead.
            stringItems.set(item.type || ($103790afe9474d1c$export$f8fc6581787339b3), dataTransfer.getData(item.type));
            else if (item.kind === 'file') {
                // Despite the name, webkitGetAsEntry is also implemented in Firefox and Edge.
                // In the future, we may use getAsFileSystemHandle instead, but that's currently
                // only implemented in Chrome.
                if (typeof item.webkitGetAsEntry === 'function') {
                    let entry = item.webkitGetAsEntry();
                    // eslint-disable-next-line max-depth
                    if (!entry) continue;
                    // eslint-disable-next-line max-depth
                    if (entry.isFile) items.push($7252cd45fc48c07c$var$createFileItem(item.getAsFile()));
                    else if (entry.isDirectory) items.push($7252cd45fc48c07c$var$createDirectoryItem(entry));
                } else // Assume it's a file.
                items.push($7252cd45fc48c07c$var$createFileItem(item.getAsFile()));
            }
        }
        // All string items are different representations of the same item. There's no way to have
        // multiple string items at once in the current DataTransfer API.
        if (stringItems.size > 0) items.push({
            kind: 'text',
            types: new Set(stringItems.keys()),
            getText: (type)=>Promise.resolve(stringItems.get(type))
        });
    }
    return items;
}
function $7252cd45fc48c07c$var$blobToString(blob) {
    if (typeof blob.text === 'function') return blob.text();
    // Safari doesn't have the Blob#text() method yet...
    return new Promise((resolve, reject)=>{
        let reader = new FileReader;
        reader.onload = ()=>{
            resolve(reader.result);
        };
        reader.onerror = reject;
        reader.readAsText(blob);
    });
}
function $7252cd45fc48c07c$var$createFileItem(file) {
    return {
        kind: 'file',
        type: file.type || ($103790afe9474d1c$export$f8fc6581787339b3),
        name: file.name,
        getText: ()=>$7252cd45fc48c07c$var$blobToString(file),
        getFile: ()=>Promise.resolve(file)
    };
}
function $7252cd45fc48c07c$var$createDirectoryItem(entry) {
    return {
        kind: 'directory',
        name: entry.name,
        getEntries: ()=>$7252cd45fc48c07c$var$getEntries(entry)
    };
}
async function* $7252cd45fc48c07c$var$getEntries(item) {
    let reader = item.createReader();
    // We must call readEntries repeatedly because there may be a limit to the
    // number of entries that are returned at once.
    let entries;
    do {
        entries = await new Promise((resolve, reject)=>{
            reader.readEntries(resolve, reject);
        });
        for (let entry of entries){
            if (entry.isFile) {
                let file = await $7252cd45fc48c07c$var$getEntryFile(entry);
                yield $7252cd45fc48c07c$var$createFileItem(file);
            } else if (entry.isDirectory) yield $7252cd45fc48c07c$var$createDirectoryItem(entry);
        }
    }while (entries.length > 0);
}
function $7252cd45fc48c07c$var$getEntryFile(entry) {
    return new Promise((resolve, reject)=>entry.file(resolve, reject));
}
let $7252cd45fc48c07c$export$6ca6700462636d0b = {
    draggingKeys: new Set()
};
function $7252cd45fc48c07c$export$f2be18a910c0caa6(ref) {
    $7252cd45fc48c07c$export$6ca6700462636d0b.draggingCollectionRef = ref;
}
function $7252cd45fc48c07c$export$72cb63bdda528276(keys) {
    $7252cd45fc48c07c$export$6ca6700462636d0b.draggingKeys = keys;
}
function $7252cd45fc48c07c$export$dac8db29d42db9a1(ref) {
    $7252cd45fc48c07c$export$6ca6700462636d0b.dropCollectionRef = ref;
}
function $7252cd45fc48c07c$export$70936501603e6c57() {
    $7252cd45fc48c07c$export$6ca6700462636d0b = {
        draggingKeys: new Set()
    };
}
function $7252cd45fc48c07c$export$6c10d32b362bfa5f(state) {
    $7252cd45fc48c07c$export$6ca6700462636d0b = state;
}
function $7252cd45fc48c07c$export$78bf638634500fa5(ref) {
    let { draggingCollectionRef: draggingCollectionRef, dropCollectionRef: dropCollectionRef } = $7252cd45fc48c07c$export$6ca6700462636d0b;
    return (draggingCollectionRef === null || draggingCollectionRef === void 0 ? void 0 : draggingCollectionRef.current) != null && draggingCollectionRef.current === ((ref === null || ref === void 0 ? void 0 : ref.current) || (dropCollectionRef === null || dropCollectionRef === void 0 ? void 0 : dropCollectionRef.current));
}
let $7252cd45fc48c07c$export$8e6636520ac15722;
function $7252cd45fc48c07c$export$64f52ed7349ddb84(dropEffect) {
    $7252cd45fc48c07c$export$8e6636520ac15722 = dropEffect;
}
let $7252cd45fc48c07c$export$f0130eb70b6347b8 = ($103790afe9474d1c$export$60b7b4bcf3903d8e).none;
function $7252cd45fc48c07c$export$6539bc8c3a0a2d67(o) {
    $7252cd45fc48c07c$export$f0130eb70b6347b8 = o;
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 




let $67560de7c78cb232$var$dropTargets = new Map();
let $67560de7c78cb232$var$dropItems = new Map();
let $67560de7c78cb232$var$dragSession = null;
let $67560de7c78cb232$var$subscriptions = new Set();
function $67560de7c78cb232$export$c28d9fb4a54e471a(target) {
    $67560de7c78cb232$var$dropTargets.set(target.element, target);
    $67560de7c78cb232$var$dragSession === null || $67560de7c78cb232$var$dragSession === void 0 ? void 0 : $67560de7c78cb232$var$dragSession.updateValidDropTargets();
    return ()=>{
        $67560de7c78cb232$var$dropTargets.delete(target.element);
        $67560de7c78cb232$var$dragSession === null || $67560de7c78cb232$var$dragSession === void 0 ? void 0 : $67560de7c78cb232$var$dragSession.updateValidDropTargets();
    };
}
function $67560de7c78cb232$export$aef80212ac99c003(item) {
    $67560de7c78cb232$var$dropItems.set(item.element, item);
    return ()=>{
        $67560de7c78cb232$var$dropItems.delete(item.element);
    };
}
function $67560de7c78cb232$export$549dbcf8649bf3b2(target, stringFormatter) {
    if ($67560de7c78cb232$var$dragSession) throw new Error('Cannot begin dragging while already dragging');
    $67560de7c78cb232$var$dragSession = new $67560de7c78cb232$var$DragSession(target, stringFormatter);
    requestAnimationFrame(()=>{
        $67560de7c78cb232$var$dragSession.setup();
        if (($7252cd45fc48c07c$export$1fb2158d224b542c)() === 'keyboard') $67560de7c78cb232$var$dragSession.next();
    });
    for (let cb of $67560de7c78cb232$var$subscriptions)cb();
}
function $67560de7c78cb232$export$418e185dd3f1b968() {
    let [session, setSession] = (reactExports.useState)($67560de7c78cb232$var$dragSession);
    (reactExports.useEffect)(()=>{
        let cb = ()=>setSession($67560de7c78cb232$var$dragSession);
        $67560de7c78cb232$var$subscriptions.add(cb);
        return ()=>{
            $67560de7c78cb232$var$subscriptions.delete(cb);
        };
    }, []);
    return session;
}
function $67560de7c78cb232$export$403bc76cbf68cf60() {
    return !!$67560de7c78cb232$var$dragSession;
}
function $67560de7c78cb232$var$endDragging() {
    $67560de7c78cb232$var$dragSession = null;
    for (let cb of $67560de7c78cb232$var$subscriptions)cb();
}
const $67560de7c78cb232$var$CANCELED_EVENTS = [
    'pointerdown',
    'pointermove',
    'pointerenter',
    'pointerleave',
    'pointerover',
    'pointerout',
    'pointerup',
    'mousedown',
    'mousemove',
    'mouseenter',
    'mouseleave',
    'mouseover',
    'mouseout',
    'mouseup',
    'touchstart',
    'touchmove',
    'touchend',
    'focusin',
    'focusout'
];
const $67560de7c78cb232$var$CLICK_EVENTS = [
    'pointerup',
    'mouseup',
    'touchend'
];
const $67560de7c78cb232$var$MESSAGES = {
    keyboard: 'dragStartedKeyboard',
    touch: 'dragStartedTouch',
    virtual: 'dragStartedVirtual'
};
class $67560de7c78cb232$var$DragSession {
    setup() {
        document.addEventListener('keydown', this.onKeyDown, true);
        document.addEventListener('keyup', this.onKeyUp, true);
        window.addEventListener('focus', this.onFocus, true);
        window.addEventListener('blur', this.onBlur, true);
        document.addEventListener('click', this.onClick, true);
        document.addEventListener('pointerdown', this.onPointerDown, true);
        for (let event of $67560de7c78cb232$var$CANCELED_EVENTS)document.addEventListener(event, this.cancelEvent, true);
        this.mutationObserver = new MutationObserver(()=>this.updateValidDropTargets());
        this.updateValidDropTargets();
        ($319e236875307eab$export$a9b970dcc4ae71a9)(this.stringFormatter.format($67560de7c78cb232$var$MESSAGES[($7252cd45fc48c07c$export$1fb2158d224b542c)()]));
    }
    teardown() {
        document.removeEventListener('keydown', this.onKeyDown, true);
        document.removeEventListener('keyup', this.onKeyUp, true);
        window.removeEventListener('focus', this.onFocus, true);
        window.removeEventListener('blur', this.onBlur, true);
        document.removeEventListener('click', this.onClick, true);
        document.removeEventListener('pointerdown', this.onPointerDown, true);
        for (let event of $67560de7c78cb232$var$CANCELED_EVENTS)document.removeEventListener(event, this.cancelEvent, true);
        this.mutationObserver.disconnect();
        this.restoreAriaHidden();
    }
    onKeyDown(e) {
        var _this_currentDropTarget;
        this.cancelEvent(e);
        if (e.key === 'Escape') {
            this.cancel();
            return;
        }
        if (e.key === 'Tab' && !(e.metaKey || e.altKey || e.ctrlKey)) {
            if (e.shiftKey) this.previous();
            else this.next();
        }
        if (typeof ((_this_currentDropTarget = this.currentDropTarget) === null || _this_currentDropTarget === void 0 ? void 0 : _this_currentDropTarget.onKeyDown) === 'function') this.currentDropTarget.onKeyDown(e, this.dragTarget);
    }
    onKeyUp(e) {
        this.cancelEvent(e);
        if (e.key === 'Enter') {
            if (e.altKey) this.activate();
            else this.drop();
        }
    }
    onFocus(e) {
        // Prevent focus events, except to the original drag target.
        if (e.target !== this.dragTarget.element) this.cancelEvent(e);
        // Ignore focus events on the window/document (JSDOM). Will be handled in onBlur, below.
        if (!(e.target instanceof HTMLElement) || e.target === this.dragTarget.element) return;
        let dropTarget = this.validDropTargets.find((target)=>target.element === e.target) || this.validDropTargets.find((target)=>target.element.contains(e.target));
        if (!dropTarget) {
            if (this.currentDropTarget) this.currentDropTarget.element.focus();
            else this.dragTarget.element.focus();
            return;
        }
        let item = $67560de7c78cb232$var$dropItems.get(e.target);
        this.setCurrentDropTarget(dropTarget, item);
    }
    onBlur(e) {
        if (e.target !== this.dragTarget.element) this.cancelEvent(e);
        // If nothing is gaining focus, or e.relatedTarget is the window/document (JSDOM),
        // restore focus back to the current drop target if any, or the original drag target.
        if (!e.relatedTarget || !(e.relatedTarget instanceof HTMLElement)) {
            if (this.currentDropTarget) this.currentDropTarget.element.focus();
            else this.dragTarget.element.focus();
        }
    }
    onClick(e) {
        this.cancelEvent(e);
        if (($6a7db85432448f7f$export$60278871457622de)(e) || this.isVirtualClick) {
            if (e.target === this.dragTarget.element) {
                this.cancel();
                return;
            }
            let dropTarget = this.validDropTargets.find((target)=>target.element.contains(e.target));
            if (dropTarget) {
                let item = $67560de7c78cb232$var$dropItems.get(e.target);
                this.setCurrentDropTarget(dropTarget, item);
                this.drop(item);
            }
        }
    }
    onPointerDown(e) {
        // Android Talkback double tap has e.detail = 1 for onClick. Detect the virtual click in onPointerDown before onClick fires
        // so we can properly perform cancel and drop operations.
        this.cancelEvent(e);
        this.isVirtualClick = ($6a7db85432448f7f$export$29bf1b5f2c56cf63)(e);
    }
    cancelEvent(e) {
        var _this_dragTarget;
        // Allow focusin and focusout on the drag target so focus ring works properly.
        if ((e.type === 'focusin' || e.type === 'focusout') && e.target === ((_this_dragTarget = this.dragTarget) === null || _this_dragTarget === void 0 ? void 0 : _this_dragTarget.element)) return;
        // Allow default for events that might cancel a click event
        if (!$67560de7c78cb232$var$CLICK_EVENTS.includes(e.type)) e.preventDefault();
        e.stopPropagation();
        e.stopImmediatePropagation();
    }
    updateValidDropTargets() {
        if (!this.mutationObserver) return;
        this.mutationObserver.disconnect();
        if (this.restoreAriaHidden) this.restoreAriaHidden();
        this.validDropTargets = $67560de7c78cb232$var$findValidDropTargets(this.dragTarget);
        // Shuffle drop target order based on starting drag target.
        if (this.validDropTargets.length > 0) {
            let nearestIndex = this.findNearestDropTarget();
            this.validDropTargets = [
                ...this.validDropTargets.slice(nearestIndex),
                ...this.validDropTargets.slice(0, nearestIndex)
            ];
        }
        if (this.currentDropTarget && !this.validDropTargets.includes(this.currentDropTarget)) this.setCurrentDropTarget(this.validDropTargets[0]);
        // Find valid drop items within collections
        let types = ($7252cd45fc48c07c$export$e1d41611756c6326)(this.dragTarget.items);
        let validDropItems = [
            ...$67560de7c78cb232$var$dropItems.values()
        ].filter((item)=>{
            if (typeof item.getDropOperation === 'function') return item.getDropOperation(types, this.dragTarget.allowedDropOperations) !== 'cancel';
            return true;
        });
        // Filter out drop targets that contain valid items. We don't want to stop hiding elements
        // other than the drop items that exist inside the collection.
        let visibleDropTargets = this.validDropTargets.filter((target)=>!validDropItems.some((item)=>target.element.contains(item.element)));
        this.restoreAriaHidden = ($5e3802645cc19319$export$1c3ebcada18427bf)([
            this.dragTarget.element,
            ...validDropItems.map((item)=>item.element),
            ...visibleDropTargets.map((target)=>target.element)
        ]);
        this.mutationObserver.observe(document.body, {
            subtree: true,
            attributes: true,
            attributeFilter: [
                'aria-hidden'
            ]
        });
    }
    next() {
        if (!this.currentDropTarget) {
            this.setCurrentDropTarget(this.validDropTargets[0]);
            return;
        }
        let index = this.validDropTargets.indexOf(this.currentDropTarget);
        if (index < 0) {
            this.setCurrentDropTarget(this.validDropTargets[0]);
            return;
        }
        // If we've reached the end of the valid drop targets, cycle back to the original drag target.
        // This lets the user cancel the drag in case they don't have an Escape key (e.g. iPad keyboard case).
        if (index === this.validDropTargets.length - 1) {
            if (!this.dragTarget.element.closest('[aria-hidden="true"]')) {
                this.setCurrentDropTarget(null);
                this.dragTarget.element.focus();
            } else this.setCurrentDropTarget(this.validDropTargets[0]);
        } else this.setCurrentDropTarget(this.validDropTargets[index + 1]);
    }
    previous() {
        if (!this.currentDropTarget) {
            this.setCurrentDropTarget(this.validDropTargets[this.validDropTargets.length - 1]);
            return;
        }
        let index = this.validDropTargets.indexOf(this.currentDropTarget);
        if (index < 0) {
            this.setCurrentDropTarget(this.validDropTargets[this.validDropTargets.length - 1]);
            return;
        }
        // If we've reached the start of the valid drop targets, cycle back to the original drag target.
        // This lets the user cancel the drag in case they don't have an Escape key (e.g. iPad keyboard case).
        if (index === 0) {
            if (!this.dragTarget.element.closest('[aria-hidden="true"]')) {
                this.setCurrentDropTarget(null);
                this.dragTarget.element.focus();
            } else this.setCurrentDropTarget(this.validDropTargets[this.validDropTargets.length - 1]);
        } else this.setCurrentDropTarget(this.validDropTargets[index - 1]);
    }
    findNearestDropTarget() {
        let dragTargetRect = this.dragTarget.element.getBoundingClientRect();
        let minDistance = Infinity;
        let nearest = -1;
        for(let i = 0; i < this.validDropTargets.length; i++){
            let dropTarget = this.validDropTargets[i];
            let rect = dropTarget.element.getBoundingClientRect();
            let dx = rect.left - dragTargetRect.left;
            let dy = rect.top - dragTargetRect.top;
            let dist = dx * dx + dy * dy;
            if (dist < minDistance) {
                minDistance = dist;
                nearest = i;
            }
        }
        return nearest;
    }
    setCurrentDropTarget(dropTarget, item) {
        if (dropTarget !== this.currentDropTarget) {
            if (this.currentDropTarget && typeof this.currentDropTarget.onDropExit === 'function') {
                let rect = this.currentDropTarget.element.getBoundingClientRect();
                this.currentDropTarget.onDropExit({
                    type: 'dropexit',
                    x: rect.left + rect.width / 2,
                    y: rect.top + rect.height / 2
                });
            }
            this.currentDropTarget = dropTarget;
            if (dropTarget) {
                if (typeof dropTarget.onDropEnter === 'function') {
                    let rect = dropTarget.element.getBoundingClientRect();
                    dropTarget.onDropEnter({
                        type: 'dropenter',
                        x: rect.left + rect.width / 2,
                        y: rect.top + rect.height / 2
                    }, this.dragTarget);
                }
                if (!item) dropTarget === null || dropTarget === void 0 ? void 0 : dropTarget.element.focus();
            }
        }
        if (item !== this.currentDropItem) {
            if (item && typeof this.currentDropTarget.onDropTargetEnter === 'function') this.currentDropTarget.onDropTargetEnter(item === null || item === void 0 ? void 0 : item.target);
            item === null || item === void 0 ? void 0 : item.element.focus();
            this.currentDropItem = item;
            // Announce first drop target after drag start announcement finishes.
            // Otherwise, it will never get announced because drag start announcement is assertive.
            if (!this.initialFocused) {
                ($319e236875307eab$export$a9b970dcc4ae71a9)(item === null || item === void 0 ? void 0 : item.element.getAttribute('aria-label'), 'polite');
                this.initialFocused = true;
            }
        }
    }
    end() {
        this.teardown();
        $67560de7c78cb232$var$endDragging();
        if (typeof this.dragTarget.onDragEnd === 'function') {
            let target = this.currentDropTarget && this.dropOperation !== 'cancel' ? this.currentDropTarget : this.dragTarget;
            let rect = target.element.getBoundingClientRect();
            this.dragTarget.onDragEnd({
                type: 'dragend',
                x: rect.x + rect.width / 2,
                y: rect.y + rect.height / 2,
                dropOperation: this.dropOperation || 'cancel'
            });
        }
        if (this.currentDropTarget && !this.currentDropTarget.preventFocusOnDrop) // Re-trigger focus event on active element, since it will not have received it during dragging (see cancelEvent).
        // This corrects state such as whether focus ring should appear.
        // useDroppableCollection handles this itself, so this is only for standalone drop zones.
        document.activeElement.dispatchEvent(new FocusEvent('focusin', {
            bubbles: true
        }));
        this.setCurrentDropTarget(null);
    }
    cancel() {
        this.setCurrentDropTarget(null);
        this.end();
        if (!this.dragTarget.element.closest('[aria-hidden="true"]')) this.dragTarget.element.focus();
        ($319e236875307eab$export$a9b970dcc4ae71a9)(this.stringFormatter.format('dropCanceled'));
    }
    drop(item) {
        if (!this.currentDropTarget) {
            this.cancel();
            return;
        }
        if (typeof (item === null || item === void 0 ? void 0 : item.getDropOperation) === 'function') {
            let types = ($7252cd45fc48c07c$export$e1d41611756c6326)(this.dragTarget.items);
            this.dropOperation = item.getDropOperation(types, this.dragTarget.allowedDropOperations);
        } else if (typeof this.currentDropTarget.getDropOperation === 'function') {
            let types = ($7252cd45fc48c07c$export$e1d41611756c6326)(this.dragTarget.items);
            this.dropOperation = this.currentDropTarget.getDropOperation(types, this.dragTarget.allowedDropOperations);
        } else // TODO: show menu ??
        this.dropOperation = this.dragTarget.allowedDropOperations[0];
        if (typeof this.currentDropTarget.onDrop === 'function') {
            let items = this.dragTarget.items.map((item)=>({
                    kind: 'text',
                    types: new Set(Object.keys(item)),
                    getText: (type)=>Promise.resolve(item[type])
                }));
            let rect = this.currentDropTarget.element.getBoundingClientRect();
            this.currentDropTarget.onDrop({
                type: 'drop',
                x: rect.left + rect.width / 2,
                y: rect.top + rect.height / 2,
                items: items,
                dropOperation: this.dropOperation
            }, item === null || item === void 0 ? void 0 : item.target);
        }
        this.end();
        ($319e236875307eab$export$a9b970dcc4ae71a9)(this.stringFormatter.format('dropComplete'));
    }
    activate() {
        if (this.currentDropTarget && typeof this.currentDropTarget.onDropActivate === 'function') {
            let rect = this.currentDropTarget.element.getBoundingClientRect();
            this.currentDropTarget.onDropActivate({
                type: 'dropactivate',
                x: rect.left + rect.width / 2,
                y: rect.top + rect.height / 2
            });
        }
    }
    constructor(target, stringFormatter){
        this.dragTarget = target;
        this.stringFormatter = stringFormatter;
        this.onKeyDown = this.onKeyDown.bind(this);
        this.onKeyUp = this.onKeyUp.bind(this);
        this.onFocus = this.onFocus.bind(this);
        this.onBlur = this.onBlur.bind(this);
        this.onClick = this.onClick.bind(this);
        this.onPointerDown = this.onPointerDown.bind(this);
        this.cancelEvent = this.cancelEvent.bind(this);
        this.initialFocused = false;
    }
}
function $67560de7c78cb232$var$findValidDropTargets(options) {
    let types = ($7252cd45fc48c07c$export$e1d41611756c6326)(options.items);
    return [
        ...$67560de7c78cb232$var$dropTargets.values()
    ].filter((target)=>{
        if (target.element.closest('[aria-hidden="true"]')) return false;
        if (typeof target.getDropOperation === 'function') return target.getDropOperation(types, options.allowedDropOperations) !== 'cancel';
        return true;
    });
}

var $7dfcac1a0c98c789$exports = {};
$7dfcac1a0c98c789$exports = {
    "dragDescriptionKeyboard": `\u{627}\u{636}\u{63A}\u{637} Enter \u{644}\u{628}\u{62F}\u{621} \u{627}\u{644}\u{633}\u{62D}\u{628}.`,
    "dragDescriptionKeyboardAlt": `\u{627}\u{636}\u{63A}\u{637} \u{639}\u{644}\u{649} Alt + Enter \u{644}\u{628}\u{62F}\u{621} \u{627}\u{644}\u{633}\u{62D}\u{628}.`,
    "dragDescriptionLongPress": `\u{627}\u{636}\u{63A}\u{637} \u{628}\u{627}\u{633}\u{62A}\u{645}\u{631}\u{627}\u{631} \u{644}\u{628}\u{62F}\u{621} \u{627}\u{644}\u{633}\u{62D}\u{628}.`,
    "dragDescriptionTouch": `\u{627}\u{636}\u{63A}\u{637} \u{645}\u{631}\u{62A}\u{64A}\u{646} \u{644}\u{628}\u{62F}\u{621} \u{627}\u{644}\u{633}\u{62D}\u{628}.`,
    "dragDescriptionVirtual": `\u{627}\u{646}\u{642}\u{631} \u{644}\u{628}\u{62F}\u{621} \u{627}\u{644}\u{633}\u{62D}\u{628}.`,
    "dragItem": (args)=>`\u{627}\u{633}\u{62D}\u{628} ${args.itemText}`,
    "dragSelectedItems": (args, formatter)=>`\u{627}\u{633}\u{62D}\u{628} ${formatter.plural(args.count, {
            one: ()=>`${formatter.number(args.count)} \u{639}\u{646}\u{635}\u{631} \u{645}\u{62D}\u{62F}\u{62F}`,
            other: ()=>`${formatter.number(args.count)} \u{639}\u{646}\u{627}\u{635}\u{631} \u{645}\u{62D}\u{62F}\u{62F}\u{629}`
        })}`,
    "dragSelectedKeyboard": (args, formatter)=>`\u{627}\u{636}\u{63A}\u{637} \u{639}\u{644}\u{649} Enter \u{644}\u{644}\u{633}\u{62D}\u{628} ${formatter.plural(args.count, {
            one: `\u{639}\u{62F}\u{62F} \u{627}\u{644}\u{639}\u{646}\u{627}\u{635}\u{631} \u{627}\u{644}\u{645}\u{62E}\u{62A}\u{627}\u{631}\u{629}`,
            other: `\u{639}\u{62F}\u{62F} \u{627}\u{644}\u{639}\u{646}\u{627}\u{635}\u{631} \u{627}\u{644}\u{645}\u{62E}\u{62A}\u{627}\u{631}\u{629}`
        })}.`,
    "dragSelectedKeyboardAlt": (args, formatter)=>`\u{627}\u{636}\u{63A}\u{637} \u{639}\u{644}\u{649} \u{645}\u{641}\u{62A}\u{627}\u{62D}\u{64A} Alt + Enter \u{644}\u{644}\u{633}\u{62D}\u{628} ${formatter.plural(args.count, {
            one: `\u{639}\u{62F}\u{62F} \u{627}\u{644}\u{639}\u{646}\u{627}\u{635}\u{631} \u{627}\u{644}\u{645}\u{62E}\u{62A}\u{627}\u{631}\u{629}`,
            other: `\u{639}\u{62F}\u{62F} \u{627}\u{644}\u{639}\u{646}\u{627}\u{635}\u{631} \u{627}\u{644}\u{645}\u{62E}\u{62A}\u{627}\u{631}\u{629}`
        })}.`,
    "dragSelectedLongPress": (args, formatter)=>`\u{627}\u{636}\u{63A}\u{637} \u{628}\u{627}\u{633}\u{62A}\u{645}\u{631}\u{627}\u{631} \u{644}\u{644}\u{633}\u{62D}\u{628} ${formatter.plural(args.count, {
            one: `\u{639}\u{62F}\u{62F} \u{627}\u{644}\u{639}\u{646}\u{627}\u{635}\u{631} \u{627}\u{644}\u{645}\u{62E}\u{62A}\u{627}\u{631}\u{629}`,
            other: `\u{639}\u{62F}\u{62F} \u{627}\u{644}\u{639}\u{646}\u{627}\u{635}\u{631} \u{627}\u{644}\u{645}\u{62E}\u{62A}\u{627}\u{631}\u{629}`
        })}.`,
    "dragStartedKeyboard": `\u{628}\u{62F}\u{623} \u{627}\u{644}\u{633}\u{62D}\u{628}. \u{627}\u{636}\u{63A}\u{637} Tab \u{644}\u{644}\u{627}\u{646}\u{62A}\u{642}\u{627}\u{644} \u{625}\u{644}\u{649} \u{645}\u{648}\u{636}\u{639} \u{627}\u{644}\u{625}\u{641}\u{644}\u{627}\u{62A}\u{60C} \u{62B}\u{645} \u{627}\u{636}\u{63A}\u{637} Enter \u{644}\u{644}\u{625}\u{641}\u{644}\u{627}\u{62A}\u{60C} \u{623}\u{648} \u{627}\u{636}\u{63A}\u{637} Escape \u{644}\u{644}\u{625}\u{644}\u{63A}\u{627}\u{621}.`,
    "dragStartedTouch": `\u{628}\u{62F}\u{623} \u{627}\u{644}\u{633}\u{62D}\u{628}. \u{627}\u{646}\u{62A}\u{642}\u{644} \u{625}\u{644}\u{649} \u{645}\u{648}\u{636}\u{639} \u{627}\u{644}\u{625}\u{641}\u{644}\u{627}\u{62A}\u{60C} \u{62B}\u{645} \u{627}\u{636}\u{63A}\u{637} \u{645}\u{631}\u{62A}\u{64A}\u{646} \u{644}\u{644}\u{625}\u{641}\u{644}\u{627}\u{62A}.`,
    "dragStartedVirtual": `\u{628}\u{62F}\u{623} \u{627}\u{644}\u{633}\u{62D}\u{628}. \u{627}\u{646}\u{62A}\u{642}\u{644} \u{625}\u{644}\u{649} \u{645}\u{643}\u{627}\u{646} \u{627}\u{644}\u{625}\u{641}\u{644}\u{627}\u{62A}\u{60C} \u{62B}\u{645} \u{627}\u{646}\u{642}\u{631} \u{623}\u{648} \u{627}\u{636}\u{63A}\u{637} Enter \u{644}\u{644}\u{625}\u{641}\u{644}\u{627}\u{62A}.`,
    "dropCanceled": `\u{62A}\u{645} \u{625}\u{644}\u{63A}\u{627}\u{621} \u{627}\u{644}\u{625}\u{641}\u{644}\u{627}\u{62A}.`,
    "dropComplete": `\u{627}\u{643}\u{62A}\u{645}\u{644} \u{627}\u{644}\u{625}\u{641}\u{644}\u{627}\u{62A}.`,
    "dropDescriptionKeyboard": `\u{627}\u{636}\u{63A}\u{637} Enter \u{644}\u{644}\u{625}\u{641}\u{644}\u{627}\u{62A}. \u{627}\u{636}\u{63A}\u{637} Escape \u{644}\u{625}\u{644}\u{63A}\u{627}\u{621} \u{627}\u{644}\u{633}\u{62D}\u{628}.`,
    "dropDescriptionTouch": `\u{627}\u{636}\u{63A}\u{637} \u{645}\u{631}\u{62A}\u{64A}\u{646} \u{644}\u{644}\u{625}\u{641}\u{644}\u{627}\u{62A}.`,
    "dropDescriptionVirtual": `\u{627}\u{646}\u{642}\u{631} \u{644}\u{644}\u{625}\u{641}\u{644}\u{627}\u{62A}.`,
    "dropIndicator": `\u{645}\u{624}\u{634}\u{631} \u{627}\u{644}\u{625}\u{641}\u{644}\u{627}\u{62A}`,
    "dropOnItem": (args)=>`\u{625}\u{641}\u{644}\u{627}\u{62A} ${args.itemText}`,
    "dropOnRoot": `\u{627}\u{644}\u{625}\u{641}\u{644}\u{627}\u{62A}`,
    "endDragKeyboard": `\u{627}\u{644}\u{633}\u{62D}\u{628}. \u{627}\u{636}\u{63A}\u{637} Enter \u{644}\u{625}\u{644}\u{63A}\u{627}\u{621} \u{627}\u{644}\u{633}\u{62D}\u{628}.`,
    "endDragTouch": `\u{627}\u{644}\u{633}\u{62D}\u{628}. \u{627}\u{636}\u{63A}\u{637} \u{645}\u{631}\u{62A}\u{64A}\u{646} \u{644}\u{625}\u{644}\u{63A}\u{627}\u{621} \u{627}\u{644}\u{633}\u{62D}\u{628}.`,
    "endDragVirtual": `\u{627}\u{644}\u{633}\u{62D}\u{628}. \u{627}\u{646}\u{642}\u{631} \u{644}\u{625}\u{644}\u{63A}\u{627}\u{621} \u{627}\u{644}\u{633}\u{62D}\u{628}.`,
    "insertAfter": (args)=>`\u{623}\u{62F}\u{62E}\u{644} \u{628}\u{639}\u{62F} ${args.itemText}`,
    "insertBefore": (args)=>`\u{623}\u{62F}\u{62E}\u{644} \u{642}\u{628}\u{644} ${args.itemText}`,
    "insertBetween": (args)=>`\u{623}\u{62F}\u{62E}\u{644} \u{628}\u{64A}\u{646} ${args.beforeItemText} \u{648} ${args.afterItemText}`
};

var $f311c26671219eca$exports = {};
$f311c26671219eca$exports = {
    "dragDescriptionKeyboard": `\u{41D}\u{430}\u{442}\u{438}\u{441}\u{43D}\u{435}\u{442}\u{435} \u{201E}Enter\u{201C}, \u{437}\u{430} \u{434}\u{430} \u{437}\u{430}\u{43F}\u{43E}\u{447}\u{43D}\u{435}\u{442}\u{435} \u{434}\u{430} \u{43F}\u{43B}\u{44A}\u{437}\u{433}\u{430}\u{442}\u{435}.`,
    "dragDescriptionKeyboardAlt": `\u{41D}\u{430}\u{442}\u{438}\u{441}\u{43D}\u{435}\u{442}\u{435} Alt + Enter, \u{437}\u{430} \u{434}\u{430} \u{437}\u{430}\u{43F}\u{43E}\u{447}\u{43D}\u{435}\u{442}\u{435} \u{434}\u{430} \u{43F}\u{43B}\u{44A}\u{437}\u{433}\u{430}\u{442}\u{435}.`,
    "dragDescriptionLongPress": `\u{41D}\u{430}\u{442}\u{438}\u{441}\u{43D}\u{435}\u{442}\u{435} \u{43F}\u{440}\u{43E}\u{434}\u{44A}\u{43B}\u{436}\u{438}\u{442}\u{435}\u{43B}\u{43D}\u{43E}, \u{437}\u{430} \u{434}\u{430} \u{437}\u{430}\u{43F}\u{43E}\u{447}\u{43D}\u{435}\u{442}\u{435} \u{434}\u{430} \u{43F}\u{43B}\u{44A}\u{437}\u{433}\u{430}\u{442}\u{435}.`,
    "dragDescriptionTouch": `\u{41D}\u{430}\u{442}\u{438}\u{441}\u{43D}\u{435}\u{442}\u{435} \u{434}\u{432}\u{443}\u{43A}\u{440}\u{430}\u{442}\u{43D}\u{43E}, \u{437}\u{430} \u{434}\u{430} \u{437}\u{430}\u{43F}\u{43E}\u{447}\u{43D}\u{435}\u{442}\u{435} \u{434}\u{430} \u{43F}\u{43B}\u{44A}\u{437}\u{433}\u{430}\u{442}\u{435}.`,
    "dragDescriptionVirtual": `\u{429}\u{440}\u{430}\u{43A}\u{43D}\u{435}\u{442}\u{435}, \u{437}\u{430} \u{434}\u{430} \u{437}\u{430}\u{43F}\u{43E}\u{447}\u{43D}\u{435}\u{442}\u{435} \u{434}\u{430} \u{43F}\u{43B}\u{44A}\u{437}\u{433}\u{430}\u{442}\u{435}.`,
    "dragItem": (args)=>`\u{41F}\u{43B}\u{44A}\u{437}\u{43D}\u{438} ${args.itemText}`,
    "dragSelectedItems": (args, formatter)=>`\u{41F}\u{43B}\u{44A}\u{437}\u{43D}\u{438} ${formatter.plural(args.count, {
            one: ()=>`${formatter.number(args.count)} \u{438}\u{437}\u{431}\u{440}\u{430}\u{43D} \u{435}\u{43B}\u{435}\u{43C}\u{435}\u{43D}\u{442}`,
            other: ()=>`${formatter.number(args.count)} \u{438}\u{437}\u{431}\u{440}\u{430}\u{43D}\u{438} \u{435}\u{43B}\u{435}\u{43C}\u{435}\u{43D}\u{442}\u{430}`
        })}`,
    "dragSelectedKeyboard": (args, formatter)=>`\u{41D}\u{430}\u{442}\u{438}\u{441}\u{43D}\u{435}\u{442}\u{435} Enter, \u{437}\u{430} \u{434}\u{430} \u{43F}\u{43B}\u{44A}\u{437}\u{43D}\u{435}\u{442}\u{435} ${formatter.plural(args.count, {
            one: ()=>`${formatter.number(args.count)} \u{438}\u{437}\u{431}\u{440}\u{430}\u{43D} \u{435}\u{43B}\u{435}\u{43C}\u{435}\u{43D}\u{442}`,
            other: ()=>`${formatter.number(args.count)} \u{438}\u{437}\u{431}\u{440}\u{430}\u{43D}\u{438} \u{435}\u{43B}\u{435}\u{43C}\u{435}\u{43D}\u{442}\u{438}`
        })}.`,
    "dragSelectedKeyboardAlt": (args, formatter)=>`\u{41D}\u{430}\u{442}\u{438}\u{441}\u{43D}\u{435}\u{442}\u{435} Alt \u{438} Enter, \u{437}\u{430} \u{434}\u{430} \u{43F}\u{43B}\u{44A}\u{437}\u{43D}\u{435}\u{442}\u{435} ${formatter.plural(args.count, {
            one: ()=>`${formatter.number(args.count)} \u{438}\u{437}\u{431}\u{440}\u{430}\u{43D} \u{435}\u{43B}\u{435}\u{43C}\u{435}\u{43D}\u{442}`,
            other: ()=>`${formatter.number(args.count)} \u{438}\u{437}\u{431}\u{440}\u{430}\u{43D}\u{438} \u{435}\u{43B}\u{435}\u{43C}\u{435}\u{43D}\u{442}\u{438}`
        })}.`,
    "dragSelectedLongPress": (args, formatter)=>`\u{41D}\u{430}\u{442}\u{438}\u{441}\u{43D}\u{435}\u{442}\u{435} \u{43F}\u{440}\u{43E}\u{434}\u{44A}\u{43B}\u{436}\u{438}\u{442}\u{435}\u{43B}\u{43D}\u{43E}, \u{437}\u{430} \u{434}\u{430} \u{43F}\u{43B}\u{44A}\u{437}\u{43D}\u{435}\u{442}\u{435} ${formatter.plural(args.count, {
            one: ()=>`${formatter.number(args.count)} \u{438}\u{437}\u{431}\u{440}\u{430}\u{43D} \u{435}\u{43B}\u{435}\u{43C}\u{435}\u{43D}\u{442}`,
            other: ()=>`${formatter.number(args.count)} \u{438}\u{437}\u{431}\u{440}\u{430}\u{43D}\u{438} \u{435}\u{43B}\u{435}\u{43C}\u{435}\u{43D}\u{442}\u{438}`
        })}.`,
    "dragStartedKeyboard": `\u{417}\u{430}\u{43F}\u{43E}\u{447}\u{43D}\u{430} \u{43F}\u{43B}\u{44A}\u{437}\u{433}\u{430}\u{43D}\u{435}. \u{41D}\u{430}\u{442}\u{438}\u{441}\u{43D}\u{435}\u{442}\u{435} \u{201E}Tab\u{201C}, \u{437}\u{430} \u{434}\u{430} \u{441}\u{435} \u{43F}\u{440}\u{438}\u{434}\u{432}\u{438}\u{436}\u{438}\u{442}\u{435} \u{434}\u{43E} \u{446}\u{435}\u{43B}\u{442}\u{430}, \u{441}\u{43B}\u{435}\u{434} \u{43A}\u{43E}\u{435}\u{442}\u{43E} \u{43D}\u{430}\u{442}\u{438}\u{441}\u{43D}\u{435}\u{442}\u{435} \u{201E}Enter\u{201C} \u{437}\u{430} \u{43F}\u{443}\u{441}\u{43A}\u{430}\u{43D}\u{435} \u{438}\u{43B}\u{438} \u{43D}\u{430}\u{442}\u{438}\u{441}\u{43D}\u{435}\u{442}\u{435} \u{201E}Escape\u{201C} \u{437}\u{430} \u{43E}\u{442}\u{43C}\u{44F}\u{43D}\u{430}.`,
    "dragStartedTouch": `\u{417}\u{430}\u{43F}\u{43E}\u{447}\u{43D}\u{430} \u{43F}\u{43B}\u{44A}\u{437}\u{433}\u{430}\u{43D}\u{435}. \u{41F}\u{440}\u{438}\u{434}\u{432}\u{438}\u{436}\u{435}\u{442}\u{435} \u{441}\u{435} \u{434}\u{43E} \u{446}\u{435}\u{43B}\u{442}\u{430}, \u{441}\u{43B}\u{435}\u{434} \u{43A}\u{43E}\u{435}\u{442}\u{43E} \u{43D}\u{430}\u{442}\u{438}\u{441}\u{43D}\u{435}\u{442}\u{435} \u{434}\u{432}\u{443}\u{43A}\u{440}\u{430}\u{442}\u{43D}\u{43E}, \u{437}\u{430} \u{434}\u{430} \u{43F}\u{443}\u{441}\u{43D}\u{435}\u{442}\u{435}.`,
    "dragStartedVirtual": `\u{417}\u{430}\u{43F}\u{43E}\u{447}\u{43D}\u{430} \u{43F}\u{43B}\u{44A}\u{437}\u{433}\u{430}\u{43D}\u{435}. \u{41F}\u{440}\u{438}\u{434}\u{432}\u{438}\u{436}\u{435}\u{442}\u{435} \u{441}\u{435} \u{434}\u{43E} \u{446}\u{435}\u{43B}\u{442}\u{430}, \u{441}\u{43B}\u{435}\u{434} \u{43A}\u{43E}\u{435}\u{442}\u{43E} \u{449}\u{440}\u{430}\u{43A}\u{43D}\u{435}\u{442}\u{435} \u{438}\u{43B}\u{438} \u{43D}\u{430}\u{442}\u{438}\u{441}\u{43D}\u{435}\u{442}\u{435} \u{201E}Enter\u{201C} \u{437}\u{430} \u{43F}\u{443}\u{441}\u{43A}\u{430}\u{43D}\u{435}.`,
    "dropCanceled": `\u{41F}\u{443}\u{441}\u{43A}\u{430}\u{43D}\u{435}\u{442}\u{43E} \u{435} \u{43E}\u{442}\u{43C}\u{435}\u{43D}\u{435}\u{43D}\u{43E}.`,
    "dropComplete": `\u{41F}\u{443}\u{441}\u{43A}\u{430}\u{43D}\u{435}\u{442}\u{43E} \u{435} \u{437}\u{430}\u{432}\u{44A}\u{440}\u{448}\u{435}\u{43D}\u{43E}.`,
    "dropDescriptionKeyboard": `\u{41D}\u{430}\u{442}\u{438}\u{441}\u{43D}\u{435}\u{442}\u{435} \u{201E}Enter\u{201C} \u{437}\u{430} \u{43F}\u{443}\u{441}\u{43A}\u{430}\u{43D}\u{435}. \u{41D}\u{430}\u{442}\u{438}\u{441}\u{43D}\u{435}\u{442}\u{435} \u{201E}Escape\u{201C} \u{437}\u{430} \u{43E}\u{442}\u{43C}\u{44F}\u{43D}\u{430} \u{43D}\u{430} \u{43F}\u{43B}\u{44A}\u{437}\u{433}\u{430}\u{43D}\u{435}\u{442}\u{43E}.`,
    "dropDescriptionTouch": `\u{41D}\u{430}\u{442}\u{438}\u{441}\u{43D}\u{435}\u{442}\u{435} \u{434}\u{432}\u{443}\u{43A}\u{440}\u{430}\u{442}\u{43D}\u{43E} \u{437}\u{430} \u{43F}\u{443}\u{441}\u{43A}\u{430}\u{43D}\u{435}.`,
    "dropDescriptionVirtual": `\u{429}\u{440}\u{430}\u{43A}\u{43D}\u{435}\u{442}\u{435} \u{437}\u{430} \u{43F}\u{443}\u{441}\u{43A}\u{430}\u{43D}\u{435}.`,
    "dropIndicator": `\u{438}\u{43D}\u{434}\u{438}\u{43A}\u{430}\u{442}\u{43E}\u{440} \u{437}\u{430} \u{43F}\u{443}\u{441}\u{43A}\u{430}\u{43D}\u{435}`,
    "dropOnItem": (args)=>`\u{41F}\u{443}\u{441}\u{43D}\u{438} \u{432}\u{44A}\u{440}\u{445}\u{443} ${args.itemText}`,
    "dropOnRoot": `\u{41F}\u{443}\u{441}\u{43D}\u{438} \u{432}\u{44A}\u{440}\u{445}\u{443}`,
    "endDragKeyboard": `\u{41F}\u{43B}\u{44A}\u{437}\u{433}\u{430}\u{43D}\u{435}. \u{41D}\u{430}\u{442}\u{438}\u{441}\u{43D}\u{435}\u{442}\u{435} \u{201E}Enter\u{201C} \u{437}\u{430} \u{43E}\u{442}\u{43C}\u{44F}\u{43D}\u{430} \u{43D}\u{430} \u{43F}\u{43B}\u{44A}\u{437}\u{433}\u{430}\u{43D}\u{435}\u{442}\u{43E}.`,
    "endDragTouch": `\u{41F}\u{43B}\u{44A}\u{437}\u{433}\u{430}\u{43D}\u{435}. \u{41D}\u{430}\u{442}\u{438}\u{441}\u{43D}\u{435}\u{442}\u{435} \u{434}\u{432}\u{443}\u{43A}\u{440}\u{430}\u{442}\u{43D}\u{43E} \u{437}\u{430} \u{43E}\u{442}\u{43C}\u{44F}\u{43D}\u{430} \u{43D}\u{430} \u{43F}\u{43B}\u{44A}\u{437}\u{433}\u{430}\u{43D}\u{435}\u{442}\u{43E}.`,
    "endDragVirtual": `\u{41F}\u{43B}\u{44A}\u{437}\u{433}\u{430}\u{43D}\u{435}. \u{429}\u{440}\u{430}\u{43A}\u{43D}\u{435}\u{442}\u{435} \u{437}\u{430} \u{43E}\u{442}\u{43C}\u{44F}\u{43D}\u{430}.`,
    "insertAfter": (args)=>`\u{412}\u{43C}\u{44A}\u{43A}\u{43D}\u{438} \u{441}\u{43B}\u{435}\u{434} ${args.itemText}`,
    "insertBefore": (args)=>`\u{412}\u{43C}\u{44A}\u{43A}\u{43D}\u{438} \u{43F}\u{440}\u{435}\u{434}\u{438} ${args.itemText}`,
    "insertBetween": (args)=>`\u{412}\u{43C}\u{44A}\u{43A}\u{43D}\u{438} \u{43C}\u{435}\u{436}\u{434}\u{443} ${args.beforeItemText} \u{438} ${args.afterItemText}`
};

var $1aa4ade186550f72$exports = {};
$1aa4ade186550f72$exports = {
    "dragDescriptionKeyboard": `Stisknut\xedm kl\xe1vesy Enter za\u{10D}nete s p\u{159}etahov\xe1n\xedm.`,
    "dragDescriptionKeyboardAlt": `Stisknut\xedm Alt + Enter zah\xe1j\xedte p\u{159}etahov\xe1n\xed.`,
    "dragDescriptionLongPress": `Dlouh\xfdm stisknut\xedm zah\xe1j\xedte p\u{159}etahov\xe1n\xed.`,
    "dragDescriptionTouch": `Poklep\xe1n\xedm za\u{10D}nete s p\u{159}etahov\xe1n\xedm.`,
    "dragDescriptionVirtual": `Kliknut\xedm za\u{10D}nete s p\u{159}etahov\xe1n\xedm.`,
    "dragItem": (args)=>`P\u{159}et\xe1hnout ${args.itemText}`,
    "dragSelectedItems": (args, formatter)=>`P\u{159}et\xe1hnout ${formatter.plural(args.count, {
            one: ()=>`${formatter.number(args.count)} vybranou polo\u{17E}ku`,
            few: ()=>`${formatter.number(args.count)} vybran\xe9 polo\u{17E}ky`,
            other: ()=>`${formatter.number(args.count)} vybran\xfdch polo\u{17E}ek`
        })}`,
    "dragSelectedKeyboard": (args, formatter)=>`Stisknut\xedm kl\xe1vesy Enter p\u{159}et\xe1hn\u{11B}te ${formatter.plural(args.count, {
            one: ()=>`${formatter.number(args.count)} vybranou polo\u{17E}ku`,
            other: ()=>`${formatter.number(args.count)} vybran\xe9 polo\u{17E}ky`
        })}.`,
    "dragSelectedKeyboardAlt": (args, formatter)=>`Stisknut\xedm Alt + Enter p\u{159}et\xe1hn\u{11B}te ${formatter.plural(args.count, {
            one: ()=>`${formatter.number(args.count)} vybranou polo\u{17E}ku`,
            other: ()=>`${formatter.number(args.count)} vybran\xe9 polo\u{17E}ky`
        })}.`,
    "dragSelectedLongPress": (args, formatter)=>`Dlouh\xfdm stisknut\xedm p\u{159}et\xe1hnete ${formatter.plural(args.count, {
            one: ()=>`${formatter.number(args.count)} vybranou polo\u{17E}ku`,
            other: ()=>`${formatter.number(args.count)} vybran\xe9 polo\u{17E}ky`
        })}.`,
    "dragStartedKeyboard": `Za\u{10D}n\u{11B}te s p\u{159}etahov\xe1n\xedm. Po stisknut\xed kl\xe1vesy Tab najd\u{11B}te po\u{17E}adovan\xfd c\xedl a stisknut\xedm kl\xe1vesy Enter p\u{159}eta\u{17E}en\xed dokon\u{10D}ete nebo stisknut\xedm kl\xe1vesy Esc akci zru\u{161}te.`,
    "dragStartedTouch": `Za\u{10D}n\u{11B}te s p\u{159}etahov\xe1n\xedm. Najd\u{11B}te po\u{17E}adovan\xfd c\xedl a poklep\xe1n\xedm p\u{159}eta\u{17E}en\xed dokon\u{10D}ete.`,
    "dragStartedVirtual": `Za\u{10D}n\u{11B}te s p\u{159}etahov\xe1n\xedm. Najd\u{11B}te po\u{17E}adovan\xfd c\xedl a kliknut\xedm nebo stisknut\xedm kl\xe1vesy Enter p\u{159}eta\u{17E}en\xed dokon\u{10D}ete.`,
    "dropCanceled": `P\u{159}eta\u{17E}en\xed bylo zru\u{161}eno.`,
    "dropComplete": `P\u{159}eta\u{17E}en\xed bylo dokon\u{10D}eno.`,
    "dropDescriptionKeyboard": `Stisknut\xedm kl\xe1vesy Enter p\u{159}eta\u{17E}en\xed dokon\u{10D}ete nebo stisknut\xedm kl\xe1vesy Esc akci zru\u{161}te.`,
    "dropDescriptionTouch": `Poklep\xe1n\xedm p\u{159}eta\u{17E}en\xed dokon\u{10D}ete.`,
    "dropDescriptionVirtual": `Kliknut\xedm objekt p\u{159}et\xe1hn\u{11B}te.`,
    "dropIndicator": `indik\xe1tor p\u{159}eta\u{17E}en\xed`,
    "dropOnItem": (args)=>`P\u{159}et\xe1hnout na ${args.itemText}`,
    "dropOnRoot": `P\u{159}et\xe1hnout na`,
    "endDragKeyboard": `Prob\xedh\xe1 p\u{159}etahov\xe1n\xed. Stisknut\xedm kl\xe1vesy Enter p\u{159}eta\u{17E}en\xed zru\u{161}\xedte.`,
    "endDragTouch": `Prob\xedh\xe1 p\u{159}etahov\xe1n\xed. Poklep\xe1n\xedm p\u{159}eta\u{17E}en\xed zru\u{161}\xedte.`,
    "endDragVirtual": `Prob\xedh\xe1 p\u{159}etahov\xe1n\xed. Kliknut\xedm p\u{159}eta\u{17E}en\xed zru\u{161}\xedte.`,
    "insertAfter": (args)=>`Vlo\u{17E}it za ${args.itemText}`,
    "insertBefore": (args)=>`Vlo\u{17E}it p\u{159}ed ${args.itemText}`,
    "insertBetween": (args)=>`Vlo\u{17E}it mezi ${args.beforeItemText} a ${args.afterItemText}`
};

var $b6b0ea1b94a7633c$exports = {};
$b6b0ea1b94a7633c$exports = {
    "dragDescriptionKeyboard": `Tryk p\xe5 Enter for at starte med at tr\xe6kke.`,
    "dragDescriptionKeyboardAlt": `Tryk p\xe5 Alt + Enter for at starte med at tr\xe6kke.`,
    "dragDescriptionLongPress": `Tryk l\xe6nge for at starte med at tr\xe6kke.`,
    "dragDescriptionTouch": `Dobbelttryk for at starte med at tr\xe6kke.`,
    "dragDescriptionVirtual": `Klik for at starte med at tr\xe6kke.`,
    "dragItem": (args)=>`Tr\xe6k ${args.itemText}`,
    "dragSelectedItems": (args, formatter)=>`Tr\xe6k ${formatter.plural(args.count, {
            one: ()=>`${formatter.number(args.count)} valgt element`,
            other: ()=>`${formatter.number(args.count)} valgte elementer`
        })}`,
    "dragSelectedKeyboard": (args, formatter)=>`Tryk p\xe5 Enter for at tr\xe6kke ${formatter.plural(args.count, {
            one: ()=>`${formatter.number(args.count)} valgte element`,
            other: ()=>`${formatter.number(args.count)} valgte elementer`
        })}.`,
    "dragSelectedKeyboardAlt": (args, formatter)=>`Tryk p\xe5 Alt + Enter for at tr\xe6kke ${formatter.plural(args.count, {
            one: ()=>`${formatter.number(args.count)} valgte element`,
            other: ()=>`${formatter.number(args.count)} valgte elementer`
        })}.`,
    "dragSelectedLongPress": (args, formatter)=>`Tryk l\xe6nge for at tr\xe6kke ${formatter.plural(args.count, {
            one: ()=>`${formatter.number(args.count)} valgte element`,
            other: ()=>`${formatter.number(args.count)} valgte elementer`
        })}.`,
    "dragStartedKeyboard": `Startet med at tr\xe6kke. Tryk p\xe5 Tab for at g\xe5 til et slip-m\xe5l, tryk derefter p\xe5 Enter for at slippe, eller tryk p\xe5 Escape for at annullere.`,
    "dragStartedTouch": `Startet med at tr\xe6kke. G\xe5 til et slip-m\xe5l, og dobbelttryk derefter for at slippe.`,
    "dragStartedVirtual": `Startet med at tr\xe6kke. G\xe5 til et slip-m\xe5l, og klik eller tryk derefter p\xe5 enter for at slippe.`,
    "dropCanceled": `Slip annulleret.`,
    "dropComplete": `Slip fuldf\xf8rt.`,
    "dropDescriptionKeyboard": `Tryk p\xe5 Enter for at slippe. Tryk p\xe5 Escape for at annullere tr\xe6kning.`,
    "dropDescriptionTouch": `Dobbelttryk for at slippe.`,
    "dropDescriptionVirtual": `Klik for at slippe.`,
    "dropIndicator": `slip-indikator`,
    "dropOnItem": (args)=>`Slip p\xe5 ${args.itemText}`,
    "dropOnRoot": `Slip p\xe5`,
    "endDragKeyboard": `Tr\xe6kning. Tryk p\xe5 enter for at annullere tr\xe6k.`,
    "endDragTouch": `Tr\xe6kning. Dobbelttryk for at annullere tr\xe6k.`,
    "endDragVirtual": `Tr\xe6kning. Klik for at annullere tr\xe6kning.`,
    "insertAfter": (args)=>`Inds\xe6t efter ${args.itemText}`,
    "insertBefore": (args)=>`Inds\xe6t f\xf8r ${args.itemText}`,
    "insertBetween": (args)=>`Inds\xe6t mellem ${args.beforeItemText} og ${args.afterItemText}`
};

var $d10e4f47c744ad52$exports = {};
$d10e4f47c744ad52$exports = {
    "dragDescriptionKeyboard": `Dr\xfccken Sie die Eingabetaste, um den Ziehvorgang zu starten.`,
    "dragDescriptionKeyboardAlt": `Alt + Eingabe dr\xfccken, um den Ziehvorgang zu starten.`,
    "dragDescriptionLongPress": `Lang dr\xfccken, um mit dem Ziehen zu beginnen.`,
    "dragDescriptionTouch": `Tippen Sie doppelt, um den Ziehvorgang zu starten.`,
    "dragDescriptionVirtual": `Zum Starten des Ziehvorgangs klicken.`,
    "dragItem": (args)=>`${args.itemText} ziehen`,
    "dragSelectedItems": (args, formatter)=>`${formatter.plural(args.count, {
            one: ()=>`${formatter.number(args.count)} ausgew\xe4hltes Objekt`,
            other: ()=>`${formatter.number(args.count)} ausgew\xe4hlte Objekte`
        })} ziehen`,
    "dragSelectedKeyboard": (args, formatter)=>`Eingabetaste dr\xfccken, um ${formatter.plural(args.count, {
            one: ()=>`${formatter.number(args.count)} ausgew\xe4hltes Element`,
            other: ()=>`${formatter.number(args.count)} ausgew\xe4hlte Elemente`
        })} zu ziehen.`,
    "dragSelectedKeyboardAlt": (args, formatter)=>`Alt + Eingabetaste dr\xfccken, um ${formatter.plural(args.count, {
            one: ()=>`${formatter.number(args.count)} ausgew\xe4hltes Element`,
            other: ()=>`${formatter.number(args.count)} ausgew\xe4hlte Elemente`
        })} zu ziehen.`,
    "dragSelectedLongPress": (args, formatter)=>`Lang dr\xfccken, um ${formatter.plural(args.count, {
            one: ()=>`${formatter.number(args.count)} ausgew\xe4hltes Element`,
            other: ()=>`${formatter.number(args.count)} ausgew\xe4hlte Elemente`
        })} zu ziehen.`,
    "dragStartedKeyboard": `Ziehvorgang gestartet. Dr\xfccken Sie die Tabulatortaste, um zu einem Ablegeziel zu navigieren und dr\xfccken Sie dann die Eingabetaste, um das Objekt abzulegen, oder Escape, um den Vorgang abzubrechen.`,
    "dragStartedTouch": `Ziehvorgang gestartet. Navigieren Sie zu einem Ablegeziel und tippen Sie doppelt, um das Objekt abzulegen.`,
    "dragStartedVirtual": `Ziehvorgang gestartet. Navigieren Sie zu einem Ablegeziel und klicken Sie oder dr\xfccken Sie die Eingabetaste, um das Objekt abzulegen.`,
    "dropCanceled": `Ablegen abgebrochen.`,
    "dropComplete": `Ablegen abgeschlossen.`,
    "dropDescriptionKeyboard": `Dr\xfccken Sie die Eingabetaste, um das Objekt abzulegen. Dr\xfccken Sie Escape, um den Vorgang abzubrechen.`,
    "dropDescriptionTouch": `Tippen Sie doppelt, um das Objekt abzulegen.`,
    "dropDescriptionVirtual": `Zum Ablegen klicken.`,
    "dropIndicator": `Ablegeanzeiger`,
    "dropOnItem": (args)=>`Auf ${args.itemText} ablegen`,
    "dropOnRoot": `Ablegen auf`,
    "endDragKeyboard": `Ziehvorgang l\xe4uft. Dr\xfccken Sie die Eingabetaste, um den Vorgang abzubrechen.`,
    "endDragTouch": `Ziehvorgang l\xe4uft. Tippen Sie doppelt, um den Vorgang abzubrechen.`,
    "endDragVirtual": `Ziehvorgang l\xe4uft. Klicken Sie, um den Vorgang abzubrechen.`,
    "insertAfter": (args)=>`Nach ${args.itemText} einf\xfcgen`,
    "insertBefore": (args)=>`Vor ${args.itemText} einf\xfcgen`,
    "insertBetween": (args)=>`Zwischen ${args.beforeItemText} und ${args.afterItemText} einf\xfcgen`
};

var $b3d2bb9abce688ab$exports = {};
$b3d2bb9abce688ab$exports = {
    "dragDescriptionKeyboard": `\u{3A0}\u{3B1}\u{3C4}\u{3AE}\u{3C3}\u{3C4}\u{3B5} Enter \u{3B3}\u{3B9}\u{3B1} \u{3AD}\u{3BD}\u{3B1}\u{3C1}\u{3BE}\u{3B7} \u{3C4}\u{3B7}\u{3C2} \u{3BC}\u{3B5}\u{3C4}\u{3B1}\u{3C6}\u{3BF}\u{3C1}\u{3AC}\u{3C2}.`,
    "dragDescriptionKeyboardAlt": `\u{3A0}\u{3B1}\u{3C4}\u{3AE}\u{3C3}\u{3C4}\u{3B5} Alt + Enter \u{3B3}\u{3B9}\u{3B1} \u{3AD}\u{3BD}\u{3B1}\u{3C1}\u{3BE}\u{3B7} \u{3C4}\u{3B7}\u{3C2} \u{3BC}\u{3B5}\u{3C4}\u{3B1}\u{3C6}\u{3BF}\u{3C1}\u{3AC}\u{3C2}.`,
    "dragDescriptionLongPress": `\u{3A0}\u{3B1}\u{3C4}\u{3AE}\u{3C3}\u{3C4}\u{3B5} \u{3C0}\u{3B1}\u{3C1}\u{3B1}\u{3C4}\u{3B5}\u{3C4}\u{3B1}\u{3BC}\u{3AD}\u{3BD}\u{3B1} \u{3B3}\u{3B9}\u{3B1} \u{3BD}\u{3B1} \u{3BE}\u{3B5}\u{3BA}\u{3B9}\u{3BD}\u{3AE}\u{3C3}\u{3B5}\u{3C4}\u{3B5} \u{3C4}\u{3B7} \u{3BC}\u{3B5}\u{3C4}\u{3B1}\u{3C6}\u{3BF}\u{3C1}\u{3AC}.`,
    "dragDescriptionTouch": `\u{3A0}\u{3B1}\u{3C4}\u{3AE}\u{3C3}\u{3C4}\u{3B5} \u{3B4}\u{3CD}\u{3BF} \u{3C6}\u{3BF}\u{3C1}\u{3AD}\u{3C2} \u{3B3}\u{3B9}\u{3B1} \u{3AD}\u{3BD}\u{3B1}\u{3C1}\u{3BE}\u{3B7} \u{3C4}\u{3B7}\u{3C2} \u{3BC}\u{3B5}\u{3C4}\u{3B1}\u{3C6}\u{3BF}\u{3C1}\u{3AC}\u{3C2}.`,
    "dragDescriptionVirtual": `\u{39A}\u{3AC}\u{3BD}\u{3C4}\u{3B5} \u{3BA}\u{3BB}\u{3B9}\u{3BA} \u{3B3}\u{3B9}\u{3B1} \u{3BD}\u{3B1} \u{3BE}\u{3B5}\u{3BA}\u{3B9}\u{3BD}\u{3AE}\u{3C3}\u{3B5}\u{3C4}\u{3B5} \u{3C4}\u{3B7} \u{3BC}\u{3B5}\u{3C4}\u{3B1}\u{3C6}\u{3BF}\u{3C1}\u{3AC}.`,
    "dragItem": (args)=>`\u{39C}\u{3B5}\u{3C4}\u{3B1}\u{3C6}\u{3BF}\u{3C1}\u{3AC} ${args.itemText}`,
    "dragSelectedItems": (args, formatter)=>`\u{39C}\u{3B5}\u{3C4}\u{3B1}\u{3C6}\u{3BF}\u{3C1}\u{3AC} \u{3C3}\u{3B5} ${formatter.plural(args.count, {
            one: ()=>`${formatter.number(args.count)} \u{3B5}\u{3C0}\u{3B9}\u{3BB}\u{3B5}\u{3B3}\u{3BC}\u{3AD}\u{3BD}\u{3BF} \u{3C3}\u{3C4}\u{3BF}\u{3B9}\u{3C7}\u{3B5}\u{3AF}\u{3BF}`,
            other: ()=>`${formatter.number(args.count)} \u{3B5}\u{3C0}\u{3B9}\u{3BB}\u{3B5}\u{3B3}\u{3BC}\u{3AD}\u{3BD}\u{3B1} \u{3C3}\u{3C4}\u{3BF}\u{3B9}\u{3C7}\u{3B5}\u{3AF}\u{3B1}`
        })}`,
    "dragSelectedKeyboard": (args, formatter)=>`\u{3A0}\u{3B1}\u{3C4}\u{3AE}\u{3C3}\u{3C4}\u{3B5} Enter \u{3B3}\u{3B9}\u{3B1} \u{3BD}\u{3B1} \u{3C3}\u{3CD}\u{3C1}\u{3B5}\u{3C4}\u{3B5} ${formatter.plural(args.count, {
            one: ()=>`${formatter.number(args.count)} \u{3B5}\u{3C0}\u{3B9}\u{3BB}\u{3B5}\u{3B3}\u{3BC}\u{3AD}\u{3BD}\u{3BF} \u{3C3}\u{3C4}\u{3BF}\u{3B9}\u{3C7}\u{3B5}\u{3AF}\u{3BF}`,
            other: ()=>`${formatter.number(args.count)} \u{3B5}\u{3C0}\u{3B9}\u{3BB}\u{3B5}\u{3B3}\u{3BC}\u{3AD}\u{3BD}\u{3B1} \u{3C3}\u{3C4}\u{3BF}\u{3B9}\u{3C7}\u{3B5}\u{3AF}\u{3B1}`
        })}.`,
    "dragSelectedKeyboardAlt": (args, formatter)=>`\u{3A0}\u{3B1}\u{3C4}\u{3AE}\u{3C3}\u{3C4}\u{3B5} Alt + Enter \u{3B3}\u{3B9}\u{3B1} \u{3BD}\u{3B1} \u{3C3}\u{3CD}\u{3C1}\u{3B5}\u{3C4}\u{3B5} ${formatter.plural(args.count, {
            one: ()=>`${formatter.number(args.count)} \u{3B5}\u{3C0}\u{3B9}\u{3BB}\u{3B5}\u{3B3}\u{3BC}\u{3AD}\u{3BD}\u{3BF} \u{3C3}\u{3C4}\u{3BF}\u{3B9}\u{3C7}\u{3B5}\u{3AF}\u{3BF}`,
            other: ()=>`${formatter.number(args.count)} \u{3B5}\u{3C0}\u{3B9}\u{3BB}\u{3B5}\u{3B3}\u{3BC}\u{3AD}\u{3BD}\u{3B1} \u{3C3}\u{3C4}\u{3BF}\u{3B9}\u{3C7}\u{3B5}\u{3AF}\u{3B1}`
        })}.`,
    "dragSelectedLongPress": (args, formatter)=>`\u{3A0}\u{3B1}\u{3C4}\u{3AE}\u{3C3}\u{3C4}\u{3B5} \u{3C0}\u{3B1}\u{3C1}\u{3B1}\u{3C4}\u{3B5}\u{3C4}\u{3B1}\u{3BC}\u{3AD}\u{3BD}\u{3B1} \u{3B3}\u{3B9}\u{3B1} \u{3BD}\u{3B1} \u{3C3}\u{3CD}\u{3C1}\u{3B5}\u{3C4}\u{3B5} ${formatter.plural(args.count, {
            one: ()=>`${formatter.number(args.count)} \u{3B5}\u{3C0}\u{3B9}\u{3BB}\u{3B5}\u{3B3}\u{3BC}\u{3AD}\u{3BD}\u{3BF} \u{3C3}\u{3C4}\u{3BF}\u{3B9}\u{3C7}\u{3B5}\u{3AF}\u{3BF}`,
            other: ()=>`${formatter.number(args.count)} \u{3B5}\u{3C0}\u{3B9}\u{3BB}\u{3B5}\u{3B3}\u{3BC}\u{3AD}\u{3BD}\u{3B1} \u{3C3}\u{3C4}\u{3BF}\u{3B9}\u{3C7}\u{3B5}\u{3AF}\u{3B1}`
        })}.`,
    "dragStartedKeyboard": `\u{397} \u{3BC}\u{3B5}\u{3C4}\u{3B1}\u{3C6}\u{3BF}\u{3C1}\u{3AC} \u{3BE}\u{3B5}\u{3BA}\u{3AF}\u{3BD}\u{3B7}\u{3C3}\u{3B5}. \u{3A0}\u{3B1}\u{3C4}\u{3AE}\u{3C3}\u{3C4}\u{3B5} \u{3C4}\u{3BF} \u{3C0}\u{3BB}\u{3AE}\u{3BA}\u{3C4}\u{3C1}\u{3BF} Tab \u{3B3}\u{3B9}\u{3B1} \u{3BD}\u{3B1} \u{3BC}\u{3B5}\u{3C4}\u{3B1}\u{3B2}\u{3B5}\u{3AF}\u{3C4}\u{3B5} \u{3C3}\u{3B5} \u{3AD}\u{3BD}\u{3B1}\u{3BD} \u{3C0}\u{3C1}\u{3BF}\u{3BF}\u{3C1}\u{3B9}\u{3C3}\u{3BC}\u{3CC} \u{3B1}\u{3C0}\u{3CC}\u{3B8}\u{3B5}\u{3C3}\u{3B7}\u{3C2} \u{3BA}\u{3B1}\u{3B9}, \u{3C3}\u{3C4}\u{3B7} \u{3C3}\u{3C5}\u{3BD}\u{3AD}\u{3C7}\u{3B5}\u{3B9}\u{3B1}, \u{3C0}\u{3B1}\u{3C4}\u{3AE}\u{3C3}\u{3C4}\u{3B5} Enter \u{3B3}\u{3B9}\u{3B1} \u{3B1}\u{3C0}\u{3CC}\u{3B8}\u{3B5}\u{3C3}\u{3B7} \u{3AE} \u{3C0}\u{3B1}\u{3C4}\u{3AE}\u{3C3}\u{3C4}\u{3B5} Escape \u{3B3}\u{3B9}\u{3B1} \u{3B1}\u{3BA}\u{3CD}\u{3C1}\u{3C9}\u{3C3}\u{3B7}.`,
    "dragStartedTouch": `\u{397} \u{3BC}\u{3B5}\u{3C4}\u{3B1}\u{3C6}\u{3BF}\u{3C1}\u{3AC} \u{3BE}\u{3B5}\u{3BA}\u{3AF}\u{3BD}\u{3B7}\u{3C3}\u{3B5}. \u{39C}\u{3B5}\u{3C4}\u{3B1}\u{3B2}\u{3B5}\u{3AF}\u{3C4}\u{3B5} \u{3C3}\u{3B5} \u{3AD}\u{3BD}\u{3B1}\u{3BD} \u{3C0}\u{3C1}\u{3BF}\u{3BF}\u{3C1}\u{3B9}\u{3C3}\u{3BC}\u{3CC} \u{3B1}\u{3C0}\u{3CC}\u{3B8}\u{3B5}\u{3C3}\u{3B7}\u{3C2} \u{3BA}\u{3B1}\u{3B9}, \u{3C3}\u{3C4}\u{3B7} \u{3C3}\u{3C5}\u{3BD}\u{3AD}\u{3C7}\u{3B5}\u{3B9}\u{3B1}, \u{3C0}\u{3B1}\u{3C4}\u{3AE}\u{3C3}\u{3C4}\u{3B5} \u{3B4}\u{3CD}\u{3BF} \u{3C6}\u{3BF}\u{3C1}\u{3AD}\u{3C2} \u{3B3}\u{3B9}\u{3B1} \u{3B1}\u{3C0}\u{3CC}\u{3B8}\u{3B5}\u{3C3}\u{3B7}.`,
    "dragStartedVirtual": `\u{397} \u{3BC}\u{3B5}\u{3C4}\u{3B1}\u{3C6}\u{3BF}\u{3C1}\u{3AC} \u{3BE}\u{3B5}\u{3BA}\u{3AF}\u{3BD}\u{3B7}\u{3C3}\u{3B5}. \u{39C}\u{3B5}\u{3C4}\u{3B1}\u{3B2}\u{3B5}\u{3AF}\u{3C4}\u{3B5} \u{3C3}\u{3B5} \u{3AD}\u{3BD}\u{3B1}\u{3BD} \u{3C0}\u{3C1}\u{3BF}\u{3BF}\u{3C1}\u{3B9}\u{3C3}\u{3BC}\u{3CC} \u{3B1}\u{3C0}\u{3CC}\u{3B8}\u{3B5}\u{3C3}\u{3B7}\u{3C2} \u{3BA}\u{3B1}\u{3B9}, \u{3C3}\u{3C4}\u{3B7} \u{3C3}\u{3C5}\u{3BD}\u{3AD}\u{3C7}\u{3B5}\u{3B9}\u{3B1}, \u{3BA}\u{3AC}\u{3BD}\u{3C4}\u{3B5} \u{3BA}\u{3BB}\u{3B9}\u{3BA} \u{3AE} \u{3C0}\u{3B1}\u{3C4}\u{3AE}\u{3C3}\u{3C4}\u{3B5} Enter \u{3B3}\u{3B9}\u{3B1} \u{3B1}\u{3C0}\u{3CC}\u{3B8}\u{3B5}\u{3C3}\u{3B7}.`,
    "dropCanceled": `\u{397} \u{3B1}\u{3C0}\u{3CC}\u{3B8}\u{3B5}\u{3C3}\u{3B7} \u{3B1}\u{3BA}\u{3C5}\u{3C1}\u{3CE}\u{3B8}\u{3B7}\u{3BA}\u{3B5}.`,
    "dropComplete": `\u{397} \u{3B1}\u{3C0}\u{3CC}\u{3B8}\u{3B5}\u{3C3}\u{3B7} \u{3BF}\u{3BB}\u{3BF}\u{3BA}\u{3BB}\u{3B7}\u{3C1}\u{3CE}\u{3B8}\u{3B7}\u{3BA}\u{3B5}.`,
    "dropDescriptionKeyboard": `\u{3A0}\u{3B1}\u{3C4}\u{3AE}\u{3C3}\u{3C4}\u{3B5} Enter \u{3B3}\u{3B9}\u{3B1} \u{3B1}\u{3C0}\u{3CC}\u{3B8}\u{3B5}\u{3C3}\u{3B7}. \u{3A0}\u{3B1}\u{3C4}\u{3AE}\u{3C3}\u{3C4}\u{3B5} Escape \u{3B3}\u{3B9}\u{3B1} \u{3B1}\u{3BA}\u{3CD}\u{3C1}\u{3C9}\u{3C3}\u{3B7} \u{3C4}\u{3B7}\u{3C2} \u{3BC}\u{3B5}\u{3C4}\u{3B1}\u{3C6}\u{3BF}\u{3C1}\u{3AC}\u{3C2}.`,
    "dropDescriptionTouch": `\u{3A0}\u{3B1}\u{3C4}\u{3AE}\u{3C3}\u{3C4}\u{3B5} \u{3B4}\u{3CD}\u{3BF} \u{3C6}\u{3BF}\u{3C1}\u{3AD}\u{3C2} \u{3B3}\u{3B9}\u{3B1} \u{3B1}\u{3C0}\u{3CC}\u{3B8}\u{3B5}\u{3C3}\u{3B7}.`,
    "dropDescriptionVirtual": `\u{39A}\u{3AC}\u{3BD}\u{3C4}\u{3B5} \u{3BA}\u{3BB}\u{3B9}\u{3BA} \u{3B3}\u{3B9}\u{3B1} \u{3B1}\u{3C0}\u{3CC}\u{3B8}\u{3B5}\u{3C3}\u{3B7}.`,
    "dropIndicator": `\u{3B4}\u{3B5}\u{3AF}\u{3BA}\u{3C4}\u{3B7}\u{3C2} \u{3B1}\u{3C0}\u{3CC}\u{3B8}\u{3B5}\u{3C3}\u{3B7}\u{3C2}`,
    "dropOnItem": (args)=>`\u{391}\u{3C0}\u{3CC}\u{3B8}\u{3B5}\u{3C3}\u{3B7} \u{3C3}\u{3B5} ${args.itemText}`,
    "dropOnRoot": `\u{391}\u{3C0}\u{3CC}\u{3B8}\u{3B5}\u{3C3}\u{3B7} \u{3C3}\u{3B5}`,
    "endDragKeyboard": `\u{39C}\u{3B5}\u{3C4}\u{3B1}\u{3C6}\u{3BF}\u{3C1}\u{3AC} \u{3C3}\u{3B5} \u{3B5}\u{3BE}\u{3AD}\u{3BB}\u{3B9}\u{3BE}\u{3B7}. \u{3A0}\u{3B1}\u{3C4}\u{3AE}\u{3C3}\u{3C4}\u{3B5} Enter \u{3B3}\u{3B9}\u{3B1} \u{3B1}\u{3BA}\u{3CD}\u{3C1}\u{3C9}\u{3C3}\u{3B7} \u{3C4}\u{3B7}\u{3C2} \u{3BC}\u{3B5}\u{3C4}\u{3B1}\u{3C6}\u{3BF}\u{3C1}\u{3AC}\u{3C2}.`,
    "endDragTouch": `\u{39C}\u{3B5}\u{3C4}\u{3B1}\u{3C6}\u{3BF}\u{3C1}\u{3AC} \u{3C3}\u{3B5} \u{3B5}\u{3BE}\u{3AD}\u{3BB}\u{3B9}\u{3BE}\u{3B7}. \u{3A0}\u{3B1}\u{3C4}\u{3AE}\u{3C3}\u{3C4}\u{3B5} \u{3B4}\u{3CD}\u{3BF} \u{3C6}\u{3BF}\u{3C1}\u{3AD}\u{3C2} \u{3B3}\u{3B9}\u{3B1} \u{3B1}\u{3BA}\u{3CD}\u{3C1}\u{3C9}\u{3C3}\u{3B7} \u{3C4}\u{3B7}\u{3C2} \u{3BC}\u{3B5}\u{3C4}\u{3B1}\u{3C6}\u{3BF}\u{3C1}\u{3AC}\u{3C2}.`,
    "endDragVirtual": `\u{39C}\u{3B5}\u{3C4}\u{3B1}\u{3C6}\u{3BF}\u{3C1}\u{3AC} \u{3C3}\u{3B5} \u{3B5}\u{3BE}\u{3AD}\u{3BB}\u{3B9}\u{3BE}\u{3B7}. \u{39A}\u{3AC}\u{3BD}\u{3C4}\u{3B5} \u{3BA}\u{3BB}\u{3B9}\u{3BA} \u{3B3}\u{3B9}\u{3B1} \u{3B1}\u{3BA}\u{3CD}\u{3C1}\u{3C9}\u{3C3}\u{3B7} \u{3C4}\u{3B7}\u{3C2} \u{3BC}\u{3B5}\u{3C4}\u{3B1}\u{3C6}\u{3BF}\u{3C1}\u{3AC}\u{3C2}.`,
    "insertAfter": (args)=>`\u{395}\u{3B9}\u{3C3}\u{3B1}\u{3B3}\u{3C9}\u{3B3}\u{3AE} \u{3BC}\u{3B5}\u{3C4}\u{3AC} \u{3B1}\u{3C0}\u{3CC} ${args.itemText}`,
    "insertBefore": (args)=>`\u{395}\u{3B9}\u{3C3}\u{3B1}\u{3B3}\u{3C9}\u{3B3}\u{3AE} \u{3C0}\u{3C1}\u{3B9}\u{3BD} \u{3B1}\u{3C0}\u{3CC} ${args.itemText}`,
    "insertBetween": (args)=>`\u{395}\u{3B9}\u{3C3}\u{3B1}\u{3B3}\u{3C9}\u{3B3}\u{3AE} \u{3BC}\u{3B5}\u{3C4}\u{3B1}\u{3BE}\u{3CD} ${args.beforeItemText} \u{3BA}\u{3B1}\u{3B9} ${args.afterItemText}`
};

var $f9b46437e610cca1$exports = {};
$f9b46437e610cca1$exports = {
    "dragItem": (args)=>`Drag ${args.itemText}`,
    "dragSelectedItems": (args, formatter)=>`Drag ${formatter.plural(args.count, {
            one: ()=>`${formatter.number(args.count)} selected item`,
            other: ()=>`${formatter.number(args.count)} selected items`
        })}`,
    "dragDescriptionKeyboard": `Press Enter to start dragging.`,
    "dragDescriptionKeyboardAlt": `Press Alt + Enter to start dragging.`,
    "dragDescriptionTouch": `Double tap to start dragging.`,
    "dragDescriptionVirtual": `Click to start dragging.`,
    "dragDescriptionLongPress": `Long press to start dragging.`,
    "dragSelectedKeyboard": (args, formatter)=>`Press Enter to drag ${formatter.plural(args.count, {
            one: ()=>`${formatter.number(args.count)} selected item`,
            other: ()=>`${formatter.number(args.count)} selected items`
        })}.`,
    "dragSelectedKeyboardAlt": (args, formatter)=>`Press Alt + Enter to drag ${formatter.plural(args.count, {
            one: ()=>`${formatter.number(args.count)} selected item`,
            other: ()=>`${formatter.number(args.count)} selected items`
        })}.`,
    "dragSelectedLongPress": (args, formatter)=>`Long press to drag ${formatter.plural(args.count, {
            one: ()=>`${formatter.number(args.count)} selected item`,
            other: ()=>`${formatter.number(args.count)} selected items`
        })}.`,
    "dragStartedKeyboard": `Started dragging. Press Tab to navigate to a drop target, then press Enter to drop, or press Escape to cancel.`,
    "dragStartedTouch": `Started dragging. Navigate to a drop target, then double tap to drop.`,
    "dragStartedVirtual": `Started dragging. Navigate to a drop target, then click or press Enter to drop.`,
    "endDragKeyboard": `Dragging. Press Enter to cancel drag.`,
    "endDragTouch": `Dragging. Double tap to cancel drag.`,
    "endDragVirtual": `Dragging. Click to cancel drag.`,
    "dropDescriptionKeyboard": `Press Enter to drop. Press Escape to cancel drag.`,
    "dropDescriptionTouch": `Double tap to drop.`,
    "dropDescriptionVirtual": `Click to drop.`,
    "dropCanceled": `Drop canceled.`,
    "dropComplete": `Drop complete.`,
    "dropIndicator": `drop indicator`,
    "dropOnRoot": `Drop on`,
    "dropOnItem": (args)=>`Drop on ${args.itemText}`,
    "insertBefore": (args)=>`Insert before ${args.itemText}`,
    "insertBetween": (args)=>`Insert between ${args.beforeItemText} and ${args.afterItemText}`,
    "insertAfter": (args)=>`Insert after ${args.itemText}`
};

var $204b5c01bd3acf26$exports = {};
$204b5c01bd3acf26$exports = {
    "dragDescriptionKeyboard": `Pulse Intro para empezar a arrastrar.`,
    "dragDescriptionKeyboardAlt": `Pulse Intro para empezar a arrastrar.`,
    "dragDescriptionLongPress": `Mantenga pulsado para comenzar a arrastrar.`,
    "dragDescriptionTouch": `Pulse dos veces para iniciar el arrastre.`,
    "dragDescriptionVirtual": `Haga clic para iniciar el arrastre.`,
    "dragItem": (args)=>`Arrastrar ${args.itemText}`,
    "dragSelectedItems": (args, formatter)=>`Arrastrar ${formatter.plural(args.count, {
            one: ()=>`${formatter.number(args.count)} elemento seleccionado`,
            other: ()=>`${formatter.number(args.count)} elementos seleccionados`
        })}`,
    "dragSelectedKeyboard": (args, formatter)=>`Pulse Intro para arrastrar ${formatter.plural(args.count, {
            one: ()=>`${formatter.number(args.count)} elemento seleccionado`,
            other: ()=>`${formatter.number(args.count)} elementos seleccionados`
        })}.`,
    "dragSelectedKeyboardAlt": (args, formatter)=>`Pulse Alt + Intro para arrastrar ${formatter.plural(args.count, {
            one: ()=>`${formatter.number(args.count)} elemento seleccionado`,
            other: ()=>`${formatter.number(args.count)} elementos seleccionados`
        })}.`,
    "dragSelectedLongPress": (args, formatter)=>`Mantenga pulsado para arrastrar ${formatter.plural(args.count, {
            one: ()=>`${formatter.number(args.count)} elemento seleccionado`,
            other: ()=>`${formatter.number(args.count)} elementos seleccionados`
        })}.`,
    "dragStartedKeyboard": `Se ha empezado a arrastrar. Pulse el tabulador para ir al p\xfablico destinatario donde se vaya a colocar y, a continuaci\xf3n, pulse Intro para soltar, o pulse Escape para cancelar.`,
    "dragStartedTouch": `Se ha empezado a arrastrar. Vaya al p\xfablico destinatario donde se vaya a colocar y, a continuaci\xf3n, pulse dos veces para soltar.`,
    "dragStartedVirtual": `Se ha empezado a arrastrar. Vaya al p\xfablico destinatario donde se vaya a colocar y, a continuaci\xf3n, haga clic o pulse Intro para soltar.`,
    "dropCanceled": `Se ha cancelado la colocaci\xf3n.`,
    "dropComplete": `Colocaci\xf3n finalizada.`,
    "dropDescriptionKeyboard": `Pulse Intro para soltar. Pulse Escape para cancelar el arrastre.`,
    "dropDescriptionTouch": `Pulse dos veces para soltar.`,
    "dropDescriptionVirtual": `Haga clic para soltar.`,
    "dropIndicator": `indicador de colocaci\xf3n`,
    "dropOnItem": (args)=>`Soltar en ${args.itemText}`,
    "dropOnRoot": `Soltar en`,
    "endDragKeyboard": `Arrastrando. Pulse Intro para cancelar el arrastre.`,
    "endDragTouch": `Arrastrando. Pulse dos veces para cancelar el arrastre.`,
    "endDragVirtual": `Arrastrando. Haga clic para cancelar el arrastre.`,
    "insertAfter": (args)=>`Insertar despu\xe9s de ${args.itemText}`,
    "insertBefore": (args)=>`Insertar antes de ${args.itemText}`,
    "insertBetween": (args)=>`Insertar entre ${args.beforeItemText} y ${args.afterItemText}`
};

var $110bdd83348ecbc0$exports = {};
$110bdd83348ecbc0$exports = {
    "dragDescriptionKeyboard": `Lohistamise alustamiseks vajutage klahvi Enter.`,
    "dragDescriptionKeyboardAlt": `Lohistamise alustamiseks vajutage klahvikombinatsiooni Alt + Enter.`,
    "dragDescriptionLongPress": `Vajutage pikalt lohistamise alustamiseks.`,
    "dragDescriptionTouch": `Topeltpuudutage lohistamise alustamiseks.`,
    "dragDescriptionVirtual": `Kl\xf5psake lohistamise alustamiseks.`,
    "dragItem": (args)=>`Lohista ${args.itemText}`,
    "dragSelectedItems": (args, formatter)=>`Lohista ${formatter.plural(args.count, {
            one: ()=>`${formatter.number(args.count)} valitud \xfcksust`,
            other: ()=>`${formatter.number(args.count)} valitud \xfcksust`
        })}`,
    "dragSelectedKeyboard": (args, formatter)=>`${formatter.plural(args.count, {
            one: ()=>`${formatter.number(args.count)} valitud \xfcksuse`,
            other: ()=>`${formatter.number(args.count)} valitud \xfcksuse`
        })} lohistamiseks vajutage sisestusklahvi Enter.`,
    "dragSelectedKeyboardAlt": (args, formatter)=>`Lohistamiseks vajutage klahvikombinatsiooni Alt + Enter ${formatter.plural(args.count, {
            one: ()=>`${formatter.number(args.count)} valitud \xfcksuse`,
            other: ()=>`${formatter.number(args.count)} valitud \xfcksuse`
        })} jaoks.`,
    "dragSelectedLongPress": (args, formatter)=>`Pikk vajutus ${formatter.plural(args.count, {
            one: ()=>`${formatter.number(args.count)} valitud \xfcksuse`,
            other: ()=>`${formatter.number(args.count)} valitud \xfcksuse`
        })} lohistamiseks.`,
    "dragStartedKeyboard": `Alustati lohistamist. Kukutamise sihtm\xe4rgi juurde navigeerimiseks vajutage klahvi Tab, seej\xe4rel vajutage kukutamiseks klahvi Enter v\xf5i loobumiseks klahvi Escape.`,
    "dragStartedTouch": `Alustati lohistamist. Navigeerige kukutamise sihtm\xe4rgi juurde ja topeltpuudutage kukutamiseks.`,
    "dragStartedVirtual": `Alustati lohistamist. Navigeerige kukutamise sihtm\xe4rgi juurde ja kukutamiseks kl\xf5psake v\xf5i vajutage klahvi Enter.`,
    "dropCanceled": `Lohistamisest loobuti.`,
    "dropComplete": `Lohistamine on tehtud.`,
    "dropDescriptionKeyboard": `Kukutamiseks vajutage klahvi Enter. Lohistamisest loobumiseks vajutage klahvi Escape.`,
    "dropDescriptionTouch": `Kukutamiseks topeltpuudutage.`,
    "dropDescriptionVirtual": `Kukutamiseks kl\xf5psake.`,
    "dropIndicator": `lohistamise indikaator`,
    "dropOnItem": (args)=>`Kukuta asukohta ${args.itemText}`,
    "dropOnRoot": `Kukuta asukohta`,
    "endDragKeyboard": `Lohistamine. Lohistamisest loobumiseks vajutage klahvi Enter.`,
    "endDragTouch": `Lohistamine. Lohistamisest loobumiseks topeltpuudutage.`,
    "endDragVirtual": `Lohistamine. Lohistamisest loobumiseks kl\xf5psake.`,
    "insertAfter": (args)=>`Sisesta ${args.itemText} j\xe4rele`,
    "insertBefore": (args)=>`Sisesta ${args.itemText} ette`,
    "insertBetween": (args)=>`Sisesta ${args.beforeItemText} ja ${args.afterItemText} vahele`
};

var $87d3ccd5e347c7cc$exports = {};
$87d3ccd5e347c7cc$exports = {
    "dragDescriptionKeyboard": `Aloita vet\xe4minen painamalla Enter-n\xe4pp\xe4int\xe4.`,
    "dragDescriptionKeyboardAlt": `Aloita vet\xe4minen painamalla Alt + Enter -n\xe4pp\xe4inyhdistelm\xe4\xe4.`,
    "dragDescriptionLongPress": `Aloita vet\xe4minen pit\xe4m\xe4ll\xe4 painettuna.`,
    "dragDescriptionTouch": `Aloita vet\xe4minen kaksoisnapauttamalla.`,
    "dragDescriptionVirtual": `Aloita vet\xe4minen napsauttamalla.`,
    "dragItem": (args)=>`Ved\xe4 kohdetta ${args.itemText}`,
    "dragSelectedItems": (args, formatter)=>`Ved\xe4 ${formatter.plural(args.count, {
            one: ()=>`${formatter.number(args.count)} valittua kohdetta`,
            other: ()=>`${formatter.number(args.count)} valittua kohdetta`
        })}`,
    "dragSelectedKeyboard": (args, formatter)=>`Ved\xe4 painamalla Enter ${formatter.plural(args.count, {
            one: ()=>`${formatter.number(args.count)} valittu kohde`,
            other: ()=>`${formatter.number(args.count)} valittua kohdetta`
        })}.`,
    "dragSelectedKeyboardAlt": (args, formatter)=>`Ved\xe4 painamalla Alt + Enter ${formatter.plural(args.count, {
            one: ()=>`${formatter.number(args.count)} valittu kohde`,
            other: ()=>`${formatter.number(args.count)} valittua kohdetta`
        })}.`,
    "dragSelectedLongPress": (args, formatter)=>`Ved\xe4 pit\xe4m\xe4ll\xe4 painettuna ${formatter.plural(args.count, {
            one: ()=>`${formatter.number(args.count)} valittu kohde`,
            other: ()=>`${formatter.number(args.count)} valittua kohdetta`
        })}.`,
    "dragStartedKeyboard": `Vet\xe4minen aloitettu. Siirry pudotuskohteeseen painamalla sarkainn\xe4pp\xe4int\xe4 ja sitten pudota painamalla Enter-n\xe4pp\xe4int\xe4 tai peruuta painamalla Escape-n\xe4pp\xe4int\xe4.`,
    "dragStartedTouch": `Vet\xe4minen aloitettu. Siirry pudotuskohteeseen ja pudota kaksoisnapauttamalla.`,
    "dragStartedVirtual": `Vet\xe4minen aloitettu. Siirry pudotuskohteeseen ja pudota napsauttamalla tai painamalla Enter-n\xe4pp\xe4int\xe4.`,
    "dropCanceled": `Pudotus peruutettu.`,
    "dropComplete": `Pudotus suoritettu.`,
    "dropDescriptionKeyboard": `Pudota painamalla Enter-n\xe4pp\xe4int\xe4. Peruuta vet\xe4minen painamalla Escape-n\xe4pp\xe4int\xe4.`,
    "dropDescriptionTouch": `Pudota kaksoisnapauttamalla.`,
    "dropDescriptionVirtual": `Pudota napsauttamalla.`,
    "dropIndicator": `pudotuksen ilmaisin`,
    "dropOnItem": (args)=>`Pudota kohteeseen ${args.itemText}`,
    "dropOnRoot": `Pudota kohteeseen`,
    "endDragKeyboard": `Vedet\xe4\xe4n. Peruuta vet\xe4minen painamalla Enter-n\xe4pp\xe4int\xe4.`,
    "endDragTouch": `Vedet\xe4\xe4n. Peruuta vet\xe4minen kaksoisnapauttamalla.`,
    "endDragVirtual": `Vedet\xe4\xe4n. Peruuta vet\xe4minen napsauttamalla.`,
    "insertAfter": (args)=>`Lis\xe4\xe4 kohteen ${args.itemText} j\xe4lkeen`,
    "insertBefore": (args)=>`Lis\xe4\xe4 ennen kohdetta ${args.itemText}`,
    "insertBetween": (args)=>`Lis\xe4\xe4 kohteiden ${args.beforeItemText} ja ${args.afterItemText} v\xe4liin`
};

var $a5de891427686596$exports = {};
$a5de891427686596$exports = {
    "dragDescriptionKeyboard": `Appuyez sur Entr\xe9e pour commencer le d\xe9placement.`,
    "dragDescriptionKeyboardAlt": `Appuyez sur Alt\xa0+\xa0Entr\xe9e pour commencer \xe0 faire glisser.`,
    "dragDescriptionLongPress": `Appuyez de mani\xe8re prolong\xe9e pour commencer \xe0 faire glisser.`,
    "dragDescriptionTouch": `Touchez deux fois pour commencer le d\xe9placement.`,
    "dragDescriptionVirtual": `Cliquez pour commencer le d\xe9placement.`,
    "dragItem": (args)=>`D\xe9placer ${args.itemText}`,
    "dragSelectedItems": (args, formatter)=>`D\xe9placer ${formatter.plural(args.count, {
            one: ()=>`${formatter.number(args.count)} \xe9l\xe9ment s\xe9lectionn\xe9`,
            other: ()=>`${formatter.number(args.count)} \xe9l\xe9ments s\xe9lectionn\xe9s`
        })}`,
    "dragSelectedKeyboard": (args, formatter)=>`Appuyez sur Entr\xe9e pour faire glisser ${formatter.plural(args.count, {
            one: ()=>`${formatter.number(args.count)} \xe9l\xe9ment s\xe9lectionn\xe9`,
            other: ()=>`${formatter.number(args.count)} \xe9l\xe9ments s\xe9lectionn\xe9s`
        })}.`,
    "dragSelectedKeyboardAlt": (args, formatter)=>`Appuyez sur Alt\xa0+\xa0Entr\xe9e pour faire glisser ${formatter.plural(args.count, {
            one: ()=>`${formatter.number(args.count)} \xe9l\xe9ment s\xe9lectionn\xe9`,
            other: ()=>`${formatter.number(args.count)} \xe9l\xe9ments s\xe9lectionn\xe9s`
        })}.`,
    "dragSelectedLongPress": (args, formatter)=>`Appuyez de mani\xe8re prolong\xe9e pour faire glisser ${formatter.plural(args.count, {
            one: ()=>`${formatter.number(args.count)} \xe9l\xe9ment s\xe9lectionn\xe9`,
            other: ()=>`${formatter.number(args.count)} \xe9l\xe9ments s\xe9lectionn\xe9s`
        })}.`,
    "dragStartedKeyboard": `D\xe9placement commenc\xe9. Appuyez sur Tabulation pour acc\xe9der \xe0 une cible de d\xe9p\xf4t, puis appuyez sur Entr\xe9e pour d\xe9poser, ou appuyez sur \xc9chap pour annuler.`,
    "dragStartedTouch": `D\xe9placement commenc\xe9. Acc\xe9dez \xe0 une cible de d\xe9p\xf4t, puis touchez deux fois pour d\xe9poser.`,
    "dragStartedVirtual": `D\xe9placement commenc\xe9. Acc\xe9dez \xe0 une cible de d\xe9p\xf4t, puis cliquez ou appuyez sur Entr\xe9e pour d\xe9poser.`,
    "dropCanceled": `D\xe9p\xf4t annul\xe9.`,
    "dropComplete": `D\xe9p\xf4t termin\xe9.`,
    "dropDescriptionKeyboard": `Appuyez sur Entr\xe9e pour d\xe9poser. Appuyez sur \xc9chap pour annuler le d\xe9placement.`,
    "dropDescriptionTouch": `Touchez deux fois pour d\xe9poser.`,
    "dropDescriptionVirtual": `Cliquez pour d\xe9poser.`,
    "dropIndicator": `indicateur de d\xe9p\xf4t`,
    "dropOnItem": (args)=>`D\xe9poser sur ${args.itemText}`,
    "dropOnRoot": `D\xe9poser sur`,
    "endDragKeyboard": `D\xe9placement. Appuyez sur Entr\xe9e pour annuler le d\xe9placement.`,
    "endDragTouch": `D\xe9placement. Touchez deux fois pour annuler le d\xe9placement.`,
    "endDragVirtual": `D\xe9placement. Cliquez pour annuler le d\xe9placement.`,
    "insertAfter": (args)=>`Ins\xe9rer apr\xe8s ${args.itemText}`,
    "insertBefore": (args)=>`Ins\xe9rer avant ${args.itemText}`,
    "insertBetween": (args)=>`Ins\xe9rer entre ${args.beforeItemText} et ${args.afterItemText}`
};

var $ad7f4c66d85b4494$exports = {};
$ad7f4c66d85b4494$exports = {
    "dragDescriptionKeyboard": `\u{5D4}\u{5E7}\u{5E9} \u{5E2}\u{5DC} Enter \u{5DB}\u{5D3}\u{5D9} \u{5DC}\u{5D4}\u{5EA}\u{5D7}\u{5D9}\u{5DC} \u{5DC}\u{5D2}\u{5E8}\u{5D5}\u{5E8}.`,
    "dragDescriptionKeyboardAlt": `\u{5D4}\u{5E7}\u{5E9} Alt + Enter \u{5DB}\u{5D3}\u{5D9} \u{5DC}\u{5D4}\u{5EA}\u{5D7}\u{5D9}\u{5DC} \u{5DC}\u{5D2}\u{5E8}\u{5D5}\u{5E8}.`,
    "dragDescriptionLongPress": `\u{5DC}\u{5D7}\u{5E5} \u{5DC}\u{5D7}\u{5D9}\u{5E6}\u{5D4} \u{5D0}\u{5E8}\u{5D5}\u{5DB}\u{5D4} \u{5DB}\u{5D3}\u{5D9} \u{5DC}\u{5D4}\u{5EA}\u{5D7}\u{5D9}\u{5DC} \u{5DC}\u{5D2}\u{5E8}\u{5D5}\u{5E8}.`,
    "dragDescriptionTouch": `\u{5D4}\u{5E7}\u{5E9} \u{5E4}\u{5E2}\u{5DE}\u{5D9}\u{5D9}\u{5DD} \u{5DB}\u{5D3}\u{5D9} \u{5DC}\u{5D4}\u{5EA}\u{5D7}\u{5D9}\u{5DC} \u{5D1}\u{5D2}\u{5E8}\u{5D9}\u{5E8}\u{5D4}.`,
    "dragDescriptionVirtual": `\u{5DC}\u{5D7}\u{5E5} \u{5DB}\u{5D3}\u{5D9} \u{5DC}\u{5D4}\u{5EA}\u{5D7}\u{5D9}\u{5DC} \u{5DC}\u{5D2}\u{5E8}\u{5D5}\u{5E8}.`,
    "dragItem": (args)=>`\u{5D2}\u{5E8}\u{5D5}\u{5E8} \u{5D0}\u{5EA} ${args.itemText}`,
    "dragSelectedItems": (args, formatter)=>`\u{5D2}\u{5E8}\u{5D5}\u{5E8} ${formatter.plural(args.count, {
            one: ()=>`\u{5E4}\u{5E8}\u{5D9}\u{5D8} \u{5E0}\u{5D1}\u{5D7}\u{5E8} ${formatter.number(args.count)}`,
            other: ()=>`${formatter.number(args.count)} \u{5E4}\u{5E8}\u{5D9}\u{5D8}\u{5D9}\u{5DD} \u{5E9}\u{5E0}\u{5D1}\u{5D7}\u{5E8}\u{5D5}`
        })}`,
    "dragSelectedKeyboard": (args, formatter)=>`\u{5D4}\u{5E7}\u{5E9} \u{5E2}\u{5DC} Enter \u{5DB}\u{5D3}\u{5D9} \u{5DC}\u{5D2}\u{5E8}\u{5D5}\u{5E8} ${formatter.plural(args.count, {
            one: ()=>`${formatter.number(args.count)} \u{5E4}\u{5E8}\u{5D9}\u{5D8} \u{5E9}\u{5E0}\u{5D1}\u{5D7}\u{5E8}`,
            other: ()=>`${formatter.number(args.count)} \u{5E4}\u{5E8}\u{5D9}\u{5D8}\u{5D9}\u{5DD} \u{5E9}\u{5E0}\u{5D1}\u{5D7}\u{5E8}\u{5D5}`
        })}.`,
    "dragSelectedKeyboardAlt": (args, formatter)=>`\u{5D4}\u{5E7}\u{5E9} Alt + Enter \u{5DB}\u{5D3}\u{5D9} \u{5DC}\u{5D2}\u{5E8}\u{5D5}\u{5E8} ${formatter.plural(args.count, {
            one: ()=>`${formatter.number(args.count)} \u{5E4}\u{5E8}\u{5D9}\u{5D8} \u{5E9}\u{5E0}\u{5D1}\u{5D7}\u{5E8}`,
            other: ()=>`${formatter.number(args.count)} \u{5E4}\u{5E8}\u{5D9}\u{5D8}\u{5D9}\u{5DD} \u{5E9}\u{5E0}\u{5D1}\u{5D7}\u{5E8}\u{5D5}`
        })}.`,
    "dragSelectedLongPress": (args, formatter)=>`\u{5DC}\u{5D7}\u{5E5} \u{5DC}\u{5D7}\u{5D9}\u{5E6}\u{5D4} \u{5D0}\u{5E8}\u{5D5}\u{5DB}\u{5D4} \u{5DB}\u{5D3}\u{5D9} \u{5DC}\u{5D2}\u{5E8}\u{5D5}\u{5E8} ${formatter.plural(args.count, {
            one: ()=>`${formatter.number(args.count)} \u{5E4}\u{5E8}\u{5D9}\u{5D8} \u{5E9}\u{5E0}\u{5D1}\u{5D7}\u{5E8}`,
            other: ()=>`${formatter.number(args.count)} \u{5E4}\u{5E8}\u{5D9}\u{5D8}\u{5D9}\u{5DD} \u{5E9}\u{5E0}\u{5D1}\u{5D7}\u{5E8}\u{5D5}`
        })}.`,
    "dragStartedKeyboard": `\u{5D4}\u{5EA}\u{5D7}\u{5DC}\u{5EA} \u{5DC}\u{5D2}\u{5E8}\u{5D5}\u{5E8}. \u{5D4}\u{5E7}\u{5E9} \u{5E2}\u{5DC} Tab \u{5DB}\u{5D3}\u{5D9} \u{5DC}\u{5E0}\u{5D5}\u{5D5}\u{5D8} \u{5DC}\u{5E0}\u{5E7}\u{5D5}\u{5D3}\u{5EA} \u{5D4}\u{5D2}\u{5E8}\u{5D9}\u{5E8}\u{5D4} \u{5D5}\u{5DC}\u{5D0}\u{5D7}\u{5E8} \u{5DE}\u{5DB}\u{5DF} \u{5D4}\u{5E7}\u{5E9} \u{5E2}\u{5DC} Enter \u{5DB}\u{5D3}\u{5D9} \u{5DC}\u{5E9}\u{5D7}\u{5E8}\u{5E8} \u{5D0}\u{5D5} \u{5E2}\u{5DC} Escape \u{5DB}\u{5D3}\u{5D9} \u{5DC}\u{5D1}\u{5D8}\u{5DC}.`,
    "dragStartedTouch": `\u{5D4}\u{5EA}\u{5D7}\u{5DC}\u{5EA} \u{5DC}\u{5D2}\u{5E8}\u{5D5}\u{5E8}. \u{5E0}\u{5D5}\u{5D5}\u{5D8} \u{5DC}\u{5E0}\u{5E7}\u{5D5}\u{5D3}\u{5EA} \u{5D4}\u{5E9}\u{5D7}\u{5E8}\u{5D5}\u{5E8} \u{5D5}\u{5DC}\u{5D0}\u{5D7}\u{5E8} \u{5DE}\u{5DB}\u{5DF} \u{5D4}\u{5E7}\u{5E9} \u{5E4}\u{5E2}\u{5DE}\u{5D9}\u{5D9}\u{5DD} \u{5DB}\u{5D3}\u{5D9} \u{5DC}\u{5E9}\u{5D7}\u{5E8}\u{5E8}.`,
    "dragStartedVirtual": `\u{5D4}\u{5EA}\u{5D7}\u{5DC}\u{5EA} \u{5DC}\u{5D2}\u{5E8}\u{5D5}\u{5E8}. \u{5E0}\u{5D5}\u{5D5}\u{5D8} \u{5DC}\u{5E0}\u{5E7}\u{5D5}\u{5D3}\u{5EA} \u{5D4}\u{5E9}\u{5D7}\u{5E8}\u{5D5}\u{5E8} \u{5D5}\u{5DC}\u{5D0}\u{5D7}\u{5E8} \u{5DE}\u{5DB}\u{5DF} \u{5DC}\u{5D7}\u{5E5} \u{5D0}\u{5D5} \u{5D4}\u{5E7}\u{5E9} \u{5E2}\u{5DC} Enter \u{5DB}\u{5D3}\u{5D9} \u{5DC}\u{5E9}\u{5D7}\u{5E8}\u{5E8}.`,
    "dropCanceled": `\u{5D4}\u{5E9}\u{5D7}\u{5E8}\u{5D5}\u{5E8} \u{5D1}\u{5D5}\u{5D8}\u{5DC}.`,
    "dropComplete": `\u{5D4}\u{5E9}\u{5D7}\u{5E8}\u{5D5}\u{5E8} \u{5D4}\u{5D5}\u{5E9}\u{5DC}\u{5DD}.`,
    "dropDescriptionKeyboard": `\u{5D4}\u{5E7}\u{5E9} \u{5E2}\u{5DC} Enter \u{5DB}\u{5D3}\u{5D9} \u{5DC}\u{5E9}\u{5D7}\u{5E8}\u{5E8}. \u{5D4}\u{5E7}\u{5E9} \u{5E2}\u{5DC} Escape \u{5DB}\u{5D3}\u{5D9} \u{5DC}\u{5D1}\u{5D8}\u{5DC} \u{5D0}\u{5EA} \u{5D4}\u{5D2}\u{5E8}\u{5D9}\u{5E8}\u{5D4}.`,
    "dropDescriptionTouch": `\u{5D4}\u{5E7}\u{5E9} \u{5E4}\u{5E2}\u{5DE}\u{5D9}\u{5D9}\u{5DD} \u{5DB}\u{5D3}\u{5D9} \u{5DC}\u{5E9}\u{5D7}\u{5E8}\u{5E8}.`,
    "dropDescriptionVirtual": `\u{5DC}\u{5D7}\u{5E5} \u{5DB}\u{5D3}\u{5D9} \u{5DC}\u{5E9}\u{5D7}\u{5E8}\u{5E8}.`,
    "dropIndicator": `\u{5DE}\u{5D7}\u{5D5}\u{5D5}\u{5DF} \u{5E9}\u{5D7}\u{5E8}\u{5D5}\u{5E8}`,
    "dropOnItem": (args)=>`\u{5E9}\u{5D7}\u{5E8}\u{5E8} \u{5E2}\u{5DC} ${args.itemText}`,
    "dropOnRoot": `\u{5E9}\u{5D7}\u{5E8}\u{5E8} \u{5E2}\u{5DC}`,
    "endDragKeyboard": `\u{5D2}\u{5D5}\u{5E8}\u{5E8}. \u{5D4}\u{5E7}\u{5E9} \u{5E2}\u{5DC} Enter \u{5DB}\u{5D3}\u{5D9} \u{5DC}\u{5D1}\u{5D8}\u{5DC} \u{5D0}\u{5EA} \u{5D4}\u{5D2}\u{5E8}\u{5D9}\u{5E8}\u{5D4}.`,
    "endDragTouch": `\u{5D2}\u{5D5}\u{5E8}\u{5E8}. \u{5D4}\u{5E7}\u{5E9} \u{5E4}\u{5E2}\u{5DE}\u{5D9}\u{5D9}\u{5DD} \u{5DB}\u{5D3}\u{5D9} \u{5DC}\u{5D1}\u{5D8}\u{5DC} \u{5D0}\u{5EA} \u{5D4}\u{5D2}\u{5E8}\u{5D9}\u{5E8}\u{5D4}.`,
    "endDragVirtual": `\u{5D2}\u{5D5}\u{5E8}\u{5E8}. \u{5DC}\u{5D7}\u{5E5} \u{5DB}\u{5D3}\u{5D9} \u{5DC}\u{5D1}\u{5D8}\u{5DC} \u{5D0}\u{5EA} \u{5D4}\u{5D2}\u{5E8}\u{5D9}\u{5E8}\u{5D4}.`,
    "insertAfter": (args)=>`\u{5D4}\u{5D5}\u{5E1}\u{5E3} \u{5D0}\u{5D7}\u{5E8}\u{5D9} ${args.itemText}`,
    "insertBefore": (args)=>`\u{5D4}\u{5D5}\u{5E1}\u{5E3} \u{5DC}\u{5E4}\u{5E0}\u{5D9} ${args.itemText}`,
    "insertBetween": (args)=>`\u{5D4}\u{5D5}\u{5E1}\u{5E3} \u{5D1}\u{5D9}\u{5DF} ${args.beforeItemText} \u{5DC}\u{5D1}\u{5D9}\u{5DF} ${args.afterItemText}`
};

var $4aa59f3c6a796cae$exports = {};
$4aa59f3c6a796cae$exports = {
    "dragDescriptionKeyboard": `Pritisnite Enter da biste po\u{10D}eli povla\u{10D}iti.`,
    "dragDescriptionKeyboardAlt": `Pritisnite Alt + Enter za po\u{10D}etak povla\u{10D}enja.`,
    "dragDescriptionLongPress": `Dugo pritisnite za po\u{10D}etak povla\u{10D}enja.`,
    "dragDescriptionTouch": `Dvaput dodirnite da biste po\u{10D}eli povla\u{10D}iti.`,
    "dragDescriptionVirtual": `Kliknite da biste po\u{10D}eli povla\u{10D}iti.`,
    "dragItem": (args)=>`Povucite stavku ${args.itemText}`,
    "dragSelectedItems": (args, formatter)=>`Povucite ${formatter.plural(args.count, {
            one: ()=>`${formatter.number(args.count)} odabranu stavku`,
            other: ()=>`ovoliko odabranih stavki: ${formatter.number(args.count)}`
        })}`,
    "dragSelectedKeyboard": (args, formatter)=>`Pritisnite Enter za povla\u{10D}enje ${formatter.plural(args.count, {
            one: ()=>`${formatter.number(args.count)} odabrana stavka`,
            other: ()=>`${formatter.number(args.count)} odabrane stavke`
        })}.`,
    "dragSelectedKeyboardAlt": (args, formatter)=>`Pritisnite Alt + Enter za povla\u{10D}enje ${formatter.plural(args.count, {
            one: ()=>`${formatter.number(args.count)} odabrana stavka`,
            other: ()=>`${formatter.number(args.count)} odabrane stavke`
        })}.`,
    "dragSelectedLongPress": (args, formatter)=>`Dugo pritisnite za povla\u{10D}enje ${formatter.plural(args.count, {
            one: ()=>`${formatter.number(args.count)} odabrana stavka`,
            other: ()=>`${formatter.number(args.count)} odabrane stavke`
        })}.`,
    "dragStartedKeyboard": `Po\u{10D}eli ste povla\u{10D}iti. Pritisnite tipku tabulatora da biste do\u{161}li do cilja ispu\u{161}tanja, a zatim Enter da biste ispustili stavku ili Escape da biste prekinuli povla\u{10D}enje.`,
    "dragStartedTouch": `Po\u{10D}eli ste povla\u{10D}iti. Do\u{111}ite do cilja ispu\u{161}tanja, a zatim dvaput dodirnite da biste ispustili stavku.`,
    "dragStartedVirtual": `Po\u{10D}eli ste povla\u{10D}iti. Do\u{111}ite do cilja ispu\u{161}tanja, a zatim kliknite ili pritisnite Enter da biste ispustili stavku.`,
    "dropCanceled": `Povla\u{10D}enje je prekinuto.`,
    "dropComplete": `Ispu\u{161}tanje je dovr\u{161}eno.`,
    "dropDescriptionKeyboard": `Pritisnite Enter da biste ispustili stavku. Pritisnite Escape da biste prekinuli povla\u{10D}enje.`,
    "dropDescriptionTouch": `Dvaput dodirnite da biste ispustili stavku.`,
    "dropDescriptionVirtual": `Kliknite da biste ispustili stavku.`,
    "dropIndicator": `pokazatelj ispu\u{161}tanja`,
    "dropOnItem": (args)=>`Ispustite na stavku ${args.itemText}`,
    "dropOnRoot": `Ispustite na`,
    "endDragKeyboard": `Povla\u{10D}enje. Pritisnite Enter da biste prekinuli povla\u{10D}enje.`,
    "endDragTouch": `Povla\u{10D}enje. Dvaput dodirnite da biste prekinuli povla\u{10D}enje.`,
    "endDragVirtual": `Povla\u{10D}enje. Kliknite da biste prekinuli povla\u{10D}enje.`,
    "insertAfter": (args)=>`Umetnite iza stavke ${args.itemText}`,
    "insertBefore": (args)=>`Ispustite ispred stavke ${args.itemText}`,
    "insertBetween": (args)=>`Umetnite izme\u{111}u stavki ${args.beforeItemText} i ${args.afterItemText}`
};

var $d8d3646556c40586$exports = {};
$d8d3646556c40586$exports = {
    "dragDescriptionKeyboard": `Nyomja le az Enter billenty\u{171}t a h\xfaz\xe1s megkezd\xe9s\xe9hez.`,
    "dragDescriptionKeyboardAlt": `Nyomja le az Alt + Enter billenty\u{171}ket a h\xfaz\xe1s megkezd\xe9s\xe9hez.`,
    "dragDescriptionLongPress": `Hosszan nyomja meg a h\xfaz\xe1s elind\xedt\xe1s\xe1hoz.`,
    "dragDescriptionTouch": `Koppintson dupl\xe1n a h\xfaz\xe1s megkezd\xe9s\xe9hez.`,
    "dragDescriptionVirtual": `Kattintson a h\xfaz\xe1s megkezd\xe9s\xe9hez.`,
    "dragItem": (args)=>`${args.itemText} h\xfaz\xe1sa`,
    "dragSelectedItems": (args, formatter)=>`${formatter.plural(args.count, {
            one: ()=>`${formatter.number(args.count)} kijel\xf6lt elem`,
            other: ()=>`${formatter.number(args.count)} kijel\xf6lt elem`
        })} h\xfaz\xe1sa`,
    "dragSelectedKeyboard": (args, formatter)=>`Nyomja meg az Entert ${formatter.plural(args.count, {
            one: ()=>`${formatter.number(args.count)} kijel\xf6lt elem`,
            other: ()=>`${formatter.number(args.count)} kijel\xf6lt elem`
        })} h\xfaz\xe1s\xe1hoz.`,
    "dragSelectedKeyboardAlt": (args, formatter)=>`Nyomja meg az Alt + Enter billenty\u{171}ket ${formatter.plural(args.count, {
            one: ()=>`${formatter.number(args.count)} kijel\xf6lt elem`,
            other: ()=>`${formatter.number(args.count)} kijel\xf6lt elem`
        })} h\xfaz\xe1s\xe1hoz.`,
    "dragSelectedLongPress": (args, formatter)=>`Tartsa lenyomva hosszan ${formatter.plural(args.count, {
            one: ()=>`${formatter.number(args.count)} kijel\xf6lt elem`,
            other: ()=>`${formatter.number(args.count)} kijel\xf6lt elem`
        })} h\xfaz\xe1s\xe1hoz.`,
    "dragStartedKeyboard": `H\xfaz\xe1s megkezdve. Nyomja le a Tab billenty\u{171}t az elenged\xe9si c\xe9lhoz navig\xe1l\xe1s\xe1hoz, majd nyomja le az Enter billenty\u{171}t az elenged\xe9shez, vagy nyomja le az Escape billenty\u{171}t a megszak\xedt\xe1shoz.`,
    "dragStartedTouch": `H\xfaz\xe1s megkezdve. Navig\xe1ljon egy elenged\xe9si c\xe9lhoz, majd koppintson dupl\xe1n az elenged\xe9shez.`,
    "dragStartedVirtual": `H\xfaz\xe1s megkezdve. Navig\xe1ljon egy elenged\xe9si c\xe9lhoz, majd kattintson vagy nyomja le az Enter billenty\u{171}t az elenged\xe9shez.`,
    "dropCanceled": `Elenged\xe9s megszak\xedtva.`,
    "dropComplete": `Elenged\xe9s teljes\xedtve.`,
    "dropDescriptionKeyboard": `Nyomja le az Enter billenty\u{171}t az elenged\xe9shez. Nyomja le az Escape billenty\u{171}t a h\xfaz\xe1s megszak\xedt\xe1s\xe1hoz.`,
    "dropDescriptionTouch": `Koppintson dupl\xe1n az elenged\xe9shez.`,
    "dropDescriptionVirtual": `Kattintson az elenged\xe9shez.`,
    "dropIndicator": `elenged\xe9sjelz\u{151}`,
    "dropOnItem": (args)=>`Elenged\xe9s erre: ${args.itemText}`,
    "dropOnRoot": `Elenged\xe9s erre:`,
    "endDragKeyboard": `H\xfaz\xe1s folyamatban. Nyomja le az Enter billenty\u{171}t a h\xfaz\xe1s megszak\xedt\xe1s\xe1hoz.`,
    "endDragTouch": `H\xfaz\xe1s folyamatban. Koppintson dupl\xe1n a h\xfaz\xe1s megszak\xedt\xe1s\xe1hoz.`,
    "endDragVirtual": `H\xfaz\xe1s folyamatban. Kattintson a h\xfaz\xe1s megszak\xedt\xe1s\xe1hoz.`,
    "insertAfter": (args)=>`Besz\xfar\xe1s ${args.itemText} ut\xe1n`,
    "insertBefore": (args)=>`Besz\xfar\xe1s ${args.itemText} el\xe9`,
    "insertBetween": (args)=>`Besz\xfar\xe1s ${args.beforeItemText} \xe9s ${args.afterItemText} k\xf6z\xe9`
};

var $982d558b45395246$exports = {};
$982d558b45395246$exports = {
    "dragDescriptionKeyboard": `Premi Invio per iniziare a trascinare.`,
    "dragDescriptionKeyboardAlt": `Premi Alt + Invio per iniziare a trascinare.`,
    "dragDescriptionLongPress": `Premi a lungo per iniziare a trascinare.`,
    "dragDescriptionTouch": `Tocca due volte per iniziare a trascinare.`,
    "dragDescriptionVirtual": `Fai clic per iniziare a trascinare.`,
    "dragItem": (args)=>`Trascina ${args.itemText}`,
    "dragSelectedItems": (args, formatter)=>`Trascina ${formatter.plural(args.count, {
            one: ()=>`${formatter.number(args.count)} altro elemento selezionato`,
            other: ()=>`${formatter.number(args.count)} altri elementi selezionati`
        })}`,
    "dragSelectedKeyboard": (args, formatter)=>`Premi Invio per trascinare ${formatter.plural(args.count, {
            one: ()=>`${formatter.number(args.count)} elemento selezionato`,
            other: ()=>`${formatter.number(args.count)} elementi selezionati`
        })}.`,
    "dragSelectedKeyboardAlt": (args, formatter)=>`Premi Alt + Invio per trascinare ${formatter.plural(args.count, {
            one: ()=>`${formatter.number(args.count)} elemento selezionato`,
            other: ()=>`${formatter.number(args.count)} elementi selezionati`
        })}.`,
    "dragSelectedLongPress": (args, formatter)=>`Premi a lungo per trascinare ${formatter.plural(args.count, {
            one: ()=>`${formatter.number(args.count)} elemento selezionato`,
            other: ()=>`${formatter.number(args.count)} elementi selezionati`
        })}.`,
    "dragStartedKeyboard": `Hai iniziato a trascinare. Premi Tab per arrivare sull\u{2019}area di destinazione, quindi premi Invio per rilasciare o Esc per annullare.`,
    "dragStartedTouch": `Hai iniziato a trascinare. Arriva sull\u{2019}area di destinazione, quindi tocca due volte per rilasciare.`,
    "dragStartedVirtual": `Hai iniziato a trascinare. Arriva sull\u{2019}area di destinazione, quindi fai clic o premi Invio per rilasciare.`,
    "dropCanceled": `Rilascio annullato.`,
    "dropComplete": `Rilascio completato.`,
    "dropDescriptionKeyboard": `Premi Invio per rilasciare. Premi Esc per annullare.`,
    "dropDescriptionTouch": `Tocca due volte per rilasciare.`,
    "dropDescriptionVirtual": `Fai clic per rilasciare.`,
    "dropIndicator": `indicatore di rilascio`,
    "dropOnItem": (args)=>`Rilascia su ${args.itemText}`,
    "dropOnRoot": `Rilascia su`,
    "endDragKeyboard": `Trascinamento. Premi Invio per annullare.`,
    "endDragTouch": `Trascinamento. Tocca due volte per annullare.`,
    "endDragVirtual": `Trascinamento. Fai clic per annullare.`,
    "insertAfter": (args)=>`Inserisci dopo ${args.itemText}`,
    "insertBefore": (args)=>`Inserisci prima di ${args.itemText}`,
    "insertBetween": (args)=>`Inserisci tra ${args.beforeItemText} e ${args.afterItemText}`
};

var $6a0cf387b9de036c$exports = {};
$6a0cf387b9de036c$exports = {
    "dragDescriptionKeyboard": `Enter \u{30AD}\u{30FC}\u{3092}\u{62BC}\u{3057}\u{3066}\u{30C9}\u{30E9}\u{30C3}\u{30B0}\u{3092}\u{958B}\u{59CB}\u{3057}\u{3066}\u{304F}\u{3060}\u{3055}\u{3044}\u{3002}`,
    "dragDescriptionKeyboardAlt": `Alt+Enter \u{30AD}\u{30FC}\u{3092}\u{62BC}\u{3057}\u{3066}\u{30C9}\u{30E9}\u{30C3}\u{30B0}\u{3092}\u{958B}\u{59CB}\u{3057}\u{307E}\u{3059}\u{3002}`,
    "dragDescriptionLongPress": `\u{9577}\u{62BC}\u{3057}\u{3057}\u{3066}\u{30C9}\u{30E9}\u{30C3}\u{30B0}\u{3092}\u{958B}\u{59CB}\u{3057}\u{307E}\u{3059}\u{3002}`,
    "dragDescriptionTouch": `\u{30C0}\u{30D6}\u{30EB}\u{30BF}\u{30C3}\u{30D7}\u{3057}\u{3066}\u{30C9}\u{30E9}\u{30C3}\u{30B0}\u{3092}\u{958B}\u{59CB}\u{3057}\u{307E}\u{3059}\u{3002}`,
    "dragDescriptionVirtual": `\u{30AF}\u{30EA}\u{30C3}\u{30AF}\u{3057}\u{3066}\u{30C9}\u{30E9}\u{30C3}\u{30B0}\u{3092}\u{958B}\u{59CB}\u{3057}\u{307E}\u{3059}\u{3002}`,
    "dragItem": (args)=>`${args.itemText} \u{3092}\u{30C9}\u{30E9}\u{30C3}\u{30B0}`,
    "dragSelectedItems": (args, formatter)=>`${formatter.plural(args.count, {
            one: ()=>`${formatter.number(args.count)} \u{500B}\u{306E}\u{9078}\u{629E}\u{9805}\u{76EE}`,
            other: ()=>`${formatter.number(args.count)} \u{500B}\u{306E}\u{9078}\u{629E}\u{9805}\u{76EE}`
        })} \u{3092}\u{30C9}\u{30E9}\u{30C3}\u{30B0}`,
    "dragSelectedKeyboard": (args, formatter)=>`Enter \u{30AD}\u{30FC}\u{3092}\u{62BC}\u{3057}\u{3066}\u{3001}${formatter.plural(args.count, {
            one: ()=>`${formatter.number(args.count)} \u{9078}\u{629E}\u{3057}\u{305F}\u{9805}\u{76EE}`,
            other: ()=>`${formatter.number(args.count)} \u{9078}\u{629E}\u{3057}\u{305F}\u{9805}\u{76EE}`
        })}\u{3092}\u{30C9}\u{30E9}\u{30C3}\u{30B0}\u{3057}\u{307E}\u{3059}\u{3002}`,
    "dragSelectedKeyboardAlt": (args, formatter)=>`Alt+Enter \u{30AD}\u{30FC}\u{3092}\u{62BC}\u{3057}\u{3066}\u{3001}${formatter.plural(args.count, {
            one: ()=>`${formatter.number(args.count)} \u{9078}\u{629E}\u{3057}\u{305F}\u{9805}\u{76EE}`,
            other: ()=>`${formatter.number(args.count)} \u{9078}\u{629E}\u{3057}\u{305F}\u{9805}\u{76EE}`
        })}\u{3092}\u{30C9}\u{30E9}\u{30C3}\u{30B0}\u{3057}\u{307E}\u{3059}\u{3002}`,
    "dragSelectedLongPress": (args, formatter)=>`\u{9577}\u{62BC}\u{3057}\u{3057}\u{3066}\u{3001}${formatter.plural(args.count, {
            one: ()=>`${formatter.number(args.count)} \u{9078}\u{629E}\u{3057}\u{305F}\u{9805}\u{76EE}`,
            other: ()=>`${formatter.number(args.count)} \u{9078}\u{629E}\u{3057}\u{305F}\u{9805}\u{76EE}`
        })}\u{3092}\u{30C9}\u{30E9}\u{30C3}\u{30B0}\u{3057}\u{307E}\u{3059}\u{3002}`,
    "dragStartedKeyboard": `\u{30C9}\u{30E9}\u{30C3}\u{30B0}\u{3092}\u{958B}\u{59CB}\u{3057}\u{307E}\u{3059}\u{3002}Tab \u{30AD}\u{30FC}\u{3092}\u{62BC}\u{3057}\u{3066}\u{30C9}\u{30ED}\u{30C3}\u{30D7}\u{30BF}\u{30FC}\u{30B2}\u{30C3}\u{30C8}\u{306B}\u{3044}\u{3069}\u{3046}\u{3057}\u{3001}Enter \u{30AD}\u{30FC}\u{3092}\u{62BC}\u{3057}\u{3066}\u{30C9}\u{30ED}\u{30C3}\u{30D7}\u{3059}\u{308B}\u{304B}\u{3001}Esc \u{30AD}\u{30FC}\u{3092}\u{62BC}\u{3057}\u{3066}\u{30AD}\u{30E3}\u{30F3}\u{30BB}\u{30EB}\u{3057}\u{307E}\u{3059}\u{3002}`,
    "dragStartedTouch": `\u{30C9}\u{30E9}\u{30C3}\u{30B0}\u{3092}\u{958B}\u{59CB}\u{3057}\u{307E}\u{3057}\u{305F}\u{3002}\u{30C9}\u{30ED}\u{30C3}\u{30D7}\u{306E}\u{30BF}\u{30FC}\u{30B2}\u{30C3}\u{30C8}\u{306B}\u{79FB}\u{52D5}\u{3057}\u{3001}\u{30C0}\u{30D6}\u{30EB}\u{30BF}\u{30C3}\u{30D7}\u{3057}\u{3066}\u{30C9}\u{30ED}\u{30C3}\u{30D7}\u{3057}\u{307E}\u{3059}\u{3002}`,
    "dragStartedVirtual": `\u{30C9}\u{30E9}\u{30C3}\u{30B0}\u{3092}\u{958B}\u{59CB}\u{3057}\u{307E}\u{3057}\u{305F}\u{3002}\u{30C9}\u{30ED}\u{30C3}\u{30D7}\u{306E}\u{30BF}\u{30FC}\u{30B2}\u{30C3}\u{30C8}\u{306B}\u{79FB}\u{52D5}\u{3057}\u{3001}\u{30AF}\u{30EA}\u{30C3}\u{30AF}\u{307E}\u{305F}\u{306F} Enter \u{30AD}\u{30FC}\u{3092}\u{62BC}\u{3057}\u{3066}\u{30C9}\u{30ED}\u{30C3}\u{30D7}\u{3057}\u{307E}\u{3059}\u{3002}`,
    "dropCanceled": `\u{30C9}\u{30ED}\u{30C3}\u{30D7}\u{304C}\u{30AD}\u{30E3}\u{30F3}\u{30BB}\u{30EB}\u{3055}\u{308C}\u{307E}\u{3057}\u{305F}\u{3002}`,
    "dropComplete": `\u{30C9}\u{30ED}\u{30C3}\u{30D7}\u{304C}\u{5B8C}\u{4E86}\u{3057}\u{307E}\u{3057}\u{305F}\u{3002}`,
    "dropDescriptionKeyboard": `Enter \u{30AD}\u{30FC}\u{3092}\u{62BC}\u{3057}\u{3066}\u{30C9}\u{30ED}\u{30C3}\u{30D7}\u{3057}\u{307E}\u{3059}\u{3002}Esc \u{30AD}\u{30FC}\u{3092}\u{62BC}\u{3057}\u{3066}\u{30C9}\u{30E9}\u{30C3}\u{30B0}\u{3092}\u{30AD}\u{30E3}\u{30F3}\u{30BB}\u{30EB}\u{3057}\u{307E}\u{3059}\u{3002}`,
    "dropDescriptionTouch": `\u{30C0}\u{30D6}\u{30EB}\u{30BF}\u{30C3}\u{30D7}\u{3057}\u{3066}\u{30C9}\u{30ED}\u{30C3}\u{30D7}\u{3057}\u{307E}\u{3059}\u{3002}`,
    "dropDescriptionVirtual": `\u{30AF}\u{30EA}\u{30C3}\u{30AF}\u{3057}\u{3066}\u{30C9}\u{30ED}\u{30C3}\u{30D7}\u{3057}\u{307E}\u{3059}\u{3002}`,
    "dropIndicator": `\u{30C9}\u{30ED}\u{30C3}\u{30D7}\u{30A4}\u{30F3}\u{30B8}\u{30B1}\u{30FC}\u{30BF}\u{30FC}`,
    "dropOnItem": (args)=>`${args.itemText} \u{306B}\u{30C9}\u{30ED}\u{30C3}\u{30D7}`,
    "dropOnRoot": `\u{30C9}\u{30ED}\u{30C3}\u{30D7}\u{5834}\u{6240}`,
    "endDragKeyboard": `\u{30C9}\u{30E9}\u{30C3}\u{30B0}\u{3057}\u{3066}\u{3044}\u{307E}\u{3059}\u{3002}Enter \u{30AD}\u{30FC}\u{3092}\u{62BC}\u{3057}\u{3066}\u{30C9}\u{30E9}\u{30C3}\u{30B0}\u{3092}\u{30AD}\u{30E3}\u{30F3}\u{30BB}\u{30EB}\u{3057}\u{307E}\u{3059}\u{3002}`,
    "endDragTouch": `\u{30C9}\u{30E9}\u{30C3}\u{30B0}\u{3057}\u{3066}\u{3044}\u{307E}\u{3059}\u{3002}\u{30C0}\u{30D6}\u{30EB}\u{30BF}\u{30C3}\u{30D7}\u{3057}\u{3066}\u{30C9}\u{30E9}\u{30C3}\u{30B0}\u{3092}\u{30AD}\u{30E3}\u{30F3}\u{30BB}\u{30EB}\u{3057}\u{307E}\u{3059}\u{3002}`,
    "endDragVirtual": `\u{30C9}\u{30E9}\u{30C3}\u{30B0}\u{3057}\u{3066}\u{3044}\u{307E}\u{3059}\u{3002}\u{30AF}\u{30EA}\u{30C3}\u{30AF}\u{3057}\u{3066}\u{30C9}\u{30E9}\u{30C3}\u{30B0}\u{3092}\u{30AD}\u{30E3}\u{30F3}\u{30BB}\u{30EB}\u{3057}\u{307E}\u{3059}\u{3002}`,
    "insertAfter": (args)=>`${args.itemText} \u{306E}\u{5F8C}\u{306B}\u{633F}\u{5165}`,
    "insertBefore": (args)=>`${args.itemText} \u{306E}\u{524D}\u{306B}\u{633F}\u{5165}`,
    "insertBetween": (args)=>`${args.beforeItemText} \u{3068} ${args.afterItemText} \u{306E}\u{9593}\u{306B}\u{633F}\u{5165}`
};

var $a97fefa2956f4bcb$exports = {};
$a97fefa2956f4bcb$exports = {
    "dragDescriptionKeyboard": `\u{B4DC}\u{B798}\u{ADF8}\u{B97C} \u{C2DC}\u{C791}\u{D558}\u{B824}\u{BA74} Enter\u{B97C} \u{B204}\u{B974}\u{C138}\u{C694}.`,
    "dragDescriptionKeyboardAlt": `\u{B4DC}\u{B798}\u{ADF8}\u{B97C} \u{C2DC}\u{C791}\u{D558}\u{B824}\u{BA74} Alt + Enter\u{B97C} \u{B204}\u{B974}\u{C2ED}\u{C2DC}\u{C624}.`,
    "dragDescriptionLongPress": `\u{B4DC}\u{B798}\u{ADF8}\u{B97C} \u{C2DC}\u{C791}\u{D558}\u{B824}\u{BA74} \u{AE38}\u{AC8C} \u{B204}\u{B974}\u{C2ED}\u{C2DC}\u{C624}.`,
    "dragDescriptionTouch": `\u{B4DC}\u{B798}\u{ADF8}\u{B97C} \u{C2DC}\u{C791}\u{D558}\u{B824}\u{BA74} \u{B354}\u{BE14} \u{D0ED}\u{D558}\u{C138}\u{C694}.`,
    "dragDescriptionVirtual": `\u{B4DC}\u{B798}\u{ADF8}\u{B97C} \u{C2DC}\u{C791}\u{D558}\u{B824}\u{BA74} \u{D074}\u{B9AD}\u{D558}\u{C138}\u{C694}.`,
    "dragItem": (args)=>`${args.itemText} \u{B4DC}\u{B798}\u{ADF8}`,
    "dragSelectedItems": (args, formatter)=>`${formatter.plural(args.count, {
            one: ()=>`${formatter.number(args.count)}\u{AC1C} \u{C120}\u{D0DD} \u{D56D}\u{BAA9}`,
            other: ()=>`${formatter.number(args.count)}\u{AC1C} \u{C120}\u{D0DD} \u{D56D}\u{BAA9}`
        })} \u{B4DC}\u{B798}\u{ADF8}`,
    "dragSelectedKeyboard": (args, formatter)=>`${formatter.plural(args.count, {
            one: ()=>`${formatter.number(args.count)}\u{AC1C} \u{C120}\u{D0DD} \u{D56D}\u{BAA9}`,
            other: ()=>`${formatter.number(args.count)}\u{AC1C} \u{C120}\u{D0DD} \u{D56D}\u{BAA9}`
        })}\u{C744} \u{B4DC}\u{B798}\u{ADF8}\u{D558}\u{B824}\u{BA74} Enter\u{B97C} \u{B204}\u{B974}\u{C2ED}\u{C2DC}\u{C624}.`,
    "dragSelectedKeyboardAlt": (args, formatter)=>`${formatter.plural(args.count, {
            one: ()=>`${formatter.number(args.count)}\u{AC1C} \u{C120}\u{D0DD} \u{D56D}\u{BAA9}`,
            other: ()=>`${formatter.number(args.count)}\u{AC1C} \u{C120}\u{D0DD} \u{D56D}\u{BAA9}`
        })}\u{C744} \u{B4DC}\u{B798}\u{ADF8}\u{D558}\u{B824}\u{BA74} Alt + Enter\u{B97C} \u{B204}\u{B974}\u{C2ED}\u{C2DC}\u{C624}.`,
    "dragSelectedLongPress": (args, formatter)=>`${formatter.plural(args.count, {
            one: ()=>`${formatter.number(args.count)}\u{AC1C} \u{C120}\u{D0DD} \u{D56D}\u{BAA9}`,
            other: ()=>`${formatter.number(args.count)}\u{AC1C} \u{C120}\u{D0DD} \u{D56D}\u{BAA9}`
        })}\u{C744} \u{B4DC}\u{B798}\u{ADF8}\u{D558}\u{B824}\u{BA74} \u{AE38}\u{AC8C} \u{B204}\u{B974}\u{C2ED}\u{C2DC}\u{C624}.`,
    "dragStartedKeyboard": `\u{B4DC}\u{B798}\u{ADF8}\u{AC00} \u{C2DC}\u{C791}\u{B418}\u{C5C8}\u{C2B5}\u{B2C8}\u{B2E4}. Tab\u{C744} \u{B20C}\u{B7EC} \u{B4DC}\u{B86D} \u{B300}\u{C0C1}\u{C73C}\u{B85C} \u{C774}\u{B3D9}\u{D55C} \u{B2E4}\u{C74C} Enter\u{B97C} \u{B20C}\u{B7EC} \u{B4DC}\u{B86D}\u{D558}\u{AC70}\u{B098} Esc\u{B97C} \u{B20C}\u{B7EC} \u{CDE8}\u{C18C}\u{D558}\u{C138}\u{C694}.`,
    "dragStartedTouch": `\u{B4DC}\u{B798}\u{ADF8}\u{AC00} \u{C2DC}\u{C791}\u{B418}\u{C5C8}\u{C2B5}\u{B2C8}\u{B2E4}. \u{B4DC}\u{B86D} \u{B300}\u{C0C1}\u{C73C}\u{B85C} \u{C774}\u{B3D9}\u{D55C} \u{B2E4}\u{C74C} \u{B354}\u{BE14} \u{D0ED}\u{D558}\u{C5EC} \u{B4DC}\u{B86D}\u{D558}\u{C138}\u{C694}.`,
    "dragStartedVirtual": `\u{B4DC}\u{B798}\u{ADF8}\u{AC00} \u{C2DC}\u{C791}\u{B418}\u{C5C8}\u{C2B5}\u{B2C8}\u{B2E4}. \u{B4DC}\u{B86D} \u{B300}\u{C0C1}\u{C73C}\u{B85C} \u{C774}\u{B3D9}\u{D55C} \u{B2E4}\u{C74C} \u{D074}\u{B9AD}\u{D558}\u{AC70}\u{B098} Enter\u{B97C} \u{B20C}\u{B7EC} \u{B4DC}\u{B86D}\u{D558}\u{C138}\u{C694}.`,
    "dropCanceled": `\u{B4DC}\u{B86D}\u{C774} \u{CDE8}\u{C18C}\u{B418}\u{C5C8}\u{C2B5}\u{B2C8}\u{B2E4}.`,
    "dropComplete": `\u{B4DC}\u{B86D}\u{C774} \u{C644}\u{B8CC}\u{B418}\u{C5C8}\u{C2B5}\u{B2C8}\u{B2E4}.`,
    "dropDescriptionKeyboard": `\u{B4DC}\u{B86D}\u{D558}\u{B824}\u{BA74} Enter\u{B97C} \u{B204}\u{B974}\u{C138}\u{C694}. \u{B4DC}\u{B798}\u{ADF8}\u{B97C} \u{CDE8}\u{C18C}\u{D558}\u{B824}\u{BA74} Esc\u{B97C} \u{B204}\u{B974}\u{C138}\u{C694}.`,
    "dropDescriptionTouch": `\u{B354}\u{BE14} \u{D0ED}\u{D558}\u{C5EC} \u{B4DC}\u{B86D}\u{D558}\u{C138}\u{C694}.`,
    "dropDescriptionVirtual": `\u{B4DC}\u{B86D}\u{D558}\u{B824}\u{BA74} \u{D074}\u{B9AD}\u{D558}\u{C138}\u{C694}.`,
    "dropIndicator": `\u{B4DC}\u{B86D} \u{D45C}\u{C2DC}\u{AE30}`,
    "dropOnItem": (args)=>`${args.itemText}\u{C5D0} \u{B4DC}\u{B86D}`,
    "dropOnRoot": `\u{B4DC}\u{B86D} \u{B300}\u{C0C1}`,
    "endDragKeyboard": `\u{B4DC}\u{B798}\u{ADF8} \u{C911}\u{C785}\u{B2C8}\u{B2E4}. \u{B4DC}\u{B798}\u{ADF8}\u{B97C} \u{CDE8}\u{C18C}\u{D558}\u{B824}\u{BA74} Enter\u{B97C} \u{B204}\u{B974}\u{C138}\u{C694}.`,
    "endDragTouch": `\u{B4DC}\u{B798}\u{ADF8} \u{C911}\u{C785}\u{B2C8}\u{B2E4}. \u{B4DC}\u{B798}\u{ADF8}\u{B97C} \u{CDE8}\u{C18C}\u{D558}\u{B824}\u{BA74} \u{B354}\u{BE14} \u{D0ED}\u{D558}\u{C138}\u{C694}.`,
    "endDragVirtual": `\u{B4DC}\u{B798}\u{ADF8} \u{C911}\u{C785}\u{B2C8}\u{B2E4}. \u{B4DC}\u{B798}\u{ADF8}\u{B97C} \u{CDE8}\u{C18C}\u{D558}\u{B824}\u{BA74} \u{D074}\u{B9AD}\u{D558}\u{C138}\u{C694}.`,
    "insertAfter": (args)=>`${args.itemText} \u{C774}\u{D6C4}\u{C5D0} \u{C0BD}\u{C785}`,
    "insertBefore": (args)=>`${args.itemText} \u{C774}\u{C804}\u{C5D0} \u{C0BD}\u{C785}`,
    "insertBetween": (args)=>`${args.beforeItemText} \u{BC0F} ${args.afterItemText} \u{C0AC}\u{C774}\u{C5D0} \u{C0BD}\u{C785}`
};

var $5fb5837f94e1c150$exports = {};
$5fb5837f94e1c150$exports = {
    "dragDescriptionKeyboard": `Paspauskite \u{201E}Enter\u{201C}, kad prad\u{117}tum\u{117}te vilkti.`,
    "dragDescriptionKeyboardAlt": `Paspauskite \u{201E}Alt + Enter\u{201C}, kad prad\u{117}tum\u{117}te vilkti.`,
    "dragDescriptionLongPress": `Palaikykite nuspaud\u{119}, kad prad\u{117}tum\u{117}te vilkti.`,
    "dragDescriptionTouch": `Palieskite dukart, kad prad\u{117}tum\u{117}te vilkti.`,
    "dragDescriptionVirtual": `Spustel\u{117}kite, kad prad\u{117}tum\u{117}te vilkti.`,
    "dragItem": (args)=>`Vilkti ${args.itemText}`,
    "dragSelectedItems": (args, formatter)=>`Vilkti ${formatter.plural(args.count, {
            one: ()=>`${formatter.number(args.count)} pasirinkt\u{105} element\u{105}`,
            other: ()=>`${formatter.number(args.count)} pasirinktus elementus`
        })}`,
    "dragSelectedKeyboard": (args, formatter)=>`Paspauskite \u{201E}Enter\u{201C}, jei norite nuvilkti ${formatter.plural(args.count, {
            one: ()=>`${formatter.number(args.count)} pasirinkt\u{105} element\u{105}`,
            other: ()=>`${formatter.number(args.count)} pasirinktus elementus`
        })}.`,
    "dragSelectedKeyboardAlt": (args, formatter)=>`Paspauskite \u{201E}Alt + Enter\u{201C}, kad nuvilktum\u{117}te ${formatter.plural(args.count, {
            one: ()=>`${formatter.number(args.count)} pasirinkt\u{105} element\u{105}`,
            other: ()=>`${formatter.number(args.count)} pasirinktus elementus`
        })}.`,
    "dragSelectedLongPress": (args, formatter)=>`Nuspaud\u{119} palaikykite, kad nuvilktum\u{117}te ${formatter.plural(args.count, {
            one: ()=>`${formatter.number(args.count)} pasirinkt\u{105} element\u{105}`,
            other: ()=>`${formatter.number(args.count)} pasirinktus elementus`
        })}.`,
    "dragStartedKeyboard": `Prad\u{117}ta vilkti. Paspauskite \u{201E}Tab\u{201C}, kad pereitum\u{117}te \u{12F} tiesiogin\u{119} paskirties viet\u{105}, tada paspauskite \u{201E}Enter\u{201C}, kad numestum\u{117}te, arba \u{201E}Escape\u{201C}, kad at\u{161}auktum\u{117}te.`,
    "dragStartedTouch": `Prad\u{117}ta vilkti. Eikite \u{12F} tiesiogin\u{119} paskirties viet\u{105}, tada palieskite dukart, kad numestum\u{117}te.`,
    "dragStartedVirtual": `Prad\u{117}ta vilkti. Eikite \u{12F} tiesiogin\u{119} paskirties viet\u{105} ir spustel\u{117}kite arba paspauskite \u{201E}Enter\u{201C}, kad numestum\u{117}te.`,
    "dropCanceled": `Numetimas at\u{161}auktas.`,
    "dropComplete": `Numesta.`,
    "dropDescriptionKeyboard": `Paspauskite \u{201E}Enter\u{201C}, kad numestum\u{117}te. Paspauskite \u{201E}Escape\u{201C}, kad at\u{161}auktum\u{117}te vilkim\u{105}.`,
    "dropDescriptionTouch": `Palieskite dukart, kad numestum\u{117}te.`,
    "dropDescriptionVirtual": `Spustel\u{117}kite, kad numestum\u{117}te.`,
    "dropIndicator": `numetimo indikatorius`,
    "dropOnItem": (args)=>`Numesti ant ${args.itemText}`,
    "dropOnRoot": `Numesti ant`,
    "endDragKeyboard": `Velkama. Paspauskite \u{201E}Enter\u{201C}, kad at\u{161}auktum\u{117}te vilkim\u{105}.`,
    "endDragTouch": `Velkama. Spustel\u{117}kite dukart, kad at\u{161}auktum\u{117}te vilkim\u{105}.`,
    "endDragVirtual": `Velkama. Spustel\u{117}kite, kad at\u{161}auktum\u{117}te vilkim\u{105}.`,
    "insertAfter": (args)=>`\u{12E}terpti po ${args.itemText}`,
    "insertBefore": (args)=>`\u{12E}terpti prie\u{161} ${args.itemText}`,
    "insertBetween": (args)=>`\u{12E}terpti tarp ${args.beforeItemText} ir ${args.afterItemText}`
};

var $5b2e5709864cc922$exports = {};
$5b2e5709864cc922$exports = {
    "dragDescriptionKeyboard": `Nospiediet Enter, lai s\u{101}ktu vilk\u{161}anu.`,
    "dragDescriptionKeyboardAlt": `Nospiediet tausti\u{146}u kombin\u{101}ciju Alt+Enter, lai s\u{101}ktu vilk\u{161}anu.`,
    "dragDescriptionLongPress": `Turiet nospiestu, lai s\u{101}ktu vilk\u{161}anu.`,
    "dragDescriptionTouch": `Veiciet dubultsk\u{101}rienu, lai s\u{101}ktu vilk\u{161}anu.`,
    "dragDescriptionVirtual": `Noklik\u{161}\u{137}iniet, lai s\u{101}ktu vilk\u{161}anu.`,
    "dragItem": (args)=>`Velciet ${args.itemText}`,
    "dragSelectedItems": (args, formatter)=>`Velciet ${formatter.plural(args.count, {
            one: ()=>`${formatter.number(args.count)} atlas\u{12B}to vienumu`,
            other: ()=>`${formatter.number(args.count)} atlas\u{12B}tos vienumus`
        })}`,
    "dragSelectedKeyboard": (args, formatter)=>`Nospiediet tausti\u{146}u Enter, lai vilktu ${formatter.plural(args.count, {
            one: ()=>`${formatter.number(args.count)} atlas\u{12B}to vienumu`,
            other: ()=>`${formatter.number(args.count)} atlas\u{12B}tos vienumus`
        })}.`,
    "dragSelectedKeyboardAlt": (args, formatter)=>`Nospiediet tausti\u{146}u kombin\u{101}ciju Alt+Enter, lai vilktu ${formatter.plural(args.count, {
            one: ()=>`${formatter.number(args.count)} atlas\u{12B}to vienumu`,
            other: ()=>`${formatter.number(args.count)} atlas\u{12B}tos vienumus`
        })}.`,
    "dragSelectedLongPress": (args, formatter)=>`Turiet nospiestu, lai vilktu ${formatter.plural(args.count, {
            one: ()=>`${formatter.number(args.count)} atlas\u{12B}to vienumu`,
            other: ()=>`${formatter.number(args.count)} atlas\u{12B}tos vienumus`
        })}.`,
    "dragStartedKeyboard": `Uzs\u{101}kta vilk\u{161}ana. Nospiediet tausti\u{146}u Tab, lai p\u{101}rietu uz nome\u{161}anas m\u{113}r\u{137}i, p\u{113}c tam nospiediet Enter, lai nomestu, vai nospiediet Escape, lai atceltu.`,
    "dragStartedTouch": `Uzs\u{101}kta vilk\u{161}ana. P\u{101}rejiet uz nome\u{161}anas m\u{113}r\u{137}i, p\u{113}c tam veiciet dubultsk\u{101}rienu, lai nomestu.`,
    "dragStartedVirtual": `Uzs\u{101}kta vilk\u{161}ana. P\u{101}rejiet uz nome\u{161}anas m\u{113}r\u{137}i, p\u{113}c tam nospiediet Enter, lai nomestu.`,
    "dropCanceled": `Nome\u{161}ana atcelta.`,
    "dropComplete": `Nome\u{161}ana pabeigta.`,
    "dropDescriptionKeyboard": `Nospiediet Enter, lai nomestu. Nospiediet Escape, lai atceltu vilk\u{161}anu.`,
    "dropDescriptionTouch": `Veiciet dubultsk\u{101}rienu, lai nomestu.`,
    "dropDescriptionVirtual": `Noklik\u{161}\u{137}iniet, lai nomestu.`,
    "dropIndicator": `nome\u{161}anas indikators`,
    "dropOnItem": (args)=>`Nometiet uz ${args.itemText}`,
    "dropOnRoot": `Nometiet uz`,
    "endDragKeyboard": `Notiek vilk\u{161}ana. Nospiediet Enter, lai atceltu vilk\u{161}anu.`,
    "endDragTouch": `Notiek vilk\u{161}ana. Veiciet dubultsk\u{101}rienu, lai atceltu vilk\u{161}anu.`,
    "endDragVirtual": `Notiek vilk\u{161}ana. Noklik\u{161}\u{137}iniet, lai atceltu vilk\u{161}anu.`,
    "insertAfter": (args)=>`Ievietojiet p\u{113}c ${args.itemText}`,
    "insertBefore": (args)=>`Ievietojiet pirms ${args.itemText}`,
    "insertBetween": (args)=>`Ievietojiet starp ${args.beforeItemText} un ${args.afterItemText}`
};

var $ee15bb8efb18cc69$exports = {};
$ee15bb8efb18cc69$exports = {
    "dragDescriptionKeyboard": `Trykk p\xe5 Enter for \xe5 begynne \xe5 dra.`,
    "dragDescriptionKeyboardAlt": `Trykk p\xe5 Alt + Enter for \xe5 begynne \xe5 dra.`,
    "dragDescriptionLongPress": `Trykk lenge for \xe5 begynne \xe5 dra.`,
    "dragDescriptionTouch": `Dobbelttrykk for \xe5 begynne \xe5 dra.`,
    "dragDescriptionVirtual": `Klikk for \xe5 begynne \xe5 dra.`,
    "dragItem": (args)=>`Dra ${args.itemText}`,
    "dragSelectedItems": (args, formatter)=>`Dra ${formatter.plural(args.count, {
            one: ()=>`${formatter.number(args.count)} merket element`,
            other: ()=>`${formatter.number(args.count)} merkede elementer`
        })}`,
    "dragSelectedKeyboard": (args, formatter)=>`Trykk Enter for \xe5 dra ${formatter.plural(args.count, {
            one: ()=>`${formatter.number(args.count)} valgt element`,
            other: ()=>`${formatter.number(args.count)} valgte elementer`
        })}.`,
    "dragSelectedKeyboardAlt": (args, formatter)=>`Trykk p\xe5 Alt + Enter for \xe5 dra ${formatter.plural(args.count, {
            one: ()=>`${formatter.number(args.count)} valgt element`,
            other: ()=>`${formatter.number(args.count)} valgte elementer`
        })}.`,
    "dragSelectedLongPress": (args, formatter)=>`Trykk lenge for \xe5 dra ${formatter.plural(args.count, {
            one: ()=>`${formatter.number(args.count)} valgt element`,
            other: ()=>`${formatter.number(args.count)} valgte elementer`
        })}.`,
    "dragStartedKeyboard": `Begynte \xe5 dra. Trykk p\xe5 Tab for \xe5 navigere til et m\xe5l, og trykk deretter p\xe5 Enter for \xe5 slippe eller p\xe5 Esc for \xe5 avbryte.`,
    "dragStartedTouch": `Begynte \xe5 dra. Naviger til et m\xe5l, og dobbelttrykk for \xe5 slippe.`,
    "dragStartedVirtual": `Begynte \xe5 dra. Naviger til et m\xe5l, og klikk eller trykk p\xe5 Enter for \xe5 slippe.`,
    "dropCanceled": `Avbr\xf8t slipping.`,
    "dropComplete": `Slippingen er fullf\xf8rt.`,
    "dropDescriptionKeyboard": `Trykk p\xe5 Enter for \xe5 slippe. Trykk p\xe5 Esc hvis du vil avbryte draingen.`,
    "dropDescriptionTouch": `Dobbelttrykk for \xe5 slippe.`,
    "dropDescriptionVirtual": `Klikk for \xe5 slippe.`,
    "dropIndicator": `slippeindikator`,
    "dropOnItem": (args)=>`Slipp p\xe5 ${args.itemText}`,
    "dropOnRoot": `Slipp p\xe5`,
    "endDragKeyboard": `Drar. Trykk p\xe5 Enter hvis du vil avbryte.`,
    "endDragTouch": `Drar. Dobbelttrykk hvis du vil avbryte.`,
    "endDragVirtual": `Drar. Klikk hvis du vil avbryte.`,
    "insertAfter": (args)=>`Sett inn etter ${args.itemText}`,
    "insertBefore": (args)=>`Sett inn f\xf8r ${args.itemText}`,
    "insertBetween": (args)=>`Sett inn mellom ${args.beforeItemText} og ${args.afterItemText}`
};

var $1daf2d4602e26ac4$exports = {};
$1daf2d4602e26ac4$exports = {
    "dragDescriptionKeyboard": `Druk op Enter om te slepen.`,
    "dragDescriptionKeyboardAlt": `Druk op Alt + Enter om te slepen.`,
    "dragDescriptionLongPress": `Houd lang ingedrukt om te slepen.`,
    "dragDescriptionTouch": `Dubbeltik om te slepen.`,
    "dragDescriptionVirtual": `Klik om met slepen te starten.`,
    "dragItem": (args)=>`${args.itemText} slepen`,
    "dragSelectedItems": (args, formatter)=>`${formatter.plural(args.count, {
            one: ()=>`${formatter.number(args.count)} geselecteerd item`,
            other: ()=>`${formatter.number(args.count)} geselecteerde items`
        })} slepen`,
    "dragSelectedKeyboard": (args, formatter)=>`Druk op Enter om ${formatter.plural(args.count, {
            one: ()=>`${formatter.number(args.count)} geselecteerd item`,
            other: ()=>`${formatter.number(args.count)} geselecteerde items`
        })} te slepen.`,
    "dragSelectedKeyboardAlt": (args, formatter)=>`Druk op Alt + Enter om ${formatter.plural(args.count, {
            one: ()=>`${formatter.number(args.count)} geselecteerd item`,
            other: ()=>`${formatter.number(args.count)} geselecteerde items`
        })} te slepen.`,
    "dragSelectedLongPress": (args, formatter)=>`Houd lang ingedrukt om ${formatter.plural(args.count, {
            one: ()=>`${formatter.number(args.count)} geselecteerd item`,
            other: ()=>`${formatter.number(args.count)} geselecteerde items`
        })} te slepen.`,
    "dragStartedKeyboard": `Begonnen met slepen. Druk op Tab om naar een locatie te gaan. Druk dan op Enter om neer te zetten, of op Esc om te annuleren.`,
    "dragStartedTouch": `Begonnen met slepen. Ga naar de gewenste locatie en dubbeltik om neer te zetten.`,
    "dragStartedVirtual": `Begonnen met slepen. Ga naar de gewenste locatie en klik of druk op Enter om neer te zetten.`,
    "dropCanceled": `Neerzetten geannuleerd.`,
    "dropComplete": `Neerzetten voltooid.`,
    "dropDescriptionKeyboard": `Druk op Enter om neer te zetten. Druk op Esc om het slepen te annuleren.`,
    "dropDescriptionTouch": `Dubbeltik om neer te zetten.`,
    "dropDescriptionVirtual": `Klik om neer te zetten.`,
    "dropIndicator": `aanwijzer voor neerzetten`,
    "dropOnItem": (args)=>`Neerzetten op ${args.itemText}`,
    "dropOnRoot": `Neerzetten op`,
    "endDragKeyboard": `Bezig met slepen. Druk op Enter om te annuleren.`,
    "endDragTouch": `Bezig met slepen. Dubbeltik om te annuleren.`,
    "endDragVirtual": `Bezig met slepen. Klik om te annuleren.`,
    "insertAfter": (args)=>`Plaatsen na ${args.itemText}`,
    "insertBefore": (args)=>`Plaatsen v\xf3\xf3r ${args.itemText}`,
    "insertBetween": (args)=>`Plaatsen tussen ${args.beforeItemText} en ${args.afterItemText}`
};

var $7115429b0f60511f$exports = {};
$7115429b0f60511f$exports = {
    "dragDescriptionKeyboard": `Naci\u{15B}nij Enter, aby rozpocz\u{105}\u{107} przeci\u{105}ganie.`,
    "dragDescriptionKeyboardAlt": `Naci\u{15B}nij Alt + Enter, aby rozpocz\u{105}\u{107} przeci\u{105}ganie.`,
    "dragDescriptionLongPress": `Naci\u{15B}nij i przytrzymaj, aby rozpocz\u{105}\u{107} przeci\u{105}ganie.`,
    "dragDescriptionTouch": `Dotknij dwukrotnie, aby rozpocz\u{105}\u{107} przeci\u{105}ganie.`,
    "dragDescriptionVirtual": `Kliknij, aby rozpocz\u{105}\u{107} przeci\u{105}ganie.`,
    "dragItem": (args)=>`Przeci\u{105}gnij ${args.itemText}`,
    "dragSelectedItems": (args, formatter)=>`Przeci\u{105}gnij ${formatter.plural(args.count, {
            one: ()=>`${formatter.number(args.count)} wybrany element`,
            other: ()=>`${formatter.number(args.count)} wybranych element\xf3w`
        })}`,
    "dragSelectedKeyboard": (args, formatter)=>`Naci\u{15B}nij Enter, aby przeci\u{105}gn\u{105}\u{107} ${formatter.plural(args.count, {
            one: ()=>`${formatter.number(args.count)} wybrany element`,
            other: ()=>`${formatter.number(args.count)} wybrane(-ych) elementy(-\xf3w)`
        })}.`,
    "dragSelectedKeyboardAlt": (args, formatter)=>`Naci\u{15B}nij Alt + Enter, aby przeci\u{105}gn\u{105}\u{107} ${formatter.plural(args.count, {
            one: ()=>`${formatter.number(args.count)} wybrany element`,
            other: ()=>`${formatter.number(args.count)} wybrane(-ych) elementy(-\xf3w)`
        })}.`,
    "dragSelectedLongPress": (args, formatter)=>`Naci\u{15B}nij i przytrzymaj, aby przeci\u{105}gn\u{105}\u{107} ${formatter.plural(args.count, {
            one: ()=>`${formatter.number(args.count)} wybrany element`,
            other: ()=>`${formatter.number(args.count)} wybrane(-ych) elementy(-\xf3w)`
        })}.`,
    "dragStartedKeyboard": `Rozpocz\u{119}to przeci\u{105}ganie. Naci\u{15B}nij Tab, aby wybra\u{107} miejsce docelowe, a nast\u{119}pnie naci\u{15B}nij Enter, aby upu\u{15B}ci\u{107}, lub Escape, aby anulowa\u{107}.`,
    "dragStartedTouch": `Rozpocz\u{119}to przeci\u{105}ganie. Wybierz miejsce, w kt\xf3rym chcesz upu\u{15B}ci\u{107} element, a nast\u{119}pnie dotknij dwukrotnie, aby upu\u{15B}ci\u{107}.F`,
    "dragStartedVirtual": `Rozpocz\u{119}to przeci\u{105}ganie. Wybierz miejsce, w kt\xf3rym chcesz upu\u{15B}ci\u{107} element, a nast\u{119}pnie kliknij lub naci\u{15B}nij Enter, aby upu\u{15B}ci\u{107}.`,
    "dropCanceled": `Anulowano upuszczenie.`,
    "dropComplete": `Zako\u{144}czono upuszczanie.`,
    "dropDescriptionKeyboard": `Naci\u{15B}nij Enter, aby upu\u{15B}ci\u{107}. Naci\u{15B}nij Escape, aby anulowa\u{107} przeci\u{105}gni\u{119}cie.`,
    "dropDescriptionTouch": `Dotknij dwukrotnie, aby upu\u{15B}ci\u{107}.`,
    "dropDescriptionVirtual": `Kliknij, aby upu\u{15B}ci\u{107}.`,
    "dropIndicator": `wska\u{17A}nik upuszczenia`,
    "dropOnItem": (args)=>`Upu\u{15B}\u{107} na ${args.itemText}`,
    "dropOnRoot": `Upu\u{15B}\u{107}`,
    "endDragKeyboard": `Przeci\u{105}ganie. Naci\u{15B}nij Enter, aby anulowa\u{107} przeci\u{105}gni\u{119}cie.`,
    "endDragTouch": `Przeci\u{105}ganie. Kliknij dwukrotnie, aby anulowa\u{107} przeci\u{105}gni\u{119}cie.`,
    "endDragVirtual": `Przeci\u{105}ganie. Kliknij, aby anulowa\u{107} przeci\u{105}ganie.`,
    "insertAfter": (args)=>`Umie\u{15B}\u{107} za ${args.itemText}`,
    "insertBefore": (args)=>`Umie\u{15B}\u{107} przed ${args.itemText}`,
    "insertBetween": (args)=>`Umie\u{15B}\u{107} mi\u{119}dzy ${args.beforeItemText} i ${args.afterItemText}`
};

var $5edd453ae5d4a8bc$exports = {};
$5edd453ae5d4a8bc$exports = {
    "dragDescriptionKeyboard": `Pressione Enter para come\xe7ar a arrastar.`,
    "dragDescriptionKeyboardAlt": `Pressione Alt + Enter para come\xe7ar a arrastar.`,
    "dragDescriptionLongPress": `Pressione e segure para come\xe7ar a arrastar.`,
    "dragDescriptionTouch": `Toque duas vezes para come\xe7ar a arrastar.`,
    "dragDescriptionVirtual": `Clique para come\xe7ar a arrastar.`,
    "dragItem": (args)=>`Arrastar ${args.itemText}`,
    "dragSelectedItems": (args, formatter)=>`Arrastar ${formatter.plural(args.count, {
            one: ()=>`${formatter.number(args.count)} item selecionado`,
            other: ()=>`${formatter.number(args.count)} itens selecionados`
        })}`,
    "dragSelectedKeyboard": (args, formatter)=>`Pressione Enter para arrastar ${formatter.plural(args.count, {
            one: ()=>`${formatter.number(args.count)} o item selecionado`,
            other: ()=>`${formatter.number(args.count)} os itens selecionados`
        })}.`,
    "dragSelectedKeyboardAlt": (args, formatter)=>`Pressione Alt + Enter para arrastar ${formatter.plural(args.count, {
            one: ()=>`${formatter.number(args.count)} o item selecionado`,
            other: ()=>`${formatter.number(args.count)} os itens selecionados`
        })}.`,
    "dragSelectedLongPress": (args, formatter)=>`Pressione e segure para arrastar ${formatter.plural(args.count, {
            one: ()=>`${formatter.number(args.count)} o item selecionado`,
            other: ()=>`${formatter.number(args.count)} os itens selecionados`
        })}.`,
    "dragStartedKeyboard": `Comece a arrastar. Pressione Tab para navegar at\xe9 um alvo e, em seguida, pressione Enter para soltar ou pressione Escape para cancelar.`,
    "dragStartedTouch": `Comece a arrastar. Navegue at\xe9 um alvo e toque duas vezes para soltar.`,
    "dragStartedVirtual": `Comece a arrastar. Navegue at\xe9 um alvo e clique ou pressione Enter para soltar.`,
    "dropCanceled": `Libera\xe7\xe3o cancelada.`,
    "dropComplete": `Libera\xe7\xe3o conclu\xedda.`,
    "dropDescriptionKeyboard": `Pressione Enter para soltar. Pressione Escape para cancelar.`,
    "dropDescriptionTouch": `Toque duas vezes para soltar.`,
    "dropDescriptionVirtual": `Clique para soltar.`,
    "dropIndicator": `indicador de libera\xe7\xe3o`,
    "dropOnItem": (args)=>`Soltar em ${args.itemText}`,
    "dropOnRoot": `Soltar`,
    "endDragKeyboard": `Arrastando. Pressione Enter para cancelar.`,
    "endDragTouch": `Arrastando. Toque duas vezes para cancelar.`,
    "endDragVirtual": `Arrastando. Clique para cancelar.`,
    "insertAfter": (args)=>`Inserir ap\xf3s ${args.itemText}`,
    "insertBefore": (args)=>`Inserir antes de ${args.itemText}`,
    "insertBetween": (args)=>`Inserir entre ${args.beforeItemText} e ${args.afterItemText}`
};

var $5f431994f708535e$exports = {};
$5f431994f708535e$exports = {
    "dragDescriptionKeyboard": `Prima Enter para iniciar o arrasto.`,
    "dragDescriptionKeyboardAlt": `Prima Alt + Enter para iniciar o arrasto.`,
    "dragDescriptionLongPress": `Prima longamente para come\xe7ar a arrastar.`,
    "dragDescriptionTouch": `Fa\xe7a duplo toque para come\xe7ar a arrastar.`,
    "dragDescriptionVirtual": `Clique para iniciar o arrasto.`,
    "dragItem": (args)=>`Arrastar ${args.itemText}`,
    "dragSelectedItems": (args, formatter)=>`Arrastar ${formatter.plural(args.count, {
            one: ()=>`${formatter.number(args.count)} item selecionado`,
            other: ()=>`${formatter.number(args.count)} itens selecionados`
        })}`,
    "dragSelectedKeyboard": (args, formatter)=>`Prima Enter para arrastar ${formatter.plural(args.count, {
            one: ()=>`${formatter.number(args.count)} o item selecionado`,
            other: ()=>`${formatter.number(args.count)} os itens selecionados`
        })}.`,
    "dragSelectedKeyboardAlt": (args, formatter)=>`Prima Alt + Enter para arrastar ${formatter.plural(args.count, {
            one: ()=>`${formatter.number(args.count)} o item selecionado`,
            other: ()=>`${formatter.number(args.count)} os itens selecionados`
        })}.`,
    "dragSelectedLongPress": (args, formatter)=>`Prima longamente para arrastar ${formatter.plural(args.count, {
            one: ()=>`${formatter.number(args.count)} o item selecionado`,
            other: ()=>`${formatter.number(args.count)} os itens selecionados`
        })}.`,
    "dragStartedKeyboard": `Arrasto iniciado. Prima a tecla de tabula\xe7\xe3o para navegar para um destino para largar, e em seguida prima Enter para largar ou prima Escape para cancelar.`,
    "dragStartedTouch": `Arrasto iniciado. Navegue para um destino para largar, e em seguida fa\xe7a duplo toque para largar.`,
    "dragStartedVirtual": `Arrasto iniciado. Navegue para um destino para largar, e em seguida clique ou prima Enter para largar.`,
    "dropCanceled": `Largar cancelado.`,
    "dropComplete": `Largar completo.`,
    "dropDescriptionKeyboard": `Prima Enter para largar. Prima Escape para cancelar o arrasto.`,
    "dropDescriptionTouch": `Fa\xe7a duplo toque para largar.`,
    "dropDescriptionVirtual": `Clique para largar.`,
    "dropIndicator": `Indicador de largar`,
    "dropOnItem": (args)=>`Largar em ${args.itemText}`,
    "dropOnRoot": `Largar em`,
    "endDragKeyboard": `A arrastar. Prima Enter para cancelar o arrasto.`,
    "endDragTouch": `A arrastar. Fa\xe7a duplo toque para cancelar o arrasto.`,
    "endDragVirtual": `A arrastar. Clique para cancelar o arrasto.`,
    "insertAfter": (args)=>`Inserir depois de ${args.itemText}`,
    "insertBefore": (args)=>`Inserir antes de ${args.itemText}`,
    "insertBetween": (args)=>`Inserir entre ${args.beforeItemText} e ${args.afterItemText}`
};

var $107b5e2e45e971f1$exports = {};
$107b5e2e45e971f1$exports = {
    "dragDescriptionKeyboard": `Ap\u{103}sa\u{21B}i pe Enter pentru a \xeencepe glisarea.`,
    "dragDescriptionKeyboardAlt": `Ap\u{103}sa\u{21B}i pe Alt + Enter pentru a \xeencepe glisarea.`,
    "dragDescriptionLongPress": `Ap\u{103}sa\u{21B}i lung pentru a \xeencepe glisarea.`,
    "dragDescriptionTouch": `Atinge\u{21B}i de dou\u{103} ori pentru a \xeencepe s\u{103} glisa\u{21B}i.`,
    "dragDescriptionVirtual": `Face\u{21B}i clic pentru a \xeencepe glisarea.`,
    "dragItem": (args)=>`Glisa\u{21B}i ${args.itemText}`,
    "dragSelectedItems": (args, formatter)=>`Glisa\u{21B}i ${formatter.plural(args.count, {
            one: ()=>`${formatter.number(args.count)} element selectat`,
            other: ()=>`${formatter.number(args.count)} elemente selectate`
        })}`,
    "dragSelectedKeyboard": (args, formatter)=>`Ap\u{103}sa\u{21B}i pe Enter pentru a glisa ${formatter.plural(args.count, {
            one: ()=>`${formatter.number(args.count)} element selectat`,
            other: ()=>`${formatter.number(args.count)} elemente selectate`
        })}.`,
    "dragSelectedKeyboardAlt": (args, formatter)=>`Ap\u{103}sa\u{21B}i pe Alt + Enter pentru a glisa ${formatter.plural(args.count, {
            one: ()=>`${formatter.number(args.count)} element selectat`,
            other: ()=>`${formatter.number(args.count)} elemente selectate`
        })}.`,
    "dragSelectedLongPress": (args, formatter)=>`Ap\u{103}sa\u{21B}i lung pentru a glisa ${formatter.plural(args.count, {
            one: ()=>`${formatter.number(args.count)} element selectat`,
            other: ()=>`${formatter.number(args.count)} elemente selectate`
        })}.`,
    "dragStartedKeyboard": `A \xeenceput glisarea. Ap\u{103}sa\u{21B}i pe Tab pentru a naviga la o \u{21B}int\u{103} de fixare, apoi ap\u{103}sa\u{21B}i pe Enter pentru a fixa sau ap\u{103}sa\u{21B}i pe Escape pentru a anula glisarea.`,
    "dragStartedTouch": `A \xeenceput glisarea. Naviga\u{21B}i la o \u{21B}int\u{103} de fixare, apoi atinge\u{21B}i de dou\u{103} ori pentru a fixa.`,
    "dragStartedVirtual": `A \xeenceput glisarea. Naviga\u{21B}i la o \u{21B}int\u{103} de fixare, apoi face\u{21B}i clic sau ap\u{103}sa\u{21B}i pe Enter pentru a fixa.`,
    "dropCanceled": `Fixare anulat\u{103}.`,
    "dropComplete": `Fixare finalizat\u{103}.`,
    "dropDescriptionKeyboard": `Ap\u{103}sa\u{21B}i pe Enter pentru a fixa. Ap\u{103}sa\u{21B}i pe Escape pentru a anula glisarea.`,
    "dropDescriptionTouch": `Atinge\u{21B}i de dou\u{103} ori pentru a fixa.`,
    "dropDescriptionVirtual": `Face\u{21B}i clic pentru a fixa.`,
    "dropIndicator": `indicator de fixare`,
    "dropOnItem": (args)=>`Fixa\u{21B}i pe ${args.itemText}`,
    "dropOnRoot": `Fixare pe`,
    "endDragKeyboard": `Se gliseaz\u{103}. Ap\u{103}sa\u{21B}i pe Enter pentru a anula glisarea.`,
    "endDragTouch": `Se gliseaz\u{103}. Atinge\u{21B}i de dou\u{103} ori pentru a anula glisarea.`,
    "endDragVirtual": `Se gliseaz\u{103}. Face\u{21B}i clic pentru a anula glisarea.`,
    "insertAfter": (args)=>`Insera\u{21B}i dup\u{103} ${args.itemText}`,
    "insertBefore": (args)=>`Insera\u{21B}i \xeenainte de ${args.itemText}`,
    "insertBetween": (args)=>`Insera\u{21B}i \xeentre ${args.beforeItemText} \u{219}i ${args.afterItemText}`
};

var $d4b9c2f01c1892f7$exports = {};
$d4b9c2f01c1892f7$exports = {
    "dragDescriptionKeyboard": `\u{41D}\u{430}\u{436}\u{43C}\u{438}\u{442}\u{435} \u{43A}\u{43B}\u{430}\u{432}\u{438}\u{448}\u{443} Enter \u{434}\u{43B}\u{44F} \u{43D}\u{430}\u{447}\u{430}\u{43B}\u{430} \u{43F}\u{435}\u{440}\u{435}\u{442}\u{430}\u{441}\u{43A}\u{438}\u{432}\u{430}\u{43D}\u{438}\u{44F}.`,
    "dragDescriptionKeyboardAlt": `\u{41D}\u{430}\u{436}\u{43C}\u{438}\u{442}\u{435} Alt + Enter, \u{447}\u{442}\u{43E}\u{431}\u{44B} \u{43D}\u{430}\u{447}\u{430}\u{442}\u{44C} \u{43F}\u{435}\u{440}\u{435}\u{442}\u{430}\u{441}\u{43A}\u{438}\u{432}\u{430}\u{442}\u{44C}.`,
    "dragDescriptionLongPress": `\u{41D}\u{430}\u{436}\u{43C}\u{438}\u{442}\u{435} \u{438} \u{443}\u{434}\u{435}\u{440}\u{436}\u{438}\u{432}\u{430}\u{439}\u{442}\u{435}, \u{447}\u{442}\u{43E}\u{431}\u{44B} \u{43D}\u{430}\u{447}\u{430}\u{442}\u{44C} \u{43F}\u{435}\u{440}\u{435}\u{442}\u{430}\u{441}\u{43A}\u{438}\u{432}\u{430}\u{442}\u{44C}.`,
    "dragDescriptionTouch": `\u{414}\u{432}\u{430}\u{436}\u{434}\u{44B} \u{43D}\u{430}\u{436}\u{43C}\u{438}\u{442}\u{435} \u{434}\u{43B}\u{44F} \u{43D}\u{430}\u{447}\u{430}\u{43B}\u{430} \u{43F}\u{435}\u{440}\u{435}\u{442}\u{430}\u{441}\u{43A}\u{438}\u{432}\u{430}\u{43D}\u{438}\u{44F}.`,
    "dragDescriptionVirtual": `\u{429}\u{435}\u{43B}\u{43A}\u{43D}\u{438}\u{442}\u{435} \u{434}\u{43B}\u{44F} \u{43D}\u{430}\u{447}\u{430}\u{43B}\u{430} \u{43F}\u{435}\u{440}\u{435}\u{442}\u{430}\u{441}\u{43A}\u{438}\u{432}\u{430}\u{43D}\u{438}\u{44F}.`,
    "dragItem": (args)=>`\u{41F}\u{435}\u{440}\u{435}\u{442}\u{430}\u{449}\u{438}\u{442}\u{44C} ${args.itemText}`,
    "dragSelectedItems": (args, formatter)=>`\u{41F}\u{435}\u{440}\u{435}\u{442}\u{430}\u{449}\u{438}\u{442}\u{44C} ${formatter.plural(args.count, {
            one: ()=>`${formatter.number(args.count)} \u{432}\u{44B}\u{431}\u{440}\u{430}\u{43D}\u{43D}\u{44B}\u{439} \u{44D}\u{43B}\u{435}\u{43C}\u{435}\u{43D}\u{442}`,
            other: ()=>`${formatter.number(args.count)} \u{432}\u{44B}\u{431}\u{440}\u{430}\u{43D}\u{43D}\u{44B}\u{445} \u{44D}\u{43B}\u{435}\u{43C}`
        })}`,
    "dragSelectedKeyboard": (args, formatter)=>`\u{41D}\u{430}\u{436}\u{43C}\u{438}\u{442}\u{435} Enter \u{434}\u{43B}\u{44F} \u{43F}\u{435}\u{440}\u{435}\u{442}\u{430}\u{441}\u{43A}\u{438}\u{432}\u{430}\u{43D}\u{438}\u{44F} ${formatter.plural(args.count, {
            one: ()=>`${formatter.number(args.count)} \u{432}\u{44B}\u{431}\u{440}\u{430}\u{43D}\u{43D}\u{43E}\u{433}\u{43E} \u{44D}\u{43B}\u{435}\u{43C}\u{435}\u{43D}\u{442}\u{430}`,
            other: ()=>`${formatter.number(args.count)} \u{432}\u{44B}\u{431}\u{440}\u{430}\u{43D}\u{43D}\u{44B}\u{445} \u{44D}\u{43B}\u{435}\u{43C}\u{435}\u{43D}\u{442}\u{43E}\u{432}`
        })}.`,
    "dragSelectedKeyboardAlt": (args, formatter)=>`\u{41D}\u{430}\u{436}\u{43C}\u{438}\u{442}\u{435} Alt + Enter \u{434}\u{43B}\u{44F} \u{43F}\u{435}\u{440}\u{435}\u{442}\u{430}\u{441}\u{43A}\u{438}\u{432}\u{430}\u{43D}\u{438}\u{44F} ${formatter.plural(args.count, {
            one: ()=>`${formatter.number(args.count)} \u{432}\u{44B}\u{431}\u{440}\u{430}\u{43D}\u{43D}\u{43E}\u{433}\u{43E} \u{44D}\u{43B}\u{435}\u{43C}\u{435}\u{43D}\u{442}\u{430}`,
            other: ()=>`${formatter.number(args.count)} \u{432}\u{44B}\u{431}\u{440}\u{430}\u{43D}\u{43D}\u{44B}\u{445} \u{44D}\u{43B}\u{435}\u{43C}\u{435}\u{43D}\u{442}\u{43E}\u{432}`
        })}.`,
    "dragSelectedLongPress": (args, formatter)=>`\u{41D}\u{430}\u{436}\u{43C}\u{438}\u{442}\u{435} \u{438} \u{443}\u{434}\u{435}\u{440}\u{436}\u{438}\u{432}\u{430}\u{439}\u{442}\u{435} \u{434}\u{43B}\u{44F} \u{43F}\u{435}\u{440}\u{435}\u{442}\u{430}\u{441}\u{43A}\u{438}\u{432}\u{430}\u{43D}\u{438}\u{44F} ${formatter.plural(args.count, {
            one: ()=>`${formatter.number(args.count)} \u{432}\u{44B}\u{431}\u{440}\u{430}\u{43D}\u{43D}\u{43E}\u{433}\u{43E} \u{44D}\u{43B}\u{435}\u{43C}\u{435}\u{43D}\u{442}\u{430}`,
            other: ()=>`${formatter.number(args.count)} \u{432}\u{44B}\u{431}\u{440}\u{430}\u{43D}\u{43D}\u{44B}\u{445} \u{44D}\u{43B}\u{435}\u{43C}\u{435}\u{43D}\u{442}\u{43E}\u{432}`
        })}.`,
    "dragStartedKeyboard": `\u{41D}\u{430}\u{447}\u{430}\u{442}\u{43E} \u{43F}\u{435}\u{440}\u{435}\u{442}\u{430}\u{441}\u{43A}\u{438}\u{432}\u{430}\u{43D}\u{438}\u{435}. \u{41D}\u{430}\u{436}\u{43C}\u{438}\u{442}\u{435} \u{43A}\u{43B}\u{430}\u{432}\u{438}\u{448}\u{443} Tab \u{434}\u{43B}\u{44F} \u{432}\u{44B}\u{431}\u{43E}\u{440}\u{430} \u{446}\u{435}\u{43B}\u{438}, \u{437}\u{430}\u{442}\u{435}\u{43C} \u{43D}\u{430}\u{436}\u{43C}\u{438}\u{442}\u{435} \u{43A}\u{43B}\u{430}\u{432}\u{438}\u{448}\u{443} Enter, \u{447}\u{442}\u{43E}\u{431}\u{44B} \u{43F}\u{440}\u{438}\u{43C}\u{435}\u{43D}\u{438}\u{442}\u{44C} \u{43F}\u{435}\u{440}\u{435}\u{442}\u{430}\u{441}\u{43A}\u{438}\u{432}\u{430}\u{43D}\u{438}\u{435}, \u{438}\u{43B}\u{438} \u{43A}\u{43B}\u{430}\u{432}\u{438}\u{448}\u{443} Escape \u{434}\u{43B}\u{44F} \u{43E}\u{442}\u{43C}\u{435}\u{43D}\u{44B} \u{434}\u{435}\u{439}\u{441}\u{442}\u{432}\u{438}\u{44F}.`,
    "dragStartedTouch": `\u{41D}\u{430}\u{447}\u{430}\u{442}\u{43E} \u{43F}\u{435}\u{440}\u{435}\u{442}\u{430}\u{441}\u{43A}\u{438}\u{432}\u{430}\u{43D}\u{438}\u{435}. \u{412}\u{44B}\u{431}\u{435}\u{440}\u{438}\u{442}\u{435} \u{446}\u{435}\u{43B}\u{44C}, \u{437}\u{430}\u{442}\u{435}\u{43C} \u{434}\u{432}\u{430}\u{436}\u{434}\u{44B} \u{43D}\u{430}\u{436}\u{43C}\u{438}\u{442}\u{435}, \u{447}\u{442}\u{43E}\u{431}\u{44B} \u{43F}\u{440}\u{438}\u{43C}\u{435}\u{43D}\u{438}\u{442}\u{44C} \u{43F}\u{435}\u{440}\u{435}\u{442}\u{430}\u{441}\u{43A}\u{438}\u{432}\u{430}\u{43D}\u{438}\u{435}.`,
    "dragStartedVirtual": `\u{41D}\u{430}\u{447}\u{430}\u{442}\u{43E} \u{43F}\u{435}\u{440}\u{435}\u{442}\u{430}\u{441}\u{43A}\u{438}\u{432}\u{430}\u{43D}\u{438}\u{435}. \u{41D}\u{430}\u{436}\u{43C}\u{438}\u{442}\u{435} \u{43A}\u{43B}\u{430}\u{432}\u{438}\u{448}\u{443} Tab \u{434}\u{43B}\u{44F} \u{432}\u{44B}\u{431}\u{43E}\u{440}\u{430} \u{446}\u{435}\u{43B}\u{438}, \u{437}\u{430}\u{442}\u{435}\u{43C} \u{43D}\u{430}\u{436}\u{43C}\u{438}\u{442}\u{435} \u{43A}\u{43B}\u{430}\u{432}\u{438}\u{448}\u{443} Enter, \u{447}\u{442}\u{43E}\u{431}\u{44B} \u{43F}\u{440}\u{438}\u{43C}\u{435}\u{43D}\u{438}\u{442}\u{44C} \u{43F}\u{435}\u{440}\u{435}\u{442}\u{430}\u{441}\u{43A}\u{438}\u{432}\u{430}\u{43D}\u{438}\u{435}.`,
    "dropCanceled": `\u{41F}\u{435}\u{440}\u{435}\u{442}\u{430}\u{441}\u{43A}\u{438}\u{432}\u{430}\u{43D}\u{438}\u{435} \u{43E}\u{442}\u{43C}\u{435}\u{43D}\u{435}\u{43D}\u{43E}.`,
    "dropComplete": `\u{41F}\u{435}\u{440}\u{435}\u{442}\u{430}\u{441}\u{43A}\u{438}\u{432}\u{430}\u{43D}\u{438}\u{435} \u{437}\u{430}\u{432}\u{435}\u{440}\u{448}\u{435}\u{43D}\u{43E}.`,
    "dropDescriptionKeyboard": `\u{41D}\u{430}\u{436}\u{43C}\u{438}\u{442}\u{435} \u{43A}\u{43B}\u{430}\u{432}\u{438}\u{448}\u{443} Enter, \u{447}\u{442}\u{43E}\u{431}\u{44B} \u{43F}\u{440}\u{438}\u{43C}\u{435}\u{43D}\u{438}\u{442}\u{44C} \u{43F}\u{435}\u{440}\u{435}\u{442}\u{430}\u{441}\u{43A}\u{438}\u{432}\u{430}\u{43D}\u{438}\u{435}. \u{41D}\u{430}\u{436}\u{43C}\u{438}\u{442}\u{435} \u{43A}\u{43B}\u{430}\u{432}\u{438}\u{448}\u{443} Escape \u{434}\u{43B}\u{44F} \u{43E}\u{442}\u{43C}\u{435}\u{43D}\u{44B}.`,
    "dropDescriptionTouch": `\u{414}\u{432}\u{430}\u{436}\u{434}\u{44B} \u{43D}\u{430}\u{436}\u{43C}\u{438}\u{442}\u{435}, \u{447}\u{442}\u{43E}\u{431}\u{44B} \u{43F}\u{440}\u{438}\u{43C}\u{435}\u{43D}\u{438}\u{442}\u{44C} \u{43F}\u{435}\u{440}\u{435}\u{442}\u{430}\u{441}\u{43A}\u{438}\u{432}\u{430}\u{43D}\u{438}\u{435}.`,
    "dropDescriptionVirtual": `\u{429}\u{435}\u{43B}\u{43A}\u{43D}\u{438}\u{442}\u{435}, \u{447}\u{442}\u{43E}\u{431}\u{44B} \u{43F}\u{440}\u{438}\u{43C}\u{435}\u{43D}\u{438}\u{442}\u{44C} \u{43F}\u{435}\u{440}\u{435}\u{442}\u{430}\u{441}\u{43A}\u{438}\u{432}\u{430}\u{43D}\u{438}\u{435}.`,
    "dropIndicator": `\u{438}\u{43D}\u{434}\u{438}\u{43A}\u{430}\u{442}\u{43E}\u{440} \u{43F}\u{435}\u{440}\u{435}\u{442}\u{430}\u{441}\u{43A}\u{438}\u{432}\u{430}\u{43D}\u{438}\u{44F}`,
    "dropOnItem": (args)=>`\u{41F}\u{435}\u{440}\u{435}\u{442}\u{430}\u{449}\u{438}\u{442}\u{44C} \u{43D}\u{430} ${args.itemText}`,
    "dropOnRoot": `\u{41F}\u{435}\u{440}\u{435}\u{442}\u{430}\u{449}\u{438}\u{442}\u{44C} \u{43D}\u{430}`,
    "endDragKeyboard": `\u{41F}\u{435}\u{440}\u{435}\u{442}\u{430}\u{441}\u{43A}\u{438}\u{432}\u{430}\u{43D}\u{438}\u{435}. \u{41D}\u{430}\u{436}\u{43C}\u{438}\u{442}\u{435} \u{43A}\u{43B}\u{430}\u{432}\u{438}\u{448}\u{443} Enter \u{434}\u{43B}\u{44F} \u{43E}\u{442}\u{43C}\u{435}\u{43D}\u{44B}.`,
    "endDragTouch": `\u{41F}\u{435}\u{440}\u{435}\u{442}\u{430}\u{441}\u{43A}\u{438}\u{432}\u{430}\u{43D}\u{438}\u{435}. \u{414}\u{432}\u{430}\u{436}\u{434}\u{44B} \u{43D}\u{430}\u{436}\u{43C}\u{438}\u{442}\u{435} \u{434}\u{43B}\u{44F} \u{43E}\u{442}\u{43C}\u{435}\u{43D}\u{44B}.`,
    "endDragVirtual": `\u{41F}\u{435}\u{440}\u{435}\u{442}\u{430}\u{441}\u{43A}\u{438}\u{432}\u{430}\u{43D}\u{438}\u{435}. \u{429}\u{435}\u{43B}\u{43A}\u{43D}\u{438}\u{442}\u{435} \u{434}\u{43B}\u{44F} \u{43E}\u{442}\u{43C}\u{435}\u{43D}\u{44B}.`,
    "insertAfter": (args)=>`\u{412}\u{441}\u{442}\u{430}\u{432}\u{438}\u{442}\u{44C} \u{43F}\u{43E}\u{441}\u{43B}\u{435} ${args.itemText}`,
    "insertBefore": (args)=>`\u{412}\u{441}\u{442}\u{430}\u{432}\u{438}\u{442}\u{44C} \u{43F}\u{435}\u{440}\u{435}\u{434} ${args.itemText}`,
    "insertBetween": (args)=>`\u{412}\u{441}\u{442}\u{430}\u{432}\u{438}\u{442}\u{44C} \u{43C}\u{435}\u{436}\u{434}\u{443} ${args.beforeItemText} \u{438} ${args.afterItemText}`
};

var $dbdc1942894e83e4$exports = {};
$dbdc1942894e83e4$exports = {
    "dragDescriptionKeyboard": `Stla\u{10D}en\xedm kl\xe1vesu Enter za\u{10D}nete pres\xfavanie.`,
    "dragDescriptionKeyboardAlt": `Stla\u{10D}en\xedm kl\xe1vesov Alt + Enter za\u{10D}nete pres\xfavanie.`,
    "dragDescriptionLongPress": `Dlh\xfdm stla\u{10D}en\xedm za\u{10D}nete pres\xfavanie.`,
    "dragDescriptionTouch": `Dvojit\xfdm kliknut\xedm za\u{10D}nete pres\xfavanie.`,
    "dragDescriptionVirtual": `Kliknut\xedm za\u{10D}nete pres\xfavanie.`,
    "dragItem": (args)=>`Presun\xfa\u{165} polo\u{17E}ku ${args.itemText}`,
    "dragSelectedItems": (args, formatter)=>`Presun\xfa\u{165} ${formatter.plural(args.count, {
            one: ()=>`${formatter.number(args.count)} vybrat\xfa polo\u{17E}ku`,
            other: ()=>`${formatter.number(args.count)} vybrat\xe9 polo\u{17E}ky`
        })}`,
    "dragSelectedKeyboard": (args, formatter)=>`Stla\u{10D}en\xedm kl\xe1vesu Enter presuniete ${formatter.plural(args.count, {
            one: ()=>`${formatter.number(args.count)} vybrat\xfa polo\u{17E}ku`,
            other: ()=>`${formatter.number(args.count)} vybrat\xfdch polo\u{17E}iek`
        })}.`,
    "dragSelectedKeyboardAlt": (args, formatter)=>`Stla\u{10D}en\xedm kl\xe1vesov Alt + Enter presuniete ${formatter.plural(args.count, {
            one: ()=>`${formatter.number(args.count)} vybrat\xfa polo\u{17E}ku`,
            other: ()=>`${formatter.number(args.count)} vybrat\xfdch polo\u{17E}iek`
        })}.`,
    "dragSelectedLongPress": (args, formatter)=>`Dlh\xfdm stla\u{10D}en\xedm presuniete ${formatter.plural(args.count, {
            one: ()=>`${formatter.number(args.count)} vybrat\xfa polo\u{17E}ku`,
            other: ()=>`${formatter.number(args.count)} vybrat\xfdch polo\u{17E}iek`
        })}.`,
    "dragStartedKeyboard": `Pres\xfavanie sa za\u{10D}alo. Do cie\u{13E}ov\xe9ho umiestnenia prejdete stla\u{10D}en\xedm kl\xe1vesu Tab. Ak chcete polo\u{17E}ku umiestni\u{165}, stla\u{10D}te kl\xe1ves Enter alebo stla\u{10D}te kl\xe1ves Esc, ak chcete pres\xfavanie zru\u{161}i\u{165}.`,
    "dragStartedTouch": `Pres\xfavanie sa za\u{10D}alo. Prejdite na cie\u{13E}ov\xe9 umiestnenie a dvojit\xfdm kliknut\xedm umiestnite polo\u{17E}ku.`,
    "dragStartedVirtual": `Pres\xfavanie sa za\u{10D}alo. Prejdite na cie\u{13E}ov\xe9 umiestnenie a kliknut\xedm alebo stla\u{10D}en\xedm kl\xe1vesu Enter umiestnite polo\u{17E}ku.`,
    "dropCanceled": `Umiestnenie zru\u{161}en\xe9.`,
    "dropComplete": `Umiestnenie dokon\u{10D}en\xe9.`,
    "dropDescriptionKeyboard": `Stla\u{10D}en\xedm kl\xe1vesu Enter umiestnite polo\u{17E}ku. Stla\u{10D}en\xedm kl\xe1vesu Esc zru\u{161}\xedte pres\xfavanie.`,
    "dropDescriptionTouch": `Dvojit\xfdm kliknut\xedm umiestnite polo\u{17E}ku.`,
    "dropDescriptionVirtual": `Kliknut\xedm umiestnite polo\u{17E}ku.`,
    "dropIndicator": `indik\xe1tor umiestnenia`,
    "dropOnItem": (args)=>`Umiestni\u{165} na polo\u{17E}ku ${args.itemText}`,
    "dropOnRoot": `Umiestni\u{165} na`,
    "endDragKeyboard": `Prebieha pres\xfavanie. Ak ho chcete zru\u{161}i\u{165}, stla\u{10D}te kl\xe1ves Enter.`,
    "endDragTouch": `Prebieha pres\xfavanie. Dvojit\xfdm kliknut\xedm ho m\xf4\u{17E}ete zru\u{161}i\u{165}.`,
    "endDragVirtual": `Prebieha pres\xfavanie.`,
    "insertAfter": (args)=>`Vlo\u{17E}i\u{165} za polo\u{17E}ku ${args.itemText}`,
    "insertBefore": (args)=>`Vlo\u{17E}i\u{165} pred polo\u{17E}ku ${args.itemText}`,
    "insertBetween": (args)=>`Vlo\u{17E}i\u{165} medzi polo\u{17E}ky ${args.beforeItemText} a ${args.afterItemText}`
};

var $fbaaaaebd547d998$exports = {};
$fbaaaaebd547d998$exports = {
    "dragDescriptionKeyboard": `Pritisnite tipko Enter za za\u{10D}etek vle\u{10D}enja.`,
    "dragDescriptionKeyboardAlt": `Pritisnite tipki Alt + Enter za za\u{10D}etek vle\u{10D}enja.`,
    "dragDescriptionLongPress": `Pritisnite in zadr\u{17E}ite za za\u{10D}etek vle\u{10D}enja.`,
    "dragDescriptionTouch": `Dvotapnite za za\u{10D}etek vle\u{10D}enja.`,
    "dragDescriptionVirtual": `Kliknite za za\u{10D}etek vle\u{10D}enja.`,
    "dragItem": (args)=>`Povleci ${args.itemText}`,
    "dragSelectedItems": (args, formatter)=>`Povlecite ${formatter.plural(args.count, {
            one: ()=>`${formatter.number(args.count)} izbran element`,
            other: ()=>`izbrane elemente (${formatter.number(args.count)})`
        })}`,
    "dragSelectedKeyboard": (args, formatter)=>`Pritisnite tipko Enter, da povle\u{10D}ete ${formatter.plural(args.count, {
            one: ()=>`${formatter.number(args.count)} izbrani element`,
            other: ()=>`${formatter.number(args.count)} izbranih elementov`
        })}.`,
    "dragSelectedKeyboardAlt": (args, formatter)=>`Pritisnite tipki Alt + Enter, da povle\u{10D}ete ${formatter.plural(args.count, {
            one: ()=>`${formatter.number(args.count)} izbrani element`,
            other: ()=>`${formatter.number(args.count)} izbranih elementov`
        })}.`,
    "dragSelectedLongPress": (args, formatter)=>`Pritisnite in zadr\u{17E}ite, da povle\u{10D}ete ${formatter.plural(args.count, {
            one: ()=>`${formatter.number(args.count)} izbrani element`,
            other: ()=>`${formatter.number(args.count)} izbranih elementov`
        })}.`,
    "dragStartedKeyboard": `Vle\u{10D}enje se je za\u{10D}elo. Pritisnite tipko Tab za pomik na mesto, kamor \u{17E}elite spustiti elemente, in pritisnite tipko Enter, da jih spustite, ali tipko Escape, da prekli\u{10D}ete postopek.`,
    "dragStartedTouch": `Vle\u{10D}enje se je za\u{10D}elo. Pomaknite se na mesto, kamor \u{17E}elite spustiti elemente, in dvotapnite, da jih spustite.`,
    "dragStartedVirtual": `Vle\u{10D}enje se je za\u{10D}elo. Pomaknite se na mesto, kamor \u{17E}elite spustiti elemente, in kliknite ali pritisnite tipko Enter, da jih spustite.`,
    "dropCanceled": `Spust je preklican.`,
    "dropComplete": `Spust je kon\u{10D}an.`,
    "dropDescriptionKeyboard": `Pritisnite tipko Enter, da spustite. Pritisnite tipko Escape, da prekli\u{10D}ete vle\u{10D}enje.`,
    "dropDescriptionTouch": `Dvotapnite, da spustite.`,
    "dropDescriptionVirtual": `Kliknite, da spustite.`,
    "dropIndicator": `indikator spusta`,
    "dropOnItem": (args)=>`Spusti na mesto ${args.itemText}`,
    "dropOnRoot": `Spusti na mesto`,
    "endDragKeyboard": `Vle\u{10D}enje. Pritisnite tipko Enter za preklic vle\u{10D}enja.`,
    "endDragTouch": `Vle\u{10D}enje. Dvotapnite za preklic vle\u{10D}enja.`,
    "endDragVirtual": `Vle\u{10D}enje. Kliknite, da prekli\u{10D}ete vle\u{10D}enje.`,
    "insertAfter": (args)=>`Vstavi za ${args.itemText}`,
    "insertBefore": (args)=>`Vstavi pred ${args.itemText}`,
    "insertBetween": (args)=>`Vstavi med ${args.beforeItemText} in ${args.afterItemText}`
};

var $a0caa33f1e264489$exports = {};
$a0caa33f1e264489$exports = {
    "dragDescriptionKeyboard": `Pritisnite Enter da biste zapo\u{10D}eli prevla\u{10D}enje.`,
    "dragDescriptionKeyboardAlt": `Pritisnite Alt + Enter da biste zapo\u{10D}eli prevla\u{10D}enje.`,
    "dragDescriptionLongPress": `Pritisnite dugo da biste zapo\u{10D}eli prevla\u{10D}enje.`,
    "dragDescriptionTouch": `Dvaput dodirnite da biste zapo\u{10D}eli prevla\u{10D}enje.`,
    "dragDescriptionVirtual": `Kliknite da biste zapo\u{10D}eli prevla\u{10D}enje.`,
    "dragItem": (args)=>`Prevucite ${args.itemText}`,
    "dragSelectedItems": (args, formatter)=>`Prevucite ${formatter.plural(args.count, {
            one: ()=>`${formatter.number(args.count)} izabranu stavku`,
            other: ()=>`${formatter.number(args.count)} izabrane stavke`
        })}`,
    "dragSelectedKeyboard": (args, formatter)=>`Pritisnite Enter da biste prevukli ${formatter.plural(args.count, {
            one: ()=>`${formatter.number(args.count)} izabranu stavku`,
            other: ()=>`${formatter.number(args.count)} izabranih stavki`
        })}.`,
    "dragSelectedKeyboardAlt": (args, formatter)=>`Pritisnite Alt + Enter da biste prevukli ${formatter.plural(args.count, {
            one: ()=>`${formatter.number(args.count)} izabranu stavku`,
            other: ()=>`${formatter.number(args.count)} izabranih stavki`
        })}.`,
    "dragSelectedLongPress": (args, formatter)=>`Pritisnite dugo da biste prevukli ${formatter.plural(args.count, {
            one: ()=>`${formatter.number(args.count)} izabranu stavku`,
            other: ()=>`${formatter.number(args.count)} izabranih stavki`
        })}.`,
    "dragStartedKeyboard": `Prevla\u{10D}enje je zapo\u{10D}eto. Pritisnite Tab da biste oti\u{161}li do cilja za otpu\u{161}tanje, zatim pritisnite Enter za ispu\u{161}tanje ili pritisnite Escape za otkazivanje.`,
    "dragStartedTouch": `Prevla\u{10D}enje je zapo\u{10D}eto. Idite do cilja za otpu\u{161}tanje, a zatim dvaput dodirnite za otpu\u{161}tanje.`,
    "dragStartedVirtual": `Prevla\u{10D}enje je zapo\u{10D}eto. Idite do cilja za otpu\u{161}tanje, a zatim kliknite ili pritinite Enter za otpu\u{161}tanje.`,
    "dropCanceled": `Otpu\u{161}tanje je otkazano.`,
    "dropComplete": `Prevla\u{10D}enje je zavr\u{161}eno.`,
    "dropDescriptionKeyboard": `Pritisnite Enter da biste otpustili. Pritisnite Escape da biste otkazali prevla\u{10D}enje.`,
    "dropDescriptionTouch": `Dvaput dodirnite za otpu\u{161}tanje.`,
    "dropDescriptionVirtual": `Kliknite za otpu\u{161}tanje.`,
    "dropIndicator": `Indikator otpu\u{161}tanja`,
    "dropOnItem": (args)=>`Otpusti na ${args.itemText}`,
    "dropOnRoot": `Otpusti na`,
    "endDragKeyboard": `Prevla\u{10D}enje u toku. Pritisnite Enter da biste otkazali prevla\u{10D}enje.`,
    "endDragTouch": `Prevla\u{10D}enje u toku. Dvaput dodirnite da biste otkazali prevla\u{10D}enje.`,
    "endDragVirtual": `Prevla\u{10D}enje u toku. Kliknite da biste otkazali prevla\u{10D}enje.`,
    "insertAfter": (args)=>`Umetnite posle ${args.itemText}`,
    "insertBefore": (args)=>`Umetnite ispred ${args.itemText}`,
    "insertBetween": (args)=>`Umetnite izme\u{111}u ${args.beforeItemText} i ${args.afterItemText}`
};

var $d576b66176f5c0ff$exports = {};
$d576b66176f5c0ff$exports = {
    "dragDescriptionKeyboard": `Tryck p\xe5 enter f\xf6r att b\xf6rja dra.`,
    "dragDescriptionKeyboardAlt": `Tryck p\xe5 Alt + Retur f\xf6r att b\xf6rja dra.`,
    "dragDescriptionLongPress": `Tryck l\xe4nge f\xf6r att b\xf6rja dra.`,
    "dragDescriptionTouch": `Dubbeltryck f\xf6r att b\xf6rja dra.`,
    "dragDescriptionVirtual": `Klicka f\xf6r att b\xf6rja dra.`,
    "dragItem": (args)=>`Dra ${args.itemText}`,
    "dragSelectedItems": (args, formatter)=>`Dra ${formatter.plural(args.count, {
            one: ()=>`${formatter.number(args.count)} valt objekt`,
            other: ()=>`${formatter.number(args.count)} valda objekt`
        })}`,
    "dragSelectedKeyboard": (args, formatter)=>`Tryck p\xe5 Retur f\xf6r att dra ${formatter.plural(args.count, {
            one: ()=>`${formatter.number(args.count)} markerat objekt`,
            other: ()=>`${formatter.number(args.count)} markerade objekt`
        })}.`,
    "dragSelectedKeyboardAlt": (args, formatter)=>`Tryck p\xe5 Alt + Retur f\xf6r att dra ${formatter.plural(args.count, {
            one: ()=>`${formatter.number(args.count)} markerat objekt`,
            other: ()=>`${formatter.number(args.count)} markerade objekt`
        })}.`,
    "dragSelectedLongPress": (args, formatter)=>`Tryck l\xe4nge f\xf6r att dra ${formatter.plural(args.count, {
            one: ()=>`${formatter.number(args.count)} markerat objekt`,
            other: ()=>`${formatter.number(args.count)} markerade objekt`
        })}.`,
    "dragStartedKeyboard": `B\xf6rja dra. Tryck p\xe5 tabb f\xf6r att navigera till m\xe5let, tryck p\xe5 enter f\xf6r att sl\xe4ppa eller p\xe5 escape f\xf6r att avbryta.`,
    "dragStartedTouch": `B\xf6rja dra. Navigera till ett m\xe5l och dubbeltryck f\xf6r att sl\xe4ppa.`,
    "dragStartedVirtual": `B\xf6rja dra. Navigera till ett m\xe5l och klicka eller tryck p\xe5 enter f\xf6r att sl\xe4ppa.`,
    "dropCanceled": `Sl\xe4pp\xe5tg\xe4rd avbr\xf6ts.`,
    "dropComplete": `Sl\xe4pp\xe5tg\xe4rd klar.`,
    "dropDescriptionKeyboard": `Tryck p\xe5 enter f\xf6r att sl\xe4ppa. Tryck p\xe5 escape f\xf6r att avbryta drag\xe5tg\xe4rd.`,
    "dropDescriptionTouch": `Dubbeltryck f\xf6r att sl\xe4ppa.`,
    "dropDescriptionVirtual": `Klicka f\xf6r att sl\xe4ppa.`,
    "dropIndicator": `sl\xe4ppindikator`,
    "dropOnItem": (args)=>`Sl\xe4pp p\xe5 ${args.itemText}`,
    "dropOnRoot": `Sl\xe4pp p\xe5`,
    "endDragKeyboard": `Drar. Tryck p\xe5 enter f\xf6r att avbryta drag\xe5tg\xe4rd.`,
    "endDragTouch": `Drar. Dubbeltryck f\xf6r att avbryta drag\xe5tg\xe4rd.`,
    "endDragVirtual": `Drar. Klicka f\xf6r att avbryta drag\xe5tg\xe4rd.`,
    "insertAfter": (args)=>`Infoga efter ${args.itemText}`,
    "insertBefore": (args)=>`Infoga f\xf6re ${args.itemText}`,
    "insertBetween": (args)=>`Infoga mellan ${args.beforeItemText} och ${args.afterItemText}`
};

var $0681f168c13d8f2a$exports = {};
$0681f168c13d8f2a$exports = {
    "dragDescriptionKeyboard": `S\xfcr\xfcklemeyi ba\u{15F}latmak i\xe7in Enter'a bas\u{131}n.`,
    "dragDescriptionKeyboardAlt": `S\xfcr\xfcklemeyi ba\u{15F}latmak i\xe7in Alt + Enter'a bas\u{131}n.`,
    "dragDescriptionLongPress": `S\xfcr\xfcklemeye ba\u{15F}lamak i\xe7in uzun bas\u{131}n.`,
    "dragDescriptionTouch": `S\xfcr\xfcklemeyi ba\u{15F}latmak i\xe7in \xe7ift t\u{131}klay\u{131}n.`,
    "dragDescriptionVirtual": `S\xfcr\xfcklemeyi ba\u{15F}latmak i\xe7in t\u{131}klay\u{131}n.`,
    "dragItem": (args)=>`${args.itemText}\u{2019}i s\xfcr\xfckle`,
    "dragSelectedItems": (args, formatter)=>`S\xfcr\xfckle ${formatter.plural(args.count, {
            one: ()=>`${formatter.number(args.count)} se\xe7ili \xf6ge`,
            other: ()=>`${formatter.number(args.count)} se\xe7ili \xf6ge`
        })}`,
    "dragSelectedKeyboard": (args, formatter)=>`${formatter.plural(args.count, {
            one: ()=>`${formatter.number(args.count)} se\xe7ilmi\u{15F} \xf6\u{11F}e`,
            other: ()=>`${formatter.number(args.count)} se\xe7ilmi\u{15F} \xf6\u{11F}e`
        })} \xf6\u{11F}esini s\xfcr\xfcklemek i\xe7in Enter'a bas\u{131}n.`,
    "dragSelectedKeyboardAlt": (args, formatter)=>`${formatter.plural(args.count, {
            one: ()=>`${formatter.number(args.count)} se\xe7ilmi\u{15F} \xf6\u{11F}e`,
            other: ()=>`${formatter.number(args.count)} se\xe7ilmi\u{15F} \xf6\u{11F}e`
        })} \xf6\u{11F}esini s\xfcr\xfcklemek i\xe7in Alt + Enter tu\u{15F}una bas\u{131}n.`,
    "dragSelectedLongPress": (args, formatter)=>`${formatter.plural(args.count, {
            one: ()=>`${formatter.number(args.count)} se\xe7ilmi\u{15F} \xf6\u{11F}e`,
            other: ()=>`${formatter.number(args.count)} se\xe7ilmi\u{15F} \xf6\u{11F}e`
        })} \xf6\u{11F}esini s\xfcr\xfcklemek i\xe7in uzun bas\u{131}n.`,
    "dragStartedKeyboard": `S\xfcr\xfckleme ba\u{15F}lat\u{131}ld\u{131}. Bir b\u{131}rakma hedefine gitmek i\xe7in Tab\u{2019}a bas\u{131}n, ard\u{131}ndan b\u{131}rakmak i\xe7in Enter\u{2019}a bas\u{131}n veya iptal etmek i\xe7in Escape\u{2019}e bas\u{131}n.`,
    "dragStartedTouch": `S\xfcr\xfckleme ba\u{15F}lat\u{131}ld\u{131}. Bir b\u{131}rakma hedefine gidin, ard\u{131}ndan b\u{131}rakmak i\xe7in \xe7ift t\u{131}klay\u{131}n.`,
    "dragStartedVirtual": `S\xfcr\xfckleme ba\u{15F}lat\u{131}ld\u{131}. Bir b\u{131}rakma hedefine gidin, ard\u{131}ndan b\u{131}rakmak i\xe7in Enter\u{2019}a t\u{131}klay\u{131}n veya bas\u{131}n.`,
    "dropCanceled": `B\u{131}rakma iptal edildi.`,
    "dropComplete": `B\u{131}rakma tamamland\u{131}.`,
    "dropDescriptionKeyboard": `B\u{131}rakmak i\xe7in Enter'a bas\u{131}n. S\xfcr\xfcklemeyi iptal etmek i\xe7in Escape'e bas\u{131}n.`,
    "dropDescriptionTouch": `B\u{131}rakmak i\xe7in \xe7ift t\u{131}klay\u{131}n.`,
    "dropDescriptionVirtual": `B\u{131}rakmak i\xe7in t\u{131}klay\u{131}n.`,
    "dropIndicator": `b\u{131}rakma g\xf6stergesi`,
    "dropOnItem": (args)=>`${args.itemText} \xfczerine b\u{131}rak`,
    "dropOnRoot": `B\u{131}rak\u{131}n`,
    "endDragKeyboard": `S\xfcr\xfckleme. S\xfcr\xfcklemeyi iptal etmek i\xe7in Enter'a bas\u{131}n.`,
    "endDragTouch": `S\xfcr\xfckleme. S\xfcr\xfcklemeyi iptal etmek i\xe7in \xe7ift t\u{131}klay\u{131}n.`,
    "endDragVirtual": `S\xfcr\xfckleme. S\xfcr\xfcklemeyi iptal etmek i\xe7in t\u{131}klay\u{131}n.`,
    "insertAfter": (args)=>`${args.itemText}\u{2019}den sonra gir`,
    "insertBefore": (args)=>`${args.itemText}\u{2019}den \xf6nce gir`,
    "insertBetween": (args)=>`${args.beforeItemText} ve ${args.afterItemText} aras\u{131}na gir`
};

var $2bfbc1f42c1cf5a7$exports = {};
$2bfbc1f42c1cf5a7$exports = {
    "dragDescriptionKeyboard": `\u{41D}\u{430}\u{442}\u{438}\u{441}\u{43D}\u{456}\u{442}\u{44C} Enter, \u{449}\u{43E}\u{431} \u{43F}\u{43E}\u{447}\u{430}\u{442}\u{438} \u{43F}\u{435}\u{440}\u{435}\u{442}\u{44F}\u{433}\u{443}\u{432}\u{430}\u{43D}\u{43D}\u{44F}.`,
    "dragDescriptionKeyboardAlt": `\u{41D}\u{430}\u{442}\u{438}\u{441}\u{43D}\u{456}\u{442}\u{44C} Alt + Enter, \u{449}\u{43E}\u{431} \u{43F}\u{43E}\u{447}\u{430}\u{442}\u{438} \u{43F}\u{435}\u{440}\u{435}\u{442}\u{44F}\u{433}\u{443}\u{432}\u{430}\u{43D}\u{43D}\u{44F}.`,
    "dragDescriptionLongPress": `\u{41D}\u{430}\u{442}\u{438}\u{441}\u{43D}\u{456}\u{442}\u{44C} \u{456} \u{443}\u{442}\u{440}\u{438}\u{43C}\u{443}\u{439}\u{442}\u{435}, \u{449}\u{43E}\u{431} \u{43F}\u{43E}\u{447}\u{430}\u{442}\u{438} \u{43F}\u{435}\u{440}\u{435}\u{442}\u{44F}\u{433}\u{443}\u{432}\u{430}\u{43D}\u{43D}\u{44F}.`,
    "dragDescriptionTouch": `\u{41D}\u{430}\u{442}\u{438}\u{441}\u{43D}\u{456}\u{442}\u{44C} \u{434}\u{432}\u{456}\u{447}\u{456}, \u{449}\u{43E}\u{431} \u{43F}\u{43E}\u{447}\u{430}\u{442}\u{438} \u{43F}\u{435}\u{440}\u{435}\u{442}\u{44F}\u{433}\u{443}\u{432}\u{430}\u{43D}\u{43D}\u{44F}.`,
    "dragDescriptionVirtual": `\u{41D}\u{430}\u{442}\u{438}\u{441}\u{43D}\u{456}\u{442}\u{44C}, \u{449}\u{43E}\u{431} \u{43F}\u{43E}\u{447}\u{430}\u{442}\u{438} \u{43F}\u{435}\u{440}\u{435}\u{442}\u{44F}\u{433}\u{443}\u{432}\u{430}\u{43D}\u{43D}\u{44F}.`,
    "dragItem": (args)=>`\u{41F}\u{435}\u{440}\u{435}\u{442}\u{44F}\u{433}\u{43D}\u{443}\u{442}\u{438} ${args.itemText}`,
    "dragSelectedItems": (args, formatter)=>`\u{41F}\u{435}\u{440}\u{435}\u{442}\u{44F}\u{433}\u{43D}\u{456}\u{442}\u{44C} ${formatter.plural(args.count, {
            one: ()=>`${formatter.number(args.count)} \u{432}\u{438}\u{431}\u{440}\u{430}\u{43D}\u{438}\u{439} \u{435}\u{43B}\u{435}\u{43C}\u{435}\u{43D}\u{442}`,
            other: ()=>`${formatter.number(args.count)} \u{432}\u{438}\u{431}\u{440}\u{430}\u{43D}\u{438}\u{445} \u{435}\u{43B}\u{435}\u{43C}`
        })}`,
    "dragSelectedKeyboard": (args, formatter)=>`\u{41D}\u{430}\u{442}\u{438}\u{441}\u{43D}\u{456}\u{442}\u{44C} Enter, \u{449}\u{43E}\u{431} \u{43F}\u{435}\u{440}\u{435}\u{442}\u{44F}\u{433}\u{43D}\u{443}\u{442}\u{438} ${formatter.plural(args.count, {
            one: ()=>`${formatter.number(args.count)} \u{432}\u{438}\u{431}\u{440}\u{430}\u{43D}\u{438}\u{439} \u{435}\u{43B}\u{435}\u{43C}\u{435}\u{43D}\u{442}`,
            other: ()=>`${formatter.number(args.count)} \u{432}\u{438}\u{431}\u{440}\u{430}\u{43D}\u{438}\u{445} \u{435}\u{43B}\u{435}\u{43C}\u{435}\u{43D}\u{442}\u{438}(-\u{456}\u{432})`
        })}.`,
    "dragSelectedKeyboardAlt": (args, formatter)=>`\u{41D}\u{430}\u{442}\u{438}\u{441}\u{43D}\u{456}\u{442}\u{44C} Alt + Enter, \u{449}\u{43E}\u{431} \u{43F}\u{435}\u{440}\u{435}\u{442}\u{44F}\u{433}\u{43D}\u{443}\u{442}\u{438} ${formatter.plural(args.count, {
            one: ()=>`${formatter.number(args.count)} \u{432}\u{438}\u{431}\u{440}\u{430}\u{43D}\u{438}\u{439} \u{435}\u{43B}\u{435}\u{43C}\u{435}\u{43D}\u{442}`,
            other: ()=>`${formatter.number(args.count)} \u{432}\u{438}\u{431}\u{440}\u{430}\u{43D}\u{438}\u{445} \u{435}\u{43B}\u{435}\u{43C}\u{435}\u{43D}\u{442}\u{438}(-\u{456}\u{432})`
        })}.`,
    "dragSelectedLongPress": (args, formatter)=>`\u{423}\u{442}\u{440}\u{438}\u{43C}\u{443}\u{439}\u{442}\u{435}, \u{449}\u{43E}\u{431} \u{43F}\u{435}\u{440}\u{435}\u{442}\u{44F}\u{433}\u{43D}\u{443}\u{442}\u{438} ${formatter.plural(args.count, {
            one: ()=>`${formatter.number(args.count)} \u{432}\u{438}\u{431}\u{440}\u{430}\u{43D}\u{438}\u{439} \u{435}\u{43B}\u{435}\u{43C}\u{435}\u{43D}\u{442}`,
            other: ()=>`${formatter.number(args.count)} \u{432}\u{438}\u{431}\u{440}\u{430}\u{43D}\u{438}\u{445} \u{435}\u{43B}\u{435}\u{43C}\u{435}\u{43D}\u{442}\u{438}(-\u{456}\u{432})`
        })}.`,
    "dragStartedKeyboard": `\u{41F}\u{435}\u{440}\u{435}\u{442}\u{44F}\u{433}\u{443}\u{432}\u{430}\u{43D}\u{43D}\u{44F} \u{43F}\u{43E}\u{447}\u{430}\u{43B}\u{43E}\u{441}\u{44F}. \u{41D}\u{430}\u{442}\u{438}\u{441}\u{43D}\u{456}\u{442}\u{44C} Tab, \u{449}\u{43E}\u{431} \u{43F}\u{435}\u{440}\u{435}\u{439}\u{442}\u{438} \u{434}\u{43E} \u{446}\u{456}\u{43B}\u{456} \u{43F}\u{435}\u{440}\u{435}\u{442}\u{44F}\u{433}\u{443}\u{432}\u{430}\u{43D}\u{43D}\u{44F}, \u{43F}\u{43E}\u{442}\u{456}\u{43C} \u{43D}\u{430}\u{442}\u{438}\u{441}\u{43D}\u{456}\u{442}\u{44C} Enter, \u{449}\u{43E}\u{431} \u{43F}\u{435}\u{440}\u{435}\u{442}\u{44F}\u{433}\u{43D}\u{443}\u{442}\u{438}, \u{430}\u{431}\u{43E} Escape, \u{449}\u{43E}\u{431} \u{441}\u{43A}\u{430}\u{441}\u{443}\u{432}\u{430}\u{442}\u{438}.`,
    "dragStartedTouch": `\u{41F}\u{435}\u{440}\u{435}\u{442}\u{44F}\u{433}\u{443}\u{432}\u{430}\u{43D}\u{43D}\u{44F} \u{43F}\u{43E}\u{447}\u{430}\u{43B}\u{43E}\u{441}\u{44F}. \u{41F}\u{435}\u{440}\u{435}\u{439}\u{434}\u{456}\u{442}\u{44C} \u{434}\u{43E} \u{446}\u{456}\u{43B}\u{456} \u{43F}\u{435}\u{440}\u{435}\u{442}\u{44F}\u{433}\u{443}\u{432}\u{430}\u{43D}\u{43D}\u{44F}, \u{43F}\u{43E}\u{442}\u{456}\u{43C} \u{43D}\u{430}\u{442}\u{438}\u{441}\u{43D}\u{456}\u{442}\u{44C} \u{434}\u{432}\u{456}\u{447}\u{456}, \u{449}\u{43E}\u{431} \u{43F}\u{435}\u{440}\u{435}\u{442}\u{44F}\u{433}\u{43D}\u{443}\u{442}\u{438}.`,
    "dragStartedVirtual": `\u{41F}\u{435}\u{440}\u{435}\u{442}\u{44F}\u{433}\u{443}\u{432}\u{430}\u{43D}\u{43D}\u{44F} \u{43F}\u{43E}\u{447}\u{430}\u{43B}\u{43E}\u{441}\u{44F}. \u{41F}\u{435}\u{440}\u{435}\u{439}\u{434}\u{456}\u{442}\u{44C} \u{434}\u{43E} \u{446}\u{456}\u{43B}\u{456} \u{43F}\u{435}\u{440}\u{435}\u{442}\u{44F}\u{433}\u{443}\u{432}\u{430}\u{43D}\u{43D}\u{44F}, \u{43F}\u{43E}\u{442}\u{456}\u{43C} \u{43D}\u{430}\u{442}\u{438}\u{441}\u{43D}\u{456}\u{442}\u{44C} Enter, \u{449}\u{43E}\u{431} \u{43F}\u{435}\u{440}\u{435}\u{442}\u{44F}\u{433}\u{43D}\u{443}\u{442}\u{438}.`,
    "dropCanceled": `\u{41F}\u{435}\u{440}\u{435}\u{442}\u{44F}\u{433}\u{443}\u{432}\u{430}\u{43D}\u{43D}\u{44F} \u{441}\u{43A}\u{430}\u{441}\u{43E}\u{432}\u{430}\u{43D}\u{43E}.`,
    "dropComplete": `\u{41F}\u{435}\u{440}\u{435}\u{442}\u{44F}\u{433}\u{443}\u{432}\u{430}\u{43D}\u{43D}\u{44F} \u{437}\u{430}\u{432}\u{435}\u{440}\u{448}\u{435}\u{43D}\u{43E}.`,
    "dropDescriptionKeyboard": `\u{41D}\u{430}\u{442}\u{438}\u{441}\u{43D}\u{456}\u{442}\u{44C} Enter, \u{449}\u{43E}\u{431} \u{43F}\u{435}\u{440}\u{435}\u{442}\u{44F}\u{433}\u{43D}\u{443}\u{442}\u{438}. \u{41D}\u{430}\u{442}\u{438}\u{441}\u{43D}\u{456}\u{442}\u{44C} Escape, \u{449}\u{43E}\u{431} \u{441}\u{43A}\u{430}\u{441}\u{443}\u{432}\u{430}\u{442}\u{438} \u{43F}\u{435}\u{440}\u{435}\u{442}\u{44F}\u{433}\u{443}\u{432}\u{430}\u{43D}\u{43D}\u{44F}.`,
    "dropDescriptionTouch": `\u{41D}\u{430}\u{442}\u{438}\u{441}\u{43D}\u{456}\u{442}\u{44C} \u{434}\u{432}\u{456}\u{447}\u{456}, \u{449}\u{43E}\u{431} \u{43F}\u{435}\u{440}\u{435}\u{442}\u{44F}\u{433}\u{43D}\u{443}\u{442}\u{438}.`,
    "dropDescriptionVirtual": `\u{41D}\u{430}\u{442}\u{438}\u{441}\u{43D}\u{456}\u{442}\u{44C}, \u{449}\u{43E}\u{431} \u{43F}\u{435}\u{440}\u{435}\u{442}\u{44F}\u{433}\u{43D}\u{443}\u{442}\u{438}.`,
    "dropIndicator": `\u{456}\u{43D}\u{434}\u{438}\u{43A}\u{430}\u{442}\u{43E}\u{440} \u{43F}\u{435}\u{440}\u{435}\u{442}\u{44F}\u{433}\u{443}\u{432}\u{430}\u{43D}\u{43D}\u{44F}`,
    "dropOnItem": (args)=>`\u{41F}\u{435}\u{440}\u{435}\u{442}\u{44F}\u{433}\u{43D}\u{443}\u{442}\u{438} \u{43D}\u{430} ${args.itemText}`,
    "dropOnRoot": `\u{41F}\u{435}\u{440}\u{435}\u{442}\u{44F}\u{433}\u{43D}\u{443}\u{442}\u{438} \u{43D}\u{430}`,
    "endDragKeyboard": `\u{422}\u{440}\u{438}\u{432}\u{430}\u{454} \u{43F}\u{435}\u{440}\u{435}\u{442}\u{44F}\u{433}\u{443}\u{432}\u{430}\u{43D}\u{43D}\u{44F}. \u{41D}\u{430}\u{442}\u{438}\u{441}\u{43D}\u{456}\u{442}\u{44C} Enter, \u{449}\u{43E}\u{431} \u{441}\u{43A}\u{430}\u{441}\u{443}\u{432}\u{430}\u{442}\u{438} \u{43F}\u{435}\u{440}\u{435}\u{442}\u{44F}\u{433}\u{443}\u{432}\u{430}\u{43D}\u{43D}\u{44F}.`,
    "endDragTouch": `\u{422}\u{440}\u{438}\u{432}\u{430}\u{454} \u{43F}\u{435}\u{440}\u{435}\u{442}\u{44F}\u{433}\u{443}\u{432}\u{430}\u{43D}\u{43D}\u{44F}. \u{41D}\u{430}\u{442}\u{438}\u{441}\u{43D}\u{456}\u{442}\u{44C} \u{434}\u{432}\u{456}\u{447}\u{456}, \u{449}\u{43E}\u{431} \u{441}\u{43A}\u{430}\u{441}\u{443}\u{432}\u{430}\u{442}\u{438} \u{43F}\u{435}\u{440}\u{435}\u{442}\u{44F}\u{433}\u{443}\u{432}\u{430}\u{43D}\u{43D}\u{44F}.`,
    "endDragVirtual": `\u{422}\u{440}\u{438}\u{432}\u{430}\u{454} \u{43F}\u{435}\u{440}\u{435}\u{442}\u{44F}\u{433}\u{443}\u{432}\u{430}\u{43D}\u{43D}\u{44F}. \u{41D}\u{430}\u{442}\u{438}\u{441}\u{43D}\u{456}\u{442}\u{44C}, \u{449}\u{43E}\u{431} \u{441}\u{43A}\u{430}\u{441}\u{443}\u{432}\u{430}\u{442}\u{438} \u{43F}\u{435}\u{440}\u{435}\u{442}\u{44F}\u{433}\u{443}\u{432}\u{430}\u{43D}\u{43D}\u{44F}.`,
    "insertAfter": (args)=>`\u{412}\u{441}\u{442}\u{430}\u{432}\u{438}\u{442}\u{438} \u{43F}\u{456}\u{441}\u{43B}\u{44F} ${args.itemText}`,
    "insertBefore": (args)=>`\u{412}\u{441}\u{442}\u{430}\u{432}\u{438}\u{442}\u{438} \u{43F}\u{435}\u{440}\u{435}\u{434} ${args.itemText}`,
    "insertBetween": (args)=>`\u{412}\u{441}\u{442}\u{430}\u{432}\u{438}\u{442}\u{438} \u{43C}\u{456}\u{436} ${args.beforeItemText} \u{456} ${args.afterItemText}`
};

var $d0f488d433b55b8a$exports = {};
$d0f488d433b55b8a$exports = {
    "dragDescriptionKeyboard": `\u{6309} Enter \u{5F00}\u{59CB}\u{62D6}\u{52A8}\u{3002}`,
    "dragDescriptionKeyboardAlt": `\u{6309} Alt + Enter \u{5F00}\u{59CB}\u{62D6}\u{52A8}\u{3002}`,
    "dragDescriptionLongPress": `\u{957F}\u{6309}\u{4EE5}\u{5F00}\u{59CB}\u{62D6}\u{52A8}\u{3002}`,
    "dragDescriptionTouch": `\u{53CC}\u{51FB}\u{5F00}\u{59CB}\u{62D6}\u{52A8}\u{3002}`,
    "dragDescriptionVirtual": `\u{5355}\u{51FB}\u{5F00}\u{59CB}\u{62D6}\u{52A8}\u{3002}`,
    "dragItem": (args)=>`\u{62D6}\u{52A8} ${args.itemText}`,
    "dragSelectedItems": (args, formatter)=>`\u{62D6}\u{52A8} ${formatter.plural(args.count, {
            one: ()=>`${formatter.number(args.count)} \u{9009}\u{4E2D}\u{9879}\u{76EE}`,
            other: ()=>`${formatter.number(args.count)} \u{9009}\u{4E2D}\u{9879}\u{76EE}`
        })}`,
    "dragSelectedKeyboard": (args, formatter)=>`\u{6309} Enter \u{4EE5}\u{62D6}\u{52A8} ${formatter.plural(args.count, {
            one: ()=>`${formatter.number(args.count)} \u{4E2A}\u{9009}\u{5B9A}\u{9879}`,
            other: ()=>`${formatter.number(args.count)} \u{4E2A}\u{9009}\u{5B9A}\u{9879}`
        })}\u{3002}`,
    "dragSelectedKeyboardAlt": (args, formatter)=>`\u{6309} Alt + Enter \u{4EE5}\u{62D6}\u{52A8} ${formatter.plural(args.count, {
            one: ()=>`${formatter.number(args.count)} \u{4E2A}\u{9009}\u{5B9A}\u{9879}`,
            other: ()=>`${formatter.number(args.count)} \u{4E2A}\u{9009}\u{5B9A}\u{9879}`
        })}\u{3002}`,
    "dragSelectedLongPress": (args, formatter)=>`\u{957F}\u{6309}\u{4EE5}\u{62D6}\u{52A8} ${formatter.plural(args.count, {
            one: ()=>`${formatter.number(args.count)} \u{4E2A}\u{9009}\u{5B9A}\u{9879}`,
            other: ()=>`${formatter.number(args.count)} \u{4E2A}\u{9009}\u{5B9A}\u{9879}`
        })}\u{3002}`,
    "dragStartedKeyboard": `\u{5DF2}\u{5F00}\u{59CB}\u{62D6}\u{52A8}\u{3002}\u{6309} Tab \u{5BFC}\u{822A}\u{5230}\u{653E}\u{7F6E}\u{76EE}\u{6807}\u{FF0C}\u{7136}\u{540E}\u{6309} Enter \u{653E}\u{7F6E}\u{6216}\u{6309} Escape \u{53D6}\u{6D88}\u{3002}`,
    "dragStartedTouch": `\u{5DF2}\u{5F00}\u{59CB}\u{62D6}\u{52A8}\u{3002}\u{5BFC}\u{822A}\u{5230}\u{653E}\u{7F6E}\u{76EE}\u{6807}\u{FF0C}\u{7136}\u{540E}\u{53CC}\u{51FB}\u{653E}\u{7F6E}\u{3002}`,
    "dragStartedVirtual": `\u{5DF2}\u{5F00}\u{59CB}\u{62D6}\u{52A8}\u{3002}\u{5BFC}\u{822A}\u{5230}\u{653E}\u{7F6E}\u{76EE}\u{6807}\u{FF0C}\u{7136}\u{540E}\u{5355}\u{51FB}\u{6216}\u{6309} Enter \u{653E}\u{7F6E}\u{3002}`,
    "dropCanceled": `\u{653E}\u{7F6E}\u{5DF2}\u{53D6}\u{6D88}\u{3002}`,
    "dropComplete": `\u{653E}\u{7F6E}\u{5DF2}\u{5B8C}\u{6210}\u{3002}`,
    "dropDescriptionKeyboard": `\u{6309} Enter \u{653E}\u{7F6E}\u{3002}\u{6309} Escape \u{53D6}\u{6D88}\u{62D6}\u{52A8}\u{3002}`,
    "dropDescriptionTouch": `\u{53CC}\u{51FB}\u{653E}\u{7F6E}\u{3002}`,
    "dropDescriptionVirtual": `\u{5355}\u{51FB}\u{653E}\u{7F6E}\u{3002}`,
    "dropIndicator": `\u{653E}\u{7F6E}\u{6807}\u{8BB0}`,
    "dropOnItem": (args)=>`\u{653E}\u{7F6E}\u{4E8E} ${args.itemText}`,
    "dropOnRoot": `\u{653E}\u{7F6E}\u{4E8E}`,
    "endDragKeyboard": `\u{6B63}\u{5728}\u{62D6}\u{52A8}\u{3002}\u{6309} Enter \u{53D6}\u{6D88}\u{62D6}\u{52A8}\u{3002}`,
    "endDragTouch": `\u{6B63}\u{5728}\u{62D6}\u{52A8}\u{3002}\u{53CC}\u{51FB}\u{53D6}\u{6D88}\u{62D6}\u{52A8}\u{3002}`,
    "endDragVirtual": `\u{6B63}\u{5728}\u{62D6}\u{52A8}\u{3002}\u{5355}\u{51FB}\u{53D6}\u{6D88}\u{62D6}\u{52A8}\u{3002}`,
    "insertAfter": (args)=>`\u{63D2}\u{5165}\u{5230} ${args.itemText} \u{4E4B}\u{540E}`,
    "insertBefore": (args)=>`\u{63D2}\u{5165}\u{5230} ${args.itemText} \u{4E4B}\u{524D}`,
    "insertBetween": (args)=>`\u{63D2}\u{5165}\u{5230} ${args.beforeItemText} \u{548C} ${args.afterItemText} \u{4E4B}\u{95F4}`
};

var $46168b0dce85301e$exports = {};
$46168b0dce85301e$exports = {
    "dragDescriptionKeyboard": `\u{6309} Enter \u{9375}\u{4EE5}\u{958B}\u{59CB}\u{62D6}\u{66F3}\u{3002}`,
    "dragDescriptionKeyboardAlt": `\u{6309} Alt+Enter \u{9375}\u{4EE5}\u{958B}\u{59CB}\u{62D6}\u{66F3}\u{3002}`,
    "dragDescriptionLongPress": `\u{9577}\u{6309}\u{4EE5}\u{958B}\u{59CB}\u{62D6}\u{66F3}\u{3002}`,
    "dragDescriptionTouch": `\u{8F15}\u{9EDE}\u{5169}\u{4E0B}\u{4EE5}\u{958B}\u{59CB}\u{62D6}\u{66F3}\u{3002}`,
    "dragDescriptionVirtual": `\u{6309}\u{4E00}\u{4E0B}\u{6ED1}\u{9F20}\u{4EE5}\u{958B}\u{59CB}\u{62D6}\u{66F3}\u{3002}`,
    "dragItem": (args)=>`\u{62D6}\u{66F3}\u{300C}${args.itemText}\u{300D}`,
    "dragSelectedItems": (args, formatter)=>`\u{62D6}\u{66F3} ${formatter.plural(args.count, {
            one: ()=>`${formatter.number(args.count)} \u{500B}\u{9078}\u{5B9A}\u{9805}\u{76EE}`,
            other: ()=>`${formatter.number(args.count)} \u{500B}\u{9078}\u{5B9A}\u{9805}\u{76EE}`
        })}`,
    "dragSelectedKeyboard": (args, formatter)=>`\u{6309} Enter \u{9375}\u{4EE5}\u{62D6}\u{66F3} ${formatter.plural(args.count, {
            one: ()=>`${formatter.number(args.count)} \u{500B}\u{9078}\u{5B9A}\u{9805}\u{76EE}`,
            other: ()=>`${formatter.number(args.count)} \u{500B}\u{9078}\u{5B9A}\u{9805}\u{76EE}`
        })}\u{3002}`,
    "dragSelectedKeyboardAlt": (args, formatter)=>`\u{6309} Alt+Enter \u{9375}\u{4EE5}\u{62D6}\u{66F3} ${formatter.plural(args.count, {
            one: ()=>`${formatter.number(args.count)} \u{500B}\u{9078}\u{5B9A}\u{9805}\u{76EE}`,
            other: ()=>`${formatter.number(args.count)} \u{500B}\u{9078}\u{5B9A}\u{9805}\u{76EE}`
        })}\u{3002}`,
    "dragSelectedLongPress": (args, formatter)=>`\u{9577}\u{6309}\u{4EE5}\u{62D6}\u{66F3} ${formatter.plural(args.count, {
            one: ()=>`${formatter.number(args.count)} \u{500B}\u{9078}\u{5B9A}\u{9805}\u{76EE}`,
            other: ()=>`${formatter.number(args.count)} \u{500B}\u{9078}\u{5B9A}\u{9805}\u{76EE}`
        })}\u{3002}`,
    "dragStartedKeyboard": `\u{5DF2}\u{958B}\u{59CB}\u{62D6}\u{66F3}\u{3002}\u{6309} Tab \u{9375}\u{4EE5}\u{700F}\u{89BD}\u{81F3}\u{653E}\u{7F6E}\u{76EE}\u{6A19}\u{FF0C}\u{7136}\u{5F8C}\u{6309} Enter \u{9375}\u{4EE5}\u{653E}\u{7F6E}\u{FF0C}\u{6216}\u{6309} Escape \u{9375}\u{4EE5}\u{53D6}\u{6D88}\u{3002}`,
    "dragStartedTouch": `\u{5DF2}\u{958B}\u{59CB}\u{62D6}\u{66F3}\u{3002}\u{700F}\u{89BD}\u{81F3}\u{653E}\u{7F6E}\u{76EE}\u{6A19}\u{FF0C}\u{7136}\u{5F8C}\u{8F15}\u{9EDE}\u{5169}\u{4E0B}\u{4EE5}\u{653E}\u{7F6E}\u{3002}`,
    "dragStartedVirtual": `\u{5DF2}\u{958B}\u{59CB}\u{62D6}\u{66F3}\u{3002}\u{700F}\u{89BD}\u{81F3}\u{653E}\u{7F6E}\u{76EE}\u{6A19}\u{FF0C}\u{7136}\u{5F8C}\u{6309}\u{4E00}\u{4E0B}\u{6ED1}\u{9F20}\u{6216}\u{6309} Enter \u{9375}\u{4EE5}\u{653E}\u{7F6E}\u{3002}`,
    "dropCanceled": `\u{653E}\u{7F6E}\u{5DF2}\u{53D6}\u{6D88}\u{3002}`,
    "dropComplete": `\u{653E}\u{7F6E}\u{5DF2}\u{5B8C}\u{6210}\u{3002}`,
    "dropDescriptionKeyboard": `\u{6309} Enter \u{9375}\u{4EE5}\u{653E}\u{7F6E}\u{3002}\u{6309} Escape \u{9375}\u{4EE5}\u{53D6}\u{6D88}\u{62D6}\u{66F3}\u{3002}`,
    "dropDescriptionTouch": `\u{8F15}\u{9EDE}\u{5169}\u{4E0B}\u{4EE5}\u{653E}\u{7F6E}\u{3002}`,
    "dropDescriptionVirtual": `\u{6309}\u{4E00}\u{4E0B}\u{6ED1}\u{9F20}\u{4EE5}\u{653E}\u{7F6E}\u{3002}`,
    "dropIndicator": `\u{653E}\u{7F6E}\u{6307}\u{793A}\u{5668}`,
    "dropOnItem": (args)=>`\u{653E}\u{7F6E}\u{5728}\u{300C}${args.itemText}\u{300D}\u{4E0A}`,
    "dropOnRoot": `\u{653E}\u{7F6E}\u{5728}`,
    "endDragKeyboard": `\u{62D6}\u{66F3}\u{4E2D}\u{3002}\u{6309} Enter \u{9375}\u{4EE5}\u{53D6}\u{6D88}\u{62D6}\u{66F3}\u{3002}`,
    "endDragTouch": `\u{62D6}\u{66F3}\u{4E2D}\u{3002}\u{8F15}\u{9EDE}\u{5169}\u{4E0B}\u{4EE5}\u{53D6}\u{6D88}\u{62D6}\u{66F3}\u{3002}`,
    "endDragVirtual": `\u{62D6}\u{66F3}\u{4E2D}\u{3002}\u{6309}\u{4E00}\u{4E0B}\u{6ED1}\u{9F20}\u{4EE5}\u{53D6}\u{6D88}\u{62D6}\u{66F3}\u{3002}`,
    "insertAfter": (args)=>`\u{63D2}\u{5165}\u{81F3}\u{300C}${args.itemText}\u{300D}\u{4E4B}\u{5F8C}`,
    "insertBefore": (args)=>`\u{63D2}\u{5165}\u{81F3}\u{300C}${args.itemText}\u{300D}\u{4E4B}\u{524D}`,
    "insertBetween": (args)=>`\u{63D2}\u{5165}\u{81F3}\u{300C}${args.beforeItemText}\u{300D}\u{548C}\u{300C}${args.afterItemText}\u{300D}\u{4E4B}\u{9593}`
};

var $865c2eb7c00a83f1$exports = {};


































$865c2eb7c00a83f1$exports = {
    "ar-AE": $7dfcac1a0c98c789$exports,
    "bg-BG": $f311c26671219eca$exports,
    "cs-CZ": $1aa4ade186550f72$exports,
    "da-DK": $b6b0ea1b94a7633c$exports,
    "de-DE": $d10e4f47c744ad52$exports,
    "el-GR": $b3d2bb9abce688ab$exports,
    "en-US": $f9b46437e610cca1$exports,
    "es-ES": $204b5c01bd3acf26$exports,
    "et-EE": $110bdd83348ecbc0$exports,
    "fi-FI": $87d3ccd5e347c7cc$exports,
    "fr-FR": $a5de891427686596$exports,
    "he-IL": $ad7f4c66d85b4494$exports,
    "hr-HR": $4aa59f3c6a796cae$exports,
    "hu-HU": $d8d3646556c40586$exports,
    "it-IT": $982d558b45395246$exports,
    "ja-JP": $6a0cf387b9de036c$exports,
    "ko-KR": $a97fefa2956f4bcb$exports,
    "lt-LT": $5fb5837f94e1c150$exports,
    "lv-LV": $5b2e5709864cc922$exports,
    "nb-NO": $ee15bb8efb18cc69$exports,
    "nl-NL": $1daf2d4602e26ac4$exports,
    "pl-PL": $7115429b0f60511f$exports,
    "pt-BR": $5edd453ae5d4a8bc$exports,
    "pt-PT": $5f431994f708535e$exports,
    "ro-RO": $107b5e2e45e971f1$exports,
    "ru-RU": $d4b9c2f01c1892f7$exports,
    "sk-SK": $dbdc1942894e83e4$exports,
    "sl-SI": $fbaaaaebd547d998$exports,
    "sr-SP": $a0caa33f1e264489$exports,
    "sv-SE": $d576b66176f5c0ff$exports,
    "tr-TR": $0681f168c13d8f2a$exports,
    "uk-UA": $2bfbc1f42c1cf5a7$exports,
    "zh-CN": $d0f488d433b55b8a$exports,
    "zh-TW": $46168b0dce85301e$exports
};

function $parcel$interopDefault$e(a) {
  return a && a.__esModule ? a.default : a;
}
/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 






const $8253ed7ece74b463$var$MESSAGES = {
    keyboard: {
        start: 'dragDescriptionKeyboard',
        end: 'endDragKeyboard'
    },
    touch: {
        start: 'dragDescriptionTouch',
        end: 'endDragTouch'
    },
    virtual: {
        start: 'dragDescriptionVirtual',
        end: 'endDragVirtual'
    }
};
function $8253ed7ece74b463$export$7941f8aafa4b6021(options) {
    let { hasDragButton: hasDragButton, isDisabled: isDisabled } = options;
    let stringFormatter = ($fca6afa0e843324b$export$f12b703ca79dfbb1)((($parcel$interopDefault$e($865c2eb7c00a83f1$exports))), '@react-aria/dnd');
    let state = (reactExports.useRef)({
        options: options,
        x: 0,
        y: 0
    }).current;
    state.options = options;
    let isDraggingRef = (reactExports.useRef)(false);
    let [isDragging, setDraggingState] = (reactExports.useState)(false);
    let setDragging = (isDragging)=>{
        isDraggingRef.current = isDragging;
        setDraggingState(isDragging);
    };
    let { addGlobalListener: addGlobalListener, removeAllGlobalListeners: removeAllGlobalListeners } = ($03deb23ff14920c4$export$4eaf04e54aa8eed6)();
    let modalityOnPointerDown = (reactExports.useRef)(null);
    let onDragStart = (e)=>{
        var _options_preview;
        if (e.defaultPrevented) return;
        // Prevent the drag event from propagating to any parent draggables
        e.stopPropagation();
        // If this drag was initiated by a mobile screen reader (e.g. VoiceOver or TalkBack), enter virtual dragging mode.
        if (modalityOnPointerDown.current === 'virtual') {
            e.preventDefault();
            startDragging(e.target);
            modalityOnPointerDown.current = null;
            return;
        }
        if (typeof options.onDragStart === 'function') options.onDragStart({
            type: 'dragstart',
            x: e.clientX,
            y: e.clientY
        });
        let items = options.getItems();
        ($7252cd45fc48c07c$export$f9c1490890ddd063)(e.dataTransfer, items);
        let allowed = ($103790afe9474d1c$export$60b7b4bcf3903d8e).all;
        if (typeof options.getAllowedDropOperations === 'function') {
            let allowedOperations = options.getAllowedDropOperations();
            allowed = ($103790afe9474d1c$export$60b7b4bcf3903d8e).none;
            for (let operation of allowedOperations)allowed |= ($103790afe9474d1c$export$60b7b4bcf3903d8e)[operation] || ($103790afe9474d1c$export$60b7b4bcf3903d8e).none;
        }
        ($7252cd45fc48c07c$export$6539bc8c3a0a2d67)(allowed);
        e.dataTransfer.effectAllowed = ($103790afe9474d1c$export$dd0165308d8bff45)[allowed] || 'none';
        // If there is a preview option, use it to render a custom preview image that will
        // appear under the pointer while dragging. If not, the element itself is dragged by the browser.
        if (typeof ((_options_preview = options.preview) === null || _options_preview === void 0 ? void 0 : _options_preview.current) === 'function') options.preview.current(items, (node)=>{
            // Compute the offset that the preview will appear under the mouse.
            // If possible, this is based on the point the user clicked on the target.
            // If the preview is much smaller, then just use the center point of the preview.
            let size = node.getBoundingClientRect();
            let rect = e.currentTarget.getBoundingClientRect();
            let x = e.clientX - rect.x;
            let y = e.clientY - rect.y;
            if (x > size.width || y > size.height) {
                x = size.width / 2;
                y = size.height / 2;
            }
            // Rounding height to an even number prevents blurry preview seen on some screens
            let height = 2 * Math.round(size.height / 2);
            node.style.height = `${height}px`;
            e.dataTransfer.setDragImage(node, x, y);
        });
        // Enforce that drops are handled by useDrop.
        addGlobalListener(window, 'drop', (e)=>{
            e.preventDefault();
            e.stopPropagation();
            console.warn('Drags initiated from the React Aria useDrag hook may only be dropped on a target created with useDrop. This ensures that a keyboard and screen reader accessible alternative is available.');
        }, {
            once: true
        });
        state.x = e.clientX;
        state.y = e.clientY;
        // Wait a frame before we set dragging to true so that the browser has time to
        // render the preview image before we update the element that has been dragged.
        requestAnimationFrame(()=>{
            setDragging(true);
        });
    };
    let onDrag = (e)=>{
        // Prevent the drag event from propagating to any parent draggables
        e.stopPropagation();
        if (e.clientX === state.x && e.clientY === state.y) return;
        if (typeof options.onDragMove === 'function') options.onDragMove({
            type: 'dragmove',
            x: e.clientX,
            y: e.clientY
        });
        state.x = e.clientX;
        state.y = e.clientY;
    };
    let onDragEnd = (e)=>{
        // Prevent the drag event from propagating to any parent draggables
        e.stopPropagation();
        if (typeof options.onDragEnd === 'function') {
            let event = {
                type: 'dragend',
                x: e.clientX,
                y: e.clientY,
                dropOperation: ($103790afe9474d1c$export$608ecc6f1b23c35d)[e.dataTransfer.dropEffect]
            };
            // Chrome Android always returns none as its dropEffect so we use the drop effect set in useDrop via
            // onDragEnter/onDragOver instead. https://bugs.chromium.org/p/chromium/issues/detail?id=1353951
            if ($7252cd45fc48c07c$export$8e6636520ac15722) event.dropOperation = ($103790afe9474d1c$export$608ecc6f1b23c35d)[$7252cd45fc48c07c$export$8e6636520ac15722];
            options.onDragEnd(event);
        }
        setDragging(false);
        removeAllGlobalListeners();
        ($7252cd45fc48c07c$export$6539bc8c3a0a2d67)(($103790afe9474d1c$export$60b7b4bcf3903d8e).none);
        ($7252cd45fc48c07c$export$64f52ed7349ddb84)(undefined);
    };
    // If the dragged element is removed from the DOM via onDrop, onDragEnd won't fire: https://bugzilla.mozilla.org/show_bug.cgi?id=460801
    // In this case, we need to manually call onDragEnd on cleanup
    // eslint-disable-next-line arrow-body-style
    ($f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(()=>{
        return ()=>{
            if (isDraggingRef.current) {
                if (typeof state.options.onDragEnd === 'function') {
                    let event = {
                        type: 'dragend',
                        x: 0,
                        y: 0,
                        dropOperation: ($103790afe9474d1c$export$608ecc6f1b23c35d)[($7252cd45fc48c07c$export$8e6636520ac15722) || 'none']
                    };
                    state.options.onDragEnd(event);
                }
                setDragging(false);
                ($7252cd45fc48c07c$export$6539bc8c3a0a2d67)(($103790afe9474d1c$export$60b7b4bcf3903d8e).none);
                ($7252cd45fc48c07c$export$64f52ed7349ddb84)(undefined);
            }
        };
    }, [
        state
    ]);
    let onPress = (e)=>{
        if (e.pointerType !== 'keyboard' && e.pointerType !== 'virtual') return;
        startDragging(e.target);
    };
    let startDragging = (target)=>{
        if (typeof state.options.onDragStart === 'function') {
            let rect = target.getBoundingClientRect();
            state.options.onDragStart({
                type: 'dragstart',
                x: rect.x + rect.width / 2,
                y: rect.y + rect.height / 2
            });
        }
        $67560de7c78cb232$export$549dbcf8649bf3b2({
            element: target,
            items: state.options.getItems(),
            allowedDropOperations: typeof state.options.getAllowedDropOperations === 'function' ? state.options.getAllowedDropOperations() : [
                'move',
                'copy',
                'link'
            ],
            onDragEnd (e) {
                setDragging(false);
                if (typeof state.options.onDragEnd === 'function') state.options.onDragEnd(e);
            }
        }, stringFormatter);
        setDragging(true);
    };
    let modality = ($7252cd45fc48c07c$export$49bac5d6d4b352ea)();
    let message = !isDragging ? $8253ed7ece74b463$var$MESSAGES[modality].start : $8253ed7ece74b463$var$MESSAGES[modality].end;
    let descriptionProps = ($ef06256079686ba0$export$f8aeda7b10753fa1)(stringFormatter.format(message));
    let interactions;
    if (!hasDragButton) // If there's no separate button to trigger accessible drag and drop mode,
    // then add event handlers to the draggable element itself to start dragging.
    // For keyboard, we use the Enter key in a capturing listener to prevent other
    // events such as selection from also occurring. We attempt to infer whether a
    // pointer event (e.g. long press) came from a touch screen reader, and then initiate
    // dragging in the native onDragStart listener above.
    interactions = {
        ...descriptionProps,
        onPointerDown (e) {
            modalityOnPointerDown.current = ($6a7db85432448f7f$export$29bf1b5f2c56cf63)(e.nativeEvent) ? 'virtual' : e.pointerType;
            // Try to detect virtual drag passthrough gestures.
            if (e.width < 1 && e.height < 1) // iOS VoiceOver.
            modalityOnPointerDown.current = 'virtual';
            else {
                let rect = e.currentTarget.getBoundingClientRect();
                let offsetX = e.clientX - rect.x;
                let offsetY = e.clientY - rect.y;
                let centerX = rect.width / 2;
                let centerY = rect.height / 2;
                if (Math.abs(offsetX - centerX) <= 0.5 && Math.abs(offsetY - centerY) <= 0.5) // Android TalkBack.
                modalityOnPointerDown.current = 'virtual';
                else modalityOnPointerDown.current = e.pointerType;
            }
        },
        onKeyDownCapture (e) {
            if (e.target === e.currentTarget && e.key === 'Enter') {
                e.preventDefault();
                e.stopPropagation();
            }
        },
        onKeyUpCapture (e) {
            if (e.target === e.currentTarget && e.key === 'Enter') {
                e.preventDefault();
                e.stopPropagation();
                startDragging(e.target);
            }
        },
        onClick (e) {
            // Handle NVDA/JAWS in browse mode, and touch screen readers. In this case, no keyboard events are fired.
            if (($6a7db85432448f7f$export$60278871457622de)(e.nativeEvent) || modalityOnPointerDown.current === 'virtual') {
                e.preventDefault();
                e.stopPropagation();
                startDragging(e.target);
            }
        }
    };
    if (isDisabled) return {
        dragProps: {
            draggable: 'false'
        },
        dragButtonProps: {},
        isDragging: false
    };
    return {
        dragProps: {
            ...interactions,
            draggable: 'true',
            onDragStart: onDragStart,
            onDrag: onDrag,
            onDragEnd: onDragEnd
        },
        dragButtonProps: {
            ...descriptionProps,
            onPress: onPress
        },
        isDragging: isDragging
    };
}

function $parcel$interopDefault$d(a) {
  return a && a.__esModule ? a.default : a;
}
/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 




const $224594fe3e57ff1e$var$MESSAGES = {
    keyboard: 'dropDescriptionKeyboard',
    touch: 'dropDescriptionTouch',
    virtual: 'dropDescriptionVirtual'
};
function $224594fe3e57ff1e$export$62447ad3d2ec7da6() {
    let stringFormatter = ($fca6afa0e843324b$export$f12b703ca79dfbb1)((($parcel$interopDefault$d($865c2eb7c00a83f1$exports))), '@react-aria/dnd');
    let modality = ($7252cd45fc48c07c$export$49bac5d6d4b352ea)();
    let dragSession = $67560de7c78cb232$export$418e185dd3f1b968();
    let descriptionProps = ($ef06256079686ba0$export$f8aeda7b10753fa1)(dragSession ? stringFormatter.format($224594fe3e57ff1e$var$MESSAGES[modality]) : '');
    return {
        dropProps: {
            ...descriptionProps,
            // Mobile Safari does not properly bubble click events on elements except links or inputs
            // unless there is an onclick handler bound directly to the element itself. By adding this
            // handler, React will take care of adding that for us, and we are able to handle document
            // level click events in the DragManager.
            // See https://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
            onClick: ()=>{}
        }
    };
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 





const $5c06e4929e123553$var$DROP_ACTIVATE_TIMEOUT = 800;
function $5c06e4929e123553$export$ccdee5eaf73cf661(options) {
    let { hasDropButton: hasDropButton, isDisabled: isDisabled } = options;
    let [isDropTarget, setDropTarget] = (reactExports.useState)(false);
    let state = (reactExports.useRef)({
        x: 0,
        y: 0,
        dragOverElements: new Set(),
        dropEffect: 'none',
        allowedOperations: ($103790afe9474d1c$export$60b7b4bcf3903d8e).all,
        dropActivateTimer: null
    }).current;
    let fireDropEnter = (e)=>{
        setDropTarget(true);
        if (typeof options.onDropEnter === 'function') {
            let rect = e.currentTarget.getBoundingClientRect();
            options.onDropEnter({
                type: 'dropenter',
                x: e.clientX - rect.x,
                y: e.clientY - rect.y
            });
        }
    };
    let fireDropExit = (e)=>{
        setDropTarget(false);
        if (typeof options.onDropExit === 'function') {
            let rect = e.currentTarget.getBoundingClientRect();
            options.onDropExit({
                type: 'dropexit',
                x: e.clientX - rect.x,
                y: e.clientY - rect.y
            });
        }
    };
    let onDragOver = (e)=>{
        e.preventDefault();
        e.stopPropagation();
        let allowedOperations = $5c06e4929e123553$var$getAllowedOperations(e);
        if (e.clientX === state.x && e.clientY === state.y && allowedOperations === state.allowedOperations) {
            e.dataTransfer.dropEffect = state.dropEffect;
            return;
        }
        state.x = e.clientX;
        state.y = e.clientY;
        let prevDropEffect = state.dropEffect;
        // Update drop effect if allowed drop operations changed (e.g. user pressed modifier key).
        if (allowedOperations !== state.allowedOperations) {
            let allowedOps = $5c06e4929e123553$var$allowedOperationsToArray(allowedOperations);
            let dropOperation = allowedOps[0];
            if (typeof options.getDropOperation === 'function') {
                let types = new ($7252cd45fc48c07c$export$7f04ce188c91447c)(e.dataTransfer);
                dropOperation = $5c06e4929e123553$var$getDropOperation(allowedOperations, options.getDropOperation(types, allowedOps));
            }
            state.dropEffect = ($103790afe9474d1c$export$5eacb0769d26d3b2)[dropOperation] || 'none';
        }
        if (typeof options.getDropOperationForPoint === 'function') {
            let types = new ($7252cd45fc48c07c$export$7f04ce188c91447c)(e.dataTransfer);
            let rect = e.currentTarget.getBoundingClientRect();
            let dropOperation = $5c06e4929e123553$var$getDropOperation(allowedOperations, options.getDropOperationForPoint(types, $5c06e4929e123553$var$allowedOperationsToArray(allowedOperations), state.x - rect.x, state.y - rect.y));
            state.dropEffect = ($103790afe9474d1c$export$5eacb0769d26d3b2)[dropOperation] || 'none';
        }
        state.allowedOperations = allowedOperations;
        e.dataTransfer.dropEffect = state.dropEffect;
        // If the drop operation changes, update state and fire events appropriately.
        if (state.dropEffect === 'none' && prevDropEffect !== 'none') fireDropExit(e);
        else if (state.dropEffect !== 'none' && prevDropEffect === 'none') fireDropEnter(e);
        if (typeof options.onDropMove === 'function' && state.dropEffect !== 'none') {
            let rect = e.currentTarget.getBoundingClientRect();
            options.onDropMove({
                type: 'dropmove',
                x: state.x - rect.x,
                y: state.y - rect.y
            });
        }
        clearTimeout(state.dropActivateTimer);
        if (typeof options.onDropActivate === 'function' && state.dropEffect !== 'none') {
            let rect = e.currentTarget.getBoundingClientRect();
            state.dropActivateTimer = setTimeout(()=>{
                options.onDropActivate({
                    type: 'dropactivate',
                    x: state.x - rect.x,
                    y: state.y - rect.y
                });
            }, $5c06e4929e123553$var$DROP_ACTIVATE_TIMEOUT);
        }
    };
    let onDragEnter = (e)=>{
        e.preventDefault();
        e.stopPropagation();
        state.dragOverElements.add(e.target);
        if (state.dragOverElements.size > 1) return;
        let allowedOperationsBits = $5c06e4929e123553$var$getAllowedOperations(e);
        let allowedOperations = $5c06e4929e123553$var$allowedOperationsToArray(allowedOperationsBits);
        let dropOperation = allowedOperations[0];
        if (typeof options.getDropOperation === 'function') {
            let types = new ($7252cd45fc48c07c$export$7f04ce188c91447c)(e.dataTransfer);
            dropOperation = $5c06e4929e123553$var$getDropOperation(allowedOperationsBits, options.getDropOperation(types, allowedOperations));
        }
        if (typeof options.getDropOperationForPoint === 'function') {
            let types = new ($7252cd45fc48c07c$export$7f04ce188c91447c)(e.dataTransfer);
            let rect = e.currentTarget.getBoundingClientRect();
            dropOperation = $5c06e4929e123553$var$getDropOperation(allowedOperationsBits, options.getDropOperationForPoint(types, allowedOperations, e.clientX - rect.x, e.clientY - rect.y));
        }
        state.x = e.clientX;
        state.y = e.clientY;
        state.allowedOperations = allowedOperationsBits;
        state.dropEffect = ($103790afe9474d1c$export$5eacb0769d26d3b2)[dropOperation] || 'none';
        e.dataTransfer.dropEffect = state.dropEffect;
        if (dropOperation !== 'cancel') fireDropEnter(e);
    };
    let onDragLeave = (e)=>{
        e.preventDefault();
        e.stopPropagation();
        // We would use e.relatedTarget to detect if the drag is still inside the drop target,
        // but it is always null in WebKit. https://bugs.webkit.org/show_bug.cgi?id=66547
        // Instead, we track all of the targets of dragenter events in a set, and remove them
        // in dragleave. When the set becomes empty, we've left the drop target completely.
        // We must also remove any elements that are no longer in the DOM, because dragleave
        // events will never be fired for these. This can happen, for example, with drop
        // indicators between items, which disappear when the drop target changes.
        state.dragOverElements.delete(e.target);
        for (let element of state.dragOverElements)if (!e.currentTarget.contains(element)) state.dragOverElements.delete(element);
        if (state.dragOverElements.size > 0) return;
        if (state.dropEffect !== 'none') fireDropExit(e);
        clearTimeout(state.dropActivateTimer);
    };
    let onDrop = (e)=>{
        e.preventDefault();
        e.stopPropagation();
        // Track drop effect in global state for Chrome Android. https://bugs.chromium.org/p/chromium/issues/detail?id=1353951
        // Android onDragEnd always returns "none" as its drop effect.
        ($7252cd45fc48c07c$export$64f52ed7349ddb84)(state.dropEffect);
        if (typeof options.onDrop === 'function') {
            let dropOperation = ($103790afe9474d1c$export$608ecc6f1b23c35d)[state.dropEffect];
            let items = ($7252cd45fc48c07c$export$d9e760437831f8b3)(e.dataTransfer);
            let rect = e.currentTarget.getBoundingClientRect();
            let event = {
                type: 'drop',
                x: e.clientX - rect.x,
                y: e.clientY - rect.y,
                items: items,
                dropOperation: dropOperation
            };
            options.onDrop(event);
        }
        let dndStateSnapshot = {
            ...($7252cd45fc48c07c$export$6ca6700462636d0b)
        };
        state.dragOverElements.clear();
        fireDropExit(e);
        clearTimeout(state.dropActivateTimer);
        // If there wasn't a collection being tracked as a dragged collection, then we are in a case where a non RSP drag is dropped on a
        // RSP collection and thus we don't need to preserve the global drop effect
        if (dndStateSnapshot.draggingCollectionRef == null) ($7252cd45fc48c07c$export$64f52ed7349ddb84)(undefined);
        else // Otherwise we need to preserve the global dnd state for onDragEnd's isInternal check.
        // At the moment fireDropExit may clear dropCollectionRef (i.e. useDroppableCollection's provided onDropExit, required to clear dropCollectionRef when exiting a valid drop target)
        ($7252cd45fc48c07c$export$6c10d32b362bfa5f)(dndStateSnapshot);
    };
    let onDropEnter = ($8ae05eaa5c114e9c$export$7f54fc3180508a52)((e)=>{
        if (typeof options.onDropEnter === 'function') options.onDropEnter(e);
    });
    let onDropExit = ($8ae05eaa5c114e9c$export$7f54fc3180508a52)((e)=>{
        if (typeof options.onDropExit === 'function') options.onDropExit(e);
    });
    let onDropActivate = ($8ae05eaa5c114e9c$export$7f54fc3180508a52)((e)=>{
        if (typeof options.onDropActivate === 'function') options.onDropActivate(e);
    });
    let onKeyboardDrop = ($8ae05eaa5c114e9c$export$7f54fc3180508a52)((e)=>{
        if (typeof options.onDrop === 'function') options.onDrop(e);
    });
    let getDropOperationKeyboard = ($8ae05eaa5c114e9c$export$7f54fc3180508a52)((types, allowedOperations)=>{
        if (options.getDropOperation) return options.getDropOperation(types, allowedOperations);
        return allowedOperations[0];
    });
    let { ref: ref } = options;
    ($f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(()=>{
        if (isDisabled) return;
        return $67560de7c78cb232$export$c28d9fb4a54e471a({
            element: ref.current,
            getDropOperation: getDropOperationKeyboard,
            onDropEnter (e) {
                setDropTarget(true);
                onDropEnter(e);
            },
            onDropExit (e) {
                setDropTarget(false);
                onDropExit(e);
            },
            onDrop: onKeyboardDrop,
            onDropActivate: onDropActivate
        });
    }, [
        isDisabled,
        ref,
        getDropOperationKeyboard,
        onDropEnter,
        onDropExit,
        onKeyboardDrop,
        onDropActivate
    ]);
    let { dropProps: dropProps } = ($224594fe3e57ff1e$export$62447ad3d2ec7da6)();
    if (isDisabled) return {
        dropProps: {},
        dropButtonProps: {
            isDisabled: true
        },
        isDropTarget: false
    };
    return {
        dropProps: {
            ...!hasDropButton && dropProps,
            onDragEnter: onDragEnter,
            onDragOver: onDragOver,
            onDragLeave: onDragLeave,
            onDrop: onDrop
        },
        dropButtonProps: {
            ...hasDropButton && dropProps
        },
        isDropTarget: isDropTarget
    };
}
function $5c06e4929e123553$var$getAllowedOperations(e) {
    let allowedOperations = ($103790afe9474d1c$export$9bbdfc78cf083e16)[e.dataTransfer.effectAllowed];
    // WebKit always sets effectAllowed to "copyMove" on macOS, and "all" on iOS, regardless of what was
    // set during the dragstart event: https://bugs.webkit.org/show_bug.cgi?id=178058
    //
    // Android Chrome also sets effectAllowed to "copyMove" in all cases: https://bugs.chromium.org/p/chromium/issues/detail?id=1359182
    //
    // If the drag started within the page, we can use a global variable to get the real allowed operations.
    // This needs to be intersected with the actual effectAllowed, which may have been filtered based on modifier keys.
    // Unfortunately, this means that link operations do not work at all in Safari.
    if ($7252cd45fc48c07c$export$f0130eb70b6347b8) allowedOperations &= ($7252cd45fc48c07c$export$f0130eb70b6347b8);
    // Chrome and Safari on macOS will automatically filter effectAllowed when pressing modifier keys,
    // allowing the user to switch between move, link, and copy operations. Firefox on macOS and all
    // Windows browsers do not do this, so do it ourselves instead. The exact keys are platform dependent.
    // https://ux.stackexchange.com/questions/83748/what-are-the-most-common-modifier-keys-for-dragging-objects-with-a-mouse
    //
    // Note that none of these modifiers are ever set in WebKit due to a bug: https://bugs.webkit.org/show_bug.cgi?id=77465
    // However, Safari does update effectAllowed correctly, so we can just rely on that.
    let allowedModifiers = ($103790afe9474d1c$export$60b7b4bcf3903d8e).none;
    if (($c87311424ea30a05$export$9ac100e40613ea10)()) {
        if (e.altKey) allowedModifiers |= ($103790afe9474d1c$export$60b7b4bcf3903d8e).copy;
        // Chrome and Safari both use the Control key for link, even though Finder uses Command + Option.
        // iPadOS doesn't support link operations and will not fire the drop event at all if dropEffect is set to link.
        // https://bugs.webkit.org/show_bug.cgi?id=244701
        if (e.ctrlKey && !($c87311424ea30a05$export$7bef049ce92e4224)()) allowedModifiers |= ($103790afe9474d1c$export$60b7b4bcf3903d8e).link;
        if (e.metaKey) allowedModifiers |= ($103790afe9474d1c$export$60b7b4bcf3903d8e).move;
    } else {
        if (e.altKey) allowedModifiers |= ($103790afe9474d1c$export$60b7b4bcf3903d8e).link;
        if (e.shiftKey) allowedModifiers |= ($103790afe9474d1c$export$60b7b4bcf3903d8e).move;
        if (e.ctrlKey) allowedModifiers |= ($103790afe9474d1c$export$60b7b4bcf3903d8e).copy;
    }
    if (allowedModifiers) return allowedOperations & allowedModifiers;
    return allowedOperations;
}
function $5c06e4929e123553$var$allowedOperationsToArray(allowedOperationsBits) {
    let allowedOperations = [];
    if (allowedOperationsBits & ($103790afe9474d1c$export$60b7b4bcf3903d8e).move) allowedOperations.push('move');
    if (allowedOperationsBits & ($103790afe9474d1c$export$60b7b4bcf3903d8e).copy) allowedOperations.push('copy');
    if (allowedOperationsBits & ($103790afe9474d1c$export$60b7b4bcf3903d8e).link) allowedOperations.push('link');
    return allowedOperations;
}
function $5c06e4929e123553$var$getDropOperation(allowedOperations, operation) {
    let op = ($103790afe9474d1c$export$60b7b4bcf3903d8e)[operation];
    return allowedOperations & op ? operation : 'cancel';
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 

const $80d9daea3067eff3$var$AUTOSCROLL_AREA_SIZE = 20;
function $80d9daea3067eff3$export$6323452ca4533ed8(ref) {
    let scrollableRef = (reactExports.useRef)(null);
    let scrollableX = (reactExports.useRef)(true);
    let scrollableY = (reactExports.useRef)(true);
    (reactExports.useEffect)(()=>{
        if (ref.current) {
            scrollableRef.current = ($cc38e7bd3fc7b213$export$2bb74740c4e19def)(ref.current) ? ref.current : ($62d8ded9296f3872$export$cfa2225e87938781)(ref.current);
            let style = window.getComputedStyle(scrollableRef.current);
            scrollableX.current = /(auto|scroll)/.test(style.overflowX);
            scrollableY.current = /(auto|scroll)/.test(style.overflowY);
        }
    }, [
        ref
    ]);
    let state = (reactExports.useRef)({
        timer: null,
        dx: 0,
        dy: 0
    }).current;
    (reactExports.useEffect)(()=>{
        return ()=>{
            if (state.timer) {
                cancelAnimationFrame(state.timer);
                state.timer = null;
            }
        };
    // state will become a new object, so it's ok to use in the dependency array for unmount
    }, [
        state
    ]);
    let scroll = (reactExports.useCallback)(()=>{
        if (scrollableX.current) scrollableRef.current.scrollLeft += state.dx;
        if (scrollableY.current) scrollableRef.current.scrollTop += state.dy;
        if (state.timer) state.timer = requestAnimationFrame(scroll);
    }, [
        scrollableRef,
        state
    ]);
    return {
        move (x, y) {
            // Most browsers auto scroll natively, but WebKit on macOS does not (iOS does 🤷‍♂️).
            // https://bugs.webkit.org/show_bug.cgi?id=222636
            if (!($c87311424ea30a05$export$78551043582a6a98)() || ($c87311424ea30a05$export$fedb369cb70207f1)() || !scrollableRef.current) return;
            let box = scrollableRef.current.getBoundingClientRect();
            let left = $80d9daea3067eff3$var$AUTOSCROLL_AREA_SIZE;
            let top = $80d9daea3067eff3$var$AUTOSCROLL_AREA_SIZE;
            let bottom = box.height - $80d9daea3067eff3$var$AUTOSCROLL_AREA_SIZE;
            let right = box.width - $80d9daea3067eff3$var$AUTOSCROLL_AREA_SIZE;
            if (x < left || x > right || y < top || y > bottom) {
                if (x < left) state.dx = x - left;
                else if (x > right) state.dx = x - right;
                if (y < top) state.dy = y - top;
                else if (y > bottom) state.dy = y - bottom;
                if (!state.timer) state.timer = requestAnimationFrame(scroll);
            } else this.stop();
        },
        stop () {
            if (state.timer) {
                cancelAnimationFrame(state.timer);
                state.timer = null;
            }
        }
    };
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 







const $4b52e4eff84e5217$var$DROP_POSITIONS = [
    'before',
    'on',
    'after'
];
const $4b52e4eff84e5217$var$DROP_POSITIONS_RTL = [
    'after',
    'on',
    'before'
];
function $4b52e4eff84e5217$export$f4e2f423c21f7b04(props, state, ref) {
    let localState = (reactExports.useRef)({
        props: props,
        state: state,
        nextTarget: null,
        dropOperation: null
    }).current;
    localState.props = props;
    localState.state = state;
    let defaultOnDrop = (reactExports.useCallback)(async (e)=>{
        let { onInsert: onInsert, onRootDrop: onRootDrop, onItemDrop: onItemDrop, onReorder: onReorder, acceptedDragTypes: acceptedDragTypes = 'all', shouldAcceptItemDrop: shouldAcceptItemDrop } = localState.props;
        let { draggingKeys: draggingKeys } = ($7252cd45fc48c07c$export$6ca6700462636d0b);
        let isInternal = ($7252cd45fc48c07c$export$78bf638634500fa5)(ref);
        let { target: target, dropOperation: dropOperation, items: items } = e;
        let filteredItems = items;
        if (acceptedDragTypes !== 'all' || shouldAcceptItemDrop) filteredItems = items.filter((item)=>{
            let itemTypes;
            if (item.kind === 'directory') itemTypes = new Set([
                ($7252cd45fc48c07c$export$990fced5dfac2637)
            ]);
            else itemTypes = item.kind === 'file' ? new Set([
                item.type
            ]) : item.types;
            if (acceptedDragTypes === 'all' || acceptedDragTypes.some((type)=>itemTypes.has(type))) {
                // If we are performing a on item drop, check if the item in question accepts the dropped item since the item may have heavier restrictions
                // than the droppable collection itself
                if (target.type === 'item' && target.dropPosition === 'on' && shouldAcceptItemDrop) return shouldAcceptItemDrop(target, itemTypes);
                return true;
            }
            return false;
        });
        if (filteredItems.length > 0) {
            if (target.type === 'root' && onRootDrop) await onRootDrop({
                items: filteredItems,
                dropOperation: dropOperation
            });
            if (target.type === 'item') {
                if (target.dropPosition === 'on' && onItemDrop) await onItemDrop({
                    items: filteredItems,
                    dropOperation: dropOperation,
                    isInternal: isInternal,
                    target: target
                });
                if (target.dropPosition !== 'on') {
                    if (!isInternal && onInsert) await onInsert({
                        items: filteredItems,
                        dropOperation: dropOperation,
                        target: target
                    });
                    if (isInternal && onReorder) await onReorder({
                        keys: draggingKeys,
                        dropOperation: dropOperation,
                        target: target
                    });
                }
            }
        }
    }, [
        localState,
        ref
    ]);
    let autoScroll = ($80d9daea3067eff3$export$6323452ca4533ed8)(ref);
    let { dropProps: dropProps } = ($5c06e4929e123553$export$ccdee5eaf73cf661)({
        ref: ref,
        onDropEnter () {
            state.setTarget(localState.nextTarget);
        },
        onDropMove (e) {
            state.setTarget(localState.nextTarget);
            autoScroll.move(e.x, e.y);
        },
        getDropOperationForPoint (types, allowedOperations, x, y) {
            let { draggingKeys: draggingKeys, dropCollectionRef: dropCollectionRef } = ($7252cd45fc48c07c$export$6ca6700462636d0b);
            let isInternal = ($7252cd45fc48c07c$export$78bf638634500fa5)(ref);
            let isValidDropTarget = (target)=>state.getDropOperation({
                    target: target,
                    types: types,
                    allowedOperations: allowedOperations,
                    isInternal: isInternal,
                    draggingKeys: draggingKeys
                }) !== 'cancel';
            let target = props.dropTargetDelegate.getDropTargetFromPoint(x, y, isValidDropTarget);
            if (!target) {
                localState.dropOperation = 'cancel';
                localState.nextTarget = null;
                return 'cancel';
            }
            localState.dropOperation = state.getDropOperation({
                target: target,
                types: types,
                allowedOperations: allowedOperations,
                isInternal: isInternal,
                draggingKeys: draggingKeys
            });
            // If the target doesn't accept the drop, see if the root accepts it instead.
            if (localState.dropOperation === 'cancel') {
                let rootTarget = {
                    type: 'root'
                };
                let dropOperation = state.getDropOperation({
                    target: rootTarget,
                    types: types,
                    allowedOperations: allowedOperations,
                    isInternal: isInternal,
                    draggingKeys: draggingKeys
                });
                if (dropOperation !== 'cancel') {
                    target = rootTarget;
                    localState.dropOperation = dropOperation;
                }
            }
            // Only set dropCollectionRef if there is a valid drop target since we cleanup dropCollectionRef in onDropExit
            // which only runs when leaving a valid drop target or if the dropEffect become none (mouse dnd only).
            if (target && localState.dropOperation !== 'cancel' && (ref === null || ref === void 0 ? void 0 : ref.current) !== (dropCollectionRef === null || dropCollectionRef === void 0 ? void 0 : dropCollectionRef.current)) ($7252cd45fc48c07c$export$dac8db29d42db9a1)(ref);
            localState.nextTarget = localState.dropOperation === 'cancel' ? null : target;
            return localState.dropOperation;
        },
        onDropExit () {
            ($7252cd45fc48c07c$export$dac8db29d42db9a1)(undefined);
            state.setTarget(null);
            autoScroll.stop();
        },
        onDropActivate (e) {
            var _state_target, _state_target1;
            if (((_state_target = state.target) === null || _state_target === void 0 ? void 0 : _state_target.type) === 'item' && ((_state_target1 = state.target) === null || _state_target1 === void 0 ? void 0 : _state_target1.dropPosition) === 'on' && typeof props.onDropActivate === 'function') props.onDropActivate({
                type: 'dropactivate',
                x: e.x,
                y: e.y,
                target: state.target
            });
        },
        onDrop (e) {
            ($7252cd45fc48c07c$export$dac8db29d42db9a1)(ref);
            if (state.target) onDrop(e, state.target);
            // If there wasn't a collection being tracked as a dragged collection, then we are in a case where a non RSP drag is dropped on a
            // RSP collection and thus we don't need to preserve the global DnD state for onDragEnd
            let { draggingCollectionRef: draggingCollectionRef } = ($7252cd45fc48c07c$export$6ca6700462636d0b);
            if (draggingCollectionRef == null) ($7252cd45fc48c07c$export$70936501603e6c57)();
        }
    });
    let droppingState = (reactExports.useRef)(null);
    let updateFocusAfterDrop = (reactExports.useCallback)(()=>{
        let { state: state } = localState;
        if (droppingState.current) {
            var _state_collection_getItem;
            let { target: target, collection: prevCollection, selectedKeys: prevSelectedKeys, focusedKey: prevFocusedKey, isInternal: isInternal, draggingKeys: draggingKeys } = droppingState.current;
            // If an insert occurs during a drop, we want to immediately select these items to give
            // feedback to the user that a drop occurred. Only do this if the selection didn't change
            // since the drop started so we don't override if the user or application did something.
            if (state.collection.size > prevCollection.size && state.selectionManager.isSelectionEqual(prevSelectedKeys)) {
                let newKeys = new Set();
                for (let key of state.collection.getKeys())if (!prevCollection.getItem(key)) newKeys.add(key);
                state.selectionManager.setSelectedKeys(newKeys);
                // If the focused item didn't change since the drop occurred, also focus the first
                // inserted item. If selection is disabled, then also show the focus ring so there
                // is some indication that items were added.
                if (state.selectionManager.focusedKey === prevFocusedKey) {
                    let first = newKeys.keys().next().value;
                    let item = state.collection.getItem(first);
                    // If this is a cell, focus the parent row.
                    if ((item === null || item === void 0 ? void 0 : item.type) === 'cell') first = item.parentKey;
                    state.selectionManager.setFocusedKey(first);
                    if (state.selectionManager.selectionMode === 'none') ($507fabe10e71c6fb$export$8397ddfc504fdb9a)('keyboard');
                }
            } else if (state.selectionManager.focusedKey === prevFocusedKey && isInternal && target.type === 'item' && target.dropPosition !== 'on' && draggingKeys.has((_state_collection_getItem = state.collection.getItem(prevFocusedKey)) === null || _state_collection_getItem === void 0 ? void 0 : _state_collection_getItem.parentKey)) {
                // Focus row instead of cell when reordering.
                state.selectionManager.setFocusedKey(state.collection.getItem(prevFocusedKey).parentKey);
                ($507fabe10e71c6fb$export$8397ddfc504fdb9a)('keyboard');
            } else if (state.selectionManager.focusedKey === prevFocusedKey && target.type === 'item' && target.dropPosition === 'on' && state.collection.getItem(target.key) != null) {
                // If focus didn't move already (e.g. due to an insert), and the user dropped on an item,
                // focus that item and show the focus ring to give the user feedback that the drop occurred.
                // Also show the focus ring if the focused key is not selected, e.g. in case of a reorder.
                state.selectionManager.setFocusedKey(target.key);
                ($507fabe10e71c6fb$export$8397ddfc504fdb9a)('keyboard');
            } else if (!state.selectionManager.isSelected(state.selectionManager.focusedKey)) ($507fabe10e71c6fb$export$8397ddfc504fdb9a)('keyboard');
            state.selectionManager.setFocused(true);
        }
    }, [
        localState
    ]);
    let onDrop = (reactExports.useCallback)((e, target)=>{
        let { state: state } = localState;
        // Save some state of the collection/selection before the drop occurs so we can compare later.
        droppingState.current = {
            timeout: null,
            focusedKey: state.selectionManager.focusedKey,
            collection: state.collection,
            selectedKeys: state.selectionManager.selectedKeys,
            draggingKeys: ($7252cd45fc48c07c$export$6ca6700462636d0b).draggingKeys,
            isInternal: ($7252cd45fc48c07c$export$78bf638634500fa5)(ref),
            target: target
        };
        let onDropFn = localState.props.onDrop || defaultOnDrop;
        onDropFn({
            type: 'drop',
            x: e.x,
            y: e.y,
            target: target,
            items: e.items,
            dropOperation: e.dropOperation
        });
        // Wait for a short time period after the onDrop is called to allow the data to be read asynchronously
        // and for React to re-render. If the collection didn't already change during this time (handled below),
        // update the focused key here.
        droppingState.current.timeout = setTimeout(()=>{
            updateFocusAfterDrop();
            droppingState.current = null;
        }, 50);
    }, [
        localState,
        defaultOnDrop,
        ref,
        updateFocusAfterDrop
    ]);
    // eslint-disable-next-line arrow-body-style
    (reactExports.useEffect)(()=>{
        return ()=>{
            if (droppingState.current) clearTimeout(droppingState.current.timeout);
        };
    }, []);
    ($f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(()=>{
        // If the collection changed after a drop, update the focused key.
        if (droppingState.current && state.collection !== droppingState.current.collection) updateFocusAfterDrop();
    });
    let { direction: direction } = ($18f2051aff69b9bf$export$43bb16f9c6d9e3f7)();
    (reactExports.useEffect)(()=>{
        let getNextTarget = (target, wrap = true, horizontal = false)=>{
            if (!target) return {
                type: 'root'
            };
            let { keyboardDelegate: keyboardDelegate } = localState.props;
            let nextKey;
            if ((target === null || target === void 0 ? void 0 : target.type) === 'item') nextKey = horizontal ? keyboardDelegate.getKeyRightOf(target.key) : keyboardDelegate.getKeyBelow(target.key);
            else nextKey = horizontal && direction === 'rtl' ? keyboardDelegate.getLastKey() : keyboardDelegate.getFirstKey();
            let dropPositions = horizontal && direction === 'rtl' ? $4b52e4eff84e5217$var$DROP_POSITIONS_RTL : $4b52e4eff84e5217$var$DROP_POSITIONS;
            let dropPosition = dropPositions[0];
            if (target.type === 'item') {
                // If the the keyboard delegate returned the next key in the collection,
                // first try the other positions in the current key. Otherwise (e.g. in a grid layout),
                // jump to the same drop position in the new key.
                let nextCollectionKey = horizontal && direction === 'rtl' ? localState.state.collection.getKeyBefore(target.key) : localState.state.collection.getKeyAfter(target.key);
                if (nextKey == null || nextKey === nextCollectionKey) {
                    let positionIndex = dropPositions.indexOf(target.dropPosition);
                    let nextDropPosition = dropPositions[positionIndex + 1];
                    if (positionIndex < dropPositions.length - 1 && !(nextDropPosition === dropPositions[2] && nextKey != null)) return {
                        type: 'item',
                        key: target.key,
                        dropPosition: nextDropPosition
                    };
                    // If the last drop position was 'after', then 'before' on the next key is equivalent.
                    // Switch to 'on' instead.
                    if (target.dropPosition === dropPositions[2]) dropPosition = 'on';
                } else dropPosition = target.dropPosition;
            }
            if (nextKey == null) {
                if (wrap) return {
                    type: 'root'
                };
                return null;
            }
            return {
                type: 'item',
                key: nextKey,
                dropPosition: dropPosition
            };
        };
        let getPreviousTarget = (target, wrap = true, horizontal = false)=>{
            let { keyboardDelegate: keyboardDelegate } = localState.props;
            let nextKey;
            if ((target === null || target === void 0 ? void 0 : target.type) === 'item') nextKey = horizontal ? keyboardDelegate.getKeyLeftOf(target.key) : keyboardDelegate.getKeyAbove(target.key);
            else nextKey = horizontal && direction === 'rtl' ? keyboardDelegate.getFirstKey() : keyboardDelegate.getLastKey();
            let dropPositions = horizontal && direction === 'rtl' ? $4b52e4eff84e5217$var$DROP_POSITIONS_RTL : $4b52e4eff84e5217$var$DROP_POSITIONS;
            let dropPosition = !target || target.type === 'root' ? dropPositions[2] : 'on';
            if ((target === null || target === void 0 ? void 0 : target.type) === 'item') {
                // If the the keyboard delegate returned the previous key in the collection,
                // first try the other positions in the current key. Otherwise (e.g. in a grid layout),
                // jump to the same drop position in the new key.
                let prevCollectionKey = horizontal && direction === 'rtl' ? localState.state.collection.getKeyAfter(target.key) : localState.state.collection.getKeyBefore(target.key);
                if (nextKey == null || nextKey === prevCollectionKey) {
                    let positionIndex = dropPositions.indexOf(target.dropPosition);
                    let nextDropPosition = dropPositions[positionIndex - 1];
                    if (positionIndex > 0 && nextDropPosition !== dropPositions[2]) return {
                        type: 'item',
                        key: target.key,
                        dropPosition: nextDropPosition
                    };
                    // If the last drop position was 'before', then 'after' on the previous key is equivalent.
                    // Switch to 'on' instead.
                    if (target.dropPosition === dropPositions[0]) dropPosition = 'on';
                } else dropPosition = target.dropPosition;
            }
            if (nextKey == null) {
                if (wrap) return {
                    type: 'root'
                };
                return null;
            }
            return {
                type: 'item',
                key: nextKey,
                dropPosition: dropPosition
            };
        };
        let nextValidTarget = (target, types, allowedDropOperations, getNextTarget, wrap = true)=>{
            let seenRoot = 0;
            let operation;
            let { draggingKeys: draggingKeys } = ($7252cd45fc48c07c$export$6ca6700462636d0b);
            let isInternal = ($7252cd45fc48c07c$export$78bf638634500fa5)(ref);
            do {
                let nextTarget = getNextTarget(target, wrap);
                if (!nextTarget) return null;
                target = nextTarget;
                operation = localState.state.getDropOperation({
                    target: nextTarget,
                    types: types,
                    allowedOperations: allowedDropOperations,
                    isInternal: isInternal,
                    draggingKeys: draggingKeys
                });
                if (target.type === 'root') seenRoot++;
            }while (operation === 'cancel' && !localState.state.isDropTarget(target) && seenRoot < 2);
            if (operation === 'cancel') return null;
            return target;
        };
        return $67560de7c78cb232$export$c28d9fb4a54e471a({
            element: ref.current,
            preventFocusOnDrop: true,
            getDropOperation (types, allowedOperations) {
                if (localState.state.target) {
                    let { draggingKeys: draggingKeys } = ($7252cd45fc48c07c$export$6ca6700462636d0b);
                    let isInternal = ($7252cd45fc48c07c$export$78bf638634500fa5)(ref);
                    return localState.state.getDropOperation({
                        target: localState.state.target,
                        types: types,
                        allowedOperations: allowedOperations,
                        isInternal: isInternal,
                        draggingKeys: draggingKeys
                    });
                }
                // Check if any of the targets accept the drop.
                // TODO: should we have a faster way of doing this or e.g. for pagination?
                let target = nextValidTarget(null, types, allowedOperations, getNextTarget);
                return target ? 'move' : 'cancel';
            },
            onDropEnter (e, drag) {
                let types = ($7252cd45fc48c07c$export$e1d41611756c6326)(drag.items);
                let selectionManager = localState.state.selectionManager;
                let target;
                // Update the drop collection ref tracker for useDroppableItem's getDropOperation isInternal check
                ($7252cd45fc48c07c$export$dac8db29d42db9a1)(ref);
                // When entering the droppable collection for the first time, the default drop target
                // is after the focused key.
                let key = selectionManager.focusedKey;
                let dropPosition = 'after';
                // If the focused key is a cell, get the parent item instead.
                // For now, we assume that individual cells cannot be dropped on.
                let item = localState.state.collection.getItem(key);
                if ((item === null || item === void 0 ? void 0 : item.type) === 'cell') key = item.parentKey;
                // If the focused item is also selected, the default drop target is after the last selected item.
                // But if the focused key is the first selected item, then default to before the first selected item.
                // This is to make reordering lists slightly easier. If you select top down, we assume you want to
                // move the items down. If you select bottom up, we assume you want to move the items up.
                if (selectionManager.isSelected(key)) {
                    if (selectionManager.selectedKeys.size > 1 && selectionManager.firstSelectedKey === key) dropPosition = 'before';
                    else key = selectionManager.lastSelectedKey;
                }
                if (key != null) {
                    target = {
                        type: 'item',
                        key: key,
                        dropPosition: dropPosition
                    };
                    let { draggingKeys: draggingKeys } = ($7252cd45fc48c07c$export$6ca6700462636d0b);
                    let isInternal = ($7252cd45fc48c07c$export$78bf638634500fa5)(ref);
                    var _nextValidTarget;
                    // If the default target is not valid, find the next one that is.
                    if (localState.state.getDropOperation({
                        target: target,
                        types: types,
                        allowedOperations: drag.allowedDropOperations,
                        isInternal: isInternal,
                        draggingKeys: draggingKeys
                    }) === 'cancel') target = (_nextValidTarget = nextValidTarget(target, types, drag.allowedDropOperations, getNextTarget, false)) !== null && _nextValidTarget !== void 0 ? _nextValidTarget : nextValidTarget(target, types, drag.allowedDropOperations, getPreviousTarget, false);
                }
                // If no focused key, then start from the root.
                if (!target) target = nextValidTarget(null, types, drag.allowedDropOperations, getNextTarget);
                localState.state.setTarget(target);
            },
            onDropExit () {
                ($7252cd45fc48c07c$export$dac8db29d42db9a1)(undefined);
                localState.state.setTarget(null);
            },
            onDropTargetEnter (target) {
                localState.state.setTarget(target);
            },
            onDropActivate (e) {
                var _localState_state_target, _localState_state_target1;
                if (((_localState_state_target = localState.state.target) === null || _localState_state_target === void 0 ? void 0 : _localState_state_target.type) === 'item' && ((_localState_state_target1 = localState.state.target) === null || _localState_state_target1 === void 0 ? void 0 : _localState_state_target1.dropPosition) === 'on' && typeof localState.props.onDropActivate === 'function') localState.props.onDropActivate({
                    type: 'dropactivate',
                    x: e.x,
                    y: e.y,
                    target: localState.state.target
                });
            },
            onDrop (e, target) {
                ($7252cd45fc48c07c$export$dac8db29d42db9a1)(ref);
                if (localState.state.target) onDrop(e, target || localState.state.target);
            },
            onKeyDown (e, drag) {
                let { keyboardDelegate: keyboardDelegate } = localState.props;
                let types = ($7252cd45fc48c07c$export$e1d41611756c6326)(drag.items);
                switch(e.key){
                    case 'ArrowDown':
                        if (keyboardDelegate.getKeyBelow) {
                            let target = nextValidTarget(localState.state.target, types, drag.allowedDropOperations, getNextTarget);
                            localState.state.setTarget(target);
                        }
                        break;
                    case 'ArrowUp':
                        if (keyboardDelegate.getKeyAbove) {
                            let target = nextValidTarget(localState.state.target, types, drag.allowedDropOperations, getPreviousTarget);
                            localState.state.setTarget(target);
                        }
                        break;
                    case 'ArrowLeft':
                        if (keyboardDelegate.getKeyLeftOf) {
                            let target = nextValidTarget(localState.state.target, types, drag.allowedDropOperations, (target, wrap)=>getPreviousTarget(target, wrap, true));
                            localState.state.setTarget(target);
                        }
                        break;
                    case 'ArrowRight':
                        if (keyboardDelegate.getKeyRightOf) {
                            let target = nextValidTarget(localState.state.target, types, drag.allowedDropOperations, (target, wrap)=>getNextTarget(target, wrap, true));
                            localState.state.setTarget(target);
                        }
                        break;
                    case 'Home':
                        if (keyboardDelegate.getFirstKey) {
                            let target = nextValidTarget(null, types, drag.allowedDropOperations, getNextTarget);
                            localState.state.setTarget(target);
                        }
                        break;
                    case 'End':
                        if (keyboardDelegate.getLastKey) {
                            let target = nextValidTarget(null, types, drag.allowedDropOperations, getPreviousTarget);
                            localState.state.setTarget(target);
                        }
                        break;
                    case 'PageDown':
                        if (keyboardDelegate.getKeyPageBelow) {
                            let target = localState.state.target;
                            if (!target) target = nextValidTarget(null, types, drag.allowedDropOperations, getNextTarget);
                            else {
                                // If on the root, go to the item a page below the top. Otherwise a page below the current item.
                                let nextKey = keyboardDelegate.getKeyPageBelow(target.type === 'item' ? target.key : keyboardDelegate.getFirstKey());
                                let dropPosition = target.type === 'item' ? target.dropPosition : 'after';
                                // If there is no next key, or we are starting on the last key, jump to the last possible position.
                                if (nextKey == null || target.type === 'item' && target.key === keyboardDelegate.getLastKey()) {
                                    nextKey = keyboardDelegate.getLastKey();
                                    dropPosition = 'after';
                                }
                                target = {
                                    type: 'item',
                                    key: nextKey,
                                    dropPosition: dropPosition
                                };
                                // If the target does not accept the drop, find the next valid target.
                                // If no next valid target, find the previous valid target.
                                let { draggingCollectionRef: draggingCollectionRef, draggingKeys: draggingKeys } = ($7252cd45fc48c07c$export$6ca6700462636d0b);
                                let isInternal = (draggingCollectionRef === null || draggingCollectionRef === void 0 ? void 0 : draggingCollectionRef.current) === (ref === null || ref === void 0 ? void 0 : ref.current);
                                let operation = localState.state.getDropOperation({
                                    target: target,
                                    types: types,
                                    allowedOperations: drag.allowedDropOperations,
                                    isInternal: isInternal,
                                    draggingKeys: draggingKeys
                                });
                                var _nextValidTarget;
                                if (operation === 'cancel') target = (_nextValidTarget = nextValidTarget(target, types, drag.allowedDropOperations, getNextTarget, false)) !== null && _nextValidTarget !== void 0 ? _nextValidTarget : nextValidTarget(target, types, drag.allowedDropOperations, getPreviousTarget, false);
                            }
                            localState.state.setTarget(target !== null && target !== void 0 ? target : localState.state.target);
                        }
                        break;
                    case 'PageUp':
                        {
                            if (!keyboardDelegate.getKeyPageAbove) break;
                            let target = localState.state.target;
                            if (!target) target = nextValidTarget(null, types, drag.allowedDropOperations, getPreviousTarget);
                            else if (target.type === 'item') {
                                // If at the top already, switch to the root. Otherwise navigate a page up.
                                if (target.key === keyboardDelegate.getFirstKey()) target = {
                                    type: 'root'
                                };
                                else {
                                    let nextKey = keyboardDelegate.getKeyPageAbove(target.key);
                                    let dropPosition = target.dropPosition;
                                    if (nextKey == null) {
                                        nextKey = keyboardDelegate.getFirstKey();
                                        dropPosition = 'before';
                                    }
                                    target = {
                                        type: 'item',
                                        key: nextKey,
                                        dropPosition: dropPosition
                                    };
                                }
                                // If the target does not accept the drop, find the previous valid target.
                                // If no next valid target, find the next valid target.
                                let { draggingKeys: draggingKeys } = ($7252cd45fc48c07c$export$6ca6700462636d0b);
                                let isInternal = ($7252cd45fc48c07c$export$78bf638634500fa5)(ref);
                                let operation = localState.state.getDropOperation({
                                    target: target,
                                    types: types,
                                    allowedOperations: drag.allowedDropOperations,
                                    isInternal: isInternal,
                                    draggingKeys: draggingKeys
                                });
                                var _nextValidTarget1;
                                if (operation === 'cancel') target = (_nextValidTarget1 = nextValidTarget(target, types, drag.allowedDropOperations, getPreviousTarget, false)) !== null && _nextValidTarget1 !== void 0 ? _nextValidTarget1 : nextValidTarget(target, types, drag.allowedDropOperations, getNextTarget, false);
                            }
                            localState.state.setTarget(target !== null && target !== void 0 ? target : localState.state.target);
                            break;
                        }
                }
            }
        });
    }, [
        localState,
        ref,
        onDrop,
        direction
    ]);
    let id = ($bdb11010cef70236$export$f680877a34711e37)();
    ($7252cd45fc48c07c$export$dfdf5deeaf27473f).set(state, {
        id: id,
        ref: ref
    });
    return {
        collectionProps: ($3ef42575df84b30b$export$9d1611c77c2fe928)(dropProps, {
            id: id,
            // Remove description from collection element. If dropping on the entire collection,
            // there should be a drop indicator that has this description, so no need to double announce.
            'aria-describedby': null
        })
    };
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 



function $bfaab576ce1c580e$export$f7b0c5d28b66b6a5(options, state, ref) {
    let { dropProps: dropProps } = ($224594fe3e57ff1e$export$62447ad3d2ec7da6)();
    let droppableCollectionRef = ($7252cd45fc48c07c$export$7e397efd01d3db27)(state);
    (reactExports.useEffect)(()=>{
        if (ref.current) return $67560de7c78cb232$export$aef80212ac99c003({
            element: ref.current,
            target: options.target,
            getDropOperation (types, allowedOperations) {
                let { draggingKeys: draggingKeys } = ($7252cd45fc48c07c$export$6ca6700462636d0b);
                let isInternal = ($7252cd45fc48c07c$export$78bf638634500fa5)(droppableCollectionRef);
                return state.getDropOperation({
                    target: options.target,
                    types: types,
                    allowedOperations: allowedOperations,
                    isInternal: isInternal,
                    draggingKeys: draggingKeys
                });
            }
        });
    }, [
        ref,
        options.target,
        state,
        droppableCollectionRef
    ]);
    let dragSession = $67560de7c78cb232$export$418e185dd3f1b968();
    let { draggingKeys: draggingKeys } = ($7252cd45fc48c07c$export$6ca6700462636d0b);
    let isInternal = ($7252cd45fc48c07c$export$78bf638634500fa5)(droppableCollectionRef);
    let isValidDropTarget = dragSession && state.getDropOperation({
        target: options.target,
        types: ($7252cd45fc48c07c$export$e1d41611756c6326)(dragSession.dragTarget.items),
        allowedOperations: dragSession.dragTarget.allowedDropOperations,
        isInternal: isInternal,
        draggingKeys: draggingKeys
    }) !== 'cancel';
    let isDropTarget = state.isDropTarget(options.target);
    (reactExports.useEffect)(()=>{
        if (dragSession && isDropTarget && ref.current) ref.current.focus();
    }, [
        isDropTarget,
        dragSession,
        ref
    ]);
    return {
        dropProps: {
            ...dropProps,
            'aria-hidden': !dragSession || isValidDropTarget ? undefined : 'true'
        },
        isDropTarget: isDropTarget
    };
}

function $parcel$interopDefault$c(a) {
  return a && a.__esModule ? a.default : a;
}
/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 





function $ddf25448c71fc93a$export$8d0e41d2815afac5(props, state, ref) {
    let { target: target } = props;
    let { collection: collection } = state;
    let stringFormatter = ($fca6afa0e843324b$export$f12b703ca79dfbb1)((($parcel$interopDefault$c($865c2eb7c00a83f1$exports))), '@react-aria/dnd');
    let dragSession = $67560de7c78cb232$export$418e185dd3f1b968();
    let { dropProps: dropProps } = ($bfaab576ce1c580e$export$f7b0c5d28b66b6a5)(props, state, ref);
    let id = ($bdb11010cef70236$export$f680877a34711e37)();
    let getText = (key)=>{
        var _collection_getTextValue, _collection_getItem;
        var _collection_getTextValue1;
        return (_collection_getTextValue1 = (_collection_getTextValue = collection.getTextValue) === null || _collection_getTextValue === void 0 ? void 0 : _collection_getTextValue.call(collection, key)) !== null && _collection_getTextValue1 !== void 0 ? _collection_getTextValue1 : (_collection_getItem = collection.getItem(key)) === null || _collection_getItem === void 0 ? void 0 : _collection_getItem.textValue;
    };
    let label = '';
    let labelledBy;
    if (target.type === 'root') {
        label = stringFormatter.format('dropOnRoot');
        labelledBy = `${id} ${($7252cd45fc48c07c$export$3093291712f09a77)(state)}`;
    } else if (target.dropPosition === 'on') label = stringFormatter.format('dropOnItem', {
        itemText: getText(target.key)
    });
    else {
        let before;
        let after;
        if (collection.getFirstKey() === target.key && target.dropPosition === 'before') before = null;
        else before = target.dropPosition === 'before' ? collection.getKeyBefore(target.key) : target.key;
        if (collection.getLastKey() === target.key && target.dropPosition === 'after') after = null;
        else after = target.dropPosition === 'after' ? collection.getKeyAfter(target.key) : target.key;
        if (before && after) label = stringFormatter.format('insertBetween', {
            beforeItemText: getText(before),
            afterItemText: getText(after)
        });
        else if (before) label = stringFormatter.format('insertAfter', {
            itemText: getText(before)
        });
        else if (after) label = stringFormatter.format('insertBefore', {
            itemText: getText(after)
        });
    }
    let isDropTarget = state.isDropTarget(target);
    let ariaHidden = !dragSession ? 'true' : dropProps['aria-hidden'];
    return {
        dropIndicatorProps: {
            ...dropProps,
            id: id,
            'aria-roledescription': stringFormatter.format('dropIndicator'),
            'aria-label': label,
            'aria-labelledby': labelledBy,
            'aria-hidden': ariaHidden,
            tabIndex: -1
        },
        isDropTarget: isDropTarget,
        // If aria-hidden, we are either not in a drag session or the drop target is invalid.
        // In that case, there's no need to render anything at all unless we need to show the indicator visually.
        // This can happen when dragging using the native DnD API as opposed to keyboard dragging.
        isHidden: !isDropTarget && !!ariaHidden
    };
}

function $parcel$interopDefault$b(a) {
  return a && a.__esModule ? a.default : a;
}
/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 




const $fd98cf7cbf233429$var$MESSAGES = {
    keyboard: {
        selected: 'dragSelectedKeyboard',
        notSelected: 'dragDescriptionKeyboard'
    },
    touch: {
        selected: 'dragSelectedLongPress',
        notSelected: 'dragDescriptionLongPress'
    },
    virtual: {
        selected: 'dragDescriptionVirtual',
        notSelected: 'dragDescriptionVirtual'
    }
};
function $fd98cf7cbf233429$export$b35afafff42da2d9(props, state) {
    let stringFormatter = ($fca6afa0e843324b$export$f12b703ca79dfbb1)((($parcel$interopDefault$b($865c2eb7c00a83f1$exports))), '@react-aria/dnd');
    let isDisabled = state.isDisabled || state.selectionManager.isDisabled(props.key);
    let { dragProps: dragProps, dragButtonProps: dragButtonProps } = ($8253ed7ece74b463$export$7941f8aafa4b6021)({
        getItems () {
            return state.getItems(props.key);
        },
        preview: state.preview,
        getAllowedDropOperations: state.getAllowedDropOperations,
        hasDragButton: props.hasDragButton,
        onDragStart (e) {
            state.startDrag(props.key, e);
            // Track draggingKeys for useDroppableCollection's default onDrop handler and useDroppableCollectionState's default getDropOperation
            ($7252cd45fc48c07c$export$72cb63bdda528276)(state.draggingKeys);
        },
        onDragMove (e) {
            state.moveDrag(e);
        },
        onDragEnd (e) {
            let { dropOperation: dropOperation } = e;
            let isInternal = dropOperation === 'cancel' ? false : ($7252cd45fc48c07c$export$78bf638634500fa5)();
            state.endDrag({
                ...e,
                keys: state.draggingKeys,
                isInternal: isInternal
            });
            ($7252cd45fc48c07c$export$70936501603e6c57)();
        }
    });
    let item = state.collection.getItem(props.key);
    let numKeysForDrag = state.getKeysForDrag(props.key).size;
    let isSelected = numKeysForDrag > 1 && state.selectionManager.isSelected(props.key);
    let dragButtonLabel;
    let description;
    // Override description to include selected item count.
    let modality = ($7252cd45fc48c07c$export$49bac5d6d4b352ea)();
    if (!props.hasDragButton && state.selectionManager.selectionMode !== 'none') {
        let msg = $fd98cf7cbf233429$var$MESSAGES[modality][isSelected ? 'selected' : 'notSelected'];
        if (props.hasAction && modality === 'keyboard') msg += 'Alt';
        if (isSelected) description = stringFormatter.format(msg, {
            count: numKeysForDrag
        });
        else description = stringFormatter.format(msg);
        // Remove the onClick handler from useDrag. Long pressing will be required on touch devices,
        // and NVDA/JAWS are always in forms mode within collection components.
        delete dragProps.onClick;
    } else if (isSelected) dragButtonLabel = stringFormatter.format('dragSelectedItems', {
        count: numKeysForDrag
    });
    else {
        var _state_collection_getTextValue, _state_collection;
        var _state_collection_getTextValue1, _ref;
        let itemText = (_ref = (_state_collection_getTextValue1 = (_state_collection_getTextValue = (_state_collection = state.collection).getTextValue) === null || _state_collection_getTextValue === void 0 ? void 0 : _state_collection_getTextValue.call(_state_collection, props.key)) !== null && _state_collection_getTextValue1 !== void 0 ? _state_collection_getTextValue1 : item === null || item === void 0 ? void 0 : item.textValue) !== null && _ref !== void 0 ? _ref : '';
        dragButtonLabel = stringFormatter.format('dragItem', {
            itemText: itemText
        });
    }
    let descriptionProps = ($ef06256079686ba0$export$f8aeda7b10753fa1)(description);
    if (description) Object.assign(dragProps, descriptionProps);
    if (!props.hasDragButton && props.hasAction) {
        let { onKeyDownCapture: onKeyDownCapture, onKeyUpCapture: onKeyUpCapture } = dragProps;
        if (modality === 'touch') // Remove long press description if an action is present, because in that case long pressing selects the item.
        delete dragProps['aria-describedby'];
        // Require Alt key if there is a conflicting action.
        dragProps.onKeyDownCapture = (e)=>{
            if (e.altKey) onKeyDownCapture === null || onKeyDownCapture === void 0 ? void 0 : onKeyDownCapture(e);
        };
        dragProps.onKeyUpCapture = (e)=>{
            if (e.altKey) onKeyUpCapture === null || onKeyUpCapture === void 0 ? void 0 : onKeyUpCapture(e);
        };
    }
    return {
        dragProps: isDisabled ? {} : dragProps,
        dragButtonProps: {
            ...dragButtonProps,
            isDisabled: isDisabled,
            'aria-label': dragButtonLabel
        }
    };
}

/*
 * Copyright 2022 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 
function $4ac1fdc3a0fcd564$export$2962a7984b2f0a80(props, state, ref) {
    // Update global DnD state if this keys within this collection are dragged
    let { draggingCollectionRef: draggingCollectionRef } = ($7252cd45fc48c07c$export$6ca6700462636d0b);
    if (state.draggingKeys.size > 0 && (draggingCollectionRef === null || draggingCollectionRef === void 0 ? void 0 : draggingCollectionRef.current) !== ref.current) ($7252cd45fc48c07c$export$f2be18a910c0caa6)(ref);
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 

function $ad0e3f3d9c50e4ba$var$DragPreview(props, ref) {
    let render = props.children;
    let [children, setChildren] = (reactExports.useState)(null);
    let domRef = (reactExports.useRef)(null);
    (reactExports.useImperativeHandle)(ref, ()=>(items, callback)=>{
            // This will be called during the onDragStart event by useDrag. We need to render the
            // preview synchronously before this event returns so we can call event.dataTransfer.setDragImage.
            (reactDomExports.flushSync)(()=>{
                setChildren(render(items));
            });
            // Yield back to useDrag to set the drag image.
            callback(domRef.current);
            // Remove the preview from the DOM after a frame so the browser has time to paint.
            requestAnimationFrame(()=>{
                setChildren(null);
            });
        }, [
        render
    ]);
    if (!children) return null;
    return /*#__PURE__*/ (React).createElement("div", {
        style: {
            zIndex: -100,
            position: 'absolute',
            top: 0,
            left: -100000
        },
        ref: domRef
    }, children);
}
let $ad0e3f3d9c50e4ba$export$905ab40ac2179daa = /*#__PURE__*/ (React).forwardRef($ad0e3f3d9c50e4ba$var$DragPreview);

class $3ca85212bf8898e4$export$fbd65d14c79e28cc {
    getPrimaryStart(rect) {
        return this.orientation === 'horizontal' ? rect.left : rect.top;
    }
    getPrimaryEnd(rect) {
        return this.orientation === 'horizontal' ? rect.right : rect.bottom;
    }
    getSecondaryStart(rect) {
        return this.orientation === 'horizontal' ? rect.top : rect.left;
    }
    getSecondaryEnd(rect) {
        return this.orientation === 'horizontal' ? rect.bottom : rect.right;
    }
    getFlowStart(rect) {
        return this.layout === 'stack' ? this.getPrimaryStart(rect) : this.getSecondaryStart(rect);
    }
    getFlowEnd(rect) {
        return this.layout === 'stack' ? this.getPrimaryEnd(rect) : this.getSecondaryEnd(rect);
    }
    getFlowSize(rect) {
        return this.getFlowEnd(rect) - this.getFlowStart(rect);
    }
    getDropTargetFromPoint(x, y, isValidDropTarget) {
        if (this.collection[Symbol.iterator]().next().done) return {
            type: 'root'
        };
        let rect = this.ref.current.getBoundingClientRect();
        let primary = this.orientation === 'horizontal' ? x : y;
        let secondary = this.orientation === 'horizontal' ? y : x;
        primary += this.getPrimaryStart(rect);
        secondary += this.getSecondaryStart(rect);
        let flow = this.layout === 'stack' ? primary : secondary;
        let isPrimaryRTL = this.orientation === 'horizontal' && this.direction === 'rtl';
        let isSecondaryRTL = this.layout === 'grid' && this.orientation === 'vertical' && this.direction === 'rtl';
        let isFlowRTL = this.layout === 'stack' ? isPrimaryRTL : isSecondaryRTL;
        let elements = this.ref.current.querySelectorAll('[data-key]');
        let elementMap = new Map();
        for (let item of elements)if (item instanceof HTMLElement) elementMap.set(item.dataset.key, item);
        // TODO: assume that only item type items are valid drop targets. This is to prevent a crash when dragging over the loader
        // row since it doesn't have a data-key set on it. Will eventually need to handle the case with drag and drop and loaders located between rows aka tree.
        // Can see https://github.com/adobe/react-spectrum/pull/4210/files#diff-21e555e0c597a28215e36137f5be076a65a1e1456c92cd0fdd60f866929aae2a for additional logic
        // that may need to happen then
        let items = [
            ...this.collection
        ].filter((item)=>item.type === 'item');
        let low = 0;
        let high = items.length;
        while(low < high){
            let mid = Math.floor((low + high) / 2);
            let item = items[mid];
            let element = elementMap.get(String(item.key));
            let rect = element.getBoundingClientRect();
            let update = (isGreater)=>{
                if (isGreater) low = mid + 1;
                else high = mid;
            };
            if (primary < this.getPrimaryStart(rect)) update(isPrimaryRTL);
            else if (primary > this.getPrimaryEnd(rect)) update(!isPrimaryRTL);
            else if (secondary < this.getSecondaryStart(rect)) update(isSecondaryRTL);
            else if (secondary > this.getSecondaryEnd(rect)) update(!isSecondaryRTL);
            else {
                let target = {
                    type: 'item',
                    key: item.key,
                    dropPosition: 'on'
                };
                if (isValidDropTarget(target)) {
                    // Otherwise, if dropping on the item is accepted, try the before/after positions if within 5px
                    // of the start or end of the item.
                    if (flow <= this.getFlowStart(rect) + 5 && isValidDropTarget({
                        ...target,
                        dropPosition: 'before'
                    })) target.dropPosition = isFlowRTL ? 'after' : 'before';
                    else if (flow >= this.getFlowEnd(rect) - 5 && isValidDropTarget({
                        ...target,
                        dropPosition: 'after'
                    })) target.dropPosition = isFlowRTL ? 'before' : 'after';
                } else {
                    // If dropping on the item isn't accepted, try the target before or after depending on the position.
                    let mid = this.getFlowStart(rect) + this.getFlowSize(rect) / 2;
                    if (flow <= mid && isValidDropTarget({
                        ...target,
                        dropPosition: 'before'
                    })) target.dropPosition = isFlowRTL ? 'after' : 'before';
                    else if (flow >= mid && isValidDropTarget({
                        ...target,
                        dropPosition: 'after'
                    })) target.dropPosition = isFlowRTL ? 'before' : 'after';
                }
                return target;
            }
        }
        let item = items[Math.min(low, items.length - 1)];
        let element = elementMap.get(String(item.key));
        rect = element.getBoundingClientRect();
        if (primary < this.getPrimaryStart(rect) || Math.abs(flow - this.getFlowStart(rect)) < Math.abs(flow - this.getFlowEnd(rect))) return {
            type: 'item',
            key: item.key,
            dropPosition: isFlowRTL ? 'after' : 'before'
        };
        return {
            type: 'item',
            key: item.key,
            dropPosition: isFlowRTL ? 'before' : 'after'
        };
    }
    constructor(collection, ref, options){
        this.collection = collection;
        this.ref = ref;
        this.layout = (options === null || options === void 0 ? void 0 : options.layout) || 'stack';
        this.orientation = (options === null || options === void 0 ? void 0 : options.orientation) || 'vertical';
        this.direction = (options === null || options === void 0 ? void 0 : options.direction) || 'ltr';
    }
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ const $ce9b18daab526bbd$export$5b9bb410392e3991 = new WeakMap();
function $ce9b18daab526bbd$export$f45c25170b9a99c2(state, key) {
    let { id: id } = $ce9b18daab526bbd$export$5b9bb410392e3991.get(state);
    if (!id) throw new Error('Unknown list');
    return `${id}-${$ce9b18daab526bbd$export$e0c709538cb8ae18(key)}`;
}
function $ce9b18daab526bbd$export$e0c709538cb8ae18(key) {
    if (typeof key === 'string') return key.replace(/\s*/g, '');
    return '' + key;
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 

class $d1c300d9c497e402$export$de9feff04fda126e {
    isCell(node) {
        return node.type === 'cell';
    }
    isRow(node) {
        return node.type === 'row' || node.type === 'item';
    }
    isDisabled(item) {
        var _item_props;
        return this.disabledBehavior === 'all' && (((_item_props = item.props) === null || _item_props === void 0 ? void 0 : _item_props.isDisabled) || this.disabledKeys.has(item.key));
    }
    findPreviousKey(fromKey, pred) {
        let key = fromKey != null ? this.collection.getKeyBefore(fromKey) : this.collection.getLastKey();
        while(key != null){
            let item = this.collection.getItem(key);
            if (!this.isDisabled(item) && (!pred || pred(item))) return key;
            key = this.collection.getKeyBefore(key);
        }
    }
    findNextKey(fromKey, pred) {
        let key = fromKey != null ? this.collection.getKeyAfter(fromKey) : this.collection.getFirstKey();
        while(key != null){
            let item = this.collection.getItem(key);
            if (!this.isDisabled(item) && (!pred || pred(item))) return key;
            key = this.collection.getKeyAfter(key);
        }
    }
    getKeyBelow(key) {
        let startItem = this.collection.getItem(key);
        if (!startItem) return;
        // If focus was on a cell, start searching from the parent row
        if (this.isCell(startItem)) key = startItem.parentKey;
        // Find the next item
        key = this.findNextKey(key, (item)=>item.type === 'item');
        if (key != null) {
            // If focus was on a cell, focus the cell with the same index in the next row.
            if (this.isCell(startItem)) {
                let item = this.collection.getItem(key);
                return ($c5a24bc478652b5f$export$5f3398f8733f90e2)(($c5a24bc478652b5f$export$1005530eda016c13)(item, this.collection), startItem.index).key;
            }
            // Otherwise, focus the next row
            if (this.focusMode === 'row') return key;
        }
    }
    getKeyAbove(key) {
        let startItem = this.collection.getItem(key);
        if (!startItem) return;
        // If focus is on a cell, start searching from the parent row
        if (this.isCell(startItem)) key = startItem.parentKey;
        // Find the previous item
        key = this.findPreviousKey(key, (item)=>item.type === 'item');
        if (key != null) {
            // If focus was on a cell, focus the cell with the same index in the previous row.
            if (this.isCell(startItem)) {
                let item = this.collection.getItem(key);
                return ($c5a24bc478652b5f$export$5f3398f8733f90e2)(($c5a24bc478652b5f$export$1005530eda016c13)(item, this.collection), startItem.index).key;
            }
            // Otherwise, focus the previous row
            if (this.focusMode === 'row') return key;
        }
    }
    getKeyRightOf(key) {
        let item = this.collection.getItem(key);
        if (!item) return;
        // If focus is on a row, focus the first child cell.
        if (this.isRow(item)) {
            let children = ($c5a24bc478652b5f$export$1005530eda016c13)(item, this.collection);
            return this.direction === 'rtl' ? ($c5a24bc478652b5f$export$7475b2c64539e4cf)(children).key : ($c5a24bc478652b5f$export$fbdeaa6a76694f71)(children).key;
        }
        // If focus is on a cell, focus the next cell if any,
        // otherwise focus the parent row.
        if (this.isCell(item)) {
            let parent = this.collection.getItem(item.parentKey);
            let children = ($c5a24bc478652b5f$export$1005530eda016c13)(parent, this.collection);
            let next = this.direction === 'rtl' ? ($c5a24bc478652b5f$export$5f3398f8733f90e2)(children, item.index - 1) : ($c5a24bc478652b5f$export$5f3398f8733f90e2)(children, item.index + 1);
            if (next) return next.key;
            // focus row only if focusMode is set to row
            if (this.focusMode === 'row') return item.parentKey;
            return this.direction === 'rtl' ? this.getFirstKey(key) : this.getLastKey(key);
        }
    }
    getKeyLeftOf(key) {
        let item = this.collection.getItem(key);
        if (!item) return;
        // If focus is on a row, focus the last child cell.
        if (this.isRow(item)) {
            let children = ($c5a24bc478652b5f$export$1005530eda016c13)(item, this.collection);
            return this.direction === 'rtl' ? ($c5a24bc478652b5f$export$fbdeaa6a76694f71)(children).key : ($c5a24bc478652b5f$export$7475b2c64539e4cf)(children).key;
        }
        // If focus is on a cell, focus the previous cell if any,
        // otherwise focus the parent row.
        if (this.isCell(item)) {
            let parent = this.collection.getItem(item.parentKey);
            let children = ($c5a24bc478652b5f$export$1005530eda016c13)(parent, this.collection);
            let prev = this.direction === 'rtl' ? ($c5a24bc478652b5f$export$5f3398f8733f90e2)(children, item.index + 1) : ($c5a24bc478652b5f$export$5f3398f8733f90e2)(children, item.index - 1);
            if (prev) return prev.key;
            // focus row only if focusMode is set to row
            if (this.focusMode === 'row') return item.parentKey;
            return this.direction === 'rtl' ? this.getLastKey(key) : this.getFirstKey(key);
        }
    }
    getFirstKey(key, global) {
        let item;
        if (key != null) {
            item = this.collection.getItem(key);
            if (!item) return;
            // If global flag is not set, and a cell is currently focused,
            // move focus to the first cell in the parent row.
            if (this.isCell(item) && !global) {
                let parent = this.collection.getItem(item.parentKey);
                return ($c5a24bc478652b5f$export$fbdeaa6a76694f71)(($c5a24bc478652b5f$export$1005530eda016c13)(parent, this.collection)).key;
            }
        }
        // Find the first row
        key = this.findNextKey(null, (item)=>item.type === 'item');
        // If global flag is set (or if focus mode is cell), focus the first cell in the first row.
        if (key != null && item && this.isCell(item) && global || this.focusMode === 'cell') {
            let item = this.collection.getItem(key);
            key = ($c5a24bc478652b5f$export$fbdeaa6a76694f71)(($c5a24bc478652b5f$export$1005530eda016c13)(item, this.collection)).key;
        }
        // Otherwise, focus the row itself.
        return key;
    }
    getLastKey(key, global) {
        let item;
        if (key != null) {
            item = this.collection.getItem(key);
            if (!item) return;
            // If global flag is not set, and a cell is currently focused,
            // move focus to the last cell in the parent row.
            if (this.isCell(item) && !global) {
                let parent = this.collection.getItem(item.parentKey);
                let children = ($c5a24bc478652b5f$export$1005530eda016c13)(parent, this.collection);
                return ($c5a24bc478652b5f$export$7475b2c64539e4cf)(children).key;
            }
        }
        // Find the last row
        key = this.findPreviousKey(null, (item)=>item.type === 'item');
        // If global flag is set (or if focus mode is cell), focus the last cell in the last row.
        if (key != null && item && this.isCell(item) && global || this.focusMode === 'cell') {
            let item = this.collection.getItem(key);
            let children = ($c5a24bc478652b5f$export$1005530eda016c13)(item, this.collection);
            key = ($c5a24bc478652b5f$export$7475b2c64539e4cf)(children).key;
        }
        // Otherwise, focus the row itself.
        return key;
    }
    getKeyPageAbove(key) {
        let itemRect = this.layoutDelegate.getItemRect(key);
        if (!itemRect) return null;
        let pageY = Math.max(0, itemRect.y + itemRect.height - this.layoutDelegate.getVisibleRect().height);
        while(itemRect && itemRect.y > pageY){
            key = this.getKeyAbove(key);
            itemRect = this.layoutDelegate.getItemRect(key);
        }
        return key;
    }
    getKeyPageBelow(key) {
        let itemRect = this.layoutDelegate.getItemRect(key);
        if (!itemRect) return null;
        let pageHeight = this.layoutDelegate.getVisibleRect().height;
        let pageY = Math.min(this.layoutDelegate.getContentSize().height, itemRect.y + pageHeight);
        while(itemRect && itemRect.y + itemRect.height < pageY){
            let nextKey = this.getKeyBelow(key);
            // If nextKey is undefined, we've reached the last row already
            if (nextKey == null) break;
            itemRect = this.layoutDelegate.getItemRect(nextKey);
            key = nextKey;
        }
        return key;
    }
    getKeyForSearch(search, fromKey) {
        if (!this.collator) return null;
        let collection = this.collection;
        let key = fromKey !== null && fromKey !== void 0 ? fromKey : this.getFirstKey();
        // If the starting key is a cell, search from its parent row.
        let startItem = collection.getItem(key);
        if (startItem.type === 'cell') key = startItem.parentKey;
        let hasWrapped = false;
        while(key != null){
            let item = collection.getItem(key);
            // check row text value for match
            if (item.textValue) {
                let substring = item.textValue.slice(0, search.length);
                if (this.collator.compare(substring, search) === 0) {
                    if (this.isRow(item) && this.focusMode === 'cell') return ($c5a24bc478652b5f$export$fbdeaa6a76694f71)(($c5a24bc478652b5f$export$1005530eda016c13)(item, this.collection)).key;
                    return item.key;
                }
            }
            key = this.findNextKey(key, (item)=>item.type === 'item');
            // Wrap around when reaching the end of the collection
            if (key == null && !hasWrapped) {
                key = this.getFirstKey();
                hasWrapped = true;
            }
        }
        return null;
    }
    constructor(options){
        this.collection = options.collection;
        this.disabledKeys = options.disabledKeys;
        this.disabledBehavior = options.disabledBehavior || 'all';
        this.direction = options.direction;
        this.collator = options.collator;
        this.layoutDelegate = options.layoutDelegate || (options.layout ? new $d1c300d9c497e402$var$DeprecatedLayoutDelegate(options.layout) : new ($657e4dc4a6e88df0$export$8f5ed9ff9f511381)(options.ref));
        this.focusMode = options.focusMode || 'row';
    }
}
class $d1c300d9c497e402$var$DeprecatedLayoutDelegate {
    getContentSize() {
        return this.layout.getContentSize();
    }
    getItemRect(key) {
        var _this_layout_getLayoutInfo;
        return ((_this_layout_getLayoutInfo = this.layout.getLayoutInfo(key)) === null || _this_layout_getLayoutInfo === void 0 ? void 0 : _this_layout_getLayoutInfo.rect) || null;
    }
    getVisibleRect() {
        return this.layout.virtualizer.visibleRect;
    }
    constructor(layout){
        this.layout = layout;
    }
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ const $1af922eb41e03c8f$export$e6235c0d09b995d0 = new WeakMap();

var $682989befd4f478d$exports = {};
$682989befd4f478d$exports = {
    "deselectedItem": (args)=>`${args.item} \u{63A}\u{64A}\u{631} \u{627}\u{644}\u{645}\u{62D}\u{62F}\u{62F}`,
    "longPressToSelect": `\u{627}\u{636}\u{63A}\u{637} \u{645}\u{637}\u{648}\u{644}\u{64B}\u{627} \u{644}\u{644}\u{62F}\u{62E}\u{648}\u{644} \u{625}\u{644}\u{649} \u{648}\u{636}\u{639} \u{627}\u{644}\u{62A}\u{62D}\u{62F}\u{64A}\u{62F}.`,
    "select": `\u{62A}\u{62D}\u{62F}\u{64A}\u{62F}`,
    "selectedAll": `\u{62C}\u{645}\u{64A}\u{639} \u{627}\u{644}\u{639}\u{646}\u{627}\u{635}\u{631} \u{627}\u{644}\u{645}\u{62D}\u{62F}\u{62F}\u{629}.`,
    "selectedCount": (args, formatter)=>`${formatter.plural(args.count, {
            "=0": `\u{644}\u{645} \u{64A}\u{62A}\u{645} \u{62A}\u{62D}\u{62F}\u{64A}\u{62F} \u{639}\u{646}\u{627}\u{635}\u{631}`,
            one: ()=>`${formatter.number(args.count)} \u{639}\u{646}\u{635}\u{631} \u{645}\u{62D}\u{62F}\u{62F}`,
            other: ()=>`${formatter.number(args.count)} \u{639}\u{646}\u{635}\u{631} \u{645}\u{62D}\u{62F}\u{62F}`
        })}.`,
    "selectedItem": (args)=>`${args.item} \u{627}\u{644}\u{645}\u{62D}\u{62F}\u{62F}`
};

var $f7fca02019afd941$exports = {};
$f7fca02019afd941$exports = {
    "deselectedItem": (args)=>`${args.item} \u{43D}\u{435} \u{435} \u{438}\u{437}\u{431}\u{440}\u{430}\u{43D}.`,
    "longPressToSelect": `\u{41D}\u{430}\u{442}\u{438}\u{441}\u{43D}\u{435}\u{442}\u{435} \u{438} \u{437}\u{430}\u{434}\u{440}\u{44A}\u{436}\u{442}\u{435} \u{437}\u{430} \u{434}\u{430} \u{432}\u{43B}\u{435}\u{437}\u{435}\u{442}\u{435} \u{432} \u{438}\u{437}\u{431}\u{438}\u{440}\u{430}\u{442}\u{435}\u{43B}\u{435}\u{43D} \u{440}\u{435}\u{436}\u{438}\u{43C}.`,
    "select": `\u{418}\u{437}\u{431}\u{435}\u{440}\u{435}\u{442}\u{435}`,
    "selectedAll": `\u{412}\u{441}\u{438}\u{447}\u{43A}\u{438} \u{435}\u{43B}\u{435}\u{43C}\u{435}\u{43D}\u{442}\u{438} \u{441}\u{430} \u{438}\u{437}\u{431}\u{440}\u{430}\u{43D}\u{438}.`,
    "selectedCount": (args, formatter)=>`${formatter.plural(args.count, {
            "=0": `\u{41D}\u{44F}\u{43C}\u{430} \u{438}\u{437}\u{431}\u{440}\u{430}\u{43D}\u{438} \u{435}\u{43B}\u{435}\u{43C}\u{435}\u{43D}\u{442}\u{438}`,
            one: ()=>`${formatter.number(args.count)} \u{438}\u{437}\u{431}\u{440}\u{430}\u{43D} \u{435}\u{43B}\u{435}\u{43C}\u{435}\u{43D}\u{442}`,
            other: ()=>`${formatter.number(args.count)} \u{438}\u{437}\u{431}\u{440}\u{430}\u{43D}\u{438} \u{435}\u{43B}\u{435}\u{43C}\u{435}\u{43D}\u{442}\u{438}`
        })}.`,
    "selectedItem": (args)=>`${args.item} \u{438}\u{437}\u{431}\u{440}\u{430}\u{43D}.`
};

var $8f86f40be75387f1$exports = {};
$8f86f40be75387f1$exports = {
    "deselectedItem": (args)=>`Polo\u{17E}ka ${args.item} nen\xed vybr\xe1na.`,
    "longPressToSelect": `Dlouh\xfdm stisknut\xedm p\u{159}ejdete do re\u{17E}imu v\xfdb\u{11B}ru.`,
    "select": `Vybrat`,
    "selectedAll": `Vybr\xe1ny v\u{161}echny polo\u{17E}ky.`,
    "selectedCount": (args, formatter)=>`${formatter.plural(args.count, {
            "=0": `Nevybr\xe1ny \u{17E}\xe1dn\xe9 polo\u{17E}ky`,
            one: ()=>`Vybr\xe1na ${formatter.number(args.count)} polo\u{17E}ka`,
            other: ()=>`Vybr\xe1no ${formatter.number(args.count)} polo\u{17E}ek`
        })}.`,
    "selectedItem": (args)=>`Vybr\xe1na polo\u{17E}ka ${args.item}.`
};

var $db24ba43c8d652ee$exports = {};
$db24ba43c8d652ee$exports = {
    "deselectedItem": (args)=>`${args.item} ikke valgt.`,
    "longPressToSelect": `Lav et langt tryk for at aktivere valgtilstand.`,
    "select": `V\xe6lg`,
    "selectedAll": `Alle elementer valgt.`,
    "selectedCount": (args, formatter)=>`${formatter.plural(args.count, {
            "=0": `Ingen elementer valgt`,
            one: ()=>`${formatter.number(args.count)} element valgt`,
            other: ()=>`${formatter.number(args.count)} elementer valgt`
        })}.`,
    "selectedItem": (args)=>`${args.item} valgt.`
};

var $f8f1e72c8b5447d6$exports = {};
$f8f1e72c8b5447d6$exports = {
    "deselectedItem": (args)=>`${args.item} nicht ausgew\xe4hlt.`,
    "longPressToSelect": `Gedr\xfcckt halten, um Auswahlmodus zu \xf6ffnen.`,
    "select": `Ausw\xe4hlen`,
    "selectedAll": `Alle Elemente ausgew\xe4hlt.`,
    "selectedCount": (args, formatter)=>`${formatter.plural(args.count, {
            "=0": `Keine Elemente ausgew\xe4hlt`,
            one: ()=>`${formatter.number(args.count)} Element ausgew\xe4hlt`,
            other: ()=>`${formatter.number(args.count)} Elemente ausgew\xe4hlt`
        })}.`,
    "selectedItem": (args)=>`${args.item} ausgew\xe4hlt.`
};

var $9a73ed2983c3ab0b$exports = {};
$9a73ed2983c3ab0b$exports = {
    "deselectedItem": (args)=>`\u{394}\u{3B5}\u{3BD} \u{3B5}\u{3C0}\u{3B9}\u{3BB}\u{3AD}\u{3C7}\u{3B8}\u{3B7}\u{3BA}\u{3B5} \u{3C4}\u{3BF} \u{3C3}\u{3C4}\u{3BF}\u{3B9}\u{3C7}\u{3B5}\u{3AF}\u{3BF} ${args.item}.`,
    "longPressToSelect": `\u{3A0}\u{3B1}\u{3C4}\u{3AE}\u{3C3}\u{3C4}\u{3B5} \u{3C0}\u{3B1}\u{3C1}\u{3B1}\u{3C4}\u{3B5}\u{3C4}\u{3B1}\u{3BC}\u{3AD}\u{3BD}\u{3B1} \u{3B3}\u{3B9}\u{3B1} \u{3BD}\u{3B1} \u{3BC}\u{3C0}\u{3B5}\u{3AF}\u{3C4}\u{3B5} \u{3C3}\u{3B5} \u{3BB}\u{3B5}\u{3B9}\u{3C4}\u{3BF}\u{3C5}\u{3C1}\u{3B3}\u{3AF}\u{3B1} \u{3B5}\u{3C0}\u{3B9}\u{3BB}\u{3BF}\u{3B3}\u{3AE}\u{3C2}.`,
    "select": `\u{395}\u{3C0}\u{3B9}\u{3BB}\u{3BF}\u{3B3}\u{3AE}`,
    "selectedAll": `\u{395}\u{3C0}\u{3B9}\u{3BB}\u{3AD}\u{3C7}\u{3B8}\u{3B7}\u{3BA}\u{3B1}\u{3BD} \u{3CC}\u{3BB}\u{3B1} \u{3C4}\u{3B1} \u{3C3}\u{3C4}\u{3BF}\u{3B9}\u{3C7}\u{3B5}\u{3AF}\u{3B1}.`,
    "selectedCount": (args, formatter)=>`${formatter.plural(args.count, {
            "=0": `\u{394}\u{3B5}\u{3BD} \u{3B5}\u{3C0}\u{3B9}\u{3BB}\u{3AD}\u{3C7}\u{3B8}\u{3B7}\u{3BA}\u{3B1}\u{3BD} \u{3C3}\u{3C4}\u{3BF}\u{3B9}\u{3C7}\u{3B5}\u{3AF}\u{3B1}`,
            one: ()=>`\u{395}\u{3C0}\u{3B9}\u{3BB}\u{3AD}\u{3C7}\u{3B8}\u{3B7}\u{3BA}\u{3B5} ${formatter.number(args.count)} \u{3C3}\u{3C4}\u{3BF}\u{3B9}\u{3C7}\u{3B5}\u{3AF}\u{3BF}`,
            other: ()=>`\u{395}\u{3C0}\u{3B9}\u{3BB}\u{3AD}\u{3C7}\u{3B8}\u{3B7}\u{3BA}\u{3B1}\u{3BD} ${formatter.number(args.count)} \u{3C3}\u{3C4}\u{3BF}\u{3B9}\u{3C7}\u{3B5}\u{3AF}\u{3B1}`
        })}.`,
    "selectedItem": (args)=>`\u{395}\u{3C0}\u{3B9}\u{3BB}\u{3AD}\u{3C7}\u{3B8}\u{3B7}\u{3BA}\u{3B5} \u{3C4}\u{3BF} \u{3C3}\u{3C4}\u{3BF}\u{3B9}\u{3C7}\u{3B5}\u{3AF}\u{3BF} ${args.item}.`
};

var $583de0b3587601b9$exports = {};
$583de0b3587601b9$exports = {
    "deselectedItem": (args)=>`${args.item} not selected.`,
    "select": `Select`,
    "selectedCount": (args, formatter)=>`${formatter.plural(args.count, {
            "=0": `No items selected`,
            one: ()=>`${formatter.number(args.count)} item selected`,
            other: ()=>`${formatter.number(args.count)} items selected`
        })}.`,
    "selectedAll": `All items selected.`,
    "selectedItem": (args)=>`${args.item} selected.`,
    "longPressToSelect": `Long press to enter selection mode.`
};

var $147159c978043442$exports = {};
$147159c978043442$exports = {
    "deselectedItem": (args)=>`${args.item} no seleccionado.`,
    "longPressToSelect": `Mantenga pulsado para abrir el modo de selecci\xf3n.`,
    "select": `Seleccionar`,
    "selectedAll": `Todos los elementos seleccionados.`,
    "selectedCount": (args, formatter)=>`${formatter.plural(args.count, {
            "=0": `Ning\xfan elemento seleccionado`,
            one: ()=>`${formatter.number(args.count)} elemento seleccionado`,
            other: ()=>`${formatter.number(args.count)} elementos seleccionados`
        })}.`,
    "selectedItem": (args)=>`${args.item} seleccionado.`
};

var $5cbb62c8a19173ac$exports = {};
$5cbb62c8a19173ac$exports = {
    "deselectedItem": (args)=>`${args.item} pole valitud.`,
    "longPressToSelect": `Valikure\u{17E}iimi sisenemiseks vajutage pikalt.`,
    "select": `Vali`,
    "selectedAll": `K\xf5ik \xfcksused valitud.`,
    "selectedCount": (args, formatter)=>`${formatter.plural(args.count, {
            "=0": `\xdcksusi pole valitud`,
            one: ()=>`${formatter.number(args.count)} \xfcksus valitud`,
            other: ()=>`${formatter.number(args.count)} \xfcksust valitud`
        })}.`,
    "selectedItem": (args)=>`${args.item} valitud.`
};

var $a33d71dc804cc59e$exports = {};
$a33d71dc804cc59e$exports = {
    "deselectedItem": (args)=>`Kohdetta ${args.item} ei valittu.`,
    "longPressToSelect": `Siirry valintatilaan painamalla pitk\xe4\xe4n.`,
    "select": `Valitse`,
    "selectedAll": `Kaikki kohteet valittu.`,
    "selectedCount": (args, formatter)=>`${formatter.plural(args.count, {
            "=0": `Ei yht\xe4\xe4n kohdetta valittu`,
            one: ()=>`${formatter.number(args.count)} kohde valittu`,
            other: ()=>`${formatter.number(args.count)} kohdetta valittu`
        })}.`,
    "selectedItem": (args)=>`${args.item} valittu.`
};

var $92d800447793d084$exports = {};
$92d800447793d084$exports = {
    "deselectedItem": (args)=>`${args.item} non s\xe9lectionn\xe9.`,
    "longPressToSelect": `Appuyez de mani\xe8re prolong\xe9e pour passer en mode de s\xe9lection.`,
    "select": `S\xe9lectionner`,
    "selectedAll": `Tous les \xe9l\xe9ments s\xe9lectionn\xe9s.`,
    "selectedCount": (args, formatter)=>`${formatter.plural(args.count, {
            "=0": `Aucun \xe9l\xe9ment s\xe9lectionn\xe9`,
            one: ()=>`${formatter.number(args.count)} \xe9l\xe9ment s\xe9lectionn\xe9`,
            other: ()=>`${formatter.number(args.count)} \xe9l\xe9ments s\xe9lectionn\xe9s`
        })}.`,
    "selectedItem": (args)=>`${args.item} s\xe9lectionn\xe9.`
};

var $fe732cdb32124ea8$exports = {};
$fe732cdb32124ea8$exports = {
    "deselectedItem": (args)=>`${args.item} \u{5DC}\u{5D0} \u{5E0}\u{5D1}\u{5D7}\u{5E8}.`,
    "longPressToSelect": `\u{5D4}\u{5E7}\u{5E9}\u{5D4} \u{5D0}\u{5E8}\u{5D5}\u{5DB}\u{5D4} \u{5DC}\u{5DB}\u{5E0}\u{5D9}\u{5E1}\u{5D4} \u{5DC}\u{5DE}\u{5E6}\u{5D1} \u{5D1}\u{5D7}\u{5D9}\u{5E8}\u{5D4}.`,
    "select": `\u{5D1}\u{5D7}\u{5E8}`,
    "selectedAll": `\u{5DB}\u{5DC} \u{5D4}\u{5E4}\u{5E8}\u{5D9}\u{5D8}\u{5D9}\u{5DD} \u{5E0}\u{5D1}\u{5D7}\u{5E8}\u{5D5}.`,
    "selectedCount": (args, formatter)=>`${formatter.plural(args.count, {
            "=0": `\u{5DC}\u{5D0} \u{5E0}\u{5D1}\u{5D7}\u{5E8}\u{5D5} \u{5E4}\u{5E8}\u{5D9}\u{5D8}\u{5D9}\u{5DD}`,
            one: ()=>`\u{5E4}\u{5E8}\u{5D9}\u{5D8} ${formatter.number(args.count)} \u{5E0}\u{5D1}\u{5D7}\u{5E8}`,
            other: ()=>`${formatter.number(args.count)} \u{5E4}\u{5E8}\u{5D9}\u{5D8}\u{5D9}\u{5DD} \u{5E0}\u{5D1}\u{5D7}\u{5E8}\u{5D5}`
        })}.`,
    "selectedItem": (args)=>`${args.item} \u{5E0}\u{5D1}\u{5D7}\u{5E8}.`
};

var $e41234e934efb4f5$exports = {};
$e41234e934efb4f5$exports = {
    "deselectedItem": (args)=>`Stavka ${args.item} nije odabrana.`,
    "longPressToSelect": `Dugo pritisnite za ulazak u na\u{10D}in odabira.`,
    "select": `Odaberite`,
    "selectedAll": `Odabrane su sve stavke.`,
    "selectedCount": (args, formatter)=>`${formatter.plural(args.count, {
            "=0": `Nije odabrana nijedna stavka`,
            one: ()=>`Odabrana je ${formatter.number(args.count)} stavka`,
            other: ()=>`Odabrano je ${formatter.number(args.count)} stavki`
        })}.`,
    "selectedItem": (args)=>`Stavka ${args.item} je odabrana.`
};

var $1b0393182473bf9e$exports = {};
$1b0393182473bf9e$exports = {
    "deselectedItem": (args)=>`${args.item} nincs kijel\xf6lve.`,
    "longPressToSelect": `Nyomja hosszan a kijel\xf6l\xe9shez.`,
    "select": `Kijel\xf6l\xe9s`,
    "selectedAll": `Az \xf6sszes elem kijel\xf6lve.`,
    "selectedCount": (args, formatter)=>`${formatter.plural(args.count, {
            "=0": `Egy elem sincs kijel\xf6lve`,
            one: ()=>`${formatter.number(args.count)} elem kijel\xf6lve`,
            other: ()=>`${formatter.number(args.count)} elem kijel\xf6lve`
        })}.`,
    "selectedItem": (args)=>`${args.item} kijel\xf6lve.`
};

var $2eed782c1c110ce7$exports = {};
$2eed782c1c110ce7$exports = {
    "deselectedItem": (args)=>`${args.item} non selezionato.`,
    "longPressToSelect": `Premi a lungo per passare alla modalit\xe0 di selezione.`,
    "select": `Seleziona`,
    "selectedAll": `Tutti gli elementi selezionati.`,
    "selectedCount": (args, formatter)=>`${formatter.plural(args.count, {
            "=0": `Nessun elemento selezionato`,
            one: ()=>`${formatter.number(args.count)} elemento selezionato`,
            other: ()=>`${formatter.number(args.count)} elementi selezionati`
        })}.`,
    "selectedItem": (args)=>`${args.item} selezionato.`
};

var $8b5d459f86e9b23c$exports = {};
$8b5d459f86e9b23c$exports = {
    "deselectedItem": (args)=>`${args.item} \u{304C}\u{9078}\u{629E}\u{3055}\u{308C}\u{3066}\u{3044}\u{307E}\u{305B}\u{3093}\u{3002}`,
    "longPressToSelect": `\u{9577}\u{62BC}\u{3057}\u{3057}\u{3066}\u{9078}\u{629E}\u{30E2}\u{30FC}\u{30C9}\u{3092}\u{958B}\u{304D}\u{307E}\u{3059}\u{3002}`,
    "select": `\u{9078}\u{629E}`,
    "selectedAll": `\u{3059}\u{3079}\u{3066}\u{306E}\u{9805}\u{76EE}\u{3092}\u{9078}\u{629E}\u{3057}\u{307E}\u{3057}\u{305F}\u{3002}`,
    "selectedCount": (args, formatter)=>`${formatter.plural(args.count, {
            "=0": `\u{9805}\u{76EE}\u{304C}\u{9078}\u{629E}\u{3055}\u{308C}\u{3066}\u{3044}\u{307E}\u{305B}\u{3093}`,
            one: ()=>`${formatter.number(args.count)} \u{9805}\u{76EE}\u{3092}\u{9078}\u{629E}\u{3057}\u{307E}\u{3057}\u{305F}`,
            other: ()=>`${formatter.number(args.count)} \u{9805}\u{76EE}\u{3092}\u{9078}\u{629E}\u{3057}\u{307E}\u{3057}\u{305F}`
        })}\u{3002}`,
    "selectedItem": (args)=>`${args.item} \u{3092}\u{9078}\u{629E}\u{3057}\u{307E}\u{3057}\u{305F}\u{3002}`
};

var $1949c3ad17295fd4$exports = {};
$1949c3ad17295fd4$exports = {
    "deselectedItem": (args)=>`${args.item}\u{C774}(\u{AC00}) \u{C120}\u{D0DD}\u{B418}\u{C9C0} \u{C54A}\u{C558}\u{C2B5}\u{B2C8}\u{B2E4}.`,
    "longPressToSelect": `\u{C120}\u{D0DD} \u{BAA8}\u{B4DC}\u{B85C} \u{B4E4}\u{C5B4}\u{AC00}\u{B824}\u{BA74} \u{AE38}\u{AC8C} \u{B204}\u{B974}\u{C2ED}\u{C2DC}\u{C624}.`,
    "select": `\u{C120}\u{D0DD}`,
    "selectedAll": `\u{BAA8}\u{B4E0} \u{D56D}\u{BAA9}\u{C774} \u{C120}\u{D0DD}\u{B418}\u{C5C8}\u{C2B5}\u{B2C8}\u{B2E4}.`,
    "selectedCount": (args, formatter)=>`${formatter.plural(args.count, {
            "=0": `\u{C120}\u{D0DD}\u{B41C} \u{D56D}\u{BAA9}\u{C774} \u{C5C6}\u{C2B5}\u{B2C8}\u{B2E4}`,
            one: ()=>`${formatter.number(args.count)}\u{AC1C} \u{D56D}\u{BAA9}\u{C774} \u{C120}\u{D0DD}\u{B418}\u{C5C8}\u{C2B5}\u{B2C8}\u{B2E4}`,
            other: ()=>`${formatter.number(args.count)}\u{AC1C} \u{D56D}\u{BAA9}\u{C774} \u{C120}\u{D0DD}\u{B418}\u{C5C8}\u{C2B5}\u{B2C8}\u{B2E4}`
        })}.`,
    "selectedItem": (args)=>`${args.item}\u{C774}(\u{AC00}) \u{C120}\u{D0DD}\u{B418}\u{C5C8}\u{C2B5}\u{B2C8}\u{B2E4}.`
};

var $f5e3df4dc8aa7b54$exports = {};
$f5e3df4dc8aa7b54$exports = {
    "deselectedItem": (args)=>`${args.item} nepasirinkta.`,
    "longPressToSelect": `Nor\u{117}dami \u{12F}jungti pasirinkimo re\u{17E}im\u{105}, paspauskite ir palaikykite.`,
    "select": `Pasirinkti`,
    "selectedAll": `Pasirinkti visi elementai.`,
    "selectedCount": (args, formatter)=>`${formatter.plural(args.count, {
            "=0": `Nepasirinktas n\u{117} vienas elementas`,
            one: ()=>`Pasirinktas ${formatter.number(args.count)} elementas`,
            other: ()=>`Pasirinkta element\u{173}: ${formatter.number(args.count)}`
        })}.`,
    "selectedItem": (args)=>`Pasirinkta: ${args.item}.`
};

var $9dd86690a5c2b2c5$exports = {};
$9dd86690a5c2b2c5$exports = {
    "deselectedItem": (args)=>`Vienums ${args.item} nav atlas\u{12B}ts.`,
    "longPressToSelect": `Ilgi turiet nospiestu. lai iesl\u{113}gtu atlases re\u{17E}\u{12B}mu.`,
    "select": `Atlas\u{12B}t`,
    "selectedAll": `Atlas\u{12B}ti visi vienumi.`,
    "selectedCount": (args, formatter)=>`${formatter.plural(args.count, {
            "=0": `Nav atlas\u{12B}ts neviens vienums`,
            one: ()=>`Atlas\u{12B}to vienumu skaits: ${formatter.number(args.count)}`,
            other: ()=>`Atlas\u{12B}to vienumu skaits: ${formatter.number(args.count)}`
        })}.`,
    "selectedItem": (args)=>`Atlas\u{12B}ts vienums ${args.item}.`
};

var $843964c3bf9a7d24$exports = {};
$843964c3bf9a7d24$exports = {
    "deselectedItem": (args)=>`${args.item} er ikke valgt.`,
    "longPressToSelect": `Bruk et langt trykk for \xe5 g\xe5 inn i valgmodus.`,
    "select": `Velg`,
    "selectedAll": `Alle elementer er valgt.`,
    "selectedCount": (args, formatter)=>`${formatter.plural(args.count, {
            "=0": `Ingen elementer er valgt`,
            one: ()=>`${formatter.number(args.count)} element er valgt`,
            other: ()=>`${formatter.number(args.count)} elementer er valgt`
        })}.`,
    "selectedItem": (args)=>`${args.item} er valgt.`
};

var $73f50e845f9ef3b4$exports = {};
$73f50e845f9ef3b4$exports = {
    "deselectedItem": (args)=>`${args.item} niet geselecteerd.`,
    "longPressToSelect": `Druk lang om de selectiemodus te openen.`,
    "select": `Selecteren`,
    "selectedAll": `Alle items geselecteerd.`,
    "selectedCount": (args, formatter)=>`${formatter.plural(args.count, {
            "=0": `Geen items geselecteerd`,
            one: ()=>`${formatter.number(args.count)} item geselecteerd`,
            other: ()=>`${formatter.number(args.count)} items geselecteerd`
        })}.`,
    "selectedItem": (args)=>`${args.item} geselecteerd.`
};

var $87f92a7e077514b2$exports = {};
$87f92a7e077514b2$exports = {
    "deselectedItem": (args)=>`Nie zaznaczono ${args.item}.`,
    "longPressToSelect": `Naci\u{15B}nij i przytrzymaj, aby wej\u{15B}\u{107} do trybu wyboru.`,
    "select": `Zaznacz`,
    "selectedAll": `Wszystkie zaznaczone elementy.`,
    "selectedCount": (args, formatter)=>`${formatter.plural(args.count, {
            "=0": `Nie zaznaczono \u{17C}adnych element\xf3w`,
            one: ()=>`${formatter.number(args.count)} zaznaczony element`,
            other: ()=>`${formatter.number(args.count)} zaznaczonych element\xf3w`
        })}.`,
    "selectedItem": (args)=>`Zaznaczono ${args.item}.`
};

var $c28c98d58ee9ff6f$exports = {};
$c28c98d58ee9ff6f$exports = {
    "deselectedItem": (args)=>`${args.item} n\xe3o selecionado.`,
    "longPressToSelect": `Mantenha pressionado para entrar no modo de sele\xe7\xe3o.`,
    "select": `Selecionar`,
    "selectedAll": `Todos os itens selecionados.`,
    "selectedCount": (args, formatter)=>`${formatter.plural(args.count, {
            "=0": `Nenhum item selecionado`,
            one: ()=>`${formatter.number(args.count)} item selecionado`,
            other: ()=>`${formatter.number(args.count)} itens selecionados`
        })}.`,
    "selectedItem": (args)=>`${args.item} selecionado.`
};

var $b6b1503b17b2254d$exports = {};
$b6b1503b17b2254d$exports = {
    "deselectedItem": (args)=>`${args.item} n\xe3o selecionado.`,
    "longPressToSelect": `Prima continuamente para entrar no modo de sele\xe7\xe3o.`,
    "select": `Selecionar`,
    "selectedAll": `Todos os itens selecionados.`,
    "selectedCount": (args, formatter)=>`${formatter.plural(args.count, {
            "=0": `Nenhum item selecionado`,
            one: ()=>`${formatter.number(args.count)} item selecionado`,
            other: ()=>`${formatter.number(args.count)} itens selecionados`
        })}.`,
    "selectedItem": (args)=>`${args.item} selecionado.`
};

var $8bdaeb71e50c3e1a$exports = {};
$8bdaeb71e50c3e1a$exports = {
    "deselectedItem": (args)=>`${args.item} neselectat.`,
    "longPressToSelect": `Ap\u{103}sa\u{21B}i lung pentru a intra \xeen modul de selectare.`,
    "select": `Selectare`,
    "selectedAll": `Toate elementele selectate.`,
    "selectedCount": (args, formatter)=>`${formatter.plural(args.count, {
            "=0": `Niciun element selectat`,
            one: ()=>`${formatter.number(args.count)} element selectat`,
            other: ()=>`${formatter.number(args.count)} elemente selectate`
        })}.`,
    "selectedItem": (args)=>`${args.item} selectat.`
};

var $ec2b852dd7c3d1f2$exports = {};
$ec2b852dd7c3d1f2$exports = {
    "deselectedItem": (args)=>`${args.item} \u{43D}\u{435} \u{432}\u{44B}\u{431}\u{440}\u{430}\u{43D}\u{43E}.`,
    "longPressToSelect": `\u{41D}\u{430}\u{436}\u{43C}\u{438}\u{442}\u{435} \u{438} \u{443}\u{434}\u{435}\u{440}\u{436}\u{438}\u{432}\u{430}\u{439}\u{442}\u{435} \u{434}\u{43B}\u{44F} \u{432}\u{445}\u{43E}\u{434}\u{430} \u{432} \u{440}\u{435}\u{436}\u{438}\u{43C} \u{432}\u{44B}\u{431}\u{43E}\u{440}\u{430}.`,
    "select": `\u{412}\u{44B}\u{431}\u{440}\u{430}\u{442}\u{44C}`,
    "selectedAll": `\u{412}\u{44B}\u{431}\u{440}\u{430}\u{43D}\u{44B} \u{432}\u{441}\u{435} \u{44D}\u{43B}\u{435}\u{43C}\u{435}\u{43D}\u{442}\u{44B}.`,
    "selectedCount": (args, formatter)=>`${formatter.plural(args.count, {
            "=0": `\u{41D}\u{435}\u{442} \u{432}\u{44B}\u{431}\u{440}\u{430}\u{43D}\u{43D}\u{44B}\u{445} \u{44D}\u{43B}\u{435}\u{43C}\u{435}\u{43D}\u{442}\u{43E}\u{432}`,
            one: ()=>`${formatter.number(args.count)} \u{44D}\u{43B}\u{435}\u{43C}\u{435}\u{43D}\u{442} \u{432}\u{44B}\u{431}\u{440}\u{430}\u{43D}`,
            other: ()=>`${formatter.number(args.count)} \u{44D}\u{43B}\u{435}\u{43C}\u{435}\u{43D}\u{442}\u{43E}\u{432} \u{432}\u{44B}\u{431}\u{440}\u{430}\u{43D}\u{43E}`
        })}.`,
    "selectedItem": (args)=>`${args.item} \u{432}\u{44B}\u{431}\u{440}\u{430}\u{43D}\u{43E}.`
};

var $79e6d900d6a4f82d$exports = {};
$79e6d900d6a4f82d$exports = {
    "deselectedItem": (args)=>`Nevybrat\xe9 polo\u{17E}ky: ${args.item}.`,
    "longPressToSelect": `Dlh\u{161}\xedm stla\u{10D}en\xedm prejdite do re\u{17E}imu v\xfdberu.`,
    "select": `Vybra\u{165}`,
    "selectedAll": `V\u{161}etky vybrat\xe9 polo\u{17E}ky.`,
    "selectedCount": (args, formatter)=>`${formatter.plural(args.count, {
            "=0": `\u{17D}iadne vybrat\xe9 polo\u{17E}ky`,
            one: ()=>`${formatter.number(args.count)} vybrat\xe1 polo\u{17E}ka`,
            other: ()=>`Po\u{10D}et vybrat\xfdch polo\u{17E}iek:${formatter.number(args.count)}`
        })}.`,
    "selectedItem": (args)=>`Vybrat\xe9 polo\u{17E}ky: ${args.item}.`
};

var $f4c1f0d5d4d03d80$exports = {};
$f4c1f0d5d4d03d80$exports = {
    "deselectedItem": (args)=>`Element ${args.item} ni izbran.`,
    "longPressToSelect": `Za izbirni na\u{10D}in pritisnite in dlje \u{10D}asa dr\u{17E}ite.`,
    "select": `Izberite`,
    "selectedAll": `Vsi elementi so izbrani.`,
    "selectedCount": (args, formatter)=>`${formatter.plural(args.count, {
            "=0": `Noben element ni izbran`,
            one: ()=>`${formatter.number(args.count)} element je izbran`,
            other: ()=>`${formatter.number(args.count)} elementov je izbranih`
        })}.`,
    "selectedItem": (args)=>`Element ${args.item} je izbran.`
};

var $46252cd87269b10b$exports = {};
$46252cd87269b10b$exports = {
    "deselectedItem": (args)=>`${args.item} nije izabrano.`,
    "longPressToSelect": `Dugo pritisnite za ulazak u re\u{17E}im biranja.`,
    "select": `Izaberite`,
    "selectedAll": `Izabrane su sve stavke.`,
    "selectedCount": (args, formatter)=>`${formatter.plural(args.count, {
            "=0": `Nije izabrana nijedna stavka`,
            one: ()=>`Izabrana je ${formatter.number(args.count)} stavka`,
            other: ()=>`Izabrano je ${formatter.number(args.count)} stavki`
        })}.`,
    "selectedItem": (args)=>`${args.item} je izabrano.`
};

var $d4d5d8dab362555c$exports = {};
$d4d5d8dab362555c$exports = {
    "deselectedItem": (args)=>`${args.item} ej markerat.`,
    "longPressToSelect": `Tryck l\xe4nge n\xe4r du vill \xf6ppna v\xe4ljarl\xe4ge.`,
    "select": `Markera`,
    "selectedAll": `Alla markerade objekt.`,
    "selectedCount": (args, formatter)=>`${formatter.plural(args.count, {
            "=0": `Inga markerade objekt`,
            one: ()=>`${formatter.number(args.count)} markerat objekt`,
            other: ()=>`${formatter.number(args.count)} markerade objekt`
        })}.`,
    "selectedItem": (args)=>`${args.item} markerat.`
};

var $3d55d1f97c377e83$exports = {};
$3d55d1f97c377e83$exports = {
    "deselectedItem": (args)=>`${args.item} se\xe7ilmedi.`,
    "longPressToSelect": `Se\xe7im moduna girmek i\xe7in uzun bas\u{131}n.`,
    "select": `Se\xe7`,
    "selectedAll": `T\xfcm \xf6geler se\xe7ildi.`,
    "selectedCount": (args, formatter)=>`${formatter.plural(args.count, {
            "=0": `Hi\xe7bir \xf6ge se\xe7ilmedi`,
            one: ()=>`${formatter.number(args.count)} \xf6ge se\xe7ildi`,
            other: ()=>`${formatter.number(args.count)} \xf6ge se\xe7ildi`
        })}.`,
    "selectedItem": (args)=>`${args.item} se\xe7ildi.`
};

var $5368512f1c703a3f$exports = {};
$5368512f1c703a3f$exports = {
    "deselectedItem": (args)=>`${args.item} \u{43D}\u{435} \u{432}\u{438}\u{431}\u{440}\u{430}\u{43D}\u{43E}.`,
    "longPressToSelect": `\u{412}\u{438}\u{43A}\u{43E}\u{43D}\u{430}\u{439}\u{442}\u{435} \u{434}\u{43E}\u{432}\u{433}\u{435} \u{43D}\u{430}\u{442}\u{438}\u{441}\u{43D}\u{435}\u{43D}\u{43D}\u{44F}, \u{449}\u{43E}\u{431} \u{43F}\u{435}\u{440}\u{435}\u{439}\u{442}\u{438} \u{432} \u{440}\u{435}\u{436}\u{438}\u{43C} \u{432}\u{438}\u{431}\u{43E}\u{440}\u{443}.`,
    "select": `\u{412}\u{438}\u{431}\u{440}\u{430}\u{442}\u{438}`,
    "selectedAll": `\u{423}\u{441}\u{456} \u{435}\u{43B}\u{435}\u{43C}\u{435}\u{43D}\u{442}\u{438} \u{432}\u{438}\u{431}\u{440}\u{430}\u{43D}\u{43E}.`,
    "selectedCount": (args, formatter)=>`${formatter.plural(args.count, {
            "=0": `\u{416}\u{43E}\u{434}\u{43D}\u{438}\u{445} \u{435}\u{43B}\u{435}\u{43C}\u{435}\u{43D}\u{442}\u{456}\u{432} \u{43D}\u{435} \u{432}\u{438}\u{431}\u{440}\u{430}\u{43D}\u{43E}`,
            one: ()=>`${formatter.number(args.count)} \u{435}\u{43B}\u{435}\u{43C}\u{435}\u{43D}\u{442} \u{432}\u{438}\u{431}\u{440}\u{430}\u{43D}\u{43E}`,
            other: ()=>`\u{412}\u{438}\u{431}\u{440}\u{430}\u{43D}\u{43E} \u{435}\u{43B}\u{435}\u{43C}\u{435}\u{43D}\u{442}\u{456}\u{432}: ${formatter.number(args.count)}`
        })}.`,
    "selectedItem": (args)=>`${args.item} \u{432}\u{438}\u{431}\u{440}\u{430}\u{43D}\u{43E}.`
};

var $f1316b1074463583$exports = {};
$f1316b1074463583$exports = {
    "deselectedItem": (args)=>`\u{672A}\u{9009}\u{62E9} ${args.item}\u{3002}`,
    "longPressToSelect": `\u{957F}\u{6309}\u{4EE5}\u{8FDB}\u{5165}\u{9009}\u{62E9}\u{6A21}\u{5F0F}\u{3002}`,
    "select": `\u{9009}\u{62E9}`,
    "selectedAll": `\u{5DF2}\u{9009}\u{62E9}\u{6240}\u{6709}\u{9879}\u{76EE}\u{3002}`,
    "selectedCount": (args, formatter)=>`${formatter.plural(args.count, {
            "=0": `\u{672A}\u{9009}\u{62E9}\u{9879}\u{76EE}`,
            one: ()=>`\u{5DF2}\u{9009}\u{62E9} ${formatter.number(args.count)} \u{4E2A}\u{9879}\u{76EE}`,
            other: ()=>`\u{5DF2}\u{9009}\u{62E9} ${formatter.number(args.count)} \u{4E2A}\u{9879}\u{76EE}`
        })}\u{3002}`,
    "selectedItem": (args)=>`\u{5DF2}\u{9009}\u{62E9} ${args.item}\u{3002}`
};

var $7e60654723031b6f$exports = {};
$7e60654723031b6f$exports = {
    "deselectedItem": (args)=>`\u{672A}\u{9078}\u{53D6}\u{300C}${args.item}\u{300D}\u{3002}`,
    "longPressToSelect": `\u{9577}\u{6309}\u{4EE5}\u{9032}\u{5165}\u{9078}\u{64C7}\u{6A21}\u{5F0F}\u{3002}`,
    "select": `\u{9078}\u{53D6}`,
    "selectedAll": `\u{5DF2}\u{9078}\u{53D6}\u{6240}\u{6709}\u{9805}\u{76EE}\u{3002}`,
    "selectedCount": (args, formatter)=>`${formatter.plural(args.count, {
            "=0": `\u{672A}\u{9078}\u{53D6}\u{4EFB}\u{4F55}\u{9805}\u{76EE}`,
            one: ()=>`\u{5DF2}\u{9078}\u{53D6} ${formatter.number(args.count)} \u{500B}\u{9805}\u{76EE}`,
            other: ()=>`\u{5DF2}\u{9078}\u{53D6} ${formatter.number(args.count)} \u{500B}\u{9805}\u{76EE}`
        })}\u{3002}`,
    "selectedItem": (args)=>`\u{5DF2}\u{9078}\u{53D6}\u{300C}${args.item}\u{300D}\u{3002}`
};

var $835c96616a7cb4f9$exports = {};


































$835c96616a7cb4f9$exports = {
    "ar-AE": $682989befd4f478d$exports,
    "bg-BG": $f7fca02019afd941$exports,
    "cs-CZ": $8f86f40be75387f1$exports,
    "da-DK": $db24ba43c8d652ee$exports,
    "de-DE": $f8f1e72c8b5447d6$exports,
    "el-GR": $9a73ed2983c3ab0b$exports,
    "en-US": $583de0b3587601b9$exports,
    "es-ES": $147159c978043442$exports,
    "et-EE": $5cbb62c8a19173ac$exports,
    "fi-FI": $a33d71dc804cc59e$exports,
    "fr-FR": $92d800447793d084$exports,
    "he-IL": $fe732cdb32124ea8$exports,
    "hr-HR": $e41234e934efb4f5$exports,
    "hu-HU": $1b0393182473bf9e$exports,
    "it-IT": $2eed782c1c110ce7$exports,
    "ja-JP": $8b5d459f86e9b23c$exports,
    "ko-KR": $1949c3ad17295fd4$exports,
    "lt-LT": $f5e3df4dc8aa7b54$exports,
    "lv-LV": $9dd86690a5c2b2c5$exports,
    "nb-NO": $843964c3bf9a7d24$exports,
    "nl-NL": $73f50e845f9ef3b4$exports,
    "pl-PL": $87f92a7e077514b2$exports,
    "pt-BR": $c28c98d58ee9ff6f$exports,
    "pt-PT": $b6b1503b17b2254d$exports,
    "ro-RO": $8bdaeb71e50c3e1a$exports,
    "ru-RU": $ec2b852dd7c3d1f2$exports,
    "sk-SK": $79e6d900d6a4f82d$exports,
    "sl-SI": $f4c1f0d5d4d03d80$exports,
    "sr-SP": $46252cd87269b10b$exports,
    "sv-SE": $d4d5d8dab362555c$exports,
    "tr-TR": $3d55d1f97c377e83$exports,
    "uk-UA": $5368512f1c703a3f$exports,
    "zh-CN": $f1316b1074463583$exports,
    "zh-TW": $7e60654723031b6f$exports
};

function $parcel$interopDefault$a(a) {
  return a && a.__esModule ? a.default : a;
}
/*
 * Copyright 2022 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 




function $92599c3fd427b763$export$137e594ef3218a10(props, state) {
    let { getRowText: getRowText = (key)=>{
        var _state_collection_getTextValue, _state_collection, _state_collection_getItem;
        var _state_collection_getTextValue1;
        return (_state_collection_getTextValue1 = (_state_collection_getTextValue = (_state_collection = state.collection).getTextValue) === null || _state_collection_getTextValue === void 0 ? void 0 : _state_collection_getTextValue.call(_state_collection, key)) !== null && _state_collection_getTextValue1 !== void 0 ? _state_collection_getTextValue1 : (_state_collection_getItem = state.collection.getItem(key)) === null || _state_collection_getItem === void 0 ? void 0 : _state_collection_getItem.textValue;
    } } = props;
    let stringFormatter = ($fca6afa0e843324b$export$f12b703ca79dfbb1)((($parcel$interopDefault$a($835c96616a7cb4f9$exports))), '@react-aria/grid');
    // Many screen readers do not announce when items in a grid are selected/deselected.
    // We do this using an ARIA live region.
    let selection = state.selectionManager.rawSelection;
    let lastSelection = (reactExports.useRef)(selection);
    ($4f58c5f72bcf79f7$export$496315a1608d9602)(()=>{
        var _lastSelection_current;
        if (!state.selectionManager.isFocused) {
            lastSelection.current = selection;
            return;
        }
        let addedKeys = $92599c3fd427b763$var$diffSelection(selection, lastSelection.current);
        let removedKeys = $92599c3fd427b763$var$diffSelection(lastSelection.current, selection);
        // If adding or removing a single row from the selection, announce the name of that item.
        let isReplace = state.selectionManager.selectionBehavior === 'replace';
        let messages = [];
        if (state.selectionManager.selectedKeys.size === 1 && isReplace) {
            if (state.collection.getItem(state.selectionManager.selectedKeys.keys().next().value)) {
                let currentSelectionText = getRowText(state.selectionManager.selectedKeys.keys().next().value);
                if (currentSelectionText) messages.push(stringFormatter.format('selectedItem', {
                    item: currentSelectionText
                }));
            }
        } else if (addedKeys.size === 1 && removedKeys.size === 0) {
            let addedText = getRowText(addedKeys.keys().next().value);
            if (addedText) messages.push(stringFormatter.format('selectedItem', {
                item: addedText
            }));
        } else if (removedKeys.size === 1 && addedKeys.size === 0) {
            if (state.collection.getItem(removedKeys.keys().next().value)) {
                let removedText = getRowText(removedKeys.keys().next().value);
                if (removedText) messages.push(stringFormatter.format('deselectedItem', {
                    item: removedText
                }));
            }
        }
        // Announce how many items are selected, except when selecting the first item.
        if (state.selectionManager.selectionMode === 'multiple') {
            if (messages.length === 0 || selection === 'all' || selection.size > 1 || lastSelection.current === 'all' || ((_lastSelection_current = lastSelection.current) === null || _lastSelection_current === void 0 ? void 0 : _lastSelection_current.size) > 1) messages.push(selection === 'all' ? stringFormatter.format('selectedAll') : stringFormatter.format('selectedCount', {
                count: selection.size
            }));
        }
        if (messages.length > 0) ($319e236875307eab$export$a9b970dcc4ae71a9)(messages.join(' '));
        lastSelection.current = selection;
    }, [
        selection
    ]);
}
function $92599c3fd427b763$var$diffSelection(a, b) {
    let res = new Set();
    if (a === 'all' || b === 'all') return res;
    for (let key of a.keys())if (!b.has(key)) res.add(key);
    return res;
}

function $parcel$interopDefault$9(a) {
  return a && a.__esModule ? a.default : a;
}
/*
 * Copyright 2021 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 




function $5b9b5b5723db6ae1$export$be42ebdab07ae4c2(props) {
    let stringFormatter = ($fca6afa0e843324b$export$f12b703ca79dfbb1)((($parcel$interopDefault$9($835c96616a7cb4f9$exports))), '@react-aria/grid');
    let modality = ($507fabe10e71c6fb$export$98e20ec92f614cfe)();
    // null is the default if the user hasn't interacted with the table at all yet or the rest of the page
    let shouldLongPress = (modality === 'pointer' || modality === 'virtual' || modality == null) && typeof window !== 'undefined' && 'ontouchstart' in window;
    let interactionDescription = (reactExports.useMemo)(()=>{
        let selectionMode = props.selectionManager.selectionMode;
        let selectionBehavior = props.selectionManager.selectionBehavior;
        let message = undefined;
        if (shouldLongPress) message = stringFormatter.format('longPressToSelect');
        return selectionBehavior === 'replace' && selectionMode !== 'none' && props.hasItemActions ? message : undefined;
    }, [
        props.selectionManager.selectionMode,
        props.selectionManager.selectionBehavior,
        props.hasItemActions,
        stringFormatter,
        shouldLongPress
    ]);
    let descriptionProps = ($ef06256079686ba0$export$f8aeda7b10753fa1)(interactionDescription);
    return descriptionProps;
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 








function $83c6e2eafa584c67$export$f6b86a04e5d66d90(props, state, ref) {
    let { isVirtualized: isVirtualized, keyboardDelegate: keyboardDelegate, focusMode: focusMode, scrollRef: scrollRef, getRowText: getRowText, onRowAction: onRowAction, onCellAction: onCellAction } = props;
    let { selectionManager: manager } = state;
    if (!props['aria-label'] && !props['aria-labelledby']) console.warn('An aria-label or aria-labelledby prop is required for accessibility.');
    // By default, a KeyboardDelegate is provided which uses the DOM to query layout information (e.g. for page up/page down).
    // When virtualized, the layout object will be passed in as a prop and override this.
    let collator = ($325a3faab7a68acd$export$a16aca283550c30d)({
        usage: 'search',
        sensitivity: 'base'
    });
    let { direction: direction } = ($18f2051aff69b9bf$export$43bb16f9c6d9e3f7)();
    let disabledBehavior = state.selectionManager.disabledBehavior;
    let delegate = (reactExports.useMemo)(()=>keyboardDelegate || new ($d1c300d9c497e402$export$de9feff04fda126e)({
            collection: state.collection,
            disabledKeys: state.disabledKeys,
            disabledBehavior: disabledBehavior,
            ref: ref,
            direction: direction,
            collator: collator,
            focusMode: focusMode
        }), [
        keyboardDelegate,
        state.collection,
        state.disabledKeys,
        disabledBehavior,
        ref,
        direction,
        collator,
        focusMode
    ]);
    let { collectionProps: collectionProps } = ($ae20dd8cbca75726$export$d6daf82dcd84e87c)({
        ref: ref,
        selectionManager: manager,
        keyboardDelegate: delegate,
        isVirtualized: isVirtualized,
        scrollRef: scrollRef
    });
    let id = ($bdb11010cef70236$export$f680877a34711e37)(props.id);
    ($1af922eb41e03c8f$export$e6235c0d09b995d0).set(state, {
        keyboardDelegate: delegate,
        actions: {
            onRowAction: onRowAction,
            onCellAction: onCellAction
        }
    });
    let descriptionProps = ($5b9b5b5723db6ae1$export$be42ebdab07ae4c2)({
        selectionManager: manager,
        hasItemActions: !!(onRowAction || onCellAction)
    });
    let domProps = ($65484d02dcb7eb3e$export$457c3d6518dd4c6f)(props, {
        labelable: true
    });
    let onFocus = (reactExports.useCallback)((e)=>{
        if (manager.isFocused) {
            // If a focus event bubbled through a portal, reset focus state.
            if (!e.currentTarget.contains(e.target)) manager.setFocused(false);
            return;
        }
        // Focus events can bubble through portals. Ignore these events.
        if (!e.currentTarget.contains(e.target)) return;
        manager.setFocused(true);
    }, [
        manager
    ]);
    // Continue to track collection focused state even if keyboard navigation is disabled
    let navDisabledHandlers = (reactExports.useMemo)(()=>({
            onBlur: collectionProps.onBlur,
            onFocus: onFocus
        }), [
        onFocus,
        collectionProps.onBlur
    ]);
    let hasTabbableChild = ($83013635b024ae3d$export$eac1895992b9f3d6)(ref, {
        isDisabled: state.collection.size !== 0
    });
    let gridProps = ($3ef42575df84b30b$export$9d1611c77c2fe928)(domProps, {
        role: 'grid',
        id: id,
        'aria-multiselectable': manager.selectionMode === 'multiple' ? 'true' : undefined
    }, state.isKeyboardNavigationDisabled ? navDisabledHandlers : collectionProps, // If collection is empty, make sure the grid is tabbable unless there is a child tabbable element.
    state.collection.size === 0 && {
        tabIndex: hasTabbableChild ? -1 : 0
    }, descriptionProps);
    if (isVirtualized) {
        gridProps['aria-rowcount'] = state.collection.size;
        gridProps['aria-colcount'] = state.collection.columnCount;
    }
    ($92599c3fd427b763$export$137e594ef3218a10)({
        getRowText: getRowText
    }, state);
    return {
        gridProps: gridProps
    };
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ function $e45487f8ba1cbdbf$export$d3037f5d3f3e51bf() {
    return {
        rowGroupProps: {
            role: 'rowgroup'
        }
    };
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 


function $4159a7a9cbb0cc18$export$96357d5a73f686fa(props, state, ref) {
    var _node_props, _node_props1;
    let { node: node, isVirtualized: isVirtualized, shouldSelectOnPressUp: shouldSelectOnPressUp, onAction: onAction } = props;
    let { actions: actions } = ($1af922eb41e03c8f$export$e6235c0d09b995d0).get(state);
    let onRowAction = actions.onRowAction ? ()=>actions.onRowAction(node.key) : onAction;
    let { itemProps: itemProps, ...states } = ($880e95eb8b93ba9a$export$ecf600387e221c37)({
        selectionManager: state.selectionManager,
        key: node.key,
        ref: ref,
        isVirtualized: isVirtualized,
        shouldSelectOnPressUp: shouldSelectOnPressUp,
        onAction: onRowAction || (node === null || node === void 0 ? void 0 : (_node_props = node.props) === null || _node_props === void 0 ? void 0 : _node_props.onAction) ? ($ff5963eb1fccf552$export$e08e3b67e392101e)(node === null || node === void 0 ? void 0 : (_node_props1 = node.props) === null || _node_props1 === void 0 ? void 0 : _node_props1.onAction, onRowAction) : undefined,
        isDisabled: state.collection.size === 0
    });
    let isSelected = state.selectionManager.isSelected(node.key);
    let rowProps = {
        role: 'row',
        'aria-selected': state.selectionManager.selectionMode !== 'none' ? isSelected : undefined,
        'aria-disabled': states.isDisabled || undefined,
        ...itemProps
    };
    if (isVirtualized) rowProps['aria-rowindex'] = node.index + 1; // aria-rowindex is 1 based
    return {
        rowProps: rowProps,
        ...states
    };
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 






function $ab90dcbc1b5466d0$export$c7e10bfc0c59f67c(props, state, ref) {
    let { node: node, isVirtualized: isVirtualized, focusMode: focusMode = 'child', shouldSelectOnPressUp: shouldSelectOnPressUp, onAction: onAction } = props;
    let { direction: direction } = ($18f2051aff69b9bf$export$43bb16f9c6d9e3f7)();
    let { keyboardDelegate: keyboardDelegate, actions: { onCellAction: onCellAction } } = ($1af922eb41e03c8f$export$e6235c0d09b995d0).get(state);
    // We need to track the key of the item at the time it was last focused so that we force
    // focus to go to the item when the DOM node is reused for a different item in a virtualizer.
    let keyWhenFocused = (reactExports.useRef)(null);
    // Handles focusing the cell. If there is a focusable child,
    // it is focused, otherwise the cell itself is focused.
    let focus = ()=>{
        let treeWalker = ($9bf71ea28793e738$export$2d6ec8fc375ceafa)(ref.current);
        if (focusMode === 'child') {
            // If focus is already on a focusable child within the cell, early return so we don't shift focus
            if (ref.current.contains(document.activeElement) && ref.current !== document.activeElement) return;
            let focusable = state.selectionManager.childFocusStrategy === 'last' ? $ab90dcbc1b5466d0$var$last(treeWalker) : treeWalker.firstChild();
            if (focusable) {
                ($6a99195332edec8b$export$80f3e147d781571c)(focusable);
                return;
            }
        }
        if (keyWhenFocused.current != null && node.key !== keyWhenFocused.current || !ref.current.contains(document.activeElement)) ($6a99195332edec8b$export$80f3e147d781571c)(ref.current);
    };
    let { itemProps: itemProps, isPressed: isPressed } = ($880e95eb8b93ba9a$export$ecf600387e221c37)({
        selectionManager: state.selectionManager,
        key: node.key,
        ref: ref,
        isVirtualized: isVirtualized,
        focus: focus,
        shouldSelectOnPressUp: shouldSelectOnPressUp,
        onAction: onCellAction ? ()=>onCellAction(node.key) : onAction,
        isDisabled: state.collection.size === 0
    });
    let onKeyDownCapture = (e)=>{
        if (!e.currentTarget.contains(e.target) || state.isKeyboardNavigationDisabled) return;
        let walker = ($9bf71ea28793e738$export$2d6ec8fc375ceafa)(ref.current);
        walker.currentNode = document.activeElement;
        switch(e.key){
            case 'ArrowLeft':
                {
                    // Find the next focusable element within the cell.
                    let focusable = direction === 'rtl' ? walker.nextNode() : walker.previousNode();
                    // Don't focus the cell itself if focusMode is "child"
                    if (focusMode === 'child' && focusable === ref.current) focusable = null;
                    e.preventDefault();
                    e.stopPropagation();
                    if (focusable) {
                        ($6a99195332edec8b$export$80f3e147d781571c)(focusable);
                        ($2f04cbc44ee30ce0$export$c826860796309d1b)(focusable, {
                            containingElement: ($62d8ded9296f3872$export$cfa2225e87938781)(ref.current)
                        });
                    } else {
                        // If there is no next focusable child, then move to the next cell to the left of this one.
                        // This will be handled by useSelectableCollection. However, if there is no cell to the left
                        // of this one, only one column, and the grid doesn't focus rows, then the next key will be the
                        // same as this one. In that case we need to handle focusing either the cell or the first/last
                        // child, depending on the focus mode.
                        let prev = keyboardDelegate.getKeyLeftOf(node.key);
                        if (prev !== node.key) {
                            // We prevent the capturing event from reaching children of the cell, e.g. pickers.
                            // We want arrow keys to navigate to the next cell instead. We need to re-dispatch
                            // the event from a higher parent so it still bubbles and gets handled by useSelectableCollection.
                            ref.current.parentElement.dispatchEvent(new KeyboardEvent(e.nativeEvent.type, e.nativeEvent));
                            break;
                        }
                        if (focusMode === 'cell' && direction === 'rtl') {
                            ($6a99195332edec8b$export$80f3e147d781571c)(ref.current);
                            ($2f04cbc44ee30ce0$export$c826860796309d1b)(ref.current, {
                                containingElement: ($62d8ded9296f3872$export$cfa2225e87938781)(ref.current)
                            });
                        } else {
                            walker.currentNode = ref.current;
                            focusable = direction === 'rtl' ? walker.firstChild() : $ab90dcbc1b5466d0$var$last(walker);
                            if (focusable) {
                                ($6a99195332edec8b$export$80f3e147d781571c)(focusable);
                                ($2f04cbc44ee30ce0$export$c826860796309d1b)(focusable, {
                                    containingElement: ($62d8ded9296f3872$export$cfa2225e87938781)(ref.current)
                                });
                            }
                        }
                    }
                    break;
                }
            case 'ArrowRight':
                {
                    let focusable = direction === 'rtl' ? walker.previousNode() : walker.nextNode();
                    if (focusMode === 'child' && focusable === ref.current) focusable = null;
                    e.preventDefault();
                    e.stopPropagation();
                    if (focusable) {
                        ($6a99195332edec8b$export$80f3e147d781571c)(focusable);
                        ($2f04cbc44ee30ce0$export$c826860796309d1b)(focusable, {
                            containingElement: ($62d8ded9296f3872$export$cfa2225e87938781)(ref.current)
                        });
                    } else {
                        let next = keyboardDelegate.getKeyRightOf(node.key);
                        if (next !== node.key) {
                            // We prevent the capturing event from reaching children of the cell, e.g. pickers.
                            // We want arrow keys to navigate to the next cell instead. We need to re-dispatch
                            // the event from a higher parent so it still bubbles and gets handled by useSelectableCollection.
                            ref.current.parentElement.dispatchEvent(new KeyboardEvent(e.nativeEvent.type, e.nativeEvent));
                            break;
                        }
                        if (focusMode === 'cell' && direction === 'ltr') {
                            ($6a99195332edec8b$export$80f3e147d781571c)(ref.current);
                            ($2f04cbc44ee30ce0$export$c826860796309d1b)(ref.current, {
                                containingElement: ($62d8ded9296f3872$export$cfa2225e87938781)(ref.current)
                            });
                        } else {
                            walker.currentNode = ref.current;
                            focusable = direction === 'rtl' ? $ab90dcbc1b5466d0$var$last(walker) : walker.firstChild();
                            if (focusable) {
                                ($6a99195332edec8b$export$80f3e147d781571c)(focusable);
                                ($2f04cbc44ee30ce0$export$c826860796309d1b)(focusable, {
                                    containingElement: ($62d8ded9296f3872$export$cfa2225e87938781)(ref.current)
                                });
                            }
                        }
                    }
                    break;
                }
            case 'ArrowUp':
            case 'ArrowDown':
                // Prevent this event from reaching cell children, e.g. menu buttons. We want arrow keys to navigate
                // to the cell above/below instead. We need to re-dispatch the event from a higher parent so it still
                // bubbles and gets handled by useSelectableCollection.
                if (!e.altKey && ref.current.contains(e.target)) {
                    e.stopPropagation();
                    e.preventDefault();
                    ref.current.parentElement.dispatchEvent(new KeyboardEvent(e.nativeEvent.type, e.nativeEvent));
                }
                break;
        }
    };
    // Grid cells can have focusable elements inside them. In this case, focus should
    // be marshalled to that element rather than focusing the cell itself.
    let onFocus = (e)=>{
        keyWhenFocused.current = node.key;
        if (e.target !== ref.current) {
            // useSelectableItem only handles setting the focused key when
            // the focused element is the gridcell itself. We also want to
            // set the focused key when a child element receives focus.
            // If focus is currently visible (e.g. the user is navigating with the keyboard),
            // then skip this. We want to restore focus to the previously focused row/cell
            // in that case since the table should act like a single tab stop.
            if (!($507fabe10e71c6fb$export$b9b3dfddab17db27)()) state.selectionManager.setFocusedKey(node.key);
            return;
        }
        // If the cell itself is focused, wait a frame so that focus finishes propagatating
        // up to the tree, and move focus to a focusable child if possible.
        requestAnimationFrame(()=>{
            if (focusMode === 'child' && document.activeElement === ref.current) focus();
        });
    };
    let gridCellProps = ($3ef42575df84b30b$export$9d1611c77c2fe928)(itemProps, {
        role: 'gridcell',
        onKeyDownCapture: onKeyDownCapture,
        onFocus: onFocus
    });
    var _node_colIndex;
    if (isVirtualized) gridCellProps['aria-colindex'] = ((_node_colIndex = node.colIndex) !== null && _node_colIndex !== void 0 ? _node_colIndex : node.index) + 1; // aria-colindex is 1-based
    // When pressing with a pointer and cell selection is not enabled, usePress will be applied to the
    // row rather than the cell. However, when the row is draggable, usePress cannot preventDefault
    // on pointer down, so the browser will try to focus the cell which has a tabIndex applied.
    // To avoid this, remove the tabIndex from the cell briefly on pointer down.
    if (shouldSelectOnPressUp && gridCellProps.tabIndex != null && gridCellProps.onPointerDown == null) gridCellProps.onPointerDown = (e)=>{
        let el = e.currentTarget;
        let tabindex = el.getAttribute('tabindex');
        el.removeAttribute('tabindex');
        requestAnimationFrame(()=>{
            el.setAttribute('tabindex', tabindex);
        });
    };
    return {
        gridCellProps: gridCellProps,
        isPressed: isPressed
    };
}
function $ab90dcbc1b5466d0$var$last(walker) {
    let next;
    let last;
    do {
        last = walker.lastChild();
        if (last) next = last;
    }while (last);
    return next;
}

function $parcel$interopDefault$8(a) {
  return a && a.__esModule ? a.default : a;
}



function $7cb39d07f245a780$export$70e2eed1a92976ad(props, state) {
    let { key: key } = props;
    let manager = state.selectionManager;
    let checkboxId = ($bdb11010cef70236$export$f680877a34711e37)();
    let isDisabled = !state.selectionManager.canSelectItem(key);
    let isSelected = state.selectionManager.isSelected(key);
    // Checkbox should always toggle selection, regardless of selectionBehavior.
    let onChange = ()=>manager.toggleSelection(key);
    const stringFormatter = ($fca6afa0e843324b$export$f12b703ca79dfbb1)((($parcel$interopDefault$8($835c96616a7cb4f9$exports))), '@react-aria/grid');
    return {
        checkboxProps: {
            id: checkboxId,
            'aria-label': stringFormatter.format('select'),
            isSelected: isSelected,
            isDisabled: isDisabled,
            onChange: onChange
        }
    };
}

/*
 * Copyright 2022 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 




function $f47efb0c3a859cf2$export$664f9155035607eb(props, state, ref) {
    let { isVirtualized: isVirtualized, keyboardDelegate: keyboardDelegate, layoutDelegate: layoutDelegate, onAction: onAction, linkBehavior: linkBehavior = 'action', keyboardNavigationBehavior: keyboardNavigationBehavior = 'arrow' } = props;
    if (!props['aria-label'] && !props['aria-labelledby']) console.warn('An aria-label or aria-labelledby prop is required for accessibility.');
    let { listProps: listProps } = ($982254629710d113$export$b95089534ab7c1fd)({
        selectionManager: state.selectionManager,
        collection: state.collection,
        disabledKeys: state.disabledKeys,
        ref: ref,
        keyboardDelegate: keyboardDelegate,
        layoutDelegate: layoutDelegate,
        isVirtualized: isVirtualized,
        selectOnFocus: state.selectionManager.selectionBehavior === 'replace',
        shouldFocusWrap: props.shouldFocusWrap,
        linkBehavior: linkBehavior
    });
    let id = ($bdb11010cef70236$export$f680877a34711e37)(props.id);
    ($ce9b18daab526bbd$export$5b9bb410392e3991).set(state, {
        id: id,
        onAction: onAction,
        linkBehavior: linkBehavior,
        keyboardNavigationBehavior: keyboardNavigationBehavior
    });
    let descriptionProps = ($5b9b5b5723db6ae1$export$be42ebdab07ae4c2)({
        selectionManager: state.selectionManager,
        hasItemActions: !!onAction
    });
    let hasTabbableChild = ($83013635b024ae3d$export$eac1895992b9f3d6)(ref, {
        isDisabled: state.collection.size !== 0
    });
    let domProps = ($65484d02dcb7eb3e$export$457c3d6518dd4c6f)(props, {
        labelable: true
    });
    let gridProps = ($3ef42575df84b30b$export$9d1611c77c2fe928)(domProps, {
        role: 'grid',
        id: id,
        'aria-multiselectable': state.selectionManager.selectionMode === 'multiple' ? 'true' : undefined
    }, // If collection is empty, make sure the grid is tabbable unless there is a child tabbable element.
    state.collection.size === 0 ? {
        tabIndex: hasTabbableChild ? -1 : 0
    } : listProps, descriptionProps);
    if (isVirtualized) {
        gridProps['aria-rowcount'] = state.collection.size;
        gridProps['aria-colcount'] = 1;
    }
    ($92599c3fd427b763$export$137e594ef3218a10)({}, state);
    return {
        gridProps: gridProps
    };
}

/*
 * Copyright 2022 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 







const $4e8b0456ef72939f$var$EXPANSION_KEYS = {
    'expand': {
        ltr: 'ArrowRight',
        rtl: 'ArrowLeft'
    },
    'collapse': {
        ltr: 'ArrowLeft',
        rtl: 'ArrowRight'
    }
};
function $4e8b0456ef72939f$export$9610e69494fadfd2(props, state, ref) {
    var _node_props, _node_props1;
    // Copied from useGridCell + some modifications to make it not so grid specific
    let { node: node, isVirtualized: isVirtualized, shouldSelectOnPressUp: shouldSelectOnPressUp } = props;
    // let stringFormatter = useLocalizedStringFormatter(intlMessages, '@react-aria/gridlist');
    let { direction: direction } = ($18f2051aff69b9bf$export$43bb16f9c6d9e3f7)();
    let { onAction: onAction, linkBehavior: linkBehavior, keyboardNavigationBehavior: keyboardNavigationBehavior } = ($ce9b18daab526bbd$export$5b9bb410392e3991).get(state);
    let descriptionId = ($bdb11010cef70236$export$b4cc09c592e8fdb8)();
    // We need to track the key of the item at the time it was last focused so that we force
    // focus to go to the item when the DOM node is reused for a different item in a virtualizer.
    let keyWhenFocused = (reactExports.useRef)(null);
    let focus = ()=>{
        var _ref_current;
        // Don't shift focus to the row if the active element is a element within the row already
        // (e.g. clicking on a row button)
        if (keyWhenFocused.current != null && node.key !== keyWhenFocused.current || !((_ref_current = ref.current) === null || _ref_current === void 0 ? void 0 : _ref_current.contains(document.activeElement))) ($6a99195332edec8b$export$80f3e147d781571c)(ref.current);
    };
    let treeGridRowProps = {};
    let hasChildRows;
    let hasLink = state.selectionManager.isLink(node.key);
    if (node != null && 'expandedKeys' in state) {
        // TODO: ideally node.hasChildNodes would be a way to tell if a row has child nodes, but the row's contents make it so that value is always
        // true...
        hasChildRows = [
            ...state.collection.getChildren(node.key)
        ].length > 1;
        if (onAction == null && !hasLink && state.selectionManager.selectionMode === 'none' && hasChildRows) onAction = ()=>state.toggleKey(node.key);
        let isExpanded = hasChildRows ? state.expandedKeys.has(node.key) : undefined;
        treeGridRowProps = {
            'aria-expanded': isExpanded,
            'aria-level': node.level + 1,
            'aria-posinset': (node === null || node === void 0 ? void 0 : node.index) + 1,
            'aria-setsize': node.level > 0 ? ($c5a24bc478652b5f$export$7475b2c64539e4cf)(state.collection.getChildren(node === null || node === void 0 ? void 0 : node.parentKey)).index + 1 : [
                ...state.collection
            ].filter((row)=>row.level === 0).at(-1).index + 1
        };
    }
    let { itemProps: itemProps, ...itemStates } = ($880e95eb8b93ba9a$export$ecf600387e221c37)({
        selectionManager: state.selectionManager,
        key: node.key,
        ref: ref,
        isVirtualized: isVirtualized,
        shouldSelectOnPressUp: shouldSelectOnPressUp,
        onAction: onAction || ((_node_props = node.props) === null || _node_props === void 0 ? void 0 : _node_props.onAction) ? ($ff5963eb1fccf552$export$e08e3b67e392101e)((_node_props1 = node.props) === null || _node_props1 === void 0 ? void 0 : _node_props1.onAction, onAction ? ()=>onAction(node.key) : undefined) : undefined,
        focus: focus,
        linkBehavior: linkBehavior
    });
    let onKeyDown = (e)=>{
        if (!e.currentTarget.contains(e.target)) return;
        let walker = ($9bf71ea28793e738$export$2d6ec8fc375ceafa)(ref.current);
        walker.currentNode = document.activeElement;
        if ('expandedKeys' in state && document.activeElement === ref.current) {
            if (e.key === $4e8b0456ef72939f$var$EXPANSION_KEYS['expand'][direction] && state.selectionManager.focusedKey === node.key && hasChildRows && !state.expandedKeys.has(node.key)) {
                state.toggleKey(node.key);
                e.stopPropagation();
                return;
            } else if (e.key === $4e8b0456ef72939f$var$EXPANSION_KEYS['collapse'][direction] && state.selectionManager.focusedKey === node.key && hasChildRows && state.expandedKeys.has(node.key)) {
                state.toggleKey(node.key);
                e.stopPropagation();
                return;
            }
        }
        switch(e.key){
            case 'ArrowLeft':
                if (keyboardNavigationBehavior === 'arrow') {
                    // Find the next focusable element within the row.
                    let focusable = direction === 'rtl' ? walker.nextNode() : walker.previousNode();
                    if (focusable) {
                        e.preventDefault();
                        e.stopPropagation();
                        ($6a99195332edec8b$export$80f3e147d781571c)(focusable);
                        ($2f04cbc44ee30ce0$export$c826860796309d1b)(focusable, {
                            containingElement: ($62d8ded9296f3872$export$cfa2225e87938781)(ref.current)
                        });
                    } else {
                        // If there is no next focusable child, then return focus back to the row
                        e.preventDefault();
                        e.stopPropagation();
                        if (direction === 'rtl') {
                            ($6a99195332edec8b$export$80f3e147d781571c)(ref.current);
                            ($2f04cbc44ee30ce0$export$c826860796309d1b)(ref.current, {
                                containingElement: ($62d8ded9296f3872$export$cfa2225e87938781)(ref.current)
                            });
                        } else {
                            walker.currentNode = ref.current;
                            let lastElement = $4e8b0456ef72939f$var$last(walker);
                            if (lastElement) {
                                ($6a99195332edec8b$export$80f3e147d781571c)(lastElement);
                                ($2f04cbc44ee30ce0$export$c826860796309d1b)(lastElement, {
                                    containingElement: ($62d8ded9296f3872$export$cfa2225e87938781)(ref.current)
                                });
                            }
                        }
                    }
                }
                break;
            case 'ArrowRight':
                if (keyboardNavigationBehavior === 'arrow') {
                    let focusable = direction === 'rtl' ? walker.previousNode() : walker.nextNode();
                    if (focusable) {
                        e.preventDefault();
                        e.stopPropagation();
                        ($6a99195332edec8b$export$80f3e147d781571c)(focusable);
                        ($2f04cbc44ee30ce0$export$c826860796309d1b)(focusable, {
                            containingElement: ($62d8ded9296f3872$export$cfa2225e87938781)(ref.current)
                        });
                    } else {
                        e.preventDefault();
                        e.stopPropagation();
                        if (direction === 'ltr') {
                            ($6a99195332edec8b$export$80f3e147d781571c)(ref.current);
                            ($2f04cbc44ee30ce0$export$c826860796309d1b)(ref.current, {
                                containingElement: ($62d8ded9296f3872$export$cfa2225e87938781)(ref.current)
                            });
                        } else {
                            walker.currentNode = ref.current;
                            let lastElement = $4e8b0456ef72939f$var$last(walker);
                            if (lastElement) {
                                ($6a99195332edec8b$export$80f3e147d781571c)(lastElement);
                                ($2f04cbc44ee30ce0$export$c826860796309d1b)(lastElement, {
                                    containingElement: ($62d8ded9296f3872$export$cfa2225e87938781)(ref.current)
                                });
                            }
                        }
                    }
                }
                break;
            case 'ArrowUp':
            case 'ArrowDown':
                // Prevent this event from reaching row children, e.g. menu buttons. We want arrow keys to navigate
                // to the row above/below instead. We need to re-dispatch the event from a higher parent so it still
                // bubbles and gets handled by useSelectableCollection.
                if (!e.altKey && ref.current.contains(e.target)) {
                    e.stopPropagation();
                    e.preventDefault();
                    ref.current.parentElement.dispatchEvent(new KeyboardEvent(e.nativeEvent.type, e.nativeEvent));
                }
                break;
            case 'Tab':
                if (keyboardNavigationBehavior === 'tab') {
                    // If there is another focusable element within this item, stop propagation so the tab key
                    // is handled by the browser and not by useSelectableCollection (which would take us out of the list).
                    let walker = ($9bf71ea28793e738$export$2d6ec8fc375ceafa)(ref.current, {
                        tabbable: true
                    });
                    walker.currentNode = document.activeElement;
                    let next = e.shiftKey ? walker.previousNode() : walker.nextNode();
                    if (next) e.stopPropagation();
                }
        }
    };
    let onFocus = (e)=>{
        keyWhenFocused.current = node.key;
        if (e.target !== ref.current) {
            // useSelectableItem only handles setting the focused key when
            // the focused element is the row itself. We also want to
            // set the focused key when a child element receives focus.
            // If focus is currently visible (e.g. the user is navigating with the keyboard),
            // then skip this. We want to restore focus to the previously focused row
            // in that case since the list should act like a single tab stop.
            if (!($507fabe10e71c6fb$export$b9b3dfddab17db27)()) state.selectionManager.setFocusedKey(node.key);
            return;
        }
    };
    let syntheticLinkProps = ($ea8dcbcb9ea1b556$export$bdc77b0c0a3a85d6)(node.props);
    let linkProps = itemStates.hasAction ? syntheticLinkProps : {};
    // TODO: re-add when we get translations and fix this for iOS VO
    // let rowAnnouncement;
    // if (onAction) {
    //   rowAnnouncement = stringFormatter.format('hasActionAnnouncement');
    // } else if (hasLink) {
    //   rowAnnouncement = stringFormatter.format('hasLinkAnnouncement', {
    //     link: node.props.href
    //   });
    // }
    let rowProps = ($3ef42575df84b30b$export$9d1611c77c2fe928)(itemProps, linkProps, {
        role: 'row',
        onKeyDownCapture: onKeyDown,
        onFocus: onFocus,
        // 'aria-label': [(node.textValue || undefined), rowAnnouncement].filter(Boolean).join(', '),
        'aria-label': node.textValue || undefined,
        'aria-selected': state.selectionManager.canSelectItem(node.key) ? state.selectionManager.isSelected(node.key) : undefined,
        'aria-disabled': state.selectionManager.isDisabled(node.key) || undefined,
        'aria-labelledby': descriptionId && node.textValue ? `${($ce9b18daab526bbd$export$f45c25170b9a99c2)(state, node.key)} ${descriptionId}` : undefined,
        id: ($ce9b18daab526bbd$export$f45c25170b9a99c2)(state, node.key)
    });
    if (isVirtualized) rowProps['aria-rowindex'] = node.index + 1;
    let gridCellProps = {
        role: 'gridcell',
        'aria-colindex': 1
    };
    // TODO: should isExpanded and hasChildRows be a item state that gets returned by the hook?
    return {
        rowProps: {
            ...($3ef42575df84b30b$export$9d1611c77c2fe928)(rowProps, treeGridRowProps)
        },
        gridCellProps: gridCellProps,
        descriptionProps: {
            id: descriptionId
        },
        ...itemStates
    };
}
function $4e8b0456ef72939f$var$last(walker) {
    let next;
    let last;
    do {
        last = walker.lastChild();
        if (last) next = last;
    }while (last);
    return next;
}

/*
 * Copyright 2022 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 

function $e52ffc04a4adbd52$export$e29f2573fabbf7b9(props, state) {
    let { key: key } = props;
    const { checkboxProps: checkboxProps } = ($7cb39d07f245a780$export$70e2eed1a92976ad)(props, state);
    return {
        checkboxProps: {
            ...checkboxProps,
            'aria-labelledby': `${checkboxProps.id} ${($ce9b18daab526bbd$export$f45c25170b9a99c2)(state, key)}`
        }
    };
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 


function $204d9ebcedfb8806$export$ed5abd763a836edc(props) {
    let { value: value = 0, minValue: minValue = 0, maxValue: maxValue = 100, valueLabel: valueLabel, isIndeterminate: isIndeterminate, formatOptions: formatOptions = {
        style: 'percent'
    } } = props;
    let domProps = ($65484d02dcb7eb3e$export$457c3d6518dd4c6f)(props, {
        labelable: true
    });
    let { labelProps: labelProps, fieldProps: fieldProps } = ($d191a55c9702f145$export$8467354a121f1b9f)({
        ...props,
        // Progress bar is not an HTML input element so it
        // shouldn't be labeled by a <label> element.
        labelElementType: 'span'
    });
    value = ($9446cca9a3875146$export$7d15b64cf5a3a4c4)(value, minValue, maxValue);
    let percentage = (value - minValue) / (maxValue - minValue);
    let formatter = ($a916eb452884faea$export$b7a616150fdb9f44)(formatOptions);
    if (!isIndeterminate && !valueLabel) {
        let valueToFormat = formatOptions.style === 'percent' ? percentage : value;
        valueLabel = formatter.format(valueToFormat);
    }
    return {
        progressBarProps: ($3ef42575df84b30b$export$9d1611c77c2fe928)(domProps, {
            ...fieldProps,
            'aria-valuenow': isIndeterminate ? undefined : value,
            'aria-valuemin': minValue,
            'aria-valuemax': maxValue,
            'aria-valuetext': isIndeterminate ? undefined : valueLabel,
            role: 'progressbar'
        }),
        labelProps: labelProps
    };
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 
function $0002d7e1d16de204$export$e969dbfa146870ff(props) {
    let { progressBarProps: progressBarProps, labelProps: labelProps } = ($204d9ebcedfb8806$export$ed5abd763a836edc)(props);
    return {
        meterProps: {
            ...progressBarProps,
            // Use the meter role if available, but fall back to progressbar if not
            // Chrome currently falls back from meter automatically, and Firefox
            // does not support meter at all. Safari 13+ seems to support meter properly.
            // https://bugs.chromium.org/p/chromium/issues/detail?id=944542
            // https://bugzilla.mozilla.org/show_bug.cgi?id=1460378
            role: 'meter progressbar'
        },
        labelProps: labelProps
    };
}

var $fb78e0f6ab6349ed$exports = {};
$fb78e0f6ab6349ed$exports = {
    "decrease": (args)=>`\u{62E}\u{641}\u{636} ${args.fieldLabel}`,
    "increase": (args)=>`\u{632}\u{64A}\u{627}\u{62F}\u{629} ${args.fieldLabel}`,
    "numberField": `\u{62D}\u{642}\u{644} \u{631}\u{642}\u{645}\u{64A}`
};

var $2776acdd9959a647$exports = {};
$2776acdd9959a647$exports = {
    "decrease": (args)=>`\u{41D}\u{430}\u{43C}\u{430}\u{43B}\u{44F}\u{432}\u{430}\u{43D}\u{435} ${args.fieldLabel}`,
    "increase": (args)=>`\u{423}\u{441}\u{438}\u{43B}\u{432}\u{430}\u{43D}\u{435} ${args.fieldLabel}`,
    "numberField": `\u{41D}\u{43E}\u{43C}\u{435}\u{440} \u{43D}\u{430} \u{43F}\u{43E}\u{43B}\u{435}\u{442}\u{43E}`
};

var $741954410a365ad3$exports = {};
$741954410a365ad3$exports = {
    "decrease": (args)=>`Sn\xed\u{17E}it ${args.fieldLabel}`,
    "increase": (args)=>`Zv\xfd\u{161}it ${args.fieldLabel}`,
    "numberField": `\u{10C}\xedseln\xe9 pole`
};

var $8321ed0f8ab642f0$exports = {};
$8321ed0f8ab642f0$exports = {
    "decrease": (args)=>`Reducer ${args.fieldLabel}`,
    "increase": (args)=>`\xd8g ${args.fieldLabel}`,
    "numberField": `Talfelt`
};

var $92978e0c4ecafa32$exports = {};
$92978e0c4ecafa32$exports = {
    "decrease": (args)=>`${args.fieldLabel} verringern`,
    "increase": (args)=>`${args.fieldLabel} erh\xf6hen`,
    "numberField": `Nummernfeld`
};

var $ac5ff71962864a84$exports = {};
$ac5ff71962864a84$exports = {
    "decrease": (args)=>`\u{39C}\u{3B5}\u{3AF}\u{3C9}\u{3C3}\u{3B7} ${args.fieldLabel}`,
    "increase": (args)=>`\u{391}\u{3CD}\u{3BE}\u{3B7}\u{3C3}\u{3B7} ${args.fieldLabel}`,
    "numberField": `\u{3A0}\u{3B5}\u{3B4}\u{3AF}\u{3BF} \u{3B1}\u{3C1}\u{3B9}\u{3B8}\u{3BC}\u{3BF}\u{3CD}`
};

var $efe4685e2440d8be$exports = {};
$efe4685e2440d8be$exports = {
    "decrease": (args)=>`Decrease ${args.fieldLabel}`,
    "increase": (args)=>`Increase ${args.fieldLabel}`,
    "numberField": `Number field`
};

var $e50a9a48739b90e1$exports = {};
$e50a9a48739b90e1$exports = {
    "decrease": (args)=>`Reducir ${args.fieldLabel}`,
    "increase": (args)=>`Aumentar ${args.fieldLabel}`,
    "numberField": `Campo de n\xfamero`
};

var $6e0d5294ecbb8ab6$exports = {};
$6e0d5294ecbb8ab6$exports = {
    "decrease": (args)=>`V\xe4henda ${args.fieldLabel}`,
    "increase": (args)=>`Suurenda ${args.fieldLabel}`,
    "numberField": `Numbri v\xe4li`
};

var $e7129d65f607f77f$exports = {};
$e7129d65f607f77f$exports = {
    "decrease": (args)=>`V\xe4henn\xe4 ${args.fieldLabel}`,
    "increase": (args)=>`Lis\xe4\xe4 ${args.fieldLabel}`,
    "numberField": `Numerokentt\xe4`
};

var $d72adf5b20573e34$exports = {};
$d72adf5b20573e34$exports = {
    "decrease": (args)=>`Diminuer ${args.fieldLabel}`,
    "increase": (args)=>`Augmenter ${args.fieldLabel}`,
    "numberField": `Champ de nombre`
};

var $a25c707e88b844a7$exports = {};
$a25c707e88b844a7$exports = {
    "decrease": (args)=>`\u{5D4}\u{5E7}\u{5D8}\u{5DF} ${args.fieldLabel}`,
    "increase": (args)=>`\u{5D4}\u{5D2}\u{5D3}\u{5DC} ${args.fieldLabel}`,
    "numberField": `\u{5E9}\u{5D3}\u{5D4} \u{5DE}\u{5E1}\u{5E4}\u{5E8}`
};

var $69b41140b9a4ca54$exports = {};
$69b41140b9a4ca54$exports = {
    "decrease": (args)=>`Smanji ${args.fieldLabel}`,
    "increase": (args)=>`Pove\u{107}aj ${args.fieldLabel}`,
    "numberField": `Polje broja`
};

var $81dab28f37f59d1a$exports = {};
$81dab28f37f59d1a$exports = {
    "decrease": (args)=>`${args.fieldLabel} cs\xf6kkent\xe9se`,
    "increase": (args)=>`${args.fieldLabel} n\xf6vel\xe9se`,
    "numberField": `Sz\xe1mmez\u{151}`
};

var $866555b31f2d7711$exports = {};
$866555b31f2d7711$exports = {
    "decrease": (args)=>`Riduci ${args.fieldLabel}`,
    "increase": (args)=>`Aumenta ${args.fieldLabel}`,
    "numberField": `Campo numero`
};

var $dafcd55d52b9d371$exports = {};
$dafcd55d52b9d371$exports = {
    "decrease": (args)=>`${args.fieldLabel}\u{3092}\u{7E2E}\u{5C0F}`,
    "increase": (args)=>`${args.fieldLabel}\u{3092}\u{62E1}\u{5927}`,
    "numberField": `\u{6570}\u{5024}\u{30D5}\u{30A3}\u{30FC}\u{30EB}\u{30C9}`
};

var $f090c1f8c5da0145$exports = {};
$f090c1f8c5da0145$exports = {
    "decrease": (args)=>`${args.fieldLabel} \u{AC10}\u{C18C}`,
    "increase": (args)=>`${args.fieldLabel} \u{C99D}\u{AC00}`,
    "numberField": `\u{BC88}\u{D638} \u{D544}\u{B4DC}`
};

var $6f10f3a13360a75c$exports = {};
$6f10f3a13360a75c$exports = {
    "decrease": (args)=>`Suma\u{17E}inti ${args.fieldLabel}`,
    "increase": (args)=>`Padidinti ${args.fieldLabel}`,
    "numberField": `Numerio laukas`
};

var $47432cefd4b7bd1b$exports = {};
$47432cefd4b7bd1b$exports = {
    "decrease": (args)=>`Samazin\u{101}\u{161}ana ${args.fieldLabel}`,
    "increase": (args)=>`Palielin\u{101}\u{161}ana ${args.fieldLabel}`,
    "numberField": `Skait\u{13C}u lauks`
};

var $dc578a950a2bf23d$exports = {};
$dc578a950a2bf23d$exports = {
    "decrease": (args)=>`Reduser ${args.fieldLabel}`,
    "increase": (args)=>`\xd8k ${args.fieldLabel}`,
    "numberField": `Tallfelt`
};

var $353f1bfca4dc395a$exports = {};
$353f1bfca4dc395a$exports = {
    "decrease": (args)=>`${args.fieldLabel} verlagen`,
    "increase": (args)=>`${args.fieldLabel} verhogen`,
    "numberField": `Getalveld`
};

var $241bc0bbd870e982$exports = {};
$241bc0bbd870e982$exports = {
    "decrease": (args)=>`Zmniejsz ${args.fieldLabel}`,
    "increase": (args)=>`Zwi\u{119}ksz ${args.fieldLabel}`,
    "numberField": `Pole numeru`
};

var $da3005c7bd72b0a8$exports = {};
$da3005c7bd72b0a8$exports = {
    "decrease": (args)=>`Diminuir ${args.fieldLabel}`,
    "increase": (args)=>`Aumentar ${args.fieldLabel}`,
    "numberField": `Campo de n\xfamero`
};

var $cf48bfc540882310$exports = {};
$cf48bfc540882310$exports = {
    "decrease": (args)=>`Diminuir ${args.fieldLabel}`,
    "increase": (args)=>`Aumentar ${args.fieldLabel}`,
    "numberField": `Campo num\xe9rico`
};

var $b63a28c481ab9ee3$exports = {};
$b63a28c481ab9ee3$exports = {
    "decrease": (args)=>`Sc\u{103}dere ${args.fieldLabel}`,
    "increase": (args)=>`Cre\u{219}tere ${args.fieldLabel}`,
    "numberField": `C\xe2mp numeric`
};

var $19f9df95c2464ab6$exports = {};
$19f9df95c2464ab6$exports = {
    "decrease": (args)=>`\u{423}\u{43C}\u{435}\u{43D}\u{44C}\u{448}\u{435}\u{43D}\u{438}\u{435} ${args.fieldLabel}`,
    "increase": (args)=>`\u{423}\u{432}\u{435}\u{43B}\u{438}\u{447}\u{435}\u{43D}\u{438}\u{435} ${args.fieldLabel}`,
    "numberField": `\u{427}\u{438}\u{441}\u{43B}\u{43E}\u{432}\u{43E}\u{435} \u{43F}\u{43E}\u{43B}\u{435}`
};

var $b272932a685e8482$exports = {};
$b272932a685e8482$exports = {
    "decrease": (args)=>`Zn\xed\u{17E}i\u{165} ${args.fieldLabel}`,
    "increase": (args)=>`Zv\xfd\u{161}i\u{165} ${args.fieldLabel}`,
    "numberField": `\u{10C}\xedseln\xe9 pole`
};

var $cbaf8b5b61f9e544$exports = {};
$cbaf8b5b61f9e544$exports = {
    "decrease": (args)=>`Upadati ${args.fieldLabel}`,
    "increase": (args)=>`Pove\u{10D}ajte ${args.fieldLabel}`,
    "numberField": `\u{160}tevil\u{10D}no polje`
};

var $e0a3af6ac1449b2f$exports = {};
$e0a3af6ac1449b2f$exports = {
    "decrease": (args)=>`Smanji ${args.fieldLabel}`,
    "increase": (args)=>`Pove\u{107}aj ${args.fieldLabel}`,
    "numberField": `Polje broja`
};

var $71e167d2458a6019$exports = {};
$71e167d2458a6019$exports = {
    "decrease": (args)=>`Minska ${args.fieldLabel}`,
    "increase": (args)=>`\xd6ka ${args.fieldLabel}`,
    "numberField": `Nummerf\xe4lt`
};

var $3719245abc082946$exports = {};
$3719245abc082946$exports = {
    "decrease": (args)=>`${args.fieldLabel} azalt`,
    "increase": (args)=>`${args.fieldLabel} artt\u{131}r`,
    "numberField": `Say\u{131} alan\u{131}`
};

var $2ccc589e2f51824d$exports = {};
$2ccc589e2f51824d$exports = {
    "decrease": (args)=>`\u{417}\u{43C}\u{435}\u{43D}\u{448}\u{438}\u{442}\u{438} ${args.fieldLabel}`,
    "increase": (args)=>`\u{417}\u{431}\u{456}\u{43B}\u{44C}\u{448}\u{438}\u{442}\u{438} ${args.fieldLabel}`,
    "numberField": `\u{41F}\u{43E}\u{43B}\u{435} \u{43D}\u{43E}\u{43C}\u{435}\u{440}\u{430}`
};

var $e1103cb9b4c13942$exports = {};
$e1103cb9b4c13942$exports = {
    "decrease": (args)=>`\u{964D}\u{4F4E} ${args.fieldLabel}`,
    "increase": (args)=>`\u{63D0}\u{9AD8} ${args.fieldLabel}`,
    "numberField": `\u{6570}\u{5B57}\u{5B57}\u{6BB5}`
};

var $448607634f80dccb$exports = {};
$448607634f80dccb$exports = {
    "decrease": (args)=>`\u{7E2E}\u{5C0F} ${args.fieldLabel}`,
    "increase": (args)=>`\u{653E}\u{5927} ${args.fieldLabel}`,
    "numberField": `\u{6578}\u{5B57}\u{6B04}\u{4F4D}`
};

var $280a227d7cb94b92$exports = {};


































$280a227d7cb94b92$exports = {
    "ar-AE": $fb78e0f6ab6349ed$exports,
    "bg-BG": $2776acdd9959a647$exports,
    "cs-CZ": $741954410a365ad3$exports,
    "da-DK": $8321ed0f8ab642f0$exports,
    "de-DE": $92978e0c4ecafa32$exports,
    "el-GR": $ac5ff71962864a84$exports,
    "en-US": $efe4685e2440d8be$exports,
    "es-ES": $e50a9a48739b90e1$exports,
    "et-EE": $6e0d5294ecbb8ab6$exports,
    "fi-FI": $e7129d65f607f77f$exports,
    "fr-FR": $d72adf5b20573e34$exports,
    "he-IL": $a25c707e88b844a7$exports,
    "hr-HR": $69b41140b9a4ca54$exports,
    "hu-HU": $81dab28f37f59d1a$exports,
    "it-IT": $866555b31f2d7711$exports,
    "ja-JP": $dafcd55d52b9d371$exports,
    "ko-KR": $f090c1f8c5da0145$exports,
    "lt-LT": $6f10f3a13360a75c$exports,
    "lv-LV": $47432cefd4b7bd1b$exports,
    "nb-NO": $dc578a950a2bf23d$exports,
    "nl-NL": $353f1bfca4dc395a$exports,
    "pl-PL": $241bc0bbd870e982$exports,
    "pt-BR": $da3005c7bd72b0a8$exports,
    "pt-PT": $cf48bfc540882310$exports,
    "ro-RO": $b63a28c481ab9ee3$exports,
    "ru-RU": $19f9df95c2464ab6$exports,
    "sk-SK": $b272932a685e8482$exports,
    "sl-SI": $cbaf8b5b61f9e544$exports,
    "sr-SP": $e0a3af6ac1449b2f$exports,
    "sv-SE": $71e167d2458a6019$exports,
    "tr-TR": $3719245abc082946$exports,
    "uk-UA": $2ccc589e2f51824d$exports,
    "zh-CN": $e1103cb9b4c13942$exports,
    "zh-TW": $448607634f80dccb$exports
};

function $parcel$interopDefault$7(a) {
  return a && a.__esModule ? a.default : a;
}
/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 







function $81397a9303501bda$export$23f548e970bdf099(props, state, inputRef) {
    let { id: id, decrementAriaLabel: decrementAriaLabel, incrementAriaLabel: incrementAriaLabel, isDisabled: isDisabled, isReadOnly: isReadOnly, isRequired: isRequired, minValue: minValue, maxValue: maxValue, autoFocus: autoFocus, label: label, formatOptions: formatOptions, onBlur: onBlur = ()=>{}, onFocus: onFocus, onFocusChange: onFocusChange, onKeyDown: onKeyDown, onKeyUp: onKeyUp, description: description, errorMessage: errorMessage, isWheelDisabled: isWheelDisabled, ...otherProps } = props;
    let { increment: increment, incrementToMax: incrementToMax, decrement: decrement, decrementToMin: decrementToMin, numberValue: numberValue, inputValue: inputValue, commit: commit, commitValidation: commitValidation } = state;
    const stringFormatter = ($fca6afa0e843324b$export$f12b703ca79dfbb1)((($parcel$interopDefault$7($280a227d7cb94b92$exports))), '@react-aria/numberfield');
    let inputId = ($bdb11010cef70236$export$f680877a34711e37)(id);
    let { focusProps: focusProps } = ($a1ea59d68270f0dd$export$f8168d8dd8fd66e6)({
        onBlur () {
            // Set input value to normalized valid value
            commit();
        }
    });
    let numberFormatter = ($a916eb452884faea$export$b7a616150fdb9f44)(formatOptions);
    let intlOptions = (reactExports.useMemo)(()=>numberFormatter.resolvedOptions(), [
        numberFormatter
    ]);
    // Replace negative textValue formatted using currencySign: 'accounting'
    // with a textValue that can be announced using a minus sign.
    let textValueFormatter = ($a916eb452884faea$export$b7a616150fdb9f44)({
        ...formatOptions,
        currencySign: undefined
    });
    let textValue = (reactExports.useMemo)(()=>isNaN(numberValue) ? '' : textValueFormatter.format(numberValue), [
        textValueFormatter,
        numberValue
    ]);
    let { spinButtonProps: spinButtonProps, incrementButtonProps: incButtonProps, decrementButtonProps: decButtonProps } = ($d2e8511e6f209edf$export$e908e06f4b8e3402)({
        isDisabled: isDisabled,
        isReadOnly: isReadOnly,
        isRequired: isRequired,
        maxValue: maxValue,
        minValue: minValue,
        onIncrement: increment,
        onIncrementToMax: incrementToMax,
        onDecrement: decrement,
        onDecrementToMin: decrementToMin,
        value: numberValue,
        textValue: textValue
    });
    let [focusWithin, setFocusWithin] = (reactExports.useState)(false);
    let { focusWithinProps: focusWithinProps } = ($9ab94262bd0047c7$export$420e68273165f4ec)({
        isDisabled: isDisabled,
        onFocusWithinChange: setFocusWithin
    });
    let onWheel = (reactExports.useCallback)((e)=>{
        // if on a trackpad, users can scroll in both X and Y at once, check the magnitude of the change
        // if it's mostly in the X direction, then just return, the user probably doesn't mean to inc/dec
        // this isn't perfect, events come in fast with small deltas and a part of the scroll may give a false indication
        // especially if the user is scrolling near 45deg
        if (Math.abs(e.deltaY) <= Math.abs(e.deltaX)) return;
        if (e.deltaY > 0) increment();
        else if (e.deltaY < 0) decrement();
    }, [
        decrement,
        increment
    ]);
    // If the input isn't supposed to receive input, disable scrolling.
    let scrollingDisabled = isWheelDisabled || isDisabled || isReadOnly || !focusWithin;
    ($7d0a636d7a4dcefd$export$2123ff2b87c81ca)({
        onScroll: onWheel,
        isDisabled: scrollingDisabled
    }, inputRef);
    var _intlOptions_maximumFractionDigits;
    // The inputMode attribute influences the software keyboard that is shown on touch devices.
    // Browsers and operating systems are quite inconsistent about what keys are available, however.
    // We choose between numeric and decimal based on whether we allow negative and fractional numbers,
    // and based on testing on various devices to determine what keys are available in each inputMode.
    let hasDecimals = ((_intlOptions_maximumFractionDigits = intlOptions.maximumFractionDigits) !== null && _intlOptions_maximumFractionDigits !== void 0 ? _intlOptions_maximumFractionDigits : 0) > 0;
    let hasNegative = state.minValue === undefined || isNaN(state.minValue) || state.minValue < 0;
    let inputMode = 'numeric';
    if (($c87311424ea30a05$export$186c6964ca17d99)()) {
        // iPhone doesn't have a minus sign in either numeric or decimal.
        // Note this is only for iPhone, not iPad, which always has both
        // minus and decimal in numeric.
        if (hasNegative) inputMode = 'text';
        else if (hasDecimals) inputMode = 'decimal';
    } else if (($c87311424ea30a05$export$a11b0059900ceec8)()) {
        // Android numeric has both a decimal point and minus key.
        // decimal does not have a minus key.
        if (hasNegative) inputMode = 'numeric';
        else if (hasDecimals) inputMode = 'decimal';
    }
    let onChange = (value)=>{
        if (state.validate(value)) state.setInputValue(value);
    };
    let domProps = ($65484d02dcb7eb3e$export$457c3d6518dd4c6f)(props);
    let onKeyDownEnter = (reactExports.useCallback)((e)=>{
        if (e.key === 'Enter') {
            commit();
            commitValidation();
        } else e.continuePropagation();
    }, [
        commit,
        commitValidation
    ]);
    let { isInvalid: isInvalid, validationErrors: validationErrors, validationDetails: validationDetails } = state.displayValidation;
    let { labelProps: labelProps, inputProps: textFieldProps, descriptionProps: descriptionProps, errorMessageProps: errorMessageProps } = ($d841c8010a73d545$export$4f384c9210e583c3)({
        ...otherProps,
        ...domProps,
        name: undefined,
        label: label,
        autoFocus: autoFocus,
        isDisabled: isDisabled,
        isReadOnly: isReadOnly,
        isRequired: isRequired,
        validate: undefined,
        [($e5be200c675c3b3a$export$a763b9476acd3eb)]: state,
        value: inputValue,
        defaultValue: undefined,
        autoComplete: 'off',
        'aria-label': props['aria-label'] || undefined,
        'aria-labelledby': props['aria-labelledby'] || undefined,
        id: inputId,
        type: 'text',
        inputMode: inputMode,
        onChange: onChange,
        onBlur: onBlur,
        onFocus: onFocus,
        onFocusChange: onFocusChange,
        onKeyDown: (reactExports.useMemo)(()=>($ff5963eb1fccf552$export$e08e3b67e392101e)(onKeyDownEnter, onKeyDown), [
            onKeyDownEnter,
            onKeyDown
        ]),
        onKeyUp: onKeyUp,
        description: description,
        errorMessage: errorMessage
    }, state, inputRef);
    ($99facab73266f662$export$5add1d006293d136)(inputRef, state.numberValue, state.setNumberValue);
    let inputProps = ($3ef42575df84b30b$export$9d1611c77c2fe928)(spinButtonProps, focusProps, textFieldProps, {
        // override the spinbutton role, we can't focus a spin button with VO
        role: null,
        // ignore aria-roledescription on iOS so that required state will announce when it is present
        'aria-roledescription': !($c87311424ea30a05$export$fedb369cb70207f1)() ? stringFormatter.format('numberField') : null,
        'aria-valuemax': null,
        'aria-valuemin': null,
        'aria-valuenow': null,
        'aria-valuetext': null,
        autoCorrect: 'off',
        spellCheck: 'false'
    });
    if (props.validationBehavior === 'native') inputProps['aria-required'] = undefined;
    let onButtonPressStart = (e)=>{
        var _inputRef_current;
        // If focus is already on the input, keep it there so we don't hide the
        // software keyboard when tapping the increment/decrement buttons.
        if (document.activeElement === inputRef.current) return;
        // Otherwise, when using a mouse, move focus to the input.
        // On touch, or with a screen reader, focus the button so that the software
        // keyboard does not appear and the screen reader cursor is not moved off the button.
        if (e.pointerType === 'mouse') (_inputRef_current = inputRef.current) === null || _inputRef_current === void 0 ? void 0 : _inputRef_current.focus();
        else e.target.focus();
    };
    // Determine the label for the increment and decrement buttons. There are 4 cases:
    //
    // 1. With a visible label that is a string: aria-label: `Increase ${props.label}`
    // 2. With a visible label that is JSX: aria-label: 'Increase', aria-labelledby: '${incrementId} ${labelId}'
    // 3. With an aria-label: aria-label: `Increase ${props['aria-label']}`
    // 4. With an aria-labelledby: aria-label: 'Increase', aria-labelledby: `${incrementId} ${props['aria-labelledby']}`
    //
    // (1) and (2) could possibly be combined and both use aria-labelledby. However, placing the label in
    // the aria-label string rather than using aria-labelledby gives more flexibility to translators to change
    // the order or add additional words around the label if needed.
    let fieldLabel = props['aria-label'] || (typeof props.label === 'string' ? props.label : '');
    let ariaLabelledby;
    if (!fieldLabel) ariaLabelledby = props.label != null ? labelProps.id : props['aria-labelledby'];
    let incrementId = ($bdb11010cef70236$export$f680877a34711e37)();
    let decrementId = ($bdb11010cef70236$export$f680877a34711e37)();
    let incrementButtonProps = ($3ef42575df84b30b$export$9d1611c77c2fe928)(incButtonProps, {
        'aria-label': incrementAriaLabel || stringFormatter.format('increase', {
            fieldLabel: fieldLabel
        }).trim(),
        id: ariaLabelledby && !incrementAriaLabel ? incrementId : null,
        'aria-labelledby': ariaLabelledby && !incrementAriaLabel ? `${incrementId} ${ariaLabelledby}` : null,
        'aria-controls': inputId,
        excludeFromTabOrder: true,
        preventFocusOnPress: true,
        allowFocusWhenDisabled: true,
        isDisabled: !state.canIncrement,
        onPressStart: onButtonPressStart
    });
    let decrementButtonProps = ($3ef42575df84b30b$export$9d1611c77c2fe928)(decButtonProps, {
        'aria-label': decrementAriaLabel || stringFormatter.format('decrease', {
            fieldLabel: fieldLabel
        }).trim(),
        id: ariaLabelledby && !decrementAriaLabel ? decrementId : null,
        'aria-labelledby': ariaLabelledby && !decrementAriaLabel ? `${decrementId} ${ariaLabelledby}` : null,
        'aria-controls': inputId,
        excludeFromTabOrder: true,
        preventFocusOnPress: true,
        allowFocusWhenDisabled: true,
        isDisabled: !state.canDecrement,
        onPressStart: onButtonPressStart
    });
    return {
        groupProps: {
            ...focusWithinProps,
            role: 'group',
            'aria-disabled': isDisabled,
            'aria-invalid': isInvalid ? 'true' : undefined
        },
        labelProps: labelProps,
        inputProps: inputProps,
        incrementButtonProps: incrementButtonProps,
        decrementButtonProps: decrementButtonProps,
        errorMessageProps: errorMessageProps,
        descriptionProps: descriptionProps,
        isInvalid: isInvalid,
        validationErrors: validationErrors,
        validationDetails: validationDetails
    };
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ const $884aeceb3d67f00f$export$37b65e5b5444d35c = new WeakMap();

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 




function $0d5c49892c1215da$export$37b0961d2f4751e2(props, state, ref) {
    let { value: value, children: children, 'aria-label': ariaLabel, 'aria-labelledby': ariaLabelledby } = props;
    const isDisabled = props.isDisabled || state.isDisabled;
    let hasChildren = children != null;
    let hasAriaLabel = ariaLabel != null || ariaLabelledby != null;
    if (!hasChildren && !hasAriaLabel) console.warn('If you do not provide children, you must specify an aria-label for accessibility');
    let checked = state.selectedValue === value;
    let onChange = (e)=>{
        e.stopPropagation();
        state.setSelectedValue(value);
    };
    let { pressProps: pressProps, isPressed: isPressed } = ($f6c31cce2adf654f$export$45712eceda6fad21)({
        isDisabled: isDisabled
    });
    // iOS does not toggle radios if you drag off and back onto the label, so handle it ourselves.
    let { pressProps: labelProps, isPressed: isLabelPressed } = ($f6c31cce2adf654f$export$45712eceda6fad21)({
        isDisabled: isDisabled,
        onPress () {
            state.setSelectedValue(value);
        }
    });
    let { focusableProps: focusableProps } = ($e6afbd83fe6ebbd2$export$4c014de7c8940b4c)(($3ef42575df84b30b$export$9d1611c77c2fe928)(props, {
        onFocus: ()=>state.setLastFocusedValue(value)
    }), ref);
    let interactions = ($3ef42575df84b30b$export$9d1611c77c2fe928)(pressProps, focusableProps);
    let domProps = ($65484d02dcb7eb3e$export$457c3d6518dd4c6f)(props, {
        labelable: true
    });
    let tabIndex = -1;
    if (state.selectedValue != null) {
        if (state.selectedValue === value) tabIndex = 0;
    } else if (state.lastFocusedValue === value || state.lastFocusedValue == null) tabIndex = 0;
    if (isDisabled) tabIndex = undefined;
    let { name: name, descriptionId: descriptionId, errorMessageId: errorMessageId, validationBehavior: validationBehavior } = ($884aeceb3d67f00f$export$37b65e5b5444d35c).get(state);
    ($99facab73266f662$export$5add1d006293d136)(ref, state.selectedValue, state.setSelectedValue);
    ($e93e671b31057976$export$b8473d3665f3a75a)({
        validationBehavior: validationBehavior
    }, state, ref);
    return {
        labelProps: ($3ef42575df84b30b$export$9d1611c77c2fe928)(labelProps, {
            onClick: (e)=>e.preventDefault()
        }),
        inputProps: ($3ef42575df84b30b$export$9d1611c77c2fe928)(domProps, {
            ...interactions,
            type: 'radio',
            name: name,
            tabIndex: tabIndex,
            disabled: isDisabled,
            required: state.isRequired && validationBehavior === 'native',
            checked: checked,
            value: value,
            onChange: onChange,
            'aria-describedby': [
                props['aria-describedby'],
                state.isInvalid ? errorMessageId : null,
                descriptionId
            ].filter(Boolean).join(' ') || undefined
        }),
        isDisabled: isDisabled,
        isSelected: checked,
        isPressed: isPressed || isLabelPressed
    };
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 





function $430f30ed08ec25fa$export$62b9571f283ff5c2(props, state) {
    let { name: name, isReadOnly: isReadOnly, isRequired: isRequired, isDisabled: isDisabled, orientation: orientation = 'vertical', validationBehavior: validationBehavior = 'aria' } = props;
    let { direction: direction } = ($18f2051aff69b9bf$export$43bb16f9c6d9e3f7)();
    let { isInvalid: isInvalid, validationErrors: validationErrors, validationDetails: validationDetails } = state.displayValidation;
    let { labelProps: labelProps, fieldProps: fieldProps, descriptionProps: descriptionProps, errorMessageProps: errorMessageProps } = ($2baaea4c71418dea$export$294aa081a6c6f55d)({
        ...props,
        // Radio group is not an HTML input element so it
        // shouldn't be labeled by a <label> element.
        labelElementType: 'span',
        isInvalid: state.isInvalid,
        errorMessage: props.errorMessage || validationErrors
    });
    let domProps = ($65484d02dcb7eb3e$export$457c3d6518dd4c6f)(props, {
        labelable: true
    });
    // When the radio group loses focus, reset the focusable radio to null if
    // there is no selection. This allows tabbing into the group from either
    // direction to go to the first or last radio.
    let { focusWithinProps: focusWithinProps } = ($9ab94262bd0047c7$export$420e68273165f4ec)({
        onBlurWithin (e) {
            var _props_onBlur;
            (_props_onBlur = props.onBlur) === null || _props_onBlur === void 0 ? void 0 : _props_onBlur.call(props, e);
            if (!state.selectedValue) state.setLastFocusedValue(null);
        },
        onFocusWithin: props.onFocus,
        onFocusWithinChange: props.onFocusChange
    });
    let onKeyDown = (e)=>{
        let nextDir;
        switch(e.key){
            case 'ArrowRight':
                if (direction === 'rtl' && orientation !== 'vertical') nextDir = 'prev';
                else nextDir = 'next';
                break;
            case 'ArrowLeft':
                if (direction === 'rtl' && orientation !== 'vertical') nextDir = 'next';
                else nextDir = 'prev';
                break;
            case 'ArrowDown':
                nextDir = 'next';
                break;
            case 'ArrowUp':
                nextDir = 'prev';
                break;
            default:
                return;
        }
        e.preventDefault();
        let walker = ($9bf71ea28793e738$export$2d6ec8fc375ceafa)(e.currentTarget, {
            from: e.target
        });
        let nextElem;
        if (nextDir === 'next') {
            nextElem = walker.nextNode();
            if (!nextElem) {
                walker.currentNode = e.currentTarget;
                nextElem = walker.firstChild();
            }
        } else {
            nextElem = walker.previousNode();
            if (!nextElem) {
                walker.currentNode = e.currentTarget;
                nextElem = walker.lastChild();
            }
        }
        if (nextElem) {
            // Call focus on nextElem so that keyboard navigation scrolls the radio into view
            nextElem.focus();
            state.setSelectedValue(nextElem.value);
        }
    };
    let groupName = ($bdb11010cef70236$export$f680877a34711e37)(name);
    ($884aeceb3d67f00f$export$37b65e5b5444d35c).set(state, {
        name: groupName,
        descriptionId: descriptionProps.id,
        errorMessageId: errorMessageProps.id,
        validationBehavior: validationBehavior
    });
    return {
        radioGroupProps: ($3ef42575df84b30b$export$9d1611c77c2fe928)(domProps, {
            // https://www.w3.org/TR/wai-aria-1.2/#radiogroup
            role: 'radiogroup',
            onKeyDown: onKeyDown,
            'aria-invalid': state.isInvalid || undefined,
            'aria-errormessage': props['aria-errormessage'],
            'aria-readonly': isReadOnly || undefined,
            'aria-required': isRequired || undefined,
            'aria-disabled': isDisabled || undefined,
            'aria-orientation': orientation,
            ...fieldProps,
            ...focusWithinProps
        }),
        labelProps: labelProps,
        descriptionProps: descriptionProps,
        errorMessageProps: errorMessageProps,
        isInvalid: isInvalid,
        validationErrors: validationErrors,
        validationDetails: validationDetails
    };
}

var $03c9a1a10de12f06$exports = {};
$03c9a1a10de12f06$exports = {
    "Clear search": `\u{645}\u{633}\u{62D} \u{627}\u{644}\u{628}\u{62D}\u{62B}`
};

var $4da0c2ffa4ba4159$exports = {};
$4da0c2ffa4ba4159$exports = {
    "Clear search": `\u{418}\u{437}\u{447}\u{438}\u{441}\u{442}\u{432}\u{430}\u{43D}\u{435} \u{43D}\u{430} \u{442}\u{44A}\u{440}\u{441}\u{435}\u{43D}\u{435}`
};

var $8c59fd0c2c96821b$exports = {};
$8c59fd0c2c96821b$exports = {
    "Clear search": `Vymazat hled\xe1n\xed`
};

var $0a371f9c1df8120f$exports = {};
$0a371f9c1df8120f$exports = {
    "Clear search": `Ryd s\xf8gning`
};

var $67f4d0b0de9f8a52$exports = {};
$67f4d0b0de9f8a52$exports = {
    "Clear search": `Suche zur\xfccksetzen`
};

var $72a312d948f0214b$exports = {};
$72a312d948f0214b$exports = {
    "Clear search": `\u{391}\u{3C0}\u{3B1}\u{3BB}\u{3BF}\u{3B9}\u{3C6}\u{3AE} \u{3B1}\u{3BD}\u{3B1}\u{3B6}\u{3AE}\u{3C4}\u{3B7}\u{3C3}\u{3B7}\u{3C2}`
};

var $5012d21d933388c1$exports = {};
$5012d21d933388c1$exports = {
    "Clear search": `Clear search`
};

var $0159854399308e2e$exports = {};
$0159854399308e2e$exports = {
    "Clear search": `Borrar b\xfasqueda`
};

var $390613981d970276$exports = {};
$390613981d970276$exports = {
    "Clear search": `T\xfchjenda otsing`
};

var $961ae0833f811705$exports = {};
$961ae0833f811705$exports = {
    "Clear search": `Tyhjenn\xe4 haku`
};

var $26d76742decfd829$exports = {};
$26d76742decfd829$exports = {
    "Clear search": `Effacer la recherche`
};

var $92ef254c82a5c769$exports = {};
$92ef254c82a5c769$exports = {
    "Clear search": `\u{5E0}\u{5E7}\u{5D4} \u{5D7}\u{5D9}\u{5E4}\u{5D5}\u{5E9}`
};

var $e0321b43bdefb8b3$exports = {};
$e0321b43bdefb8b3$exports = {
    "Clear search": `Obri\u{161}i pretragu`
};

var $0c1ee0b8d50940d9$exports = {};
$0c1ee0b8d50940d9$exports = {
    "Clear search": `Keres\xe9s t\xf6rl\xe9se`
};

var $b09198915a38946f$exports = {};
$b09198915a38946f$exports = {
    "Clear search": `Cancella ricerca`
};

var $3a9a3d180c3145c0$exports = {};
$3a9a3d180c3145c0$exports = {
    "Clear search": `\u{691C}\u{7D22}\u{3092}\u{30AF}\u{30EA}\u{30A2}`
};

var $b7a611726449f4a3$exports = {};
$b7a611726449f4a3$exports = {
    "Clear search": `\u{AC80}\u{C0C9} \u{C9C0}\u{C6B0}\u{AE30}`
};

var $d9a3d49db610dd5c$exports = {};
$d9a3d49db610dd5c$exports = {
    "Clear search": `I\u{161}valyti ie\u{161}k\u{105}`
};

var $3ab64b73ea27c23a$exports = {};
$3ab64b73ea27c23a$exports = {
    "Clear search": `Not\u{12B}r\u{12B}t mekl\u{113}\u{161}anu`
};

var $bf5cce1b47d23baf$exports = {};
$bf5cce1b47d23baf$exports = {
    "Clear search": `T\xf8m s\xf8k`
};

var $4e0c9a9a010e4598$exports = {};
$4e0c9a9a010e4598$exports = {
    "Clear search": `Zoekactie wissen`
};

var $63cf4a75ec270508$exports = {};
$63cf4a75ec270508$exports = {
    "Clear search": `Wyczy\u{15B}\u{107} zawarto\u{15B}\u{107} wyszukiwania`
};

var $083b0cad27fdbd06$exports = {};
$083b0cad27fdbd06$exports = {
    "Clear search": `Limpar pesquisa`
};

var $1b7f0864d830ba6d$exports = {};
$1b7f0864d830ba6d$exports = {
    "Clear search": `Limpar pesquisa`
};

var $d6d2588377fc9718$exports = {};
$d6d2588377fc9718$exports = {
    "Clear search": `\u{15E}terge\u{163}i c\u{103}utarea`
};

var $701c918a4653e946$exports = {};
$701c918a4653e946$exports = {
    "Clear search": `\u{41E}\u{447}\u{438}\u{441}\u{442}\u{438}\u{442}\u{44C} \u{43F}\u{43E}\u{438}\u{441}\u{43A}`
};

var $7cacc29a1e5f4fbe$exports = {};
$7cacc29a1e5f4fbe$exports = {
    "Clear search": `Vymaza\u{165} vyh\u{13E}ad\xe1vanie`
};

var $c63231bcc300d0df$exports = {};
$c63231bcc300d0df$exports = {
    "Clear search": `Po\u{10D}isti iskanje`
};

var $b61510478bc0e6f6$exports = {};
$b61510478bc0e6f6$exports = {
    "Clear search": `Obri\u{161}i pretragu`
};

var $ce325e6dd3f9c37a$exports = {};
$ce325e6dd3f9c37a$exports = {
    "Clear search": `Rensa s\xf6kning`
};

var $1f7e1cf2285af2b2$exports = {};
$1f7e1cf2285af2b2$exports = {
    "Clear search": `Aramay\u{131} temizle`
};

var $2d999353ca652e34$exports = {};
$2d999353ca652e34$exports = {
    "Clear search": `\u{41E}\u{447}\u{438}\u{441}\u{442}\u{438}\u{442}\u{438} \u{43F}\u{43E}\u{448}\u{443}\u{43A}`
};

var $117b536bfb1ae554$exports = {};
$117b536bfb1ae554$exports = {
    "Clear search": `\u{6E05}\u{9664}\u{641C}\u{7D22}`
};

var $525f6fa4ac26e278$exports = {};
$525f6fa4ac26e278$exports = {
    "Clear search": `\u{6E05}\u{9664}\u{641C}\u{5C0B}\u{689D}\u{4EF6}`
};

var $8112f8b883c0272d$exports = {};


































$8112f8b883c0272d$exports = {
    "ar-AE": $03c9a1a10de12f06$exports,
    "bg-BG": $4da0c2ffa4ba4159$exports,
    "cs-CZ": $8c59fd0c2c96821b$exports,
    "da-DK": $0a371f9c1df8120f$exports,
    "de-DE": $67f4d0b0de9f8a52$exports,
    "el-GR": $72a312d948f0214b$exports,
    "en-US": $5012d21d933388c1$exports,
    "es-ES": $0159854399308e2e$exports,
    "et-EE": $390613981d970276$exports,
    "fi-FI": $961ae0833f811705$exports,
    "fr-FR": $26d76742decfd829$exports,
    "he-IL": $92ef254c82a5c769$exports,
    "hr-HR": $e0321b43bdefb8b3$exports,
    "hu-HU": $0c1ee0b8d50940d9$exports,
    "it-IT": $b09198915a38946f$exports,
    "ja-JP": $3a9a3d180c3145c0$exports,
    "ko-KR": $b7a611726449f4a3$exports,
    "lt-LT": $d9a3d49db610dd5c$exports,
    "lv-LV": $3ab64b73ea27c23a$exports,
    "nb-NO": $bf5cce1b47d23baf$exports,
    "nl-NL": $4e0c9a9a010e4598$exports,
    "pl-PL": $63cf4a75ec270508$exports,
    "pt-BR": $083b0cad27fdbd06$exports,
    "pt-PT": $1b7f0864d830ba6d$exports,
    "ro-RO": $d6d2588377fc9718$exports,
    "ru-RU": $701c918a4653e946$exports,
    "sk-SK": $7cacc29a1e5f4fbe$exports,
    "sl-SI": $c63231bcc300d0df$exports,
    "sr-SP": $b61510478bc0e6f6$exports,
    "sv-SE": $ce325e6dd3f9c37a$exports,
    "tr-TR": $1f7e1cf2285af2b2$exports,
    "uk-UA": $2d999353ca652e34$exports,
    "zh-CN": $117b536bfb1ae554$exports,
    "zh-TW": $525f6fa4ac26e278$exports
};

function $parcel$interopDefault$6(a) {
  return a && a.__esModule ? a.default : a;
}
/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 



function $4d52238874b24f86$export$9bb30bbe003b82e0(props, state, inputRef) {
    let stringFormatter = ($fca6afa0e843324b$export$f12b703ca79dfbb1)((($parcel$interopDefault$6($8112f8b883c0272d$exports))), '@react-aria/searchfield');
    let { isDisabled: isDisabled, isReadOnly: isReadOnly, onSubmit: onSubmit, onClear: onClear, type: type = 'search' } = props;
    let onKeyDown = (e)=>{
        const key = e.key;
        if (key === 'Enter' && (isDisabled || isReadOnly)) e.preventDefault();
        if (isDisabled || isReadOnly) return;
        // for backward compatibility;
        // otherwise, "Enter" on an input would trigger a form submit, the default browser behavior
        if (key === 'Enter' && onSubmit) {
            e.preventDefault();
            onSubmit(state.value);
        }
        if (key === 'Escape') {
            if (state.value === '') e.continuePropagation();
            else {
                state.setValue('');
                if (onClear) onClear();
            }
        }
    };
    let onClearButtonClick = ()=>{
        state.setValue('');
        if (onClear) onClear();
    };
    let onPressStart = ()=>{
        var // this is in PressStart for mobile so that touching the clear button doesn't remove focus from
        // the input and close the keyboard
        _inputRef_current;
        (_inputRef_current = inputRef.current) === null || _inputRef_current === void 0 ? void 0 : _inputRef_current.focus();
    };
    let { labelProps: labelProps, inputProps: inputProps, descriptionProps: descriptionProps, errorMessageProps: errorMessageProps, ...validation } = ($2d73ec29415bd339$export$712718f7aec83d5)({
        ...props,
        value: state.value,
        onChange: state.setValue,
        onKeyDown: !isReadOnly ? ($ff5963eb1fccf552$export$e08e3b67e392101e)(onKeyDown, props.onKeyDown) : props.onKeyDown,
        type: type
    }, inputRef);
    return {
        labelProps: labelProps,
        inputProps: {
            ...inputProps,
            // already handled by useSearchFieldState
            defaultValue: undefined
        },
        clearButtonProps: {
            'aria-label': stringFormatter.format('Clear search'),
            excludeFromTabOrder: true,
            // @ts-ignore
            preventFocusOnPress: true,
            isDisabled: isDisabled || isReadOnly,
            onPress: onClearButtonClick,
            onPressStart: onPressStart
        },
        descriptionProps: descriptionProps,
        errorMessageProps: errorMessageProps,
        ...validation
    };
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 






const $58aed456727eb0f3$export$703601b7e90536f8 = new WeakMap();
function $58aed456727eb0f3$export$e64b2f635402ca43(props, state, ref) {
    let { keyboardDelegate: keyboardDelegate, isDisabled: isDisabled, isRequired: isRequired, name: name, validationBehavior: validationBehavior = 'aria' } = props;
    // By default, a KeyboardDelegate is provided which uses the DOM to query layout information (e.g. for page up/page down).
    // When virtualized, the layout object will be passed in as a prop and override this.
    let collator = ($325a3faab7a68acd$export$a16aca283550c30d)({
        usage: 'search',
        sensitivity: 'base'
    });
    let delegate = (reactExports.useMemo)(()=>keyboardDelegate || new ($2a25aae57d74318e$export$a05409b8bb224a5a)(state.collection, state.disabledKeys, null, collator), [
        keyboardDelegate,
        state.collection,
        state.disabledKeys,
        collator
    ]);
    let { menuTriggerProps: menuTriggerProps, menuProps: menuProps } = ($168583247155ddda$export$dc9c12ed27dd1b49)({
        isDisabled: isDisabled,
        type: 'listbox'
    }, state, ref);
    let onKeyDown = (e)=>{
        switch(e.key){
            case 'ArrowLeft':
                {
                    // prevent scrolling containers
                    e.preventDefault();
                    let key = state.selectedKey != null ? delegate.getKeyAbove(state.selectedKey) : delegate.getFirstKey();
                    if (key) state.setSelectedKey(key);
                    break;
                }
            case 'ArrowRight':
                {
                    // prevent scrolling containers
                    e.preventDefault();
                    let key = state.selectedKey != null ? delegate.getKeyBelow(state.selectedKey) : delegate.getFirstKey();
                    if (key) state.setSelectedKey(key);
                    break;
                }
        }
    };
    let { typeSelectProps: typeSelectProps } = ($fb3050f43d946246$export$e32c88dfddc6e1d8)({
        keyboardDelegate: delegate,
        selectionManager: state.selectionManager,
        onTypeSelect (key) {
            state.setSelectedKey(key);
        }
    });
    let { isInvalid: isInvalid, validationErrors: validationErrors, validationDetails: validationDetails } = state.displayValidation;
    let { labelProps: labelProps, fieldProps: fieldProps, descriptionProps: descriptionProps, errorMessageProps: errorMessageProps } = ($2baaea4c71418dea$export$294aa081a6c6f55d)({
        ...props,
        labelElementType: 'span',
        isInvalid: isInvalid,
        errorMessage: props.errorMessage || validationErrors
    });
    typeSelectProps.onKeyDown = typeSelectProps.onKeyDownCapture;
    delete typeSelectProps.onKeyDownCapture;
    let domProps = ($65484d02dcb7eb3e$export$457c3d6518dd4c6f)(props, {
        labelable: true
    });
    let triggerProps = ($3ef42575df84b30b$export$9d1611c77c2fe928)(typeSelectProps, menuTriggerProps, fieldProps);
    let valueId = ($bdb11010cef70236$export$f680877a34711e37)();
    $58aed456727eb0f3$export$703601b7e90536f8.set(state, {
        isDisabled: isDisabled,
        isRequired: isRequired,
        name: name,
        validationBehavior: validationBehavior
    });
    return {
        labelProps: {
            ...labelProps,
            onClick: ()=>{
                if (!props.isDisabled) {
                    ref.current.focus();
                    // Show the focus ring so the user knows where focus went
                    ($507fabe10e71c6fb$export$8397ddfc504fdb9a)('keyboard');
                }
            }
        },
        triggerProps: ($3ef42575df84b30b$export$9d1611c77c2fe928)(domProps, {
            ...triggerProps,
            isDisabled: isDisabled,
            onKeyDown: ($ff5963eb1fccf552$export$e08e3b67e392101e)(triggerProps.onKeyDown, onKeyDown, props.onKeyDown),
            onKeyUp: props.onKeyUp,
            'aria-labelledby': [
                valueId,
                triggerProps['aria-labelledby'],
                triggerProps['aria-label'] && !triggerProps['aria-labelledby'] ? triggerProps.id : null
            ].filter(Boolean).join(' '),
            onFocus (e) {
                if (state.isFocused) return;
                if (props.onFocus) props.onFocus(e);
                if (props.onFocusChange) props.onFocusChange(true);
                state.setFocused(true);
            },
            onBlur (e) {
                if (state.isOpen) return;
                if (props.onBlur) props.onBlur(e);
                if (props.onFocusChange) props.onFocusChange(false);
                state.setFocused(false);
            }
        }),
        valueProps: {
            id: valueId
        },
        menuProps: {
            ...menuProps,
            autoFocus: state.focusStrategy || true,
            shouldSelectOnPressUp: true,
            shouldFocusOnHover: true,
            disallowEmptySelection: true,
            linkBehavior: 'selection',
            onBlur: (e)=>{
                if (e.currentTarget.contains(e.relatedTarget)) return;
                if (props.onBlur) props.onBlur(e);
                if (props.onFocusChange) props.onFocusChange(false);
                state.setFocused(false);
            },
            'aria-labelledby': [
                fieldProps['aria-labelledby'],
                triggerProps['aria-label'] && !fieldProps['aria-labelledby'] ? triggerProps.id : null
            ].filter(Boolean).join(' ')
        },
        descriptionProps: descriptionProps,
        errorMessageProps: errorMessageProps,
        isInvalid: isInvalid,
        validationErrors: validationErrors,
        validationDetails: validationDetails
    };
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 





function $bdd25dc72710631f$export$f809e80f58e251d1(props, state, triggerRef) {
    let data = ($58aed456727eb0f3$export$703601b7e90536f8).get(state) || {};
    let { autoComplete: autoComplete, name: name = data.name, isDisabled: isDisabled = data.isDisabled } = props;
    let { validationBehavior: validationBehavior, isRequired: isRequired } = data;
    let modality = ($507fabe10e71c6fb$export$98e20ec92f614cfe)();
    let { visuallyHiddenProps: visuallyHiddenProps } = ($5c3e21d68f1c4674$export$a966af930f325cab)();
    ($99facab73266f662$export$5add1d006293d136)(props.selectRef, state.selectedKey, state.setSelectedKey);
    ($e93e671b31057976$export$b8473d3665f3a75a)({
        validationBehavior: validationBehavior,
        focus: ()=>triggerRef.current.focus()
    }, state, props.selectRef);
    var _state_selectedKey;
    // In Safari, the <select> cannot have `display: none` or `hidden` for autofill to work.
    // In Firefox, there must be a <label> to identify the <select> whereas other browsers
    // seem to identify it just by surrounding text.
    // The solution is to use <VisuallyHidden> to hide the elements, which clips the elements to a
    // 1px rectangle. In addition, we hide from screen readers with aria-hidden, and make the <select>
    // non tabbable with tabIndex={-1}.
    //
    // In mobile browsers, there are next/previous buttons above the software keyboard for navigating
    // between fields in a form. These only support native form inputs that are tabbable. In order to
    // support those, an additional hidden input is used to marshall focus to the button. It is tabbable
    // except when the button is focused, so that shift tab works properly to go to the actual previous
    // input in the form. Using the <select> for this also works, but Safari on iOS briefly flashes
    // the native menu on focus, so this isn't ideal. A font-size of 16px or greater is required to
    // prevent Safari from zooming in on the input when it is focused.
    //
    // If the current interaction modality is null, then the user hasn't interacted with the page yet.
    // In this case, we set the tabIndex to -1 on the input element so that automated accessibility
    // checkers don't throw false-positives about focusable elements inside an aria-hidden parent.
    return {
        containerProps: {
            ...visuallyHiddenProps,
            'aria-hidden': true,
            // @ts-ignore
            ['data-react-aria-prevent-focus']: true,
            // @ts-ignore
            ['data-a11y-ignore']: 'aria-hidden-focus'
        },
        inputProps: {
            type: 'text',
            tabIndex: modality == null || state.isFocused || state.isOpen ? -1 : 0,
            style: {
                fontSize: 16
            },
            onFocus: ()=>triggerRef.current.focus(),
            disabled: isDisabled
        },
        selectProps: {
            tabIndex: -1,
            autoComplete: autoComplete,
            disabled: isDisabled,
            required: validationBehavior === 'native' && isRequired,
            name: name,
            value: (_state_selectedKey = state.selectedKey) !== null && _state_selectedKey !== void 0 ? _state_selectedKey : '',
            onChange: (e)=>state.setSelectedKey(e.target.value)
        }
    };
}
function $bdd25dc72710631f$export$cbd84cdb2e668835(props) {
    let { state: state, triggerRef: triggerRef, label: label, name: name, isDisabled: isDisabled } = props;
    let selectRef = (reactExports.useRef)(null);
    let { containerProps: containerProps, inputProps: inputProps, selectProps: selectProps } = $bdd25dc72710631f$export$f809e80f58e251d1({
        ...props,
        selectRef: selectRef
    }, state, triggerRef);
    var _state_selectedKey;
    // If used in a <form>, use a hidden input so the value can be submitted to a server.
    // If the collection isn't too big, use a hidden <select> element for this so that browser
    // autofill will work. Otherwise, use an <input type="hidden">.
    if (state.collection.size <= 300) return /*#__PURE__*/ (React).createElement("div", {
        ...containerProps,
        "data-testid": "hidden-select-container"
    }, /*#__PURE__*/ (React).createElement("input", inputProps), /*#__PURE__*/ (React).createElement("label", null, label, /*#__PURE__*/ (React).createElement("select", {
        ...selectProps,
        ref: selectRef
    }, /*#__PURE__*/ (React).createElement("option", null), [
        ...state.collection.getKeys()
    ].map((key)=>{
        let item = state.collection.getItem(key);
        if (item.type === 'item') return /*#__PURE__*/ (React).createElement("option", {
            key: item.key,
            value: item.key
        }, item.textValue);
    }))));
    else if (name) return /*#__PURE__*/ (React).createElement("input", {
        type: "hidden",
        autoComplete: selectProps.autoComplete,
        name: name,
        disabled: isDisabled,
        value: (_state_selectedKey = state.selectedKey) !== null && _state_selectedKey !== void 0 ? _state_selectedKey : ''
    });
    return null;
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 
function $f4b273590fab9f93$export$52210f68a14655d0(props) {
    let domProps = ($65484d02dcb7eb3e$export$457c3d6518dd4c6f)(props, {
        labelable: true
    });
    let ariaOrientation;
    // if orientation is horizontal, aria-orientation default is horizontal, so we leave it undefined
    // if it's vertical, we need to specify it
    if (props.orientation === 'vertical') ariaOrientation = 'vertical';
    // hr elements implicitly have role = separator and a horizontal orientation
    if (props.elementType !== 'hr') return {
        separatorProps: {
            ...domProps,
            role: 'separator',
            'aria-orientation': ariaOrientation
        }
    };
    return {
        separatorProps: domProps
    };
}

const $aa519ee6cf463259$export$d6c8d9636a3dc49c = new WeakMap();
function $aa519ee6cf463259$export$68e648cbec363a18(state, index) {
    let data = $aa519ee6cf463259$export$d6c8d9636a3dc49c.get(state);
    if (!data) throw new Error('Unknown slider state');
    return `${data.id}-${index}`;
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 





function $bcca50147b47f54d$export$56b2c08e277f365(props, state, trackRef) {
    let { labelProps: labelProps, fieldProps: fieldProps } = ($d191a55c9702f145$export$8467354a121f1b9f)(props);
    let isVertical = props.orientation === 'vertical';
    var _labelProps_id;
    // Attach id of the label to the state so it can be accessed by useSliderThumb.
    ($aa519ee6cf463259$export$d6c8d9636a3dc49c).set(state, {
        id: (_labelProps_id = labelProps.id) !== null && _labelProps_id !== void 0 ? _labelProps_id : fieldProps.id,
        'aria-describedby': props['aria-describedby'],
        'aria-details': props['aria-details']
    });
    let { direction: direction } = ($18f2051aff69b9bf$export$43bb16f9c6d9e3f7)();
    let { addGlobalListener: addGlobalListener, removeGlobalListener: removeGlobalListener } = ($03deb23ff14920c4$export$4eaf04e54aa8eed6)();
    // When the user clicks or drags the track, we want the motion to set and drag the
    // closest thumb.  Hence we also need to install useMove() on the track element.
    // Here, we keep track of which index is the "closest" to the drag start point.
    // It is set onMouseDown/onTouchDown; see trackProps below.
    const realTimeTrackDraggingIndex = (reactExports.useRef)(null);
    const reverseX = direction === 'rtl';
    const currentPosition = (reactExports.useRef)(null);
    const { moveProps: moveProps } = ($e8a7022cf87cba2a$export$36da96379f79f245)({
        onMoveStart () {
            currentPosition.current = null;
        },
        onMove ({ deltaX: deltaX, deltaY: deltaY }) {
            let { height: height, width: width } = trackRef.current.getBoundingClientRect();
            let size = isVertical ? height : width;
            if (currentPosition.current == null) currentPosition.current = state.getThumbPercent(realTimeTrackDraggingIndex.current) * size;
            let delta = isVertical ? deltaY : deltaX;
            if (isVertical || reverseX) delta = -delta;
            currentPosition.current += delta;
            if (realTimeTrackDraggingIndex.current != null && trackRef.current) {
                const percent = ($9446cca9a3875146$export$7d15b64cf5a3a4c4)(currentPosition.current / size, 0, 1);
                state.setThumbPercent(realTimeTrackDraggingIndex.current, percent);
            }
        },
        onMoveEnd () {
            if (realTimeTrackDraggingIndex.current != null) {
                state.setThumbDragging(realTimeTrackDraggingIndex.current, false);
                realTimeTrackDraggingIndex.current = null;
            }
        }
    });
    let currentPointer = (reactExports.useRef)(undefined);
    let onDownTrack = (e, id, clientX, clientY)=>{
        // We only trigger track-dragging if the user clicks on the track itself and nothing is currently being dragged.
        if (trackRef.current && !props.isDisabled && state.values.every((_, i)=>!state.isThumbDragging(i))) {
            let { height: height, width: width, top: top, left: left } = trackRef.current.getBoundingClientRect();
            let size = isVertical ? height : width;
            // Find the closest thumb
            const trackPosition = isVertical ? top : left;
            const clickPosition = isVertical ? clientY : clientX;
            const offset = clickPosition - trackPosition;
            let percent = offset / size;
            if (direction === 'rtl' || isVertical) percent = 1 - percent;
            let value = state.getPercentValue(percent);
            // to find the closet thumb we split the array based on the first thumb position to the "right/end" of the click.
            let closestThumb;
            let split = state.values.findIndex((v)=>value - v < 0);
            if (split === 0) closestThumb = split;
            else if (split === -1) closestThumb = state.values.length - 1;
            else {
                let lastLeft = state.values[split - 1];
                let firstRight = state.values[split];
                // Pick the last left/start thumb, unless they are stacked on top of each other, then pick the right/end one
                if (Math.abs(lastLeft - value) < Math.abs(firstRight - value)) closestThumb = split - 1;
                else closestThumb = split;
            }
            // Confirm that the found closest thumb is editable, not disabled, and move it
            if (closestThumb >= 0 && state.isThumbEditable(closestThumb)) {
                // Don't unfocus anything
                e.preventDefault();
                realTimeTrackDraggingIndex.current = closestThumb;
                state.setFocusedThumb(closestThumb);
                currentPointer.current = id;
                state.setThumbDragging(realTimeTrackDraggingIndex.current, true);
                state.setThumbValue(closestThumb, value);
                addGlobalListener(window, 'mouseup', onUpTrack, false);
                addGlobalListener(window, 'touchend', onUpTrack, false);
                addGlobalListener(window, 'pointerup', onUpTrack, false);
            } else realTimeTrackDraggingIndex.current = null;
        }
    };
    let onUpTrack = (e)=>{
        var _e_changedTouches;
        var _e_pointerId;
        let id = (_e_pointerId = e.pointerId) !== null && _e_pointerId !== void 0 ? _e_pointerId : (_e_changedTouches = e.changedTouches) === null || _e_changedTouches === void 0 ? void 0 : _e_changedTouches[0].identifier;
        if (id === currentPointer.current) {
            if (realTimeTrackDraggingIndex.current != null) {
                state.setThumbDragging(realTimeTrackDraggingIndex.current, false);
                realTimeTrackDraggingIndex.current = null;
            }
            removeGlobalListener(window, 'mouseup', onUpTrack, false);
            removeGlobalListener(window, 'touchend', onUpTrack, false);
            removeGlobalListener(window, 'pointerup', onUpTrack, false);
        }
    };
    if ('htmlFor' in labelProps && labelProps.htmlFor) {
        // Ideally the `for` attribute should point to the first thumb, but VoiceOver on iOS
        // causes this to override the `aria-labelledby` on the thumb. This causes the first
        // thumb to only be announced as the slider label rather than its individual name as well.
        // See https://bugs.webkit.org/show_bug.cgi?id=172464.
        delete labelProps.htmlFor;
        labelProps.onClick = ()=>{
            var // Safari does not focus <input type="range"> elements when clicking on an associated <label>,
            // so do it manually. In addition, make sure we show the focus ring.
            _document_getElementById;
            (_document_getElementById = document.getElementById(($aa519ee6cf463259$export$68e648cbec363a18)(state, 0))) === null || _document_getElementById === void 0 ? void 0 : _document_getElementById.focus();
            ($507fabe10e71c6fb$export$8397ddfc504fdb9a)('keyboard');
        };
    }
    return {
        labelProps: labelProps,
        // The root element of the Slider will have role="group" to group together
        // all the thumb inputs in the Slider.  The label of the Slider will
        // be used to label the group.
        groupProps: {
            role: 'group',
            ...fieldProps
        },
        trackProps: ($3ef42575df84b30b$export$9d1611c77c2fe928)({
            onMouseDown (e) {
                if (e.button !== 0 || e.altKey || e.ctrlKey || e.metaKey) return;
                onDownTrack(e, undefined, e.clientX, e.clientY);
            },
            onPointerDown (e) {
                if (e.pointerType === 'mouse' && (e.button !== 0 || e.altKey || e.ctrlKey || e.metaKey)) return;
                onDownTrack(e, e.pointerId, e.clientX, e.clientY);
            },
            onTouchStart (e) {
                onDownTrack(e, e.changedTouches[0].identifier, e.changedTouches[0].clientX, e.changedTouches[0].clientY);
            },
            style: {
                position: 'relative',
                touchAction: 'none'
            }
        }, moveProps),
        outputProps: {
            htmlFor: state.values.map((_, index)=>($aa519ee6cf463259$export$68e648cbec363a18)(state, index)).join(' '),
            'aria-live': 'off'
        }
    };
}

function $47b897dc8cdb026b$export$8d15029008292ae(opts, state) {
    let { index: index = 0, isRequired: isRequired, validationState: validationState, isInvalid: isInvalid, trackRef: trackRef, inputRef: inputRef, orientation: orientation = state.orientation, name: name } = opts;
    let isDisabled = opts.isDisabled || state.isDisabled;
    let isVertical = orientation === 'vertical';
    let { direction: direction } = ($18f2051aff69b9bf$export$43bb16f9c6d9e3f7)();
    let { addGlobalListener: addGlobalListener, removeGlobalListener: removeGlobalListener } = ($03deb23ff14920c4$export$4eaf04e54aa8eed6)();
    let data = ($aa519ee6cf463259$export$d6c8d9636a3dc49c).get(state);
    var _opts_arialabelledby;
    const { labelProps: labelProps, fieldProps: fieldProps } = ($d191a55c9702f145$export$8467354a121f1b9f)({
        ...opts,
        id: ($aa519ee6cf463259$export$68e648cbec363a18)(state, index),
        'aria-labelledby': `${data.id} ${(_opts_arialabelledby = opts['aria-labelledby']) !== null && _opts_arialabelledby !== void 0 ? _opts_arialabelledby : ''}`.trim()
    });
    const value = state.values[index];
    const focusInput = (reactExports.useCallback)(()=>{
        if (inputRef.current) ($7215afc6de606d6b$export$de79e2c695e052f3)(inputRef.current);
    }, [
        inputRef
    ]);
    const isFocused = state.focusedThumb === index;
    (reactExports.useEffect)(()=>{
        if (isFocused) focusInput();
    }, [
        isFocused,
        focusInput
    ]);
    let reverseX = direction === 'rtl';
    let currentPosition = (reactExports.useRef)(null);
    let { keyboardProps: keyboardProps } = ($46d819fcbaf35654$export$8f71654801c2f7cd)({
        onKeyDown (e) {
            let { getThumbMaxValue: getThumbMaxValue, getThumbMinValue: getThumbMinValue, decrementThumb: decrementThumb, incrementThumb: incrementThumb, setThumbValue: setThumbValue, setThumbDragging: setThumbDragging, pageSize: pageSize } = state;
            // these are the cases that useMove or useSlider don't handle
            if (!/^(PageUp|PageDown|Home|End)$/.test(e.key)) {
                e.continuePropagation();
                return;
            }
            // same handling as useMove, stopPropagation to prevent useSlider from handling the event as well.
            e.preventDefault();
            // remember to set this so that onChangeEnd is fired
            setThumbDragging(index, true);
            switch(e.key){
                case 'PageUp':
                    incrementThumb(index, pageSize);
                    break;
                case 'PageDown':
                    decrementThumb(index, pageSize);
                    break;
                case 'Home':
                    setThumbValue(index, getThumbMinValue(index));
                    break;
                case 'End':
                    setThumbValue(index, getThumbMaxValue(index));
                    break;
            }
            setThumbDragging(index, false);
        }
    });
    let { moveProps: moveProps } = ($e8a7022cf87cba2a$export$36da96379f79f245)({
        onMoveStart () {
            currentPosition.current = null;
            state.setThumbDragging(index, true);
        },
        onMove ({ deltaX: deltaX, deltaY: deltaY, pointerType: pointerType, shiftKey: shiftKey }) {
            const { getThumbPercent: getThumbPercent, setThumbPercent: setThumbPercent, decrementThumb: decrementThumb, incrementThumb: incrementThumb, step: step, pageSize: pageSize } = state;
            let { width: width, height: height } = trackRef.current.getBoundingClientRect();
            let size = isVertical ? height : width;
            if (currentPosition.current == null) currentPosition.current = getThumbPercent(index) * size;
            if (pointerType === 'keyboard') {
                if (deltaX > 0 && reverseX || deltaX < 0 && !reverseX || deltaY > 0) decrementThumb(index, shiftKey ? pageSize : step);
                else incrementThumb(index, shiftKey ? pageSize : step);
            } else {
                let delta = isVertical ? deltaY : deltaX;
                if (isVertical || reverseX) delta = -delta;
                currentPosition.current += delta;
                setThumbPercent(index, ($9446cca9a3875146$export$7d15b64cf5a3a4c4)(currentPosition.current / size, 0, 1));
            }
        },
        onMoveEnd () {
            state.setThumbDragging(index, false);
        }
    });
    // Immediately register editability with the state
    state.setThumbEditable(index, !isDisabled);
    const { focusableProps: focusableProps } = ($e6afbd83fe6ebbd2$export$4c014de7c8940b4c)(($3ef42575df84b30b$export$9d1611c77c2fe928)(opts, {
        onFocus: ()=>state.setFocusedThumb(index),
        onBlur: ()=>state.setFocusedThumb(undefined)
    }), inputRef);
    let currentPointer = (reactExports.useRef)(undefined);
    let onDown = (id)=>{
        focusInput();
        currentPointer.current = id;
        state.setThumbDragging(index, true);
        addGlobalListener(window, 'mouseup', onUp, false);
        addGlobalListener(window, 'touchend', onUp, false);
        addGlobalListener(window, 'pointerup', onUp, false);
    };
    let onUp = (e)=>{
        var _e_changedTouches;
        var _e_pointerId;
        let id = (_e_pointerId = e.pointerId) !== null && _e_pointerId !== void 0 ? _e_pointerId : (_e_changedTouches = e.changedTouches) === null || _e_changedTouches === void 0 ? void 0 : _e_changedTouches[0].identifier;
        if (id === currentPointer.current) {
            focusInput();
            state.setThumbDragging(index, false);
            removeGlobalListener(window, 'mouseup', onUp, false);
            removeGlobalListener(window, 'touchend', onUp, false);
            removeGlobalListener(window, 'pointerup', onUp, false);
        }
    };
    let thumbPosition = state.getThumbPercent(index);
    if (isVertical || direction === 'rtl') thumbPosition = 1 - thumbPosition;
    let interactions = !isDisabled ? ($3ef42575df84b30b$export$9d1611c77c2fe928)(keyboardProps, moveProps, {
        onMouseDown: (e)=>{
            if (e.button !== 0 || e.altKey || e.ctrlKey || e.metaKey) return;
            onDown();
        },
        onPointerDown: (e)=>{
            if (e.button !== 0 || e.altKey || e.ctrlKey || e.metaKey) return;
            onDown(e.pointerId);
        },
        onTouchStart: (e)=>{
            onDown(e.changedTouches[0].identifier);
        }
    }) : {};
    ($99facab73266f662$export$5add1d006293d136)(inputRef, value, (v)=>{
        state.setThumbValue(index, v);
    });
    // We install mouse handlers for the drag motion on the thumb div, but
    // not the key handler for moving the thumb with the slider.  Instead,
    // we focus the range input, and let the browser handle the keyboard
    // interactions; we then listen to input's onChange to update state.
    return {
        inputProps: ($3ef42575df84b30b$export$9d1611c77c2fe928)(focusableProps, fieldProps, {
            type: 'range',
            tabIndex: !isDisabled ? 0 : undefined,
            min: state.getThumbMinValue(index),
            max: state.getThumbMaxValue(index),
            step: state.step,
            value: value,
            name: name,
            disabled: isDisabled,
            'aria-orientation': orientation,
            'aria-valuetext': state.getThumbValueLabel(index),
            'aria-required': isRequired || undefined,
            'aria-invalid': isInvalid || validationState === 'invalid' || undefined,
            'aria-errormessage': opts['aria-errormessage'],
            'aria-describedby': [
                data['aria-describedby'],
                opts['aria-describedby']
            ].filter(Boolean).join(' '),
            'aria-details': [
                data['aria-details'],
                opts['aria-details']
            ].filter(Boolean).join(' '),
            onChange: (e)=>{
                state.setThumbValue(index, parseFloat(e.target.value));
            }
        }),
        thumbProps: {
            ...interactions,
            style: {
                position: 'absolute',
                [isVertical ? 'top' : 'left']: `${thumbPosition * 100}%`,
                transform: 'translate(-50%, -50%)',
                touchAction: 'none'
            }
        },
        labelProps: labelProps,
        isDragging: state.isThumbDragging(index),
        isDisabled: isDisabled,
        isFocused: isFocused
    };
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 
function $b418ec0c85c52f27$export$d853f7095ae95f88(props, state, ref) {
    let { labelProps: labelProps, inputProps: inputProps, isSelected: isSelected, isPressed: isPressed, isDisabled: isDisabled, isReadOnly: isReadOnly } = ($d2c8e2b0480f3f34$export$cbe85ee05b554577)(props, state, ref);
    return {
        labelProps: labelProps,
        inputProps: {
            ...inputProps,
            role: 'switch',
            checked: isSelected
        },
        isSelected: isSelected,
        isPressed: isPressed,
        isDisabled: isDisabled,
        isReadOnly: isReadOnly
    };
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ const $2140fb2337097f2d$export$552312adfd451dab = new WeakMap();
function $2140fb2337097f2d$var$normalizeKey(key) {
    if (typeof key === 'string') return key.replace(/\s*/g, '');
    return '' + key;
}
function $2140fb2337097f2d$export$37cd4213f2ad742e(state, columnKey) {
    let gridId = $2140fb2337097f2d$export$552312adfd451dab.get(state);
    if (!gridId) throw new Error('Unknown grid');
    return `${gridId}-${$2140fb2337097f2d$var$normalizeKey(columnKey)}`;
}
function $2140fb2337097f2d$export$19baff3266315d44(state, rowKey, columnKey) {
    let gridId = $2140fb2337097f2d$export$552312adfd451dab.get(state);
    if (!gridId) throw new Error('Unknown grid');
    return `${gridId}-${$2140fb2337097f2d$var$normalizeKey(rowKey)}-${$2140fb2337097f2d$var$normalizeKey(columnKey)}`;
}
function $2140fb2337097f2d$export$85069b70317f543(state, rowKey) {
    // A row is labelled by it's row headers.
    return [
        ...state.collection.rowHeaderColumnKeys
    ].map((columnKey)=>$2140fb2337097f2d$export$19baff3266315d44(state, rowKey, columnKey)).join(' ');
}

var $ce3de3ff2fd66848$exports = {};
$ce3de3ff2fd66848$exports = {
    "ascending": `\u{62A}\u{635}\u{627}\u{639}\u{62F}\u{64A}`,
    "ascendingSort": (args)=>`\u{62A}\u{631}\u{62A}\u{64A}\u{628} \u{62D}\u{633}\u{628} \u{627}\u{644}\u{639}\u{645}\u{648}\u{62F} ${args.columnName} \u{628}\u{62A}\u{631}\u{62A}\u{64A}\u{628} \u{62A}\u{635}\u{627}\u{639}\u{62F}\u{64A}`,
    "columnSize": (args)=>`${args.value} \u{628}\u{627}\u{644}\u{628}\u{643}\u{633}\u{644}`,
    "descending": `\u{62A}\u{646}\u{627}\u{632}\u{644}\u{64A}`,
    "descendingSort": (args)=>`\u{62A}\u{631}\u{62A}\u{64A}\u{628} \u{62D}\u{633}\u{628} \u{627}\u{644}\u{639}\u{645}\u{648}\u{62F} ${args.columnName} \u{628}\u{62A}\u{631}\u{62A}\u{64A}\u{628} \u{62A}\u{646}\u{627}\u{632}\u{644}\u{64A}`,
    "resizerDescription": `\u{627}\u{636}\u{63A}\u{637} \u{639}\u{644}\u{649} \u{645}\u{641}\u{62A}\u{627}\u{62D} Enter \u{644}\u{628}\u{62F}\u{621} \u{62A}\u{63A}\u{64A}\u{64A}\u{631} \u{627}\u{644}\u{62D}\u{62C}\u{645}`,
    "select": `\u{62A}\u{62D}\u{62F}\u{64A}\u{62F}`,
    "selectAll": `\u{62A}\u{62D}\u{62F}\u{64A}\u{62F} \u{627}\u{644}\u{643}\u{644}`,
    "sortable": `\u{639}\u{645}\u{648}\u{62F} \u{642}\u{627}\u{628}\u{644} \u{644}\u{644}\u{62A}\u{631}\u{62A}\u{64A}\u{628}`
};

var $cb80dcce530985b9$exports = {};
$cb80dcce530985b9$exports = {
    "ascending": `\u{432}\u{44A}\u{437}\u{445}\u{43E}\u{434}\u{44F}\u{449}`,
    "ascendingSort": (args)=>`\u{441}\u{43E}\u{440}\u{442}\u{438}\u{440}\u{430}\u{43D}\u{43E} \u{43F}\u{43E} \u{43A}\u{43E}\u{43B}\u{43E}\u{43D}\u{430} ${args.columnName} \u{432}\u{44A}\u{432} \u{432}\u{44A}\u{437}\u{445}\u{43E}\u{434}\u{44F}\u{449} \u{440}\u{435}\u{434}`,
    "columnSize": (args)=>`${args.value} \u{43F}\u{438}\u{43A}\u{441}\u{435}\u{43B}\u{430}`,
    "descending": `\u{43D}\u{438}\u{437}\u{445}\u{43E}\u{434}\u{44F}\u{449}`,
    "descendingSort": (args)=>`\u{441}\u{43E}\u{440}\u{442}\u{438}\u{440}\u{430}\u{43D}\u{43E} \u{43F}\u{43E} \u{43A}\u{43E}\u{43B}\u{43E}\u{43D}\u{430} ${args.columnName} \u{432} \u{43D}\u{438}\u{437}\u{445}\u{43E}\u{434}\u{44F}\u{449} \u{440}\u{435}\u{434}`,
    "resizerDescription": `\u{41D}\u{430}\u{442}\u{438}\u{441}\u{43D}\u{435}\u{442}\u{435} \u{201E}Enter\u{201C}, \u{437}\u{430} \u{434}\u{430} \u{437}\u{430}\u{43F}\u{43E}\u{447}\u{43D}\u{435}\u{442}\u{435} \u{434}\u{430} \u{43F}\u{440}\u{435}\u{43E}\u{440}\u{430}\u{437}\u{43C}\u{435}\u{440}\u{44F}\u{432}\u{430}\u{442}\u{435}`,
    "select": `\u{418}\u{437}\u{431}\u{435}\u{440}\u{435}\u{442}\u{435}`,
    "selectAll": `\u{418}\u{437}\u{431}\u{435}\u{440}\u{435}\u{442}\u{435} \u{432}\u{441}\u{438}\u{447}\u{43A}\u{43E}`,
    "sortable": `\u{441}\u{43E}\u{440}\u{442}\u{438}\u{440}\u{430}\u{449}\u{430} \u{43A}\u{43E}\u{43B}\u{43E}\u{43D}\u{430}`
};

var $68ac86749db4c0fb$exports = {};
$68ac86749db4c0fb$exports = {
    "ascending": `vzestupn\u{11B}`,
    "ascendingSort": (args)=>`\u{159}azeno vzestupn\u{11B} podle sloupce ${args.columnName}`,
    "columnSize": (args)=>`${args.value} pixel\u{16F}`,
    "descending": `sestupn\u{11B}`,
    "descendingSort": (args)=>`\u{159}azeno sestupn\u{11B} podle sloupce ${args.columnName}`,
    "resizerDescription": `Stisknut\xedm kl\xe1vesy Enter za\u{10D}nete m\u{11B}nit velikost`,
    "select": `Vybrat`,
    "selectAll": `Vybrat v\u{161}e`,
    "sortable": `sloupec s mo\u{17E}nost\xed \u{159}azen\xed`
};

var $9a6cbac08487e661$exports = {};
$9a6cbac08487e661$exports = {
    "ascending": `stigende`,
    "ascendingSort": (args)=>`sorteret efter kolonne ${args.columnName} i stigende r\xe6kkef\xf8lge`,
    "columnSize": (args)=>`${args.value} pixels`,
    "descending": `faldende`,
    "descendingSort": (args)=>`sorteret efter kolonne ${args.columnName} i faldende r\xe6kkef\xf8lge`,
    "resizerDescription": `Tryk p\xe5 Enter for at \xe6ndre st\xf8rrelse`,
    "select": `V\xe6lg`,
    "selectAll": `V\xe6lg alle`,
    "sortable": `sorterbar kolonne`
};

var $c963661d89486e72$exports = {};
$c963661d89486e72$exports = {
    "ascending": `aufsteigend`,
    "ascendingSort": (args)=>`sortiert nach Spalte ${args.columnName} in aufsteigender Reihenfolge`,
    "columnSize": (args)=>`${args.value} Pixel`,
    "descending": `absteigend`,
    "descendingSort": (args)=>`sortiert nach Spalte ${args.columnName} in absteigender Reihenfolge`,
    "resizerDescription": `Eingabetaste zum Starten der Gr\xf6\xdfen\xe4nderung dr\xfccken`,
    "select": `Ausw\xe4hlen`,
    "selectAll": `Alles ausw\xe4hlen`,
    "sortable": `sortierbare Spalte`
};

var $ac03861c6e8605f4$exports = {};
$ac03861c6e8605f4$exports = {
    "ascending": `\u{3B1}\u{3CD}\u{3BE}\u{3BF}\u{3C5}\u{3C3}\u{3B1}`,
    "ascendingSort": (args)=>`\u{3B4}\u{3B9}\u{3B1}\u{3BB}\u{3BF}\u{3B3}\u{3AE} \u{3B1}\u{3BD}\u{3AC} \u{3C3}\u{3C4}\u{3AE}\u{3BB}\u{3B7} ${args.columnName} \u{3C3}\u{3B5} \u{3B1}\u{3CD}\u{3BE}\u{3BF}\u{3C5}\u{3C3}\u{3B1} \u{3C3}\u{3B5}\u{3B9}\u{3C1}\u{3AC}`,
    "columnSize": (args)=>`${args.value} pixel`,
    "descending": `\u{3C6}\u{3B8}\u{3AF}\u{3BD}\u{3BF}\u{3C5}\u{3C3}\u{3B1}`,
    "descendingSort": (args)=>`\u{3B4}\u{3B9}\u{3B1}\u{3BB}\u{3BF}\u{3B3}\u{3AE} \u{3B1}\u{3BD}\u{3AC} \u{3C3}\u{3C4}\u{3AE}\u{3BB}\u{3B7} ${args.columnName} \u{3C3}\u{3B5} \u{3C6}\u{3B8}\u{3AF}\u{3BD}\u{3BF}\u{3C5}\u{3C3}\u{3B1} \u{3C3}\u{3B5}\u{3B9}\u{3C1}\u{3AC}`,
    "resizerDescription": `\u{3A0}\u{3B1}\u{3C4}\u{3AE}\u{3C3}\u{3C4}\u{3B5} Enter \u{3B3}\u{3B9}\u{3B1} \u{3AD}\u{3BD}\u{3B1}\u{3C1}\u{3BE}\u{3B7} \u{3C4}\u{3B7}\u{3C2} \u{3B1}\u{3BB}\u{3BB}\u{3B1}\u{3B3}\u{3AE}\u{3C2} \u{3BC}\u{3B5}\u{3B3}\u{3AD}\u{3B8}\u{3BF}\u{3C5}\u{3C2}`,
    "select": `\u{395}\u{3C0}\u{3B9}\u{3BB}\u{3BF}\u{3B3}\u{3AE}`,
    "selectAll": `\u{395}\u{3C0}\u{3B9}\u{3BB}\u{3BF}\u{3B3}\u{3AE} \u{3CC}\u{3BB}\u{3C9}\u{3BD}`,
    "sortable": `\u{3A3}\u{3C4}\u{3AE}\u{3BB}\u{3B7} \u{3B4}\u{3B9}\u{3B1}\u{3BB}\u{3BF}\u{3B3}\u{3AE}\u{3C2}`
};

var $09e6b82e0d6e466a$exports = {};
$09e6b82e0d6e466a$exports = {
    "select": `Select`,
    "selectAll": `Select All`,
    "sortable": `sortable column`,
    "ascending": `ascending`,
    "descending": `descending`,
    "ascendingSort": (args)=>`sorted by column ${args.columnName} in ascending order`,
    "descendingSort": (args)=>`sorted by column ${args.columnName} in descending order`,
    "columnSize": (args)=>`${args.value} pixels`,
    "resizerDescription": `Press Enter to start resizing`
};

var $8cc39eb66c2bf220$exports = {};
$8cc39eb66c2bf220$exports = {
    "ascending": `de subida`,
    "ascendingSort": (args)=>`ordenado por columna ${args.columnName} en orden de subida`,
    "columnSize": (args)=>`${args.value} p\xedxeles`,
    "descending": `de bajada`,
    "descendingSort": (args)=>`ordenado por columna ${args.columnName} en orden de bajada`,
    "resizerDescription": `Pulse Intro para empezar a redimensionar`,
    "select": `Seleccionar`,
    "selectAll": `Seleccionar todos`,
    "sortable": `columna ordenable`
};

var $4e11db3c25a38112$exports = {};
$4e11db3c25a38112$exports = {
    "ascending": `t\xf5usev j\xe4rjestus`,
    "ascendingSort": (args)=>`sorditud veeru j\xe4rgi ${args.columnName} t\xf5usvas j\xe4rjestuses`,
    "columnSize": (args)=>`${args.value} pikslit`,
    "descending": `laskuv j\xe4rjestus`,
    "descendingSort": (args)=>`sorditud veeru j\xe4rgi ${args.columnName} laskuvas j\xe4rjestuses`,
    "resizerDescription": `Suuruse muutmise alustamiseks vajutage klahvi Enter`,
    "select": `Vali`,
    "selectAll": `Vali k\xf5ik`,
    "sortable": `sorditav veerg`
};

var $da1e751a92575e02$exports = {};
$da1e751a92575e02$exports = {
    "ascending": `nouseva`,
    "ascendingSort": (args)=>`lajiteltu sarakkeen ${args.columnName} mukaan nousevassa j\xe4rjestyksess\xe4`,
    "columnSize": (args)=>`${args.value} pikseli\xe4`,
    "descending": `laskeva`,
    "descendingSort": (args)=>`lajiteltu sarakkeen ${args.columnName} mukaan laskevassa j\xe4rjestyksess\xe4`,
    "resizerDescription": `Aloita koon muutos painamalla Enter-n\xe4pp\xe4int\xe4`,
    "select": `Valitse`,
    "selectAll": `Valitse kaikki`,
    "sortable": `lajiteltava sarake`
};

var $1b5d6c6c47d55106$exports = {};
$1b5d6c6c47d55106$exports = {
    "ascending": `croissant`,
    "ascendingSort": (args)=>`tri\xe9 en fonction de la colonne\xa0${args.columnName} par ordre croissant`,
    "columnSize": (args)=>`${args.value}\xa0pixels`,
    "descending": `d\xe9croissant`,
    "descendingSort": (args)=>`tri\xe9 en fonction de la colonne\xa0${args.columnName} par ordre d\xe9croissant`,
    "resizerDescription": `Appuyez sur Entr\xe9e pour commencer le redimensionnement.`,
    "select": `S\xe9lectionner`,
    "selectAll": `S\xe9lectionner tout`,
    "sortable": `colonne triable`
};

var $7c18ba27b86d3308$exports = {};
$7c18ba27b86d3308$exports = {
    "ascending": `\u{5E2}\u{5D5}\u{5DC}\u{5D4}`,
    "ascendingSort": (args)=>`\u{5DE}\u{5D5}\u{5D9}\u{5DF} \u{5DC}\u{5E4}\u{5D9} \u{5E2}\u{5DE}\u{5D5}\u{5D3}\u{5D4} ${args.columnName} \u{5D1}\u{5E1}\u{5D3}\u{5E8} \u{5E2}\u{5D5}\u{5DC}\u{5D4}`,
    "columnSize": (args)=>`${args.value} \u{5E4}\u{5D9}\u{5E7}\u{5E1}\u{5DC}\u{5D9}\u{5DD}`,
    "descending": `\u{5D9}\u{5D5}\u{5E8}\u{5D3}`,
    "descendingSort": (args)=>`\u{5DE}\u{5D5}\u{5D9}\u{5DF} \u{5DC}\u{5E4}\u{5D9} \u{5E2}\u{5DE}\u{5D5}\u{5D3}\u{5D4} ${args.columnName} \u{5D1}\u{5E1}\u{5D3}\u{5E8} \u{5D9}\u{5D5}\u{5E8}\u{5D3}`,
    "resizerDescription": `\u{5D4}\u{5E7}\u{5E9} Enter \u{5DB}\u{5D3}\u{5D9} \u{5DC}\u{5E9}\u{5E0}\u{5D5}\u{5EA} \u{5D0}\u{5EA} \u{5D4}\u{5D2}\u{5D5}\u{5D3}\u{5DC}`,
    "select": `\u{5D1}\u{5D7}\u{5E8}`,
    "selectAll": `\u{5D1}\u{5D7}\u{5E8} \u{5D4}\u{5DB}\u{5D5}\u{5DC}`,
    "sortable": `\u{5E2}\u{5DE}\u{5D5}\u{5D3}\u{5D4} \u{5E9}\u{5E0}\u{5D9}\u{5EA}\u{5DF} \u{5DC}\u{5DE}\u{5D9}\u{5D9}\u{5DF}`
};

var $2cb40998e20e8a46$exports = {};
$2cb40998e20e8a46$exports = {
    "ascending": `rastu\u{107}i`,
    "ascendingSort": (args)=>`razvrstano po stupcima ${args.columnName} rastu\u{107}em redoslijedom`,
    "columnSize": (args)=>`${args.value} piksela`,
    "descending": `padaju\u{107}i`,
    "descendingSort": (args)=>`razvrstano po stupcima ${args.columnName} padaju\u{107}im redoslijedom`,
    "resizerDescription": `Pritisnite Enter da biste zapo\u{10D}eli promenu veli\u{10D}ine`,
    "select": `Odaberite`,
    "selectAll": `Odaberite sve`,
    "sortable": `stupac koji se mo\u{17E}e razvrstati`
};

var $189e23eec1d6aa3a$exports = {};
$189e23eec1d6aa3a$exports = {
    "ascending": `n\xf6vekv\u{151}`,
    "ascendingSort": (args)=>`rendezve a(z) ${args.columnName} oszlop szerint, n\xf6vekv\u{151} sorrendben`,
    "columnSize": (args)=>`${args.value} k\xe9ppont`,
    "descending": `cs\xf6kken\u{151}`,
    "descendingSort": (args)=>`rendezve a(z) ${args.columnName} oszlop szerint, cs\xf6kken\u{151} sorrendben`,
    "resizerDescription": `Nyomja le az Enter billenty\u{171}t az \xe1tm\xe9retez\xe9s megkezd\xe9s\xe9hez`,
    "select": `Kijel\xf6l\xe9s`,
    "selectAll": `\xd6sszes kijel\xf6l\xe9se`,
    "sortable": `rendezend\u{151} oszlop`
};

var $3c5ec8e4f015dfd0$exports = {};
$3c5ec8e4f015dfd0$exports = {
    "ascending": `crescente`,
    "ascendingSort": (args)=>`in ordine crescente in base alla colonna ${args.columnName}`,
    "columnSize": (args)=>`${args.value} pixel`,
    "descending": `decrescente`,
    "descendingSort": (args)=>`in ordine decrescente in base alla colonna ${args.columnName}`,
    "resizerDescription": `Premi Invio per iniziare a ridimensionare`,
    "select": `Seleziona`,
    "selectAll": `Seleziona tutto`,
    "sortable": `colonna ordinabile`
};

var $d021d50e6b315ebb$exports = {};
$d021d50e6b315ebb$exports = {
    "ascending": `\u{6607}\u{9806}`,
    "ascendingSort": (args)=>`\u{5217} ${args.columnName} \u{3092}\u{6607}\u{9806}\u{3067}\u{4E26}\u{3079}\u{66FF}\u{3048}`,
    "columnSize": (args)=>`${args.value} \u{30D4}\u{30AF}\u{30BB}\u{30EB}`,
    "descending": `\u{964D}\u{9806}`,
    "descendingSort": (args)=>`\u{5217} ${args.columnName} \u{3092}\u{964D}\u{9806}\u{3067}\u{4E26}\u{3079}\u{66FF}\u{3048}`,
    "resizerDescription": `Enter \u{30AD}\u{30FC}\u{3092}\u{62BC}\u{3057}\u{3066}\u{30B5}\u{30A4}\u{30BA}\u{5909}\u{66F4}\u{3092}\u{958B}\u{59CB}`,
    "select": `\u{9078}\u{629E}`,
    "selectAll": `\u{3059}\u{3079}\u{3066}\u{9078}\u{629E}`,
    "sortable": `\u{4E26}\u{3079}\u{66FF}\u{3048}\u{53EF}\u{80FD}\u{306A}\u{5217}`
};

var $52535c35c24ec937$exports = {};
$52535c35c24ec937$exports = {
    "ascending": `\u{C624}\u{B984}\u{CC28}\u{C21C}`,
    "ascendingSort": (args)=>`${args.columnName} \u{C5F4}\u{C744} \u{AE30}\u{C900}\u{C73C}\u{B85C} \u{C624}\u{B984}\u{CC28}\u{C21C}\u{C73C}\u{B85C} \u{C815}\u{B82C}\u{B428}`,
    "columnSize": (args)=>`${args.value} \u{D53D}\u{C140}`,
    "descending": `\u{B0B4}\u{B9BC}\u{CC28}\u{C21C}`,
    "descendingSort": (args)=>`${args.columnName} \u{C5F4}\u{C744} \u{AE30}\u{C900}\u{C73C}\u{B85C} \u{B0B4}\u{B9BC}\u{CC28}\u{C21C}\u{C73C}\u{B85C} \u{C815}\u{B82C}\u{B428}`,
    "resizerDescription": `\u{D06C}\u{AE30} \u{C870}\u{C815}\u{C744} \u{C2DC}\u{C791}\u{D558}\u{B824}\u{BA74} Enter\u{B97C} \u{B204}\u{B974}\u{C138}\u{C694}.`,
    "select": `\u{C120}\u{D0DD}`,
    "selectAll": `\u{BAA8}\u{B450} \u{C120}\u{D0DD}`,
    "sortable": `\u{C815}\u{B82C} \u{AC00}\u{B2A5}\u{D55C} \u{C5F4}`
};

var $b37ee03672edfd1d$exports = {};
$b37ee03672edfd1d$exports = {
    "ascending": `did\u{117}jan\u{10D}ia tvarka`,
    "ascendingSort": (args)=>`surikiuota pagal stulpel\u{12F} ${args.columnName} did\u{117}jan\u{10D}ia tvarka`,
    "columnSize": (args)=>`${args.value} piks.`,
    "descending": `ma\u{17E}\u{117}jan\u{10D}ia tvarka`,
    "descendingSort": (args)=>`surikiuota pagal stulpel\u{12F} ${args.columnName} ma\u{17E}\u{117}jan\u{10D}ia tvarka`,
    "resizerDescription": `Paspauskite \u{201E}Enter\u{201C}, kad prad\u{117}tum\u{117}te keisti dyd\u{12F}`,
    "select": `Pasirinkti`,
    "selectAll": `Pasirinkti visk\u{105}`,
    "sortable": `rikiuojamas stulpelis`
};

var $c7df6686b4189d56$exports = {};
$c7df6686b4189d56$exports = {
    "ascending": `augo\u{161}\u{101} sec\u{12B}b\u{101}`,
    "ascendingSort": (args)=>`k\u{101}rtots p\u{113}c kolonnas ${args.columnName} augo\u{161}\u{101} sec\u{12B}b\u{101}`,
    "columnSize": (args)=>`${args.value} pikse\u{13C}i`,
    "descending": `dilsto\u{161}\u{101} sec\u{12B}b\u{101}`,
    "descendingSort": (args)=>`k\u{101}rtots p\u{113}c kolonnas ${args.columnName} dilsto\u{161}\u{101} sec\u{12B}b\u{101}`,
    "resizerDescription": `Nospiediet Enter, lai s\u{101}ktu izm\u{113}ru main\u{12B}\u{161}anu`,
    "select": `Atlas\u{12B}t`,
    "selectAll": `Atlas\u{12B}t visu`,
    "sortable": `k\u{101}rtojam\u{101} kolonna`
};

var $da07fe8ec87e6b68$exports = {};
$da07fe8ec87e6b68$exports = {
    "ascending": `stigende`,
    "ascendingSort": (args)=>`sortert etter kolonne ${args.columnName} i stigende rekkef\xf8lge`,
    "columnSize": (args)=>`${args.value} piksler`,
    "descending": `synkende`,
    "descendingSort": (args)=>`sortert etter kolonne ${args.columnName} i synkende rekkef\xf8lge`,
    "resizerDescription": `Trykk p\xe5 Enter for \xe5 starte st\xf8rrelsesendring`,
    "select": `Velg`,
    "selectAll": `Velg alle`,
    "sortable": `kolonne som kan sorteres`
};

var $64b7e390f5791490$exports = {};
$64b7e390f5791490$exports = {
    "ascending": `oplopend`,
    "ascendingSort": (args)=>`gesorteerd in oplopende volgorde in kolom ${args.columnName}`,
    "columnSize": (args)=>`${args.value} pixels`,
    "descending": `aflopend`,
    "descendingSort": (args)=>`gesorteerd in aflopende volgorde in kolom ${args.columnName}`,
    "resizerDescription": `Druk op Enter om het formaat te wijzigen`,
    "select": `Selecteren`,
    "selectAll": `Alles selecteren`,
    "sortable": `sorteerbare kolom`
};

var $2a03621e773f1678$exports = {};
$2a03621e773f1678$exports = {
    "ascending": `rosn\u{105}co`,
    "ascendingSort": (args)=>`posortowano wed\u{142}ug kolumny ${args.columnName} w porz\u{105}dku rosn\u{105}cym`,
    "columnSize": (args)=>`Liczba pikseli: ${args.value}`,
    "descending": `malej\u{105}co`,
    "descendingSort": (args)=>`posortowano wed\u{142}ug kolumny ${args.columnName} w porz\u{105}dku malej\u{105}cym`,
    "resizerDescription": `Naci\u{15B}nij Enter, aby rozpocz\u{105}\u{107} zmienianie rozmiaru`,
    "select": `Zaznacz`,
    "selectAll": `Zaznacz wszystko`,
    "sortable": `kolumna z mo\u{17C}liwo\u{15B}ci\u{105} sortowania`
};

var $0a79c0aba9e5ecc6$exports = {};
$0a79c0aba9e5ecc6$exports = {
    "ascending": `crescente`,
    "ascendingSort": (args)=>`classificado pela coluna ${args.columnName} em ordem crescente`,
    "columnSize": (args)=>`${args.value} pixels`,
    "descending": `decrescente`,
    "descendingSort": (args)=>`classificado pela coluna ${args.columnName} em ordem decrescente`,
    "resizerDescription": `Pressione Enter para come\xe7ar a redimensionar`,
    "select": `Selecionar`,
    "selectAll": `Selecionar tudo`,
    "sortable": `coluna classific\xe1vel`
};

var $de7b4d0f7dc86fc8$exports = {};
$de7b4d0f7dc86fc8$exports = {
    "ascending": `ascendente`,
    "ascendingSort": (args)=>`Ordenar por coluna ${args.columnName} em ordem ascendente`,
    "columnSize": (args)=>`${args.value} pixels`,
    "descending": `descendente`,
    "descendingSort": (args)=>`Ordenar por coluna ${args.columnName} em ordem descendente`,
    "resizerDescription": `Prima Enter para iniciar o redimensionamento`,
    "select": `Selecionar`,
    "selectAll": `Selecionar tudo`,
    "sortable": `Coluna orden\xe1vel`
};

var $28ea7e849d77bd1c$exports = {};
$28ea7e849d77bd1c$exports = {
    "ascending": `cresc\u{103}toare`,
    "ascendingSort": (args)=>`sortate dup\u{103} coloana ${args.columnName} \xeen ordine cresc\u{103}toare`,
    "columnSize": (args)=>`${args.value} pixeli`,
    "descending": `descresc\u{103}toare`,
    "descendingSort": (args)=>`sortate dup\u{103} coloana ${args.columnName} \xeen ordine descresc\u{103}toare`,
    "resizerDescription": `Ap\u{103}sa\u{21B}i pe Enter pentru a \xeencepe redimensionarea`,
    "select": `Selectare`,
    "selectAll": `Selectare total\u{103}`,
    "sortable": `coloan\u{103} sortabil\u{103}`
};

var $9a09321cf046b187$exports = {};
$9a09321cf046b187$exports = {
    "ascending": `\u{432}\u{43E}\u{437}\u{440}\u{430}\u{441}\u{442}\u{430}\u{43D}\u{438}\u{435}`,
    "ascendingSort": (args)=>`\u{441}\u{43E}\u{440}\u{442}\u{438}\u{440}\u{43E}\u{432}\u{430}\u{442}\u{44C} \u{441}\u{442}\u{43E}\u{43B}\u{431}\u{435}\u{446} ${args.columnName} \u{432} \u{43F}\u{43E}\u{440}\u{44F}\u{434}\u{43A}\u{435} \u{432}\u{43E}\u{437}\u{440}\u{430}\u{441}\u{442}\u{430}\u{43D}\u{438}\u{44F}`,
    "columnSize": (args)=>`${args.value} \u{43F}\u{438}\u{43A}\u{441}.`,
    "descending": `\u{443}\u{431}\u{44B}\u{432}\u{430}\u{43D}\u{438}\u{435}`,
    "descendingSort": (args)=>`\u{441}\u{43E}\u{440}\u{442}\u{438}\u{440}\u{43E}\u{432}\u{430}\u{442}\u{44C} \u{441}\u{442}\u{43E}\u{43B}\u{431}\u{435}\u{446} ${args.columnName} \u{432} \u{43F}\u{43E}\u{440}\u{44F}\u{434}\u{43A}\u{435} \u{443}\u{431}\u{44B}\u{432}\u{430}\u{43D}\u{438}\u{44F}`,
    "resizerDescription": `\u{41D}\u{430}\u{436}\u{43C}\u{438}\u{442}\u{435} \u{43A}\u{43B}\u{430}\u{432}\u{438}\u{448}\u{443} Enter \u{434}\u{43B}\u{44F} \u{43D}\u{430}\u{447}\u{430}\u{43B}\u{430} \u{438}\u{437}\u{43C}\u{435}\u{43D}\u{435}\u{43D}\u{438}\u{44F} \u{440}\u{430}\u{437}\u{43C}\u{435}\u{440}\u{43E}\u{432}`,
    "select": `\u{412}\u{44B}\u{431}\u{440}\u{430}\u{442}\u{44C}`,
    "selectAll": `\u{412}\u{44B}\u{431}\u{440}\u{430}\u{442}\u{44C} \u{432}\u{441}\u{435}`,
    "sortable": `\u{441}\u{43E}\u{440}\u{442}\u{438}\u{440}\u{443}\u{435}\u{43C}\u{44B}\u{439} \u{441}\u{442}\u{43E}\u{43B}\u{431}\u{435}\u{446}`
};

var $5afe469a63fcac7b$exports = {};
$5afe469a63fcac7b$exports = {
    "ascending": `vzostupne`,
    "ascendingSort": (args)=>`zoraden\xe9 zostupne pod\u{13E}a st\u{13A}pca ${args.columnName}`,
    "columnSize": (args)=>`Po\u{10D}et pixelov: ${args.value}`,
    "descending": `zostupne`,
    "descendingSort": (args)=>`zoraden\xe9 zostupne pod\u{13E}a st\u{13A}pca ${args.columnName}`,
    "resizerDescription": `Stla\u{10D}en\xedm kl\xe1vesu Enter za\u{10D}nete zmenu ve\u{13E}kosti`,
    "select": `Vybra\u{165}`,
    "selectAll": `Vybra\u{165} v\u{161}etko`,
    "sortable": `zoradite\u{13E}n\xfd st\u{13A}pec`
};

var $2956757ac31a7ce2$exports = {};
$2956757ac31a7ce2$exports = {
    "ascending": `nara\u{161}\u{10D}ajo\u{10D}e`,
    "ascendingSort": (args)=>`razvr\u{161}\u{10D}eno po stolpcu ${args.columnName} v nara\u{161}\u{10D}ajo\u{10D}em vrstnem redu`,
    "columnSize": (args)=>`${args.value} slikovnih pik`,
    "descending": `padajo\u{10D}e`,
    "descendingSort": (args)=>`razvr\u{161}\u{10D}eno po stolpcu ${args.columnName} v padajo\u{10D}em vrstnem redu`,
    "resizerDescription": `Pritisnite tipko Enter da za\u{10D}nete spreminjati velikost`,
    "select": `Izberite`,
    "selectAll": `Izberite vse`,
    "sortable": `razvrstljivi stolpec`
};

var $cedee0e66b175529$exports = {};
$cedee0e66b175529$exports = {
    "ascending": `rastu\u{107}i`,
    "ascendingSort": (args)=>`sortirano po kolonama ${args.columnName} rastu\u{107}im redosledom`,
    "columnSize": (args)=>`${args.value} piksela`,
    "descending": `padaju\u{107}i`,
    "descendingSort": (args)=>`sortirano po kolonama ${args.columnName} padaju\u{107}im redosledom`,
    "resizerDescription": `Pritisnite Enter da biste zapo\u{10D}eli promenu veli\u{10D}ine`,
    "select": `Izaberite`,
    "selectAll": `Izaberite sve`,
    "sortable": `kolona koja se mo\u{17E}e sortirati`
};

var $6db19998ba4427da$exports = {};
$6db19998ba4427da$exports = {
    "ascending": `stigande`,
    "ascendingSort": (args)=>`sorterat p\xe5 kolumn ${args.columnName} i stigande ordning`,
    "columnSize": (args)=>`${args.value} pixlar`,
    "descending": `fallande`,
    "descendingSort": (args)=>`sorterat p\xe5 kolumn ${args.columnName} i fallande ordning`,
    "resizerDescription": `Tryck p\xe5 Retur f\xf6r att b\xf6rja \xe4ndra storlek`,
    "select": `Markera`,
    "selectAll": `Markera allt`,
    "sortable": `sorterbar kolumn`
};

var $166b7c9cc1adb1a1$exports = {};
$166b7c9cc1adb1a1$exports = {
    "ascending": `artan s\u{131}rada`,
    "ascendingSort": (args)=>`${args.columnName} s\xfctuna g\xf6re artan d\xfczende s\u{131}rala`,
    "columnSize": (args)=>`${args.value} piksel`,
    "descending": `azalan s\u{131}rada`,
    "descendingSort": (args)=>`${args.columnName} s\xfctuna g\xf6re azalan d\xfczende s\u{131}rala`,
    "resizerDescription": `Yeniden boyutland\u{131}rmak i\xe7in Enter'a bas\u{131}n`,
    "select": `Se\xe7`,
    "selectAll": `T\xfcm\xfcn\xfc Se\xe7`,
    "sortable": `S\u{131}ralanabilir s\xfctun`
};

var $c7ab180b401e49ff$exports = {};
$c7ab180b401e49ff$exports = {
    "ascending": `\u{432}\u{438}\u{441}\u{445}\u{456}\u{434}\u{43D}\u{438}\u{439}`,
    "ascendingSort": (args)=>`\u{432}\u{456}\u{434}\u{441}\u{43E}\u{440}\u{442}\u{43E}\u{432}\u{430}\u{43D}\u{43E} \u{437}\u{430} \u{441}\u{442}\u{43E}\u{432}\u{43F}\u{446}\u{435}\u{43C} ${args.columnName} \u{443} \u{432}\u{438}\u{441}\u{445}\u{456}\u{434}\u{43D}\u{43E}\u{43C}\u{443} \u{43F}\u{43E}\u{440}\u{44F}\u{434}\u{43A}\u{443}`,
    "columnSize": (args)=>`${args.value} \u{43F}\u{456}\u{43A}\u{441}.`,
    "descending": `\u{43D}\u{438}\u{437}\u{445}\u{456}\u{434}\u{43D}\u{438}\u{439}`,
    "descendingSort": (args)=>`\u{432}\u{456}\u{434}\u{441}\u{43E}\u{440}\u{442}\u{43E}\u{432}\u{430}\u{43D}\u{43E} \u{437}\u{430} \u{441}\u{442}\u{43E}\u{432}\u{43F}\u{446}\u{435}\u{43C} ${args.columnName} \u{443} \u{43D}\u{438}\u{437}\u{445}\u{456}\u{434}\u{43D}\u{43E}\u{43C}\u{443} \u{43F}\u{43E}\u{440}\u{44F}\u{434}\u{43A}\u{443}`,
    "resizerDescription": `\u{41D}\u{430}\u{442}\u{438}\u{441}\u{43D}\u{456}\u{442}\u{44C} Enter, \u{449}\u{43E}\u{431} \u{43F}\u{43E}\u{447}\u{430}\u{442}\u{438} \u{437}\u{43C}\u{456}\u{43D}\u{443} \u{440}\u{43E}\u{437}\u{43C}\u{456}\u{440}\u{443}`,
    "select": `\u{412}\u{438}\u{431}\u{440}\u{430}\u{442}\u{438}`,
    "selectAll": `\u{412}\u{438}\u{431}\u{440}\u{430}\u{442}\u{438} \u{432}\u{441}\u{435}`,
    "sortable": `\u{441}\u{43E}\u{440}\u{442}\u{443}\u{432}\u{430}\u{43B}\u{44C}\u{43D}\u{438}\u{439} \u{441}\u{442}\u{43E}\u{432}\u{43F}\u{435}\u{446}\u{44C}`
};

var $1648ec00941567f3$exports = {};
$1648ec00941567f3$exports = {
    "ascending": `\u{5347}\u{5E8F}`,
    "ascendingSort": (args)=>`\u{6309}\u{5217} ${args.columnName} \u{5347}\u{5E8F}\u{6392}\u{5E8F}`,
    "columnSize": (args)=>`${args.value} \u{50CF}\u{7D20}`,
    "descending": `\u{964D}\u{5E8F}`,
    "descendingSort": (args)=>`\u{6309}\u{5217} ${args.columnName} \u{964D}\u{5E8F}\u{6392}\u{5E8F}`,
    "resizerDescription": `\u{6309}\u{201C}\u{8F93}\u{5165}\u{201D}\u{952E}\u{5F00}\u{59CB}\u{8C03}\u{6574}\u{5927}\u{5C0F}\u{3002}`,
    "select": `\u{9009}\u{62E9}`,
    "selectAll": `\u{5168}\u{9009}`,
    "sortable": `\u{53EF}\u{6392}\u{5E8F}\u{7684}\u{5217}`
};

var $b26f22384b3c1526$exports = {};
$b26f22384b3c1526$exports = {
    "ascending": `\u{905E}\u{589E}`,
    "ascendingSort": (args)=>`\u{5DF2}\u{4F9D}\u{64DA}\u{300C}${args.columnName}\u{300D}\u{6B04}\u{905E}\u{589E}\u{6392}\u{5E8F}`,
    "columnSize": (args)=>`${args.value} \u{50CF}\u{7D20}`,
    "descending": `\u{905E}\u{6E1B}`,
    "descendingSort": (args)=>`\u{5DF2}\u{4F9D}\u{64DA}\u{300C}${args.columnName}\u{300D}\u{6B04}\u{905E}\u{6E1B}\u{6392}\u{5E8F}`,
    "resizerDescription": `\u{6309} Enter \u{9375}\u{4EE5}\u{958B}\u{59CB}\u{8ABF}\u{6574}\u{5927}\u{5C0F}`,
    "select": `\u{9078}\u{53D6}`,
    "selectAll": `\u{5168}\u{9078}`,
    "sortable": `\u{53EF}\u{6392}\u{5E8F}\u{7684}\u{6B04}`
};

var $7476b46781682bf5$exports = {};


































$7476b46781682bf5$exports = {
    "ar-AE": $ce3de3ff2fd66848$exports,
    "bg-BG": $cb80dcce530985b9$exports,
    "cs-CZ": $68ac86749db4c0fb$exports,
    "da-DK": $9a6cbac08487e661$exports,
    "de-DE": $c963661d89486e72$exports,
    "el-GR": $ac03861c6e8605f4$exports,
    "en-US": $09e6b82e0d6e466a$exports,
    "es-ES": $8cc39eb66c2bf220$exports,
    "et-EE": $4e11db3c25a38112$exports,
    "fi-FI": $da1e751a92575e02$exports,
    "fr-FR": $1b5d6c6c47d55106$exports,
    "he-IL": $7c18ba27b86d3308$exports,
    "hr-HR": $2cb40998e20e8a46$exports,
    "hu-HU": $189e23eec1d6aa3a$exports,
    "it-IT": $3c5ec8e4f015dfd0$exports,
    "ja-JP": $d021d50e6b315ebb$exports,
    "ko-KR": $52535c35c24ec937$exports,
    "lt-LT": $b37ee03672edfd1d$exports,
    "lv-LV": $c7df6686b4189d56$exports,
    "nb-NO": $da07fe8ec87e6b68$exports,
    "nl-NL": $64b7e390f5791490$exports,
    "pl-PL": $2a03621e773f1678$exports,
    "pt-BR": $0a79c0aba9e5ecc6$exports,
    "pt-PT": $de7b4d0f7dc86fc8$exports,
    "ro-RO": $28ea7e849d77bd1c$exports,
    "ru-RU": $9a09321cf046b187$exports,
    "sk-SK": $5afe469a63fcac7b$exports,
    "sl-SI": $2956757ac31a7ce2$exports,
    "sr-SP": $cedee0e66b175529$exports,
    "sv-SE": $6db19998ba4427da$exports,
    "tr-TR": $166b7c9cc1adb1a1$exports,
    "uk-UA": $c7ab180b401e49ff$exports,
    "zh-CN": $1648ec00941567f3$exports,
    "zh-TW": $b26f22384b3c1526$exports
};

/*
 * Copyright 2022 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 

class $0ba3c81c7f1caedd$export$da43f8f5cb04028d extends ($d1c300d9c497e402$export$de9feff04fda126e) {
    isCell(node) {
        return node.type === 'cell' || node.type === 'rowheader' || node.type === 'column';
    }
    getKeyBelow(key) {
        let startItem = this.collection.getItem(key);
        if (!startItem) return;
        // If focus was on a column, then focus the first child column if any,
        // or find the corresponding cell in the first row.
        if (startItem.type === 'column') {
            let child = ($c5a24bc478652b5f$export$fbdeaa6a76694f71)(($c5a24bc478652b5f$export$1005530eda016c13)(startItem, this.collection));
            if (child) return child.key;
            let firstKey = this.getFirstKey();
            if (firstKey == null) return;
            let firstItem = this.collection.getItem(firstKey);
            return ($c5a24bc478652b5f$export$5f3398f8733f90e2)(($c5a24bc478652b5f$export$1005530eda016c13)(firstItem, this.collection), startItem.index).key;
        }
        return super.getKeyBelow(key);
    }
    getKeyAbove(key) {
        let startItem = this.collection.getItem(key);
        if (!startItem) return;
        // If focus was on a column, focus the parent column if any
        if (startItem.type === 'column') {
            let parent = this.collection.getItem(startItem.parentKey);
            if (parent && parent.type === 'column') return parent.key;
            return;
        }
        // only return above row key if not header row
        let superKey = super.getKeyAbove(key);
        if (superKey != null && this.collection.getItem(superKey).type !== 'headerrow') return superKey;
        // If no item was found, and focus was on a cell, then focus the
        // corresponding column header.
        if (this.isCell(startItem)) return this.collection.columns[startItem.index].key;
        // If focus was on a row, then focus the first column header.
        return this.collection.columns[0].key;
    }
    findNextColumnKey(column) {
        // Search following columns
        let key = this.findNextKey(column.key, (item)=>item.type === 'column');
        if (key != null) return key;
        // Wrap around to the first column
        let row = this.collection.headerRows[column.level];
        for (let item of ($c5a24bc478652b5f$export$1005530eda016c13)(row, this.collection)){
            if (item.type === 'column') return item.key;
        }
    }
    findPreviousColumnKey(column) {
        // Search previous columns
        let key = this.findPreviousKey(column.key, (item)=>item.type === 'column');
        if (key != null) return key;
        // Wrap around to the last column
        let row = this.collection.headerRows[column.level];
        let childNodes = [
            ...($c5a24bc478652b5f$export$1005530eda016c13)(row, this.collection)
        ];
        for(let i = childNodes.length - 1; i >= 0; i--){
            let item = childNodes[i];
            if (item.type === 'column') return item.key;
        }
    }
    getKeyRightOf(key) {
        let item = this.collection.getItem(key);
        if (!item) return;
        // If focus was on a column, then focus the next column
        if (item.type === 'column') return this.direction === 'rtl' ? this.findPreviousColumnKey(item) : this.findNextColumnKey(item);
        return super.getKeyRightOf(key);
    }
    getKeyLeftOf(key) {
        let item = this.collection.getItem(key);
        if (!item) return;
        // If focus was on a column, then focus the previous column
        if (item.type === 'column') return this.direction === 'rtl' ? this.findNextColumnKey(item) : this.findPreviousColumnKey(item);
        return super.getKeyLeftOf(key);
    }
    getKeyForSearch(search, fromKey) {
        if (!this.collator) return null;
        let collection = this.collection;
        let key = fromKey !== null && fromKey !== void 0 ? fromKey : this.getFirstKey();
        if (key == null) return null;
        // If the starting key is a cell, search from its parent row.
        let startItem = collection.getItem(key);
        if (startItem.type === 'cell') key = startItem.parentKey;
        let hasWrapped = false;
        while(key != null){
            let item = collection.getItem(key);
            // Check each of the row header cells in this row for a match
            for (let cell of ($c5a24bc478652b5f$export$1005530eda016c13)(item, this.collection)){
                let column = collection.columns[cell.index];
                if (collection.rowHeaderColumnKeys.has(column.key) && cell.textValue) {
                    let substring = cell.textValue.slice(0, search.length);
                    if (this.collator.compare(substring, search) === 0) {
                        // If we started on a cell, end on the matching cell. Otherwise, end on the row.
                        let fromItem = fromKey != null ? collection.getItem(fromKey) : startItem;
                        return fromItem.type === 'cell' ? cell.key : item.key;
                    }
                }
            }
            key = this.getKeyBelow(key);
            // Wrap around when reaching the end of the collection
            if (key == null && !hasWrapped) {
                key = this.getFirstKey();
                hasWrapped = true;
            }
        }
        return null;
    }
}

/*
 * Copyright 2023 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ let $f4e2df6bd15f8569$var$_tableNestedRows = false;
function $f4e2df6bd15f8569$export$1b00cb14a96194e6() {
    return $f4e2df6bd15f8569$var$_tableNestedRows;
}

function $parcel$interopDefault$5(a) {
  return a && a.__esModule ? a.default : a;
}
/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 








function $6e31608fbba75bab$export$25bceaac3c7e4dc7(props, state, ref) {
    let { keyboardDelegate: keyboardDelegate, isVirtualized: isVirtualized, layoutDelegate: layoutDelegate, layout: layout } = props;
    // By default, a KeyboardDelegate is provided which uses the DOM to query layout information (e.g. for page up/page down).
    // When virtualized, the layout object will be passed in as a prop and override this.
    let collator = ($325a3faab7a68acd$export$a16aca283550c30d)({
        usage: 'search',
        sensitivity: 'base'
    });
    let { direction: direction } = ($18f2051aff69b9bf$export$43bb16f9c6d9e3f7)();
    let disabledBehavior = state.selectionManager.disabledBehavior;
    let delegate = (reactExports.useMemo)(()=>keyboardDelegate || new ($0ba3c81c7f1caedd$export$da43f8f5cb04028d)({
            collection: state.collection,
            disabledKeys: state.disabledKeys,
            disabledBehavior: disabledBehavior,
            ref: ref,
            direction: direction,
            collator: collator,
            layoutDelegate: layoutDelegate,
            layout: layout
        }), [
        keyboardDelegate,
        state.collection,
        state.disabledKeys,
        disabledBehavior,
        ref,
        direction,
        collator,
        layoutDelegate,
        layout
    ]);
    let id = ($bdb11010cef70236$export$f680877a34711e37)(props.id);
    ($2140fb2337097f2d$export$552312adfd451dab).set(state, id);
    let { gridProps: gridProps } = ($83c6e2eafa584c67$export$f6b86a04e5d66d90)({
        ...props,
        id: id,
        keyboardDelegate: delegate
    }, state, ref);
    // Override to include header rows
    if (isVirtualized) gridProps['aria-rowcount'] = state.collection.size + state.collection.headerRows.length;
    if (($f4e2df6bd15f8569$export$1b00cb14a96194e6)() && 'expandedKeys' in state) gridProps.role = 'treegrid';
    let { column: column, direction: sortDirection } = state.sortDescriptor || {};
    let stringFormatter = ($fca6afa0e843324b$export$f12b703ca79dfbb1)((($parcel$interopDefault$5($7476b46781682bf5$exports))), '@react-aria/table');
    let sortDescription = (reactExports.useMemo)(()=>{
        var _state_collection_columns_find;
        let columnName = (_state_collection_columns_find = state.collection.columns.find((c)=>c.key === column)) === null || _state_collection_columns_find === void 0 ? void 0 : _state_collection_columns_find.textValue;
        return sortDirection && column ? stringFormatter.format(`${sortDirection}Sort`, {
            columnName: columnName
        }) : undefined;
    // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [
        sortDirection,
        column,
        state.collection.columns
    ]);
    let descriptionProps = ($ef06256079686ba0$export$f8aeda7b10753fa1)(sortDescription);
    // Only announce after initial render, tabbing to the table will tell you the initial sort info already
    ($4f58c5f72bcf79f7$export$496315a1608d9602)(()=>{
        ($319e236875307eab$export$a9b970dcc4ae71a9)(sortDescription, 'assertive', 500);
    }, [
        sortDescription
    ]);
    return {
        gridProps: ($3ef42575df84b30b$export$9d1611c77c2fe928)(gridProps, descriptionProps, {
            // merge sort description with long press information
            'aria-describedby': [
                descriptionProps['aria-describedby'],
                gridProps['aria-describedby']
            ].filter(Boolean).join(' ')
        })
    };
}

function $parcel$interopDefault$4(a) {
  return a && a.__esModule ? a.default : a;
}
/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 







function $f329116d8ad0aba0$export$9514819a8c81e960(props, state, ref) {
    var _state_sortDescriptor, _state_sortDescriptor1;
    let { node: node } = props;
    let allowsSorting = node.props.allowsSorting;
    // if there are no focusable children, the column header will focus the cell
    let { gridCellProps: gridCellProps } = ($ab90dcbc1b5466d0$export$c7e10bfc0c59f67c)({
        ...props,
        focusMode: 'child'
    }, state, ref);
    let isSelectionCellDisabled = node.props.isSelectionCell && state.selectionManager.selectionMode === 'single';
    let { pressProps: pressProps } = ($f6c31cce2adf654f$export$45712eceda6fad21)({
        isDisabled: !allowsSorting || isSelectionCellDisabled,
        onPress () {
            state.sort(node.key);
        },
        ref: ref
    });
    // Needed to pick up the focusable context, enabling things like Tooltips for example
    let { focusableProps: focusableProps } = ($e6afbd83fe6ebbd2$export$4c014de7c8940b4c)({}, ref);
    let ariaSort = null;
    let isSortedColumn = ((_state_sortDescriptor = state.sortDescriptor) === null || _state_sortDescriptor === void 0 ? void 0 : _state_sortDescriptor.column) === node.key;
    let sortDirection = (_state_sortDescriptor1 = state.sortDescriptor) === null || _state_sortDescriptor1 === void 0 ? void 0 : _state_sortDescriptor1.direction;
    // aria-sort not supported in Android Talkback
    if (node.props.allowsSorting && !($c87311424ea30a05$export$a11b0059900ceec8)()) ariaSort = isSortedColumn ? sortDirection : 'none';
    let stringFormatter = ($fca6afa0e843324b$export$f12b703ca79dfbb1)((($parcel$interopDefault$4($7476b46781682bf5$exports))), '@react-aria/table');
    let sortDescription;
    if (allowsSorting) {
        sortDescription = `${stringFormatter.format('sortable')}`;
        // Android Talkback doesn't support aria-sort so we add sort order details to the aria-described by here
        if (isSortedColumn && sortDirection && ($c87311424ea30a05$export$a11b0059900ceec8)()) sortDescription = `${sortDescription}, ${stringFormatter.format(sortDirection)}`;
    }
    let descriptionProps = ($ef06256079686ba0$export$f8aeda7b10753fa1)(sortDescription);
    let shouldDisableFocus = state.collection.size === 0;
    (reactExports.useEffect)(()=>{
        if (shouldDisableFocus && state.selectionManager.focusedKey === node.key) state.selectionManager.setFocusedKey(null);
    }, [
        shouldDisableFocus,
        state.selectionManager,
        node.key
    ]);
    return {
        columnHeaderProps: {
            ...($3ef42575df84b30b$export$9d1611c77c2fe928)(gridCellProps, pressProps, focusableProps, descriptionProps, // If the table is empty, make all column headers untabbable
            shouldDisableFocus && {
                tabIndex: -1
            }),
            role: 'columnheader',
            id: ($2140fb2337097f2d$export$37cd4213f2ad742e)(state, node.key),
            'aria-colspan': node.colspan && node.colspan > 1 ? node.colspan : null,
            'aria-sort': ariaSort
        }
    };
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 





const $b2db214c022798eb$var$EXPANSION_KEYS = {
    expand: {
        ltr: 'ArrowRight',
        rtl: 'ArrowLeft'
    },
    'collapse': {
        ltr: 'ArrowLeft',
        rtl: 'ArrowRight'
    }
};
function $b2db214c022798eb$export$7f2f6ae19e707aa5(props, state, ref) {
    let { node: node, isVirtualized: isVirtualized } = props;
    let { rowProps: rowProps, ...states } = ($4159a7a9cbb0cc18$export$96357d5a73f686fa)(props, state, ref);
    let { direction: direction } = ($18f2051aff69b9bf$export$43bb16f9c6d9e3f7)();
    if (isVirtualized && !(($f4e2df6bd15f8569$export$1b00cb14a96194e6)() && 'expandedKeys' in state)) rowProps['aria-rowindex'] = node.index + 1 + state.collection.headerRows.length; // aria-rowindex is 1 based
    else delete rowProps['aria-rowindex'];
    let treeGridRowProps = {};
    if (($f4e2df6bd15f8569$export$1b00cb14a96194e6)() && 'expandedKeys' in state) {
        let treeNode = state.keyMap.get(node.key);
        if (treeNode != null) {
            var _treeNode_props, _treeNode_props_children, _treeNode_props1;
            let hasChildRows = ((_treeNode_props = treeNode.props) === null || _treeNode_props === void 0 ? void 0 : _treeNode_props.UNSTABLE_childItems) || ((_treeNode_props1 = treeNode.props) === null || _treeNode_props1 === void 0 ? void 0 : (_treeNode_props_children = _treeNode_props1.children) === null || _treeNode_props_children === void 0 ? void 0 : _treeNode_props_children.length) > state.userColumnCount;
            treeGridRowProps = {
                onKeyDown: (e)=>{
                    if (e.key === $b2db214c022798eb$var$EXPANSION_KEYS['expand'][direction] && state.selectionManager.focusedKey === treeNode.key && hasChildRows && state.expandedKeys !== 'all' && !state.expandedKeys.has(treeNode.key)) {
                        state.toggleKey(treeNode.key);
                        e.stopPropagation();
                    } else if (e.key === $b2db214c022798eb$var$EXPANSION_KEYS['collapse'][direction] && state.selectionManager.focusedKey === treeNode.key && hasChildRows && (state.expandedKeys === 'all' || state.expandedKeys.has(treeNode.key))) {
                        state.toggleKey(treeNode.key);
                        e.stopPropagation();
                    }
                },
                'aria-expanded': hasChildRows ? state.expandedKeys === 'all' || state.expandedKeys.has(node.key) : undefined,
                'aria-level': treeNode.level,
                'aria-posinset': treeNode.indexOfType + 1,
                'aria-setsize': treeNode.level > 1 ? ($c5a24bc478652b5f$export$7475b2c64539e4cf)(state.keyMap.get(treeNode === null || treeNode === void 0 ? void 0 : treeNode.parentKey).childNodes).indexOfType + 1 : ($c5a24bc478652b5f$export$7475b2c64539e4cf)(state.keyMap.get(state.collection.body.key).childNodes).indexOfType + 1
            };
        }
    }
    let syntheticLinkProps = ($ea8dcbcb9ea1b556$export$bdc77b0c0a3a85d6)(node.props);
    let linkProps = states.hasAction ? syntheticLinkProps : {};
    return {
        rowProps: {
            ...($3ef42575df84b30b$export$9d1611c77c2fe928)(rowProps, treeGridRowProps, linkProps),
            'aria-labelledby': ($2140fb2337097f2d$export$85069b70317f543)(state, node.key)
        },
        ...states
    };
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 
function $f917ee10f4c32dab$export$1b95a7d2d517b841(props, state, ref) {
    let { node: node, isVirtualized: isVirtualized } = props;
    let rowProps = {
        role: 'row'
    };
    if (isVirtualized && !(($f4e2df6bd15f8569$export$1b00cb14a96194e6)() && 'expandedKeys' in state)) rowProps['aria-rowindex'] = node.index + 1; // aria-rowindex is 1 based
    return {
        rowProps: rowProps
    };
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 

function $7713593715703b24$export$49571c903d73624c(props, state, ref) {
    let { gridCellProps: gridCellProps, isPressed: isPressed } = ($ab90dcbc1b5466d0$export$c7e10bfc0c59f67c)(props, state, ref);
    let columnKey = props.node.column.key;
    if (state.collection.rowHeaderColumnKeys.has(columnKey)) {
        gridCellProps.role = 'rowheader';
        gridCellProps.id = ($2140fb2337097f2d$export$19baff3266315d44)(state, props.node.parentKey, columnKey);
    }
    return {
        gridCellProps: gridCellProps,
        isPressed: isPressed
    };
}

function $parcel$interopDefault$3(a) {
  return a && a.__esModule ? a.default : a;
}
/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 



function $2a795c53a101c542$export$16ea7f650bd7c1bb(props, state) {
    let { key: key } = props;
    const { checkboxProps: checkboxProps } = ($7cb39d07f245a780$export$70e2eed1a92976ad)(props, state);
    return {
        checkboxProps: {
            ...checkboxProps,
            'aria-labelledby': `${checkboxProps.id} ${($2140fb2337097f2d$export$85069b70317f543)(state, key)}`
        }
    };
}
function $2a795c53a101c542$export$1003db6a7e384b99(state) {
    let { isEmpty: isEmpty, isSelectAll: isSelectAll, selectionMode: selectionMode } = state.selectionManager;
    const stringFormatter = ($fca6afa0e843324b$export$f12b703ca79dfbb1)((($parcel$interopDefault$3($7476b46781682bf5$exports))), '@react-aria/table');
    return {
        checkboxProps: {
            'aria-label': stringFormatter.format(selectionMode === 'single' ? 'select' : 'selectAll'),
            isSelected: isSelectAll,
            isDisabled: selectionMode !== 'multiple' || state.collection.size === 0,
            isIndeterminate: !isEmpty && !isSelectAll,
            onChange: ()=>state.selectionManager.toggleSelectAll()
        }
    };
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 







function $0047e6c294ea075f$export$6fb1613bd7b28198() {
    return ($e45487f8ba1cbdbf$export$d3037f5d3f3e51bf)();
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ const $99b62ae3ff97ec45$export$c5f62239608282b6 = new WeakMap();
function $99b62ae3ff97ec45$export$567fc7097e064344(state, key, role) {
    if (typeof key === 'string') key = key.replace(/\s+/g, '');
    let baseId = $99b62ae3ff97ec45$export$c5f62239608282b6.get(state);
    return `${baseId}-${role}-${key}`;
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 


function $0175d55c2a017ebc$export$fdf4756d5b8ef90a(props, state, ref) {
    let { key: key, isDisabled: propsDisabled, shouldSelectOnPressUp: shouldSelectOnPressUp } = props;
    let { selectionManager: manager, selectedKey: selectedKey } = state;
    let isSelected = key === selectedKey;
    let isDisabled = propsDisabled || state.isDisabled || state.selectionManager.isDisabled(key);
    let { itemProps: itemProps, isPressed: isPressed } = ($880e95eb8b93ba9a$export$ecf600387e221c37)({
        selectionManager: manager,
        key: key,
        ref: ref,
        isDisabled: isDisabled,
        shouldSelectOnPressUp: shouldSelectOnPressUp,
        linkBehavior: 'selection'
    });
    let tabId = ($99b62ae3ff97ec45$export$567fc7097e064344)(state, key, 'tab');
    let tabPanelId = ($99b62ae3ff97ec45$export$567fc7097e064344)(state, key, 'tabpanel');
    let { tabIndex: tabIndex } = itemProps;
    let item = state.collection.getItem(key);
    let domProps = ($65484d02dcb7eb3e$export$457c3d6518dd4c6f)(item === null || item === void 0 ? void 0 : item.props, {
        labelable: true
    });
    delete domProps.id;
    let linkProps = ($ea8dcbcb9ea1b556$export$7e924b3091a3bd18)(item === null || item === void 0 ? void 0 : item.props);
    return {
        tabProps: ($3ef42575df84b30b$export$9d1611c77c2fe928)(domProps, linkProps, itemProps, {
            id: tabId,
            'aria-selected': isSelected,
            'aria-disabled': isDisabled || undefined,
            'aria-controls': isSelected ? tabPanelId : undefined,
            tabIndex: isDisabled ? undefined : tabIndex,
            role: 'tab'
        }),
        isSelected: isSelected,
        isDisabled: isDisabled,
        isPressed: isPressed
    };
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 


function $34bce698202e07cb$export$fae0121b5afe572d(props, state, ref) {
    // The tabpanel should have tabIndex=0 when there are no tabbable elements within it.
    // Otherwise, tabbing from the focused tab should go directly to the first tabbable element
    // within the tabpanel.
    let tabIndex = ($83013635b024ae3d$export$eac1895992b9f3d6)(ref) ? undefined : 0;
    var _props_id;
    const id = ($99b62ae3ff97ec45$export$567fc7097e064344)(state, (_props_id = props.id) !== null && _props_id !== void 0 ? _props_id : state === null || state === void 0 ? void 0 : state.selectedKey, 'tabpanel');
    const tabPanelProps = ($313b98861ee5dd6c$export$d6875122194c7b44)({
        ...props,
        id: id,
        'aria-labelledby': ($99b62ae3ff97ec45$export$567fc7097e064344)(state, state === null || state === void 0 ? void 0 : state.selectedKey, 'tab')
    });
    return {
        tabPanelProps: ($3ef42575df84b30b$export$9d1611c77c2fe928)(tabPanelProps, {
            tabIndex: tabIndex,
            role: 'tabpanel',
            'aria-describedby': props['aria-describedby'],
            'aria-details': props['aria-details']
        })
    };
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ class $bfc6f2d60b8a4c40$export$15010ca3c1abe90b {
    getKeyLeftOf(key) {
        if (this.flipDirection) return this.getNextKey(key);
        return this.getPreviousKey(key);
    }
    getKeyRightOf(key) {
        if (this.flipDirection) return this.getPreviousKey(key);
        return this.getNextKey(key);
    }
    getKeyAbove(key) {
        return this.getPreviousKey(key);
    }
    getKeyBelow(key) {
        return this.getNextKey(key);
    }
    isDisabled(key) {
        var _this_collection_getItem_props, _this_collection_getItem;
        return this.disabledKeys.has(key) || !!((_this_collection_getItem = this.collection.getItem(key)) === null || _this_collection_getItem === void 0 ? void 0 : (_this_collection_getItem_props = _this_collection_getItem.props) === null || _this_collection_getItem_props === void 0 ? void 0 : _this_collection_getItem_props.isDisabled);
    }
    getFirstKey() {
        let key = this.collection.getFirstKey();
        if (key != null && this.isDisabled(key)) key = this.getNextKey(key);
        return key;
    }
    getLastKey() {
        let key = this.collection.getLastKey();
        if (key != null && this.isDisabled(key)) key = this.getPreviousKey(key);
        return key;
    }
    getNextKey(key) {
        do {
            key = this.collection.getKeyAfter(key);
            if (key == null) key = this.collection.getFirstKey();
        }while (this.isDisabled(key));
        return key;
    }
    getPreviousKey(key) {
        do {
            key = this.collection.getKeyBefore(key);
            if (key == null) key = this.collection.getLastKey();
        }while (this.isDisabled(key));
        return key;
    }
    constructor(collection, direction, orientation, disabledKeys = new Set()){
        this.collection = collection;
        this.flipDirection = direction === 'rtl' && orientation === 'horizontal';
        this.disabledKeys = disabledKeys;
    }
}

/*
* Copyright 2020 Adobe. All rights reserved.
* This file is licensed to you under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License. You may obtain a copy
* of the License at http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software distributed under
* the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
* OF ANY KIND, either express or implied. See the License for the specific language
* governing permissions and limitations under the License.
*/ 





function $58d314389b21fa3f$export$773e389e644c5874(props, state, ref) {
    let { orientation: orientation = 'horizontal', keyboardActivation: keyboardActivation = 'automatic' } = props;
    let { collection: collection, selectionManager: manager, disabledKeys: disabledKeys } = state;
    let { direction: direction } = ($18f2051aff69b9bf$export$43bb16f9c6d9e3f7)();
    let delegate = (reactExports.useMemo)(()=>new ($bfc6f2d60b8a4c40$export$15010ca3c1abe90b)(collection, direction, orientation, disabledKeys), [
        collection,
        disabledKeys,
        orientation,
        direction
    ]);
    let { collectionProps: collectionProps } = ($ae20dd8cbca75726$export$d6daf82dcd84e87c)({
        ref: ref,
        selectionManager: manager,
        keyboardDelegate: delegate,
        selectOnFocus: keyboardActivation === 'automatic',
        disallowEmptySelection: true,
        scrollRef: ref,
        linkBehavior: 'selection'
    });
    // Compute base id for all tabs
    let tabsId = ($bdb11010cef70236$export$f680877a34711e37)();
    ($99b62ae3ff97ec45$export$c5f62239608282b6).set(state, tabsId);
    let tabListLabelProps = ($313b98861ee5dd6c$export$d6875122194c7b44)({
        ...props,
        id: tabsId
    });
    return {
        tabListProps: {
            ...($3ef42575df84b30b$export$9d1611c77c2fe928)(collectionProps, tabListLabelProps),
            role: 'tablist',
            'aria-orientation': orientation,
            tabIndex: undefined
        }
    };
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 






const $d7323bca8d074eeb$export$653eddfc964b0f8a = new WeakMap();
function $d7323bca8d074eeb$export$4f8b5cda58b7e8ff(props, state, ref) {
    let { direction: direction } = ($18f2051aff69b9bf$export$43bb16f9c6d9e3f7)();
    let keyboardDelegate = props.keyboardDelegate || new ($2a25aae57d74318e$export$a05409b8bb224a5a)({
        collection: state.collection,
        ref: ref,
        orientation: 'horizontal',
        direction: direction,
        disabledKeys: state.disabledKeys,
        disabledBehavior: state.selectionManager.disabledBehavior
    });
    let { labelProps: labelProps, fieldProps: fieldProps, descriptionProps: descriptionProps, errorMessageProps: errorMessageProps } = ($2baaea4c71418dea$export$294aa081a6c6f55d)({
        ...props,
        labelElementType: 'span'
    });
    let { gridProps: gridProps } = ($f47efb0c3a859cf2$export$664f9155035607eb)({
        ...props,
        ...fieldProps,
        keyboardDelegate: keyboardDelegate,
        shouldFocusWrap: true,
        linkBehavior: 'override'
    }, state, ref);
    let [isFocusWithin, setFocusWithin] = (reactExports.useState)(false);
    let { focusWithinProps: focusWithinProps } = ($9ab94262bd0047c7$export$420e68273165f4ec)({
        onFocusWithinChange: setFocusWithin
    });
    let domProps = ($65484d02dcb7eb3e$export$457c3d6518dd4c6f)(props);
    // If the last tag is removed, focus the container.
    let prevCount = (reactExports.useRef)(state.collection.size);
    (reactExports.useEffect)(()=>{
        if (ref.current && prevCount.current > 0 && state.collection.size === 0 && isFocusWithin) ref.current.focus();
        prevCount.current = state.collection.size;
    }, [
        state.collection.size,
        isFocusWithin,
        ref
    ]);
    $d7323bca8d074eeb$export$653eddfc964b0f8a.set(state, {
        onRemove: props.onRemove
    });
    return {
        gridProps: ($3ef42575df84b30b$export$9d1611c77c2fe928)(gridProps, domProps, {
            role: state.collection.size ? 'grid' : null,
            'aria-atomic': false,
            'aria-relevant': 'additions',
            'aria-live': isFocusWithin ? 'polite' : 'off',
            ...focusWithinProps,
            ...fieldProps
        }),
        labelProps: labelProps,
        descriptionProps: descriptionProps,
        errorMessageProps: errorMessageProps
    };
}

var $84925f526f90eebd$exports = {};
$84925f526f90eebd$exports = {
    "removeButtonLabel": `\u{625}\u{632}\u{627}\u{644}\u{629}`,
    "removeDescription": `\u{627}\u{636}\u{63A}\u{637} \u{639}\u{644}\u{649} \u{645}\u{641}\u{62A}\u{627}\u{62D} DELETE \u{644}\u{625}\u{632}\u{627}\u{644}\u{629} \u{639}\u{644}\u{627}\u{645}\u{629}.`
};

var $c0650163dc1b6f9d$exports = {};
$c0650163dc1b6f9d$exports = {
    "removeButtonLabel": `\u{41F}\u{440}\u{435}\u{43C}\u{430}\u{445}\u{432}\u{430}\u{43D}\u{435}`,
    "removeDescription": `\u{41D}\u{430}\u{442}\u{438}\u{441}\u{43D}\u{435}\u{442}\u{435} Delete, \u{437}\u{430} \u{434}\u{430} \u{43F}\u{440}\u{435}\u{43C}\u{430}\u{445}\u{43D}\u{435}\u{442}\u{435} \u{43C}\u{430}\u{440}\u{43A}\u{435}\u{440}\u{430}.`
};

var $b2b55661291de587$exports = {};
$b2b55661291de587$exports = {
    "removeButtonLabel": `Odebrat`,
    "removeDescription": `Stisknut\xedm kl\xe1vesy Delete odeberete zna\u{10D}ku.`
};

var $deb83970956f6d5b$exports = {};
$deb83970956f6d5b$exports = {
    "removeButtonLabel": `Fjern`,
    "removeDescription": `Tryk p\xe5 Slet for at fjerne tag.`
};

var $aea1cb4c7ec97e1c$exports = {};
$aea1cb4c7ec97e1c$exports = {
    "removeButtonLabel": `Entfernen`,
    "removeDescription": `Auf \u{201E}L\xf6schen\u{201C} dr\xfccken, um das Tag zu entfernen.`
};

var $3618d917e503a8d3$exports = {};
$3618d917e503a8d3$exports = {
    "removeButtonLabel": `\u{39A}\u{3B1}\u{3C4}\u{3AC}\u{3C1}\u{3B3}\u{3B7}\u{3C3}\u{3B7}`,
    "removeDescription": `\u{3A0}\u{3B1}\u{3C4}\u{3AE}\u{3C3}\u{3C4}\u{3B5} \u{394}\u{3B9}\u{3B1}\u{3B3}\u{3C1}\u{3B1}\u{3C6}\u{3AE} \u{3B3}\u{3B9}\u{3B1} \u{3BD}\u{3B1} \u{3BA}\u{3B1}\u{3C4}\u{3B1}\u{3C1}\u{3B3}\u{3AE}\u{3C3}\u{3B5}\u{3C4}\u{3B5} \u{3C4}\u{3B7}\u{3BD} \u{3B5}\u{3C4}\u{3B9}\u{3BA}\u{3AD}\u{3C4}\u{3B1}.`
};

var $9eb56bbbe8e31294$exports = {};
$9eb56bbbe8e31294$exports = {
    "removeDescription": `Press Delete to remove tag.`,
    "removeButtonLabel": `Remove`
};

var $361c604b0fc269a3$exports = {};
$361c604b0fc269a3$exports = {
    "removeButtonLabel": `Quitar`,
    "removeDescription": `Pulse Eliminar para quitar la etiqueta.`
};

var $2f00170f4ee3ca01$exports = {};
$2f00170f4ee3ca01$exports = {
    "removeButtonLabel": `Eemalda`,
    "removeDescription": `Sildi eemaldamiseks vajutage kustutusklahvi Delete.`
};

var $80ee16b64fab9fb5$exports = {};
$80ee16b64fab9fb5$exports = {
    "removeButtonLabel": `Poista`,
    "removeDescription": `Poista tunniste painamalla Poista-painiketta.`
};

var $be9d354476c08087$exports = {};
$be9d354476c08087$exports = {
    "removeButtonLabel": `Supprimer`,
    "removeDescription": `Appuyez sur Supprimer pour supprimer l\u{2019}\xe9tiquette.`
};

var $ffeb903ba092eb35$exports = {};
$ffeb903ba092eb35$exports = {
    "removeButtonLabel": `\u{5D4}\u{5E1}\u{5E8}`,
    "removeDescription": `\u{5DC}\u{5D7}\u{5E5} \u{5E2}\u{5DC} \u{5DE}\u{5D7}\u{5E7} \u{5DB}\u{5D3}\u{5D9} \u{5DC}\u{5D4}\u{5E1}\u{5D9}\u{5E8} \u{5EA}\u{5D2}.`
};

var $1df6722c6f19728b$exports = {};
$1df6722c6f19728b$exports = {
    "removeButtonLabel": `Ukloni`,
    "removeDescription": `Pritisnite Delete za uklanjanje oznake.`
};

var $093d57e325bc9071$exports = {};
$093d57e325bc9071$exports = {
    "removeButtonLabel": `Elt\xe1vol\xedt\xe1s`,
    "removeDescription": `Nyomja meg a Delete billenty\u{171}t a c\xedmke elt\xe1vol\xedt\xe1s\xe1hoz.`
};

var $609dbdfbcad85bdb$exports = {};
$609dbdfbcad85bdb$exports = {
    "removeButtonLabel": `Rimuovi`,
    "removeDescription": `Premi Elimina per rimuovere il tag.`
};

var $c08e84f882644048$exports = {};
$c08e84f882644048$exports = {
    "removeButtonLabel": `\u{524A}\u{9664}`,
    "removeDescription": `\u{30BF}\u{30B0}\u{3092}\u{524A}\u{9664}\u{3059}\u{308B}\u{306B}\u{306F}\u{3001}Delete \u{30AD}\u{30FC}\u{3092}\u{62BC}\u{3057}\u{307E}\u{3059}\u{3002}`
};

var $5cd130489822fa21$exports = {};
$5cd130489822fa21$exports = {
    "removeButtonLabel": `\u{C81C}\u{AC70}`,
    "removeDescription": `\u{D0DC}\u{ADF8}\u{B97C} \u{C81C}\u{AC70}\u{D558}\u{B824}\u{BA74} Delete \u{D0A4}\u{B97C} \u{B204}\u{B974}\u{C2ED}\u{C2DC}\u{C624}.`
};

var $ab5183739b6c5e7e$exports = {};
$ab5183739b6c5e7e$exports = {
    "removeButtonLabel": `Pa\u{161}alinti`,
    "removeDescription": `Nor\u{117}dami pa\u{161}alinti \u{17E}ym\u{105}, paspauskite \u{201E}Delete\u{201C} klavi\u{161}\u{105}.`
};

var $dd84a0b574be3f23$exports = {};
$dd84a0b574be3f23$exports = {
    "removeButtonLabel": `No\u{146}emt`,
    "removeDescription": `Nospiediet Delete [Dz\u{113}st], lai no\u{146}emtu tagu.`
};

var $85eee97d14eef7b5$exports = {};
$85eee97d14eef7b5$exports = {
    "removeButtonLabel": `Fjern`,
    "removeDescription": `Trykk p\xe5 Slett for \xe5 fjerne taggen.`
};

var $18781839f93b0314$exports = {};
$18781839f93b0314$exports = {
    "removeButtonLabel": `Verwijderen`,
    "removeDescription": `Druk op Verwijderen om de tag te verwijderen.`
};

var $1c40ffbbfe9f3bda$exports = {};
$1c40ffbbfe9f3bda$exports = {
    "removeButtonLabel": `Usu\u{144}`,
    "removeDescription": `Naci\u{15B}nij Usu\u{144}, aby usun\u{105}\u{107} znacznik.`
};

var $156880e329b1c717$exports = {};
$156880e329b1c717$exports = {
    "removeButtonLabel": `Remover`,
    "removeDescription": `Pressione Delete para remover a tag.`
};

var $b6d50b1d20768ce4$exports = {};
$b6d50b1d20768ce4$exports = {
    "removeButtonLabel": `Eliminar`,
    "removeDescription": `Prima Delete para eliminar a tag.`
};

var $d8c38c691b006187$exports = {};
$d8c38c691b006187$exports = {
    "removeButtonLabel": `\xcendep\u{103}rta\u{163}i`,
    "removeDescription": `Ap\u{103}sa\u{21B}i pe Delete (\u{218}tergere) pentru a elimina eticheta.`
};

var $ed9b4bf7ce1fb1d7$exports = {};
$ed9b4bf7ce1fb1d7$exports = {
    "removeButtonLabel": `\u{423}\u{434}\u{430}\u{43B}\u{438}\u{442}\u{44C}`,
    "removeDescription": `\u{41D}\u{430}\u{436}\u{43C}\u{438}\u{442}\u{435} DELETE, \u{447}\u{442}\u{43E}\u{431}\u{44B} \u{443}\u{434}\u{430}\u{43B}\u{438}\u{442}\u{44C} \u{442}\u{435}\u{433}.`
};

var $51d8721afda4d678$exports = {};
$51d8721afda4d678$exports = {
    "removeButtonLabel": `Odstr\xe1ni\u{165}`,
    "removeDescription": `Ak chcete odstr\xe1ni\u{165} zna\u{10D}ku, stla\u{10D}te kl\xe1ves Delete.`
};

var $fd37a27baae493e8$exports = {};
$fd37a27baae493e8$exports = {
    "removeButtonLabel": `Odstrani`,
    "removeDescription": `Pritisnite Delete, da odstranite oznako.`
};

var $5505a1ca71ffd6f4$exports = {};
$5505a1ca71ffd6f4$exports = {
    "removeButtonLabel": `Ukloni`,
    "removeDescription": `Pritisnite Obri\u{161}i da biste uklonili oznaku.`
};

var $33670e148c84ad02$exports = {};
$33670e148c84ad02$exports = {
    "removeButtonLabel": `Ta bort`,
    "removeDescription": `Tryck p\xe5 Radera f\xf6r att ta bort taggen.`
};

var $0bf46fdcdd7cb5f6$exports = {};
$0bf46fdcdd7cb5f6$exports = {
    "removeButtonLabel": `Kald\u{131}r`,
    "removeDescription": `Etiketi kald\u{131}rmak i\xe7in Sil tu\u{15F}una bas\u{131}n.`
};

var $9d9765222bc08ca2$exports = {};
$9d9765222bc08ca2$exports = {
    "removeButtonLabel": `\u{412}\u{438}\u{43B}\u{443}\u{447}\u{438}\u{442}\u{438}`,
    "removeDescription": `\u{41D}\u{430}\u{442}\u{438}\u{441}\u{43D}\u{456}\u{442}\u{44C} Delete, \u{449}\u{43E}\u{431} \u{432}\u{438}\u{43B}\u{443}\u{447}\u{438}\u{442}\u{438} \u{442}\u{435}\u{433}.`
};

var $d737296cedcdee9f$exports = {};
$d737296cedcdee9f$exports = {
    "removeButtonLabel": `\u{5220}\u{9664}`,
    "removeDescription": `\u{6309}\u{4E0B}\u{201C}\u{5220}\u{9664}\u{201D}\u{4EE5}\u{5220}\u{9664}\u{6807}\u{8BB0}\u{3002}`
};

var $09cd168ab18773f4$exports = {};
$09cd168ab18773f4$exports = {
    "removeButtonLabel": `\u{79FB}\u{9664}`,
    "removeDescription": `\u{6309} Delete \u{9375}\u{4EE5}\u{79FB}\u{9664}\u{6A19}\u{8A18}\u{3002}`
};

var $3bb15cc24d006ec5$exports = {};


































$3bb15cc24d006ec5$exports = {
    "ar-AE": $84925f526f90eebd$exports,
    "bg-BG": $c0650163dc1b6f9d$exports,
    "cs-CZ": $b2b55661291de587$exports,
    "da-DK": $deb83970956f6d5b$exports,
    "de-DE": $aea1cb4c7ec97e1c$exports,
    "el-GR": $3618d917e503a8d3$exports,
    "en-US": $9eb56bbbe8e31294$exports,
    "es-ES": $361c604b0fc269a3$exports,
    "et-EE": $2f00170f4ee3ca01$exports,
    "fi-FI": $80ee16b64fab9fb5$exports,
    "fr-FR": $be9d354476c08087$exports,
    "he-IL": $ffeb903ba092eb35$exports,
    "hr-HR": $1df6722c6f19728b$exports,
    "hu-HU": $093d57e325bc9071$exports,
    "it-IT": $609dbdfbcad85bdb$exports,
    "ja-JP": $c08e84f882644048$exports,
    "ko-KR": $5cd130489822fa21$exports,
    "lt-LT": $ab5183739b6c5e7e$exports,
    "lv-LV": $dd84a0b574be3f23$exports,
    "nb-NO": $85eee97d14eef7b5$exports,
    "nl-NL": $18781839f93b0314$exports,
    "pl-PL": $1c40ffbbfe9f3bda$exports,
    "pt-BR": $156880e329b1c717$exports,
    "pt-PT": $b6d50b1d20768ce4$exports,
    "ro-RO": $d8c38c691b006187$exports,
    "ru-RU": $ed9b4bf7ce1fb1d7$exports,
    "sk-SK": $51d8721afda4d678$exports,
    "sl-SI": $fd37a27baae493e8$exports,
    "sr-SP": $5505a1ca71ffd6f4$exports,
    "sv-SE": $33670e148c84ad02$exports,
    "tr-TR": $0bf46fdcdd7cb5f6$exports,
    "uk-UA": $9d9765222bc08ca2$exports,
    "zh-CN": $d737296cedcdee9f$exports,
    "zh-TW": $09cd168ab18773f4$exports
};

function $parcel$interopDefault$2(a) {
  return a && a.__esModule ? a.default : a;
}
/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 





function $fc6126c82a4601f1$export$3f568fff7dff2f03(props, state, ref) {
    let { item: item } = props;
    let stringFormatter = ($fca6afa0e843324b$export$f12b703ca79dfbb1)((($parcel$interopDefault$2($3bb15cc24d006ec5$exports))), '@react-aria/tag');
    let buttonId = ($bdb11010cef70236$export$f680877a34711e37)();
    let { onRemove: onRemove } = ($d7323bca8d074eeb$export$653eddfc964b0f8a).get(state) || {};
    let { rowProps: rowProps, gridCellProps: gridCellProps, ...states } = ($4e8b0456ef72939f$export$9610e69494fadfd2)({
        node: item
    }, state, ref);
    // We want the group to handle keyboard navigation between tags.
    delete rowProps.onKeyDownCapture;
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    let { descriptionProps: _, ...stateWithoutDescription } = states;
    let onKeyDown = (e)=>{
        if (e.key === 'Delete' || e.key === 'Backspace') {
            e.preventDefault();
            if (state.selectionManager.isSelected(item.key)) onRemove === null || onRemove === void 0 ? void 0 : onRemove(new Set(state.selectionManager.selectedKeys));
            else onRemove === null || onRemove === void 0 ? void 0 : onRemove(new Set([
                item.key
            ]));
        }
    };
    let modality = ($507fabe10e71c6fb$export$98e20ec92f614cfe)();
    if (modality === 'virtual' && typeof window !== 'undefined' && 'ontouchstart' in window) modality = 'pointer';
    let description = onRemove && (modality === 'keyboard' || modality === 'virtual') ? stringFormatter.format('removeDescription') : '';
    let descProps = ($ef06256079686ba0$export$f8aeda7b10753fa1)(description);
    let isFocused = item.key === state.selectionManager.focusedKey;
    // @ts-ignore - data attributes are ok but TS doesn't know about them.
    let domProps = ($65484d02dcb7eb3e$export$457c3d6518dd4c6f)(item.props);
    let linkProps = ($ea8dcbcb9ea1b556$export$bdc77b0c0a3a85d6)(item.props);
    return {
        removeButtonProps: {
            'aria-label': stringFormatter.format('removeButtonLabel'),
            'aria-labelledby': `${buttonId} ${rowProps.id}`,
            isDisabled: state.disabledKeys.has(item.key) || item.props.isDisabled,
            id: buttonId,
            onPress: ()=>onRemove ? onRemove(new Set([
                    item.key
                ])) : null,
            excludeFromTabOrder: true
        },
        rowProps: ($3ef42575df84b30b$export$9d1611c77c2fe928)(rowProps, domProps, linkProps, {
            tabIndex: isFocused || state.selectionManager.focusedKey == null ? 0 : -1,
            onKeyDown: onRemove ? onKeyDown : undefined,
            'aria-describedby': descProps['aria-describedby']
        }),
        gridCellProps: ($3ef42575df84b30b$export$9d1611c77c2fe928)(gridCellProps, {
            'aria-errormessage': props['aria-errormessage'],
            'aria-label': props['aria-label']
        }),
        ...stateWithoutDescription,
        allowsRemoving: !!onRemove
    };
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 

function $326e436e94273fe1$export$1c4b08e0eca38426(props, state) {
    let domProps = ($65484d02dcb7eb3e$export$457c3d6518dd4c6f)(props, {
        labelable: true
    });
    let { hoverProps: hoverProps } = ($6179b936705e76d3$export$ae780daf29e6d456)({
        onHoverStart: ()=>state === null || state === void 0 ? void 0 : state.open(true),
        onHoverEnd: ()=>state === null || state === void 0 ? void 0 : state.close()
    });
    return {
        tooltipProps: ($3ef42575df84b30b$export$9d1611c77c2fe928)(domProps, hoverProps, {
            role: 'tooltip'
        })
    };
}

/*
 * Copyright 2024 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the 'License');
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 
const $4e85f108e88277b8$export$b085522c77523c51 = (reactExports.createContext)(null);
(reactExports.createContext)(null);
(reactExports.createContext)(null);
(reactExports.createContext)(null);
(reactExports.createContext)(null);
const $4e85f108e88277b8$export$d688439359537581 = (reactExports.createContext)({});

/*
 * Copyright 2024 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ class $23b9f4fcf0fe224b$export$d68d59712b04d9d1 {
    get childNodes() {
        throw new Error('childNodes is not supported');
    }
    clone() {
        let node = new $23b9f4fcf0fe224b$export$d68d59712b04d9d1(this.type, this.key);
        node.value = this.value;
        node.level = this.level;
        node.hasChildNodes = this.hasChildNodes;
        node.rendered = this.rendered;
        node.textValue = this.textValue;
        node['aria-label'] = this['aria-label'];
        node.index = this.index;
        node.parentKey = this.parentKey;
        node.prevKey = this.prevKey;
        node.nextKey = this.nextKey;
        node.firstChildKey = this.firstChildKey;
        node.lastChildKey = this.lastChildKey;
        node.props = this.props;
        node.render = this.render;
        return node;
    }
    constructor(type, key){
        this.value = null;
        this.level = 0;
        this.hasChildNodes = false;
        this.rendered = null;
        this.textValue = '';
        this['aria-label'] = undefined;
        this.index = 0;
        this.parentKey = null;
        this.prevKey = null;
        this.nextKey = null;
        this.firstChildKey = null;
        this.lastChildKey = null;
        this.props = {};
        this.type = type;
        this.key = key;
    }
}
class $23b9f4fcf0fe224b$export$408d25a4e12db025 {
    get size() {
        return this.keyMap.size;
    }
    getKeys() {
        return this.keyMap.keys();
    }
    *[Symbol.iterator]() {
        let node = this.firstKey != null ? this.keyMap.get(this.firstKey) : undefined;
        while(node){
            yield node;
            node = node.nextKey != null ? this.keyMap.get(node.nextKey) : undefined;
        }
    }
    getChildren(key) {
        let keyMap = this.keyMap;
        return {
            *[Symbol.iterator] () {
                let parent = keyMap.get(key);
                let node = (parent === null || parent === void 0 ? void 0 : parent.firstChildKey) != null ? keyMap.get(parent.firstChildKey) : null;
                while(node){
                    yield node;
                    node = node.nextKey != null ? keyMap.get(node.nextKey) : undefined;
                }
            }
        };
    }
    getKeyBefore(key) {
        let node = this.keyMap.get(key);
        if (!node) return null;
        if (node.prevKey != null) {
            node = this.keyMap.get(node.prevKey);
            while(node && node.type !== 'item' && node.lastChildKey != null)node = this.keyMap.get(node.lastChildKey);
            var _node_key;
            return (_node_key = node === null || node === void 0 ? void 0 : node.key) !== null && _node_key !== void 0 ? _node_key : null;
        }
        return node.parentKey;
    }
    getKeyAfter(key) {
        let node = this.keyMap.get(key);
        if (!node) return null;
        if (node.type !== 'item' && node.firstChildKey != null) return node.firstChildKey;
        while(node){
            if (node.nextKey != null) return node.nextKey;
            if (node.parentKey != null) node = this.keyMap.get(node.parentKey);
            else return null;
        }
        return null;
    }
    getFirstKey() {
        return this.firstKey;
    }
    getLastKey() {
        let node = this.lastKey != null ? this.keyMap.get(this.lastKey) : null;
        while((node === null || node === void 0 ? void 0 : node.lastChildKey) != null)node = this.keyMap.get(node.lastChildKey);
        var _node_key;
        return (_node_key = node === null || node === void 0 ? void 0 : node.key) !== null && _node_key !== void 0 ? _node_key : null;
    }
    getItem(key) {
        var _this_keyMap_get;
        return (_this_keyMap_get = this.keyMap.get(key)) !== null && _this_keyMap_get !== void 0 ? _this_keyMap_get : null;
    }
    at() {
        throw new Error('Not implemented');
    }
    clone() {
        // We need to clone using this.constructor so that subclasses have the right prototype.
        // TypeScript isn't happy about this yet.
        // https://github.com/microsoft/TypeScript/issues/3841
        let Constructor = this.constructor;
        let collection = new Constructor();
        collection.keyMap = new Map(this.keyMap);
        collection.firstKey = this.firstKey;
        collection.lastKey = this.lastKey;
        return collection;
    }
    addNode(node) {
        if (this.frozen) throw new Error('Cannot add a node to a frozen collection');
        this.keyMap.set(node.key, node);
    }
    removeNode(key) {
        if (this.frozen) throw new Error('Cannot remove a node to a frozen collection');
        this.keyMap.delete(key);
    }
    commit(firstKey, lastKey, isSSR = false) {
        if (this.frozen) throw new Error('Cannot commit a frozen collection');
        this.firstKey = firstKey;
        this.lastKey = lastKey;
        this.frozen = !isSSR;
    }
    constructor(){
        this.keyMap = new Map();
        this.firstKey = null;
        this.lastKey = null;
        this.frozen = false;
    }
}

/*
 * Copyright 2024 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 
class $681cc3c98f569e39$export$410b0c854570d131 {
    *[Symbol.iterator]() {
        let node = this.firstChild;
        while(node){
            yield node;
            node = node.nextSibling;
        }
    }
    get firstChild() {
        return this._firstChild;
    }
    set firstChild(firstChild) {
        this._firstChild = firstChild;
        this.ownerDocument.markDirty(this);
    }
    get lastChild() {
        return this._lastChild;
    }
    set lastChild(lastChild) {
        this._lastChild = lastChild;
        this.ownerDocument.markDirty(this);
    }
    get previousSibling() {
        return this._previousSibling;
    }
    set previousSibling(previousSibling) {
        this._previousSibling = previousSibling;
        this.ownerDocument.markDirty(this);
    }
    get nextSibling() {
        return this._nextSibling;
    }
    set nextSibling(nextSibling) {
        this._nextSibling = nextSibling;
        this.ownerDocument.markDirty(this);
    }
    get parentNode() {
        return this._parentNode;
    }
    set parentNode(parentNode) {
        this._parentNode = parentNode;
        this.ownerDocument.markDirty(this);
    }
    get isConnected() {
        var _this_parentNode;
        return ((_this_parentNode = this.parentNode) === null || _this_parentNode === void 0 ? void 0 : _this_parentNode.isConnected) || false;
    }
    appendChild(child) {
        this.ownerDocument.startTransaction();
        if (child.parentNode) child.parentNode.removeChild(child);
        if (this.firstChild == null) this.firstChild = child;
        if (this.lastChild) {
            this.lastChild.nextSibling = child;
            child.index = this.lastChild.index + 1;
            child.previousSibling = this.lastChild;
        } else {
            child.previousSibling = null;
            child.index = 0;
        }
        child.parentNode = this;
        child.nextSibling = null;
        this.lastChild = child;
        this.ownerDocument.markDirty(this);
        if (child.hasSetProps) // Only add the node to the collection if we already received props for it.
        // Otherwise wait until then so we have the correct id for the node.
        this.ownerDocument.addNode(child);
        this.ownerDocument.endTransaction();
        this.ownerDocument.queueUpdate();
    }
    insertBefore(newNode, referenceNode) {
        if (referenceNode == null) return this.appendChild(newNode);
        this.ownerDocument.startTransaction();
        if (newNode.parentNode) newNode.parentNode.removeChild(newNode);
        newNode.nextSibling = referenceNode;
        newNode.previousSibling = referenceNode.previousSibling;
        newNode.index = referenceNode.index;
        if (this.firstChild === referenceNode) this.firstChild = newNode;
        else if (referenceNode.previousSibling) referenceNode.previousSibling.nextSibling = newNode;
        referenceNode.previousSibling = newNode;
        newNode.parentNode = referenceNode.parentNode;
        let node = referenceNode;
        while(node){
            node.index++;
            node = node.nextSibling;
        }
        if (newNode.hasSetProps) this.ownerDocument.addNode(newNode);
        this.ownerDocument.endTransaction();
        this.ownerDocument.queueUpdate();
    }
    removeChild(child) {
        if (child.parentNode !== this || !this.ownerDocument.isMounted) return;
        this.ownerDocument.startTransaction();
        let node = child.nextSibling;
        while(node){
            node.index--;
            node = node.nextSibling;
        }
        if (child.nextSibling) child.nextSibling.previousSibling = child.previousSibling;
        if (child.previousSibling) child.previousSibling.nextSibling = child.nextSibling;
        if (this.firstChild === child) this.firstChild = child.nextSibling;
        if (this.lastChild === child) this.lastChild = child.previousSibling;
        child.parentNode = null;
        child.nextSibling = null;
        child.previousSibling = null;
        child.index = 0;
        this.ownerDocument.removeNode(child);
        this.ownerDocument.endTransaction();
        this.ownerDocument.queueUpdate();
    }
    addEventListener() {}
    removeEventListener() {}
    constructor(ownerDocument){
        this._firstChild = null;
        this._lastChild = null;
        this._previousSibling = null;
        this._nextSibling = null;
        this._parentNode = null;
        this.ownerDocument = ownerDocument;
    }
}
class $681cc3c98f569e39$export$dc064fe9e59310fd extends $681cc3c98f569e39$export$410b0c854570d131 {
    get index() {
        return this._index;
    }
    set index(index) {
        this._index = index;
        this.ownerDocument.markDirty(this);
    }
    get level() {
        if (this.parentNode instanceof $681cc3c98f569e39$export$dc064fe9e59310fd) return this.parentNode.level + (this.node.type === 'item' ? 1 : 0);
        return 0;
    }
    updateNode() {
        var _this_previousSibling, _this_nextSibling, _this_firstChild, _this_lastChild;
        let node = this.ownerDocument.getMutableNode(this);
        node.index = this.index;
        node.level = this.level;
        node.parentKey = this.parentNode instanceof $681cc3c98f569e39$export$dc064fe9e59310fd ? this.parentNode.node.key : null;
        var _this_previousSibling_node_key;
        node.prevKey = (_this_previousSibling_node_key = (_this_previousSibling = this.previousSibling) === null || _this_previousSibling === void 0 ? void 0 : _this_previousSibling.node.key) !== null && _this_previousSibling_node_key !== void 0 ? _this_previousSibling_node_key : null;
        var _this_nextSibling_node_key;
        node.nextKey = (_this_nextSibling_node_key = (_this_nextSibling = this.nextSibling) === null || _this_nextSibling === void 0 ? void 0 : _this_nextSibling.node.key) !== null && _this_nextSibling_node_key !== void 0 ? _this_nextSibling_node_key : null;
        node.hasChildNodes = !!this.firstChild;
        var _this_firstChild_node_key;
        node.firstChildKey = (_this_firstChild_node_key = (_this_firstChild = this.firstChild) === null || _this_firstChild === void 0 ? void 0 : _this_firstChild.node.key) !== null && _this_firstChild_node_key !== void 0 ? _this_firstChild_node_key : null;
        var _this_lastChild_node_key;
        node.lastChildKey = (_this_lastChild_node_key = (_this_lastChild = this.lastChild) === null || _this_lastChild === void 0 ? void 0 : _this_lastChild.node.key) !== null && _this_lastChild_node_key !== void 0 ? _this_lastChild_node_key : null;
    }
    setProps(obj, ref, rendered, render) {
        let node = this.ownerDocument.getMutableNode(this);
        let { value: value, textValue: textValue, id: id, ...props } = obj;
        props.ref = ref;
        node.props = props;
        node.rendered = rendered;
        node.render = render;
        node.value = value;
        node.textValue = textValue || (typeof props.children === 'string' ? props.children : '') || obj['aria-label'] || '';
        if (id != null && id !== node.key) {
            if (this.hasSetProps) throw new Error('Cannot change the id of an item');
            node.key = id;
        }
        // If this is the first time props have been set, end the transaction started in the constructor
        // so this node can be emitted.
        if (!this.hasSetProps) {
            this.ownerDocument.addNode(this);
            this.ownerDocument.endTransaction();
            this.hasSetProps = true;
        }
        this.ownerDocument.queueUpdate();
    }
    get style() {
        return {};
    }
    hasAttribute() {}
    setAttribute() {}
    setAttributeNS() {}
    removeAttribute() {}
    constructor(type, ownerDocument){
        super(ownerDocument);
        this.nodeType = 8 // COMMENT_NODE (we'd use ELEMENT_NODE but React DevTools will fail to get its dimensions)
        ;
        this._index = 0;
        this.hasSetProps = false;
        this.node = new ($23b9f4fcf0fe224b$export$d68d59712b04d9d1)(type, `react-aria-${++ownerDocument.nodeId}`);
        // Start a transaction so that no updates are emitted from the collection
        // until the props for this node are set. We don't know the real id for the
        // node until then, so we need to avoid emitting collections in an inconsistent state.
        this.ownerDocument.startTransaction();
    }
}
class $681cc3c98f569e39$export$b34a105447964f9f extends $681cc3c98f569e39$export$410b0c854570d131 {
    get isConnected() {
        return this.isMounted;
    }
    createElement(type) {
        return new $681cc3c98f569e39$export$dc064fe9e59310fd(type, this);
    }
    /**
   * Lazily gets a mutable instance of a Node. If the node has already
   * been cloned during this update cycle, it just returns the existing one.
   */ getMutableNode(element) {
        let node = element.node;
        if (!this.mutatedNodes.has(element)) {
            node = element.node.clone();
            this.mutatedNodes.add(element);
            element.node = node;
        }
        this.markDirty(element);
        return node;
    }
    getMutableCollection() {
        if (!this.isSSR && !this.collectionMutated) {
            this.collection = this.collection.clone();
            this.collectionMutated = true;
        }
        return this.collection;
    }
    markDirty(node) {
        this.dirtyNodes.add(node);
    }
    startTransaction() {
        this.transactionCount++;
    }
    endTransaction() {
        this.transactionCount--;
    }
    addNode(element) {
        let collection = this.getMutableCollection();
        if (!collection.getItem(element.node.key)) {
            collection.addNode(element.node);
            for (let child of element)this.addNode(child);
        }
        this.markDirty(element);
    }
    removeNode(node) {
        for (let child of node)this.removeNode(child);
        let collection = this.getMutableCollection();
        collection.removeNode(node.node.key);
        this.markDirty(node);
    }
    /** Finalizes the collection update, updating all nodes and freezing the collection. */ getCollection() {
        if (this.transactionCount > 0) return this.collection;
        this.updateCollection();
        return this.collection;
    }
    updateCollection() {
        for (let element of this.dirtyNodes)if (element instanceof $681cc3c98f569e39$export$dc064fe9e59310fd && element.isConnected) element.updateNode();
        this.dirtyNodes.clear();
        if (this.mutatedNodes.size || this.collectionMutated) {
            var _this_firstChild, _this_lastChild;
            let collection = this.getMutableCollection();
            for (let element of this.mutatedNodes)if (element.isConnected) collection.addNode(element.node);
            var _this_firstChild_node_key, _this_lastChild_node_key;
            collection.commit((_this_firstChild_node_key = (_this_firstChild = this.firstChild) === null || _this_firstChild === void 0 ? void 0 : _this_firstChild.node.key) !== null && _this_firstChild_node_key !== void 0 ? _this_firstChild_node_key : null, (_this_lastChild_node_key = (_this_lastChild = this.lastChild) === null || _this_lastChild === void 0 ? void 0 : _this_lastChild.node.key) !== null && _this_lastChild_node_key !== void 0 ? _this_lastChild_node_key : null, this.isSSR);
            this.mutatedNodes.clear();
        }
        this.collectionMutated = false;
    }
    queueUpdate() {
        // Don't emit any updates if there is a transaction in progress.
        // queueUpdate should be called again after the transaction.
        if (this.dirtyNodes.size === 0 || this.transactionCount > 0) return;
        for (let fn of this.subscriptions)fn();
    }
    subscribe(fn) {
        this.subscriptions.add(fn);
        return ()=>this.subscriptions.delete(fn);
    }
    resetAfterSSR() {
        if (this.isSSR) {
            this.isSSR = false;
            this.firstChild = null;
            this.lastChild = null;
            this.nodeId = 0;
        }
    }
    constructor(collection){
        // @ts-ignore
        super(null);
        this.nodeType = 11 // DOCUMENT_FRAGMENT_NODE
        ;
        this.ownerDocument = this;
        this.dirtyNodes = new Set();
        this.isSSR = false;
        this.nodeId = 0;
        this.nodesByProps = new WeakMap();
        this.isMounted = true;
        this.mutatedNodes = new Set();
        this.subscriptions = new Set();
        this.transactionCount = 0;
        this.collection = collection;
        this.collectionMutated = true;
    }
}

/*
 * Copyright 2024 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 
function $e948873055cbafe4$export$727c8fc270210f13(props) {
    let { children: children, items: items, idScope: idScope, addIdAndValue: addIdAndValue, dependencies: dependencies = [] } = props;
    // Invalidate the cache whenever the parent value changes.
    // eslint-disable-next-line react-hooks/exhaustive-deps
    let cache = (reactExports.useMemo)(()=>new WeakMap(), dependencies);
    return (reactExports.useMemo)(()=>{
        if (items && typeof children === 'function') {
            let res = [];
            for (let item of items){
                let rendered = cache.get(item);
                if (!rendered) {
                    rendered = children(item);
                    var _rendered_props_id, _ref;
                    // @ts-ignore
                    let key = (_ref = (_rendered_props_id = rendered.props.id) !== null && _rendered_props_id !== void 0 ? _rendered_props_id : item.key) !== null && _ref !== void 0 ? _ref : item.id;
                    // eslint-disable-next-line max-depth
                    if (key == null) throw new Error('Could not determine key for item');
                    // eslint-disable-next-line max-depth
                    if (idScope) key = idScope + ':' + key;
                    // Note: only works if wrapped Item passes through id...
                    rendered = (reactExports.cloneElement)(rendered, addIdAndValue ? {
                        key: key,
                        id: key,
                        value: item
                    } : {
                        key: key
                    });
                    cache.set(item, rendered);
                }
                res.push(rendered);
            }
            return res;
        } else if (typeof children !== 'function') return children;
    }, [
        children,
        items,
        cache,
        idScope,
        addIdAndValue
    ]);
}

/*
 * Copyright 2024 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 


// React doesn't understand the <template> element, which doesn't have children like a normal element.
// It will throw an error during hydration when it expects the firstChild to contain content rendered
// on the server, when in reality, the browser will have placed this inside the `content` document fragment.
// This monkey patches the firstChild property for our special hidden template elements to work around this error.
// See https://github.com/facebook/react/issues/19932
if (typeof HTMLTemplateElement !== 'undefined') {
    const getFirstChild = Object.getOwnPropertyDescriptor(Node.prototype, 'firstChild').get;
    Object.defineProperty(HTMLTemplateElement.prototype, 'firstChild', {
        configurable: true,
        enumerable: true,
        get: function() {
            if (this.dataset.reactAriaHidden) return this.content.firstChild;
            else return getFirstChild.call(this);
        }
    });
}
const $f39a9eba43920ace$export$94b6d0abf7d33e8c = /*#__PURE__*/ (reactExports.createContext)(false);
// Portal to nowhere
const $f39a9eba43920ace$var$hiddenFragment = typeof DocumentFragment !== 'undefined' ? new DocumentFragment() : null;
function $f39a9eba43920ace$export$8dc98ba7eadeaa56(props) {
    let isHidden = (reactExports.useContext)($f39a9eba43920ace$export$94b6d0abf7d33e8c);
    let isSSR = ($b5e257d569688ac6$export$535bd6ca7f90a273)();
    if (isHidden) // Don't hide again if we are already hidden.
    return /*#__PURE__*/ (React).createElement((React).Fragment, null, props.children);
    let children = /*#__PURE__*/ (React).createElement($f39a9eba43920ace$export$94b6d0abf7d33e8c.Provider, {
        value: true
    }, props.children);
    // In SSR, portals are not supported by React. Instead, render into a <template>
    // element, which the browser will never display to the user. In addition, the
    // content is not part of the DOM tree, so it won't affect ids or other accessibility attributes.
    return isSSR ? /*#__PURE__*/ (React).createElement("template", {
        "data-react-aria-hidden": true
    }, children) : /*#__PURE__*/ (reactDomExports.createPortal)(children, $f39a9eba43920ace$var$hiddenFragment);
}
function $f39a9eba43920ace$export$86427a43e3e48ebb(fn) {
    let Wrapper = (props, ref)=>{
        let isHidden = (reactExports.useContext)($f39a9eba43920ace$export$94b6d0abf7d33e8c);
        if (isHidden) return null;
        return fn(props, ref);
    };
    // @ts-ignore - for react dev tools
    Wrapper.displayName = fn.displayName || fn.name;
    return (reactExports.forwardRef)(Wrapper);
}
function $f39a9eba43920ace$export$b5d7cc18bb8d2b59() {
    return (reactExports.useContext)($f39a9eba43920ace$export$94b6d0abf7d33e8c);
}

var shim = {exports: {}};

var useSyncExternalStoreShim_production_min = {};

/**
 * @license React
 * use-sync-external-store-shim.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var hasRequiredUseSyncExternalStoreShim_production_min;

function requireUseSyncExternalStoreShim_production_min () {
	if (hasRequiredUseSyncExternalStoreShim_production_min) return useSyncExternalStoreShim_production_min;
	hasRequiredUseSyncExternalStoreShim_production_min = 1;
var e=reactExports;function h(a,b){return a===b&&(0!==a||1/a===1/b)||a!==a&&b!==b}var k="function"===typeof Object.is?Object.is:h,l=e.useState,m=e.useEffect,n=e.useLayoutEffect,p=e.useDebugValue;function q(a,b){var d=b(),f=l({inst:{value:d,getSnapshot:b}}),c=f[0].inst,g=f[1];n(function(){c.value=d;c.getSnapshot=b;r(c)&&g({inst:c});},[a,d,b]);m(function(){r(c)&&g({inst:c});return a(function(){r(c)&&g({inst:c});})},[a]);p(d);return d}
	function r(a){var b=a.getSnapshot;a=a.value;try{var d=b();return !k(a,d)}catch(f){return !0}}function t(a,b){return b()}var u="undefined"===typeof window||"undefined"===typeof window.document||"undefined"===typeof window.document.createElement?t:q;useSyncExternalStoreShim_production_min.useSyncExternalStore=void 0!==e.useSyncExternalStore?e.useSyncExternalStore:u;
	return useSyncExternalStoreShim_production_min;
}

var useSyncExternalStoreShim_development = {};

/**
 * @license React
 * use-sync-external-store-shim.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var hasRequiredUseSyncExternalStoreShim_development;

function requireUseSyncExternalStoreShim_development () {
	if (hasRequiredUseSyncExternalStoreShim_development) return useSyncExternalStoreShim_development;
	hasRequiredUseSyncExternalStoreShim_development = 1;

	if (process.env.NODE_ENV !== "production") {
	  (function() {

	/* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */
	if (
	  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' &&
	  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart ===
	    'function'
	) {
	  __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
	}
	          var React = reactExports;

	var ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;

	function error(format) {
	  {
	    {
	      for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
	        args[_key2 - 1] = arguments[_key2];
	      }

	      printWarning('error', format, args);
	    }
	  }
	}

	function printWarning(level, format, args) {
	  // When changing this logic, you might want to also
	  // update consoleWithStackDev.www.js as well.
	  {
	    var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
	    var stack = ReactDebugCurrentFrame.getStackAddendum();

	    if (stack !== '') {
	      format += '%s';
	      args = args.concat([stack]);
	    } // eslint-disable-next-line react-internal/safe-string-coercion


	    var argsWithFormat = args.map(function (item) {
	      return String(item);
	    }); // Careful: RN currently depends on this prefix

	    argsWithFormat.unshift('Warning: ' + format); // We intentionally don't use spread (or .apply) directly because it
	    // breaks IE9: https://github.com/facebook/react/issues/13610
	    // eslint-disable-next-line react-internal/no-production-logging

	    Function.prototype.apply.call(console[level], console, argsWithFormat);
	  }
	}

	/**
	 * inlined Object.is polyfill to avoid requiring consumers ship their own
	 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
	 */
	function is(x, y) {
	  return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y // eslint-disable-line no-self-compare
	  ;
	}

	var objectIs = typeof Object.is === 'function' ? Object.is : is;

	// dispatch for CommonJS interop named imports.

	var useState = React.useState,
	    useEffect = React.useEffect,
	    useLayoutEffect = React.useLayoutEffect,
	    useDebugValue = React.useDebugValue;
	var didWarnOld18Alpha = false;
	var didWarnUncachedGetSnapshot = false; // Disclaimer: This shim breaks many of the rules of React, and only works
	// because of a very particular set of implementation details and assumptions
	// -- change any one of them and it will break. The most important assumption
	// is that updates are always synchronous, because concurrent rendering is
	// only available in versions of React that also have a built-in
	// useSyncExternalStore API. And we only use this shim when the built-in API
	// does not exist.
	//
	// Do not assume that the clever hacks used by this hook also work in general.
	// The point of this shim is to replace the need for hacks by other libraries.

	function useSyncExternalStore(subscribe, getSnapshot, // Note: The shim does not use getServerSnapshot, because pre-18 versions of
	// React do not expose a way to check if we're hydrating. So users of the shim
	// will need to track that themselves and return the correct value
	// from `getSnapshot`.
	getServerSnapshot) {
	  {
	    if (!didWarnOld18Alpha) {
	      if (React.startTransition !== undefined) {
	        didWarnOld18Alpha = true;

	        error('You are using an outdated, pre-release alpha of React 18 that ' + 'does not support useSyncExternalStore. The ' + 'use-sync-external-store shim will not work correctly. Upgrade ' + 'to a newer pre-release.');
	      }
	    }
	  } // Read the current snapshot from the store on every render. Again, this
	  // breaks the rules of React, and only works here because of specific
	  // implementation details, most importantly that updates are
	  // always synchronous.


	  var value = getSnapshot();

	  {
	    if (!didWarnUncachedGetSnapshot) {
	      var cachedValue = getSnapshot();

	      if (!objectIs(value, cachedValue)) {
	        error('The result of getSnapshot should be cached to avoid an infinite loop');

	        didWarnUncachedGetSnapshot = true;
	      }
	    }
	  } // Because updates are synchronous, we don't queue them. Instead we force a
	  // re-render whenever the subscribed state changes by updating an some
	  // arbitrary useState hook. Then, during render, we call getSnapshot to read
	  // the current value.
	  //
	  // Because we don't actually use the state returned by the useState hook, we
	  // can save a bit of memory by storing other stuff in that slot.
	  //
	  // To implement the early bailout, we need to track some things on a mutable
	  // object. Usually, we would put that in a useRef hook, but we can stash it in
	  // our useState hook instead.
	  //
	  // To force a re-render, we call forceUpdate({inst}). That works because the
	  // new object always fails an equality check.


	  var _useState = useState({
	    inst: {
	      value: value,
	      getSnapshot: getSnapshot
	    }
	  }),
	      inst = _useState[0].inst,
	      forceUpdate = _useState[1]; // Track the latest getSnapshot function with a ref. This needs to be updated
	  // in the layout phase so we can access it during the tearing check that
	  // happens on subscribe.


	  useLayoutEffect(function () {
	    inst.value = value;
	    inst.getSnapshot = getSnapshot; // Whenever getSnapshot or subscribe changes, we need to check in the
	    // commit phase if there was an interleaved mutation. In concurrent mode
	    // this can happen all the time, but even in synchronous mode, an earlier
	    // effect may have mutated the store.

	    if (checkIfSnapshotChanged(inst)) {
	      // Force a re-render.
	      forceUpdate({
	        inst: inst
	      });
	    }
	  }, [subscribe, value, getSnapshot]);
	  useEffect(function () {
	    // Check for changes right before subscribing. Subsequent changes will be
	    // detected in the subscription handler.
	    if (checkIfSnapshotChanged(inst)) {
	      // Force a re-render.
	      forceUpdate({
	        inst: inst
	      });
	    }

	    var handleStoreChange = function () {
	      // TODO: Because there is no cross-renderer API for batching updates, it's
	      // up to the consumer of this library to wrap their subscription event
	      // with unstable_batchedUpdates. Should we try to detect when this isn't
	      // the case and print a warning in development?
	      // The store changed. Check if the snapshot changed since the last time we
	      // read from the store.
	      if (checkIfSnapshotChanged(inst)) {
	        // Force a re-render.
	        forceUpdate({
	          inst: inst
	        });
	      }
	    }; // Subscribe to the store and return a clean-up function.


	    return subscribe(handleStoreChange);
	  }, [subscribe]);
	  useDebugValue(value);
	  return value;
	}

	function checkIfSnapshotChanged(inst) {
	  var latestGetSnapshot = inst.getSnapshot;
	  var prevValue = inst.value;

	  try {
	    var nextValue = latestGetSnapshot();
	    return !objectIs(prevValue, nextValue);
	  } catch (error) {
	    return true;
	  }
	}

	function useSyncExternalStore$1(subscribe, getSnapshot, getServerSnapshot) {
	  // Note: The shim does not use getServerSnapshot, because pre-18 versions of
	  // React do not expose a way to check if we're hydrating. So users of the shim
	  // will need to track that themselves and return the correct value
	  // from `getSnapshot`.
	  return getSnapshot();
	}

	var canUseDOM = !!(typeof window !== 'undefined' && typeof window.document !== 'undefined' && typeof window.document.createElement !== 'undefined');

	var isServerEnvironment = !canUseDOM;

	var shim = isServerEnvironment ? useSyncExternalStore$1 : useSyncExternalStore;
	var useSyncExternalStore$2 = React.useSyncExternalStore !== undefined ? React.useSyncExternalStore : shim;

	useSyncExternalStoreShim_development.useSyncExternalStore = useSyncExternalStore$2;
	          /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */
	if (
	  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' &&
	  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop ===
	    'function'
	) {
	  __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
	}
	        
	  })();
	}
	return useSyncExternalStoreShim_development;
}

if (process.env.NODE_ENV === 'production') {
  shim.exports = requireUseSyncExternalStoreShim_production_min();
} else {
  shim.exports = requireUseSyncExternalStoreShim_development();
}

var shimExports = shim.exports;

/*
 * Copyright 2024 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 








const $e1995378a142960e$var$ShallowRenderContext = /*#__PURE__*/ (reactExports.createContext)(false);
const $e1995378a142960e$var$CollectionDocumentContext = /*#__PURE__*/ (reactExports.createContext)(null);
function $e1995378a142960e$export$bf788dd355e3a401(props) {
    // If a document was provided above us, we're already in a hidden tree. Just render the content.
    let doc = (reactExports.useContext)($e1995378a142960e$var$CollectionDocumentContext);
    if (doc) // The React types prior to 18 did not allow returning ReactNode from components
    // even though the actual implementation since React 16 did.
    // We must return ReactElement so that TS does not complain that <CollectionBuilder>
    // is not a valid JSX element with React 16 and 17 types.
    // https://github.com/DefinitelyTyped/DefinitelyTyped/issues/20544
    return props.content;
    // Otherwise, render a hidden copy of the children so that we can build the collection before constructing the state.
    // This should always come before the real DOM content so we have built the collection by the time it renders during SSR.
    // This is fine. CollectionDocumentContext never changes after mounting.
    // eslint-disable-next-line react-hooks/rules-of-hooks
    let { collection: collection, document: document } = $e1995378a142960e$var$useCollectionDocument(props.createCollection);
    return /*#__PURE__*/ (React).createElement((React).Fragment, null, /*#__PURE__*/ (React).createElement(($f39a9eba43920ace$export$8dc98ba7eadeaa56), null, /*#__PURE__*/ (React).createElement($e1995378a142960e$var$CollectionDocumentContext.Provider, {
        value: document
    }, props.content)), /*#__PURE__*/ (React).createElement($e1995378a142960e$var$CollectionInner, {
        render: props.children,
        collection: collection
    }));
}
function $e1995378a142960e$var$CollectionInner({ collection: collection, render: render }) {
    return render(collection);
}
// React 16 and 17 don't support useSyncExternalStore natively, and the shim provided by React does not support getServerSnapshot.
// This wrapper uses the shim, but additionally calls getServerSnapshot during SSR (according to SSRProvider).
function $e1995378a142960e$var$useSyncExternalStoreFallback(subscribe, getSnapshot, getServerSnapshot) {
    let isSSR = ($b5e257d569688ac6$export$535bd6ca7f90a273)();
    let isSSRRef = (reactExports.useRef)(isSSR);
    // This is read immediately inside the wrapper, which also runs during render.
    // We just need a ref to avoid invalidating the callback itself, which
    // would cause React to re-run the callback more than necessary.
    // eslint-disable-next-line rulesdir/pure-render
    isSSRRef.current = isSSR;
    let getSnapshotWrapper = (reactExports.useCallback)(()=>{
        return isSSRRef.current ? getServerSnapshot() : getSnapshot();
    }, [
        getSnapshot,
        getServerSnapshot
    ]);
    return (shimExports.useSyncExternalStore)(subscribe, getSnapshotWrapper);
}
const $e1995378a142960e$var$useSyncExternalStore = typeof (React)['useSyncExternalStore'] === 'function' ? (React)['useSyncExternalStore'] : $e1995378a142960e$var$useSyncExternalStoreFallback;
function $e1995378a142960e$var$useCollectionDocument(createCollection) {
    // The document instance is mutable, and should never change between renders.
    // useSyncExternalStore is used to subscribe to updates, which vends immutable Collection objects.
    let [document] = (reactExports.useState)(()=>new ($681cc3c98f569e39$export$b34a105447964f9f)((createCollection === null || createCollection === void 0 ? void 0 : createCollection()) || new ($23b9f4fcf0fe224b$export$408d25a4e12db025)()));
    let subscribe = (reactExports.useCallback)((fn)=>document.subscribe(fn), [
        document
    ]);
    let getSnapshot = (reactExports.useCallback)(()=>{
        let collection = document.getCollection();
        if (document.isSSR) // After SSR is complete, reset the document to empty so it is ready for React to render the portal into.
        // We do this _after_ getting the collection above so that the collection still has content in it from SSR
        // during the current render, before React has finished the client render.
        document.resetAfterSSR();
        return collection;
    }, [
        document
    ]);
    let getServerSnapshot = (reactExports.useCallback)(()=>{
        document.isSSR = true;
        return document.getCollection();
    }, [
        document
    ]);
    let collection = $e1995378a142960e$var$useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
    ($f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(()=>{
        document.isMounted = true;
        return ()=>{
            // Mark unmounted so we can skip all of the collection updates caused by 
            // React calling removeChild on every item in the collection.
            document.isMounted = false;
        };
    }, [
        document
    ]);
    return {
        collection: collection,
        document: document
    };
}
const $e1995378a142960e$var$SSRContext = /*#__PURE__*/ (reactExports.createContext)(null);
function $e1995378a142960e$var$useSSRCollectionNode(Type, props, ref, rendered, children, render) {
    // During SSR, portals are not supported, so the collection children will be wrapped in an SSRContext.
    // Since SSR occurs only once, we assume that the elements are rendered in order and never re-render.
    // Therefore we can create elements in our collection document during render so that they are in the
    // collection by the time we need to use the collection to render to the real DOM.
    // After hydration, we switch to client rendering using the portal.
    let itemRef = (reactExports.useCallback)((element)=>{
        element === null || element === void 0 ? void 0 : element.setProps(props, ref, rendered, render);
    }, [
        props,
        ref,
        rendered,
        render
    ]);
    let parentNode = (reactExports.useContext)($e1995378a142960e$var$SSRContext);
    if (parentNode) {
        // Guard against double rendering in strict mode.
        let element = parentNode.ownerDocument.nodesByProps.get(props);
        if (!element) {
            element = parentNode.ownerDocument.createElement(Type);
            element.setProps(props, ref, rendered, render);
            parentNode.appendChild(element);
            parentNode.ownerDocument.updateCollection();
            parentNode.ownerDocument.nodesByProps.set(props, element);
        }
        return children ? /*#__PURE__*/ (React).createElement($e1995378a142960e$var$SSRContext.Provider, {
            value: element
        }, children) : null;
    }
    // @ts-ignore
    return /*#__PURE__*/ (React).createElement(Type, {
        ref: itemRef
    }, children);
}
function $e1995378a142960e$export$18af5c7a9e9b3664(type, render) {
    let Component = ({ node: node })=>render(node.props, node.props.ref, node);
    let Result = (reactExports.forwardRef)((props, ref)=>{
        let isShallow = (reactExports.useContext)($e1995378a142960e$var$ShallowRenderContext);
        if (!isShallow) {
            if (render.length >= 3) throw new Error(render.name + ' cannot be rendered outside a collection.');
            return render(props, ref);
        }
        return $e1995378a142960e$var$useSSRCollectionNode(type, props, ref, 'children' in props ? props.children : null, null, (node)=>/*#__PURE__*/ (React).createElement(Component, {
                node: node
            }));
    });
    // @ts-ignore
    Result.displayName = render.name;
    return Result;
}
function $e1995378a142960e$export$e953bb1cd0f19726(type, render, useChildren = $e1995378a142960e$var$useCollectionChildren) {
    let Component = ({ node: node })=>render(node.props, node.props.ref, node);
    let Result = (reactExports.forwardRef)((props, ref)=>{
        let children = useChildren(props);
        var _useSSRCollectionNode;
        return (_useSSRCollectionNode = $e1995378a142960e$var$useSSRCollectionNode(type, props, ref, null, children, (node)=>/*#__PURE__*/ (React).createElement(Component, {
                node: node
            }))) !== null && _useSSRCollectionNode !== void 0 ? _useSSRCollectionNode : /*#__PURE__*/ (React).createElement((React).Fragment, null);
    });
    // @ts-ignore
    Result.displayName = render.name;
    return Result;
}
function $e1995378a142960e$var$useCollectionChildren(options) {
    return ($e948873055cbafe4$export$727c8fc270210f13)({
        ...options,
        addIdAndValue: true
    });
}
const $e1995378a142960e$var$CollectionContext = /*#__PURE__*/ (reactExports.createContext)(null);
function $e1995378a142960e$export$fb8073518f34e6ec(props) {
    let ctx = (reactExports.useContext)($e1995378a142960e$var$CollectionContext);
    let dependencies = ((ctx === null || ctx === void 0 ? void 0 : ctx.dependencies) || []).concat(props.dependencies);
    let idScope = props.idScope || (ctx === null || ctx === void 0 ? void 0 : ctx.idScope);
    let children = $e1995378a142960e$var$useCollectionChildren({
        ...props,
        idScope: idScope,
        dependencies: dependencies
    });
    let doc = (reactExports.useContext)($e1995378a142960e$var$CollectionDocumentContext);
    if (doc) children = /*#__PURE__*/ (React).createElement($e1995378a142960e$var$CollectionRoot, null, children);
    // Propagate dependencies and idScope to child collections.
    ctx = (reactExports.useMemo)(()=>({
            dependencies: dependencies,
            idScope: idScope
        }), [
        idScope,
        ...dependencies
    ]);
    return /*#__PURE__*/ (React).createElement($e1995378a142960e$var$CollectionContext.Provider, {
        value: ctx
    }, children);
}
function $e1995378a142960e$var$CollectionRoot({ children: children }) {
    let doc = (reactExports.useContext)($e1995378a142960e$var$CollectionDocumentContext);
    let wrappedChildren = (reactExports.useMemo)(()=>/*#__PURE__*/ (React).createElement($e1995378a142960e$var$CollectionDocumentContext.Provider, {
            value: null
        }, /*#__PURE__*/ (React).createElement($e1995378a142960e$var$ShallowRenderContext.Provider, {
            value: true
        }, children)), [
        children
    ]);
    // During SSR, we render the content directly, and append nodes to the document during render.
    // The collection children return null so that nothing is actually rendered into the HTML.
    return ($b5e257d569688ac6$export$535bd6ca7f90a273)() ? /*#__PURE__*/ (React).createElement($e1995378a142960e$var$SSRContext.Provider, {
        value: doc
    }, wrappedChildren) : /*#__PURE__*/ (reactDomExports.createPortal)(wrappedChildren, doc);
}

/*
 * Copyright 2022 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 

const $7135fc7d473fd974$export$d40e14dec8b060a8 = /*#__PURE__*/ (reactExports.createContext)(null);
const $7135fc7d473fd974$export$6e2c8f0811a474ce = /*#__PURE__*/ ($e1995378a142960e$export$e953bb1cd0f19726)('section', (props, ref, section)=>{
    let { render: render } = (reactExports.useContext)($7135fc7d473fd974$export$d40e14dec8b060a8);
    return render(props, ref, section);
});
const $7135fc7d473fd974$export$a164736487e3f0ae = {
    CollectionRoot ({ collection: collection, renderDropIndicator: renderDropIndicator }) {
        return $7135fc7d473fd974$var$useCollectionRender(collection, null, renderDropIndicator);
    },
    CollectionBranch ({ collection: collection, parent: parent, renderDropIndicator: renderDropIndicator }) {
        return $7135fc7d473fd974$var$useCollectionRender(collection, parent, renderDropIndicator);
    }
};
function $7135fc7d473fd974$var$useCollectionRender(collection, parent, renderDropIndicator) {
    return ($e948873055cbafe4$export$727c8fc270210f13)({
        items: parent ? collection.getChildren(parent.key) : collection,
        dependencies: [
            renderDropIndicator
        ],
        children (node) {
            var _collection_getItem;
            let rendered = node.render(node);
            if (!renderDropIndicator || node.type !== 'item') return rendered;
            let key = node.key;
            let keyAfter = collection.getKeyAfter(key);
            return /*#__PURE__*/ (React).createElement((React).Fragment, null, renderDropIndicator({
                type: 'item',
                key: key,
                dropPosition: 'before'
            }), rendered, (keyAfter == null || ((_collection_getItem = collection.getItem(keyAfter)) === null || _collection_getItem === void 0 ? void 0 : _collection_getItem.type) !== 'item') && renderDropIndicator({
                type: 'item',
                key: key,
                dropPosition: 'after'
            }));
        }
    });
}
const $7135fc7d473fd974$export$4feb769f8ddf26c5 = /*#__PURE__*/ (reactExports.createContext)($7135fc7d473fd974$export$a164736487e3f0ae);
function $7135fc7d473fd974$export$90e00781bc59d8f9(focusedKey) {
    return (reactExports.useMemo)(()=>focusedKey != null ? new Set([
            focusedKey
        ]) : null, [
        focusedKey
    ]);
}

/*
 * Copyright 2022 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 


const $64fa3d84918910a7$export$c62b8e45d58ddad9 = Symbol('default');
function $64fa3d84918910a7$export$2881499e37b75b9a({ values: values, children: children }) {
    for (let [Context, value] of values)// @ts-ignore
    children = /*#__PURE__*/ (React).createElement(Context.Provider, {
        value: value
    }, children);
    return children;
}
function $64fa3d84918910a7$export$4d86445c2cf5e3(props) {
    let { className: className, style: style, children: children, defaultClassName: defaultClassName, defaultChildren: defaultChildren, defaultStyle: defaultStyle, values: values } = props;
    return (reactExports.useMemo)(()=>{
        let computedClassName;
        let computedStyle;
        let computedChildren;
        if (typeof className === 'function') computedClassName = className({
            ...values,
            defaultClassName: defaultClassName
        });
        else computedClassName = className;
        if (typeof style === 'function') computedStyle = style({
            ...values,
            defaultStyle: defaultStyle || {}
        });
        else computedStyle = style;
        if (typeof children === 'function') computedChildren = children({
            ...values,
            defaultChildren: defaultChildren
        });
        else if (children == null) computedChildren = defaultChildren;
        else computedChildren = children;
        return {
            className: computedClassName !== null && computedClassName !== void 0 ? computedClassName : defaultClassName,
            style: computedStyle || defaultStyle ? {
                ...defaultStyle,
                ...computedStyle
            } : undefined,
            children: computedChildren !== null && computedChildren !== void 0 ? computedChildren : defaultChildren,
            'data-rac': ''
        };
    }, [
        className,
        style,
        children,
        defaultClassName,
        defaultChildren,
        defaultStyle,
        values
    ]);
}
function $64fa3d84918910a7$export$c245e6201fed2f75(// https://stackoverflow.com/questions/60898079/typescript-type-t-or-function-t-usage
value, wrap) {
    return (renderProps)=>wrap(typeof value === 'function' ? value(renderProps) : value, renderProps);
}
function $64fa3d84918910a7$export$fabf2dc03a41866e(context, slot) {
    let ctx = (reactExports.useContext)(context);
    if (slot === null) // An explicit `null` slot means don't use context.
    return null;
    if (ctx && typeof ctx === 'object' && 'slots' in ctx && ctx.slots) {
        let availableSlots = new Intl.ListFormat().format(Object.keys(ctx.slots).map((p)=>`"${p}"`));
        if (!slot && !ctx.slots[$64fa3d84918910a7$export$c62b8e45d58ddad9]) throw new Error(`A slot prop is required. Valid slot names are ${availableSlots}.`);
        let slotKey = slot || $64fa3d84918910a7$export$c62b8e45d58ddad9;
        if (!ctx.slots[slotKey]) // @ts-ignore
        throw new Error(`Invalid slot "${slot}". Valid slot names are ${availableSlots}.`);
        return ctx.slots[slotKey];
    }
    // @ts-ignore
    return ctx;
}
function $64fa3d84918910a7$export$29f1550f4b0d4415(props, ref, context) {
    let ctx = $64fa3d84918910a7$export$fabf2dc03a41866e(context, props.slot) || {};
    // @ts-ignore - TS says "Type 'unique symbol' cannot be used as an index type." but not sure why.
    let { ref: contextRef, ...contextProps } = ctx;
    let mergedRef = ($df56164dff5785e2$export$4338b53315abf666)((reactExports.useMemo)(()=>($5dc95899b306f630$export$c9058316764c140e)(ref, contextRef), [
        ref,
        contextRef
    ]));
    let mergedProps = ($3ef42575df84b30b$export$9d1611c77c2fe928)(contextProps, props);
    // mergeProps does not merge `style`. Adding this there might be a breaking change.
    if ('style' in contextProps && contextProps.style && 'style' in props && props.style) {
        if (typeof contextProps.style === 'function' || typeof props.style === 'function') // @ts-ignore
        mergedProps.style = (renderProps)=>{
            let contextStyle = typeof contextProps.style === 'function' ? contextProps.style(renderProps) : contextProps.style;
            let defaultStyle = {
                ...renderProps.defaultStyle,
                ...contextStyle
            };
            let style = typeof props.style === 'function' ? props.style({
                ...renderProps,
                defaultStyle: defaultStyle
            }) : props.style;
            return {
                ...defaultStyle,
                ...style
            };
        };
        else // @ts-ignore
        mergedProps.style = {
            ...contextProps.style,
            ...props.style
        };
    }
    return [
        mergedProps,
        mergedRef
    ];
}
function $64fa3d84918910a7$export$9d4c57ee4c6ffdd8() {
    // Assume we do have the slot in the initial render.
    let [hasSlot, setHasSlot] = (reactExports.useState)(true);
    let hasRun = (reactExports.useRef)(false);
    // A callback ref which will run when the slotted element mounts.
    // This should happen before the useLayoutEffect below.
    let ref = (reactExports.useCallback)((el)=>{
        hasRun.current = true;
        setHasSlot(!!el);
    }, []);
    // If the callback hasn't been called, then reset to false.
    ($f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(()=>{
        if (!hasRun.current) setHasSlot(false);
    }, []);
    return [
        ref,
        hasSlot
    ];
}
function $64fa3d84918910a7$export$6d3443f2c48bfc20(ref, isReady = true) {
    let [isEntering, setEntering] = (reactExports.useState)(true);
    $64fa3d84918910a7$var$useAnimation(ref, isEntering && isReady, (reactExports.useCallback)(()=>setEntering(false), []));
    return isEntering && isReady;
}
function $64fa3d84918910a7$export$45fda7c47f93fd48(ref, isOpen) {
    // State to trigger a re-render after animation is complete, which causes the element to be removed from the DOM.
    // Ref to track the state we're in, so we don't immediately reset isExiting to true after the animation.
    let [isExiting, setExiting] = (reactExports.useState)(false);
    let [exitState, setExitState] = (reactExports.useState)('idle');
    // If isOpen becomes false, set isExiting to true.
    if (!isOpen && ref.current && exitState === 'idle') {
        isExiting = true;
        setExiting(true);
        setExitState('exiting');
    }
    // If we exited, and the element has been removed, reset exit state to idle.
    if (!ref.current && exitState === 'exited') setExitState('idle');
    $64fa3d84918910a7$var$useAnimation(ref, isExiting, (reactExports.useCallback)(()=>{
        setExitState('exited');
        setExiting(false);
    }, []));
    return isExiting;
}
function $64fa3d84918910a7$var$useAnimation(ref, isActive, onEnd) {
    let prevAnimation = (reactExports.useRef)(null);
    if (isActive && ref.current) // This is ok because we only read it in the layout effect below, immediately after the commit phase.
    // We could move this to another effect that runs every render, but this would be unnecessarily slow.
    // We only need the computed style right before the animation becomes active.
    // eslint-disable-next-line rulesdir/pure-render
    prevAnimation.current = window.getComputedStyle(ref.current).animation;
    ($f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(()=>{
        if (isActive && ref.current) {
            // Make sure there's actually an animation, and it wasn't there before we triggered the update.
            let computedStyle = window.getComputedStyle(ref.current);
            if (computedStyle.animationName && computedStyle.animationName !== 'none' && computedStyle.animation !== prevAnimation.current) {
                let onAnimationEnd = (e)=>{
                    if (e.target === ref.current) {
                        element.removeEventListener('animationend', onAnimationEnd);
                        ($dbSRa$reactdom).flushSync(()=>{
                            onEnd();
                        });
                    }
                };
                let element = ref.current;
                element.addEventListener('animationend', onAnimationEnd);
                return ()=>{
                    element.removeEventListener('animationend', onAnimationEnd);
                };
            } else onEnd();
        }
    }, [
        ref,
        isActive,
        onEnd
    ]);
}
function $64fa3d84918910a7$export$ef03459518577ad4(props) {
    const prefix = /^(data-.*)$/;
    let filteredProps = {};
    for(const prop in props)if (!prefix.test(prop)) filteredProps[prop] = props[prop];
    return filteredProps;
}

/*
 * Copyright 2022 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 


const $4f118338184dc1d9$export$e2509388b49734e7 = /*#__PURE__*/ (reactExports.createContext)(null);
function $4f118338184dc1d9$var$Link(props, ref) {
    [props, ref] = ($64fa3d84918910a7$export$29f1550f4b0d4415)(props, ref, $4f118338184dc1d9$export$e2509388b49734e7);
    let ElementType = props.href ? 'a' : 'span';
    let { linkProps: linkProps, isPressed: isPressed } = ($298d61e98472621b$export$dcf14c9974fe2767)({
        ...props,
        elementType: ElementType
    }, ref);
    let { hoverProps: hoverProps, isHovered: isHovered } = ($6179b936705e76d3$export$ae780daf29e6d456)(props);
    let { focusProps: focusProps, isFocused: isFocused, isFocusVisible: isFocusVisible } = ($f7dceffc5ad7768b$export$4e328f61c538687f)();
    let renderProps = ($64fa3d84918910a7$export$4d86445c2cf5e3)({
        ...props,
        defaultClassName: 'react-aria-Link',
        values: {
            isCurrent: !!props['aria-current'],
            isDisabled: props.isDisabled || false,
            isPressed: isPressed,
            isHovered: isHovered,
            isFocused: isFocused,
            isFocusVisible: isFocusVisible
        }
    });
    return /*#__PURE__*/ (React).createElement(ElementType, {
        ref: ref,
        slot: props.slot || undefined,
        ...($3ef42575df84b30b$export$9d1611c77c2fe928)(renderProps, linkProps, hoverProps, focusProps),
        "data-focused": isFocused || undefined,
        "data-hovered": isHovered || undefined,
        "data-pressed": isPressed || undefined,
        "data-focus-visible": isFocusVisible || undefined,
        "data-current": !!props['aria-current'] || undefined,
        "data-disabled": props.isDisabled || undefined
    }, renderProps.children);
}
/**
 * A link allows a user to navigate to another page or resource within a web page
 * or application.
 */ const $4f118338184dc1d9$export$a6c7ac8248d6e38a = /*#__PURE__*/ (reactExports.forwardRef)($4f118338184dc1d9$var$Link);

/*
 * Copyright 2022 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 





const $778035c5624f61e7$export$65596d3621b0a4a0 = /*#__PURE__*/ (reactExports.createContext)(null);
function $778035c5624f61e7$var$Breadcrumbs(props, ref) {
    [props, ref] = ($64fa3d84918910a7$export$29f1550f4b0d4415)(props, ref, $778035c5624f61e7$export$65596d3621b0a4a0);
    let { CollectionRoot: CollectionRoot } = (reactExports.useContext)(($7135fc7d473fd974$export$4feb769f8ddf26c5));
    return /*#__PURE__*/ (React).createElement(($e1995378a142960e$export$bf788dd355e3a401), {
        content: /*#__PURE__*/ (React).createElement(($e1995378a142960e$export$fb8073518f34e6ec), props)
    }, (collection)=> {
        var _props_className;
        return (React).createElement("ol", {
            ref: ref,
            ...($65484d02dcb7eb3e$export$457c3d6518dd4c6f)(props, {
                labelable: true
            }),
            slot: props.slot || undefined,
            style: props.style,
            className: (_props_className = props.className) !== null && _props_className !== void 0 ? _props_className : 'react-aria-Breadcrumbs'
        }, /*#__PURE__*/ (React).createElement($778035c5624f61e7$export$65596d3621b0a4a0.Provider, {
            value: props
        }, /*#__PURE__*/ (React).createElement(CollectionRoot, {
            collection: collection
        })));
    });
}
/**
 * Breadcrumbs display a hierarchy of links to the current page or resource in an application.
 */ const $778035c5624f61e7$export$2dc68d50d56fbbd = /*#__PURE__*/ (reactExports.forwardRef)($778035c5624f61e7$var$Breadcrumbs);
const $778035c5624f61e7$export$dabcc1ec9dd9d1cc = /*#__PURE__*/ ($e1995378a142960e$export$18af5c7a9e9b3664)('item', function Breadcrumb(props, ref, node) {
    // Recreating useBreadcrumbItem because we want to use composition instead of having the link builtin.
    let isCurrent = node.nextKey == null;
    let { isDisabled: isDisabled, onAction: onAction } = ($64fa3d84918910a7$export$fabf2dc03a41866e)($778035c5624f61e7$export$65596d3621b0a4a0);
    let linkProps = {
        'aria-current': isCurrent ? 'page' : null,
        isDisabled: isDisabled || isCurrent,
        onPress: ()=>onAction === null || onAction === void 0 ? void 0 : onAction(node.key)
    };
    let renderProps = ($64fa3d84918910a7$export$4d86445c2cf5e3)({
        ...node.props,
        children: node.rendered,
        values: {
            isDisabled: isDisabled || isCurrent,
            isCurrent: isCurrent
        },
        defaultClassName: 'react-aria-Breadcrumb'
    });
    return /*#__PURE__*/ (React).createElement("li", {
        ...($65484d02dcb7eb3e$export$457c3d6518dd4c6f)(props),
        ...renderProps,
        ref: ref,
        "data-disabled": isDisabled || isCurrent || undefined,
        "data-current": isCurrent || undefined
    }, /*#__PURE__*/ (React).createElement(($4f118338184dc1d9$export$e2509388b49734e7).Provider, {
        value: linkProps
    }, renderProps.children));
});

/*
 * Copyright 2022 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 




const $d2b4bc8c273e7be6$var$additionalButtonHTMLAttributes = new Set([
    'form',
    'formAction',
    'formEncType',
    'formMethod',
    'formNoValidate',
    'formTarget',
    'name',
    'value'
]);
const $d2b4bc8c273e7be6$export$24d547caef80ccd1 = /*#__PURE__*/ (reactExports.createContext)({});
function $d2b4bc8c273e7be6$var$Button(props, ref) {
    [props, ref] = ($64fa3d84918910a7$export$29f1550f4b0d4415)(props, ref, $d2b4bc8c273e7be6$export$24d547caef80ccd1);
    let ctx = props;
    let { buttonProps: buttonProps, isPressed: isPressed } = ($701a24aa0da5b062$export$ea18c227d4417cc3)(props, ref);
    let { focusProps: focusProps, isFocused: isFocused, isFocusVisible: isFocusVisible } = ($f7dceffc5ad7768b$export$4e328f61c538687f)(props);
    let { hoverProps: hoverProps, isHovered: isHovered } = ($6179b936705e76d3$export$ae780daf29e6d456)(props);
    let renderProps = ($64fa3d84918910a7$export$4d86445c2cf5e3)({
        ...props,
        values: {
            isHovered: isHovered,
            isPressed: isPressed,
            isFocused: isFocused,
            isFocusVisible: isFocusVisible,
            isDisabled: props.isDisabled || false
        },
        defaultClassName: 'react-aria-Button'
    });
    return /*#__PURE__*/ (React).createElement("button", {
        ...($65484d02dcb7eb3e$export$457c3d6518dd4c6f)(props, {
            propNames: $d2b4bc8c273e7be6$var$additionalButtonHTMLAttributes
        }),
        ...($3ef42575df84b30b$export$9d1611c77c2fe928)(buttonProps, focusProps, hoverProps),
        ...renderProps,
        ref: ref,
        slot: props.slot || undefined,
        "data-disabled": props.isDisabled || undefined,
        "data-pressed": ctx.isPressed || isPressed || undefined,
        "data-hovered": isHovered || undefined,
        "data-focused": isFocused || undefined,
        "data-focus-visible": isFocusVisible || undefined
    });
}
/**
 * A button allows a user to perform an action, with mouse, touch, and keyboard interactions.
 */ const $d2b4bc8c273e7be6$export$353f5b6fc5456de1 = /*#__PURE__*/ ($f39a9eba43920ace$export$86427a43e3e48ebb)($d2b4bc8c273e7be6$var$Button);

/*
 * Copyright 2022 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 

const $514c0188e459b4c0$export$9afb8bc826b033ea = /*#__PURE__*/ (reactExports.createContext)({});
function $514c0188e459b4c0$var$Text(props, ref) {
    [props, ref] = ($64fa3d84918910a7$export$29f1550f4b0d4415)(props, ref, $514c0188e459b4c0$export$9afb8bc826b033ea);
    let { elementType: ElementType = 'span', ...domProps } = props;
    // @ts-ignore
    return /*#__PURE__*/ (React).createElement(ElementType, {
        className: "react-aria-Text",
        ...domProps,
        ref: ref
    });
}
const $514c0188e459b4c0$export$5f1af8db9871e1d6 = /*#__PURE__*/ (reactExports.forwardRef)($514c0188e459b4c0$var$Text);

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 
function $f62d864046160412$export$eac50920cf2fd59a(date, minValue, maxValue) {
    return minValue != null && date.compare(minValue) < 0 || maxValue != null && date.compare(maxValue) > 0;
}
function $f62d864046160412$export$f4a51ff076cc9a09(date, duration, locale, minValue, maxValue) {
    let halfDuration = {};
    for(let key in duration){
        halfDuration[key] = Math.floor(duration[key] / 2);
        if (halfDuration[key] > 0 && duration[key] % 2 === 0) halfDuration[key]--;
    }
    let aligned = $f62d864046160412$export$144a00ba6044eb9(date, duration, locale).subtract(halfDuration);
    return $f62d864046160412$export$5bb865b12696a77d(date, aligned, duration, locale, minValue, maxValue);
}
function $f62d864046160412$export$144a00ba6044eb9(date, duration, locale, minValue, maxValue) {
    // align to the start of the largest unit
    let aligned = date;
    if (duration.years) aligned = ($14e0f24ef4ac5c92$export$f91e89d3d0406102)(date);
    else if (duration.months) aligned = ($14e0f24ef4ac5c92$export$a5a3b454ada2268e)(date);
    else if (duration.weeks) aligned = ($14e0f24ef4ac5c92$export$42c81a444fbfb5d4)(date, locale);
    return $f62d864046160412$export$5bb865b12696a77d(date, aligned, duration, locale, minValue, maxValue);
}
function $f62d864046160412$export$530edbfc915b2b04(date, duration, locale, minValue, maxValue) {
    let d = {
        ...duration
    };
    // subtract 1 from the smallest unit
    if (d.days) d.days--;
    else if (d.weeks) d.weeks--;
    else if (d.months) d.months--;
    else if (d.years) d.years--;
    let aligned = $f62d864046160412$export$144a00ba6044eb9(date, duration, locale).subtract(d);
    return $f62d864046160412$export$5bb865b12696a77d(date, aligned, duration, locale, minValue, maxValue);
}
function $f62d864046160412$export$5bb865b12696a77d(date, aligned, duration, locale, minValue, maxValue) {
    if (minValue && date.compare(minValue) >= 0) {
        let newDate = ($14e0f24ef4ac5c92$export$a75f2bff57811055)(aligned, $f62d864046160412$export$144a00ba6044eb9(($11d87f3f76e88657$export$93522d1a439f3617)(minValue), duration, locale));
        if (newDate) aligned = newDate;
    }
    if (maxValue && date.compare(maxValue) <= 0) {
        let newDate = ($14e0f24ef4ac5c92$export$5c333a116e949cdd)(aligned, $f62d864046160412$export$530edbfc915b2b04(($11d87f3f76e88657$export$93522d1a439f3617)(maxValue), duration, locale));
        if (newDate) aligned = newDate;
    }
    return aligned;
}
function $f62d864046160412$export$4f5203c0d889109e(date, minValue, maxValue) {
    if (minValue) {
        let newDate = ($14e0f24ef4ac5c92$export$a75f2bff57811055)(date, ($11d87f3f76e88657$export$93522d1a439f3617)(minValue));
        if (newDate) date = newDate;
    }
    if (maxValue) {
        let newDate = ($14e0f24ef4ac5c92$export$5c333a116e949cdd)(date, ($11d87f3f76e88657$export$93522d1a439f3617)(maxValue));
        if (newDate) date = newDate;
    }
    return date;
}
function $f62d864046160412$export$a1d3911297b952d7(date, minValue, isDateUnavailable) {
    if (!isDateUnavailable) return date;
    while(date.compare(minValue) >= 0 && isDateUnavailable(date))date = date.subtract({
        days: 1
    });
    if (date.compare(minValue) >= 0) return date;
    return null;
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 



function $131cf43a05231e1e$export$6d095e787d2b5e1f(props) {
    let defaultFormatter = (reactExports.useMemo)(()=>new ($fb18d541ea1ad717$export$ad991b66133851cf)(props.locale), [
        props.locale
    ]);
    let resolvedOptions = (reactExports.useMemo)(()=>defaultFormatter.resolvedOptions(), [
        defaultFormatter
    ]);
    let { locale: locale, createCalendar: createCalendar, visibleDuration: visibleDuration = {
        months: 1
    }, minValue: minValue, maxValue: maxValue, selectionAlignment: selectionAlignment, isDateUnavailable: isDateUnavailable, pageBehavior: pageBehavior = 'visible' } = props;
    let calendar = (reactExports.useMemo)(()=>createCalendar(resolvedOptions.calendar), [
        createCalendar,
        resolvedOptions.calendar
    ]);
    var _props_defaultValue;
    let [value, setControlledValue] = ($458b0a5536c1a7cf$export$40bfa8c7b0832715)(props.value, (_props_defaultValue = props.defaultValue) !== null && _props_defaultValue !== void 0 ? _props_defaultValue : null, props.onChange);
    let calendarDateValue = (reactExports.useMemo)(()=>value ? ($11d87f3f76e88657$export$b4a036af3fc0b032)(($11d87f3f76e88657$export$93522d1a439f3617)(value), calendar) : null, [
        value,
        calendar
    ]);
    let timeZone = (reactExports.useMemo)(()=>value && 'timeZone' in value ? value.timeZone : resolvedOptions.timeZone, [
        value,
        resolvedOptions.timeZone
    ]);
    let focusedCalendarDate = (reactExports.useMemo)(()=>props.focusedValue ? ($f62d864046160412$export$4f5203c0d889109e)(($11d87f3f76e88657$export$b4a036af3fc0b032)(($11d87f3f76e88657$export$93522d1a439f3617)(props.focusedValue), calendar), minValue, maxValue) : undefined, [
        props.focusedValue,
        calendar,
        minValue,
        maxValue
    ]);
    let defaultFocusedCalendarDate = (reactExports.useMemo)(()=>($f62d864046160412$export$4f5203c0d889109e)(props.defaultFocusedValue ? ($11d87f3f76e88657$export$b4a036af3fc0b032)(($11d87f3f76e88657$export$93522d1a439f3617)(props.defaultFocusedValue), calendar) : calendarDateValue || ($11d87f3f76e88657$export$b4a036af3fc0b032)(($14e0f24ef4ac5c92$export$d0bdf45af03a6ea3)(timeZone), calendar), minValue, maxValue), [
        props.defaultFocusedValue,
        calendarDateValue,
        timeZone,
        calendar,
        minValue,
        maxValue
    ]);
    let [focusedDate, setFocusedDate] = ($458b0a5536c1a7cf$export$40bfa8c7b0832715)(focusedCalendarDate, defaultFocusedCalendarDate, props.onFocusChange);
    let [startDate, setStartDate] = (reactExports.useState)(()=>{
        switch(selectionAlignment){
            case 'start':
                return ($f62d864046160412$export$144a00ba6044eb9)(focusedDate, visibleDuration, locale, minValue, maxValue);
            case 'end':
                return ($f62d864046160412$export$530edbfc915b2b04)(focusedDate, visibleDuration, locale, minValue, maxValue);
            case 'center':
            default:
                return ($f62d864046160412$export$f4a51ff076cc9a09)(focusedDate, visibleDuration, locale, minValue, maxValue);
        }
    });
    let [isFocused, setFocused] = (reactExports.useState)(props.autoFocus || false);
    let endDate = (reactExports.useMemo)(()=>{
        let duration = {
            ...visibleDuration
        };
        if (duration.days) duration.days--;
        else duration.days = -1;
        return startDate.add(duration);
    }, [
        startDate,
        visibleDuration
    ]);
    // Reset focused date and visible range when calendar changes.
    let [lastCalendarIdentifier, setLastCalendarIdentifier] = (reactExports.useState)(calendar.identifier);
    if (calendar.identifier !== lastCalendarIdentifier) {
        let newFocusedDate = ($11d87f3f76e88657$export$b4a036af3fc0b032)(focusedDate, calendar);
        setStartDate(($f62d864046160412$export$f4a51ff076cc9a09)(newFocusedDate, visibleDuration, locale, minValue, maxValue));
        setFocusedDate(newFocusedDate);
        setLastCalendarIdentifier(calendar.identifier);
    }
    if (($f62d864046160412$export$eac50920cf2fd59a)(focusedDate, minValue, maxValue)) // If the focused date was moved to an invalid value, it can't be focused, so constrain it.
    setFocusedDate(($f62d864046160412$export$4f5203c0d889109e)(focusedDate, minValue, maxValue));
    else if (focusedDate.compare(startDate) < 0) setStartDate(($f62d864046160412$export$530edbfc915b2b04)(focusedDate, visibleDuration, locale, minValue, maxValue));
    else if (focusedDate.compare(endDate) > 0) setStartDate(($f62d864046160412$export$144a00ba6044eb9)(focusedDate, visibleDuration, locale, minValue, maxValue));
    // Sets focus to a specific cell date
    function focusCell(date) {
        date = ($f62d864046160412$export$4f5203c0d889109e)(date, minValue, maxValue);
        setFocusedDate(date);
    }
    function setValue(newValue) {
        if (!props.isDisabled && !props.isReadOnly) {
            let localValue = newValue;
            if (localValue === null) {
                setControlledValue(null);
                return;
            }
            localValue = ($f62d864046160412$export$4f5203c0d889109e)(localValue, minValue, maxValue);
            localValue = ($f62d864046160412$export$a1d3911297b952d7)(localValue, startDate, isDateUnavailable);
            if (!localValue) return;
            // The display calendar should not have any effect on the emitted value.
            // Emit dates in the same calendar as the original value, if any, otherwise gregorian.
            localValue = ($11d87f3f76e88657$export$b4a036af3fc0b032)(localValue, (value === null || value === void 0 ? void 0 : value.calendar) || new ($3b62074eb05584b2$export$80ee6245ec4f29ec)());
            // Preserve time if the input value had one.
            if (value && 'hour' in value) setControlledValue(value.set(localValue));
            else setControlledValue(localValue);
        }
    }
    let isUnavailable = (reactExports.useMemo)(()=>{
        if (!calendarDateValue) return false;
        if (isDateUnavailable && isDateUnavailable(calendarDateValue)) return true;
        return ($f62d864046160412$export$eac50920cf2fd59a)(calendarDateValue, minValue, maxValue);
    }, [
        calendarDateValue,
        isDateUnavailable,
        minValue,
        maxValue
    ]);
    let isValueInvalid = props.isInvalid || props.validationState === 'invalid' || isUnavailable;
    let validationState = isValueInvalid ? 'invalid' : null;
    let pageDuration = (reactExports.useMemo)(()=>{
        if (pageBehavior === 'visible') return visibleDuration;
        return $131cf43a05231e1e$var$unitDuration(visibleDuration);
    }, [
        pageBehavior,
        visibleDuration
    ]);
    var _props_isDisabled, _props_isReadOnly;
    return {
        isDisabled: (_props_isDisabled = props.isDisabled) !== null && _props_isDisabled !== void 0 ? _props_isDisabled : false,
        isReadOnly: (_props_isReadOnly = props.isReadOnly) !== null && _props_isReadOnly !== void 0 ? _props_isReadOnly : false,
        value: calendarDateValue,
        setValue: setValue,
        visibleRange: {
            start: startDate,
            end: endDate
        },
        minValue: minValue,
        maxValue: maxValue,
        focusedDate: focusedDate,
        timeZone: timeZone,
        validationState: validationState,
        isValueInvalid: isValueInvalid,
        setFocusedDate (date) {
            focusCell(date);
            setFocused(true);
        },
        focusNextDay () {
            focusCell(focusedDate.add({
                days: 1
            }));
        },
        focusPreviousDay () {
            focusCell(focusedDate.subtract({
                days: 1
            }));
        },
        focusNextRow () {
            if (visibleDuration.days) this.focusNextPage();
            else if (visibleDuration.weeks || visibleDuration.months || visibleDuration.years) focusCell(focusedDate.add({
                weeks: 1
            }));
        },
        focusPreviousRow () {
            if (visibleDuration.days) this.focusPreviousPage();
            else if (visibleDuration.weeks || visibleDuration.months || visibleDuration.years) focusCell(focusedDate.subtract({
                weeks: 1
            }));
        },
        focusNextPage () {
            let start = startDate.add(pageDuration);
            setFocusedDate(($f62d864046160412$export$4f5203c0d889109e)(focusedDate.add(pageDuration), minValue, maxValue));
            setStartDate(($f62d864046160412$export$144a00ba6044eb9)(($f62d864046160412$export$5bb865b12696a77d)(focusedDate, start, pageDuration, locale, minValue, maxValue), pageDuration, locale));
        },
        focusPreviousPage () {
            let start = startDate.subtract(pageDuration);
            setFocusedDate(($f62d864046160412$export$4f5203c0d889109e)(focusedDate.subtract(pageDuration), minValue, maxValue));
            setStartDate(($f62d864046160412$export$144a00ba6044eb9)(($f62d864046160412$export$5bb865b12696a77d)(focusedDate, start, pageDuration, locale, minValue, maxValue), pageDuration, locale));
        },
        focusSectionStart () {
            if (visibleDuration.days) focusCell(startDate);
            else if (visibleDuration.weeks) focusCell(($14e0f24ef4ac5c92$export$42c81a444fbfb5d4)(focusedDate, locale));
            else if (visibleDuration.months || visibleDuration.years) focusCell(($14e0f24ef4ac5c92$export$a5a3b454ada2268e)(focusedDate));
        },
        focusSectionEnd () {
            if (visibleDuration.days) focusCell(endDate);
            else if (visibleDuration.weeks) focusCell(($14e0f24ef4ac5c92$export$ef8b6d9133084f4e)(focusedDate, locale));
            else if (visibleDuration.months || visibleDuration.years) focusCell(($14e0f24ef4ac5c92$export$a2258d9c4118825c)(focusedDate));
        },
        focusNextSection (larger) {
            if (!larger && !visibleDuration.days) {
                focusCell(focusedDate.add($131cf43a05231e1e$var$unitDuration(visibleDuration)));
                return;
            }
            if (visibleDuration.days) this.focusNextPage();
            else if (visibleDuration.weeks) focusCell(focusedDate.add({
                months: 1
            }));
            else if (visibleDuration.months || visibleDuration.years) focusCell(focusedDate.add({
                years: 1
            }));
        },
        focusPreviousSection (larger) {
            if (!larger && !visibleDuration.days) {
                focusCell(focusedDate.subtract($131cf43a05231e1e$var$unitDuration(visibleDuration)));
                return;
            }
            if (visibleDuration.days) this.focusPreviousPage();
            else if (visibleDuration.weeks) focusCell(focusedDate.subtract({
                months: 1
            }));
            else if (visibleDuration.months || visibleDuration.years) focusCell(focusedDate.subtract({
                years: 1
            }));
        },
        selectFocusedDate () {
            setValue(focusedDate);
        },
        selectDate (date) {
            setValue(date);
        },
        isFocused: isFocused,
        setFocused: setFocused,
        isInvalid (date) {
            return ($f62d864046160412$export$eac50920cf2fd59a)(date, minValue, maxValue);
        },
        isSelected (date) {
            return calendarDateValue != null && ($14e0f24ef4ac5c92$export$ea39ec197993aef0)(date, calendarDateValue) && !this.isCellDisabled(date) && !this.isCellUnavailable(date);
        },
        isCellFocused (date) {
            return isFocused && focusedDate && ($14e0f24ef4ac5c92$export$ea39ec197993aef0)(date, focusedDate);
        },
        isCellDisabled (date) {
            return props.isDisabled || date.compare(startDate) < 0 || date.compare(endDate) > 0 || this.isInvalid(date);
        },
        isCellUnavailable (date) {
            return props.isDateUnavailable ? props.isDateUnavailable(date) : false;
        },
        isPreviousVisibleRangeInvalid () {
            let prev = startDate.subtract({
                days: 1
            });
            return ($14e0f24ef4ac5c92$export$ea39ec197993aef0)(prev, startDate) || this.isInvalid(prev);
        },
        isNextVisibleRangeInvalid () {
            // Adding may return the same date if we reached the end of time
            // according to the calendar system (e.g. 9999-12-31).
            let next = endDate.add({
                days: 1
            });
            return ($14e0f24ef4ac5c92$export$ea39ec197993aef0)(next, endDate) || this.isInvalid(next);
        },
        getDatesInWeek (weekIndex, from = startDate) {
            // let date = startOfWeek(from, locale);
            let date = from.add({
                weeks: weekIndex
            });
            let dates = [];
            date = ($14e0f24ef4ac5c92$export$42c81a444fbfb5d4)(date, locale);
            // startOfWeek will clamp dates within the calendar system's valid range, which may
            // start in the middle of a week. In this case, add null placeholders.
            let dayOfWeek = ($14e0f24ef4ac5c92$export$2061056d06d7cdf7)(date, locale);
            for(let i = 0; i < dayOfWeek; i++)dates.push(null);
            while(dates.length < 7){
                dates.push(date);
                let nextDate = date.add({
                    days: 1
                });
                if (($14e0f24ef4ac5c92$export$ea39ec197993aef0)(date, nextDate)) break;
                date = nextDate;
            }
            // Add null placeholders if at the end of the calendar system.
            while(dates.length < 7)dates.push(null);
            return dates;
        }
    };
}
function $131cf43a05231e1e$var$unitDuration(duration) {
    let unit = {
        ...duration
    };
    for(let key in duration)unit[key] = 1;
    return unit;
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 




function $9a36b6ba2fb1a7c5$export$9a987164d97ecc90(props) {
    let { value: valueProp, defaultValue: defaultValue, onChange: onChange, createCalendar: createCalendar, locale: locale, visibleDuration: visibleDuration = {
        months: 1
    }, minValue: minValue, maxValue: maxValue, ...calendarProps } = props;
    let [value, setValue] = ($458b0a5536c1a7cf$export$40bfa8c7b0832715)(valueProp, defaultValue || null, onChange);
    let [anchorDate, setAnchorDateState] = (reactExports.useState)(null);
    let alignment = 'center';
    if (value && value.start && value.end) {
        let start = ($f62d864046160412$export$f4a51ff076cc9a09)(($11d87f3f76e88657$export$93522d1a439f3617)(value.start), visibleDuration, locale, minValue, maxValue);
        let end = start.add(visibleDuration).subtract({
            days: 1
        });
        if (value.end.compare(end) > 0) alignment = 'start';
    }
    // Available range must be stored in a ref so we have access to the updated version immediately in `isInvalid`.
    let availableRangeRef = (reactExports.useRef)(null);
    let [availableRange, setAvailableRange] = (reactExports.useState)(null);
    let min = (reactExports.useMemo)(()=>($14e0f24ef4ac5c92$export$a75f2bff57811055)(minValue, availableRange === null || availableRange === void 0 ? void 0 : availableRange.start), [
        minValue,
        availableRange
    ]);
    let max = (reactExports.useMemo)(()=>($14e0f24ef4ac5c92$export$5c333a116e949cdd)(maxValue, availableRange === null || availableRange === void 0 ? void 0 : availableRange.end), [
        maxValue,
        availableRange
    ]);
    let calendar = ($131cf43a05231e1e$export$6d095e787d2b5e1f)({
        ...calendarProps,
        value: value && value.start,
        createCalendar: createCalendar,
        locale: locale,
        visibleDuration: visibleDuration,
        minValue: min,
        maxValue: max,
        selectionAlignment: alignment
    });
    let updateAvailableRange = (date)=>{
        if (date && props.isDateUnavailable && !props.allowsNonContiguousRanges) {
            const nextAvailableStartDate = $9a36b6ba2fb1a7c5$var$nextUnavailableDate(date, calendar, -1);
            const nextAvailableEndDate = $9a36b6ba2fb1a7c5$var$nextUnavailableDate(date, calendar, 1);
            availableRangeRef.current = {
                start: nextAvailableStartDate,
                end: nextAvailableEndDate
            };
            setAvailableRange(availableRangeRef.current);
        } else {
            availableRangeRef.current = null;
            setAvailableRange(null);
        }
    };
    // If the visible range changes, we need to update the available range.
    let [lastVisibleRange, setLastVisibleRange] = (reactExports.useState)(calendar.visibleRange);
    if (!($14e0f24ef4ac5c92$export$91b62ebf2ba703ee)(calendar.visibleRange.start, lastVisibleRange.start) || !($14e0f24ef4ac5c92$export$91b62ebf2ba703ee)(calendar.visibleRange.end, lastVisibleRange.end)) {
        updateAvailableRange(anchorDate);
        setLastVisibleRange(calendar.visibleRange);
    }
    let setAnchorDate = (date)=>{
        if (date) {
            setAnchorDateState(date);
            updateAvailableRange(date);
        } else {
            setAnchorDateState(null);
            updateAvailableRange(null);
        }
    };
    let highlightedRange = anchorDate ? $9a36b6ba2fb1a7c5$var$makeRange(anchorDate, calendar.focusedDate) : value && $9a36b6ba2fb1a7c5$var$makeRange(value.start, value.end);
    let selectDate = (date)=>{
        if (props.isReadOnly) return;
        const constrainedDate = ($f62d864046160412$export$4f5203c0d889109e)(date, min, max);
        const previousAvailableConstrainedDate = ($f62d864046160412$export$a1d3911297b952d7)(constrainedDate, calendar.visibleRange.start, props.isDateUnavailable);
        if (!previousAvailableConstrainedDate) return;
        if (!anchorDate) setAnchorDate(previousAvailableConstrainedDate);
        else {
            let range = $9a36b6ba2fb1a7c5$var$makeRange(anchorDate, previousAvailableConstrainedDate);
            if (range) setValue({
                start: $9a36b6ba2fb1a7c5$var$convertValue(range.start, value === null || value === void 0 ? void 0 : value.start),
                end: $9a36b6ba2fb1a7c5$var$convertValue(range.end, value === null || value === void 0 ? void 0 : value.end)
            });
            setAnchorDate(null);
        }
    };
    let [isDragging, setDragging] = (reactExports.useState)(false);
    let { isDateUnavailable: isDateUnavailable } = props;
    let isInvalidSelection = (reactExports.useMemo)(()=>{
        if (!value || anchorDate) return false;
        if (isDateUnavailable && (isDateUnavailable(value.start) || isDateUnavailable(value.end))) return true;
        return ($f62d864046160412$export$eac50920cf2fd59a)(value.start, minValue, maxValue) || ($f62d864046160412$export$eac50920cf2fd59a)(value.end, minValue, maxValue);
    }, [
        isDateUnavailable,
        value,
        anchorDate,
        minValue,
        maxValue
    ]);
    let isValueInvalid = props.isInvalid || props.validationState === 'invalid' || isInvalidSelection;
    let validationState = isValueInvalid ? 'invalid' : null;
    return {
        ...calendar,
        value: value,
        setValue: setValue,
        anchorDate: anchorDate,
        setAnchorDate: setAnchorDate,
        highlightedRange: highlightedRange,
        validationState: validationState,
        isValueInvalid: isValueInvalid,
        selectFocusedDate () {
            selectDate(calendar.focusedDate);
        },
        selectDate: selectDate,
        highlightDate (date) {
            if (anchorDate) calendar.setFocusedDate(date);
        },
        isSelected (date) {
            return Boolean(highlightedRange && date.compare(highlightedRange.start) >= 0 && date.compare(highlightedRange.end) <= 0 && !calendar.isCellDisabled(date) && !calendar.isCellUnavailable(date));
        },
        isInvalid (date) {
            var _availableRangeRef_current, _availableRangeRef_current1;
            return calendar.isInvalid(date) || ($f62d864046160412$export$eac50920cf2fd59a)(date, (_availableRangeRef_current = availableRangeRef.current) === null || _availableRangeRef_current === void 0 ? void 0 : _availableRangeRef_current.start, (_availableRangeRef_current1 = availableRangeRef.current) === null || _availableRangeRef_current1 === void 0 ? void 0 : _availableRangeRef_current1.end);
        },
        isDragging: isDragging,
        setDragging: setDragging
    };
}
function $9a36b6ba2fb1a7c5$var$makeRange(start, end) {
    if (!start || !end) return null;
    if (end.compare(start) < 0) [start, end] = [
        end,
        start
    ];
    return {
        start: ($11d87f3f76e88657$export$93522d1a439f3617)(start),
        end: ($11d87f3f76e88657$export$93522d1a439f3617)(end)
    };
}
function $9a36b6ba2fb1a7c5$var$convertValue(newValue, oldValue) {
    // The display calendar should not have any effect on the emitted value.
    // Emit dates in the same calendar as the original value, if any, otherwise gregorian.
    newValue = ($11d87f3f76e88657$export$b4a036af3fc0b032)(newValue, (oldValue === null || oldValue === void 0 ? void 0 : oldValue.calendar) || new ($3b62074eb05584b2$export$80ee6245ec4f29ec)());
    // Preserve time if the input value had one.
    if (oldValue && 'hour' in oldValue) return oldValue.set(newValue);
    return newValue;
}
function $9a36b6ba2fb1a7c5$var$nextUnavailableDate(anchorDate, state, dir) {
    let nextDate = anchorDate.add({
        days: dir
    });
    while((dir < 0 ? nextDate.compare(state.visibleRange.start) >= 0 : nextDate.compare(state.visibleRange.end) <= 0) && !state.isCellUnavailable(nextDate))nextDate = nextDate.add({
        days: dir
    });
    if (state.isCellUnavailable(nextDate)) return nextDate.add({
        days: -dir
    });
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 


function $587d3ad58be6d31f$export$daff6da51032a415(props = {}) {
    let [selectedValues, setValue] = ($458b0a5536c1a7cf$export$40bfa8c7b0832715)(props.value, props.defaultValue || [], props.onChange);
    let isRequired = !!props.isRequired && selectedValues.length === 0;
    let invalidValues = (reactExports.useRef)(new Map());
    let validation = ($e5be200c675c3b3a$export$fc1a364ae1f3ff10)({
        ...props,
        value: selectedValues
    });
    let isInvalid = validation.displayValidation.isInvalid;
    var _props_validationState;
    const state = {
        ...validation,
        value: selectedValues,
        setValue (value) {
            if (props.isReadOnly || props.isDisabled) return;
            setValue(value);
        },
        isDisabled: props.isDisabled || false,
        isReadOnly: props.isReadOnly || false,
        isSelected (value) {
            return selectedValues.includes(value);
        },
        addValue (value) {
            if (props.isReadOnly || props.isDisabled) return;
            if (!selectedValues.includes(value)) setValue(selectedValues.concat(value));
        },
        removeValue (value) {
            if (props.isReadOnly || props.isDisabled) return;
            if (selectedValues.includes(value)) setValue(selectedValues.filter((existingValue)=>existingValue !== value));
        },
        toggleValue (value) {
            if (props.isReadOnly || props.isDisabled) return;
            if (selectedValues.includes(value)) setValue(selectedValues.filter((existingValue)=>existingValue !== value));
            else setValue(selectedValues.concat(value));
        },
        setInvalid (value, v) {
            let s = new Map(invalidValues.current);
            if (v.isInvalid) s.set(value, v);
            else s.delete(value);
            invalidValues.current = s;
            validation.updateValidation(($e5be200c675c3b3a$export$75ee7c75d68f5b0e)(...s.values()));
        },
        validationState: (_props_validationState = props.validationState) !== null && _props_validationState !== void 0 ? _props_validationState : isInvalid ? 'invalid' : null,
        isInvalid: isInvalid,
        isRequired: isRequired
    };
    return state;
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ class $a02d57049d202695$export$d085fb9e920b5ca7 {
    *[Symbol.iterator]() {
        yield* this.iterable;
    }
    get size() {
        return this.keyMap.size;
    }
    getKeys() {
        return this.keyMap.keys();
    }
    getKeyBefore(key) {
        let node = this.keyMap.get(key);
        return node ? node.prevKey : null;
    }
    getKeyAfter(key) {
        let node = this.keyMap.get(key);
        return node ? node.nextKey : null;
    }
    getFirstKey() {
        return this.firstKey;
    }
    getLastKey() {
        return this.lastKey;
    }
    getItem(key) {
        return this.keyMap.get(key);
    }
    at(idx) {
        const keys = [
            ...this.getKeys()
        ];
        return this.getItem(keys[idx]);
    }
    getChildren(key) {
        let node = this.keyMap.get(key);
        return (node === null || node === void 0 ? void 0 : node.childNodes) || [];
    }
    constructor(nodes){
        this.keyMap = new Map();
        this.iterable = nodes;
        let visit = (node)=>{
            this.keyMap.set(node.key, node);
            if (node.childNodes && node.type === 'section') for (let child of node.childNodes)visit(child);
        };
        for (let node of nodes)visit(node);
        let last;
        let index = 0;
        for (let [key, node] of this.keyMap){
            if (last) {
                last.nextKey = key;
                node.prevKey = last.key;
            } else {
                this.firstKey = key;
                node.prevKey = undefined;
            }
            if (node.type === 'item') node.index = index++;
            last = node;
            // Set nextKey as undefined since this might be the last node
            // If it isn't the last node, last.nextKey will properly set at start of new loop
            last.nextKey = undefined;
        }
        this.lastKey = last === null || last === void 0 ? void 0 : last.key;
    }
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ class $e40ea825a81a3709$export$52baac22726c72bf extends Set {
    constructor(keys, anchorKey, currentKey){
        super(keys);
        if (keys instanceof $e40ea825a81a3709$export$52baac22726c72bf) {
            this.anchorKey = anchorKey || keys.anchorKey;
            this.currentKey = currentKey || keys.currentKey;
        } else {
            this.anchorKey = anchorKey;
            this.currentKey = currentKey;
        }
    }
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 


function $7af3f5b51489e0b5$var$equalSets(setA, setB) {
    if (setA.size !== setB.size) return false;
    for (let item of setA){
        if (!setB.has(item)) return false;
    }
    return true;
}
function $7af3f5b51489e0b5$export$253fe78d46329472(props) {
    let { selectionMode: selectionMode = 'none', disallowEmptySelection: disallowEmptySelection, allowDuplicateSelectionEvents: allowDuplicateSelectionEvents, selectionBehavior: selectionBehaviorProp = 'toggle', disabledBehavior: disabledBehavior = 'all' } = props;
    // We want synchronous updates to `isFocused` and `focusedKey` after their setters are called.
    // But we also need to trigger a react re-render. So, we have both a ref (sync) and state (async).
    let isFocusedRef = (reactExports.useRef)(false);
    let [, setFocused] = (reactExports.useState)(false);
    let focusedKeyRef = (reactExports.useRef)(null);
    let childFocusStrategyRef = (reactExports.useRef)(null);
    let [, setFocusedKey] = (reactExports.useState)(null);
    let selectedKeysProp = (reactExports.useMemo)(()=>$7af3f5b51489e0b5$var$convertSelection(props.selectedKeys), [
        props.selectedKeys
    ]);
    let defaultSelectedKeys = (reactExports.useMemo)(()=>$7af3f5b51489e0b5$var$convertSelection(props.defaultSelectedKeys, new ($e40ea825a81a3709$export$52baac22726c72bf)()), [
        props.defaultSelectedKeys
    ]);
    let [selectedKeys, setSelectedKeys] = ($458b0a5536c1a7cf$export$40bfa8c7b0832715)(selectedKeysProp, defaultSelectedKeys, props.onSelectionChange);
    let disabledKeysProp = (reactExports.useMemo)(()=>props.disabledKeys ? new Set(props.disabledKeys) : new Set(), [
        props.disabledKeys
    ]);
    let [selectionBehavior, setSelectionBehavior] = (reactExports.useState)(selectionBehaviorProp);
    // If the selectionBehavior prop is set to replace, but the current state is toggle (e.g. due to long press
    // to enter selection mode on touch), and the selection becomes empty, reset the selection behavior.
    if (selectionBehaviorProp === 'replace' && selectionBehavior === 'toggle' && typeof selectedKeys === 'object' && selectedKeys.size === 0) setSelectionBehavior('replace');
    // If the selectionBehavior prop changes, update the state as well.
    let lastSelectionBehavior = (reactExports.useRef)(selectionBehaviorProp);
    (reactExports.useEffect)(()=>{
        if (selectionBehaviorProp !== lastSelectionBehavior.current) {
            setSelectionBehavior(selectionBehaviorProp);
            lastSelectionBehavior.current = selectionBehaviorProp;
        }
    }, [
        selectionBehaviorProp
    ]);
    return {
        selectionMode: selectionMode,
        disallowEmptySelection: disallowEmptySelection,
        selectionBehavior: selectionBehavior,
        setSelectionBehavior: setSelectionBehavior,
        get isFocused () {
            return isFocusedRef.current;
        },
        setFocused (f) {
            isFocusedRef.current = f;
            setFocused(f);
        },
        get focusedKey () {
            return focusedKeyRef.current;
        },
        get childFocusStrategy () {
            return childFocusStrategyRef.current;
        },
        setFocusedKey (k, childFocusStrategy = 'first') {
            focusedKeyRef.current = k;
            childFocusStrategyRef.current = childFocusStrategy;
            setFocusedKey(k);
        },
        selectedKeys: selectedKeys,
        setSelectedKeys (keys) {
            if (allowDuplicateSelectionEvents || !$7af3f5b51489e0b5$var$equalSets(keys, selectedKeys)) setSelectedKeys(keys);
        },
        disabledKeys: disabledKeysProp,
        disabledBehavior: disabledBehavior
    };
}
function $7af3f5b51489e0b5$var$convertSelection(selection, defaultValue) {
    if (!selection) return defaultValue;
    return selection === 'all' ? 'all' : new ($e40ea825a81a3709$export$52baac22726c72bf)(selection);
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 

class $d496c0a20b6e58ec$export$6c8a5aaad13c9852 {
    /**
   * The type of selection that is allowed in the collection.
   */ get selectionMode() {
        return this.state.selectionMode;
    }
    /**
   * Whether the collection allows empty selection.
   */ get disallowEmptySelection() {
        return this.state.disallowEmptySelection;
    }
    /**
   * The selection behavior for the collection.
   */ get selectionBehavior() {
        return this.state.selectionBehavior;
    }
    /**
   * Sets the selection behavior for the collection.
   */ setSelectionBehavior(selectionBehavior) {
        this.state.setSelectionBehavior(selectionBehavior);
    }
    /**
   * Whether the collection is currently focused.
   */ get isFocused() {
        return this.state.isFocused;
    }
    /**
   * Sets whether the collection is focused.
   */ setFocused(isFocused) {
        this.state.setFocused(isFocused);
    }
    /**
   * The current focused key in the collection.
   */ get focusedKey() {
        return this.state.focusedKey;
    }
    /** Whether the first or last child of the focused key should receive focus. */ get childFocusStrategy() {
        return this.state.childFocusStrategy;
    }
    /**
   * Sets the focused key.
   */ setFocusedKey(key, childFocusStrategy) {
        if (key == null || this.collection.getItem(key)) this.state.setFocusedKey(key, childFocusStrategy);
    }
    /**
   * The currently selected keys in the collection.
   */ get selectedKeys() {
        return this.state.selectedKeys === 'all' ? new Set(this.getSelectAllKeys()) : this.state.selectedKeys;
    }
    /**
   * The raw selection value for the collection.
   * Either 'all' for select all, or a set of keys.
   */ get rawSelection() {
        return this.state.selectedKeys;
    }
    /**
   * Returns whether a key is selected.
   */ isSelected(key) {
        if (this.state.selectionMode === 'none') return false;
        key = this.getKey(key);
        return this.state.selectedKeys === 'all' ? this.canSelectItem(key) : this.state.selectedKeys.has(key);
    }
    /**
   * Whether the selection is empty.
   */ get isEmpty() {
        return this.state.selectedKeys !== 'all' && this.state.selectedKeys.size === 0;
    }
    /**
   * Whether all items in the collection are selected.
   */ get isSelectAll() {
        if (this.isEmpty) return false;
        if (this.state.selectedKeys === 'all') return true;
        if (this._isSelectAll != null) return this._isSelectAll;
        let allKeys = this.getSelectAllKeys();
        let selectedKeys = this.state.selectedKeys;
        this._isSelectAll = allKeys.every((k)=>selectedKeys.has(k));
        return this._isSelectAll;
    }
    get firstSelectedKey() {
        let first = null;
        for (let key of this.state.selectedKeys){
            let item = this.collection.getItem(key);
            if (!first || item && ($c5a24bc478652b5f$export$8c434b3a7a4dad6)(this.collection, item, first) < 0) first = item;
        }
        return first === null || first === void 0 ? void 0 : first.key;
    }
    get lastSelectedKey() {
        let last = null;
        for (let key of this.state.selectedKeys){
            let item = this.collection.getItem(key);
            if (!last || item && ($c5a24bc478652b5f$export$8c434b3a7a4dad6)(this.collection, item, last) > 0) last = item;
        }
        return last === null || last === void 0 ? void 0 : last.key;
    }
    get disabledKeys() {
        return this.state.disabledKeys;
    }
    get disabledBehavior() {
        return this.state.disabledBehavior;
    }
    /**
   * Extends the selection to the given key.
   */ extendSelection(toKey) {
        if (this.selectionMode === 'none') return;
        if (this.selectionMode === 'single') {
            this.replaceSelection(toKey);
            return;
        }
        toKey = this.getKey(toKey);
        let selection;
        // Only select the one key if coming from a select all.
        if (this.state.selectedKeys === 'all') selection = new ($e40ea825a81a3709$export$52baac22726c72bf)([
            toKey
        ], toKey, toKey);
        else {
            let selectedKeys = this.state.selectedKeys;
            let anchorKey = selectedKeys.anchorKey || toKey;
            selection = new ($e40ea825a81a3709$export$52baac22726c72bf)(selectedKeys, anchorKey, toKey);
            for (let key of this.getKeyRange(anchorKey, selectedKeys.currentKey || toKey))selection.delete(key);
            for (let key of this.getKeyRange(toKey, anchorKey))if (this.canSelectItem(key)) selection.add(key);
        }
        this.state.setSelectedKeys(selection);
    }
    getKeyRange(from, to) {
        let fromItem = this.collection.getItem(from);
        let toItem = this.collection.getItem(to);
        if (fromItem && toItem) {
            if (($c5a24bc478652b5f$export$8c434b3a7a4dad6)(this.collection, fromItem, toItem) <= 0) return this.getKeyRangeInternal(from, to);
            return this.getKeyRangeInternal(to, from);
        }
        return [];
    }
    getKeyRangeInternal(from, to) {
        let keys = [];
        let key = from;
        while(key){
            let item = this.collection.getItem(key);
            if (item && item.type === 'item' || item.type === 'cell' && this.allowsCellSelection) keys.push(key);
            if (key === to) return keys;
            key = this.collection.getKeyAfter(key);
        }
        return [];
    }
    getKey(key) {
        let item = this.collection.getItem(key);
        if (!item) // ¯\_(ツ)_/¯
        return key;
        // If cell selection is allowed, just return the key.
        if (item.type === 'cell' && this.allowsCellSelection) return key;
        // Find a parent item to select
        while(item.type !== 'item' && item.parentKey != null)item = this.collection.getItem(item.parentKey);
        if (!item || item.type !== 'item') return null;
        return item.key;
    }
    /**
   * Toggles whether the given key is selected.
   */ toggleSelection(key) {
        if (this.selectionMode === 'none') return;
        if (this.selectionMode === 'single' && !this.isSelected(key)) {
            this.replaceSelection(key);
            return;
        }
        key = this.getKey(key);
        if (key == null) return;
        let keys = new ($e40ea825a81a3709$export$52baac22726c72bf)(this.state.selectedKeys === 'all' ? this.getSelectAllKeys() : this.state.selectedKeys);
        if (keys.has(key)) keys.delete(key);
        else if (this.canSelectItem(key)) {
            keys.add(key);
            keys.anchorKey = key;
            keys.currentKey = key;
        }
        if (this.disallowEmptySelection && keys.size === 0) return;
        this.state.setSelectedKeys(keys);
    }
    /**
   * Replaces the selection with only the given key.
   */ replaceSelection(key) {
        if (this.selectionMode === 'none') return;
        key = this.getKey(key);
        if (key == null) return;
        let selection = this.canSelectItem(key) ? new ($e40ea825a81a3709$export$52baac22726c72bf)([
            key
        ], key, key) : new ($e40ea825a81a3709$export$52baac22726c72bf)();
        this.state.setSelectedKeys(selection);
    }
    /**
   * Replaces the selection with the given keys.
   */ setSelectedKeys(keys) {
        if (this.selectionMode === 'none') return;
        let selection = new ($e40ea825a81a3709$export$52baac22726c72bf)();
        for (let key of keys){
            key = this.getKey(key);
            if (key != null) {
                selection.add(key);
                if (this.selectionMode === 'single') break;
            }
        }
        this.state.setSelectedKeys(selection);
    }
    getSelectAllKeys() {
        let keys = [];
        let addKeys = (key)=>{
            while(key != null){
                if (this.canSelectItem(key)) {
                    let item = this.collection.getItem(key);
                    if (item.type === 'item') keys.push(key);
                    // Add child keys. If cell selection is allowed, then include item children too.
                    if (item.hasChildNodes && (this.allowsCellSelection || item.type !== 'item')) addKeys(($c5a24bc478652b5f$export$fbdeaa6a76694f71)(($c5a24bc478652b5f$export$1005530eda016c13)(item, this.collection)).key);
                }
                key = this.collection.getKeyAfter(key);
            }
        };
        addKeys(this.collection.getFirstKey());
        return keys;
    }
    /**
   * Selects all items in the collection.
   */ selectAll() {
        if (!this.isSelectAll && this.selectionMode === 'multiple') this.state.setSelectedKeys('all');
    }
    /**
   * Removes all keys from the selection.
   */ clearSelection() {
        if (!this.disallowEmptySelection && (this.state.selectedKeys === 'all' || this.state.selectedKeys.size > 0)) this.state.setSelectedKeys(new ($e40ea825a81a3709$export$52baac22726c72bf)());
    }
    /**
   * Toggles between select all and an empty selection.
   */ toggleSelectAll() {
        if (this.isSelectAll) this.clearSelection();
        else this.selectAll();
    }
    select(key, e) {
        if (this.selectionMode === 'none') return;
        if (this.selectionMode === 'single') {
            if (this.isSelected(key) && !this.disallowEmptySelection) this.toggleSelection(key);
            else this.replaceSelection(key);
        } else if (this.selectionBehavior === 'toggle' || e && (e.pointerType === 'touch' || e.pointerType === 'virtual')) // if touch or virtual (VO) then we just want to toggle, otherwise it's impossible to multi select because they don't have modifier keys
        this.toggleSelection(key);
        else this.replaceSelection(key);
    }
    /**
   * Returns whether the current selection is equal to the given selection.
   */ isSelectionEqual(selection) {
        if (selection === this.state.selectedKeys) return true;
        // Check if the set of keys match.
        let selectedKeys = this.selectedKeys;
        if (selection.size !== selectedKeys.size) return false;
        for (let key of selection){
            if (!selectedKeys.has(key)) return false;
        }
        for (let key of selectedKeys){
            if (!selection.has(key)) return false;
        }
        return true;
    }
    canSelectItem(key) {
        var _item_props;
        if (this.state.selectionMode === 'none' || this.state.disabledKeys.has(key)) return false;
        let item = this.collection.getItem(key);
        if (!item || (item === null || item === void 0 ? void 0 : (_item_props = item.props) === null || _item_props === void 0 ? void 0 : _item_props.isDisabled) || item.type === 'cell' && !this.allowsCellSelection) return false;
        return true;
    }
    isDisabled(key) {
        var _this_collection_getItem_props, _this_collection_getItem;
        return this.state.disabledBehavior === 'all' && (this.state.disabledKeys.has(key) || !!((_this_collection_getItem = this.collection.getItem(key)) === null || _this_collection_getItem === void 0 ? void 0 : (_this_collection_getItem_props = _this_collection_getItem.props) === null || _this_collection_getItem_props === void 0 ? void 0 : _this_collection_getItem_props.isDisabled));
    }
    isLink(key) {
        var _this_collection_getItem_props, _this_collection_getItem;
        return !!((_this_collection_getItem = this.collection.getItem(key)) === null || _this_collection_getItem === void 0 ? void 0 : (_this_collection_getItem_props = _this_collection_getItem.props) === null || _this_collection_getItem_props === void 0 ? void 0 : _this_collection_getItem_props.href);
    }
    getItemProps(key) {
        var _this_collection_getItem;
        return (_this_collection_getItem = this.collection.getItem(key)) === null || _this_collection_getItem === void 0 ? void 0 : _this_collection_getItem.props;
    }
    constructor(collection, state, options){
        this.collection = collection;
        this.state = state;
        var _options_allowsCellSelection;
        this.allowsCellSelection = (_options_allowsCellSelection = options === null || options === void 0 ? void 0 : options.allowsCellSelection) !== null && _options_allowsCellSelection !== void 0 ? _options_allowsCellSelection : false;
        this._isSelectAll = null;
    }
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 



function $e72dd72e1c76a225$export$2f645645f7bca764(props) {
    let { filter: filter } = props;
    let selectionState = ($7af3f5b51489e0b5$export$253fe78d46329472)(props);
    let disabledKeys = (reactExports.useMemo)(()=>props.disabledKeys ? new Set(props.disabledKeys) : new Set(), [
        props.disabledKeys
    ]);
    let factory = (reactExports.useCallback)((nodes)=>filter ? new ($a02d57049d202695$export$d085fb9e920b5ca7)(filter(nodes)) : new ($a02d57049d202695$export$d085fb9e920b5ca7)(nodes), [
        filter
    ]);
    let context = (reactExports.useMemo)(()=>({
            suppressTextValueWarning: props.suppressTextValueWarning
        }), [
        props.suppressTextValueWarning
    ]);
    let collection = ($7613b1592d41b092$export$6cd28814d92fa9c9)(props, factory, context);
    let selectionManager = (reactExports.useMemo)(()=>new ($d496c0a20b6e58ec$export$6c8a5aaad13c9852)(collection, selectionState), [
        collection,
        selectionState
    ]);
    // Reset focused key if that item is deleted from the collection.
    const cachedCollection = (reactExports.useRef)(null);
    (reactExports.useEffect)(()=>{
        if (selectionState.focusedKey != null && !collection.getItem(selectionState.focusedKey)) {
            const startItem = cachedCollection.current.getItem(selectionState.focusedKey);
            const cachedItemNodes = [
                ...cachedCollection.current.getKeys()
            ].map((key)=>{
                const itemNode = cachedCollection.current.getItem(key);
                return itemNode.type === 'item' ? itemNode : null;
            }).filter((node)=>node !== null);
            const itemNodes = [
                ...collection.getKeys()
            ].map((key)=>{
                const itemNode = collection.getItem(key);
                return itemNode.type === 'item' ? itemNode : null;
            }).filter((node)=>node !== null);
            const diff = cachedItemNodes.length - itemNodes.length;
            let index = Math.min(diff > 1 ? Math.max(startItem.index - diff + 1, 0) : startItem.index, itemNodes.length - 1);
            let newNode;
            let isReverseSearching = false;
            while(index >= 0){
                if (!selectionManager.isDisabled(itemNodes[index].key)) {
                    newNode = itemNodes[index];
                    break;
                }
                // Find next, not disabled item.
                if (index < itemNodes.length - 1 && !isReverseSearching) index++;
                else {
                    isReverseSearching = true;
                    if (index > startItem.index) index = startItem.index;
                    index--;
                }
            }
            selectionState.setFocusedKey(newNode ? newNode.key : null);
        }
        cachedCollection.current = collection;
    }, [
        collection,
        selectionManager,
        selectionState,
        selectionState.focusedKey
    ]);
    return {
        collection: collection,
        disabledKeys: disabledKeys,
        selectionManager: selectionManager
    };
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 


function $a0d645289fe9b86b$export$e7f05e985daf4b5f(props) {
    var _props_defaultSelectedKey;
    let [selectedKey, setSelectedKey] = ($458b0a5536c1a7cf$export$40bfa8c7b0832715)(props.selectedKey, (_props_defaultSelectedKey = props.defaultSelectedKey) !== null && _props_defaultSelectedKey !== void 0 ? _props_defaultSelectedKey : null, props.onSelectionChange);
    let selectedKeys = (reactExports.useMemo)(()=>selectedKey != null ? [
            selectedKey
        ] : [], [
        selectedKey
    ]);
    let { collection: collection, disabledKeys: disabledKeys, selectionManager: selectionManager } = ($e72dd72e1c76a225$export$2f645645f7bca764)({
        ...props,
        selectionMode: 'single',
        disallowEmptySelection: true,
        allowDuplicateSelectionEvents: true,
        selectedKeys: selectedKeys,
        onSelectionChange: (keys)=>{
            var _keys_values_next_value;
            let key = (_keys_values_next_value = keys.values().next().value) !== null && _keys_values_next_value !== void 0 ? _keys_values_next_value : null;
            // Always fire onSelectionChange, even if the key is the same
            // as the current key (useControlledState does not).
            if (key === selectedKey && props.onSelectionChange) props.onSelectionChange(key);
            setSelectedKey(key);
        }
    });
    let selectedItem = selectedKey != null ? collection.getItem(selectedKey) : null;
    return {
        collection: collection,
        disabledKeys: disabledKeys,
        selectionManager: selectionManager,
        selectedKey: selectedKey,
        setSelectedKey: setSelectedKey,
        selectedItem: selectedItem
    };
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 

function $fc909762b330b746$export$61c6a8c84e605fb6(props) {
    let [isOpen, setOpen] = ($458b0a5536c1a7cf$export$40bfa8c7b0832715)(props.isOpen, props.defaultOpen || false, props.onOpenChange);
    const open = (reactExports.useCallback)(()=>{
        setOpen(true);
    }, [
        setOpen
    ]);
    const close = (reactExports.useCallback)(()=>{
        setOpen(false);
    }, [
        setOpen
    ]);
    const toggle = (reactExports.useCallback)(()=>{
        setOpen(!isOpen);
    }, [
        setOpen,
        isOpen
    ]);
    return {
        isOpen: isOpen,
        setOpen: setOpen,
        open: open,
        close: close,
        toggle: toggle
    };
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 





function $a9e7382a7d111cb5$export$b453a3bfd4a5fa9e(props) {
    var _collection_getItem, _collection_getItem1;
    let { defaultFilter: defaultFilter, menuTrigger: menuTrigger = 'input', allowsEmptyCollection: allowsEmptyCollection = false, allowsCustomValue: allowsCustomValue, shouldCloseOnBlur: shouldCloseOnBlur = true } = props;
    let [showAllItems, setShowAllItems] = (reactExports.useState)(false);
    let [isFocused, setFocusedState] = (reactExports.useState)(false);
    let [focusStrategy, setFocusStrategy] = (reactExports.useState)(null);
    let onSelectionChange = (key)=>{
        if (props.onSelectionChange) props.onSelectionChange(key);
        // If key is the same, reset the inputValue and close the menu
        // (scenario: user clicks on already selected option)
        if (key === selectedKey) {
            resetInputValue();
            closeMenu();
        }
    };
    var _props_items;
    let { collection: collection, selectionManager: selectionManager, selectedKey: selectedKey, setSelectedKey: setSelectedKey, selectedItem: selectedItem, disabledKeys: disabledKeys } = ($a0d645289fe9b86b$export$e7f05e985daf4b5f)({
        ...props,
        onSelectionChange: onSelectionChange,
        items: (_props_items = props.items) !== null && _props_items !== void 0 ? _props_items : props.defaultItems
    });
    var _props_defaultInputValue, _ref;
    let [inputValue, setInputValue] = ($458b0a5536c1a7cf$export$40bfa8c7b0832715)(props.inputValue, (_ref = (_props_defaultInputValue = props.defaultInputValue) !== null && _props_defaultInputValue !== void 0 ? _props_defaultInputValue : (_collection_getItem = collection.getItem(selectedKey)) === null || _collection_getItem === void 0 ? void 0 : _collection_getItem.textValue) !== null && _ref !== void 0 ? _ref : '', props.onInputChange);
    // Preserve original collection so we can show all items on demand
    let originalCollection = collection;
    let filteredCollection = (reactExports.useMemo)(()=>// No default filter if items are controlled.
        props.items != null || !defaultFilter ? collection : $a9e7382a7d111cb5$var$filterCollection(collection, inputValue, defaultFilter), [
        collection,
        inputValue,
        defaultFilter,
        props.items
    ]);
    let [lastCollection, setLastCollection] = (reactExports.useState)(filteredCollection);
    // Track what action is attempting to open the menu
    let menuOpenTrigger = (reactExports.useRef)('focus');
    let onOpenChange = (open)=>{
        if (props.onOpenChange) props.onOpenChange(open, open ? menuOpenTrigger.current : undefined);
        selectionManager.setFocused(open);
        if (!open) selectionManager.setFocusedKey(null);
    };
    let triggerState = ($fc909762b330b746$export$61c6a8c84e605fb6)({
        ...props,
        onOpenChange: onOpenChange,
        isOpen: undefined,
        defaultOpen: undefined
    });
    let open = (focusStrategy = null, trigger)=>{
        let displayAllItems = trigger === 'manual' || trigger === 'focus' && menuTrigger === 'focus';
        // Prevent open operations from triggering if there is nothing to display
        // Also prevent open operations from triggering if items are uncontrolled but defaultItems is empty, even if displayAllItems is true.
        // This is to prevent comboboxes with empty defaultItems from opening but allow controlled items comboboxes to open even if the inital list is empty (assumption is user will provide swap the empty list with a base list via onOpenChange returning `menuTrigger` manual)
        if (allowsEmptyCollection || filteredCollection.size > 0 || displayAllItems && originalCollection.size > 0 || props.items) {
            if (displayAllItems && !triggerState.isOpen && props.items === undefined) // Show all items if menu is manually opened. Only care about this if items are undefined
            setShowAllItems(true);
            menuOpenTrigger.current = trigger;
            setFocusStrategy(focusStrategy);
            triggerState.open();
        }
    };
    let toggle = (focusStrategy = null, trigger)=>{
        let displayAllItems = trigger === 'manual' || trigger === 'focus' && menuTrigger === 'focus';
        // If the menu is closed and there is nothing to display, early return so toggle isn't called to prevent extraneous onOpenChange
        if (!(allowsEmptyCollection || filteredCollection.size > 0 || displayAllItems && originalCollection.size > 0 || props.items) && !triggerState.isOpen) return;
        if (displayAllItems && !triggerState.isOpen && props.items === undefined) // Show all items if menu is toggled open. Only care about this if items are undefined
        setShowAllItems(true);
        // Only update the menuOpenTrigger if menu is currently closed
        if (!triggerState.isOpen) menuOpenTrigger.current = trigger;
        toggleMenu(focusStrategy);
    };
    let updateLastCollection = (reactExports.useCallback)(()=>{
        setLastCollection(showAllItems ? originalCollection : filteredCollection);
    }, [
        showAllItems,
        originalCollection,
        filteredCollection
    ]);
    // If menu is going to close, save the current collection so we can freeze the displayed collection when the
    // user clicks outside the popover to close the menu. Prevents the menu contents from updating as the menu closes.
    let toggleMenu = (reactExports.useCallback)((focusStrategy = null)=>{
        if (triggerState.isOpen) updateLastCollection();
        setFocusStrategy(focusStrategy);
        triggerState.toggle();
    }, [
        triggerState,
        updateLastCollection
    ]);
    let closeMenu = (reactExports.useCallback)(()=>{
        if (triggerState.isOpen) {
            updateLastCollection();
            triggerState.close();
        }
    }, [
        triggerState,
        updateLastCollection
    ]);
    let [lastValue, setLastValue] = (reactExports.useState)(inputValue);
    let resetInputValue = ()=>{
        var _collection_getItem;
        var _collection_getItem_textValue;
        let itemText = (_collection_getItem_textValue = (_collection_getItem = collection.getItem(selectedKey)) === null || _collection_getItem === void 0 ? void 0 : _collection_getItem.textValue) !== null && _collection_getItem_textValue !== void 0 ? _collection_getItem_textValue : '';
        setLastValue(itemText);
        setInputValue(itemText);
    };
    var _props_selectedKey, _ref1;
    let lastSelectedKey = (reactExports.useRef)((_ref1 = (_props_selectedKey = props.selectedKey) !== null && _props_selectedKey !== void 0 ? _props_selectedKey : props.defaultSelectedKey) !== null && _ref1 !== void 0 ? _ref1 : null);
    var _collection_getItem_textValue;
    let lastSelectedKeyText = (reactExports.useRef)((_collection_getItem_textValue = (_collection_getItem1 = collection.getItem(selectedKey)) === null || _collection_getItem1 === void 0 ? void 0 : _collection_getItem1.textValue) !== null && _collection_getItem_textValue !== void 0 ? _collection_getItem_textValue : '');
    // intentional omit dependency array, want this to happen on every render
    // eslint-disable-next-line react-hooks/exhaustive-deps
    (reactExports.useEffect)(()=>{
        var _collection_getItem;
        // Open and close menu automatically when the input value changes if the input is focused,
        // and there are items in the collection or allowEmptyCollection is true.
        if (isFocused && (filteredCollection.size > 0 || allowsEmptyCollection) && !triggerState.isOpen && inputValue !== lastValue && menuTrigger !== 'manual') open(null, 'input');
        // Close the menu if the collection is empty. Don't close menu if filtered collection size is 0
        // but we are currently showing all items via button press
        if (!showAllItems && !allowsEmptyCollection && triggerState.isOpen && filteredCollection.size === 0) closeMenu();
        // Close when an item is selected.
        if (selectedKey != null && selectedKey !== lastSelectedKey.current) closeMenu();
        // Clear focused key when input value changes and display filtered collection again.
        if (inputValue !== lastValue) {
            selectionManager.setFocusedKey(null);
            setShowAllItems(false);
            // Set selectedKey to null when the user clears the input.
            // If controlled, this is the application developer's responsibility.
            if (inputValue === '' && (props.inputValue === undefined || props.selectedKey === undefined)) setSelectedKey(null);
        }
        // If the selectedKey changed, update the input value.
        // Do nothing if both inputValue and selectedKey are controlled.
        // In this case, it's the user's responsibility to update inputValue in onSelectionChange.
        if (selectedKey !== lastSelectedKey.current && (props.inputValue === undefined || props.selectedKey === undefined)) resetInputValue();
        else if (lastValue !== inputValue) setLastValue(inputValue);
        var _collection_getItem_textValue;
        // Update the inputValue if the selected item's text changes from its last tracked value.
        // This is to handle cases where a selectedKey is specified but the items aren't available (async loading) or the selected item's text value updates.
        // Only reset if the user isn't currently within the field so we don't erroneously modify user input.
        // If inputValue is controlled, it is the user's responsibility to update the inputValue when items change.
        let selectedItemText = (_collection_getItem_textValue = (_collection_getItem = collection.getItem(selectedKey)) === null || _collection_getItem === void 0 ? void 0 : _collection_getItem.textValue) !== null && _collection_getItem_textValue !== void 0 ? _collection_getItem_textValue : '';
        if (!isFocused && selectedKey != null && props.inputValue === undefined && selectedKey === lastSelectedKey.current) {
            if (lastSelectedKeyText.current !== selectedItemText) {
                setLastValue(selectedItemText);
                setInputValue(selectedItemText);
            }
        }
        lastSelectedKey.current = selectedKey;
        lastSelectedKeyText.current = selectedItemText;
    });
    let validation = ($e5be200c675c3b3a$export$fc1a364ae1f3ff10)({
        ...props,
        value: (reactExports.useMemo)(()=>({
                inputValue: inputValue,
                selectedKey: selectedKey
            }), [
            inputValue,
            selectedKey
        ])
    });
    // Revert input value and close menu
    let revert = ()=>{
        if (allowsCustomValue && selectedKey == null) commitCustomValue();
        else commitSelection();
    };
    let commitCustomValue = ()=>{
        lastSelectedKey.current = null;
        setSelectedKey(null);
        closeMenu();
    };
    let commitSelection = ()=>{
        // If multiple things are controlled, call onSelectionChange
        if (props.selectedKey !== undefined && props.inputValue !== undefined) {
            var _collection_getItem;
            props.onSelectionChange(selectedKey);
            var _collection_getItem_textValue;
            // Stop menu from reopening from useEffect
            let itemText = (_collection_getItem_textValue = (_collection_getItem = collection.getItem(selectedKey)) === null || _collection_getItem === void 0 ? void 0 : _collection_getItem.textValue) !== null && _collection_getItem_textValue !== void 0 ? _collection_getItem_textValue : '';
            setLastValue(itemText);
            closeMenu();
        } else {
            // If only a single aspect of combobox is controlled, reset input value and close menu for the user
            resetInputValue();
            closeMenu();
        }
    };
    const commitValue = ()=>{
        if (allowsCustomValue) {
            var _collection_getItem;
            var _collection_getItem_textValue;
            const itemText = (_collection_getItem_textValue = (_collection_getItem = collection.getItem(selectedKey)) === null || _collection_getItem === void 0 ? void 0 : _collection_getItem.textValue) !== null && _collection_getItem_textValue !== void 0 ? _collection_getItem_textValue : '';
            inputValue === itemText ? commitSelection() : commitCustomValue();
        } else // Reset inputValue and close menu
        commitSelection();
    };
    let commit = ()=>{
        if (triggerState.isOpen && selectionManager.focusedKey != null) {
            // Reset inputValue and close menu here if the selected key is already the focused key. Otherwise
            // fire onSelectionChange to allow the application to control the closing.
            if (selectedKey === selectionManager.focusedKey) commitSelection();
            else setSelectedKey(selectionManager.focusedKey);
        } else commitValue();
    };
    let valueOnFocus = (reactExports.useRef)(inputValue);
    let setFocused = (isFocused)=>{
        if (isFocused) {
            valueOnFocus.current = inputValue;
            if (menuTrigger === 'focus' && !props.isReadOnly) open(null, 'focus');
        } else {
            if (shouldCloseOnBlur) commitValue();
            if (inputValue !== valueOnFocus.current) validation.commitValidation();
        }
        setFocusedState(isFocused);
    };
    let displayedCollection = (reactExports.useMemo)(()=>{
        if (triggerState.isOpen) {
            if (showAllItems) return originalCollection;
            else return filteredCollection;
        } else return lastCollection;
    }, [
        triggerState.isOpen,
        originalCollection,
        filteredCollection,
        showAllItems,
        lastCollection
    ]);
    return {
        ...validation,
        ...triggerState,
        focusStrategy: focusStrategy,
        toggle: toggle,
        open: open,
        close: commitValue,
        selectionManager: selectionManager,
        selectedKey: selectedKey,
        setSelectedKey: setSelectedKey,
        disabledKeys: disabledKeys,
        isFocused: isFocused,
        setFocused: setFocused,
        selectedItem: selectedItem,
        collection: displayedCollection,
        inputValue: inputValue,
        setInputValue: setInputValue,
        commit: commit,
        revert: revert
    };
}
function $a9e7382a7d111cb5$var$filterCollection(collection, inputValue, filter) {
    return new ($a02d57049d202695$export$d085fb9e920b5ca7)($a9e7382a7d111cb5$var$filterNodes(collection, collection, inputValue, filter));
}
function $a9e7382a7d111cb5$var$filterNodes(collection, nodes, inputValue, filter) {
    let filteredNode = [];
    for (let node of nodes){
        if (node.type === 'section' && node.hasChildNodes) {
            let filtered = $a9e7382a7d111cb5$var$filterNodes(collection, ($c5a24bc478652b5f$export$1005530eda016c13)(node, collection), inputValue, filter);
            if ([
                ...filtered
            ].some((node)=>node.type === 'item')) filteredNode.push({
                ...node,
                childNodes: filtered
            });
        } else if (node.type === 'item' && filter(node.textValue, inputValue)) filteredNode.push({
            ...node
        });
        else if (node.type !== 'item') filteredNode.push({
            ...node
        });
    }
    return filteredNode;
}

var $b3427c06585c22a0$exports = {};
$b3427c06585c22a0$exports = {
    "rangeOverflow": (args)=>`\u{64A}\u{62C}\u{628} \u{623}\u{646} \u{62A}\u{643}\u{648}\u{646} \u{627}\u{644}\u{642}\u{64A}\u{645}\u{629} ${args.maxValue} \u{623}\u{648} \u{642}\u{628}\u{644} \u{630}\u{644}\u{643}.`,
    "rangeReversed": `\u{62A}\u{627}\u{631}\u{64A}\u{62E} \u{627}\u{644}\u{628}\u{62F}\u{621} \u{64A}\u{62C}\u{628} \u{623}\u{646} \u{64A}\u{643}\u{648}\u{646} \u{642}\u{628}\u{644} \u{62A}\u{627}\u{631}\u{64A}\u{62E} \u{627}\u{644}\u{627}\u{646}\u{62A}\u{647}\u{627}\u{621}.`,
    "rangeUnderflow": (args)=>`\u{64A}\u{62C}\u{628} \u{623}\u{646} \u{62A}\u{643}\u{648}\u{646} \u{627}\u{644}\u{642}\u{64A}\u{645}\u{629} ${args.minValue} \u{623}\u{648} \u{628}\u{639}\u{62F} \u{630}\u{644}\u{643}.`,
    "unavailableDate": `\u{627}\u{644}\u{628}\u{64A}\u{627}\u{646}\u{627}\u{62A} \u{627}\u{644}\u{645}\u{62D}\u{62F}\u{62F}\u{629} \u{63A}\u{64A}\u{631} \u{645}\u{62A}\u{627}\u{62D}\u{629}.`
};

var $d282528f459122b9$exports = {};
$d282528f459122b9$exports = {
    "rangeOverflow": (args)=>`\u{421}\u{442}\u{43E}\u{439}\u{43D}\u{43E}\u{441}\u{442}\u{442}\u{430} \u{442}\u{440}\u{44F}\u{431}\u{432}\u{430} \u{434}\u{430} \u{435} ${args.maxValue} \u{438}\u{43B}\u{438} \u{43F}\u{43E}-\u{440}\u{430}\u{43D}\u{43D}\u{430}.`,
    "rangeReversed": `\u{41D}\u{430}\u{447}\u{430}\u{43B}\u{43D}\u{430}\u{442}\u{430} \u{434}\u{430}\u{442}\u{430} \u{442}\u{440}\u{44F}\u{431}\u{432}\u{430} \u{434}\u{430} \u{435} \u{43F}\u{440}\u{435}\u{434}\u{438} \u{43A}\u{440}\u{430}\u{439}\u{43D}\u{430}\u{442}\u{430}.`,
    "rangeUnderflow": (args)=>`\u{421}\u{442}\u{43E}\u{439}\u{43D}\u{43E}\u{441}\u{442}\u{442}\u{430} \u{442}\u{440}\u{44F}\u{431}\u{432}\u{430} \u{434}\u{430} \u{435} ${args.minValue} \u{438}\u{43B}\u{438} \u{43F}\u{43E}-\u{43A}\u{44A}\u{441}\u{43D}\u{43E}.`,
    "unavailableDate": `\u{418}\u{437}\u{431}\u{440}\u{430}\u{43D}\u{430}\u{442}\u{430} \u{434}\u{430}\u{442}\u{430} \u{43D}\u{435} \u{435} \u{43D}\u{430}\u{43B}\u{438}\u{447}\u{43D}\u{430}.`
};

var $2d5eecd634a9ca45$exports = {};
$2d5eecd634a9ca45$exports = {
    "rangeOverflow": (args)=>`Hodnota mus\xed b\xfdt ${args.maxValue} nebo d\u{159}\xedv\u{11B}j\u{161}\xed.`,
    "rangeReversed": `Datum zah\xe1jen\xed mus\xed p\u{159}edch\xe1zet datu ukon\u{10D}en\xed.`,
    "rangeUnderflow": (args)=>`Hodnota mus\xed b\xfdt ${args.minValue} nebo pozd\u{11B}j\u{161}\xed.`,
    "unavailableDate": `Vybran\xe9 datum nen\xed k dispozici.`
};

var $c8e2288226c24a67$exports = {};
$c8e2288226c24a67$exports = {
    "rangeOverflow": (args)=>`V\xe6rdien skal v\xe6re ${args.maxValue} eller tidligere.`,
    "rangeReversed": `Startdatoen skal v\xe6re f\xf8r slutdatoen.`,
    "rangeUnderflow": (args)=>`V\xe6rdien skal v\xe6re ${args.minValue} eller nyere.`,
    "unavailableDate": `Den valgte dato er ikke tilg\xe6ngelig.`
};

var $6f5745e389c346d7$exports = {};
$6f5745e389c346d7$exports = {
    "rangeOverflow": (args)=>`Der Wert muss ${args.maxValue} oder fr\xfcher sein.`,
    "rangeReversed": `Das Anfangsdatum muss vor dem Enddatum liegen.`,
    "rangeUnderflow": (args)=>`Der Wert muss ${args.minValue} oder sp\xe4ter sein.`,
    "unavailableDate": `Das ausgew\xe4hlte Datum ist nicht verf\xfcgbar.`
};

var $8c882ccf4300d1da$exports = {};
$8c882ccf4300d1da$exports = {
    "rangeOverflow": (args)=>`\u{397} \u{3C4}\u{3B9}\u{3BC}\u{3AE} \u{3C0}\u{3C1}\u{3AD}\u{3C0}\u{3B5}\u{3B9} \u{3BD}\u{3B1} \u{3B5}\u{3AF}\u{3BD}\u{3B1}\u{3B9} ${args.maxValue} \u{3AE} \u{3C0}\u{3B1}\u{3BB}\u{3B1}\u{3B9}\u{3CC}\u{3C4}\u{3B5}\u{3C1}\u{3B7}.`,
    "rangeReversed": `\u{397} \u{3B7}\u{3BC}\u{3B5}\u{3C1}\u{3BF}\u{3BC}\u{3B7}\u{3BD}\u{3AF}\u{3B1} \u{3AD}\u{3BD}\u{3B1}\u{3C1}\u{3BE}\u{3B7}\u{3C2} \u{3C0}\u{3C1}\u{3AD}\u{3C0}\u{3B5}\u{3B9} \u{3BD}\u{3B1} \u{3B5}\u{3AF}\u{3BD}\u{3B1}\u{3B9} \u{3C0}\u{3C1}\u{3B9}\u{3BD} \u{3B1}\u{3C0}\u{3CC} \u{3C4}\u{3B7}\u{3BD} \u{3B7}\u{3BC}\u{3B5}\u{3C1}\u{3BF}\u{3BC}\u{3B7}\u{3BD}\u{3AF}\u{3B1} \u{3BB}\u{3AE}\u{3BE}\u{3B7}\u{3C2}.`,
    "rangeUnderflow": (args)=>`\u{397} \u{3C4}\u{3B9}\u{3BC}\u{3AE} \u{3C0}\u{3C1}\u{3AD}\u{3C0}\u{3B5}\u{3B9} \u{3BD}\u{3B1} \u{3B5}\u{3AF}\u{3BD}\u{3B1}\u{3B9} ${args.minValue} \u{3AE} \u{3BC}\u{3B5}\u{3C4}\u{3B1}\u{3B3}\u{3B5}\u{3BD}\u{3AD}\u{3C3}\u{3C4}\u{3B5}\u{3C1}\u{3B7}.`,
    "unavailableDate": `\u{397} \u{3B5}\u{3C0}\u{3B9}\u{3BB}\u{3B5}\u{3B3}\u{3BC}\u{3AD}\u{3BD}\u{3B7} \u{3B7}\u{3BC}\u{3B5}\u{3C1}\u{3BF}\u{3BC}\u{3B7}\u{3BD}\u{3AF}\u{3B1} \u{3B4}\u{3B5}\u{3BD} \u{3B5}\u{3AF}\u{3BD}\u{3B1}\u{3B9} \u{3B4}\u{3B9}\u{3B1}\u{3B8}\u{3AD}\u{3C3}\u{3B9}\u{3BC}\u{3B7}.`
};

var $22195056771860be$exports = {};
$22195056771860be$exports = {
    "rangeUnderflow": (args)=>`Value must be ${args.minValue} or later.`,
    "rangeOverflow": (args)=>`Value must be ${args.maxValue} or earlier.`,
    "rangeReversed": `Start date must be before end date.`,
    "unavailableDate": `Selected date unavailable.`
};

var $cedfa43b4e2a5906$exports = {};
$cedfa43b4e2a5906$exports = {
    "rangeOverflow": (args)=>`El valor debe ser ${args.maxValue} o anterior.`,
    "rangeReversed": `La fecha de inicio debe ser anterior a la fecha de finalizaci\xf3n.`,
    "rangeUnderflow": (args)=>`El valor debe ser ${args.minValue} o posterior.`,
    "unavailableDate": `Fecha seleccionada no disponible.`
};

var $eeeaa8daee3601c7$exports = {};
$eeeaa8daee3601c7$exports = {
    "rangeOverflow": (args)=>`V\xe4\xe4rtus peab olema ${args.maxValue} v\xf5i varasem.`,
    "rangeReversed": `Alguskuup\xe4ev peab olema enne l\xf5ppkuup\xe4eva.`,
    "rangeUnderflow": (args)=>`V\xe4\xe4rtus peab olema ${args.minValue} v\xf5i hilisem.`,
    "unavailableDate": `Valitud kuup\xe4ev pole saadaval.`
};

var $35e0614a49b3bb40$exports = {};
$35e0614a49b3bb40$exports = {
    "rangeOverflow": (args)=>`Arvon on oltava ${args.maxValue} tai sit\xe4 aikaisempi.`,
    "rangeReversed": `Aloitusp\xe4iv\xe4n on oltava ennen lopetusp\xe4iv\xe4\xe4.`,
    "rangeUnderflow": (args)=>`Arvon on oltava ${args.minValue} tai sit\xe4 my\xf6h\xe4isempi.`,
    "unavailableDate": `Valittu p\xe4iv\xe4m\xe4\xe4r\xe4 ei ole k\xe4ytett\xe4viss\xe4.`
};

var $929bc63f7705a78f$exports = {};
$929bc63f7705a78f$exports = {
    "rangeOverflow": (args)=>`La valeur doit \xeatre ${args.maxValue} ou ant\xe9rieure.`,
    "rangeReversed": `La date de d\xe9but doit \xeatre ant\xe9rieure \xe0 la date de fin.`,
    "rangeUnderflow": (args)=>`La valeur doit \xeatre ${args.minValue} ou ult\xe9rieure.`,
    "unavailableDate": `La date s\xe9lectionn\xe9e n\u{2019}est pas disponible.`
};

var $9a28d073b034d183$exports = {};
$9a28d073b034d183$exports = {
    "rangeOverflow": (args)=>`\u{5D4}\u{5E2}\u{5E8}\u{5DA} \u{5D7}\u{5D9}\u{5D9}\u{5D1} \u{5DC}\u{5D4}\u{5D9}\u{5D5}\u{5EA} ${args.maxValue} \u{5D0}\u{5D5} \u{5DE}\u{5D5}\u{5E7}\u{5D3}\u{5DD} \u{5D9}\u{5D5}\u{5EA}\u{5E8}.`,
    "rangeReversed": `\u{5EA}\u{5D0}\u{5E8}\u{5D9}\u{5DA} \u{5D4}\u{5D4}\u{5EA}\u{5D7}\u{5DC}\u{5D4} \u{5D7}\u{5D9}\u{5D9}\u{5D1} \u{5DC}\u{5D4}\u{5D9}\u{5D5}\u{5EA} \u{5DC}\u{5E4}\u{5E0}\u{5D9} \u{5EA}\u{5D0}\u{5E8}\u{5D9}\u{5DA} \u{5D4}\u{5E1}\u{5D9}\u{5D5}\u{5DD}.`,
    "rangeUnderflow": (args)=>`\u{5D4}\u{5E2}\u{5E8}\u{5DA} \u{5D7}\u{5D9}\u{5D9}\u{5D1} \u{5DC}\u{5D4}\u{5D9}\u{5D5}\u{5EA} ${args.minValue} \u{5D0}\u{5D5} \u{5DE}\u{5D0}\u{5D5}\u{5D7}\u{5E8} \u{5D9}\u{5D5}\u{5EA}\u{5E8}.`,
    "unavailableDate": `\u{5D4}\u{5EA}\u{5D0}\u{5E8}\u{5D9}\u{5DA} \u{5D4}\u{5E0}\u{5D1}\u{5D7}\u{5E8} \u{5D0}\u{5D9}\u{5E0}\u{5D5} \u{5D6}\u{5DE}\u{5D9}\u{5DF}.`
};

var $7743e79780ebcca3$exports = {};
$7743e79780ebcca3$exports = {
    "rangeOverflow": (args)=>`Vrijednost mora biti ${args.maxValue} ili ranije.`,
    "rangeReversed": `Datum po\u{10D}etka mora biti prije datuma zavr\u{161}etka.`,
    "rangeUnderflow": (args)=>`Vrijednost mora biti ${args.minValue} ili kasnije.`,
    "unavailableDate": `Odabrani datum nije dostupan.`
};

var $3351817a04898858$exports = {};
$3351817a04898858$exports = {
    "rangeOverflow": (args)=>`Az \xe9rt\xe9knek ${args.maxValue} vagy kor\xe1bbinak kell lennie.`,
    "rangeReversed": `A kezd\u{151} d\xe1tumnak a befejez\u{151} d\xe1tumn\xe1l kor\xe1bbinak kell lennie.`,
    "rangeUnderflow": (args)=>`Az \xe9rt\xe9knek ${args.minValue} vagy k\xe9s\u{151}bbinek kell lennie.`,
    "unavailableDate": `A kiv\xe1lasztott d\xe1tum nem \xe9rhet\u{151} el.`
};

var $4120bdb1d03484db$exports = {};
$4120bdb1d03484db$exports = {
    "rangeOverflow": (args)=>`Il valore deve essere ${args.maxValue} o precedente.`,
    "rangeReversed": `La data di inizio deve essere antecedente alla data di fine.`,
    "rangeUnderflow": (args)=>`Il valore deve essere ${args.minValue} o successivo.`,
    "unavailableDate": `Data selezionata non disponibile.`
};

var $65e5e1569f34ea4f$exports = {};
$65e5e1569f34ea4f$exports = {
    "rangeOverflow": (args)=>`\u{5024}\u{306F} ${args.maxValue} \u{4EE5}\u{4E0B}\u{306B}\u{3059}\u{308B}\u{5FC5}\u{8981}\u{304C}\u{3042}\u{308A}\u{307E}\u{3059}\u{3002}`,
    "rangeReversed": `\u{958B}\u{59CB}\u{65E5}\u{306F}\u{7D42}\u{4E86}\u{65E5}\u{3088}\u{308A}\u{524D}\u{306B}\u{3059}\u{308B}\u{5FC5}\u{8981}\u{304C}\u{3042}\u{308A}\u{307E}\u{3059}\u{3002}`,
    "rangeUnderflow": (args)=>`\u{5024}\u{306F} ${args.minValue} \u{4EE5}\u{4E0A}\u{306B}\u{3059}\u{308B}\u{5FC5}\u{8981}\u{304C}\u{3042}\u{308A}\u{307E}\u{3059}\u{3002}`,
    "unavailableDate": `\u{9078}\u{629E}\u{3057}\u{305F}\u{65E5}\u{4ED8}\u{306F}\u{4F7F}\u{7528}\u{3067}\u{304D}\u{307E}\u{305B}\u{3093}\u{3002}`
};

var $d34552a7550967e7$exports = {};
$d34552a7550967e7$exports = {
    "rangeOverflow": (args)=>`\u{AC12}\u{C740} ${args.maxValue} \u{C774}\u{C804}\u{C774}\u{C5B4}\u{C57C} \u{D569}\u{B2C8}\u{B2E4}.`,
    "rangeReversed": `\u{C2DC}\u{C791}\u{C77C}\u{C740} \u{C885}\u{B8CC}\u{C77C} \u{C774}\u{C804}\u{C774}\u{C5B4}\u{C57C} \u{D569}\u{B2C8}\u{B2E4}.`,
    "rangeUnderflow": (args)=>`\u{AC12}\u{C740} ${args.minValue} \u{C774}\u{C0C1}\u{C774}\u{C5B4}\u{C57C} \u{D569}\u{B2C8}\u{B2E4}.`,
    "unavailableDate": `\u{C120}\u{D0DD}\u{D55C} \u{B0A0}\u{C9DC}\u{B97C} \u{C0AC}\u{C6A9}\u{D560} \u{C218} \u{C5C6}\u{C2B5}\u{B2C8}\u{B2E4}.`
};

var $8f855bffe63f6eca$exports = {};
$8f855bffe63f6eca$exports = {
    "rangeOverflow": (args)=>`Reik\u{161}m\u{117} turi b\u{16B}ti ${args.maxValue} arba ankstesn\u{117}.`,
    "rangeReversed": `Prad\u{17E}ios data turi b\u{16B}ti ankstesn\u{117} nei pabaigos data.`,
    "rangeUnderflow": (args)=>`Reik\u{161}m\u{117} turi b\u{16B}ti ${args.minValue} arba naujesn\u{117}.`,
    "unavailableDate": `Pasirinkta data nepasiekiama.`
};

var $ce40f46d09034645$exports = {};
$ce40f46d09034645$exports = {
    "rangeOverflow": (args)=>`V\u{113}rt\u{12B}bai ir j\u{101}b\u{16B}t ${args.maxValue} vai agr\u{101}kai.`,
    "rangeReversed": `S\u{101}kuma datumam ir j\u{101}b\u{16B}t pirms beigu datuma.`,
    "rangeUnderflow": (args)=>`V\u{113}rt\u{12B}bai ir j\u{101}b\u{16B}t ${args.minValue} vai v\u{113}l\u{101}kai.`,
    "unavailableDate": `Atlas\u{12B}tais datums nav pieejams.`
};

var $dd1a9a73340c793e$exports = {};
$dd1a9a73340c793e$exports = {
    "rangeOverflow": (args)=>`Verdien m\xe5 v\xe6re ${args.maxValue} eller tidligere.`,
    "rangeReversed": `Startdatoen m\xe5 v\xe6re f\xf8r sluttdatoen.`,
    "rangeUnderflow": (args)=>`Verdien m\xe5 v\xe6re ${args.minValue} eller senere.`,
    "unavailableDate": `Valgt dato utilgjengelig.`
};

var $4ee1fb3f0cbe6f59$exports = {};
$4ee1fb3f0cbe6f59$exports = {
    "rangeOverflow": (args)=>`Waarde moet ${args.maxValue} of eerder zijn.`,
    "rangeReversed": `De startdatum moet voor de einddatum liggen.`,
    "rangeUnderflow": (args)=>`Waarde moet ${args.minValue} of later zijn.`,
    "unavailableDate": `Geselecteerde datum niet beschikbaar.`
};

var $c85829aebb0bc94b$exports = {};
$c85829aebb0bc94b$exports = {
    "rangeOverflow": (args)=>`Warto\u{15B}\u{107} musi mie\u{107} warto\u{15B}\u{107} ${args.maxValue} lub wcze\u{15B}niejsz\u{105}.`,
    "rangeReversed": `Data rozpocz\u{119}cia musi by\u{107} wcze\u{15B}niejsza ni\u{17C} data zako\u{144}czenia.`,
    "rangeUnderflow": (args)=>`Warto\u{15B}\u{107} musi mie\u{107} warto\u{15B}\u{107} ${args.minValue} lub p\xf3\u{17A}niejsz\u{105}.`,
    "unavailableDate": `Wybrana data jest niedost\u{119}pna.`
};

var $27f5cd2291ca8a02$exports = {};
$27f5cd2291ca8a02$exports = {
    "rangeOverflow": (args)=>`O valor deve ser ${args.maxValue} ou anterior.`,
    "rangeReversed": `A data inicial deve ser anterior \xe0 data final.`,
    "rangeUnderflow": (args)=>`O valor deve ser ${args.minValue} ou posterior.`,
    "unavailableDate": `Data selecionada indispon\xedvel.`
};

var $e046fdccd69bea8e$exports = {};
$e046fdccd69bea8e$exports = {
    "rangeOverflow": (args)=>`O valor tem de ser ${args.maxValue} ou anterior.`,
    "rangeReversed": `A data de in\xedcio deve ser anterior \xe0 data de fim.`,
    "rangeUnderflow": (args)=>`O valor tem de ser ${args.minValue} ou posterior.`,
    "unavailableDate": `Data selecionada indispon\xedvel.`
};

var $fa5f88e804986547$exports = {};
$fa5f88e804986547$exports = {
    "rangeOverflow": (args)=>`Valoarea trebuie s\u{103} fie ${args.maxValue} sau anterioar\u{103}.`,
    "rangeReversed": `Data de \xeenceput trebuie s\u{103} fie anterioar\u{103} datei de sf\xe2r\u{219}it.`,
    "rangeUnderflow": (args)=>`Valoarea trebuie s\u{103} fie ${args.minValue} sau ulterioar\u{103}.`,
    "unavailableDate": `Data selectat\u{103} nu este disponibil\u{103}.`
};

var $28e4714602d1b568$exports = {};
$28e4714602d1b568$exports = {
    "rangeOverflow": (args)=>`\u{417}\u{43D}\u{430}\u{447}\u{435}\u{43D}\u{438}\u{435} \u{434}\u{43E}\u{43B}\u{436}\u{43D}\u{43E} \u{431}\u{44B}\u{442}\u{44C} \u{43D}\u{435} \u{43F}\u{43E}\u{437}\u{436}\u{435} ${args.maxValue}.`,
    "rangeReversed": `\u{414}\u{430}\u{442}\u{430} \u{43D}\u{430}\u{447}\u{430}\u{43B}\u{430} \u{434}\u{43E}\u{43B}\u{436}\u{43D}\u{430} \u{43F}\u{440}\u{435}\u{434}\u{448}\u{435}\u{441}\u{442}\u{432}\u{43E}\u{432}\u{430}\u{442}\u{44C} \u{434}\u{430}\u{442}\u{435} \u{43E}\u{43A}\u{43E}\u{43D}\u{447}\u{430}\u{43D}\u{438}\u{44F}.`,
    "rangeUnderflow": (args)=>`\u{417}\u{43D}\u{430}\u{447}\u{435}\u{43D}\u{438}\u{435} \u{434}\u{43E}\u{43B}\u{436}\u{43D}\u{43E} \u{431}\u{44B}\u{442}\u{44C} \u{43D}\u{435} \u{440}\u{430}\u{43D}\u{44C}\u{448}\u{435} ${args.minValue}.`,
    "unavailableDate": `\u{412}\u{44B}\u{431}\u{440}\u{430}\u{43D}\u{43D}\u{430}\u{44F} \u{434}\u{430}\u{442}\u{430} \u{43D}\u{435}\u{434}\u{43E}\u{441}\u{442}\u{443}\u{43F}\u{43D}\u{430}.`
};

var $4e3bc8cf783ad569$exports = {};
$4e3bc8cf783ad569$exports = {
    "rangeOverflow": (args)=>`Hodnota mus\xed by\u{165} ${args.maxValue} alebo skor\u{161}ia.`,
    "rangeReversed": `D\xe1tum za\u{10D}iatku mus\xed by\u{165} skor\u{161}\xed ako d\xe1tum konca.`,
    "rangeUnderflow": (args)=>`Hodnota mus\xed by\u{165} ${args.minValue} alebo neskor\u{161}ia.`,
    "unavailableDate": `Vybrat\xfd d\xe1tum je nedostupn\xfd.`
};

var $bee07513333bdc15$exports = {};
$bee07513333bdc15$exports = {
    "rangeOverflow": (args)=>`Vrednost mora biti ${args.maxValue} ali starej\u{161}a.`,
    "rangeReversed": `Za\u{10D}etni datum mora biti pred kon\u{10D}nim datumom.`,
    "rangeUnderflow": (args)=>`Vrednost mora biti ${args.minValue} ali novej\u{161}a.`,
    "unavailableDate": `Izbrani datum ni na voljo.`
};

var $7ed9c6fad16a15ec$exports = {};
$7ed9c6fad16a15ec$exports = {
    "rangeOverflow": (args)=>`Vrednost mora da bude ${args.maxValue} ili starija.`,
    "rangeReversed": `Datum po\u{10D}etka mora biti pre datuma zavr\u{161}etka.`,
    "rangeUnderflow": (args)=>`Vrednost mora da bude ${args.minValue} ili novija.`,
    "unavailableDate": `Izabrani datum nije dostupan.`
};

var $8bef6d5a236de86c$exports = {};
$8bef6d5a236de86c$exports = {
    "rangeOverflow": (args)=>`V\xe4rdet m\xe5ste vara ${args.maxValue} eller tidigare.`,
    "rangeReversed": `Startdatumet m\xe5ste vara f\xf6re slutdatumet.`,
    "rangeUnderflow": (args)=>`V\xe4rdet m\xe5ste vara ${args.minValue} eller senare.`,
    "unavailableDate": `Det valda datumet \xe4r inte tillg\xe4ngligt.`
};

var $098b9a2d2340cfc5$exports = {};
$098b9a2d2340cfc5$exports = {
    "rangeOverflow": (args)=>`De\u{11F}er, ${args.maxValue} veya \xf6ncesi olmal\u{131}d\u{131}r.`,
    "rangeReversed": `Ba\u{15F}lang\u{131}\xe7 tarihi biti\u{15F} tarihinden \xf6nce olmal\u{131}d\u{131}r.`,
    "rangeUnderflow": (args)=>`De\u{11F}er, ${args.minValue} veya sonras\u{131} olmal\u{131}d\u{131}r.`,
    "unavailableDate": `Se\xe7ilen tarih kullan\u{131}lam\u{131}yor.`
};

var $54a862ea7fad7419$exports = {};
$54a862ea7fad7419$exports = {
    "rangeOverflow": (args)=>`\u{417}\u{43D}\u{430}\u{447}\u{435}\u{43D}\u{43D}\u{44F} \u{43C}\u{430}\u{454} \u{431}\u{443}\u{442}\u{438} \u{43D}\u{435} \u{43F}\u{456}\u{437}\u{43D}\u{456}\u{448}\u{435} ${args.maxValue}.`,
    "rangeReversed": `\u{414}\u{430}\u{442}\u{430} \u{43F}\u{43E}\u{447}\u{430}\u{442}\u{43A}\u{443} \u{43C}\u{430}\u{454} \u{43F}\u{435}\u{440}\u{435}\u{434}\u{443}\u{432}\u{430}\u{442}\u{438} \u{434}\u{430}\u{442}\u{456} \u{437}\u{430}\u{432}\u{435}\u{440}\u{448}\u{435}\u{43D}\u{43D}\u{44F}.`,
    "rangeUnderflow": (args)=>`\u{417}\u{43D}\u{430}\u{447}\u{435}\u{43D}\u{43D}\u{44F} \u{43C}\u{430}\u{454} \u{431}\u{443}\u{442}\u{438} \u{43D}\u{435} \u{440}\u{430}\u{43D}\u{456}\u{448}\u{435} ${args.minValue}.`,
    "unavailableDate": `\u{412}\u{438}\u{431}\u{440}\u{430}\u{43D}\u{430} \u{434}\u{430}\u{442}\u{430} \u{43D}\u{435}\u{434}\u{43E}\u{441}\u{442}\u{443}\u{43F}\u{43D}\u{430}.`
};

var $e6cc491d590dfda5$exports = {};
$e6cc491d590dfda5$exports = {
    "rangeOverflow": (args)=>`\u{503C}\u{5FC5}\u{987B}\u{662F} ${args.maxValue} \u{6216}\u{66F4}\u{65E9}\u{65E5}\u{671F}\u{3002}`,
    "rangeReversed": `\u{5F00}\u{59CB}\u{65E5}\u{671F}\u{5FC5}\u{987B}\u{65E9}\u{4E8E}\u{7ED3}\u{675F}\u{65E5}\u{671F}\u{3002}`,
    "rangeUnderflow": (args)=>`\u{503C}\u{5FC5}\u{987B}\u{662F} ${args.minValue} \u{6216}\u{66F4}\u{665A}\u{65E5}\u{671F}\u{3002}`,
    "unavailableDate": `\u{6240}\u{9009}\u{65E5}\u{671F}\u{4E0D}\u{53EF}\u{7528}\u{3002}`
};

var $9aebf53181a474bd$exports = {};
$9aebf53181a474bd$exports = {
    "rangeOverflow": (args)=>`\u{503C}\u{5FC5}\u{9808}\u{662F} ${args.maxValue} \u{6216}\u{66F4}\u{65E9}\u{3002}`,
    "rangeReversed": `\u{958B}\u{59CB}\u{65E5}\u{671F}\u{5FC5}\u{9808}\u{5728}\u{7D50}\u{675F}\u{65E5}\u{671F}\u{4E4B}\u{524D}\u{3002}`,
    "rangeUnderflow": (args)=>`\u{503C}\u{5FC5}\u{9808}\u{662F} ${args.minValue} \u{6216}\u{66F4}\u{665A}\u{3002}`,
    "unavailableDate": `\u{6240}\u{9078}\u{65E5}\u{671F}\u{7121}\u{6CD5}\u{4F7F}\u{7528}\u{3002}`
};

var $452ac34de8c2444e$exports = {};


































$452ac34de8c2444e$exports = {
    "ar-AE": $b3427c06585c22a0$exports,
    "bg-BG": $d282528f459122b9$exports,
    "cs-CZ": $2d5eecd634a9ca45$exports,
    "da-DK": $c8e2288226c24a67$exports,
    "de-DE": $6f5745e389c346d7$exports,
    "el-GR": $8c882ccf4300d1da$exports,
    "en-US": $22195056771860be$exports,
    "es-ES": $cedfa43b4e2a5906$exports,
    "et-EE": $eeeaa8daee3601c7$exports,
    "fi-FI": $35e0614a49b3bb40$exports,
    "fr-FR": $929bc63f7705a78f$exports,
    "he-IL": $9a28d073b034d183$exports,
    "hr-HR": $7743e79780ebcca3$exports,
    "hu-HU": $3351817a04898858$exports,
    "it-IT": $4120bdb1d03484db$exports,
    "ja-JP": $65e5e1569f34ea4f$exports,
    "ko-KR": $d34552a7550967e7$exports,
    "lt-LT": $8f855bffe63f6eca$exports,
    "lv-LV": $ce40f46d09034645$exports,
    "nb-NO": $dd1a9a73340c793e$exports,
    "nl-NL": $4ee1fb3f0cbe6f59$exports,
    "pl-PL": $c85829aebb0bc94b$exports,
    "pt-BR": $27f5cd2291ca8a02$exports,
    "pt-PT": $e046fdccd69bea8e$exports,
    "ro-RO": $fa5f88e804986547$exports,
    "ru-RU": $28e4714602d1b568$exports,
    "sk-SK": $4e3bc8cf783ad569$exports,
    "sl-SI": $bee07513333bdc15$exports,
    "sr-SP": $7ed9c6fad16a15ec$exports,
    "sv-SE": $8bef6d5a236de86c$exports,
    "tr-TR": $098b9a2d2340cfc5$exports,
    "uk-UA": $54a862ea7fad7419$exports,
    "zh-CN": $e6cc491d590dfda5$exports,
    "zh-TW": $9aebf53181a474bd$exports
};

function $parcel$interopDefault$1(a) {
  return a && a.__esModule ? a.default : a;
}
/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 




const $35a22f14a1f04b11$var$dictionary = new ($5b160d28a433310d$export$c17fa47878dc55b6)((($parcel$interopDefault$1($452ac34de8c2444e$exports))));
function $35a22f14a1f04b11$var$getLocale() {
    // Match browser language setting here, NOT react-aria's I18nProvider, so that we match other browser-provided
    // validation messages, which to not respect our provider's language.
    // @ts-ignore
    return typeof navigator !== 'undefined' && (navigator.language || navigator.userLanguage) || 'en-US';
}
function $35a22f14a1f04b11$export$f18627323ab57ac0(value, minValue, maxValue, isDateUnavailable, options) {
    let rangeOverflow = value != null && maxValue != null && value.compare(maxValue) > 0;
    let rangeUnderflow = value != null && minValue != null && value.compare(minValue) < 0;
    let isUnavailable = value != null && (isDateUnavailable === null || isDateUnavailable === void 0 ? void 0 : isDateUnavailable(value)) || false;
    let isInvalid = rangeOverflow || rangeUnderflow || isUnavailable;
    let errors = [];
    if (isInvalid) {
        let locale = $35a22f14a1f04b11$var$getLocale();
        let strings = ($5b160d28a433310d$export$c17fa47878dc55b6).getGlobalDictionaryForPackage('@react-stately/datepicker') || $35a22f14a1f04b11$var$dictionary;
        let formatter = new ($6db58dc88e78b024$export$2f817fcdc4b89ae0)(locale, strings);
        let dateFormatter = new ($fb18d541ea1ad717$export$ad991b66133851cf)(locale, $35a22f14a1f04b11$export$7e319ea407e63bc0({}, options));
        let timeZone = dateFormatter.resolvedOptions().timeZone;
        if (rangeUnderflow) errors.push(formatter.format('rangeUnderflow', {
            minValue: dateFormatter.format(minValue.toDate(timeZone))
        }));
        if (rangeOverflow) errors.push(formatter.format('rangeOverflow', {
            maxValue: dateFormatter.format(maxValue.toDate(timeZone))
        }));
        if (isUnavailable) errors.push(formatter.format('unavailableDate'));
    }
    return {
        isInvalid: isInvalid,
        validationErrors: errors,
        validationDetails: {
            badInput: isUnavailable,
            customError: false,
            patternMismatch: false,
            rangeOverflow: rangeOverflow,
            rangeUnderflow: rangeUnderflow,
            stepMismatch: false,
            tooLong: false,
            tooShort: false,
            typeMismatch: false,
            valueMissing: false,
            valid: !isInvalid
        }
    };
}
function $35a22f14a1f04b11$export$80ff8fc0ae339c13(value, minValue, maxValue, isDateUnavailable, options) {
    let startValidation = $35a22f14a1f04b11$export$f18627323ab57ac0(value === null || value === void 0 ? void 0 : value.start, minValue, maxValue, isDateUnavailable, options);
    let endValidation = $35a22f14a1f04b11$export$f18627323ab57ac0(value === null || value === void 0 ? void 0 : value.end, minValue, maxValue, isDateUnavailable, options);
    let result = ($e5be200c675c3b3a$export$75ee7c75d68f5b0e)(startValidation, endValidation);
    if (value.end != null && value.start != null && value.end.compare(value.start) < 0) {
        let strings = ($5b160d28a433310d$export$c17fa47878dc55b6).getGlobalDictionaryForPackage('@react-stately/datepicker') || $35a22f14a1f04b11$var$dictionary;
        result = ($e5be200c675c3b3a$export$75ee7c75d68f5b0e)(result, {
            isInvalid: true,
            validationErrors: [
                strings.getStringForLocale('rangeReversed', $35a22f14a1f04b11$var$getLocale())
            ],
            validationDetails: {
                ...($e5be200c675c3b3a$export$aca958c65c314e6c),
                rangeUnderflow: true,
                rangeOverflow: true,
                valid: false
            }
        });
    }
    return result;
}
const $35a22f14a1f04b11$var$DEFAULT_FIELD_OPTIONS = {
    year: 'numeric',
    month: 'numeric',
    day: 'numeric',
    hour: 'numeric',
    minute: '2-digit',
    second: '2-digit'
};
const $35a22f14a1f04b11$var$TWO_DIGIT_FIELD_OPTIONS = {
    year: 'numeric',
    month: '2-digit',
    day: '2-digit',
    hour: '2-digit',
    minute: '2-digit',
    second: '2-digit'
};
function $35a22f14a1f04b11$export$7e319ea407e63bc0(fieldOptions, options) {
    let defaultFieldOptions = options.shouldForceLeadingZeros ? $35a22f14a1f04b11$var$TWO_DIGIT_FIELD_OPTIONS : $35a22f14a1f04b11$var$DEFAULT_FIELD_OPTIONS;
    fieldOptions = {
        ...defaultFieldOptions,
        ...fieldOptions
    };
    let granularity = options.granularity || 'minute';
    let keys = Object.keys(fieldOptions);
    var _options_maxGranularity;
    let startIdx = keys.indexOf((_options_maxGranularity = options.maxGranularity) !== null && _options_maxGranularity !== void 0 ? _options_maxGranularity : 'year');
    if (startIdx < 0) startIdx = 0;
    let endIdx = keys.indexOf(granularity);
    if (endIdx < 0) endIdx = 2;
    if (startIdx > endIdx) throw new Error('maxGranularity must be greater than granularity');
    let opts = keys.slice(startIdx, endIdx + 1).reduce((opts, key)=>{
        opts[key] = fieldOptions[key];
        return opts;
    }, {});
    if (options.hourCycle != null) opts.hour12 = options.hourCycle === 12;
    opts.timeZone = options.timeZone || 'UTC';
    let hasTime = granularity === 'hour' || granularity === 'minute' || granularity === 'second';
    if (hasTime && options.timeZone && !options.hideTimeZone) opts.timeZoneName = 'short';
    if (options.showEra && startIdx === 0) opts.era = 'short';
    return opts;
}
function $35a22f14a1f04b11$export$c5221a78ef73c5e9(placeholderValue) {
    if (placeholderValue && 'hour' in placeholderValue) return placeholderValue;
    return new ($35ea8db9cb2ccb90$export$680ea196effce5f)();
}
function $35a22f14a1f04b11$export$61a490a80c552550(value, calendar) {
    if (value === null) return null;
    if (!value) return undefined;
    return ($11d87f3f76e88657$export$b4a036af3fc0b032)(value, calendar);
}
function $35a22f14a1f04b11$export$66aa2b09de4b1ea5(placeholderValue, granularity, calendar, timeZone) {
    if (placeholderValue) return $35a22f14a1f04b11$export$61a490a80c552550(placeholderValue, calendar);
    let date = ($11d87f3f76e88657$export$b4a036af3fc0b032)(($14e0f24ef4ac5c92$export$461939dd4422153)(timeZone).set({
        hour: 0,
        minute: 0,
        second: 0,
        millisecond: 0
    }), calendar);
    if (granularity === 'year' || granularity === 'month' || granularity === 'day') return ($11d87f3f76e88657$export$93522d1a439f3617)(date);
    if (!timeZone) return ($11d87f3f76e88657$export$b21e0b124e224484)(date);
    return date;
}
function $35a22f14a1f04b11$export$2440da353cedad43(v, granularity) {
    // Compute default granularity and time zone from the value. If the value becomes null, keep the last values.
    let defaultTimeZone = v && 'timeZone' in v ? v.timeZone : undefined;
    let defaultGranularity = v && 'minute' in v ? 'minute' : 'day';
    // props.granularity must actually exist in the value if one is provided.
    if (v && granularity && !(granularity in v)) throw new Error('Invalid granularity ' + granularity + ' for value ' + v.toString());
    let [lastValue, setLastValue] = (reactExports.useState)([
        defaultGranularity,
        defaultTimeZone
    ]);
    // If the granularity or time zone changed, update the last value.
    if (v && (lastValue[0] !== defaultGranularity || lastValue[1] !== defaultTimeZone)) setLastValue([
        defaultGranularity,
        defaultTimeZone
    ]);
    if (!granularity) granularity = v ? defaultGranularity : lastValue[0];
    let timeZone = v ? defaultTimeZone : lastValue[1];
    return [
        granularity,
        timeZone
    ];
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 





function $ab5bf3f618090389$export$87194bb378cc3ac2(props) {
    let overlayState = ($fc909762b330b746$export$61c6a8c84e605fb6)(props);
    let [value, setValue] = ($458b0a5536c1a7cf$export$40bfa8c7b0832715)(props.value, props.defaultValue || null, props.onChange);
    let v = value || props.placeholderValue;
    let [granularity, defaultTimeZone] = ($35a22f14a1f04b11$export$2440da353cedad43)(v, props.granularity);
    let dateValue = value != null ? value.toDate(defaultTimeZone !== null && defaultTimeZone !== void 0 ? defaultTimeZone : 'UTC') : null;
    let hasTime = granularity === 'hour' || granularity === 'minute' || granularity === 'second';
    var _props_shouldCloseOnSelect;
    let shouldCloseOnSelect = (_props_shouldCloseOnSelect = props.shouldCloseOnSelect) !== null && _props_shouldCloseOnSelect !== void 0 ? _props_shouldCloseOnSelect : true;
    let [selectedDate, setSelectedDate] = (reactExports.useState)(null);
    let [selectedTime, setSelectedTime] = (reactExports.useState)(null);
    if (value) {
        selectedDate = value;
        if ('hour' in value) selectedTime = value;
    }
    // props.granularity must actually exist in the value if one is provided.
    if (v && !(granularity in v)) throw new Error('Invalid granularity ' + granularity + ' for value ' + v.toString());
    let showEra = (value === null || value === void 0 ? void 0 : value.calendar.identifier) === 'gregory' && value.era === 'BC';
    let formatOpts = (reactExports.useMemo)(()=>({
            granularity: granularity,
            timeZone: defaultTimeZone,
            hideTimeZone: props.hideTimeZone,
            hourCycle: props.hourCycle,
            shouldForceLeadingZeros: props.shouldForceLeadingZeros,
            showEra: showEra
        }), [
        granularity,
        props.hourCycle,
        props.shouldForceLeadingZeros,
        defaultTimeZone,
        props.hideTimeZone,
        showEra
    ]);
    let { minValue: minValue, maxValue: maxValue, isDateUnavailable: isDateUnavailable } = props;
    let builtinValidation = (reactExports.useMemo)(()=>($35a22f14a1f04b11$export$f18627323ab57ac0)(value, minValue, maxValue, isDateUnavailable, formatOpts), [
        value,
        minValue,
        maxValue,
        isDateUnavailable,
        formatOpts
    ]);
    let validation = ($e5be200c675c3b3a$export$fc1a364ae1f3ff10)({
        ...props,
        value: value,
        builtinValidation: builtinValidation
    });
    let isValueInvalid = validation.displayValidation.isInvalid;
    let validationState = props.validationState || (isValueInvalid ? 'invalid' : null);
    let commitValue = (date, time)=>{
        setValue('timeZone' in time ? time.set(($11d87f3f76e88657$export$93522d1a439f3617)(date)) : ($11d87f3f76e88657$export$b21e0b124e224484)(date, time));
        setSelectedDate(null);
        setSelectedTime(null);
        validation.commitValidation();
    };
    // Intercept setValue to make sure the Time section is not changed by date selection in Calendar
    let selectDate = (newValue)=>{
        let shouldClose = typeof shouldCloseOnSelect === 'function' ? shouldCloseOnSelect() : shouldCloseOnSelect;
        if (hasTime) {
            if (selectedTime || shouldClose) commitValue(newValue, selectedTime || ($35a22f14a1f04b11$export$c5221a78ef73c5e9)(props.placeholderValue));
            else setSelectedDate(newValue);
        } else {
            setValue(newValue);
            validation.commitValidation();
        }
        if (shouldClose) overlayState.setOpen(false);
    };
    let selectTime = (newValue)=>{
        if (selectedDate && newValue) commitValue(selectedDate, newValue);
        else setSelectedTime(newValue);
    };
    return {
        ...validation,
        value: value,
        setValue: setValue,
        dateValue: selectedDate,
        timeValue: selectedTime,
        setDateValue: selectDate,
        setTimeValue: selectTime,
        granularity: granularity,
        hasTime: hasTime,
        ...overlayState,
        setOpen (isOpen) {
            // Commit the selected date when the calendar is closed. Use a placeholder time if one wasn't set.
            // If only the time was set and not the date, don't commit. The state will be preserved until
            // the user opens the popover again.
            if (!isOpen && !value && selectedDate && hasTime) commitValue(selectedDate, selectedTime || ($35a22f14a1f04b11$export$c5221a78ef73c5e9)(props.placeholderValue));
            overlayState.setOpen(isOpen);
        },
        validationState: validationState,
        isInvalid: isValueInvalid,
        formatValue (locale, fieldOptions) {
            if (!dateValue) return '';
            let formatOptions = ($35a22f14a1f04b11$export$7e319ea407e63bc0)(fieldOptions, formatOpts);
            let formatter = new ($fb18d541ea1ad717$export$ad991b66133851cf)(locale, formatOptions);
            return formatter.format(dateValue);
        },
        getDateFormatter (locale, formatOptions) {
            let newOptions = {
                ...formatOpts,
                ...formatOptions
            };
            let newFormatOptions = ($35a22f14a1f04b11$export$7e319ea407e63bc0)({}, newOptions);
            return new ($fb18d541ea1ad717$export$ad991b66133851cf)(locale, newFormatOptions);
        }
    };
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 
// These placeholders are based on the strings used by the <input type="date">
// implementations in Chrome and Firefox. Additional languages are supported
// here than React Spectrum's typical translations.
const $3e3ed55ab2966714$var$placeholders = new ($5b160d28a433310d$export$c17fa47878dc55b6)({
    ach: {
        year: 'mwaka',
        month: 'dwe',
        day: 'nino'
    },
    af: {
        year: 'jjjj',
        month: 'mm',
        day: 'dd'
    },
    am: {
        year: "\u12D3\u12D3\u12D3\u12D3",
        month: "\u121A\u121C",
        day: "\u1240\u1240"
    },
    an: {
        year: 'aaaa',
        month: 'mm',
        day: 'dd'
    },
    ar: {
        year: "\u0633\u0646\u0629",
        month: "\u0634\u0647\u0631",
        day: "\u064A\u0648\u0645"
    },
    ast: {
        year: 'aaaa',
        month: 'mm',
        day: 'dd'
    },
    az: {
        year: 'iiii',
        month: 'aa',
        day: 'gg'
    },
    be: {
        year: "\u0433\u0433\u0433\u0433",
        month: "\u043C\u043C",
        day: "\u0434\u0434"
    },
    bg: {
        year: "\u0433\u0433\u0433\u0433",
        month: "\u043C\u043C",
        day: "\u0434\u0434"
    },
    bn: {
        year: 'yyyy',
        month: "\u09AE\u09BF\u09AE\u09BF",
        day: 'dd'
    },
    br: {
        year: 'bbbb',
        month: 'mm',
        day: 'dd'
    },
    bs: {
        year: 'gggg',
        month: 'mm',
        day: 'dd'
    },
    ca: {
        year: 'aaaa',
        month: 'mm',
        day: 'dd'
    },
    cak: {
        year: 'jjjj',
        month: 'ii',
        day: "q'q'"
    },
    ckb: {
        year: "\u0633\u0627\u06B5",
        month: "\u0645\u0627\u0646\u06AF",
        day: "\u0695\u06C6\u0698"
    },
    cs: {
        year: 'rrrr',
        month: 'mm',
        day: 'dd'
    },
    cy: {
        year: 'bbbb',
        month: 'mm',
        day: 'dd'
    },
    da: {
        year: "\xe5\xe5\xe5\xe5",
        month: 'mm',
        day: 'dd'
    },
    de: {
        year: 'jjjj',
        month: 'mm',
        day: 'tt'
    },
    dsb: {
        year: 'llll',
        month: 'mm',
        day: "\u017A\u017A"
    },
    el: {
        year: "\u03B5\u03B5\u03B5\u03B5",
        month: "\u03BC\u03BC",
        day: "\u03B7\u03B7"
    },
    en: {
        year: 'yyyy',
        month: 'mm',
        day: 'dd'
    },
    eo: {
        year: 'jjjj',
        month: 'mm',
        day: 'tt'
    },
    es: {
        year: 'aaaa',
        month: 'mm',
        day: 'dd'
    },
    et: {
        year: 'aaaa',
        month: 'kk',
        day: 'pp'
    },
    eu: {
        year: 'uuuu',
        month: 'hh',
        day: 'ee'
    },
    fa: {
        year: "\u0633\u0627\u0644",
        month: "\u0645\u0627\u0647",
        day: "\u0631\u0648\u0632"
    },
    ff: {
        year: 'hhhh',
        month: 'll',
        day: "\xf1\xf1"
    },
    fi: {
        year: 'vvvv',
        month: 'kk',
        day: 'pp'
    },
    fr: {
        year: 'aaaa',
        month: 'mm',
        day: 'jj'
    },
    fy: {
        year: 'jjjj',
        month: 'mm',
        day: 'dd'
    },
    ga: {
        year: 'bbbb',
        month: 'mm',
        day: 'll'
    },
    gd: {
        year: 'bbbb',
        month: 'mm',
        day: 'll'
    },
    gl: {
        year: 'aaaa',
        month: 'mm',
        day: 'dd'
    },
    he: {
        year: "\u05E9\u05E0\u05D4",
        month: "\u05D7\u05D5\u05D3\u05E9",
        day: "\u05D9\u05D5\u05DD"
    },
    hr: {
        year: 'gggg',
        month: 'mm',
        day: 'dd'
    },
    hsb: {
        year: 'llll',
        month: 'mm',
        day: 'dd'
    },
    hu: {
        year: "\xe9\xe9\xe9\xe9",
        month: 'hh',
        day: 'nn'
    },
    ia: {
        year: 'aaaa',
        month: 'mm',
        day: 'dd'
    },
    id: {
        year: 'tttt',
        month: 'bb',
        day: 'hh'
    },
    it: {
        year: 'aaaa',
        month: 'mm',
        day: 'gg'
    },
    ja: {
        year: " \u5E74 ",
        month: "\u6708",
        day: "\u65E5"
    },
    ka: {
        year: "\u10EC\u10EC\u10EC\u10EC",
        month: "\u10D7\u10D7",
        day: "\u10E0\u10E0"
    },
    kk: {
        year: "\u0436\u0436\u0436\u0436",
        month: "\u0430\u0430",
        day: "\u043A\u043A"
    },
    kn: {
        year: "\u0CB5\u0CB5\u0CB5\u0CB5",
        month: "\u0CAE\u0CBF\u0CAE\u0CC0",
        day: "\u0CA6\u0CBF\u0CA6\u0CBF"
    },
    ko: {
        year: "\uC5F0\uB3C4",
        month: "\uC6D4",
        day: "\uC77C"
    },
    lb: {
        year: 'jjjj',
        month: 'mm',
        day: 'dd'
    },
    lo: {
        year: "\u0E9B\u0E9B\u0E9B\u0E9B",
        month: "\u0E94\u0E94",
        day: "\u0EA7\u0EA7"
    },
    lt: {
        year: 'mmmm',
        month: 'mm',
        day: 'dd'
    },
    lv: {
        year: 'gggg',
        month: 'mm',
        day: 'dd'
    },
    meh: {
        year: 'aaaa',
        month: 'mm',
        day: 'dd'
    },
    ml: {
        year: "\u0D35\u0D7C\u0D37\u0D02",
        month: "\u0D2E\u0D3E\u0D38\u0D02",
        day: "\u0D24\u0D40\u0D2F\u0D24\u0D3F"
    },
    ms: {
        year: 'tttt',
        month: 'mm',
        day: 'hh'
    },
    nl: {
        year: 'jjjj',
        month: 'mm',
        day: 'dd'
    },
    nn: {
        year: "\xe5\xe5\xe5\xe5",
        month: 'mm',
        day: 'dd'
    },
    no: {
        year: "\xe5\xe5\xe5\xe5",
        month: 'mm',
        day: 'dd'
    },
    oc: {
        year: 'aaaa',
        month: 'mm',
        day: 'jj'
    },
    pl: {
        year: 'rrrr',
        month: 'mm',
        day: 'dd'
    },
    pt: {
        year: 'aaaa',
        month: 'mm',
        day: 'dd'
    },
    rm: {
        year: 'oooo',
        month: 'mm',
        day: 'dd'
    },
    ro: {
        year: 'aaaa',
        month: 'll',
        day: 'zz'
    },
    ru: {
        year: "\u0433\u0433\u0433\u0433",
        month: "\u043C\u043C",
        day: "\u0434\u0434"
    },
    sc: {
        year: 'aaaa',
        month: 'mm',
        day: 'dd'
    },
    scn: {
        year: 'aaaa',
        month: 'mm',
        day: 'jj'
    },
    sk: {
        year: 'rrrr',
        month: 'mm',
        day: 'dd'
    },
    sl: {
        year: 'llll',
        month: 'mm',
        day: 'dd'
    },
    sr: {
        year: "\u0433\u0433\u0433\u0433",
        month: "\u043C\u043C",
        day: "\u0434\u0434"
    },
    sv: {
        year: "\xe5\xe5\xe5\xe5",
        month: 'mm',
        day: 'dd'
    },
    szl: {
        year: 'rrrr',
        month: 'mm',
        day: 'dd'
    },
    tg: {
        year: "\u0441\u0441\u0441\u0441",
        month: "\u043C\u043C",
        day: "\u0440\u0440"
    },
    th: {
        year: "\u0E1B\u0E1B\u0E1B\u0E1B",
        month: "\u0E14\u0E14",
        day: "\u0E27\u0E27"
    },
    tr: {
        year: 'yyyy',
        month: 'aa',
        day: 'gg'
    },
    uk: {
        year: "\u0440\u0440\u0440\u0440",
        month: "\u043C\u043C",
        day: "\u0434\u0434"
    },
    'zh-CN': {
        year: "\u5E74",
        month: "\u6708",
        day: "\u65E5"
    },
    'zh-TW': {
        year: "\u5E74",
        month: "\u6708",
        day: "\u65E5"
    }
}, 'en');
function $3e3ed55ab2966714$export$d3f5c5e0a5023fa0(field, value, locale) {
    // Use the actual placeholder value for the era and day period fields.
    if (field === 'era' || field === 'dayPeriod') return value;
    if (field === 'year' || field === 'month' || field === 'day') return $3e3ed55ab2966714$var$placeholders.getStringForLocale(field, locale);
    // For time fields (e.g. hour, minute, etc.), use two dashes as the placeholder.
    return "\u2013\u2013";
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 





const $3c0fc76039f1c516$var$EDITABLE_SEGMENTS = {
    year: true,
    month: true,
    day: true,
    hour: true,
    minute: true,
    second: true,
    dayPeriod: true,
    era: true
};
const $3c0fc76039f1c516$var$PAGE_STEP = {
    year: 5,
    month: 2,
    day: 7,
    hour: 2,
    minute: 15,
    second: 15
};
// Node seems to convert everything to lowercase...
const $3c0fc76039f1c516$var$TYPE_MAPPING = {
    dayperiod: 'dayPeriod'
};
function $3c0fc76039f1c516$export$60e84778edff6d26(props) {
    let { locale: locale, createCalendar: createCalendar, hideTimeZone: hideTimeZone, isDisabled: isDisabled, isReadOnly: isReadOnly, isRequired: isRequired, minValue: minValue, maxValue: maxValue, isDateUnavailable: isDateUnavailable } = props;
    let v = props.value || props.defaultValue || props.placeholderValue;
    let [granularity, defaultTimeZone] = ($35a22f14a1f04b11$export$2440da353cedad43)(v, props.granularity);
    let timeZone = defaultTimeZone || 'UTC';
    // props.granularity must actually exist in the value if one is provided.
    if (v && !(granularity in v)) throw new Error('Invalid granularity ' + granularity + ' for value ' + v.toString());
    let defaultFormatter = (reactExports.useMemo)(()=>new ($fb18d541ea1ad717$export$ad991b66133851cf)(locale), [
        locale
    ]);
    let calendar = (reactExports.useMemo)(()=>createCalendar(defaultFormatter.resolvedOptions().calendar), [
        createCalendar,
        defaultFormatter
    ]);
    let [value, setDate] = ($458b0a5536c1a7cf$export$40bfa8c7b0832715)(props.value, props.defaultValue, props.onChange);
    let calendarValue = (reactExports.useMemo)(()=>($35a22f14a1f04b11$export$61a490a80c552550)(value, calendar), [
        value,
        calendar
    ]);
    // We keep track of the placeholder date separately in state so that onChange is not called
    // until all segments are set. If the value === null (not undefined), then assume the component
    // is controlled, so use the placeholder as the value until all segments are entered so it doesn't
    // change from uncontrolled to controlled and emit a warning.
    let [placeholderDate, setPlaceholderDate] = (reactExports.useState)(()=>($35a22f14a1f04b11$export$66aa2b09de4b1ea5)(props.placeholderValue, granularity, calendar, defaultTimeZone));
    let val = calendarValue || placeholderDate;
    let showEra = calendar.identifier === 'gregory' && val.era === 'BC';
    let formatOpts = (reactExports.useMemo)(()=>{
        var _props_maxGranularity;
        return {
            granularity: granularity,
            maxGranularity: (_props_maxGranularity = props.maxGranularity) !== null && _props_maxGranularity !== void 0 ? _props_maxGranularity : 'year',
            timeZone: defaultTimeZone,
            hideTimeZone: hideTimeZone,
            hourCycle: props.hourCycle,
            showEra: showEra,
            shouldForceLeadingZeros: props.shouldForceLeadingZeros
        };
    }, [
        props.maxGranularity,
        granularity,
        props.hourCycle,
        props.shouldForceLeadingZeros,
        defaultTimeZone,
        hideTimeZone,
        showEra
    ]);
    let opts = (reactExports.useMemo)(()=>($35a22f14a1f04b11$export$7e319ea407e63bc0)({}, formatOpts), [
        formatOpts
    ]);
    let dateFormatter = (reactExports.useMemo)(()=>new ($fb18d541ea1ad717$export$ad991b66133851cf)(locale, opts), [
        locale,
        opts
    ]);
    let resolvedOptions = (reactExports.useMemo)(()=>dateFormatter.resolvedOptions(), [
        dateFormatter
    ]);
    // Determine how many editable segments there are for validation purposes.
    // The result is cached for performance.
    let allSegments = (reactExports.useMemo)(()=>dateFormatter.formatToParts(new Date()).filter((seg)=>$3c0fc76039f1c516$var$EDITABLE_SEGMENTS[seg.type]).reduce((p, seg)=>(p[seg.type] = true, p), {}), [
        dateFormatter
    ]);
    let [validSegments, setValidSegments] = (reactExports.useState)(()=>props.value || props.defaultValue ? {
            ...allSegments
        } : {});
    let clearedSegment = (reactExports.useRef)(undefined);
    // Reset placeholder when calendar changes
    let lastCalendarIdentifier = (reactExports.useRef)(calendar.identifier);
    (reactExports.useEffect)(()=>{
        if (calendar.identifier !== lastCalendarIdentifier.current) {
            lastCalendarIdentifier.current = calendar.identifier;
            setPlaceholderDate((placeholder)=>Object.keys(validSegments).length > 0 ? ($11d87f3f76e88657$export$b4a036af3fc0b032)(placeholder, calendar) : ($35a22f14a1f04b11$export$66aa2b09de4b1ea5)(props.placeholderValue, granularity, calendar, defaultTimeZone));
        }
    }, [
        calendar,
        granularity,
        validSegments,
        defaultTimeZone,
        props.placeholderValue
    ]);
    // If there is a value prop, and some segments were previously placeholders, mark them all as valid.
    if (value && Object.keys(validSegments).length < Object.keys(allSegments).length) {
        validSegments = {
            ...allSegments
        };
        setValidSegments(validSegments);
    }
    // If the value is set to null and all segments are valid, reset the placeholder.
    if (value == null && Object.keys(validSegments).length === Object.keys(allSegments).length) {
        validSegments = {};
        setValidSegments(validSegments);
        setPlaceholderDate(($35a22f14a1f04b11$export$66aa2b09de4b1ea5)(props.placeholderValue, granularity, calendar, defaultTimeZone));
    }
    // If all segments are valid, use the date from state, otherwise use the placeholder date.
    let displayValue = calendarValue && Object.keys(validSegments).length >= Object.keys(allSegments).length ? calendarValue : placeholderDate;
    let setValue = (newValue)=>{
        if (props.isDisabled || props.isReadOnly) return;
        let validKeys = Object.keys(validSegments);
        let allKeys = Object.keys(allSegments);
        // if all the segments are completed or a timefield with everything but am/pm set the time, also ignore when am/pm cleared
        if (newValue == null) {
            setDate(null);
            setPlaceholderDate(($35a22f14a1f04b11$export$66aa2b09de4b1ea5)(props.placeholderValue, granularity, calendar, defaultTimeZone));
            setValidSegments({});
        } else if (validKeys.length >= allKeys.length || validKeys.length === allKeys.length - 1 && allSegments.dayPeriod && !validSegments.dayPeriod && clearedSegment.current !== 'dayPeriod') {
            // The display calendar should not have any effect on the emitted value.
            // Emit dates in the same calendar as the original value, if any, otherwise gregorian.
            newValue = ($11d87f3f76e88657$export$b4a036af3fc0b032)(newValue, (v === null || v === void 0 ? void 0 : v.calendar) || new ($3b62074eb05584b2$export$80ee6245ec4f29ec)());
            setDate(newValue);
        } else setPlaceholderDate(newValue);
        clearedSegment.current = null;
    };
    let dateValue = (reactExports.useMemo)(()=>displayValue.toDate(timeZone), [
        displayValue,
        timeZone
    ]);
    let segments = (reactExports.useMemo)(()=>dateFormatter.formatToParts(dateValue).map((segment)=>{
            let isEditable = $3c0fc76039f1c516$var$EDITABLE_SEGMENTS[segment.type];
            if (segment.type === 'era' && calendar.getEras().length === 1) isEditable = false;
            let isPlaceholder = $3c0fc76039f1c516$var$EDITABLE_SEGMENTS[segment.type] && !validSegments[segment.type];
            let placeholder = $3c0fc76039f1c516$var$EDITABLE_SEGMENTS[segment.type] ? ($3e3ed55ab2966714$export$d3f5c5e0a5023fa0)(segment.type, segment.value, locale) : null;
            return {
                type: $3c0fc76039f1c516$var$TYPE_MAPPING[segment.type] || segment.type,
                text: isPlaceholder ? placeholder : segment.value,
                ...$3c0fc76039f1c516$var$getSegmentLimits(displayValue, segment.type, resolvedOptions),
                isPlaceholder: isPlaceholder,
                placeholder: placeholder,
                isEditable: isEditable
            };
        }), [
        dateValue,
        validSegments,
        dateFormatter,
        resolvedOptions,
        displayValue,
        calendar,
        locale
    ]);
    // When the era field appears, mark it valid if the year field is already valid.
    // If the era field disappears, remove it from the valid segments.
    if (allSegments.era && validSegments.year && !validSegments.era) {
        validSegments.era = true;
        setValidSegments({
            ...validSegments
        });
    } else if (!allSegments.era && validSegments.era) {
        delete validSegments.era;
        setValidSegments({
            ...validSegments
        });
    }
    let markValid = (part)=>{
        validSegments[part] = true;
        if (part === 'year' && allSegments.era) validSegments.era = true;
        setValidSegments({
            ...validSegments
        });
    };
    let adjustSegment = (type, amount)=>{
        if (!validSegments[type]) {
            markValid(type);
            let validKeys = Object.keys(validSegments);
            let allKeys = Object.keys(allSegments);
            if (validKeys.length >= allKeys.length || validKeys.length === allKeys.length - 1 && allSegments.dayPeriod && !validSegments.dayPeriod) setValue(displayValue);
        } else setValue($3c0fc76039f1c516$var$addSegment(displayValue, type, amount, resolvedOptions));
    };
    let builtinValidation = (reactExports.useMemo)(()=>($35a22f14a1f04b11$export$f18627323ab57ac0)(value, minValue, maxValue, isDateUnavailable, formatOpts), [
        value,
        minValue,
        maxValue,
        isDateUnavailable,
        formatOpts
    ]);
    let validation = ($e5be200c675c3b3a$export$fc1a364ae1f3ff10)({
        ...props,
        value: value,
        builtinValidation: builtinValidation
    });
    let isValueInvalid = validation.displayValidation.isInvalid;
    let validationState = props.validationState || (isValueInvalid ? 'invalid' : null);
    var _props_maxGranularity;
    return {
        ...validation,
        value: calendarValue,
        dateValue: dateValue,
        calendar: calendar,
        setValue: setValue,
        segments: segments,
        dateFormatter: dateFormatter,
        validationState: validationState,
        isInvalid: isValueInvalid,
        granularity: granularity,
        maxGranularity: (_props_maxGranularity = props.maxGranularity) !== null && _props_maxGranularity !== void 0 ? _props_maxGranularity : 'year',
        isDisabled: isDisabled,
        isReadOnly: isReadOnly,
        isRequired: isRequired,
        increment (part) {
            adjustSegment(part, 1);
        },
        decrement (part) {
            adjustSegment(part, -1);
        },
        incrementPage (part) {
            adjustSegment(part, $3c0fc76039f1c516$var$PAGE_STEP[part] || 1);
        },
        decrementPage (part) {
            adjustSegment(part, -($3c0fc76039f1c516$var$PAGE_STEP[part] || 1));
        },
        setSegment (part, v) {
            markValid(part);
            setValue($3c0fc76039f1c516$var$setSegment(displayValue, part, v, resolvedOptions));
        },
        confirmPlaceholder () {
            if (props.isDisabled || props.isReadOnly) return;
            // Confirm the placeholder if only the day period is not filled in.
            let validKeys = Object.keys(validSegments);
            let allKeys = Object.keys(allSegments);
            if (validKeys.length === allKeys.length - 1 && allSegments.dayPeriod && !validSegments.dayPeriod) {
                validSegments = {
                    ...allSegments
                };
                setValidSegments(validSegments);
                setValue(displayValue.copy());
            }
        },
        clearSegment (part) {
            delete validSegments[part];
            clearedSegment.current = part;
            setValidSegments({
                ...validSegments
            });
            let placeholder = ($35a22f14a1f04b11$export$66aa2b09de4b1ea5)(props.placeholderValue, granularity, calendar, defaultTimeZone);
            let value = displayValue;
            // Reset day period to default without changing the hour.
            if (part === 'dayPeriod' && 'hour' in displayValue && 'hour' in placeholder) {
                let isPM = displayValue.hour >= 12;
                let shouldBePM = placeholder.hour >= 12;
                if (isPM && !shouldBePM) value = displayValue.set({
                    hour: displayValue.hour - 12
                });
                else if (!isPM && shouldBePM) value = displayValue.set({
                    hour: displayValue.hour + 12
                });
            } else if (part in displayValue) value = displayValue.set({
                [part]: placeholder[part]
            });
            setDate(null);
            setValue(value);
        },
        formatValue (fieldOptions) {
            if (!calendarValue) return '';
            let formatOptions = ($35a22f14a1f04b11$export$7e319ea407e63bc0)(fieldOptions, formatOpts);
            let formatter = new ($fb18d541ea1ad717$export$ad991b66133851cf)(locale, formatOptions);
            return formatter.format(dateValue);
        },
        getDateFormatter (locale, formatOptions) {
            let newOptions = {
                ...formatOpts,
                ...formatOptions
            };
            let newFormatOptions = ($35a22f14a1f04b11$export$7e319ea407e63bc0)({}, newOptions);
            return new ($fb18d541ea1ad717$export$ad991b66133851cf)(locale, newFormatOptions);
        }
    };
}
function $3c0fc76039f1c516$var$getSegmentLimits(date, type, options) {
    switch(type){
        case 'era':
            {
                let eras = date.calendar.getEras();
                return {
                    value: eras.indexOf(date.era),
                    minValue: 0,
                    maxValue: eras.length - 1
                };
            }
        case 'year':
            return {
                value: date.year,
                minValue: 1,
                maxValue: date.calendar.getYearsInEra(date)
            };
        case 'month':
            return {
                value: date.month,
                minValue: ($14e0f24ef4ac5c92$export$5412ac11713b72ad)(date),
                maxValue: date.calendar.getMonthsInYear(date)
            };
        case 'day':
            return {
                value: date.day,
                minValue: ($14e0f24ef4ac5c92$export$b2f4953d301981d5)(date),
                maxValue: date.calendar.getDaysInMonth(date)
            };
    }
    if ('hour' in date) switch(type){
        case 'dayPeriod':
            return {
                value: date.hour >= 12 ? 12 : 0,
                minValue: 0,
                maxValue: 12
            };
        case 'hour':
            if (options.hour12) {
                let isPM = date.hour >= 12;
                return {
                    value: date.hour,
                    minValue: isPM ? 12 : 0,
                    maxValue: isPM ? 23 : 11
                };
            }
            return {
                value: date.hour,
                minValue: 0,
                maxValue: 23
            };
        case 'minute':
            return {
                value: date.minute,
                minValue: 0,
                maxValue: 59
            };
        case 'second':
            return {
                value: date.second,
                minValue: 0,
                maxValue: 59
            };
    }
    return {};
}
function $3c0fc76039f1c516$var$addSegment(value, part, amount, options) {
    switch(part){
        case 'era':
        case 'year':
        case 'month':
        case 'day':
            return value.cycle(part, amount, {
                round: part === 'year'
            });
    }
    if ('hour' in value) switch(part){
        case 'dayPeriod':
            {
                let hours = value.hour;
                let isPM = hours >= 12;
                return value.set({
                    hour: isPM ? hours - 12 : hours + 12
                });
            }
        case 'hour':
        case 'minute':
        case 'second':
            return value.cycle(part, amount, {
                round: part !== 'hour',
                hourCycle: options.hour12 ? 12 : 24
            });
    }
}
function $3c0fc76039f1c516$var$setSegment(value, part, segmentValue, options) {
    switch(part){
        case 'day':
        case 'month':
        case 'year':
        case 'era':
            return value.set({
                [part]: segmentValue
            });
    }
    if ('hour' in value) switch(part){
        case 'dayPeriod':
            {
                let hours = value.hour;
                let wasPM = hours >= 12;
                let isPM = segmentValue >= 12;
                if (isPM === wasPM) return value;
                return value.set({
                    hour: wasPM ? hours - 12 : hours + 12
                });
            }
        case 'hour':
            // In 12 hour time, ensure that AM/PM does not change
            if (options.hour12) {
                let hours = value.hour;
                let wasPM = hours >= 12;
                if (!wasPM && segmentValue === 12) segmentValue = 0;
                if (wasPM && segmentValue < 12) segmentValue += 12;
            }
        // fallthrough
        case 'minute':
        case 'second':
            return value.set({
                [part]: segmentValue
            });
    }
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 





function $93c38a5e28be6249$export$e50a61c1de9f574(props) {
    var _value_start, _value_end;
    let overlayState = ($fc909762b330b746$export$61c6a8c84e605fb6)(props);
    let [controlledValue, setControlledValue] = ($458b0a5536c1a7cf$export$40bfa8c7b0832715)(props.value, props.defaultValue || null, props.onChange);
    let [placeholderValue, setPlaceholderValue] = (reactExports.useState)(()=>controlledValue || {
            start: null,
            end: null
        });
    // Reset the placeholder if the value prop is set to null.
    if (controlledValue == null && placeholderValue.start && placeholderValue.end) {
        placeholderValue = {
            start: null,
            end: null
        };
        setPlaceholderValue(placeholderValue);
    }
    let value = controlledValue || placeholderValue;
    let setValue = (value)=>{
        setPlaceholderValue(value || {
            start: null,
            end: null
        });
        if ((value === null || value === void 0 ? void 0 : value.start) && value.end) setControlledValue(value);
        else setControlledValue(null);
    };
    let v = (value === null || value === void 0 ? void 0 : value.start) || (value === null || value === void 0 ? void 0 : value.end) || props.placeholderValue;
    let [granularity, defaultTimeZone] = ($35a22f14a1f04b11$export$2440da353cedad43)(v, props.granularity);
    let hasTime = granularity === 'hour' || granularity === 'minute' || granularity === 'second';
    var _props_shouldCloseOnSelect;
    let shouldCloseOnSelect = (_props_shouldCloseOnSelect = props.shouldCloseOnSelect) !== null && _props_shouldCloseOnSelect !== void 0 ? _props_shouldCloseOnSelect : true;
    let [dateRange, setSelectedDateRange] = (reactExports.useState)(null);
    let [timeRange, setSelectedTimeRange] = (reactExports.useState)(null);
    if (value && value.start && value.end) {
        dateRange = value;
        if ('hour' in value.start) timeRange = value;
    }
    let commitValue = (dateRange, timeRange)=>{
        setValue({
            start: 'timeZone' in timeRange.start ? timeRange.start.set(($11d87f3f76e88657$export$93522d1a439f3617)(dateRange.start)) : ($11d87f3f76e88657$export$b21e0b124e224484)(dateRange.start, timeRange.start),
            end: 'timeZone' in timeRange.end ? timeRange.end.set(($11d87f3f76e88657$export$93522d1a439f3617)(dateRange.end)) : ($11d87f3f76e88657$export$b21e0b124e224484)(dateRange.end, timeRange.end)
        });
        setSelectedDateRange(null);
        setSelectedTimeRange(null);
        validation.commitValidation();
    };
    // Intercept setValue to make sure the Time section is not changed by date selection in Calendar
    let setDateRange = (range)=>{
        let shouldClose = typeof shouldCloseOnSelect === 'function' ? shouldCloseOnSelect() : shouldCloseOnSelect;
        if (hasTime) {
            if (shouldClose || range.start && range.end && (timeRange === null || timeRange === void 0 ? void 0 : timeRange.start) && (timeRange === null || timeRange === void 0 ? void 0 : timeRange.end)) commitValue(range, {
                start: (timeRange === null || timeRange === void 0 ? void 0 : timeRange.start) || ($35a22f14a1f04b11$export$c5221a78ef73c5e9)(props.placeholderValue),
                end: (timeRange === null || timeRange === void 0 ? void 0 : timeRange.end) || ($35a22f14a1f04b11$export$c5221a78ef73c5e9)(props.placeholderValue)
            });
            else setSelectedDateRange(range);
        } else if (range.start && range.end) {
            setValue(range);
            validation.commitValidation();
        } else setSelectedDateRange(range);
        if (shouldClose) overlayState.setOpen(false);
    };
    let setTimeRange = (range)=>{
        if ((dateRange === null || dateRange === void 0 ? void 0 : dateRange.start) && (dateRange === null || dateRange === void 0 ? void 0 : dateRange.end) && range.start && range.end) commitValue(dateRange, range);
        else setSelectedTimeRange(range);
    };
    let showEra = (value === null || value === void 0 ? void 0 : (_value_start = value.start) === null || _value_start === void 0 ? void 0 : _value_start.calendar.identifier) === 'gregory' && value.start.era === 'BC' || (value === null || value === void 0 ? void 0 : (_value_end = value.end) === null || _value_end === void 0 ? void 0 : _value_end.calendar.identifier) === 'gregory' && value.end.era === 'BC';
    let formatOpts = (reactExports.useMemo)(()=>({
            granularity: granularity,
            timeZone: defaultTimeZone,
            hideTimeZone: props.hideTimeZone,
            hourCycle: props.hourCycle,
            shouldForceLeadingZeros: props.shouldForceLeadingZeros,
            showEra: showEra
        }), [
        granularity,
        props.hourCycle,
        props.shouldForceLeadingZeros,
        defaultTimeZone,
        props.hideTimeZone,
        showEra
    ]);
    let { minValue: minValue, maxValue: maxValue, isDateUnavailable: isDateUnavailable } = props;
    let builtinValidation = (reactExports.useMemo)(()=>($35a22f14a1f04b11$export$80ff8fc0ae339c13)(value, minValue, maxValue, isDateUnavailable, formatOpts), [
        value,
        minValue,
        maxValue,
        isDateUnavailable,
        formatOpts
    ]);
    let validation = ($e5be200c675c3b3a$export$fc1a364ae1f3ff10)({
        ...props,
        value: controlledValue,
        name: (reactExports.useMemo)(()=>[
                props.startName,
                props.endName
            ], [
            props.startName,
            props.endName
        ]),
        builtinValidation: builtinValidation
    });
    let isValueInvalid = validation.displayValidation.isInvalid;
    let validationState = props.validationState || (isValueInvalid ? 'invalid' : null);
    return {
        ...validation,
        value: value,
        setValue: setValue,
        dateRange: dateRange,
        timeRange: timeRange,
        granularity: granularity,
        hasTime: hasTime,
        setDate (part, date) {
            setDateRange({
                ...dateRange,
                [part]: date
            });
        },
        setTime (part, time) {
            setTimeRange({
                ...timeRange,
                [part]: time
            });
        },
        setDateTime (part, dateTime) {
            setValue({
                ...value,
                [part]: dateTime
            });
        },
        setDateRange: setDateRange,
        setTimeRange: setTimeRange,
        ...overlayState,
        setOpen (isOpen) {
            // Commit the selected date range when the calendar is closed. Use a placeholder time if one wasn't set.
            // If only the time range was set and not the date range, don't commit. The state will be preserved until
            // the user opens the popover again.
            if (!isOpen && !((value === null || value === void 0 ? void 0 : value.start) && (value === null || value === void 0 ? void 0 : value.end)) && (dateRange === null || dateRange === void 0 ? void 0 : dateRange.start) && (dateRange === null || dateRange === void 0 ? void 0 : dateRange.end) && hasTime) commitValue(dateRange, {
                start: (timeRange === null || timeRange === void 0 ? void 0 : timeRange.start) || ($35a22f14a1f04b11$export$c5221a78ef73c5e9)(props.placeholderValue),
                end: (timeRange === null || timeRange === void 0 ? void 0 : timeRange.end) || ($35a22f14a1f04b11$export$c5221a78ef73c5e9)(props.placeholderValue)
            });
            overlayState.setOpen(isOpen);
        },
        validationState: validationState,
        isInvalid: isValueInvalid,
        formatValue (locale, fieldOptions) {
            if (!value || !value.start || !value.end) return null;
            let startTimeZone = 'timeZone' in value.start ? value.start.timeZone : undefined;
            let startGranularity = props.granularity || (value.start && 'minute' in value.start ? 'minute' : 'day');
            let endTimeZone = 'timeZone' in value.end ? value.end.timeZone : undefined;
            let endGranularity = props.granularity || (value.end && 'minute' in value.end ? 'minute' : 'day');
            let startOptions = ($35a22f14a1f04b11$export$7e319ea407e63bc0)(fieldOptions, {
                granularity: startGranularity,
                timeZone: startTimeZone,
                hideTimeZone: props.hideTimeZone,
                hourCycle: props.hourCycle,
                showEra: value.start.calendar.identifier === 'gregory' && value.start.era === 'BC' || value.end.calendar.identifier === 'gregory' && value.end.era === 'BC'
            });
            let startDate = value.start.toDate(startTimeZone || 'UTC');
            let endDate = value.end.toDate(endTimeZone || 'UTC');
            let startFormatter = new ($fb18d541ea1ad717$export$ad991b66133851cf)(locale, startOptions);
            let endFormatter;
            if (startTimeZone === endTimeZone && startGranularity === endGranularity && value.start.compare(value.end) !== 0) {
                // Use formatRange, as it results in shorter output when some of the fields
                // are shared between the start and end dates (e.g. the same month).
                // Formatting will fail if the end date is before the start date. Fall back below when that happens.
                try {
                    let parts = startFormatter.formatRangeToParts(startDate, endDate);
                    // Find the separator between the start and end date. This is determined
                    // by finding the last shared literal before the end range.
                    let separatorIndex = -1;
                    for(let i = 0; i < parts.length; i++){
                        let part = parts[i];
                        if (part.source === 'shared' && part.type === 'literal') separatorIndex = i;
                        else if (part.source === 'endRange') break;
                    }
                    // Now we can combine the parts into start and end strings.
                    let start = '';
                    let end = '';
                    for(let i = 0; i < parts.length; i++){
                        if (i < separatorIndex) start += parts[i].value;
                        else if (i > separatorIndex) end += parts[i].value;
                    }
                    return {
                        start: start,
                        end: end
                    };
                } catch (e) {
                // ignore
                }
                endFormatter = startFormatter;
            } else {
                let endOptions = ($35a22f14a1f04b11$export$7e319ea407e63bc0)(fieldOptions, {
                    granularity: endGranularity,
                    timeZone: endTimeZone,
                    hideTimeZone: props.hideTimeZone,
                    hourCycle: props.hourCycle
                });
                endFormatter = new ($fb18d541ea1ad717$export$ad991b66133851cf)(locale, endOptions);
            }
            return {
                start: startFormatter.format(startDate),
                end: endFormatter.format(endDate)
            };
        },
        getDateFormatter (locale, formatOptions) {
            let newOptions = {
                ...formatOpts,
                ...formatOptions
            };
            let newFormatOptions = ($35a22f14a1f04b11$export$7e319ea407e63bc0)({}, newOptions);
            return new ($fb18d541ea1ad717$export$ad991b66133851cf)(locale, newFormatOptions);
        }
    };
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the 'License');
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 



function $eff5d8ee529ac4bb$export$fd53cef0cc796101(props) {
    let { placeholderValue: placeholderValue = new ($35ea8db9cb2ccb90$export$680ea196effce5f)(), minValue: minValue, maxValue: maxValue, granularity: granularity, validate: validate } = props;
    let [value, setValue] = ($458b0a5536c1a7cf$export$40bfa8c7b0832715)(props.value, props.defaultValue, props.onChange);
    let v = value || placeholderValue;
    let day = v && 'day' in v ? v : undefined;
    let defaultValueTimeZone = props.defaultValue && 'timeZone' in props.defaultValue ? props.defaultValue.timeZone : undefined;
    let placeholderDate = (reactExports.useMemo)(()=>{
        let valueTimeZone = v && 'timeZone' in v ? v.timeZone : undefined;
        return (valueTimeZone || defaultValueTimeZone) && placeholderValue ? ($11d87f3f76e88657$export$84c95a83c799e074)($eff5d8ee529ac4bb$var$convertValue(placeholderValue), valueTimeZone || defaultValueTimeZone) : $eff5d8ee529ac4bb$var$convertValue(placeholderValue);
    }, [
        placeholderValue,
        v,
        defaultValueTimeZone
    ]);
    let minDate = (reactExports.useMemo)(()=>$eff5d8ee529ac4bb$var$convertValue(minValue, day), [
        minValue,
        day
    ]);
    let maxDate = (reactExports.useMemo)(()=>$eff5d8ee529ac4bb$var$convertValue(maxValue, day), [
        maxValue,
        day
    ]);
    let timeValue = (reactExports.useMemo)(()=>value && 'day' in value ? ($11d87f3f76e88657$export$d33f79e3ffc3dc83)(value) : value, [
        value
    ]);
    let dateTime = (reactExports.useMemo)(()=>value == null ? null : $eff5d8ee529ac4bb$var$convertValue(value), [
        value
    ]);
    let onChange = (newValue)=>{
        setValue(day || defaultValueTimeZone ? newValue : newValue && ($11d87f3f76e88657$export$d33f79e3ffc3dc83)(newValue));
    };
    let state = ($3c0fc76039f1c516$export$60e84778edff6d26)({
        ...props,
        value: dateTime,
        defaultValue: undefined,
        minValue: minDate,
        maxValue: maxDate,
        onChange: onChange,
        granularity: granularity || 'minute',
        maxGranularity: 'hour',
        placeholderValue: placeholderDate,
        // Calendar should not matter for time fields.
        createCalendar: ()=>new ($3b62074eb05584b2$export$80ee6245ec4f29ec)(),
        validate: (reactExports.useCallback)(()=>validate === null || validate === void 0 ? void 0 : validate(value), [
            validate,
            value
        ])
    });
    return {
        ...state,
        timeValue: timeValue
    };
}
function $eff5d8ee529ac4bb$var$convertValue(value, date = ($14e0f24ef4ac5c92$export$d0bdf45af03a6ea3)(($14e0f24ef4ac5c92$export$aa8b41735afcabd2)())) {
    if (!value) return null;
    if ('day' in value) return value;
    return ($11d87f3f76e88657$export$b21e0b124e224484)(date, value);
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 
function $b45bbbaf0c3785df$export$29efd034f1d79f81(props) {
    let { getItems: getItems, isDisabled: isDisabled, collection: collection, selectionManager: selectionManager, onDragStart: onDragStart, onDragMove: onDragMove, onDragEnd: onDragEnd, preview: preview, getAllowedDropOperations: getAllowedDropOperations } = props;
    let [, setDragging] = (reactExports.useState)(false);
    let draggingKeys = (reactExports.useRef)(new Set());
    let draggedKey = (reactExports.useRef)(null);
    let getKeys = (key)=>{
        // The clicked item is always added to the drag. If it is selected, then all of the
        // other selected items are also dragged. If it is not selected, the only the clicked
        // item is dragged. This matches native macOS behavior.
        let keys = new Set(selectionManager.isSelected(key) ? new Set([
            ...selectionManager.selectedKeys
        ].filter((key)=>!!collection.getItem(key))) : []);
        keys.add(key);
        return keys;
    };
    return {
        collection: collection,
        selectionManager: selectionManager,
        get draggedKey () {
            return draggedKey.current;
        },
        get draggingKeys () {
            return draggingKeys.current;
        },
        isDragging (key) {
            return draggingKeys.current.has(key);
        },
        getKeysForDrag: getKeys,
        getItems (key) {
            return getItems(getKeys(key));
        },
        isDisabled: isDisabled,
        preview: preview,
        getAllowedDropOperations: getAllowedDropOperations,
        startDrag (key, event) {
            let keys = getKeys(key);
            draggingKeys.current = keys;
            draggedKey.current = key;
            selectionManager.setFocused(false);
            setDragging(true);
            if (typeof onDragStart === 'function') onDragStart({
                ...event,
                keys: keys
            });
        },
        moveDrag (event) {
            if (typeof onDragMove === 'function') onDragMove({
                ...event,
                keys: draggingKeys.current
            });
        },
        endDrag (event) {
            let { isInternal: isInternal } = event;
            if (typeof onDragEnd === 'function') onDragEnd({
                ...event,
                keys: draggingKeys.current,
                isInternal: isInternal
            });
            draggingKeys.current = new Set();
            draggedKey.current = null;
            setDragging(false);
        }
    };
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 
function $e672e8bc247525d1$export$926850f6ecef79d0(props) {
    let { acceptedDragTypes: acceptedDragTypes = 'all', isDisabled: isDisabled, onInsert: onInsert, onRootDrop: onRootDrop, onItemDrop: onItemDrop, onReorder: onReorder, shouldAcceptItemDrop: shouldAcceptItemDrop, collection: collection, selectionManager: selectionManager, onDropEnter: onDropEnter, getDropOperation: getDropOperation, onDrop: onDrop } = props;
    let [target, setTarget] = (reactExports.useState)(null);
    let targetRef = (reactExports.useRef)(null);
    let getOppositeTarget = (target)=>{
        if (target.dropPosition === 'before') {
            let key = collection.getKeyBefore(target.key);
            return key != null ? {
                type: 'item',
                key: key,
                dropPosition: 'after'
            } : null;
        } else if (target.dropPosition === 'after') {
            let key = collection.getKeyAfter(target.key);
            return key != null ? {
                type: 'item',
                key: key,
                dropPosition: 'before'
            } : null;
        }
    };
    let defaultGetDropOperation = (reactExports.useCallback)((e)=>{
        if (isDisabled) return 'cancel';
        let { target: target, types: types, allowedOperations: allowedOperations, isInternal: isInternal, draggingKeys: draggingKeys } = e;
        if (acceptedDragTypes === 'all' || acceptedDragTypes.some((type)=>types.has(type))) {
            let isValidInsert = onInsert && target.type === 'item' && !isInternal && (target.dropPosition === 'before' || target.dropPosition === 'after');
            let isValidReorder = onReorder && target.type === 'item' && isInternal && (target.dropPosition === 'before' || target.dropPosition === 'after');
            // Feedback was that internal root drop was weird so preventing that from happening
            let isValidRootDrop = onRootDrop && target.type === 'root' && !isInternal;
            // Automatically prevent items (i.e. folders) from being dropped on themselves.
            let isValidOnItemDrop = onItemDrop && target.type === 'item' && target.dropPosition === 'on' && !(isInternal && draggingKeys.has(target.key)) && (!shouldAcceptItemDrop || shouldAcceptItemDrop(target, types));
            if (onDrop || isValidInsert || isValidReorder || isValidRootDrop || isValidOnItemDrop) {
                if (getDropOperation) return getDropOperation(target, types, allowedOperations);
                else return allowedOperations[0];
            }
        }
        return 'cancel';
    }, [
        isDisabled,
        acceptedDragTypes,
        getDropOperation,
        onInsert,
        onRootDrop,
        onItemDrop,
        shouldAcceptItemDrop,
        onReorder,
        onDrop
    ]);
    return {
        collection: collection,
        selectionManager: selectionManager,
        isDisabled: isDisabled,
        target: target,
        setTarget (newTarget) {
            if (this.isDropTarget(newTarget)) return;
            let target = targetRef.current;
            if (target && typeof props.onDropExit === 'function') props.onDropExit({
                type: 'dropexit',
                x: 0,
                y: 0,
                target: target
            });
            if (newTarget && typeof onDropEnter === 'function') onDropEnter({
                type: 'dropenter',
                x: 0,
                y: 0,
                target: newTarget
            });
            targetRef.current = newTarget;
            setTarget(newTarget);
        },
        isDropTarget (dropTarget) {
            let target = targetRef.current;
            if ($e672e8bc247525d1$var$isEqualDropTarget(dropTarget, target)) return true;
            // Check if the targets point at the same point between two items, one referring before, and the other after.
            if ((dropTarget === null || dropTarget === void 0 ? void 0 : dropTarget.type) === 'item' && (target === null || target === void 0 ? void 0 : target.type) === 'item' && dropTarget.key !== target.key && dropTarget.dropPosition !== target.dropPosition && dropTarget.dropPosition !== 'on' && target.dropPosition !== 'on') return $e672e8bc247525d1$var$isEqualDropTarget(getOppositeTarget(dropTarget), target) || $e672e8bc247525d1$var$isEqualDropTarget(dropTarget, getOppositeTarget(target));
            return false;
        },
        getDropOperation (e) {
            return defaultGetDropOperation(e);
        }
    };
}
function $e672e8bc247525d1$var$isEqualDropTarget(a, b) {
    if (!a) return !b;
    switch(a.type){
        case 'root':
            return (b === null || b === void 0 ? void 0 : b.type) === 'root';
        case 'item':
            return (b === null || b === void 0 ? void 0 : b.type) === 'item' && (b === null || b === void 0 ? void 0 : b.key) === a.key && (b === null || b === void 0 ? void 0 : b.dropPosition) === a.dropPosition;
    }
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 
function $0d86e9c8f07f9a7b$export$762f73dccccd255d(options) {
    let { initialItems: initialItems = [], initialSelectedKeys: initialSelectedKeys, getKey: getKey = (item)=>{
        var _item_id;
        return (_item_id = item.id) !== null && _item_id !== void 0 ? _item_id : item.key;
    }, filter: filter, initialFilterText: initialFilterText = '' } = options;
    // Store both items and filteredItems in state so we can go back to the unfiltered list
    let [state, setState] = (reactExports.useState)({
        items: initialItems,
        selectedKeys: initialSelectedKeys === 'all' ? 'all' : new Set(initialSelectedKeys || []),
        filterText: initialFilterText
    });
    let filteredItems = (reactExports.useMemo)(()=>filter ? state.items.filter((item)=>filter(item, state.filterText)) : state.items, [
        state.items,
        state.filterText,
        filter
    ]);
    return {
        ...state,
        items: filteredItems,
        ...$0d86e9c8f07f9a7b$export$79c0c687a5963b0a({
            getKey: getKey
        }, setState),
        getItem (key) {
            return state.items.find((item)=>getKey(item) === key);
        }
    };
}
function $0d86e9c8f07f9a7b$export$79c0c687a5963b0a(opts, dispatch) {
    let { cursor: cursor, getKey: getKey } = opts;
    return {
        setSelectedKeys (selectedKeys) {
            dispatch((state)=>({
                    ...state,
                    selectedKeys: selectedKeys
                }));
        },
        setFilterText (filterText) {
            dispatch((state)=>({
                    ...state,
                    filterText: filterText
                }));
        },
        insert (index, ...values) {
            dispatch((state)=>$0d86e9c8f07f9a7b$var$insert(state, index, ...values));
        },
        insertBefore (key, ...values) {
            dispatch((state)=>{
                let index = state.items.findIndex((item)=>getKey(item) === key);
                if (index === -1) {
                    if (state.items.length === 0) index = 0;
                    else return state;
                }
                return $0d86e9c8f07f9a7b$var$insert(state, index, ...values);
            });
        },
        insertAfter (key, ...values) {
            dispatch((state)=>{
                let index = state.items.findIndex((item)=>getKey(item) === key);
                if (index === -1) {
                    if (state.items.length === 0) index = 0;
                    else return state;
                }
                return $0d86e9c8f07f9a7b$var$insert(state, index + 1, ...values);
            });
        },
        prepend (...values) {
            dispatch((state)=>$0d86e9c8f07f9a7b$var$insert(state, 0, ...values));
        },
        append (...values) {
            dispatch((state)=>$0d86e9c8f07f9a7b$var$insert(state, state.items.length, ...values));
        },
        remove (...keys) {
            dispatch((state)=>{
                let keySet = new Set(keys);
                let items = state.items.filter((item)=>!keySet.has(getKey(item)));
                let selection = 'all';
                if (state.selectedKeys !== 'all') {
                    selection = new Set(state.selectedKeys);
                    for (let key of keys)selection.delete(key);
                }
                if (cursor == null && items.length === 0) selection = new Set();
                return {
                    ...state,
                    items: items,
                    selectedKeys: selection
                };
            });
        },
        removeSelectedItems () {
            dispatch((state)=>{
                if (state.selectedKeys === 'all') return {
                    ...state,
                    items: [],
                    selectedKeys: new Set()
                };
                let selectedKeys = state.selectedKeys;
                let items = state.items.filter((item)=>!selectedKeys.has(getKey(item)));
                return {
                    ...state,
                    items: items,
                    selectedKeys: new Set()
                };
            });
        },
        move (key, toIndex) {
            dispatch((state)=>{
                let index = state.items.findIndex((item)=>getKey(item) === key);
                if (index === -1) return state;
                let copy = state.items.slice();
                let [item] = copy.splice(index, 1);
                copy.splice(toIndex, 0, item);
                return {
                    ...state,
                    items: copy
                };
            });
        },
        moveBefore (key, keys) {
            dispatch((state)=>{
                let toIndex = state.items.findIndex((item)=>getKey(item) === key);
                if (toIndex === -1) return state;
                // Find indices of keys to move. Sort them so that the order in the list is retained.
                let keyArray = Array.isArray(keys) ? keys : [
                    ...keys
                ];
                let indices = keyArray.map((key)=>state.items.findIndex((item)=>getKey(item) === key)).sort((a, b)=>a - b);
                return $0d86e9c8f07f9a7b$var$move(state, indices, toIndex);
            });
        },
        moveAfter (key, keys) {
            dispatch((state)=>{
                let toIndex = state.items.findIndex((item)=>getKey(item) === key);
                if (toIndex === -1) return state;
                let keyArray = Array.isArray(keys) ? keys : [
                    ...keys
                ];
                let indices = keyArray.map((key)=>state.items.findIndex((item)=>getKey(item) === key)).sort((a, b)=>a - b);
                return $0d86e9c8f07f9a7b$var$move(state, indices, toIndex + 1);
            });
        },
        update (key, newValue) {
            dispatch((state)=>{
                let index = state.items.findIndex((item)=>getKey(item) === key);
                if (index === -1) return state;
                return {
                    ...state,
                    items: [
                        ...state.items.slice(0, index),
                        newValue,
                        ...state.items.slice(index + 1)
                    ]
                };
            });
        }
    };
}
function $0d86e9c8f07f9a7b$var$insert(state, index, ...values) {
    return {
        ...state,
        items: [
            ...state.items.slice(0, index),
            ...values,
            ...state.items.slice(index)
        ]
    };
}
function $0d86e9c8f07f9a7b$var$move(state, indices, toIndex) {
    // Shift the target down by the number of items being moved from before the target
    toIndex -= indices.filter((index)=>index < toIndex).length;
    let moves = indices.map((from)=>({
            from: from,
            to: toIndex++
        }));
    // Shift later from indices down if they have a larger index
    for(let i = 0; i < moves.length; i++){
        let a = moves[i].from;
        for(let j = i; j < moves.length; j++){
            let b = moves[j].from;
            if (b > a) moves[j].from--;
        }
    }
    // Interleave the moves so they can be applied one by one rather than all at once
    for(let i = 0; i < moves.length; i++){
        let a = moves[i];
        for(let j = moves.length - 1; j > i; j--){
            let b = moves[j];
            if (b.from < a.to) a.to++;
            else b.from++;
        }
    }
    let copy = state.items.slice();
    for (let move of moves){
        let [item] = copy.splice(move.from, 1);
        copy.splice(move.to, 0, item);
    }
    return {
        ...state,
        items: copy
    };
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 

function $a28c903ee9ad8dc5$export$79fefeb1c2091ac3(props) {
    let overlayTriggerState = ($fc909762b330b746$export$61c6a8c84e605fb6)(props);
    let [focusStrategy, setFocusStrategy] = (reactExports.useState)(null);
    let [expandedKeysStack, setExpandedKeysStack] = (reactExports.useState)([]);
    let closeAll = ()=>{
        setExpandedKeysStack([]);
        overlayTriggerState.close();
    };
    let openSubmenu = (triggerKey, level)=>{
        setExpandedKeysStack((oldStack)=>{
            if (level > oldStack.length) return oldStack;
            return [
                ...oldStack.slice(0, level),
                triggerKey
            ];
        });
    };
    let closeSubmenu = (triggerKey, level)=>{
        setExpandedKeysStack((oldStack)=>{
            let key = oldStack[level];
            if (key === triggerKey) return oldStack.slice(0, level);
            else return oldStack;
        });
    };
    return {
        focusStrategy: focusStrategy,
        ...overlayTriggerState,
        open (focusStrategy = null) {
            setFocusStrategy(focusStrategy);
            overlayTriggerState.open();
        },
        toggle (focusStrategy = null) {
            setFocusStrategy(focusStrategy);
            overlayTriggerState.toggle();
        },
        close () {
            closeAll();
        },
        expandedKeysStack: expandedKeysStack,
        openSubmenu: openSubmenu,
        closeSubmenu: closeSubmenu
    };
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 



function $de67e98908f0c6ee$export$7f629e9dc1ecf37c(props) {
    let { minValue: minValue, maxValue: maxValue, step: step, formatOptions: formatOptions, value: value, defaultValue: defaultValue = NaN, onChange: onChange, locale: locale, isDisabled: isDisabled, isReadOnly: isReadOnly } = props;
    if (value === null) value = NaN;
    if (value !== undefined && !isNaN(value)) {
        if (step !== undefined && !isNaN(step)) value = ($9446cca9a3875146$export$cb6e0bb50bc19463)(value, minValue, maxValue, step);
        else value = ($9446cca9a3875146$export$7d15b64cf5a3a4c4)(value, minValue, maxValue);
    }
    if (!isNaN(defaultValue)) {
        if (step !== undefined && !isNaN(step)) defaultValue = ($9446cca9a3875146$export$cb6e0bb50bc19463)(defaultValue, minValue, maxValue, step);
        else defaultValue = ($9446cca9a3875146$export$7d15b64cf5a3a4c4)(defaultValue, minValue, maxValue);
    }
    let [numberValue, setNumberValue] = ($458b0a5536c1a7cf$export$40bfa8c7b0832715)(value, isNaN(defaultValue) ? NaN : defaultValue, onChange);
    let [inputValue, setInputValue] = (reactExports.useState)(()=>isNaN(numberValue) ? '' : new ($488c6ddbf4ef74c2$export$cc77c4ff7e8673c5)(locale, formatOptions).format(numberValue));
    let numberParser = (reactExports.useMemo)(()=>new ($6c7bd7858deea686$export$cd11ab140839f11d)(locale, formatOptions), [
        locale,
        formatOptions
    ]);
    let numberingSystem = (reactExports.useMemo)(()=>numberParser.getNumberingSystem(inputValue), [
        numberParser,
        inputValue
    ]);
    let formatter = (reactExports.useMemo)(()=>new ($488c6ddbf4ef74c2$export$cc77c4ff7e8673c5)(locale, {
            ...formatOptions,
            numberingSystem: numberingSystem
        }), [
        locale,
        formatOptions,
        numberingSystem
    ]);
    let intlOptions = (reactExports.useMemo)(()=>formatter.resolvedOptions(), [
        formatter
    ]);
    let format = (reactExports.useCallback)((value)=>isNaN(value) || value === null ? '' : formatter.format(value), [
        formatter
    ]);
    let validation = ($e5be200c675c3b3a$export$fc1a364ae1f3ff10)({
        ...props,
        value: numberValue
    });
    let clampStep = step !== undefined && !isNaN(step) ? step : 1;
    if (intlOptions.style === 'percent' && (step === undefined || isNaN(step))) clampStep = 0.01;
    // Update the input value when the number value or format options change. This is done
    // in a useEffect so that the controlled behavior is correct and we only update the
    // textfield after prop changes.
    let [prevValue, setPrevValue] = (reactExports.useState)(numberValue);
    let [prevLocale, setPrevLocale] = (reactExports.useState)(locale);
    let [prevFormatOptions, setPrevFormatOptions] = (reactExports.useState)(formatOptions);
    if (!Object.is(numberValue, prevValue) || locale !== prevLocale || formatOptions !== prevFormatOptions) {
        setInputValue(format(numberValue));
        setPrevValue(numberValue);
        setPrevLocale(locale);
        setPrevFormatOptions(formatOptions);
    }
    let parsedValue = (reactExports.useMemo)(()=>numberParser.parse(inputValue), [
        numberParser,
        inputValue
    ]);
    let commit = ()=>{
        // Set to empty state if input value is empty
        if (!inputValue.length) {
            setNumberValue(NaN);
            setInputValue(value === undefined ? '' : format(numberValue));
            return;
        }
        // if it failed to parse, then reset input to formatted version of current number
        if (isNaN(parsedValue)) {
            setInputValue(format(numberValue));
            return;
        }
        // Clamp to min and max, round to the nearest step, and round to specified number of digits
        let clampedValue;
        if (step === undefined || isNaN(step)) clampedValue = ($9446cca9a3875146$export$7d15b64cf5a3a4c4)(parsedValue, minValue, maxValue);
        else clampedValue = ($9446cca9a3875146$export$cb6e0bb50bc19463)(parsedValue, minValue, maxValue, step);
        clampedValue = numberParser.parse(format(clampedValue));
        setNumberValue(clampedValue);
        // in a controlled state, the numberValue won't change, so we won't go back to our old input without help
        setInputValue(format(value === undefined ? clampedValue : numberValue));
    };
    let safeNextStep = (operation, minMax = 0)=>{
        let prev = parsedValue;
        if (isNaN(prev)) {
            // if the input is empty, start from the min/max value when incrementing/decrementing,
            // or zero if there is no min/max value defined.
            let newValue = isNaN(minMax) ? 0 : minMax;
            return ($9446cca9a3875146$export$cb6e0bb50bc19463)(newValue, minValue, maxValue, clampStep);
        } else {
            // otherwise, first snap the current value to the nearest step. if it moves in the direction
            // we're going, use that value, otherwise add the step and snap that value.
            let newValue = ($9446cca9a3875146$export$cb6e0bb50bc19463)(prev, minValue, maxValue, clampStep);
            if (operation === '+' && newValue > prev || operation === '-' && newValue < prev) return newValue;
            return ($9446cca9a3875146$export$cb6e0bb50bc19463)($de67e98908f0c6ee$var$handleDecimalOperation(operation, prev, clampStep), minValue, maxValue, clampStep);
        }
    };
    let increment = ()=>{
        let newValue = safeNextStep('+', minValue);
        // if we've arrived at the same value that was previously in the state, the
        // input value should be updated to match
        // ex type 4, press increment, highlight the number in the input, type 4 again, press increment
        // you'd be at 5, then incrementing to 5 again, so no re-render would happen and 4 would be left in the input
        if (newValue === numberValue) setInputValue(format(newValue));
        setNumberValue(newValue);
        validation.commitValidation();
    };
    let decrement = ()=>{
        let newValue = safeNextStep('-', maxValue);
        if (newValue === numberValue) setInputValue(format(newValue));
        setNumberValue(newValue);
        validation.commitValidation();
    };
    let incrementToMax = ()=>{
        if (maxValue != null) {
            setNumberValue(($9446cca9a3875146$export$cb6e0bb50bc19463)(maxValue, minValue, maxValue, clampStep));
            validation.commitValidation();
        }
    };
    let decrementToMin = ()=>{
        if (minValue != null) {
            setNumberValue(minValue);
            validation.commitValidation();
        }
    };
    let canIncrement = (reactExports.useMemo)(()=>!isDisabled && !isReadOnly && (isNaN(parsedValue) || maxValue === undefined || isNaN(maxValue) || ($9446cca9a3875146$export$cb6e0bb50bc19463)(parsedValue, minValue, maxValue, clampStep) > parsedValue || $de67e98908f0c6ee$var$handleDecimalOperation('+', parsedValue, clampStep) <= maxValue), [
        isDisabled,
        isReadOnly,
        minValue,
        maxValue,
        clampStep,
        parsedValue
    ]);
    let canDecrement = (reactExports.useMemo)(()=>!isDisabled && !isReadOnly && (isNaN(parsedValue) || minValue === undefined || isNaN(minValue) || ($9446cca9a3875146$export$cb6e0bb50bc19463)(parsedValue, minValue, maxValue, clampStep) < parsedValue || $de67e98908f0c6ee$var$handleDecimalOperation('-', parsedValue, clampStep) >= minValue), [
        isDisabled,
        isReadOnly,
        minValue,
        maxValue,
        clampStep,
        parsedValue
    ]);
    let validate = (value)=>numberParser.isValidPartialNumber(value, minValue, maxValue);
    return {
        ...validation,
        validate: validate,
        increment: increment,
        incrementToMax: incrementToMax,
        decrement: decrement,
        decrementToMin: decrementToMin,
        canIncrement: canIncrement,
        canDecrement: canDecrement,
        minValue: minValue,
        maxValue: maxValue,
        numberValue: parsedValue,
        setNumberValue: setNumberValue,
        setInputValue: setInputValue,
        inputValue: inputValue,
        commit: commit
    };
}
function $de67e98908f0c6ee$var$handleDecimalOperation(operator, value1, value2) {
    let result = operator === '+' ? value1 + value2 : value1 - value2;
    // Check if we have decimals
    if (value1 % 1 !== 0 || value2 % 1 !== 0) {
        const value1Decimal = value1.toString().split('.');
        const value2Decimal = value2.toString().split('.');
        const value1DecimalLength = value1Decimal[1] && value1Decimal[1].length || 0;
        const value2DecimalLength = value2Decimal[1] && value2Decimal[1].length || 0;
        const multiplier = Math.pow(10, Math.max(value1DecimalLength, value2DecimalLength));
        // Transform the decimals to integers based on the precision
        value1 = Math.round(value1 * multiplier);
        value2 = Math.round(value2 * multiplier);
        // Perform the operation on integers values to make sure we don't get a fancy decimal value
        result = operator === '+' ? value1 + value2 : value1 - value2;
        // Transform the integer result back to decimal
        result /= multiplier;
    }
    return result;
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 


let $a54cdc5c1942b639$var$instance = Math.round(Math.random() * 10000000000);
let $a54cdc5c1942b639$var$i = 0;
function $a54cdc5c1942b639$export$bca9d026f8e704eb(props) {
    // Preserved here for backward compatibility. React Aria now generates the name instead of stately.
    let name = (reactExports.useMemo)(()=>props.name || `radio-group-${$a54cdc5c1942b639$var$instance}-${++$a54cdc5c1942b639$var$i}`, [
        props.name
    ]);
    var _props_defaultValue;
    let [selectedValue, setSelected] = ($458b0a5536c1a7cf$export$40bfa8c7b0832715)(props.value, (_props_defaultValue = props.defaultValue) !== null && _props_defaultValue !== void 0 ? _props_defaultValue : null, props.onChange);
    let [lastFocusedValue, setLastFocusedValue] = (reactExports.useState)(null);
    let validation = ($e5be200c675c3b3a$export$fc1a364ae1f3ff10)({
        ...props,
        value: selectedValue
    });
    let setSelectedValue = (value)=>{
        if (!props.isReadOnly && !props.isDisabled) {
            setSelected(value);
            validation.commitValidation();
        }
    };
    let isInvalid = validation.displayValidation.isInvalid;
    return {
        ...validation,
        name: name,
        selectedValue: selectedValue,
        setSelectedValue: setSelectedValue,
        lastFocusedValue: lastFocusedValue,
        setLastFocusedValue: setLastFocusedValue,
        isDisabled: props.isDisabled || false,
        isReadOnly: props.isReadOnly || false,
        isRequired: props.isRequired || false,
        validationState: props.validationState || (isInvalid ? 'invalid' : null),
        isInvalid: isInvalid
    };
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 
function $0b2218c4e3fe7d7e$export$3f8be18b0f41eaf2(props) {
    let [value, setValue] = ($458b0a5536c1a7cf$export$40bfa8c7b0832715)($0b2218c4e3fe7d7e$var$toString(props.value), $0b2218c4e3fe7d7e$var$toString(props.defaultValue) || '', props.onChange);
    return {
        value: value,
        setValue: setValue
    };
}
function $0b2218c4e3fe7d7e$var$toString(val) {
    if (val == null) return;
    return val.toString();
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 



function $2bc3a590c5373a4e$export$5159ec8b34d4ec12(props) {
    let triggerState = ($fc909762b330b746$export$61c6a8c84e605fb6)(props);
    let [focusStrategy, setFocusStrategy] = (reactExports.useState)(null);
    let listState = ($a0d645289fe9b86b$export$e7f05e985daf4b5f)({
        ...props,
        onSelectionChange: (key)=>{
            if (props.onSelectionChange != null) props.onSelectionChange(key);
            triggerState.close();
            validationState.commitValidation();
        }
    });
    let validationState = ($e5be200c675c3b3a$export$fc1a364ae1f3ff10)({
        ...props,
        value: listState.selectedKey
    });
    let [isFocused, setFocused] = (reactExports.useState)(false);
    return {
        ...validationState,
        ...listState,
        ...triggerState,
        focusStrategy: focusStrategy,
        open (focusStrategy = null) {
            // Don't open if the collection is empty.
            if (listState.collection.size !== 0) {
                setFocusStrategy(focusStrategy);
                triggerState.open();
            }
        },
        toggle (focusStrategy = null) {
            if (listState.collection.size !== 0) {
                setFocusStrategy(focusStrategy);
                triggerState.toggle();
            }
        },
        isFocused: isFocused,
        setFocused: setFocused
    };
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 

const $28f99e3e86e6ec45$var$DEFAULT_MIN_VALUE = 0;
const $28f99e3e86e6ec45$var$DEFAULT_MAX_VALUE = 100;
const $28f99e3e86e6ec45$var$DEFAULT_STEP_VALUE = 1;
function $28f99e3e86e6ec45$export$e5fda3247f5d67f9(props) {
    const { isDisabled: isDisabled = false, minValue: minValue = $28f99e3e86e6ec45$var$DEFAULT_MIN_VALUE, maxValue: maxValue = $28f99e3e86e6ec45$var$DEFAULT_MAX_VALUE, numberFormatter: formatter, step: step = $28f99e3e86e6ec45$var$DEFAULT_STEP_VALUE, orientation: orientation = 'horizontal' } = props;
    // Page step should be at least equal to step and always a multiple of the step.
    let pageSize = (reactExports.useMemo)(()=>{
        let calcPageSize = (maxValue - minValue) / 10;
        calcPageSize = ($9446cca9a3875146$export$cb6e0bb50bc19463)(calcPageSize, 0, calcPageSize + step, step);
        return Math.max(calcPageSize, step);
    }, [
        step,
        maxValue,
        minValue
    ]);
    let restrictValues = (reactExports.useCallback)((values)=>values === null || values === void 0 ? void 0 : values.map((val, idx)=>{
            let min = idx === 0 ? minValue : val[idx - 1];
            let max = idx === values.length - 1 ? maxValue : val[idx + 1];
            return ($9446cca9a3875146$export$cb6e0bb50bc19463)(val, min, max, step);
        }), [
        minValue,
        maxValue,
        step
    ]);
    let value = (reactExports.useMemo)(()=>restrictValues($28f99e3e86e6ec45$var$convertValue(props.value)), [
        props.value
    ]);
    let defaultValue = (reactExports.useMemo)(()=>{
        var _convertValue;
        return restrictValues((_convertValue = $28f99e3e86e6ec45$var$convertValue(props.defaultValue)) !== null && _convertValue !== void 0 ? _convertValue : [
            minValue
        ]);
    }, [
        props.defaultValue,
        minValue
    ]);
    let onChange = $28f99e3e86e6ec45$var$createOnChange(props.value, props.defaultValue, props.onChange);
    let onChangeEnd = $28f99e3e86e6ec45$var$createOnChange(props.value, props.defaultValue, props.onChangeEnd);
    const [values, setValuesState] = ($458b0a5536c1a7cf$export$40bfa8c7b0832715)(value, defaultValue, onChange);
    const [isDraggings, setDraggingsState] = (reactExports.useState)(new Array(values.length).fill(false));
    const isEditablesRef = (reactExports.useRef)(new Array(values.length).fill(true));
    const [focusedIndex, setFocusedIndex] = (reactExports.useState)(undefined);
    const valuesRef = (reactExports.useRef)(values);
    const isDraggingsRef = (reactExports.useRef)(isDraggings);
    let setValues = (values)=>{
        valuesRef.current = values;
        setValuesState(values);
    };
    let setDraggings = (draggings)=>{
        isDraggingsRef.current = draggings;
        setDraggingsState(draggings);
    };
    function getValuePercent(value) {
        return (value - minValue) / (maxValue - minValue);
    }
    function getThumbMinValue(index) {
        return index === 0 ? minValue : values[index - 1];
    }
    function getThumbMaxValue(index) {
        return index === values.length - 1 ? maxValue : values[index + 1];
    }
    function isThumbEditable(index) {
        return isEditablesRef.current[index];
    }
    function setThumbEditable(index, editable) {
        isEditablesRef.current[index] = editable;
    }
    function updateValue(index, value) {
        if (isDisabled || !isThumbEditable(index)) return;
        const thisMin = getThumbMinValue(index);
        const thisMax = getThumbMaxValue(index);
        // Round value to multiple of step, clamp value between min and max
        value = ($9446cca9a3875146$export$cb6e0bb50bc19463)(value, thisMin, thisMax, step);
        let newValues = $28f99e3e86e6ec45$var$replaceIndex(valuesRef.current, index, value);
        setValues(newValues);
    }
    function updateDragging(index, dragging) {
        if (isDisabled || !isThumbEditable(index)) return;
        if (dragging) valuesRef.current = values;
        const wasDragging = isDraggingsRef.current[index];
        isDraggingsRef.current = $28f99e3e86e6ec45$var$replaceIndex(isDraggingsRef.current, index, dragging);
        setDraggings(isDraggingsRef.current);
        // Call onChangeEnd if no handles are dragging.
        if (onChangeEnd && wasDragging && !isDraggingsRef.current.some(Boolean)) onChangeEnd(valuesRef.current);
    }
    function getFormattedValue(value) {
        return formatter.format(value);
    }
    function setThumbPercent(index, percent) {
        updateValue(index, getPercentValue(percent));
    }
    function getRoundedValue(value) {
        return Math.round((value - minValue) / step) * step + minValue;
    }
    function getPercentValue(percent) {
        const val = percent * (maxValue - minValue) + minValue;
        return ($9446cca9a3875146$export$7d15b64cf5a3a4c4)(getRoundedValue(val), minValue, maxValue);
    }
    function incrementThumb(index, stepSize = 1) {
        let s = Math.max(stepSize, step);
        updateValue(index, ($9446cca9a3875146$export$cb6e0bb50bc19463)(values[index] + s, minValue, maxValue, step));
    }
    function decrementThumb(index, stepSize = 1) {
        let s = Math.max(stepSize, step);
        updateValue(index, ($9446cca9a3875146$export$cb6e0bb50bc19463)(values[index] - s, minValue, maxValue, step));
    }
    return {
        values: values,
        getThumbValue: (index)=>values[index],
        setThumbValue: updateValue,
        setThumbPercent: setThumbPercent,
        isThumbDragging: (index)=>isDraggings[index],
        setThumbDragging: updateDragging,
        focusedThumb: focusedIndex,
        setFocusedThumb: setFocusedIndex,
        getThumbPercent: (index)=>getValuePercent(values[index]),
        getValuePercent: getValuePercent,
        getThumbValueLabel: (index)=>getFormattedValue(values[index]),
        getFormattedValue: getFormattedValue,
        getThumbMinValue: getThumbMinValue,
        getThumbMaxValue: getThumbMaxValue,
        getPercentValue: getPercentValue,
        isThumbEditable: isThumbEditable,
        setThumbEditable: setThumbEditable,
        incrementThumb: incrementThumb,
        decrementThumb: decrementThumb,
        step: step,
        pageSize: pageSize,
        orientation: orientation,
        isDisabled: isDisabled
    };
}
function $28f99e3e86e6ec45$var$replaceIndex(array, index, value) {
    if (array[index] === value) return array;
    return [
        ...array.slice(0, index),
        value,
        ...array.slice(index + 1)
    ];
}
function $28f99e3e86e6ec45$var$convertValue(value) {
    if (value == null) return undefined;
    return Array.isArray(value) ? value : [
        value
    ];
}
function $28f99e3e86e6ec45$var$createOnChange(value, defaultValue, onChange) {
    return (newValue)=>{
        if (typeof value === 'number' || typeof defaultValue === 'number') onChange === null || onChange === void 0 ? void 0 : onChange(newValue[0]);
        else onChange === null || onChange === void 0 ? void 0 : onChange(newValue);
    };
}

/*
 * Copyright 2022 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ function $6818b1c4fc67028d$export$1994a077b98ee0d5(width) {
    return width != null && (!isNaN(width) || String(width).match(/^(\d+)(?=%$)/) !== null);
}
function $6818b1c4fc67028d$export$9078bad4c3934604(width) {
    if (!width) return 1;
    let match = width.match(/^(.+)(?=fr$)/);
    // if width is the incorrect format, just default it to a 1fr
    if (!match) {
        console.warn(`width: ${width} is not a supported format, width should be a number (ex. 150), percentage (ex. '50%') or fr unit (ex. '2fr')`, 'defaulting to \'1fr\'');
        return 1;
    }
    return parseFloat(match[0]);
}
function $6818b1c4fc67028d$export$7bbad27896f7ae9f(width, tableWidth) {
    if (typeof width === 'string') {
        let match = width.match(/^(\d+)(?=%$)/);
        if (!match) throw new Error('Only percentages or numbers are supported for static column widths');
        return tableWidth * (parseFloat(match[0]) / 100);
    }
    return width;
}
function $6818b1c4fc67028d$export$59185c62a7544aa0(maxWidth, tableWidth) {
    return maxWidth != null ? $6818b1c4fc67028d$export$7bbad27896f7ae9f(maxWidth, tableWidth) : Number.MAX_SAFE_INTEGER;
}
function $6818b1c4fc67028d$export$f556054ce4358701(minWidth, tableWidth) {
    return minWidth != null ? $6818b1c4fc67028d$export$7bbad27896f7ae9f(minWidth, tableWidth) : 0;
}
function $6818b1c4fc67028d$export$55d50dc687385491(availableWidth, columns, changedColumns, getDefaultWidth, getDefaultMinWidth) {
    let hasNonFrozenItems = false;
    let flexItems = columns.map((column, index)=>{
        var _column_width, _ref, _ref1;
        let width = changedColumns.get(column.key) != null ? changedColumns.get(column.key) : (_ref1 = (_ref = (_column_width = column.width) !== null && _column_width !== void 0 ? _column_width : column.defaultWidth) !== null && _ref !== void 0 ? _ref : getDefaultWidth === null || getDefaultWidth === void 0 ? void 0 : getDefaultWidth(index)) !== null && _ref1 !== void 0 ? _ref1 : '1fr';
        let frozen = false;
        let baseSize = 0;
        let flex = 0;
        let targetMainSize = null;
        if ($6818b1c4fc67028d$export$1994a077b98ee0d5(width)) {
            baseSize = $6818b1c4fc67028d$export$7bbad27896f7ae9f(width, availableWidth);
            frozen = true;
        } else {
            flex = $6818b1c4fc67028d$export$9078bad4c3934604(width);
            if (flex <= 0) frozen = true;
        }
        var _column_minWidth, _ref2;
        let min = $6818b1c4fc67028d$export$f556054ce4358701((_ref2 = (_column_minWidth = column.minWidth) !== null && _column_minWidth !== void 0 ? _column_minWidth : getDefaultMinWidth === null || getDefaultMinWidth === void 0 ? void 0 : getDefaultMinWidth(index)) !== null && _ref2 !== void 0 ? _ref2 : 0, availableWidth);
        let max = $6818b1c4fc67028d$export$59185c62a7544aa0(column.maxWidth, availableWidth);
        let hypotheticalMainSize = Math.max(min, Math.min(baseSize, max));
        // 9.7.1
        // We don't make use of flex basis, it's always 0, so we are always in 'grow' mode.
        // 9.7.2
        if (frozen) targetMainSize = hypotheticalMainSize;
        else if (baseSize > hypotheticalMainSize) {
            frozen = true;
            targetMainSize = hypotheticalMainSize;
        }
        // 9.7.3
        if (!frozen) hasNonFrozenItems = true;
        return {
            frozen: frozen,
            baseSize: baseSize,
            hypotheticalMainSize: hypotheticalMainSize,
            min: min,
            max: max,
            flex: flex,
            targetMainSize: targetMainSize,
            violation: 0
        };
    });
    // 9.7.4
    // 9.7.4.a
    while(hasNonFrozenItems){
        // 9.7.4.b
        /**
     * Calculate the remaining free space as for initial free space,
     * above (9.7.3). If the sum of the unfrozen flex items’ flex factors is
     * less than one, multiply the initial free space by this sum (of flex factors).
     * If the magnitude of this value is less than the magnitude of
     * the remaining free space, use this as the remaining free space.
     */ let usedWidth = 0;
        let flexFactors = 0;
        flexItems.forEach((item)=>{
            if (item.frozen) usedWidth += item.targetMainSize;
            else {
                usedWidth += item.baseSize;
                flexFactors += item.flex;
            }
        });
        let remainingFreeSpace = availableWidth - usedWidth;
        // we only support integer FR's, and because of hasNonFrozenItems, we know that flexFactors > 0
        // so no need to check for flexFactors < 1
        // 9.7.4.c
        /**
     * If the remaining free space is zero
     * - Do nothing.
     * Else // remember, we're always in grow mode
     * - Find the ratio of the item’s flex grow factor to the
     * sum of the flex grow factors of all unfrozen items on
     * the line. Set the item’s target main size to its flex
     * base size plus a fraction of the remaining free space
     * proportional to the ratio.
     */ if (remainingFreeSpace > 0) flexItems.forEach((item)=>{
            if (!item.frozen) {
                let ratio = item.flex / flexFactors;
                item.targetMainSize = item.baseSize + ratio * remainingFreeSpace;
            }
        });
        // 9.7.4.d
        /**
     * Fix min/max violations. Clamp each non-frozen item’s
     * target main size by its used min and max main sizes
     * and floor its content-box size at zero. If the item’s
     * target main size was made smaller by this, it’s a max
     * violation. If the item’s target main size was made
     * larger by this, it’s a min violation.
     */ let totalViolation = 0;
        flexItems.forEach((item)=>{
            item.violation = 0;
            if (!item.frozen) {
                let { min: min, max: max, targetMainSize: targetMainSize } = item;
                item.targetMainSize = Math.max(min, Math.min(targetMainSize, max));
                item.violation = item.targetMainSize - targetMainSize;
                totalViolation += item.violation;
            }
        });
        // 9.7.4.e
        /**
     * Freeze over-flexed items. The total violation is the
     * sum of the adjustments from the previous step
     * ∑(clamped size - unclamped size). If the total violation is:
     * Zero
     * - Freeze all items.
     *
     * Positive
     * - Freeze all the items with min violations.
     *
     * Negative
     * - Freeze all the items with max violations.
     */ hasNonFrozenItems = false;
        flexItems.forEach((item)=>{
            if (totalViolation === 0 || Math.sign(totalViolation) === Math.sign(item.violation)) item.frozen = true;
            else if (!item.frozen) hasNonFrozenItems = true;
        });
    }
    return $6818b1c4fc67028d$var$cascadeRounding(flexItems);
}
function $6818b1c4fc67028d$var$cascadeRounding(flexItems) {
    /*
  Given an array of floats that sum to an integer, this rounds the floats
  and returns an array of integers with the same sum.
  */ let fpTotal = 0;
    let intTotal = 0;
    let roundedArray = [];
    flexItems.forEach(function(item) {
        let float = item.targetMainSize;
        let integer = Math.round(float + fpTotal) - intTotal;
        fpTotal += float;
        intTotal += integer;
        roundedArray.push(integer);
    });
    return roundedArray;
}

/*
 * Copyright 2022 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 
class $a9e7ae544a4e41dd$export$7ff77a162970b30e {
    /** Takes an array of columns and splits it into 2 maps of columns with controlled and columns with uncontrolled widths. */ splitColumnsIntoControlledAndUncontrolled(columns) {
        return columns.reduce((acc, col)=>{
            if (col.props.width != null) acc[0].set(col.key, col);
            else acc[1].set(col.key, col);
            return acc;
        }, [
            new Map(),
            new Map()
        ]);
    }
    /** Takes uncontrolled and controlled widths and joins them into a single Map. */ recombineColumns(columns, uncontrolledWidths, uncontrolledColumns, controlledColumns) {
        return new Map(columns.map((col)=>{
            if (uncontrolledColumns.has(col.key)) return [
                col.key,
                uncontrolledWidths.get(col.key)
            ];
            else return [
                col.key,
                controlledColumns.get(col.key).props.width
            ];
        }));
    }
    /** Used to make an initial Map of the uncontrolled widths based on default widths. */ getInitialUncontrolledWidths(uncontrolledColumns) {
        return new Map(Array.from(uncontrolledColumns).map(([key, col])=>{
            var _this_getDefaultWidth, _this;
            var _col_props_defaultWidth, _ref;
            return [
                key,
                (_ref = (_col_props_defaultWidth = col.props.defaultWidth) !== null && _col_props_defaultWidth !== void 0 ? _col_props_defaultWidth : (_this_getDefaultWidth = (_this = this).getDefaultWidth) === null || _this_getDefaultWidth === void 0 ? void 0 : _this_getDefaultWidth.call(_this, col)) !== null && _ref !== void 0 ? _ref : '1fr'
            ];
        }));
    }
    getColumnWidth(key) {
        var _this_columnWidths_get;
        return (_this_columnWidths_get = this.columnWidths.get(key)) !== null && _this_columnWidths_get !== void 0 ? _this_columnWidths_get : 0;
    }
    getColumnMinWidth(key) {
        var _this_columnMinWidths_get;
        return (_this_columnMinWidths_get = this.columnMinWidths.get(key)) !== null && _this_columnMinWidths_get !== void 0 ? _this_columnMinWidths_get : 0;
    }
    getColumnMaxWidth(key) {
        var _this_columnMaxWidths_get;
        return (_this_columnMaxWidths_get = this.columnMaxWidths.get(key)) !== null && _this_columnMaxWidths_get !== void 0 ? _this_columnMaxWidths_get : 0;
    }
    resizeColumnWidth(collection, uncontrolledWidths, col, width) {
        let prevColumnWidths = this.columnWidths;
        let freeze = true;
        let newWidths = new Map();
        width = Math.max(this.getColumnMinWidth(col), Math.min(this.getColumnMaxWidth(col), Math.floor(width)));
        collection.columns.forEach((column)=>{
            var _column_props_width;
            if (column.key === col) {
                newWidths.set(column.key, width);
                freeze = false;
            } else if (freeze) // freeze columns to the left to their previous pixel value
            newWidths.set(column.key, prevColumnWidths.get(column.key));
            else newWidths.set(column.key, (_column_props_width = column.props.width) !== null && _column_props_width !== void 0 ? _column_props_width : uncontrolledWidths.get(column.key));
        });
        return newWidths;
    }
    buildColumnWidths(tableWidth, collection, widths) {
        this.columnWidths = new Map();
        this.columnMinWidths = new Map();
        this.columnMaxWidths = new Map();
        // initial layout or table/window resizing
        let columnWidths = ($6818b1c4fc67028d$export$55d50dc687385491)(tableWidth, collection.columns.map((col)=>({
                ...col.props,
                key: col.key
            })), widths, (i)=>this.getDefaultWidth(collection.columns[i]), (i)=>this.getDefaultMinWidth(collection.columns[i]));
        // columns going in will be the same order as the columns coming out
        columnWidths.forEach((width, index)=>{
            let key = collection.columns[index].key;
            let column = collection.columns[index];
            this.columnWidths.set(key, width);
            var _column_props_minWidth;
            this.columnMinWidths.set(key, ($6818b1c4fc67028d$export$f556054ce4358701)((_column_props_minWidth = column.props.minWidth) !== null && _column_props_minWidth !== void 0 ? _column_props_minWidth : this.getDefaultMinWidth(column), tableWidth));
            this.columnMaxWidths.set(key, ($6818b1c4fc67028d$export$59185c62a7544aa0)(column.props.maxWidth, tableWidth));
        });
        return this.columnWidths;
    }
    constructor(options){
        this.columnWidths = new Map();
        this.columnMinWidths = new Map();
        this.columnMaxWidths = new Map();
        var _options_getDefaultWidth;
        this.getDefaultWidth = (_options_getDefaultWidth = options === null || options === void 0 ? void 0 : options.getDefaultWidth) !== null && _options_getDefaultWidth !== void 0 ? _options_getDefaultWidth : ()=>'1fr';
        var _options_getDefaultMinWidth;
        this.getDefaultMinWidth = (_options_getDefaultMinWidth = options === null || options === void 0 ? void 0 : options.getDefaultMinWidth) !== null && _options_getDefaultMinWidth !== void 0 ? _options_getDefaultMinWidth : ()=>75;
    }
}

/*
 * Copyright 2022 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 

function $292bc4e09cd0eb62$export$cb895dcf85db1319(props, state) {
    let { getDefaultWidth: getDefaultWidth, getDefaultMinWidth: getDefaultMinWidth, tableWidth: tableWidth = 0 } = props;
    let [resizingColumn, setResizingColumn] = (reactExports.useState)(null);
    let columnLayout = (reactExports.useMemo)(()=>new ($a9e7ae544a4e41dd$export$7ff77a162970b30e)({
            getDefaultWidth: getDefaultWidth,
            getDefaultMinWidth: getDefaultMinWidth
        }), [
        getDefaultWidth,
        getDefaultMinWidth
    ]);
    let [controlledColumns, uncontrolledColumns] = (reactExports.useMemo)(()=>columnLayout.splitColumnsIntoControlledAndUncontrolled(state.collection.columns), [
        state.collection.columns,
        columnLayout
    ]);
    // uncontrolled column widths
    let [uncontrolledWidths, setUncontrolledWidths] = (reactExports.useState)(()=>columnLayout.getInitialUncontrolledWidths(uncontrolledColumns));
    // Update uncontrolled widths if the columns changed.
    let [lastColumns, setLastColumns] = (reactExports.useState)(state.collection.columns);
    if (state.collection.columns !== lastColumns) {
        if (state.collection.columns.length !== lastColumns.length || state.collection.columns.some((c, i)=>c.key !== lastColumns[i].key)) {
            let newUncontrolledWidths = columnLayout.getInitialUncontrolledWidths(uncontrolledColumns);
            setUncontrolledWidths(newUncontrolledWidths);
        }
        setLastColumns(state.collection.columns);
    }
    // combine columns back into one map that maintains same order as the columns
    let colWidths = (reactExports.useMemo)(()=>columnLayout.recombineColumns(state.collection.columns, uncontrolledWidths, uncontrolledColumns, controlledColumns), [
        state.collection.columns,
        uncontrolledWidths,
        uncontrolledColumns,
        controlledColumns,
        columnLayout
    ]);
    let startResize = (reactExports.useCallback)((key)=>{
        setResizingColumn(key);
    }, [
        setResizingColumn
    ]);
    let updateResizedColumns = (reactExports.useCallback)((key, width)=>{
        let newSizes = columnLayout.resizeColumnWidth(state.collection, uncontrolledWidths, key, width);
        let map = new Map(Array.from(uncontrolledColumns).map(([key])=>[
                key,
                newSizes.get(key)
            ]));
        map.set(key, width);
        setUncontrolledWidths(map);
        return newSizes;
    }, [
        uncontrolledColumns,
        setUncontrolledWidths,
        columnLayout,
        state.collection,
        uncontrolledWidths
    ]);
    let endResize = (reactExports.useCallback)(()=>{
        setResizingColumn(null);
    }, [
        setResizingColumn
    ]);
    let columnWidths = (reactExports.useMemo)(()=>columnLayout.buildColumnWidths(tableWidth, state.collection, colWidths), [
        tableWidth,
        state.collection,
        colWidths,
        columnLayout
    ]);
    return (reactExports.useMemo)(()=>({
            resizingColumn: resizingColumn,
            updateResizedColumns: updateResizedColumns,
            startResize: startResize,
            endResize: endResize,
            getColumnWidth: (key)=>columnLayout.getColumnWidth(key),
            getColumnMinWidth: (key)=>columnLayout.getColumnMinWidth(key),
            getColumnMaxWidth: (key)=>columnLayout.getColumnMaxWidth(key),
            tableState: state,
            columnWidths: columnWidths
        }), [
        columnLayout,
        columnWidths,
        resizingColumn,
        updateResizedColumns,
        startResize,
        endResize,
        state
    ]);
}

function $62967d126f3aa823$export$4007ac09ff9c68ed(props) {
    let { collection: collection, focusMode: focusMode } = props;
    // eslint-disable-next-line react-hooks/rules-of-hooks
    let selectionState = props.UNSAFE_selectionState || ($7af3f5b51489e0b5$export$253fe78d46329472)(props);
    let disabledKeys = (reactExports.useMemo)(()=>props.disabledKeys ? new Set(props.disabledKeys) : new Set(), [
        props.disabledKeys
    ]);
    let setFocusedKey = selectionState.setFocusedKey;
    selectionState.setFocusedKey = (key, child)=>{
        // If focusMode is cell and an item is focused, focus a child cell instead.
        if (focusMode === 'cell' && key != null) {
            let item = collection.getItem(key);
            if ((item === null || item === void 0 ? void 0 : item.type) === 'item') {
                var _getLastItem, _getFirstItem;
                let children = ($c5a24bc478652b5f$export$1005530eda016c13)(item, collection);
                if (child === 'last') key = (_getLastItem = ($c5a24bc478652b5f$export$7475b2c64539e4cf)(children)) === null || _getLastItem === void 0 ? void 0 : _getLastItem.key;
                else key = (_getFirstItem = ($c5a24bc478652b5f$export$fbdeaa6a76694f71)(children)) === null || _getFirstItem === void 0 ? void 0 : _getFirstItem.key;
            }
        }
        setFocusedKey(key, child);
    };
    let selectionManager = (reactExports.useMemo)(()=>new ($d496c0a20b6e58ec$export$6c8a5aaad13c9852)(collection, selectionState), [
        collection,
        selectionState
    ]);
    // Reset focused key if that item is deleted from the collection.
    const cachedCollection = (reactExports.useRef)(null);
    (reactExports.useEffect)(()=>{
        if (selectionState.focusedKey != null && !collection.getItem(selectionState.focusedKey)) {
            const node = cachedCollection.current.getItem(selectionState.focusedKey);
            const parentNode = node.parentKey != null && (node.type === 'cell' || node.type === 'rowheader' || node.type === 'column') ? cachedCollection.current.getItem(node.parentKey) : node;
            const cachedRows = cachedCollection.current.rows;
            const rows = collection.rows;
            const diff = cachedRows.length - rows.length;
            let index = Math.min(diff > 1 ? Math.max(parentNode.index - diff + 1, 0) : parentNode.index, rows.length - 1);
            let newRow;
            while(index >= 0){
                if (!selectionManager.isDisabled(rows[index].key) && rows[index].type !== 'headerrow') {
                    newRow = rows[index];
                    break;
                }
                // Find next, not disabled row.
                if (index < rows.length - 1) index++;
                else {
                    if (index > parentNode.index) index = parentNode.index;
                    index--;
                }
            }
            if (newRow) {
                const childNodes = newRow.hasChildNodes ? [
                    ...($c5a24bc478652b5f$export$1005530eda016c13)(newRow, collection)
                ] : [];
                const keyToFocus = newRow.hasChildNodes && parentNode !== node && node.index < childNodes.length ? childNodes[node.index].key : newRow.key;
                selectionState.setFocusedKey(keyToFocus);
            } else selectionState.setFocusedKey(null);
        }
        cachedCollection.current = collection;
    }, [
        collection,
        selectionManager,
        selectionState,
        selectionState.focusedKey
    ]);
    return {
        collection: collection,
        disabledKeys: disabledKeys,
        isKeyboardNavigationDisabled: false,
        selectionManager: selectionManager
    };
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ class $16805b1b18093c5f$export$de3fdf6493c353d {
    *[Symbol.iterator]() {
        yield* [
            ...this.rows
        ];
    }
    get size() {
        return [
            ...this.rows
        ].length;
    }
    getKeys() {
        return this.keyMap.keys();
    }
    getKeyBefore(key) {
        let node = this.keyMap.get(key);
        return node ? node.prevKey : null;
    }
    getKeyAfter(key) {
        let node = this.keyMap.get(key);
        return node ? node.nextKey : null;
    }
    getFirstKey() {
        var _;
        return (_ = [
            ...this.rows
        ][0]) === null || _ === void 0 ? void 0 : _.key;
    }
    getLastKey() {
        var _rows_;
        let rows = [
            ...this.rows
        ];
        return (_rows_ = rows[rows.length - 1]) === null || _rows_ === void 0 ? void 0 : _rows_.key;
    }
    getItem(key) {
        return this.keyMap.get(key);
    }
    at(idx) {
        const keys = [
            ...this.getKeys()
        ];
        return this.getItem(keys[idx]);
    }
    getChildren(key) {
        let node = this.keyMap.get(key);
        return (node === null || node === void 0 ? void 0 : node.childNodes) || [];
    }
    constructor(opts){
        this.keyMap = new Map();
        this.keyMap = new Map();
        this.columnCount = opts === null || opts === void 0 ? void 0 : opts.columnCount;
        this.rows = [];
        let visit = (node)=>{
            // If the node is the same object as the previous node for the same key,
            // we can skip this node and its children. We always visit columns though,
            // because we depend on order to build the columns array.
            let prevNode = this.keyMap.get(node.key);
            if (opts.visitNode) node = opts.visitNode(node);
            this.keyMap.set(node.key, node);
            let childKeys = new Set();
            let last;
            for (let child of node.childNodes){
                if (child.type === 'cell' && child.parentKey == null) // if child is a cell parent key isn't already established by the collection, match child node to parent row
                child.parentKey = node.key;
                childKeys.add(child.key);
                if (last) {
                    last.nextKey = child.key;
                    child.prevKey = last.key;
                } else child.prevKey = null;
                visit(child);
                last = child;
            }
            if (last) last.nextKey = null;
            // Remove deleted nodes and their children from the key map
            if (prevNode) {
                for (let child of prevNode.childNodes)if (!childKeys.has(child.key)) remove(child);
            }
        };
        let remove = (node)=>{
            this.keyMap.delete(node.key);
            for (let child of node.childNodes)if (this.keyMap.get(child.key) === child) remove(child);
        };
        let last;
        opts.items.forEach((node, i)=>{
            let rowNode = {
                level: 0,
                key: 'row-' + i,
                type: 'row',
                value: undefined,
                hasChildNodes: true,
                childNodes: [
                    ...node.childNodes
                ],
                rendered: undefined,
                textValue: undefined,
                ...node
            };
            if (last) {
                last.nextKey = rowNode.key;
                rowNode.prevKey = last.key;
            } else rowNode.prevKey = null;
            this.rows.push(rowNode);
            visit(rowNode);
            last = rowNode;
        });
        if (last) last.nextKey = null;
    }
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 

const $788781baa30117fa$var$ROW_HEADER_COLUMN_KEY = 'row-header-column-' + Math.random().toString(36).slice(2);
let $788781baa30117fa$var$ROW_HEADER_COLUMN_KEY_DRAG = 'row-header-column-' + Math.random().toString(36).slice(2);
while($788781baa30117fa$var$ROW_HEADER_COLUMN_KEY === $788781baa30117fa$var$ROW_HEADER_COLUMN_KEY_DRAG)$788781baa30117fa$var$ROW_HEADER_COLUMN_KEY_DRAG = 'row-header-column-' + Math.random().toString(36).slice(2);
function $788781baa30117fa$export$7c127db850d4e81e(keyMap, columnNodes) {
    if (columnNodes.length === 0) return [];
    let columns = [];
    let seen = new Map();
    for (let column of columnNodes){
        let parentKey = column.parentKey;
        let col = [
            column
        ];
        while(parentKey){
            let parent = keyMap.get(parentKey);
            if (!parent) break;
            // If we've already seen this parent, than it is shared
            // with a previous column. If the current column is taller
            // than the previous column, than we need to shift the parent
            // in the previous column so it's level with the current column.
            if (seen.has(parent)) {
                parent.colspan++;
                let { column: column, index: index } = seen.get(parent);
                if (index > col.length) break;
                for(let i = index; i < col.length; i++)column.splice(i, 0, null);
                // Adjust shifted indices
                for(let i = col.length; i < column.length; i++)// eslint-disable-next-line max-depth
                if (column[i] && seen.has(column[i])) seen.get(column[i]).index = i;
            } else {
                parent.colspan = 1;
                col.push(parent);
                seen.set(parent, {
                    column: col,
                    index: col.length - 1
                });
            }
            parentKey = parent.parentKey;
        }
        columns.push(col);
        column.index = columns.length - 1;
    }
    let maxLength = Math.max(...columns.map((c)=>c.length));
    let headerRows = Array(maxLength).fill(0).map(()=>[]);
    // Convert columns into rows.
    let colIndex = 0;
    for (let column of columns){
        let i = maxLength - 1;
        for (let item of column){
            if (item) {
                // Fill the space up until the current column with a placeholder
                let row = headerRows[i];
                let rowLength = row.reduce((p, c)=>p + c.colspan, 0);
                if (rowLength < colIndex) {
                    let placeholder = {
                        type: 'placeholder',
                        key: 'placeholder-' + item.key,
                        colspan: colIndex - rowLength,
                        index: rowLength,
                        value: null,
                        rendered: null,
                        level: i,
                        hasChildNodes: false,
                        childNodes: [],
                        textValue: null
                    };
                    // eslint-disable-next-line max-depth
                    if (row.length > 0) {
                        row[row.length - 1].nextKey = placeholder.key;
                        placeholder.prevKey = row[row.length - 1].key;
                    }
                    row.push(placeholder);
                }
                if (row.length > 0) {
                    row[row.length - 1].nextKey = item.key;
                    item.prevKey = row[row.length - 1].key;
                }
                item.level = i;
                item.colIndex = colIndex;
                row.push(item);
            }
            i--;
        }
        colIndex++;
    }
    // Add placeholders at the end of each row that is shorter than the maximum
    let i = 0;
    for (let row of headerRows){
        let rowLength = row.reduce((p, c)=>p + c.colspan, 0);
        if (rowLength < columnNodes.length) {
            let placeholder = {
                type: 'placeholder',
                key: 'placeholder-' + row[row.length - 1].key,
                colspan: columnNodes.length - rowLength,
                index: rowLength,
                value: null,
                rendered: null,
                level: i,
                hasChildNodes: false,
                childNodes: [],
                textValue: null,
                prevKey: row[row.length - 1].key
            };
            row.push(placeholder);
        }
        i++;
    }
    return headerRows.map((childNodes, index)=>{
        let row = {
            type: 'headerrow',
            key: 'headerrow-' + index,
            index: index,
            value: null,
            rendered: null,
            level: 0,
            hasChildNodes: true,
            childNodes: childNodes,
            textValue: null
        };
        return row;
    });
}
class $788781baa30117fa$export$596e1b2e2cf93690 extends ($16805b1b18093c5f$export$de3fdf6493c353d) {
    *[Symbol.iterator]() {
        yield* this.body.childNodes;
    }
    get size() {
        return this._size;
    }
    getKeys() {
        return this.keyMap.keys();
    }
    getKeyBefore(key) {
        let node = this.keyMap.get(key);
        return node ? node.prevKey : null;
    }
    getKeyAfter(key) {
        let node = this.keyMap.get(key);
        return node ? node.nextKey : null;
    }
    getFirstKey() {
        var _getFirstItem;
        return (_getFirstItem = ($c5a24bc478652b5f$export$fbdeaa6a76694f71)(this.body.childNodes)) === null || _getFirstItem === void 0 ? void 0 : _getFirstItem.key;
    }
    getLastKey() {
        var _getLastItem;
        return (_getLastItem = ($c5a24bc478652b5f$export$7475b2c64539e4cf)(this.body.childNodes)) === null || _getLastItem === void 0 ? void 0 : _getLastItem.key;
    }
    getItem(key) {
        return this.keyMap.get(key);
    }
    at(idx) {
        const keys = [
            ...this.getKeys()
        ];
        return this.getItem(keys[idx]);
    }
    getChildren(key) {
        if (key === this.body.key) return this.body.childNodes;
        return super.getChildren(key);
    }
    getTextValue(key) {
        let row = this.getItem(key);
        if (!row) return '';
        // If the row has a textValue, use that.
        if (row.textValue) return row.textValue;
        // Otherwise combine the text of each of the row header columns.
        let rowHeaderColumnKeys = this.rowHeaderColumnKeys;
        if (rowHeaderColumnKeys) {
            let text = [];
            for (let cell of row.childNodes){
                let column = this.columns[cell.index];
                if (rowHeaderColumnKeys.has(column.key) && cell.textValue) text.push(cell.textValue);
                if (text.length === rowHeaderColumnKeys.size) break;
            }
            return text.join(' ');
        }
        return '';
    }
    constructor(nodes, prev, opts){
        let rowHeaderColumnKeys = new Set();
        let body;
        let columns = [];
        // Add cell for selection checkboxes if needed.
        if (opts === null || opts === void 0 ? void 0 : opts.showSelectionCheckboxes) {
            let rowHeaderColumn = {
                type: 'column',
                key: $788781baa30117fa$var$ROW_HEADER_COLUMN_KEY,
                value: null,
                textValue: '',
                level: 0,
                index: (opts === null || opts === void 0 ? void 0 : opts.showDragButtons) ? 1 : 0,
                hasChildNodes: false,
                rendered: null,
                childNodes: [],
                props: {
                    isSelectionCell: true
                }
            };
            columns.unshift(rowHeaderColumn);
        }
        // Add cell for drag buttons if needed.
        if (opts === null || opts === void 0 ? void 0 : opts.showDragButtons) {
            let rowHeaderColumn = {
                type: 'column',
                key: $788781baa30117fa$var$ROW_HEADER_COLUMN_KEY_DRAG,
                value: null,
                textValue: '',
                level: 0,
                index: 0,
                hasChildNodes: false,
                rendered: null,
                childNodes: [],
                props: {
                    isDragButtonCell: true
                }
            };
            columns.unshift(rowHeaderColumn);
        }
        let rows = [];
        let columnKeyMap = new Map();
        let visit = (node)=>{
            switch(node.type){
                case 'body':
                    body = node;
                    break;
                case 'column':
                    columnKeyMap.set(node.key, node);
                    if (!node.hasChildNodes) {
                        columns.push(node);
                        if (node.props.isRowHeader) rowHeaderColumnKeys.add(node.key);
                    }
                    break;
                case 'item':
                    rows.push(node);
                    return; // do not go into childNodes
            }
            for (let child of node.childNodes)visit(child);
        };
        for (let node of nodes)visit(node);
        let headerRows = $788781baa30117fa$export$7c127db850d4e81e(columnKeyMap, columns);
        headerRows.forEach((row, i)=>rows.splice(i, 0, row));
        super({
            columnCount: columns.length,
            items: rows,
            visitNode: (node)=>{
                node.column = columns[node.index];
                return node;
            }
        });
        this._size = 0;
        this.columns = columns;
        this.rowHeaderColumnKeys = rowHeaderColumnKeys;
        this.body = body;
        this.headerRows = headerRows;
        this._size = [
            ...body.childNodes
        ].length;
        // Default row header column to the first one.
        if (this.rowHeaderColumnKeys.size === 0) this.rowHeaderColumnKeys.add(this.columns.find((column)=>{
            var _column_props, _column_props1;
            return !((_column_props = column.props) === null || _column_props === void 0 ? void 0 : _column_props.isDragButtonCell) && !((_column_props1 = column.props) === null || _column_props1 === void 0 ? void 0 : _column_props1.isSelectionCell);
        }).key);
    }
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 



const $4a0dd036d492cee4$var$OPPOSITE_SORT_DIRECTION = {
    ascending: 'descending',
    descending: 'ascending'
};
function $4a0dd036d492cee4$export$907bcc6c48325fd6(props) {
    let [isKeyboardNavigationDisabled, setKeyboardNavigationDisabled] = (reactExports.useState)(false);
    let { selectionMode: selectionMode = 'none', showSelectionCheckboxes: showSelectionCheckboxes, showDragButtons: showDragButtons } = props;
    let context = (reactExports.useMemo)(()=>({
            showSelectionCheckboxes: showSelectionCheckboxes && selectionMode !== 'none',
            showDragButtons: showDragButtons,
            selectionMode: selectionMode,
            columns: []
        }), [
        props.children,
        showSelectionCheckboxes,
        selectionMode,
        showDragButtons
    ]);
    let collection = ($7613b1592d41b092$export$6cd28814d92fa9c9)(props, (reactExports.useCallback)((nodes)=>new ($788781baa30117fa$export$596e1b2e2cf93690)(nodes, null, context), [
        context
    ]), context);
    let { disabledKeys: disabledKeys, selectionManager: selectionManager } = ($62967d126f3aa823$export$4007ac09ff9c68ed)({
        ...props,
        collection: collection,
        disabledBehavior: props.disabledBehavior || 'selection'
    });
    return {
        collection: collection,
        disabledKeys: disabledKeys,
        selectionManager: selectionManager,
        showSelectionCheckboxes: props.showSelectionCheckboxes || false,
        sortDescriptor: props.sortDescriptor,
        isKeyboardNavigationDisabled: collection.size === 0 || isKeyboardNavigationDisabled,
        setKeyboardNavigationDisabled: setKeyboardNavigationDisabled,
        sort (columnKey, direction) {
            var _props_sortDescriptor;
            props.onSortChange({
                column: columnKey,
                direction: direction !== null && direction !== void 0 ? direction : ((_props_sortDescriptor = props.sortDescriptor) === null || _props_sortDescriptor === void 0 ? void 0 : _props_sortDescriptor.column) === columnKey ? $4a0dd036d492cee4$var$OPPOSITE_SORT_DIRECTION[props.sortDescriptor.direction] : 'ascending'
            });
        }
    };
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 

function $76f919a04c5a7d14$export$4ba071daf4e486(props) {
    var _props_defaultSelectedKey;
    let state = ($a0d645289fe9b86b$export$e7f05e985daf4b5f)({
        ...props,
        suppressTextValueWarning: true,
        defaultSelectedKey: (_props_defaultSelectedKey = props.defaultSelectedKey) !== null && _props_defaultSelectedKey !== void 0 ? _props_defaultSelectedKey : $76f919a04c5a7d14$var$findDefaultSelectedKey(props.collection, props.disabledKeys ? new Set(props.disabledKeys) : new Set())
    });
    let { selectionManager: selectionManager, collection: collection, selectedKey: currentSelectedKey } = state;
    let lastSelectedKey = (reactExports.useRef)(currentSelectedKey);
    (reactExports.useEffect)(()=>{
        // Ensure a tab is always selected (in case no selected key was specified or if selected item was deleted from collection)
        let selectedKey = currentSelectedKey;
        if (selectionManager.isEmpty || !collection.getItem(selectedKey)) {
            selectedKey = $76f919a04c5a7d14$var$findDefaultSelectedKey(collection, state.disabledKeys);
            if (selectedKey != null) // directly set selection because replace/toggle selection won't consider disabled keys
            selectionManager.setSelectedKeys([
                selectedKey
            ]);
        }
        // If the tablist doesn't have focus and the selected key changes or if there isn't a focused key yet, change focused key to the selected key if it exists.
        if (selectedKey != null && selectionManager.focusedKey == null || !selectionManager.isFocused && selectedKey !== lastSelectedKey.current) selectionManager.setFocusedKey(selectedKey);
        lastSelectedKey.current = selectedKey;
    });
    return {
        ...state,
        isDisabled: props.isDisabled || false
    };
}
function $76f919a04c5a7d14$var$findDefaultSelectedKey(collection, disabledKeys) {
    let selectedKey = null;
    if (collection) {
        var _collection_getItem_props, _collection_getItem, _collection_getItem_props1, _collection_getItem1;
        selectedKey = collection.getFirstKey();
        // loop over tabs until we find one that isn't disabled and select that
        while((disabledKeys.has(selectedKey) || ((_collection_getItem = collection.getItem(selectedKey)) === null || _collection_getItem === void 0 ? void 0 : (_collection_getItem_props = _collection_getItem.props) === null || _collection_getItem_props === void 0 ? void 0 : _collection_getItem_props.isDisabled)) && selectedKey !== collection.getLastKey())selectedKey = collection.getKeyAfter(selectedKey);
        // if this check is true, then every item is disabled, it makes more sense to default to the first key than the last
        if ((disabledKeys.has(selectedKey) || ((_collection_getItem1 = collection.getItem(selectedKey)) === null || _collection_getItem1 === void 0 ? void 0 : (_collection_getItem_props1 = _collection_getItem1.props) === null || _collection_getItem_props1 === void 0 ? void 0 : _collection_getItem_props1.isDisabled)) && selectedKey === collection.getLastKey()) selectedKey = collection.getFirstKey();
    }
    return selectedKey;
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 

const $8796f90736e175cb$var$TOOLTIP_DELAY = 1500; // this seems to be a 1.5 second delay, check with design
const $8796f90736e175cb$var$TOOLTIP_COOLDOWN = 500;
let $8796f90736e175cb$var$tooltips = {};
let $8796f90736e175cb$var$tooltipId = 0;
let $8796f90736e175cb$var$globalWarmedUp = false;
let $8796f90736e175cb$var$globalWarmUpTimeout = null;
let $8796f90736e175cb$var$globalCooldownTimeout = null;
function $8796f90736e175cb$export$4d40659c25ecb50b(props = {}) {
    let { delay: delay = $8796f90736e175cb$var$TOOLTIP_DELAY, closeDelay: closeDelay = $8796f90736e175cb$var$TOOLTIP_COOLDOWN } = props;
    let { isOpen: isOpen, open: open, close: close } = ($fc909762b330b746$export$61c6a8c84e605fb6)(props);
    let id = (reactExports.useMemo)(()=>`${++$8796f90736e175cb$var$tooltipId}`, []);
    let closeTimeout = (reactExports.useRef)(undefined);
    let closeCallback = (reactExports.useRef)(close);
    let ensureTooltipEntry = ()=>{
        $8796f90736e175cb$var$tooltips[id] = hideTooltip;
    };
    let closeOpenTooltips = ()=>{
        for(let hideTooltipId in $8796f90736e175cb$var$tooltips)if (hideTooltipId !== id) {
            $8796f90736e175cb$var$tooltips[hideTooltipId](true);
            delete $8796f90736e175cb$var$tooltips[hideTooltipId];
        }
    };
    let showTooltip = ()=>{
        clearTimeout(closeTimeout.current);
        closeTimeout.current = null;
        closeOpenTooltips();
        ensureTooltipEntry();
        $8796f90736e175cb$var$globalWarmedUp = true;
        open();
        if ($8796f90736e175cb$var$globalWarmUpTimeout) {
            clearTimeout($8796f90736e175cb$var$globalWarmUpTimeout);
            $8796f90736e175cb$var$globalWarmUpTimeout = null;
        }
        if ($8796f90736e175cb$var$globalCooldownTimeout) {
            clearTimeout($8796f90736e175cb$var$globalCooldownTimeout);
            $8796f90736e175cb$var$globalCooldownTimeout = null;
        }
    };
    let hideTooltip = (immediate)=>{
        if (immediate || closeDelay <= 0) {
            clearTimeout(closeTimeout.current);
            closeTimeout.current = null;
            closeCallback.current();
        } else if (!closeTimeout.current) closeTimeout.current = setTimeout(()=>{
            closeTimeout.current = null;
            closeCallback.current();
        }, closeDelay);
        if ($8796f90736e175cb$var$globalWarmUpTimeout) {
            clearTimeout($8796f90736e175cb$var$globalWarmUpTimeout);
            $8796f90736e175cb$var$globalWarmUpTimeout = null;
        }
        if ($8796f90736e175cb$var$globalWarmedUp) {
            if ($8796f90736e175cb$var$globalCooldownTimeout) clearTimeout($8796f90736e175cb$var$globalCooldownTimeout);
            $8796f90736e175cb$var$globalCooldownTimeout = setTimeout(()=>{
                delete $8796f90736e175cb$var$tooltips[id];
                $8796f90736e175cb$var$globalCooldownTimeout = null;
                $8796f90736e175cb$var$globalWarmedUp = false;
            }, Math.max($8796f90736e175cb$var$TOOLTIP_COOLDOWN, closeDelay));
        }
    };
    let warmupTooltip = ()=>{
        closeOpenTooltips();
        ensureTooltipEntry();
        if (!isOpen && !$8796f90736e175cb$var$globalWarmUpTimeout && !$8796f90736e175cb$var$globalWarmedUp) $8796f90736e175cb$var$globalWarmUpTimeout = setTimeout(()=>{
            $8796f90736e175cb$var$globalWarmUpTimeout = null;
            $8796f90736e175cb$var$globalWarmedUp = true;
            showTooltip();
        }, delay);
        else if (!isOpen) showTooltip();
    };
    (reactExports.useEffect)(()=>{
        closeCallback.current = close;
    }, [
        close
    ]);
    // eslint-disable-next-line arrow-body-style
    (reactExports.useEffect)(()=>{
        return ()=>{
            clearTimeout(closeTimeout.current);
            let tooltip = $8796f90736e175cb$var$tooltips[id];
            if (tooltip) delete $8796f90736e175cb$var$tooltips[id];
        };
    }, [
        id
    ]);
    return {
        isOpen: isOpen,
        open: (immediate)=>{
            if (!immediate && delay > 0 && !closeTimeout.current) warmupTooltip();
            else showTooltip();
        },
        close: hideTooltip
    };
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ class $05ca4cd7c4a5a999$export$863faf230ee2118a {
    *[Symbol.iterator]() {
        yield* this.iterable;
    }
    get size() {
        return this.keyMap.size;
    }
    getKeys() {
        return this.keyMap.keys();
    }
    getKeyBefore(key) {
        let node = this.keyMap.get(key);
        return node ? node.prevKey : null;
    }
    getKeyAfter(key) {
        let node = this.keyMap.get(key);
        return node ? node.nextKey : null;
    }
    getFirstKey() {
        return this.firstKey;
    }
    getLastKey() {
        return this.lastKey;
    }
    getItem(key) {
        return this.keyMap.get(key);
    }
    at(idx) {
        const keys = [
            ...this.getKeys()
        ];
        return this.getItem(keys[idx]);
    }
    constructor(nodes, { expandedKeys: expandedKeys } = {}){
        this.keyMap = new Map();
        this.iterable = nodes;
        expandedKeys = expandedKeys || new Set();
        let visit = (node)=>{
            this.keyMap.set(node.key, node);
            if (node.childNodes && (node.type === 'section' || expandedKeys.has(node.key))) for (let child of node.childNodes)visit(child);
        };
        for (let node of nodes)visit(node);
        let last;
        let index = 0;
        for (let [key, node] of this.keyMap){
            if (last) {
                last.nextKey = key;
                node.prevKey = last.key;
            } else {
                this.firstKey = key;
                node.prevKey = undefined;
            }
            if (node.type === 'item') node.index = index++;
            last = node;
            // Set nextKey as undefined since this might be the last node
            // If it isn't the last node, last.nextKey will properly set at start of new loop
            last.nextKey = undefined;
        }
        this.lastKey = last === null || last === void 0 ? void 0 : last.key;
    }
}

/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 




function $875d6693e12af071$export$728d6ba534403756(props) {
    let { onExpandedChange: onExpandedChange } = props;
    let [expandedKeys, setExpandedKeys] = ($458b0a5536c1a7cf$export$40bfa8c7b0832715)(props.expandedKeys ? new Set(props.expandedKeys) : undefined, props.defaultExpandedKeys ? new Set(props.defaultExpandedKeys) : new Set(), onExpandedChange);
    let selectionState = ($7af3f5b51489e0b5$export$253fe78d46329472)(props);
    let disabledKeys = (reactExports.useMemo)(()=>props.disabledKeys ? new Set(props.disabledKeys) : new Set(), [
        props.disabledKeys
    ]);
    let tree = ($7613b1592d41b092$export$6cd28814d92fa9c9)(props, (reactExports.useCallback)((nodes)=>new ($05ca4cd7c4a5a999$export$863faf230ee2118a)(nodes, {
            expandedKeys: expandedKeys
        }), [
        expandedKeys
    ]), null);
    // Reset focused key if that item is deleted from the collection.
    (reactExports.useEffect)(()=>{
        if (selectionState.focusedKey != null && !tree.getItem(selectionState.focusedKey)) selectionState.setFocusedKey(null);
    // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [
        tree,
        selectionState.focusedKey
    ]);
    let onToggle = (key)=>{
        setExpandedKeys($875d6693e12af071$var$toggleKey(expandedKeys, key));
    };
    return {
        collection: tree,
        expandedKeys: expandedKeys,
        disabledKeys: disabledKeys,
        toggleKey: onToggle,
        setExpandedKeys: setExpandedKeys,
        selectionManager: new ($d496c0a20b6e58ec$export$6c8a5aaad13c9852)(tree, selectionState)
    };
}
function $875d6693e12af071$var$toggleKey(set, key) {
    let res = new Set(set);
    if (res.has(key)) res.delete(key);
    else res.add(key);
    return res;
}

/*
 * Copyright 2022 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 








const $dfd62f934fc76fed$export$3b805cea1f178355 = /*#__PURE__*/ (reactExports.createContext)({});
const $dfd62f934fc76fed$export$233dd9682e1ad64b = /*#__PURE__*/ (reactExports.createContext)({});
const $dfd62f934fc76fed$export$9e31dcedda1dadc7 = /*#__PURE__*/ (reactExports.createContext)(null);
const $dfd62f934fc76fed$export$5e0fc348c00f87a0 = /*#__PURE__*/ (reactExports.createContext)(null);
function $dfd62f934fc76fed$var$Calendar(props, ref) {
    [props, ref] = ($64fa3d84918910a7$export$29f1550f4b0d4415)(props, ref, $dfd62f934fc76fed$export$3b805cea1f178355);
    let { locale: locale } = ($18f2051aff69b9bf$export$43bb16f9c6d9e3f7)();
    let state = ($131cf43a05231e1e$export$6d095e787d2b5e1f)({
        ...props,
        locale: locale,
        createCalendar: $64244302c3013299$export$dd0bbc9b26defe37
    });
    let { calendarProps: calendarProps, prevButtonProps: prevButtonProps, nextButtonProps: nextButtonProps, errorMessageProps: errorMessageProps, title: title } = ($9942cad8a072a530$export$3ee915f8151bd4f1)(props, state);
    let renderProps = ($64fa3d84918910a7$export$4d86445c2cf5e3)({
        ...props,
        values: {
            state: state,
            isDisabled: props.isDisabled || false,
            isInvalid: state.isValueInvalid
        },
        defaultClassName: 'react-aria-Calendar'
    });
    return /*#__PURE__*/ (React).createElement("div", {
        ...renderProps,
        ...calendarProps,
        ref: ref,
        slot: props.slot || undefined,
        "data-disabled": props.isDisabled || undefined,
        "data-invalid": state.isValueInvalid || undefined
    }, /*#__PURE__*/ (React).createElement(($64fa3d84918910a7$export$2881499e37b75b9a), {
        values: [
            [
                ($d2b4bc8c273e7be6$export$24d547caef80ccd1),
                {
                    slots: {
                        previous: prevButtonProps,
                        next: nextButtonProps
                    }
                }
            ],
            [
                ($4e85f108e88277b8$export$d688439359537581),
                {
                    'aria-hidden': true,
                    level: 2,
                    children: title
                }
            ],
            [
                $dfd62f934fc76fed$export$9e31dcedda1dadc7,
                state
            ],
            [
                ($514c0188e459b4c0$export$9afb8bc826b033ea),
                {
                    slots: {
                        errorMessage: errorMessageProps
                    }
                }
            ]
        ]
    }, /*#__PURE__*/ (React).createElement(($5c3e21d68f1c4674$export$439d29a4e110a164), null, /*#__PURE__*/ (React).createElement("h2", null, calendarProps['aria-label'])), renderProps.children, /*#__PURE__*/ (React).createElement(($5c3e21d68f1c4674$export$439d29a4e110a164), null, /*#__PURE__*/ (React).createElement("button", {
        "aria-label": nextButtonProps['aria-label'],
        disabled: nextButtonProps.isDisabled,
        onClick: ()=>state.focusNextPage(),
        tabIndex: -1
    }))));
}
/**
 * A calendar displays one or more date grids and allows users to select a single date.
 */ const $dfd62f934fc76fed$export$e1aef45b828286de = /*#__PURE__*/ (reactExports.forwardRef)($dfd62f934fc76fed$var$Calendar);
function $dfd62f934fc76fed$var$RangeCalendar(props, ref) {
    [props, ref] = ($64fa3d84918910a7$export$29f1550f4b0d4415)(props, ref, $dfd62f934fc76fed$export$233dd9682e1ad64b);
    let { locale: locale } = ($18f2051aff69b9bf$export$43bb16f9c6d9e3f7)();
    let state = ($9a36b6ba2fb1a7c5$export$9a987164d97ecc90)({
        ...props,
        locale: locale,
        createCalendar: $64244302c3013299$export$dd0bbc9b26defe37
    });
    let { calendarProps: calendarProps, prevButtonProps: prevButtonProps, nextButtonProps: nextButtonProps, errorMessageProps: errorMessageProps, title: title } = ($46a4342aab3d8076$export$87e0539f600c24e5)(props, state, ref);
    let renderProps = ($64fa3d84918910a7$export$4d86445c2cf5e3)({
        ...props,
        values: {
            state: state,
            isDisabled: props.isDisabled || false,
            isInvalid: state.isValueInvalid
        },
        defaultClassName: 'react-aria-RangeCalendar'
    });
    return /*#__PURE__*/ (React).createElement("div", {
        ...renderProps,
        ...calendarProps,
        ref: ref,
        slot: props.slot || undefined,
        "data-disabled": props.isDisabled || undefined,
        "data-invalid": state.isValueInvalid || undefined
    }, /*#__PURE__*/ (React).createElement(($64fa3d84918910a7$export$2881499e37b75b9a), {
        values: [
            [
                ($d2b4bc8c273e7be6$export$24d547caef80ccd1),
                {
                    slots: {
                        previous: prevButtonProps,
                        next: nextButtonProps
                    }
                }
            ],
            [
                ($4e85f108e88277b8$export$d688439359537581),
                {
                    'aria-hidden': true,
                    level: 2,
                    children: title
                }
            ],
            [
                $dfd62f934fc76fed$export$5e0fc348c00f87a0,
                state
            ],
            [
                ($514c0188e459b4c0$export$9afb8bc826b033ea),
                {
                    slots: {
                        errorMessage: errorMessageProps
                    }
                }
            ]
        ]
    }, /*#__PURE__*/ (React).createElement(($5c3e21d68f1c4674$export$439d29a4e110a164), null, /*#__PURE__*/ (React).createElement("h2", null, calendarProps['aria-label'])), renderProps.children, /*#__PURE__*/ (React).createElement(($5c3e21d68f1c4674$export$439d29a4e110a164), null, /*#__PURE__*/ (React).createElement("button", {
        "aria-label": nextButtonProps['aria-label'],
        disabled: nextButtonProps.isDisabled,
        onClick: ()=>state.focusNextPage(),
        tabIndex: -1
    }))));
}
/**
 * A range calendar displays one or more date grids and allows users to select a contiguous range of dates.
 */ const $dfd62f934fc76fed$export$a4f5c8b89d277a8d = /*#__PURE__*/ (reactExports.forwardRef)($dfd62f934fc76fed$var$RangeCalendar);
const $dfd62f934fc76fed$var$InternalCalendarGridContext = /*#__PURE__*/ (reactExports.createContext)(null);
function $dfd62f934fc76fed$var$CalendarGrid(props, ref) {
    let calendarState = (reactExports.useContext)($dfd62f934fc76fed$export$9e31dcedda1dadc7);
    let rangeCalendarState = (reactExports.useContext)($dfd62f934fc76fed$export$5e0fc348c00f87a0);
    let state = calendarState !== null && calendarState !== void 0 ? calendarState : rangeCalendarState;
    let startDate = state.visibleRange.start;
    if (props.offset) startDate = startDate.add(props.offset);
    let { gridProps: gridProps, headerProps: headerProps, weekDays: weekDays } = ($e3031d1f8c9d64eb$export$cb95147730a423f5)({
        startDate: startDate,
        endDate: ($14e0f24ef4ac5c92$export$a2258d9c4118825c)(startDate),
        weekdayStyle: props.weekdayStyle
    }, state);
    var _props_className;
    return /*#__PURE__*/ (React).createElement($dfd62f934fc76fed$var$InternalCalendarGridContext.Provider, {
        value: {
            headerProps: headerProps,
            weekDays: weekDays,
            startDate: startDate
        }
    }, /*#__PURE__*/ (React).createElement("table", {
        ...($65484d02dcb7eb3e$export$457c3d6518dd4c6f)(props),
        ...gridProps,
        ref: ref,
        style: props.style,
        className: (_props_className = props.className) !== null && _props_className !== void 0 ? _props_className : 'react-aria-CalendarGrid'
    }, typeof props.children !== 'function' ? props.children : /*#__PURE__*/ (React).createElement((React).Fragment, null, /*#__PURE__*/ (React).createElement($dfd62f934fc76fed$export$22e2d15eaa4d2377, null, (day)=>/*#__PURE__*/ (React).createElement($dfd62f934fc76fed$export$ad2135cac3a11b3d, null, day)), /*#__PURE__*/ (React).createElement($dfd62f934fc76fed$export$e11f8ba65d857bff, null, props.children))));
}
/**
 * A calendar grid displays a single grid of days within a calendar or range calendar which
 * can be keyboard navigated and selected by the user.
 */ const $dfd62f934fc76fed$export$5bd780d491cfc46c = /*#__PURE__*/ (reactExports.forwardRef)($dfd62f934fc76fed$var$CalendarGrid);
function $dfd62f934fc76fed$var$CalendarGridHeader(props, ref) {
    let { children: children, style: style, className: className } = props;
    let { headerProps: headerProps, weekDays: weekDays } = (reactExports.useContext)($dfd62f934fc76fed$var$InternalCalendarGridContext);
    return /*#__PURE__*/ (React).createElement("thead", {
        ...($65484d02dcb7eb3e$export$457c3d6518dd4c6f)(props),
        ...headerProps,
        ref: ref,
        style: style,
        className: className || 'react-aria-CalendarGridHeader'
    }, /*#__PURE__*/ (React).createElement("tr", null, weekDays.map((day, key)=>/*#__PURE__*/ (React).cloneElement(children(day), {
            key: key
        }))));
}
/**
 * A calendar grid header displays a row of week day names at the top of a month.
 */ const $dfd62f934fc76fed$export$22e2d15eaa4d2377 = /*#__PURE__*/ (reactExports.forwardRef)($dfd62f934fc76fed$var$CalendarGridHeader);
function $dfd62f934fc76fed$var$CalendarHeaderCell(props, ref) {
    let { children: children, style: style, className: className } = props;
    return /*#__PURE__*/ (React).createElement("th", {
        ...($65484d02dcb7eb3e$export$457c3d6518dd4c6f)(props),
        ref: ref,
        style: style,
        className: className || 'react-aria-CalendarHeaderCell'
    }, children);
}
/**
 * A calendar header cell displays a week day name at the top of a column within a calendar.
 */ const $dfd62f934fc76fed$export$ad2135cac3a11b3d = /*#__PURE__*/ (reactExports.forwardRef)($dfd62f934fc76fed$var$CalendarHeaderCell);
function $dfd62f934fc76fed$var$CalendarGridBody(props, ref) {
    let { children: children, style: style, className: className } = props;
    let calendarState = (reactExports.useContext)($dfd62f934fc76fed$export$9e31dcedda1dadc7);
    let rangeCalendarState = (reactExports.useContext)($dfd62f934fc76fed$export$5e0fc348c00f87a0);
    let state = calendarState !== null && calendarState !== void 0 ? calendarState : rangeCalendarState;
    let { startDate: startDate } = (reactExports.useContext)($dfd62f934fc76fed$var$InternalCalendarGridContext);
    let { locale: locale } = ($18f2051aff69b9bf$export$43bb16f9c6d9e3f7)();
    let weeksInMonth = ($14e0f24ef4ac5c92$export$ccc1b2479e7dd654)(startDate, locale);
    return /*#__PURE__*/ (React).createElement("tbody", {
        ...($65484d02dcb7eb3e$export$457c3d6518dd4c6f)(props),
        ref: ref,
        style: style,
        className: className || 'react-aria-CalendarGridBody'
    }, [
        ...new Array(weeksInMonth).keys()
    ].map((weekIndex)=>/*#__PURE__*/ (React).createElement("tr", {
            key: weekIndex
        }, state.getDatesInWeek(weekIndex, startDate).map((date, i)=>date ? /*#__PURE__*/ (React).cloneElement(children(date), {
                key: i
            }) : /*#__PURE__*/ (React).createElement("td", {
                key: i
            })))));
}
/**
 * A calendar grid body displays a grid of calendar cells within a month.
 */ const $dfd62f934fc76fed$export$e11f8ba65d857bff = /*#__PURE__*/ (reactExports.forwardRef)($dfd62f934fc76fed$var$CalendarGridBody);
function $dfd62f934fc76fed$var$CalendarCell({ date: date, ...otherProps }, ref) {
    let calendarState = (reactExports.useContext)($dfd62f934fc76fed$export$9e31dcedda1dadc7);
    let rangeCalendarState = (reactExports.useContext)($dfd62f934fc76fed$export$5e0fc348c00f87a0);
    let state = calendarState !== null && calendarState !== void 0 ? calendarState : rangeCalendarState;
    var _useContext;
    let { startDate: currentMonth } = (_useContext = (reactExports.useContext)($dfd62f934fc76fed$var$InternalCalendarGridContext)) !== null && _useContext !== void 0 ? _useContext : {
        startDate: state.visibleRange.start
    };
    let buttonRef = (reactExports.useRef)(null);
    let { cellProps: cellProps, buttonProps: buttonProps, ...states } = ($36a0ac60f04457c5$export$136073280381448e)({
        date: date
    }, state, buttonRef);
    let { hoverProps: hoverProps, isHovered: isHovered } = ($6179b936705e76d3$export$ae780daf29e6d456)({
        ...otherProps,
        isDisabled: states.isDisabled
    });
    let { focusProps: focusProps, isFocusVisible: isFocusVisible } = ($f7dceffc5ad7768b$export$4e328f61c538687f)();
    isFocusVisible && (isFocusVisible = states.isFocused);
    let isOutsideMonth = !($14e0f24ef4ac5c92$export$a18c89cbd24170ff)(currentMonth, date);
    let isSelectionStart = false;
    let isSelectionEnd = false;
    if ('highlightedRange' in state && state.highlightedRange) {
        isSelectionStart = ($14e0f24ef4ac5c92$export$ea39ec197993aef0)(date, state.highlightedRange.start);
        isSelectionEnd = ($14e0f24ef4ac5c92$export$ea39ec197993aef0)(date, state.highlightedRange.end);
    }
    let renderProps = ($64fa3d84918910a7$export$4d86445c2cf5e3)({
        ...otherProps,
        defaultChildren: states.formattedDate,
        defaultClassName: 'react-aria-CalendarCell',
        values: {
            date: date,
            isHovered: isHovered,
            isOutsideMonth: isOutsideMonth,
            isFocusVisible: isFocusVisible,
            isSelectionStart: isSelectionStart,
            isSelectionEnd: isSelectionEnd,
            ...states
        }
    });
    let dataAttrs = {
        'data-focused': states.isFocused || undefined,
        'data-hovered': isHovered || undefined,
        'data-pressed': states.isPressed || undefined,
        'data-unavailable': states.isUnavailable || undefined,
        'data-disabled': states.isDisabled || undefined,
        'data-focus-visible': isFocusVisible || undefined,
        'data-outside-visible-range': states.isOutsideVisibleRange || undefined,
        'data-outside-month': isOutsideMonth || undefined,
        'data-selected': states.isSelected || undefined,
        'data-selection-start': isSelectionStart || undefined,
        'data-selection-end': isSelectionEnd || undefined,
        'data-invalid': states.isInvalid || undefined
    };
    return /*#__PURE__*/ (React).createElement("td", {
        ...cellProps,
        ref: ref
    }, /*#__PURE__*/ (React).createElement("div", {
        ...($3ef42575df84b30b$export$9d1611c77c2fe928)(($65484d02dcb7eb3e$export$457c3d6518dd4c6f)(otherProps), buttonProps, focusProps, hoverProps, dataAttrs, renderProps),
        ref: buttonRef
    }));
}
/**
 * A calendar cell displays a date cell within a calendar grid which can be selected by the user.
 */ const $dfd62f934fc76fed$export$5d847498420df57b = /*#__PURE__*/ (reactExports.forwardRef)($dfd62f934fc76fed$var$CalendarCell);

/*
 * Copyright 2023 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 


const $ee014567cb39d3f0$export$ff05c3ac10437e03 = /*#__PURE__*/ (reactExports.createContext)(null);
function $ee014567cb39d3f0$var$FieldError(props, ref) {
    let validation = (reactExports.useContext)($ee014567cb39d3f0$export$ff05c3ac10437e03);
    if (!(validation === null || validation === void 0 ? void 0 : validation.isInvalid)) return null;
    return /*#__PURE__*/ (React).createElement($ee014567cb39d3f0$var$FieldErrorInner, {
        ...props,
        ref: ref
    });
}
/**
 * A FieldError displays validation errors for a form field.
 */ const $ee014567cb39d3f0$export$f551688fc98f2e09 = /*#__PURE__*/ (reactExports.forwardRef)($ee014567cb39d3f0$var$FieldError);
const $ee014567cb39d3f0$var$FieldErrorInner = /*#__PURE__*/ (reactExports.forwardRef)((props, ref)=>{
    let validation = (reactExports.useContext)($ee014567cb39d3f0$export$ff05c3ac10437e03);
    let renderProps = ($64fa3d84918910a7$export$4d86445c2cf5e3)({
        ...props,
        defaultClassName: 'react-aria-FieldError',
        defaultChildren: validation.validationErrors.length === 0 ? undefined : validation.validationErrors.join(' '),
        values: validation
    });
    if (renderProps.children == null) return null;
    return /*#__PURE__*/ (React).createElement(($514c0188e459b4c0$export$5f1af8db9871e1d6), {
        slot: "errorMessage",
        ...renderProps,
        ref: ref
    });
});

/*
 * Copyright 2023 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the 'License');
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 


const $d3e0e05bdfcf66bd$export$c24727297075ec6a = /*#__PURE__*/ (reactExports.createContext)(null);
function $d3e0e05bdfcf66bd$var$Form(props, ref) {
    [props, ref] = ($64fa3d84918910a7$export$29f1550f4b0d4415)(props, ref, $d3e0e05bdfcf66bd$export$c24727297075ec6a);
    let { validationErrors: validationErrors, validationBehavior: validationBehavior = 'native', children: children, className: className, ...domProps } = props;
    return /*#__PURE__*/ (React).createElement("form", {
        noValidate: validationBehavior !== 'native',
        ...domProps,
        ref: ref,
        className: className || 'react-aria-Form'
    }, /*#__PURE__*/ (React).createElement($d3e0e05bdfcf66bd$export$c24727297075ec6a.Provider, {
        value: {
            ...props,
            validationBehavior: validationBehavior
        }
    }, /*#__PURE__*/ (React).createElement(($e5be200c675c3b3a$export$571b5131b7e65c11).Provider, {
        value: validationErrors !== null && validationErrors !== void 0 ? validationErrors : {}
    }, children)));
}
/**
 * A form is a group of inputs that allows users to submit data to a server,
 * with support for providing field validation errors.
 */ const $d3e0e05bdfcf66bd$export$a7fed597f4b8afd8 = /*#__PURE__*/ (reactExports.forwardRef)($d3e0e05bdfcf66bd$var$Form);

/*
 * Copyright 2022 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 


const $01b77f81d0f07f68$export$75b6ee27786ba447 = /*#__PURE__*/ (reactExports.createContext)({});
function $01b77f81d0f07f68$var$Label(props, ref) {
    [props, ref] = ($64fa3d84918910a7$export$29f1550f4b0d4415)(props, ref, $01b77f81d0f07f68$export$75b6ee27786ba447);
    let { elementType: ElementType = 'label', ...labelProps } = props;
    // @ts-ignore
    return /*#__PURE__*/ (React).createElement(ElementType, {
        className: "react-aria-Label",
        ...labelProps,
        ref: ref
    });
}
const $01b77f81d0f07f68$export$b04be29aa201d4f5 = /*#__PURE__*/ ($f39a9eba43920ace$export$86427a43e3e48ebb)($01b77f81d0f07f68$var$Label);

/*
 * Copyright 2022 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 









const $bc237834342dbd75$export$baf37c4be89255b8 = /*#__PURE__*/ (reactExports.createContext)(null);
const $bc237834342dbd75$export$139c5b8563afc1fc = /*#__PURE__*/ (reactExports.createContext)(null);
function $bc237834342dbd75$var$CheckboxGroup(props, ref) {
    [props, ref] = ($64fa3d84918910a7$export$29f1550f4b0d4415)(props, ref, $bc237834342dbd75$export$baf37c4be89255b8);
    let { validationBehavior: formValidationBehavior } = ($64fa3d84918910a7$export$fabf2dc03a41866e)(($d3e0e05bdfcf66bd$export$c24727297075ec6a)) || {};
    var _props_validationBehavior, _ref;
    let validationBehavior = (_ref = (_props_validationBehavior = props.validationBehavior) !== null && _props_validationBehavior !== void 0 ? _props_validationBehavior : formValidationBehavior) !== null && _ref !== void 0 ? _ref : 'native';
    let state = ($587d3ad58be6d31f$export$daff6da51032a415)({
        ...props,
        validationBehavior: validationBehavior
    });
    let [labelRef, label] = ($64fa3d84918910a7$export$9d4c57ee4c6ffdd8)();
    let { groupProps: groupProps, labelProps: labelProps, descriptionProps: descriptionProps, errorMessageProps: errorMessageProps, ...validation } = ($1e9fce0cfacc738b$export$49ff6f28c54f1cbe)({
        ...props,
        label: label,
        validationBehavior: validationBehavior
    }, state);
    let renderProps = ($64fa3d84918910a7$export$4d86445c2cf5e3)({
        ...props,
        values: {
            isDisabled: state.isDisabled,
            isReadOnly: state.isReadOnly,
            isRequired: props.isRequired || false,
            isInvalid: state.isInvalid,
            state: state
        },
        defaultClassName: 'react-aria-CheckboxGroup'
    });
    return /*#__PURE__*/ (React).createElement("div", {
        ...groupProps,
        ...renderProps,
        ref: ref,
        slot: props.slot || undefined,
        "data-readonly": state.isReadOnly || undefined,
        "data-required": props.isRequired || undefined,
        "data-invalid": state.isInvalid || undefined,
        "data-disabled": props.isDisabled || undefined
    }, /*#__PURE__*/ (React).createElement(($64fa3d84918910a7$export$2881499e37b75b9a), {
        values: [
            [
                $bc237834342dbd75$export$139c5b8563afc1fc,
                state
            ],
            [
                ($01b77f81d0f07f68$export$75b6ee27786ba447),
                {
                    ...labelProps,
                    ref: labelRef,
                    elementType: 'span'
                }
            ],
            [
                ($514c0188e459b4c0$export$9afb8bc826b033ea),
                {
                    slots: {
                        description: descriptionProps,
                        errorMessage: errorMessageProps
                    }
                }
            ],
            [
                ($ee014567cb39d3f0$export$ff05c3ac10437e03),
                validation
            ]
        ]
    }, renderProps.children));
}
function $bc237834342dbd75$var$Checkbox(props, ref) {
    let { inputRef: userProvidedInputRef = null, ...otherProps } = props;
    [props, ref] = ($64fa3d84918910a7$export$29f1550f4b0d4415)(otherProps, ref, ($4e85f108e88277b8$export$b085522c77523c51));
    let { validationBehavior: formValidationBehavior } = ($64fa3d84918910a7$export$fabf2dc03a41866e)(($d3e0e05bdfcf66bd$export$c24727297075ec6a)) || {};
    var _props_validationBehavior, _ref;
    let validationBehavior = (_ref = (_props_validationBehavior = props.validationBehavior) !== null && _props_validationBehavior !== void 0 ? _props_validationBehavior : formValidationBehavior) !== null && _ref !== void 0 ? _ref : 'native';
    let groupState = (reactExports.useContext)($bc237834342dbd75$export$139c5b8563afc1fc);
    let inputRef = ($df56164dff5785e2$export$4338b53315abf666)(($5dc95899b306f630$export$c9058316764c140e)(userProvidedInputRef, props.inputRef !== undefined ? props.inputRef : null));
    let { labelProps: labelProps, inputProps: inputProps, isSelected: isSelected, isDisabled: isDisabled, isReadOnly: isReadOnly, isPressed: isPressed, isInvalid: isInvalid } = groupState ? ($fba3e38d5ca8983f$export$353b32fc6898d37d)({
        ...props,
        // Value is optional for standalone checkboxes, but required for CheckboxGroup items;
        // it's passed explicitly here to avoid typescript error (requires ignore).
        // @ts-ignore
        value: props.value,
        // ReactNode type doesn't allow function children.
        children: typeof props.children === 'function' ? true : props.children
    }, groupState, inputRef) : ($406796ff087fe49b$export$e375f10ce42261c5)({
        ...props,
        children: typeof props.children === 'function' ? true : props.children,
        validationBehavior: validationBehavior
    }, ($3017fa7ffdddec74$export$8042c6c013fd5226)(props), inputRef);
    let { isFocused: isFocused, isFocusVisible: isFocusVisible, focusProps: focusProps } = ($f7dceffc5ad7768b$export$4e328f61c538687f)();
    let isInteractionDisabled = isDisabled || isReadOnly;
    let { hoverProps: hoverProps, isHovered: isHovered } = ($6179b936705e76d3$export$ae780daf29e6d456)({
        ...props,
        isDisabled: isInteractionDisabled
    });
    let renderProps = ($64fa3d84918910a7$export$4d86445c2cf5e3)({
        // TODO: should data attrs go on the label or on the <input>? useCheckbox passes them to the input...
        ...props,
        defaultClassName: 'react-aria-Checkbox',
        values: {
            isSelected: isSelected,
            isIndeterminate: props.isIndeterminate || false,
            isPressed: isPressed,
            isHovered: isHovered,
            isFocused: isFocused,
            isFocusVisible: isFocusVisible,
            isDisabled: isDisabled,
            isReadOnly: isReadOnly,
            isInvalid: isInvalid,
            isRequired: props.isRequired || false
        }
    });
    let DOMProps = ($65484d02dcb7eb3e$export$457c3d6518dd4c6f)(props);
    delete DOMProps.id;
    return /*#__PURE__*/ (React).createElement("label", {
        ...($3ef42575df84b30b$export$9d1611c77c2fe928)(DOMProps, labelProps, hoverProps, renderProps),
        ref: ref,
        slot: props.slot || undefined,
        "data-selected": isSelected || undefined,
        "data-indeterminate": props.isIndeterminate || undefined,
        "data-pressed": isPressed || undefined,
        "data-hovered": isHovered || undefined,
        "data-focused": isFocused || undefined,
        "data-focus-visible": isFocusVisible || undefined,
        "data-disabled": isDisabled || undefined,
        "data-readonly": isReadOnly || undefined,
        "data-invalid": isInvalid || undefined,
        "data-required": props.isRequired || undefined
    }, /*#__PURE__*/ (React).createElement(($5c3e21d68f1c4674$export$439d29a4e110a164), {
        elementType: "span"
    }, /*#__PURE__*/ (React).createElement("input", {
        ...($3ef42575df84b30b$export$9d1611c77c2fe928)(inputProps, focusProps),
        ref: inputRef
    })), renderProps.children);
}
/**
 * A checkbox allows a user to select multiple items from a list of individual items, or
 * to mark one individual item as selected.
 */ const $bc237834342dbd75$export$48513f6b9f8ce62d = /*#__PURE__*/ (reactExports.forwardRef)($bc237834342dbd75$var$Checkbox);
/**
 * A checkbox group allows a user to select multiple items from a list of options.
 */ const $bc237834342dbd75$export$4aa08d5625cb8ead = /*#__PURE__*/ (reactExports.forwardRef)($bc237834342dbd75$var$CheckboxGroup);

/*
 * Copyright 2022 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 



const $3985021b0ad6602f$export$37fb8590cf2c088c = /*#__PURE__*/ (reactExports.createContext)({});
let $3985021b0ad6602f$var$filterHoverProps = (props)=>{
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    let { onHoverStart: onHoverStart, onHoverChange: onHoverChange, onHoverEnd: onHoverEnd, ...otherProps } = props;
    return otherProps;
};
function $3985021b0ad6602f$var$Input(props, ref) {
    [props, ref] = ($64fa3d84918910a7$export$29f1550f4b0d4415)(props, ref, $3985021b0ad6602f$export$37fb8590cf2c088c);
    let { hoverProps: hoverProps, isHovered: isHovered } = ($6179b936705e76d3$export$ae780daf29e6d456)(props);
    let { isFocused: isFocused, isFocusVisible: isFocusVisible, focusProps: focusProps } = ($f7dceffc5ad7768b$export$4e328f61c538687f)({
        isTextInput: true,
        autoFocus: props.autoFocus
    });
    let isInvalid = !!props['aria-invalid'] && props['aria-invalid'] !== 'false';
    let renderProps = ($64fa3d84918910a7$export$4d86445c2cf5e3)({
        ...props,
        values: {
            isHovered: isHovered,
            isFocused: isFocused,
            isFocusVisible: isFocusVisible,
            isDisabled: props.disabled || false,
            isInvalid: isInvalid
        },
        defaultClassName: 'react-aria-Input'
    });
    return /*#__PURE__*/ (React).createElement("input", {
        ...($3ef42575df84b30b$export$9d1611c77c2fe928)($3985021b0ad6602f$var$filterHoverProps(props), focusProps, hoverProps),
        ...renderProps,
        ref: ref,
        "data-focused": isFocused || undefined,
        "data-disabled": props.disabled || undefined,
        "data-hovered": isHovered || undefined,
        "data-focus-visible": isFocusVisible || undefined,
        "data-invalid": isInvalid || undefined
    });
}
/**
 * An input allows a user to input text.
 */ const $3985021b0ad6602f$export$f5b8910cec6cf069 = /*#__PURE__*/ ($f39a9eba43920ace$export$86427a43e3e48ebb)($3985021b0ad6602f$var$Input);

var $e038a7e7a6d81989$exports = {};
$e038a7e7a6d81989$exports = {
    "colorSwatchPicker": `\u{62A}\u{63A}\u{64A}\u{64A}\u{631}\u{627}\u{62A} \u{627}\u{644}\u{623}\u{644}\u{648}\u{627}\u{646}`,
    "dropzoneLabel": `DropZone`,
    "selectPlaceholder": `\u{62D}\u{62F}\u{62F} \u{639}\u{646}\u{635}\u{631}\u{64B}\u{627}`,
    "tableResizer": `\u{623}\u{62F}\u{627}\u{629} \u{62A}\u{63A}\u{64A}\u{64A}\u{631} \u{627}\u{644}\u{62D}\u{62C}\u{645}`
};

var $0ec14741b0133644$exports = {};
$0ec14741b0133644$exports = {
    "colorSwatchPicker": `\u{426}\u{432}\u{435}\u{442}\u{43E}\u{432}\u{438} \u{43C}\u{43E}\u{441}\u{442}\u{440}\u{438}`,
    "dropzoneLabel": `DropZone`,
    "selectPlaceholder": `\u{418}\u{437}\u{431}\u{435}\u{440}\u{435}\u{442}\u{435} \u{43F}\u{440}\u{435}\u{434}\u{43C}\u{435}\u{442}`,
    "tableResizer": `\u{41F}\u{440}\u{435}\u{43E}\u{440}\u{430}\u{437}\u{43C}\u{435}\u{440}\u{438}\u{442}\u{435}\u{43B}`
};

var $642f7badf2405784$exports = {};
$642f7badf2405784$exports = {
    "colorSwatchPicker": `Vzorky barev`,
    "dropzoneLabel": `M\xedsto pro p\u{159}eta\u{17E}en\xed`,
    "selectPlaceholder": `Vyberte polo\u{17E}ku`,
    "tableResizer": `Zm\u{11B}na velikosti`
};

var $30cee8d2535734ec$exports = {};
$30cee8d2535734ec$exports = {
    "colorSwatchPicker": `Farvepr\xf8ver`,
    "dropzoneLabel": `DropZone`,
    "selectPlaceholder": `V\xe6lg et element`,
    "tableResizer": `St\xf8rrelses\xe6ndring`
};

var $c302d0504fca332a$exports = {};
$c302d0504fca332a$exports = {
    "colorSwatchPicker": `Farbfelder`,
    "dropzoneLabel": `Ablegebereich`,
    "selectPlaceholder": `Element w\xe4hlen`,
    "tableResizer": `Gr\xf6\xdfenanpassung`
};

var $0d0703f2bd7e421c$exports = {};
$0d0703f2bd7e421c$exports = {
    "colorSwatchPicker": `\u{3A7}\u{3C1}\u{3C9}\u{3BC}\u{3B1}\u{3C4}\u{3B9}\u{3BA}\u{3AC} \u{3B4}\u{3B5}\u{3AF}\u{3B3}\u{3BC}\u{3B1}\u{3C4}\u{3B1}`,
    "dropzoneLabel": `DropZone`,
    "selectPlaceholder": `\u{395}\u{3C0}\u{3B9}\u{3BB}\u{3AD}\u{3BE}\u{3C4}\u{3B5} \u{3AD}\u{3BD}\u{3B1} \u{3B1}\u{3BD}\u{3C4}\u{3B9}\u{3BA}\u{3B5}\u{3AF}\u{3BC}\u{3B5}\u{3BD}\u{3BF}`,
    "tableResizer": `\u{391}\u{3BB}\u{3BB}\u{3B1}\u{3B3}\u{3AE} \u{3BC}\u{3B5}\u{3B3}\u{3AD}\u{3B8}\u{3BF}\u{3C5}\u{3C2}`
};

var $cafa55beb2fc5ef3$exports = {};
$cafa55beb2fc5ef3$exports = {
    "selectPlaceholder": `Select an item`,
    "tableResizer": `Resizer`,
    "dropzoneLabel": `DropZone`,
    "colorSwatchPicker": `Color swatches`
};

var $18ac2ceede598103$exports = {};
$18ac2ceede598103$exports = {
    "colorSwatchPicker": `Muestras de colores`,
    "dropzoneLabel": `DropZone`,
    "selectPlaceholder": `Seleccionar un art\xedculo`,
    "tableResizer": `Cambiador de tama\xf1o`
};

var $718705a15b8a633a$exports = {};
$718705a15b8a633a$exports = {
    "colorSwatchPicker": `V\xe4rvin\xe4idised`,
    "dropzoneLabel": `DropZone`,
    "selectPlaceholder": `Valige \xfcksus`,
    "tableResizer": `Suuruse muutja`
};

var $bf36dae9ecc81ce0$exports = {};
$bf36dae9ecc81ce0$exports = {
    "colorSwatchPicker": `V\xe4rimallit`,
    "dropzoneLabel": `DropZone`,
    "selectPlaceholder": `Valitse kohde`,
    "tableResizer": `Koon muuttaja`
};

var $0b4828edb010b855$exports = {};
$0b4828edb010b855$exports = {
    "colorSwatchPicker": `\xc9chantillons de couleurs`,
    "dropzoneLabel": `DropZone`,
    "selectPlaceholder": `S\xe9lectionner un \xe9l\xe9ment`,
    "tableResizer": `Redimensionneur`
};

var $0030f210b040e540$exports = {};
$0030f210b040e540$exports = {
    "colorSwatchPicker": `\u{5D3}\u{5D5}\u{5D2}\u{5DE}\u{5D9}\u{5D5}\u{5EA} \u{5E6}\u{5D1}\u{5E2}`,
    "dropzoneLabel": `DropZone`,
    "selectPlaceholder": `\u{5D1}\u{5D7}\u{5E8} \u{5E4}\u{5E8}\u{5D9}\u{5D8}`,
    "tableResizer": `\u{5E9}\u{5D9}\u{5E0}\u{5D5}\u{5D9} \u{5D2}\u{5D5}\u{5D3}\u{5DC}`
};

var $1f0ebacf5a0c0fa1$exports = {};
$1f0ebacf5a0c0fa1$exports = {
    "colorSwatchPicker": `Uzorci boja`,
    "dropzoneLabel": `Zona spu\u{161}tanja`,
    "selectPlaceholder": `Odaberite stavku`,
    "tableResizer": `Promjena veli\u{10D}ine`
};

var $3a706ba61f3d6bba$exports = {};
$3a706ba61f3d6bba$exports = {
    "colorSwatchPicker": `Sz\xednt\xe1rak`,
    "dropzoneLabel": `DropZone`,
    "selectPlaceholder": `V\xe1lasszon ki egy elemet`,
    "tableResizer": `\xc1tm\xe9retez\u{151}`
};

var $0d17809e74607796$exports = {};
$0d17809e74607796$exports = {
    "colorSwatchPicker": `Campioni di colore`,
    "dropzoneLabel": `Zona di rilascio`,
    "selectPlaceholder": `Seleziona un elemento`,
    "tableResizer": `Ridimensionamento`
};

var $65a71f9a56f1398f$exports = {};
$65a71f9a56f1398f$exports = {
    "colorSwatchPicker": `\u{30AB}\u{30E9}\u{30FC}\u{30B9}\u{30A6}\u{30A9}\u{30C3}\u{30C1}`,
    "dropzoneLabel": `\u{30C9}\u{30ED}\u{30C3}\u{30D7}\u{30BE}\u{30FC}\u{30F3}`,
    "selectPlaceholder": `\u{9805}\u{76EE}\u{3092}\u{9078}\u{629E}`,
    "tableResizer": `\u{30B5}\u{30A4}\u{30BA}\u{5909}\u{66F4}\u{30C4}\u{30FC}\u{30EB}`
};

var $e5efad074a74abef$exports = {};
$e5efad074a74abef$exports = {
    "colorSwatchPicker": `\u{C0C9}\u{C0C1} \u{ACAC}\u{BCF8}`,
    "dropzoneLabel": `\u{B4DC}\u{B86D} \u{C601}\u{C5ED}`,
    "selectPlaceholder": `\u{D56D}\u{BAA9} \u{C120}\u{D0DD}`,
    "tableResizer": `\u{D06C}\u{AE30} \u{C870}\u{C815}\u{AE30}`
};

var $d70c2a849e55c607$exports = {};
$d70c2a849e55c607$exports = {
    "colorSwatchPicker": `Spalv\u{173} pavyzd\u{17E}iai`,
    "dropzoneLabel": `\u{201E}DropZone\u{201C}`,
    "selectPlaceholder": `Pasirinkite element\u{105}`,
    "tableResizer": `Dyd\u{17E}io keitiklis`
};

var $009bbbb440d0e907$exports = {};
$009bbbb440d0e907$exports = {
    "colorSwatchPicker": `Kr\u{101}su paraugi`,
    "dropzoneLabel": `DropZone`,
    "selectPlaceholder": `Izv\u{113}l\u{113}ties vienumu`,
    "tableResizer": `Izm\u{113}ra main\u{12B}t\u{101}js`
};

var $9366fe642464ee83$exports = {};
$9366fe642464ee83$exports = {
    "colorSwatchPicker": `Fargekart`,
    "dropzoneLabel": `Droppsone`,
    "selectPlaceholder": `Velg et element`,
    "tableResizer": `St\xf8rrelsesendrer`
};

var $62f9bc1f98ea21de$exports = {};
$62f9bc1f98ea21de$exports = {
    "colorSwatchPicker": `kleurstalen`,
    "dropzoneLabel": `DropZone`,
    "selectPlaceholder": `Selecteer een item`,
    "tableResizer": `Resizer`
};

var $4ec2e5b6623b1b76$exports = {};
$4ec2e5b6623b1b76$exports = {
    "colorSwatchPicker": `Pr\xf3bki kolor\xf3w`,
    "dropzoneLabel": `Strefa upuszczania`,
    "selectPlaceholder": `Wybierz element`,
    "tableResizer": `Zmiana rozmiaru`
};

var $e25098e26647cc04$exports = {};
$e25098e26647cc04$exports = {
    "colorSwatchPicker": `Amostras de cores`,
    "dropzoneLabel": `DropZone`,
    "selectPlaceholder": `Selecione um item`,
    "tableResizer": `Redimensionador`
};

var $dd39c57d242c8156$exports = {};
$dd39c57d242c8156$exports = {
    "colorSwatchPicker": `Amostras de cores`,
    "dropzoneLabel": `DropZone`,
    "selectPlaceholder": `Selecione um item`,
    "tableResizer": `Redimensionador`
};

var $3b4c1ba5afd57b35$exports = {};
$3b4c1ba5afd57b35$exports = {
    "colorSwatchPicker": `Specimene de culoare`,
    "dropzoneLabel": `Zon\u{103} de plasare`,
    "selectPlaceholder": `Selecta\u{21B}i un element`,
    "tableResizer": `Instrument de redimensionare`
};

var $a455b2cda79eb746$exports = {};
$a455b2cda79eb746$exports = {
    "colorSwatchPicker": `\u{426}\u{432}\u{435}\u{442}\u{43E}\u{432}\u{44B}\u{435} \u{43E}\u{431}\u{440}\u{430}\u{437}\u{446}\u{44B}`,
    "dropzoneLabel": `DropZone`,
    "selectPlaceholder": `\u{412}\u{44B}\u{431}\u{435}\u{440}\u{438}\u{442}\u{435} \u{44D}\u{43B}\u{435}\u{43C}\u{435}\u{43D}\u{442}`,
    "tableResizer": `\u{421}\u{440}\u{435}\u{434}\u{441}\u{442}\u{432}\u{43E} \u{438}\u{437}\u{43C}\u{435}\u{43D}\u{435}\u{43D}\u{438}\u{44F} \u{440}\u{430}\u{437}\u{43C}\u{435}\u{440}\u{430}`
};

var $b983ca1383d5b960$exports = {};
$b983ca1383d5b960$exports = {
    "colorSwatchPicker": `Vzorkovn\xedky farieb`,
    "dropzoneLabel": `DropZone`,
    "selectPlaceholder": `Vyberte polo\u{17E}ku`,
    "tableResizer": `N\xe1stroj na zmenu ve\u{13E}kosti`
};

var $32a515ef673b0655$exports = {};
$32a515ef673b0655$exports = {
    "colorSwatchPicker": `Barvne palete`,
    "dropzoneLabel": `DropZone`,
    "selectPlaceholder": `Izberite element`,
    "tableResizer": `Spreminjanje velikosti`
};

var $89434176ab35446b$exports = {};
$89434176ab35446b$exports = {
    "colorSwatchPicker": `Uzorci boje`,
    "dropzoneLabel": `DropZone`,
    "selectPlaceholder": `Izaberite stavku`,
    "tableResizer": `Promena veli\u{10D}ine`
};

var $727da781aca847f9$exports = {};
$727da781aca847f9$exports = {
    "colorSwatchPicker": `F\xe4rgrutor`,
    "dropzoneLabel": `DropZone`,
    "selectPlaceholder": `V\xe4lj en artikel`,
    "tableResizer": `Storleks\xe4ndrare`
};

var $fcd2d84b9a2d489c$exports = {};
$fcd2d84b9a2d489c$exports = {
    "colorSwatchPicker": `Renk \xf6rnekleri`,
    "dropzoneLabel": `B\u{131}rakma B\xf6lgesi`,
    "selectPlaceholder": `Bir \xf6\u{11F}e se\xe7in`,
    "tableResizer": `Yeniden boyutland\u{131}r\u{131}c\u{131}`
};

var $2422ac328687ee23$exports = {};
$2422ac328687ee23$exports = {
    "colorSwatchPicker": `\u{417}\u{440}\u{430}\u{437}\u{43A}\u{438} \u{43A}\u{43E}\u{43B}\u{44C}\u{43E}\u{440}\u{456}\u{432}`,
    "dropzoneLabel": `DropZone`,
    "selectPlaceholder": `\u{412}\u{438}\u{431}\u{435}\u{440}\u{456}\u{442}\u{44C} \u{435}\u{43B}\u{435}\u{43C}\u{435}\u{43D}\u{442}`,
    "tableResizer": `\u{417}\u{430}\u{441}\u{456}\u{431} \u{437}\u{43C}\u{456}\u{43D}\u{435}\u{43D}\u{43D}\u{44F} \u{440}\u{43E}\u{437}\u{43C}\u{456}\u{440}\u{443}`
};

var $c9a532d1c973af61$exports = {};
$c9a532d1c973af61$exports = {
    "colorSwatchPicker": `\u{989C}\u{8272}\u{8272}\u{677F}`,
    "dropzoneLabel": `\u{653E}\u{7F6E}\u{533A}\u{57DF}`,
    "selectPlaceholder": `\u{9009}\u{62E9}\u{4E00}\u{4E2A}\u{9879}\u{76EE}`,
    "tableResizer": `\u{5C3A}\u{5BF8}\u{8C03}\u{6574}\u{5668}`
};

var $34de119f14549a4b$exports = {};
$34de119f14549a4b$exports = {
    "colorSwatchPicker": `\u{8272}\u{7968}`,
    "dropzoneLabel": `\u{653E}\u{7F6E}\u{5340}`,
    "selectPlaceholder": `\u{9078}\u{53D6}\u{9805}\u{76EE}`,
    "tableResizer": `\u{5927}\u{5C0F}\u{8ABF}\u{6574}\u{5668}`
};

var $df39c1238ae2b5f3$exports = {};


































$df39c1238ae2b5f3$exports = {
    "ar-AE": $e038a7e7a6d81989$exports,
    "bg-BG": $0ec14741b0133644$exports,
    "cs-CZ": $642f7badf2405784$exports,
    "da-DK": $30cee8d2535734ec$exports,
    "de-DE": $c302d0504fca332a$exports,
    "el-GR": $0d0703f2bd7e421c$exports,
    "en-US": $cafa55beb2fc5ef3$exports,
    "es-ES": $18ac2ceede598103$exports,
    "et-EE": $718705a15b8a633a$exports,
    "fi-FI": $bf36dae9ecc81ce0$exports,
    "fr-FR": $0b4828edb010b855$exports,
    "he-IL": $0030f210b040e540$exports,
    "hr-HR": $1f0ebacf5a0c0fa1$exports,
    "hu-HU": $3a706ba61f3d6bba$exports,
    "it-IT": $0d17809e74607796$exports,
    "ja-JP": $65a71f9a56f1398f$exports,
    "ko-KR": $e5efad074a74abef$exports,
    "lt-LT": $d70c2a849e55c607$exports,
    "lv-LV": $009bbbb440d0e907$exports,
    "nb-NO": $9366fe642464ee83$exports,
    "nl-NL": $62f9bc1f98ea21de$exports,
    "pl-PL": $4ec2e5b6623b1b76$exports,
    "pt-BR": $e25098e26647cc04$exports,
    "pt-PT": $dd39c57d242c8156$exports,
    "ro-RO": $3b4c1ba5afd57b35$exports,
    "ru-RU": $a455b2cda79eb746$exports,
    "sk-SK": $b983ca1383d5b960$exports,
    "sl-SI": $32a515ef673b0655$exports,
    "sr-SP": $89434176ab35446b$exports,
    "sv-SE": $727da781aca847f9$exports,
    "tr-TR": $fcd2d84b9a2d489c$exports,
    "uk-UA": $2422ac328687ee23$exports,
    "zh-CN": $c9a532d1c973af61$exports,
    "zh-TW": $34de119f14549a4b$exports
};

/*
 * Copyright 2024 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 
const $612b8eb6cb90e02d$export$d188a835a7bc5783 = /*#__PURE__*/ (reactExports.createContext)({});
const $612b8eb6cb90e02d$export$f55761759794cf55 = /*#__PURE__*/ (reactExports.createContext)(null);
function $612b8eb6cb90e02d$var$DropIndicator(props, ref) {
    let { render: render } = (reactExports.useContext)($612b8eb6cb90e02d$export$f55761759794cf55);
    return /*#__PURE__*/ (React).createElement((React).Fragment, null, render(props, ref));
}
/**
 * A DropIndicator is rendered between items in a collection to indicate where dropped data will be inserted.
 */ const $612b8eb6cb90e02d$export$62ed72bc21f6b8a6 = /*#__PURE__*/ (reactExports.forwardRef)($612b8eb6cb90e02d$var$DropIndicator);
function $612b8eb6cb90e02d$export$971707d8a129a1f7(dragAndDropHooks, dropState) {
    var _dragAndDropHooks_isVirtualDragging;
    let renderDropIndicator = dragAndDropHooks === null || dragAndDropHooks === void 0 ? void 0 : dragAndDropHooks.renderDropIndicator;
    let isVirtualDragging = dragAndDropHooks === null || dragAndDropHooks === void 0 ? void 0 : (_dragAndDropHooks_isVirtualDragging = dragAndDropHooks.isVirtualDragging) === null || _dragAndDropHooks_isVirtualDragging === void 0 ? void 0 : _dragAndDropHooks_isVirtualDragging.call(dragAndDropHooks);
    let fn = (reactExports.useCallback)((target)=>{
        // Only show drop indicators when virtual dragging or this is the current drop target.
        if (isVirtualDragging || (dropState === null || dropState === void 0 ? void 0 : dropState.isDropTarget(target))) return renderDropIndicator ? renderDropIndicator(target) : /*#__PURE__*/ (React).createElement($612b8eb6cb90e02d$export$62ed72bc21f6b8a6, {
            target: target
        });
    // We invalidate whenever the target changes.
    // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [
        dropState === null || dropState === void 0 ? void 0 : dropState.target,
        isVirtualDragging,
        renderDropIndicator
    ]);
    return (dragAndDropHooks === null || dragAndDropHooks === void 0 ? void 0 : dragAndDropHooks.useDropIndicator) ? fn : undefined;
}
function $612b8eb6cb90e02d$export$d1e8e3fbb7461f6(selectionManager, dragAndDropHooks, dropState) {
    var _dragAndDropHooks_isVirtualDragging, _dropState_target;
    // Persist the focused key and the drop target key.
    let focusedKey = selectionManager.focusedKey;
    let dropTargetKey = null;
    if ((dragAndDropHooks === null || dragAndDropHooks === void 0 ? void 0 : (_dragAndDropHooks_isVirtualDragging = dragAndDropHooks.isVirtualDragging) === null || _dragAndDropHooks_isVirtualDragging === void 0 ? void 0 : _dragAndDropHooks_isVirtualDragging.call(dragAndDropHooks)) && (dropState === null || dropState === void 0 ? void 0 : (_dropState_target = dropState.target) === null || _dropState_target === void 0 ? void 0 : _dropState_target.type) === 'item') {
        dropTargetKey = dropState.target.key;
        var _dropState_collection_getKeyAfter;
        if (dropState.target.dropPosition === 'after') // Normalize to the "before" drop position since we only render those to the DOM.
        dropTargetKey = (_dropState_collection_getKeyAfter = dropState.collection.getKeyAfter(dropTargetKey)) !== null && _dropState_collection_getKeyAfter !== void 0 ? _dropState_collection_getKeyAfter : dropTargetKey;
    }
    return (reactExports.useMemo)(()=>{
        return new Set([
            focusedKey,
            dropTargetKey
        ].filter((k)=>k !== null));
    }, [
        focusedKey,
        dropTargetKey
    ]);
}

/*
 * Copyright 2022 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 


const $72a5793c14baf454$export$e0e4026c12a8bdbb = /*#__PURE__*/ (reactExports.createContext)({});
const $72a5793c14baf454$export$8b251419efc915eb = /*#__PURE__*/ ($e1995378a142960e$export$18af5c7a9e9b3664)('header', function Header(props, ref) {
    [props, ref] = ($64fa3d84918910a7$export$29f1550f4b0d4415)(props, ref, $72a5793c14baf454$export$e0e4026c12a8bdbb);
    return /*#__PURE__*/ (React).createElement("header", {
        className: "react-aria-Header",
        ...props,
        ref: ref
    }, props.children);
});

/*
 * Copyright 2022 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 




const $431f98aba6844401$export$6615d83f6de245ce = /*#__PURE__*/ (reactExports.createContext)({});
const $431f98aba6844401$export$1ff3c3f08ae963c0 = /*#__PURE__*/ ($e1995378a142960e$export$18af5c7a9e9b3664)('separator', function Separator(props, ref) {
    [props, ref] = ($64fa3d84918910a7$export$29f1550f4b0d4415)(props, ref, $431f98aba6844401$export$6615d83f6de245ce);
    let { elementType: elementType, orientation: orientation, style: style, className: className } = props;
    let Element = elementType || 'hr';
    if (Element === 'hr' && orientation === 'vertical') Element = 'div';
    let { separatorProps: separatorProps } = ($f4b273590fab9f93$export$52210f68a14655d0)({
        elementType: elementType,
        orientation: orientation
    });
    return /*#__PURE__*/ (React).createElement(Element, {
        ...($65484d02dcb7eb3e$export$457c3d6518dd4c6f)(props),
        ...separatorProps,
        style: style,
        className: className !== null && className !== void 0 ? className : 'react-aria-Separator',
        ref: ref,
        slot: props.slot || undefined
    });
});

/*
 * Copyright 2022 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 










const $eed445e0843c11d0$export$7ff8f37d2d81a48d = /*#__PURE__*/ (reactExports.createContext)(null);
const $eed445e0843c11d0$export$7c5906fe4f1f2af2 = /*#__PURE__*/ (reactExports.createContext)(null);
function $eed445e0843c11d0$var$ListBox(props, ref) {
    [props, ref] = ($64fa3d84918910a7$export$29f1550f4b0d4415)(props, ref, $eed445e0843c11d0$export$7ff8f37d2d81a48d);
    let state = (reactExports.useContext)($eed445e0843c11d0$export$7c5906fe4f1f2af2);
    // The structure of ListBox is a bit strange because it needs to work inside other components like ComboBox and Select.
    // Those components render two copies of their children so that the collection can be built even when the popover is closed.
    // The first copy sends a collection document via context which we render the collection portal into.
    // The second copy sends a ListState object via context which we use to render the ListBox without rebuilding the state.
    // Otherwise, we have a standalone ListBox, so we need to create a collection and state ourselves.
    if (state) return /*#__PURE__*/ (React).createElement($eed445e0843c11d0$var$ListBoxInner, {
        state: state,
        props: props,
        listBoxRef: ref
    });
    return /*#__PURE__*/ (React).createElement(($e1995378a142960e$export$bf788dd355e3a401), {
        content: /*#__PURE__*/ (React).createElement(($e1995378a142960e$export$fb8073518f34e6ec), props)
    }, (collection)=>/*#__PURE__*/ (React).createElement($eed445e0843c11d0$var$StandaloneListBox, {
            props: props,
            listBoxRef: ref,
            collection: collection
        }));
}
function $eed445e0843c11d0$var$StandaloneListBox({ props: props, listBoxRef: listBoxRef, collection: collection }) {
    props = {
        ...props,
        collection: collection,
        children: null,
        items: null
    };
    let state = ($e72dd72e1c76a225$export$2f645645f7bca764)(props);
    return /*#__PURE__*/ (React).createElement($eed445e0843c11d0$var$ListBoxInner, {
        state: state,
        props: props,
        listBoxRef: listBoxRef
    });
}
/**
 * A listbox displays a list of options and allows a user to select one or more of them.
 */ const $eed445e0843c11d0$export$41f133550aa26f48 = /*#__PURE__*/ (reactExports.forwardRef)($eed445e0843c11d0$var$ListBox);
function $eed445e0843c11d0$var$ListBoxInner({ state: state, props: props, listBoxRef: listBoxRef }) {
    let { dragAndDropHooks: dragAndDropHooks, layout: layout = 'stack', orientation: orientation = 'vertical' } = props;
    let { collection: collection, selectionManager: selectionManager } = state;
    let isListDraggable = !!(dragAndDropHooks === null || dragAndDropHooks === void 0 ? void 0 : dragAndDropHooks.useDraggableCollectionState);
    let isListDroppable = !!(dragAndDropHooks === null || dragAndDropHooks === void 0 ? void 0 : dragAndDropHooks.useDroppableCollectionState);
    let { direction: direction } = ($18f2051aff69b9bf$export$43bb16f9c6d9e3f7)();
    let { disabledBehavior: disabledBehavior, disabledKeys: disabledKeys } = selectionManager;
    let collator = ($325a3faab7a68acd$export$a16aca283550c30d)({
        usage: 'search',
        sensitivity: 'base'
    });
    let { isVirtualized: isVirtualized, layoutDelegate: layoutDelegate, dropTargetDelegate: ctxDropTargetDelegate, CollectionRoot: CollectionRoot } = (reactExports.useContext)(($7135fc7d473fd974$export$4feb769f8ddf26c5));
    let keyboardDelegate = (reactExports.useMemo)(()=>props.keyboardDelegate || new ($2a25aae57d74318e$export$a05409b8bb224a5a)({
            collection: collection,
            collator: collator,
            ref: listBoxRef,
            disabledKeys: disabledKeys,
            disabledBehavior: disabledBehavior,
            layout: layout,
            orientation: orientation,
            direction: direction,
            layoutDelegate: layoutDelegate
        }), [
        collection,
        collator,
        listBoxRef,
        disabledBehavior,
        disabledKeys,
        orientation,
        direction,
        props.keyboardDelegate,
        layout,
        layoutDelegate
    ]);
    let { listBoxProps: listBoxProps } = ($c132121280ec012d$export$50eacbbf140a3141)({
        ...props,
        shouldSelectOnPressUp: isListDraggable || props.shouldSelectOnPressUp,
        keyboardDelegate: keyboardDelegate,
        isVirtualized: isVirtualized
    }, state, listBoxRef);
    let dragHooksProvided = (reactExports.useRef)(isListDraggable);
    let dropHooksProvided = (reactExports.useRef)(isListDroppable);
    (reactExports.useEffect)(()=>{
        if (dragHooksProvided.current !== isListDraggable) console.warn('Drag hooks were provided during one render, but not another. This should be avoided as it may produce unexpected behavior.');
        if (dropHooksProvided.current !== isListDroppable) console.warn('Drop hooks were provided during one render, but not another. This should be avoided as it may produce unexpected behavior.');
    }, [
        isListDraggable,
        isListDroppable
    ]);
    let dragState = undefined;
    let dropState = undefined;
    let droppableCollection = undefined;
    let isRootDropTarget = false;
    let dragPreview = null;
    let preview = (reactExports.useRef)(null);
    if (isListDraggable && dragAndDropHooks) {
        dragState = dragAndDropHooks.useDraggableCollectionState({
            collection: collection,
            selectionManager: selectionManager,
            preview: dragAndDropHooks.renderDragPreview ? preview : undefined
        });
        dragAndDropHooks.useDraggableCollection({}, dragState, listBoxRef);
        let DragPreview = dragAndDropHooks.DragPreview;
        dragPreview = dragAndDropHooks.renderDragPreview ? /*#__PURE__*/ (React).createElement(DragPreview, {
            ref: preview
        }, dragAndDropHooks.renderDragPreview) : null;
    }
    if (isListDroppable && dragAndDropHooks) {
        dropState = dragAndDropHooks.useDroppableCollectionState({
            collection: collection,
            selectionManager: selectionManager
        });
        let dropTargetDelegate = dragAndDropHooks.dropTargetDelegate || ctxDropTargetDelegate || new dragAndDropHooks.ListDropTargetDelegate(collection, listBoxRef, {
            orientation: orientation,
            layout: layout,
            direction: direction
        });
        droppableCollection = dragAndDropHooks.useDroppableCollection({
            keyboardDelegate: keyboardDelegate,
            dropTargetDelegate: dropTargetDelegate
        }, dropState, listBoxRef);
        isRootDropTarget = dropState.isDropTarget({
            type: 'root'
        });
    }
    let { focusProps: focusProps, isFocused: isFocused, isFocusVisible: isFocusVisible } = ($f7dceffc5ad7768b$export$4e328f61c538687f)();
    let renderValues = {
        isDropTarget: isRootDropTarget,
        isEmpty: state.collection.size === 0,
        isFocused: isFocused,
        isFocusVisible: isFocusVisible,
        layout: props.layout || 'stack',
        state: state
    };
    let renderProps = ($64fa3d84918910a7$export$4d86445c2cf5e3)({
        className: props.className,
        style: props.style,
        defaultClassName: 'react-aria-ListBox',
        values: renderValues
    });
    let emptyState = null;
    if (state.collection.size === 0 && props.renderEmptyState) emptyState = /*#__PURE__*/ (React).createElement("div", {
        // eslint-disable-next-line
        role: "option",
        style: {
            display: 'contents'
        }
    }, props.renderEmptyState(renderValues));
    return /*#__PURE__*/ (React).createElement(($9bf71ea28793e738$export$20e40289641fbbb6), null, /*#__PURE__*/ (React).createElement("div", {
        ...($65484d02dcb7eb3e$export$457c3d6518dd4c6f)(props),
        ...($3ef42575df84b30b$export$9d1611c77c2fe928)(listBoxProps, focusProps, droppableCollection === null || droppableCollection === void 0 ? void 0 : droppableCollection.collectionProps),
        ...renderProps,
        ref: listBoxRef,
        slot: props.slot || undefined,
        onScroll: props.onScroll,
        "data-drop-target": isRootDropTarget || undefined,
        "data-empty": state.collection.size === 0 || undefined,
        "data-focused": isFocused || undefined,
        "data-focus-visible": isFocusVisible || undefined,
        "data-layout": props.layout || 'stack',
        "data-orientation": props.orientation || 'vertical'
    }, /*#__PURE__*/ (React).createElement(($64fa3d84918910a7$export$2881499e37b75b9a), {
        values: [
            [
                $eed445e0843c11d0$export$7ff8f37d2d81a48d,
                props
            ],
            [
                $eed445e0843c11d0$export$7c5906fe4f1f2af2,
                state
            ],
            [
                ($612b8eb6cb90e02d$export$d188a835a7bc5783),
                {
                    dragAndDropHooks: dragAndDropHooks,
                    dragState: dragState,
                    dropState: dropState
                }
            ],
            [
                ($431f98aba6844401$export$6615d83f6de245ce),
                {
                    elementType: 'div'
                }
            ],
            [
                ($612b8eb6cb90e02d$export$f55761759794cf55),
                {
                    render: $eed445e0843c11d0$var$ListBoxDropIndicatorWrapper
                }
            ],
            [
                ($7135fc7d473fd974$export$d40e14dec8b060a8),
                {
                    render: $eed445e0843c11d0$var$ListBoxSection
                }
            ]
        ]
    }, /*#__PURE__*/ (React).createElement(CollectionRoot, {
        collection: collection,
        scrollRef: listBoxRef,
        persistedKeys: ($612b8eb6cb90e02d$export$d1e8e3fbb7461f6)(selectionManager, dragAndDropHooks, dropState),
        renderDropIndicator: ($612b8eb6cb90e02d$export$971707d8a129a1f7)(dragAndDropHooks, dropState)
    })), emptyState, dragPreview));
}
function $eed445e0843c11d0$var$ListBoxSection(props, ref, section) {
    let state = (reactExports.useContext)($eed445e0843c11d0$export$7c5906fe4f1f2af2);
    let { dragAndDropHooks: dragAndDropHooks, dropState: dropState } = (reactExports.useContext)(($612b8eb6cb90e02d$export$d188a835a7bc5783));
    let { CollectionBranch: CollectionBranch } = (reactExports.useContext)(($7135fc7d473fd974$export$4feb769f8ddf26c5));
    let [headingRef, heading] = ($64fa3d84918910a7$export$9d4c57ee4c6ffdd8)();
    var _props_arialabel;
    let { headingProps: headingProps, groupProps: groupProps } = ($af383d3bef1cfdc9$export$c3f9f39876e4bc7)({
        heading: heading,
        'aria-label': (_props_arialabel = props['aria-label']) !== null && _props_arialabel !== void 0 ? _props_arialabel : undefined
    });
    let renderProps = ($64fa3d84918910a7$export$4d86445c2cf5e3)({
        defaultClassName: 'react-aria-Section',
        className: props.className,
        style: props.style,
        values: {}
    });
    return /*#__PURE__*/ (React).createElement("section", {
        ...($65484d02dcb7eb3e$export$457c3d6518dd4c6f)(props),
        ...groupProps,
        ...renderProps,
        ref: ref
    }, /*#__PURE__*/ (React).createElement(($72a5793c14baf454$export$e0e4026c12a8bdbb).Provider, {
        value: {
            ...headingProps,
            ref: headingRef
        }
    }, /*#__PURE__*/ (React).createElement(CollectionBranch, {
        collection: state.collection,
        parent: section,
        renderDropIndicator: ($612b8eb6cb90e02d$export$971707d8a129a1f7)(dragAndDropHooks, dropState)
    })));
}
const $eed445e0843c11d0$export$a11e76429ed99b4 = /*#__PURE__*/ ($e1995378a142960e$export$18af5c7a9e9b3664)('item', function ListBoxItem(props, forwardedRef, item) {
    let ref = ($df56164dff5785e2$export$4338b53315abf666)(forwardedRef);
    let state = (reactExports.useContext)($eed445e0843c11d0$export$7c5906fe4f1f2af2);
    let { dragAndDropHooks: dragAndDropHooks, dragState: dragState, dropState: dropState } = (reactExports.useContext)(($612b8eb6cb90e02d$export$d188a835a7bc5783));
    let { optionProps: optionProps, labelProps: labelProps, descriptionProps: descriptionProps, ...states } = ($293f70390ea03370$export$497855f14858aa34)({
        key: item.key,
        'aria-label': props === null || props === void 0 ? void 0 : props['aria-label']
    }, state, ref);
    let { hoverProps: hoverProps, isHovered: isHovered } = ($6179b936705e76d3$export$ae780daf29e6d456)({
        isDisabled: !states.allowsSelection && !states.hasAction,
        onHoverStart: item.props.onHoverStart,
        onHoverChange: item.props.onHoverChange,
        onHoverEnd: item.props.onHoverEnd
    });
    let draggableItem = null;
    if (dragState && dragAndDropHooks) draggableItem = dragAndDropHooks.useDraggableItem({
        key: item.key
    }, dragState);
    let droppableItem = null;
    if (dropState && dragAndDropHooks) droppableItem = dragAndDropHooks.useDroppableItem({
        target: {
            type: 'item',
            key: item.key,
            dropPosition: 'on'
        }
    }, dropState, ref);
    let isDragging = dragState && dragState.isDragging(item.key);
    let renderProps = ($64fa3d84918910a7$export$4d86445c2cf5e3)({
        ...props,
        id: undefined,
        children: props.children,
        defaultClassName: 'react-aria-ListBoxItem',
        values: {
            ...states,
            isHovered: isHovered,
            selectionMode: state.selectionManager.selectionMode,
            selectionBehavior: state.selectionManager.selectionBehavior,
            allowsDragging: !!dragState,
            isDragging: isDragging,
            isDropTarget: droppableItem === null || droppableItem === void 0 ? void 0 : droppableItem.isDropTarget
        }
    });
    (reactExports.useEffect)(()=>{
        if (!item.textValue) console.warn('A `textValue` prop is required for <ListBoxItem> elements with non-plain text children in order to support accessibility features such as type to select.');
    }, [
        item.textValue
    ]);
    let ElementType = props.href ? 'a' : 'div';
    return /*#__PURE__*/ (React).createElement(ElementType, {
        ...($3ef42575df84b30b$export$9d1611c77c2fe928)(optionProps, hoverProps, draggableItem === null || draggableItem === void 0 ? void 0 : draggableItem.dragProps, droppableItem === null || droppableItem === void 0 ? void 0 : droppableItem.dropProps),
        ...renderProps,
        ref: ref,
        "data-allows-dragging": !!dragState || undefined,
        "data-selected": states.isSelected || undefined,
        "data-disabled": states.isDisabled || undefined,
        "data-hovered": isHovered || undefined,
        "data-focused": states.isFocused || undefined,
        "data-focus-visible": states.isFocusVisible || undefined,
        "data-pressed": states.isPressed || undefined,
        "data-dragging": isDragging || undefined,
        "data-drop-target": (droppableItem === null || droppableItem === void 0 ? void 0 : droppableItem.isDropTarget) || undefined,
        "data-selection-mode": state.selectionManager.selectionMode === 'none' ? undefined : state.selectionManager.selectionMode
    }, /*#__PURE__*/ (React).createElement(($64fa3d84918910a7$export$2881499e37b75b9a), {
        values: [
            [
                ($514c0188e459b4c0$export$9afb8bc826b033ea),
                {
                    slots: {
                        label: labelProps,
                        description: descriptionProps
                    }
                }
            ]
        ]
    }, renderProps.children));
});
function $eed445e0843c11d0$var$ListBoxDropIndicatorWrapper(props, ref) {
    ref = ($df56164dff5785e2$export$4338b53315abf666)(ref);
    let { dragAndDropHooks: dragAndDropHooks, dropState: dropState } = (reactExports.useContext)(($612b8eb6cb90e02d$export$d188a835a7bc5783));
    let { dropIndicatorProps: dropIndicatorProps, isHidden: isHidden, isDropTarget: isDropTarget } = dragAndDropHooks.useDropIndicator(props, dropState, ref);
    if (isHidden) return null;
    return /*#__PURE__*/ (React).createElement($eed445e0843c11d0$var$ListBoxDropIndicatorForwardRef, {
        ...props,
        dropIndicatorProps: dropIndicatorProps,
        isDropTarget: isDropTarget,
        ref: ref
    });
}
function $eed445e0843c11d0$var$ListBoxDropIndicator(props, ref) {
    let { dropIndicatorProps: dropIndicatorProps, isDropTarget: isDropTarget, ...otherProps } = props;
    let renderProps = ($64fa3d84918910a7$export$4d86445c2cf5e3)({
        ...otherProps,
        defaultClassName: 'react-aria-DropIndicator',
        values: {
            isDropTarget: isDropTarget
        }
    });
    return /*#__PURE__*/ (React).createElement("div", {
        ...dropIndicatorProps,
        ...renderProps,
        // eslint-disable-next-line
        role: "option",
        ref: ref,
        "data-drop-target": isDropTarget || undefined
    });
}
const $eed445e0843c11d0$var$ListBoxDropIndicatorForwardRef = /*#__PURE__*/ (reactExports.forwardRef)($eed445e0843c11d0$var$ListBoxDropIndicator);

/*
 * Copyright 2022 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 





const $6f909507e6374d18$export$e99164f0030f3bff = /*#__PURE__*/ (reactExports.createContext)(null);
const $6f909507e6374d18$export$1e7083018727fa60 = /*#__PURE__*/ (reactExports.createContext)(null);
const $6f909507e6374d18$export$f1fce0420cc6d8ee = /*#__PURE__*/ (reactExports.createContext)(null);
const $6f909507e6374d18$export$6189c2744041d8f8 = /*#__PURE__*/ (reactExports.createContext)(null);
function $6f909507e6374d18$var$Slider(props, ref) {
    [props, ref] = ($64fa3d84918910a7$export$29f1550f4b0d4415)(props, ref, $6f909507e6374d18$export$e99164f0030f3bff);
    let trackRef = (reactExports.useRef)(null);
    let numberFormatter = ($a916eb452884faea$export$b7a616150fdb9f44)(props.formatOptions);
    let state = ($28f99e3e86e6ec45$export$e5fda3247f5d67f9)({
        ...props,
        numberFormatter: numberFormatter
    });
    let [labelRef, label] = ($64fa3d84918910a7$export$9d4c57ee4c6ffdd8)();
    let { groupProps: groupProps, trackProps: trackProps, labelProps: labelProps, outputProps: outputProps } = ($bcca50147b47f54d$export$56b2c08e277f365)({
        ...props,
        label: label
    }, state, trackRef);
    let renderProps = ($64fa3d84918910a7$export$4d86445c2cf5e3)({
        ...props,
        values: {
            orientation: state.orientation,
            isDisabled: state.isDisabled,
            state: state
        },
        defaultClassName: 'react-aria-Slider'
    });
    let DOMProps = ($65484d02dcb7eb3e$export$457c3d6518dd4c6f)(props);
    delete DOMProps.id;
    return /*#__PURE__*/ (React).createElement(($64fa3d84918910a7$export$2881499e37b75b9a), {
        values: [
            [
                $6f909507e6374d18$export$1e7083018727fa60,
                state
            ],
            [
                $6f909507e6374d18$export$f1fce0420cc6d8ee,
                {
                    ...trackProps,
                    ref: trackRef
                }
            ],
            [
                $6f909507e6374d18$export$6189c2744041d8f8,
                outputProps
            ],
            [
                ($01b77f81d0f07f68$export$75b6ee27786ba447),
                {
                    ...labelProps,
                    ref: labelRef
                }
            ]
        ]
    }, /*#__PURE__*/ (React).createElement("div", {
        ...DOMProps,
        ...groupProps,
        ...renderProps,
        ref: ref,
        slot: props.slot || undefined,
        "data-orientation": state.orientation,
        "data-disabled": state.isDisabled || undefined
    }));
}
/**
 * A slider allows a user to select one or more values within a range.
 */ const $6f909507e6374d18$export$472062a354075cee = /*#__PURE__*/ (reactExports.forwardRef)($6f909507e6374d18$var$Slider);
function $6f909507e6374d18$var$SliderOutput(props, ref) {
    [props, ref] = ($64fa3d84918910a7$export$29f1550f4b0d4415)(props, ref, $6f909507e6374d18$export$6189c2744041d8f8);
    let { children: children, style: style, className: className, ...otherProps } = props;
    let state = (reactExports.useContext)($6f909507e6374d18$export$1e7083018727fa60);
    let renderProps = ($64fa3d84918910a7$export$4d86445c2cf5e3)({
        className: className,
        style: style,
        children: children,
        defaultChildren: state.getThumbValueLabel(0),
        defaultClassName: 'react-aria-SliderOutput',
        values: {
            orientation: state.orientation,
            isDisabled: state.isDisabled,
            state: state
        }
    });
    return /*#__PURE__*/ (React).createElement("output", {
        ...otherProps,
        ...renderProps,
        ref: ref,
        "data-orientation": state.orientation || undefined,
        "data-disabled": state.isDisabled || undefined
    });
}
/**
 * A slider output displays the current value of a slider as text.
 */ const $6f909507e6374d18$export$a590f758a961cb5b = /*#__PURE__*/ (reactExports.forwardRef)($6f909507e6374d18$var$SliderOutput);
function $6f909507e6374d18$var$SliderTrack(props, ref) {
    [props, ref] = ($64fa3d84918910a7$export$29f1550f4b0d4415)(props, ref, $6f909507e6374d18$export$f1fce0420cc6d8ee);
    let state = (reactExports.useContext)($6f909507e6374d18$export$1e7083018727fa60);
    let { onHoverStart: onHoverStart, onHoverEnd: onHoverEnd, onHoverChange: onHoverChange, ...otherProps } = props;
    let { hoverProps: hoverProps, isHovered: isHovered } = ($6179b936705e76d3$export$ae780daf29e6d456)({
        onHoverStart: onHoverStart,
        onHoverEnd: onHoverEnd,
        onHoverChange: onHoverChange
    });
    let renderProps = ($64fa3d84918910a7$export$4d86445c2cf5e3)({
        ...props,
        defaultClassName: 'react-aria-SliderTrack',
        values: {
            orientation: state.orientation,
            isDisabled: state.isDisabled,
            isHovered: isHovered,
            state: state
        }
    });
    return /*#__PURE__*/ (React).createElement("div", {
        ...($3ef42575df84b30b$export$9d1611c77c2fe928)(otherProps, hoverProps),
        ...renderProps,
        ref: ref,
        "data-hovered": isHovered || undefined,
        "data-orientation": state.orientation || undefined,
        "data-disabled": state.isDisabled || undefined
    });
}
/**
 * A slider track is a container for one or more slider thumbs.
 */ const $6f909507e6374d18$export$105594979f116971 = /*#__PURE__*/ (reactExports.forwardRef)($6f909507e6374d18$var$SliderTrack);
function $6f909507e6374d18$var$SliderThumb(props, ref) {
    let { inputRef: userInputRef = null } = props;
    let state = (reactExports.useContext)($6f909507e6374d18$export$1e7083018727fa60);
    let { ref: trackRef } = ($64fa3d84918910a7$export$fabf2dc03a41866e)($6f909507e6374d18$export$f1fce0420cc6d8ee);
    let { index: index = 0 } = props;
    let defaultInputRef = (reactExports.useRef)(null);
    let inputRef = userInputRef || defaultInputRef;
    let [labelRef, label] = ($64fa3d84918910a7$export$9d4c57ee4c6ffdd8)();
    let { thumbProps: thumbProps, inputProps: inputProps, labelProps: labelProps, isDragging: isDragging, isFocused: isFocused, isDisabled: isDisabled } = ($47b897dc8cdb026b$export$8d15029008292ae)({
        ...props,
        index: index,
        trackRef: trackRef,
        inputRef: inputRef,
        label: label
    }, state);
    let { focusProps: focusProps, isFocusVisible: isFocusVisible } = ($f7dceffc5ad7768b$export$4e328f61c538687f)();
    let { hoverProps: hoverProps, isHovered: isHovered } = ($6179b936705e76d3$export$ae780daf29e6d456)(props);
    let renderProps = ($64fa3d84918910a7$export$4d86445c2cf5e3)({
        ...props,
        defaultClassName: 'react-aria-SliderThumb',
        values: {
            state: state,
            isHovered: isHovered,
            isDragging: isDragging,
            isFocused: isFocused,
            isFocusVisible: isFocusVisible,
            isDisabled: isDisabled
        }
    });
    let DOMProps = ($65484d02dcb7eb3e$export$457c3d6518dd4c6f)(props);
    delete DOMProps.id;
    return /*#__PURE__*/ (React).createElement("div", {
        ...($3ef42575df84b30b$export$9d1611c77c2fe928)(DOMProps, thumbProps, hoverProps),
        ...renderProps,
        ref: ref,
        style: {
            ...thumbProps.style,
            ...renderProps.style
        },
        "data-hovered": isHovered || undefined,
        "data-dragging": isDragging || undefined,
        "data-focused": isFocused || undefined,
        "data-focus-visible": isFocusVisible || undefined,
        "data-disabled": isDisabled || undefined
    }, /*#__PURE__*/ (React).createElement(($5c3e21d68f1c4674$export$439d29a4e110a164), null, /*#__PURE__*/ (React).createElement("input", {
        ref: inputRef,
        ...($3ef42575df84b30b$export$9d1611c77c2fe928)(inputProps, focusProps)
    })), /*#__PURE__*/ (React).createElement(($64fa3d84918910a7$export$2881499e37b75b9a), {
        values: [
            [
                ($01b77f81d0f07f68$export$75b6ee27786ba447),
                {
                    ...labelProps,
                    ref: labelRef
                }
            ]
        ]
    }, renderProps.children));
}
/**
 * A slider thumb represents an individual value that the user can adjust within a slider track.
 */ const $6f909507e6374d18$export$2c1b491743890dec = /*#__PURE__*/ (reactExports.forwardRef)($6f909507e6374d18$var$SliderThumb);

/*
 * Copyright 2022 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 


const $a049562f99e7db0e$export$f9c6924e160136d1 = /*#__PURE__*/ (reactExports.createContext)({});
function $a049562f99e7db0e$var$Group(props, ref) {
    [props, ref] = ($64fa3d84918910a7$export$29f1550f4b0d4415)(props, ref, $a049562f99e7db0e$export$f9c6924e160136d1);
    let { isDisabled: isDisabled, isInvalid: isInvalid, onHoverStart: onHoverStart, onHoverChange: onHoverChange, onHoverEnd: onHoverEnd, ...otherProps } = props;
    let { hoverProps: hoverProps, isHovered: isHovered } = ($6179b936705e76d3$export$ae780daf29e6d456)({
        onHoverStart: onHoverStart,
        onHoverChange: onHoverChange,
        onHoverEnd: onHoverEnd,
        isDisabled: isDisabled
    });
    let { isFocused: isFocused, isFocusVisible: isFocusVisible, focusProps: focusProps } = ($f7dceffc5ad7768b$export$4e328f61c538687f)({
        within: true
    });
    isDisabled !== null && isDisabled !== void 0 ? isDisabled : isDisabled = !!props['aria-disabled'] && props['aria-disabled'] !== 'false';
    isInvalid !== null && isInvalid !== void 0 ? isInvalid : isInvalid = !!props['aria-invalid'] && props['aria-invalid'] !== 'false';
    let renderProps = ($64fa3d84918910a7$export$4d86445c2cf5e3)({
        ...props,
        values: {
            isHovered: isHovered,
            isFocusWithin: isFocused,
            isFocusVisible: isFocusVisible,
            isDisabled: isDisabled,
            isInvalid: isInvalid
        },
        defaultClassName: 'react-aria-Group'
    });
    var _props_role, _props_slot;
    return /*#__PURE__*/ (React).createElement("div", {
        ...($3ef42575df84b30b$export$9d1611c77c2fe928)(otherProps, focusProps, hoverProps),
        ...renderProps,
        ref: ref,
        role: (_props_role = props.role) !== null && _props_role !== void 0 ? _props_role : 'group',
        slot: (_props_slot = props.slot) !== null && _props_slot !== void 0 ? _props_slot : undefined,
        "data-focus-within": isFocused || undefined,
        "data-hovered": isHovered || undefined,
        "data-focus-visible": isFocusVisible || undefined,
        "data-disabled": isDisabled || undefined,
        "data-invalid": isInvalid || undefined
    }, renderProps.children);
}
/**
 * A group represents a set of related UI controls, and supports interactive states for styling.
 */ const $a049562f99e7db0e$export$eb2fcfdbd7ba97d4 = /*#__PURE__*/ (reactExports.forwardRef)($a049562f99e7db0e$var$Group);

/*
 * Copyright 2022 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 

const $44f671af83e7d9e0$export$2de4954e8ae13b9f = /*#__PURE__*/ (reactExports.createContext)({
    placement: 'bottom'
});
function $44f671af83e7d9e0$var$OverlayArrow(props, ref) {
    [props, ref] = ($64fa3d84918910a7$export$29f1550f4b0d4415)(props, ref, $44f671af83e7d9e0$export$2de4954e8ae13b9f);
    let placement = props.placement;
    let style = {
        position: 'absolute',
        [placement]: '100%',
        transform: placement === 'top' || placement === 'bottom' ? 'translateX(-50%)' : 'translateY(-50%)'
    };
    let renderProps = ($64fa3d84918910a7$export$4d86445c2cf5e3)({
        ...props,
        defaultClassName: 'react-aria-OverlayArrow',
        values: {
            placement: placement
        }
    });
    // remove undefined values from renderProps.style object so that it can be
    // spread merged with the other style object
    if (renderProps.style) Object.keys(renderProps.style).forEach((key)=>renderProps.style[key] === undefined && delete renderProps.style[key]);
    return /*#__PURE__*/ (React).createElement("div", {
        ...props,
        ...renderProps,
        style: {
            ...style,
            ...renderProps.style
        },
        ref: ref,
        "data-placement": placement
    });
}
/**
 * An OverlayArrow renders a custom arrow element relative to an overlay element
 * such as a popover or tooltip such that it aligns with a trigger element.
 */ const $44f671af83e7d9e0$export$746d02f47f4d381 = /*#__PURE__*/ (reactExports.forwardRef)($44f671af83e7d9e0$var$OverlayArrow);

/*
 * Copyright 2022 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 







const $07b14b47974efb58$export$9b9a0cd73afb7ca4 = /*#__PURE__*/ (reactExports.createContext)(null);
function $07b14b47974efb58$var$Popover(props, ref) {
    [props, ref] = ($64fa3d84918910a7$export$29f1550f4b0d4415)(props, ref, $07b14b47974efb58$export$9b9a0cd73afb7ca4);
    let contextState = (reactExports.useContext)(($de32f1b87079253c$export$d2f961adcb0afbe));
    let localState = ($fc909762b330b746$export$61c6a8c84e605fb6)(props);
    let state = props.isOpen != null || props.defaultOpen != null || !contextState ? localState : contextState;
    let isExiting = ($64fa3d84918910a7$export$45fda7c47f93fd48)(ref, state.isOpen) || props.isExiting || false;
    let isHidden = ($f39a9eba43920ace$export$b5d7cc18bb8d2b59)();
    // If we are in a hidden tree, we still need to preserve our children.
    if (isHidden) {
        let children = props.children;
        if (typeof children === 'function') children = children({
            trigger: props.trigger || null,
            placement: 'bottom',
            isEntering: false,
            isExiting: false,
            defaultChildren: null
        });
        return /*#__PURE__*/ (React).createElement((React).Fragment, null, children);
    }
    if (state && !state.isOpen && !isExiting) return null;
    return /*#__PURE__*/ (React).createElement($07b14b47974efb58$var$PopoverInner, {
        ...props,
        triggerRef: props.triggerRef,
        state: state,
        popoverRef: ref,
        isExiting: isExiting
    });
}
/**
 * A popover is an overlay element positioned relative to a trigger.
 */ const $07b14b47974efb58$export$5b6b19405a83ff9d = /*#__PURE__*/ (reactExports.forwardRef)($07b14b47974efb58$var$Popover);
function $07b14b47974efb58$var$PopoverInner({ state: state, isExiting: isExiting, UNSTABLE_portalContainer: UNSTABLE_portalContainer, ...props }) {
    // Calculate the arrow size internally (and remove props.arrowSize from PopoverProps)
    // Referenced from: packages/@react-spectrum/tooltip/src/TooltipTrigger.tsx
    let arrowRef = (reactExports.useRef)(null);
    let [arrowWidth, setArrowWidth] = (reactExports.useState)(0);
    ($f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(()=>{
        if (arrowRef.current && state.isOpen) setArrowWidth(arrowRef.current.getBoundingClientRect().width);
    }, [
        state.isOpen,
        arrowRef
    ]);
    var _props_offset;
    let { popoverProps: popoverProps, underlayProps: underlayProps, arrowProps: arrowProps, placement: placement } = ($f2f8a6077418541e$export$542a6fd13ac93354)({
        ...props,
        offset: (_props_offset = props.offset) !== null && _props_offset !== void 0 ? _props_offset : 8,
        arrowSize: arrowWidth
    }, state);
    let ref = props.popoverRef;
    let isEntering = ($64fa3d84918910a7$export$6d3443f2c48bfc20)(ref, !!placement) || props.isEntering || false;
    let renderProps = ($64fa3d84918910a7$export$4d86445c2cf5e3)({
        ...props,
        defaultClassName: 'react-aria-Popover',
        values: {
            trigger: props.trigger || null,
            placement: placement,
            isEntering: isEntering,
            isExiting: isExiting
        }
    });
    let style = {
        ...popoverProps.style,
        ...renderProps.style
    };
    return /*#__PURE__*/ (React).createElement(($337b884510726a0d$export$c6fdb837b070b4ff), {
        isExiting: isExiting,
        portalContainer: UNSTABLE_portalContainer
    }, !props.isNonModal && state.isOpen && /*#__PURE__*/ (React).createElement("div", {
        "data-testid": "underlay",
        ...underlayProps,
        style: {
            position: 'fixed',
            inset: 0
        }
    }), /*#__PURE__*/ (React).createElement("div", {
        ...($3ef42575df84b30b$export$9d1611c77c2fe928)(($65484d02dcb7eb3e$export$457c3d6518dd4c6f)(props), popoverProps),
        ...renderProps,
        ref: ref,
        slot: props.slot || undefined,
        style: style,
        "data-trigger": props.trigger,
        "data-placement": placement,
        "data-entering": isEntering || undefined,
        "data-exiting": isExiting || undefined
    }, !props.isNonModal && /*#__PURE__*/ (React).createElement(($86ea4cb521eb2e37$export$2317d149ed6f78c4), {
        onDismiss: state.close
    }), /*#__PURE__*/ (React).createElement(($44f671af83e7d9e0$export$2de4954e8ae13b9f).Provider, {
        value: {
            ...arrowProps,
            placement: placement,
            ref: arrowRef
        }
    }, renderProps.children), /*#__PURE__*/ (React).createElement(($86ea4cb521eb2e37$export$2317d149ed6f78c4), {
        onDismiss: state.close
    })));
}

/*
 * Copyright 2022 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 







const $de32f1b87079253c$export$8b93a07348a7730c = /*#__PURE__*/ (reactExports.createContext)(null);
const $de32f1b87079253c$export$d2f961adcb0afbe = /*#__PURE__*/ (reactExports.createContext)(null);
function $de32f1b87079253c$export$2e1e1122cf0cba88(props) {
    let state = ($fc909762b330b746$export$61c6a8c84e605fb6)(props);
    let buttonRef = (reactExports.useRef)(null);
    let { triggerProps: triggerProps, overlayProps: overlayProps } = ($628037886ba31236$export$f9d5c8beee7d008d)({
        type: 'dialog'
    }, state, buttonRef);
    // Label dialog by the trigger as a fallback if there is no title slot.
    // This is done in RAC instead of hooks because otherwise we cannot distinguish
    // between context and props. Normally aria-labelledby overrides the title
    // but when sent by context we want the title to win.
    triggerProps.id = ($bdb11010cef70236$export$f680877a34711e37)();
    overlayProps['aria-labelledby'] = triggerProps.id;
    return /*#__PURE__*/ (React).createElement(($64fa3d84918910a7$export$2881499e37b75b9a), {
        values: [
            [
                $de32f1b87079253c$export$d2f961adcb0afbe,
                state
            ],
            [
                $de32f1b87079253c$export$8b93a07348a7730c,
                overlayProps
            ],
            [
                ($07b14b47974efb58$export$9b9a0cd73afb7ca4),
                {
                    trigger: 'DialogTrigger',
                    triggerRef: buttonRef
                }
            ]
        ]
    }, /*#__PURE__*/ (React).createElement(($f1ab8c75478c6f73$export$3351871ee4b288b8), {
        ...triggerProps,
        ref: buttonRef,
        isPressed: state.isOpen
    }, props.children));
}
function $de32f1b87079253c$var$Dialog(props, ref) {
    let originalAriaLabelledby = props['aria-labelledby'];
    [props, ref] = ($64fa3d84918910a7$export$29f1550f4b0d4415)(props, ref, $de32f1b87079253c$export$8b93a07348a7730c);
    let { dialogProps: dialogProps, titleProps: titleProps } = ($40df3f8667284809$export$d55e7ee900f34e93)({
        ...props,
        // Only pass aria-labelledby from props, not context.
        // Context is used as a fallback below.
        'aria-labelledby': originalAriaLabelledby
    }, ref);
    let state = (reactExports.useContext)($de32f1b87079253c$export$d2f961adcb0afbe);
    let children = props.children;
    if (typeof children === 'function') children = children({
        close: (state === null || state === void 0 ? void 0 : state.close) || (()=>{})
    });
    if (!dialogProps['aria-label'] && !dialogProps['aria-labelledby']) {
        // If aria-labelledby exists on props, we know it came from context.
        // Use that as a fallback in case there is no title slot.
        if (props['aria-labelledby']) dialogProps['aria-labelledby'] = props['aria-labelledby'];
        else console.warn('If a Dialog does not contain a <Heading slot="title">, it must have an aria-label or aria-labelledby attribute for accessibility.');
    }
    var _props_className;
    return /*#__PURE__*/ (React).createElement("section", {
        ...($65484d02dcb7eb3e$export$457c3d6518dd4c6f)(props),
        ...dialogProps,
        ref: ref,
        slot: props.slot || undefined,
        style: props.style,
        className: (_props_className = props.className) !== null && _props_className !== void 0 ? _props_className : 'react-aria-Dialog'
    }, /*#__PURE__*/ (React).createElement(($64fa3d84918910a7$export$2881499e37b75b9a), {
        values: [
            [
                ($4e85f108e88277b8$export$d688439359537581),
                {
                    slots: {
                        [($64fa3d84918910a7$export$c62b8e45d58ddad9)]: {},
                        title: {
                            ...titleProps,
                            level: 2
                        }
                    }
                }
            ]
        ]
    }, children));
}
/**
 * A dialog is an overlay shown above other content in an application.
 */ const $de32f1b87079253c$export$3ddf2d174ce01153 = /*#__PURE__*/ (reactExports.forwardRef)($de32f1b87079253c$var$Dialog);

/*
 * Copyright 2022 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 















const $d01f2c01039c0eec$export$d414ccceff7063c3 = /*#__PURE__*/ (reactExports.createContext)(null);
const $d01f2c01039c0eec$export$c02625b26074192c = /*#__PURE__*/ (reactExports.createContext)(null);
function $d01f2c01039c0eec$var$ComboBox(props, ref) {
    [props, ref] = ($64fa3d84918910a7$export$29f1550f4b0d4415)(props, ref, $d01f2c01039c0eec$export$d414ccceff7063c3);
    let { children: children, isDisabled: isDisabled = false, isInvalid: isInvalid = false, isRequired: isRequired = false } = props;
    let content = (reactExports.useMemo)(()=> {
        var _props_items;
        return (React).createElement(($eed445e0843c11d0$export$7ff8f37d2d81a48d).Provider, {
            value: {
                items: (_props_items = props.items) !== null && _props_items !== void 0 ? _props_items : props.defaultItems
            }
        }, typeof children === 'function' ? children({
            isOpen: false,
            isDisabled: isDisabled,
            isInvalid: isInvalid,
            isRequired: isRequired,
            defaultChildren: null
        }) : children);
    }, [
        children,
        isDisabled,
        isInvalid,
        isRequired,
        props.items,
        props.defaultItems
    ]);
    return /*#__PURE__*/ (React).createElement(($e1995378a142960e$export$bf788dd355e3a401), {
        content: content
    }, (collection)=>/*#__PURE__*/ (React).createElement($d01f2c01039c0eec$var$ComboBoxInner, {
            props: props,
            collection: collection,
            comboBoxRef: ref
        }));
}
function $d01f2c01039c0eec$var$ComboBoxInner({ props: props, collection: collection, comboBoxRef: ref }) {
    let { name: name, formValue: formValue = 'key', allowsCustomValue: allowsCustomValue } = props;
    if (allowsCustomValue) formValue = 'text';
    let { validationBehavior: formValidationBehavior } = ($64fa3d84918910a7$export$fabf2dc03a41866e)(($d3e0e05bdfcf66bd$export$c24727297075ec6a)) || {};
    var _props_validationBehavior, _ref;
    let validationBehavior = (_ref = (_props_validationBehavior = props.validationBehavior) !== null && _props_validationBehavior !== void 0 ? _props_validationBehavior : formValidationBehavior) !== null && _ref !== void 0 ? _ref : 'native';
    let { contains: contains } = ($bb77f239b46e8c72$export$3274cf84b703fff)({
        sensitivity: 'base'
    });
    let state = ($a9e7382a7d111cb5$export$b453a3bfd4a5fa9e)({
        defaultFilter: props.defaultFilter || contains,
        ...props,
        // If props.items isn't provided, rely on collection filtering (aka listbox.items is provided or defaultItems provided to Combobox)
        items: props.items,
        children: undefined,
        collection: collection,
        validationBehavior: validationBehavior
    });
    let buttonRef = (reactExports.useRef)(null);
    let inputRef = (reactExports.useRef)(null);
    let listBoxRef = (reactExports.useRef)(null);
    let popoverRef = (reactExports.useRef)(null);
    let [labelRef, label] = ($64fa3d84918910a7$export$9d4c57ee4c6ffdd8)();
    let { buttonProps: buttonProps, inputProps: inputProps, listBoxProps: listBoxProps, labelProps: labelProps, descriptionProps: descriptionProps, errorMessageProps: errorMessageProps, ...validation } = ($c350ade66beef0af$export$8c18d1b4f7232bbf)({
        ...($64fa3d84918910a7$export$ef03459518577ad4)(props),
        label: label,
        inputRef: inputRef,
        buttonRef: buttonRef,
        listBoxRef: listBoxRef,
        popoverRef: popoverRef,
        name: formValue === 'text' ? name : undefined,
        validationBehavior: validationBehavior
    }, state);
    // Make menu width match input + button
    let [menuWidth, setMenuWidth] = (reactExports.useState)(null);
    let onResize = (reactExports.useCallback)(()=>{
        if (inputRef.current) {
            var _buttonRef_current;
            let buttonRect = (_buttonRef_current = buttonRef.current) === null || _buttonRef_current === void 0 ? void 0 : _buttonRef_current.getBoundingClientRect();
            let inputRect = inputRef.current.getBoundingClientRect();
            let minX = buttonRect ? Math.min(buttonRect.left, inputRect.left) : inputRect.left;
            let maxX = buttonRect ? Math.max(buttonRect.right, inputRect.right) : inputRect.right;
            setMenuWidth(maxX - minX + 'px');
        }
    }, [
        buttonRef,
        inputRef,
        setMenuWidth
    ]);
    ($9daab02d461809db$export$683480f191c0e3ea)({
        ref: inputRef,
        onResize: onResize
    });
    // Only expose a subset of state to renderProps function to avoid infinite render loop
    let renderPropsState = (reactExports.useMemo)(()=>({
            isOpen: state.isOpen,
            isDisabled: props.isDisabled || false,
            isInvalid: validation.isInvalid || false,
            isRequired: props.isRequired || false
        }), [
        state.isOpen,
        props.isDisabled,
        validation.isInvalid,
        props.isRequired
    ]);
    let renderProps = ($64fa3d84918910a7$export$4d86445c2cf5e3)({
        ...props,
        values: renderPropsState,
        defaultClassName: 'react-aria-ComboBox'
    });
    let DOMProps = ($65484d02dcb7eb3e$export$457c3d6518dd4c6f)(props);
    delete DOMProps.id;
    var _state_selectedKey;
    return /*#__PURE__*/ (React).createElement(($64fa3d84918910a7$export$2881499e37b75b9a), {
        values: [
            [
                $d01f2c01039c0eec$export$c02625b26074192c,
                state
            ],
            [
                ($01b77f81d0f07f68$export$75b6ee27786ba447),
                {
                    ...labelProps,
                    ref: labelRef
                }
            ],
            [
                ($d2b4bc8c273e7be6$export$24d547caef80ccd1),
                {
                    ...buttonProps,
                    ref: buttonRef,
                    isPressed: state.isOpen
                }
            ],
            [
                ($3985021b0ad6602f$export$37fb8590cf2c088c),
                {
                    ...inputProps,
                    ref: inputRef
                }
            ],
            [
                ($de32f1b87079253c$export$d2f961adcb0afbe),
                state
            ],
            [
                ($07b14b47974efb58$export$9b9a0cd73afb7ca4),
                {
                    ref: popoverRef,
                    triggerRef: inputRef,
                    scrollRef: listBoxRef,
                    placement: 'bottom start',
                    isNonModal: true,
                    trigger: 'ComboBox',
                    style: {
                        '--trigger-width': menuWidth
                    }
                }
            ],
            [
                ($eed445e0843c11d0$export$7ff8f37d2d81a48d),
                {
                    ...listBoxProps,
                    ref: listBoxRef
                }
            ],
            [
                ($eed445e0843c11d0$export$7c5906fe4f1f2af2),
                state
            ],
            [
                ($514c0188e459b4c0$export$9afb8bc826b033ea),
                {
                    slots: {
                        description: descriptionProps,
                        errorMessage: errorMessageProps
                    }
                }
            ],
            [
                ($a049562f99e7db0e$export$f9c6924e160136d1),
                {
                    isInvalid: validation.isInvalid,
                    isDisabled: props.isDisabled || false
                }
            ],
            [
                ($ee014567cb39d3f0$export$ff05c3ac10437e03),
                validation
            ]
        ]
    }, /*#__PURE__*/ (React).createElement("div", {
        ...DOMProps,
        ...renderProps,
        ref: ref,
        slot: props.slot || undefined,
        "data-focused": state.isFocused || undefined,
        "data-open": state.isOpen || undefined,
        "data-disabled": props.isDisabled || undefined,
        "data-invalid": validation.isInvalid || undefined,
        "data-required": props.isRequired || undefined
    }), name && formValue === 'key' && /*#__PURE__*/ (React).createElement("input", {
        type: "hidden",
        name: name,
        value: (_state_selectedKey = state.selectedKey) !== null && _state_selectedKey !== void 0 ? _state_selectedKey : ''
    }));
}
/**
 * A combo box combines a text input with a listbox, allowing users to filter a list of options to items matching a query.
 */ const $d01f2c01039c0eec$export$72b9695b8216309a = /*#__PURE__*/ (reactExports.forwardRef)($d01f2c01039c0eec$var$ComboBox);

/*
 * Copyright 2022 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 











const $40825cdb76e74f70$export$7b3e670c86da5fe8 = /*#__PURE__*/ (reactExports.createContext)(null);
const $40825cdb76e74f70$export$8e17ddc448e87c1e = /*#__PURE__*/ (reactExports.createContext)(null);
const $40825cdb76e74f70$export$3b08bebcf796eea0 = /*#__PURE__*/ (reactExports.createContext)(null);
const $40825cdb76e74f70$export$5d8dc44abd10a920 = /*#__PURE__*/ (reactExports.createContext)(null);
function $40825cdb76e74f70$var$DateField(props, ref) {
    [props, ref] = ($64fa3d84918910a7$export$29f1550f4b0d4415)(props, ref, $40825cdb76e74f70$export$7b3e670c86da5fe8);
    let { validationBehavior: formValidationBehavior } = ($64fa3d84918910a7$export$fabf2dc03a41866e)(($d3e0e05bdfcf66bd$export$c24727297075ec6a)) || {};
    var _props_validationBehavior, _ref;
    let validationBehavior = (_ref = (_props_validationBehavior = props.validationBehavior) !== null && _props_validationBehavior !== void 0 ? _props_validationBehavior : formValidationBehavior) !== null && _ref !== void 0 ? _ref : 'native';
    let { locale: locale } = ($18f2051aff69b9bf$export$43bb16f9c6d9e3f7)();
    let state = ($3c0fc76039f1c516$export$60e84778edff6d26)({
        ...props,
        locale: locale,
        createCalendar: $64244302c3013299$export$dd0bbc9b26defe37,
        validationBehavior: validationBehavior
    });
    let fieldRef = (reactExports.useRef)(null);
    let [labelRef, label] = ($64fa3d84918910a7$export$9d4c57ee4c6ffdd8)();
    let inputRef = (reactExports.useRef)(null);
    let { labelProps: labelProps, fieldProps: fieldProps, inputProps: inputProps, descriptionProps: descriptionProps, errorMessageProps: errorMessageProps, ...validation } = ($16f0b7bb276bc17e$export$5591b0b878c1a989)({
        ...($64fa3d84918910a7$export$ef03459518577ad4)(props),
        label: label,
        inputRef: inputRef,
        validationBehavior: validationBehavior
    }, state, fieldRef);
    let renderProps = ($64fa3d84918910a7$export$4d86445c2cf5e3)({
        ...($64fa3d84918910a7$export$ef03459518577ad4)(props),
        values: {
            state: state,
            isInvalid: state.isInvalid,
            isDisabled: state.isDisabled
        },
        defaultClassName: 'react-aria-DateField'
    });
    let DOMProps = ($65484d02dcb7eb3e$export$457c3d6518dd4c6f)(props);
    delete DOMProps.id;
    return /*#__PURE__*/ (React).createElement(($64fa3d84918910a7$export$2881499e37b75b9a), {
        values: [
            [
                $40825cdb76e74f70$export$3b08bebcf796eea0,
                state
            ],
            [
                ($a049562f99e7db0e$export$f9c6924e160136d1),
                {
                    ...fieldProps,
                    ref: fieldRef,
                    isInvalid: state.isInvalid
                }
            ],
            [
                ($3985021b0ad6602f$export$37fb8590cf2c088c),
                {
                    ...inputProps,
                    ref: inputRef
                }
            ],
            [
                ($01b77f81d0f07f68$export$75b6ee27786ba447),
                {
                    ...labelProps,
                    ref: labelRef,
                    elementType: 'span'
                }
            ],
            [
                ($514c0188e459b4c0$export$9afb8bc826b033ea),
                {
                    slots: {
                        description: descriptionProps,
                        errorMessage: errorMessageProps
                    }
                }
            ],
            [
                ($ee014567cb39d3f0$export$ff05c3ac10437e03),
                validation
            ]
        ]
    }, /*#__PURE__*/ (React).createElement("div", {
        ...DOMProps,
        ...renderProps,
        ref: ref,
        slot: props.slot || undefined,
        "data-invalid": state.isInvalid || undefined
    }));
}
/**
 * A date field allows users to enter and edit date and time values using a keyboard.
 * Each part of a date value is displayed in an individually editable segment.
 */ const $40825cdb76e74f70$export$d9781c7894a82487 = /*#__PURE__*/ (reactExports.forwardRef)($40825cdb76e74f70$var$DateField);
function $40825cdb76e74f70$var$TimeField(props, ref) {
    [props, ref] = ($64fa3d84918910a7$export$29f1550f4b0d4415)(props, ref, $40825cdb76e74f70$export$8e17ddc448e87c1e);
    let { validationBehavior: formValidationBehavior } = ($64fa3d84918910a7$export$fabf2dc03a41866e)(($d3e0e05bdfcf66bd$export$c24727297075ec6a)) || {};
    var _props_validationBehavior, _ref;
    let validationBehavior = (_ref = (_props_validationBehavior = props.validationBehavior) !== null && _props_validationBehavior !== void 0 ? _props_validationBehavior : formValidationBehavior) !== null && _ref !== void 0 ? _ref : 'native';
    let { locale: locale } = ($18f2051aff69b9bf$export$43bb16f9c6d9e3f7)();
    let state = ($eff5d8ee529ac4bb$export$fd53cef0cc796101)({
        ...props,
        locale: locale,
        validationBehavior: validationBehavior
    });
    let fieldRef = (reactExports.useRef)(null);
    let [labelRef, label] = ($64fa3d84918910a7$export$9d4c57ee4c6ffdd8)();
    let inputRef = (reactExports.useRef)(null);
    let { labelProps: labelProps, fieldProps: fieldProps, inputProps: inputProps, descriptionProps: descriptionProps, errorMessageProps: errorMessageProps, ...validation } = ($16f0b7bb276bc17e$export$4c842f6a241dc825)({
        ...($64fa3d84918910a7$export$ef03459518577ad4)(props),
        label: label,
        inputRef: inputRef,
        validationBehavior: validationBehavior
    }, state, fieldRef);
    let renderProps = ($64fa3d84918910a7$export$4d86445c2cf5e3)({
        ...props,
        values: {
            state: state,
            isInvalid: state.isInvalid,
            isDisabled: state.isDisabled
        },
        defaultClassName: 'react-aria-TimeField'
    });
    let DOMProps = ($65484d02dcb7eb3e$export$457c3d6518dd4c6f)(props);
    delete DOMProps.id;
    return /*#__PURE__*/ (React).createElement(($64fa3d84918910a7$export$2881499e37b75b9a), {
        values: [
            [
                $40825cdb76e74f70$export$5d8dc44abd10a920,
                state
            ],
            [
                ($a049562f99e7db0e$export$f9c6924e160136d1),
                {
                    ...fieldProps,
                    ref: fieldRef,
                    isInvalid: state.isInvalid
                }
            ],
            [
                ($3985021b0ad6602f$export$37fb8590cf2c088c),
                {
                    ...inputProps,
                    ref: inputRef
                }
            ],
            [
                ($01b77f81d0f07f68$export$75b6ee27786ba447),
                {
                    ...labelProps,
                    ref: labelRef,
                    elementType: 'span'
                }
            ],
            [
                ($514c0188e459b4c0$export$9afb8bc826b033ea),
                {
                    slots: {
                        description: descriptionProps,
                        errorMessage: errorMessageProps
                    }
                }
            ],
            [
                ($ee014567cb39d3f0$export$ff05c3ac10437e03),
                validation
            ]
        ]
    }, /*#__PURE__*/ (React).createElement("div", {
        ...DOMProps,
        ...renderProps,
        ref: ref,
        slot: props.slot || undefined,
        "data-invalid": state.isInvalid || undefined
    }));
}
/**
 * A time field allows users to enter and edit time values using a keyboard.
 * Each part of a time value is displayed in an individually editable segment.
 */ const $40825cdb76e74f70$export$5eaee2322dd727eb = /*#__PURE__*/ (reactExports.forwardRef)($40825cdb76e74f70$var$TimeField);
function $40825cdb76e74f70$var$DateInput(props, ref) {
    // If state is provided by DateField/TimeField, just render.
    // Otherwise (e.g. in DatePicker), we need to call hooks and create state ourselves.
    let dateFieldState = (reactExports.useContext)($40825cdb76e74f70$export$3b08bebcf796eea0);
    let timeFieldState = (reactExports.useContext)($40825cdb76e74f70$export$5d8dc44abd10a920);
    return dateFieldState || timeFieldState ? /*#__PURE__*/ (React).createElement($40825cdb76e74f70$var$DateInputInner, {
        ...props,
        ref: ref
    }) : /*#__PURE__*/ (React).createElement($40825cdb76e74f70$var$DateInputStandalone, {
        ...props,
        ref: ref
    });
}
const $40825cdb76e74f70$var$DateInputStandalone = /*#__PURE__*/ (reactExports.forwardRef)((props, ref)=>{
    let [dateFieldProps, fieldRef] = ($64fa3d84918910a7$export$29f1550f4b0d4415)({
        slot: props.slot
    }, ref, $40825cdb76e74f70$export$7b3e670c86da5fe8);
    let { locale: locale } = ($18f2051aff69b9bf$export$43bb16f9c6d9e3f7)();
    let state = ($3c0fc76039f1c516$export$60e84778edff6d26)({
        ...dateFieldProps,
        locale: locale,
        createCalendar: $64244302c3013299$export$dd0bbc9b26defe37
    });
    let inputRef = (reactExports.useRef)(null);
    let { fieldProps: fieldProps, inputProps: inputProps } = ($16f0b7bb276bc17e$export$5591b0b878c1a989)({
        ...dateFieldProps,
        inputRef: inputRef
    }, state, fieldRef);
    return /*#__PURE__*/ (React).createElement(($64fa3d84918910a7$export$2881499e37b75b9a), {
        values: [
            [
                $40825cdb76e74f70$export$3b08bebcf796eea0,
                state
            ],
            [
                ($3985021b0ad6602f$export$37fb8590cf2c088c),
                {
                    ...inputProps,
                    ref: inputRef
                }
            ],
            [
                ($a049562f99e7db0e$export$f9c6924e160136d1),
                {
                    ...fieldProps,
                    ref: fieldRef,
                    isInvalid: state.isInvalid
                }
            ]
        ]
    }, /*#__PURE__*/ (React).createElement($40825cdb76e74f70$var$DateInputInner, props));
});
const $40825cdb76e74f70$var$DateInputInner = /*#__PURE__*/ (reactExports.forwardRef)((props, ref)=>{
    let { className: className, children: children } = props;
    let dateFieldState = (reactExports.useContext)($40825cdb76e74f70$export$3b08bebcf796eea0);
    let timeFieldState = (reactExports.useContext)($40825cdb76e74f70$export$5d8dc44abd10a920);
    let state = dateFieldState !== null && dateFieldState !== void 0 ? dateFieldState : timeFieldState;
    return /*#__PURE__*/ (React).createElement((React).Fragment, null, /*#__PURE__*/ (React).createElement(($a049562f99e7db0e$export$eb2fcfdbd7ba97d4), {
        ...props,
        ref: ref,
        slot: props.slot || undefined,
        className: className !== null && className !== void 0 ? className : 'react-aria-DateInput',
        isInvalid: state.isInvalid
    }, state.segments.map((segment, i)=>/*#__PURE__*/ (reactExports.cloneElement)(children(segment), {
            key: i
        }))), /*#__PURE__*/ (React).createElement(($3985021b0ad6602f$export$f5b8910cec6cf069), null));
});
/**
 * A date input groups the editable date segments within a date field.
 */ const $40825cdb76e74f70$export$7edc06cf1783b30f = /*#__PURE__*/ (reactExports.forwardRef)($40825cdb76e74f70$var$DateInput);
function $40825cdb76e74f70$var$DateSegment({ segment: segment, ...otherProps }, ref) {
    let dateFieldState = (reactExports.useContext)($40825cdb76e74f70$export$3b08bebcf796eea0);
    let timeFieldState = (reactExports.useContext)($40825cdb76e74f70$export$5d8dc44abd10a920);
    let state = dateFieldState !== null && dateFieldState !== void 0 ? dateFieldState : timeFieldState;
    let domRef = ($df56164dff5785e2$export$4338b53315abf666)(ref);
    let { segmentProps: segmentProps } = ($32489daedd52963e$export$1315d136e6f7581)(segment, state, domRef);
    let { focusProps: focusProps, isFocused: isFocused, isFocusVisible: isFocusVisible } = ($f7dceffc5ad7768b$export$4e328f61c538687f)();
    let { hoverProps: hoverProps, isHovered: isHovered } = ($6179b936705e76d3$export$ae780daf29e6d456)({
        ...otherProps,
        isDisabled: state.isDisabled || segment.type === 'literal'
    });
    let renderProps = ($64fa3d84918910a7$export$4d86445c2cf5e3)({
        ...otherProps,
        values: {
            ...segment,
            isReadOnly: !segment.isEditable,
            isInvalid: state.isInvalid,
            isDisabled: state.isDisabled,
            isHovered: isHovered,
            isFocused: isFocused,
            isFocusVisible: isFocusVisible
        },
        defaultChildren: segment.text,
        defaultClassName: 'react-aria-DateSegment'
    });
    return /*#__PURE__*/ (React).createElement("div", {
        ...($3ef42575df84b30b$export$9d1611c77c2fe928)(($65484d02dcb7eb3e$export$457c3d6518dd4c6f)(otherProps), segmentProps, focusProps, hoverProps),
        ...renderProps,
        ref: domRef,
        "data-placeholder": segment.isPlaceholder || undefined,
        "data-invalid": state.isInvalid || undefined,
        "data-readonly": !segment.isEditable || undefined,
        "data-disabled": state.isDisabled || undefined,
        "data-type": segment.type,
        "data-hovered": isHovered || undefined,
        "data-focused": isFocused || undefined,
        "data-focus-visible": isFocusVisible || undefined
    });
}
/**
 * A date segment displays an individual unit of a date and time, and allows users to edit
 * the value by typing or using the arrow keys to increment and decrement.
 */ const $40825cdb76e74f70$export$336ab7fa954c4b5f = /*#__PURE__*/ (reactExports.forwardRef)($40825cdb76e74f70$var$DateSegment);

/*
 * Copyright 2022 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 














const $06d5b8ec9ee5d538$export$cf316c7f3b44c11e = /*#__PURE__*/ (reactExports.createContext)(null);
const $06d5b8ec9ee5d538$export$8282edba42ee28a = /*#__PURE__*/ (reactExports.createContext)(null);
const $06d5b8ec9ee5d538$export$50a10c048fdcdee9 = /*#__PURE__*/ (reactExports.createContext)(null);
const $06d5b8ec9ee5d538$export$80d7ae1f804790be = /*#__PURE__*/ (reactExports.createContext)(null);
function $06d5b8ec9ee5d538$var$DatePicker(props, ref) {
    [props, ref] = ($64fa3d84918910a7$export$29f1550f4b0d4415)(props, ref, $06d5b8ec9ee5d538$export$cf316c7f3b44c11e);
    let { validationBehavior: formValidationBehavior } = ($64fa3d84918910a7$export$fabf2dc03a41866e)(($d3e0e05bdfcf66bd$export$c24727297075ec6a)) || {};
    var _props_validationBehavior, _ref;
    let validationBehavior = (_ref = (_props_validationBehavior = props.validationBehavior) !== null && _props_validationBehavior !== void 0 ? _props_validationBehavior : formValidationBehavior) !== null && _ref !== void 0 ? _ref : 'native';
    let state = ($ab5bf3f618090389$export$87194bb378cc3ac2)({
        ...props,
        validationBehavior: validationBehavior
    });
    let groupRef = (reactExports.useRef)(null);
    let [labelRef, label] = ($64fa3d84918910a7$export$9d4c57ee4c6ffdd8)();
    let { groupProps: groupProps, labelProps: labelProps, fieldProps: fieldProps, buttonProps: buttonProps, dialogProps: dialogProps, calendarProps: calendarProps, descriptionProps: descriptionProps, errorMessageProps: errorMessageProps, ...validation } = ($6057a3d2a53a12fd$export$42df105a73306d51)({
        ...($64fa3d84918910a7$export$ef03459518577ad4)(props),
        label: label,
        validationBehavior: validationBehavior
    }, state, groupRef);
    // Allows calendar width to match input group
    let [groupWidth, setGroupWidth] = (reactExports.useState)(null);
    let onResize = (reactExports.useCallback)(()=>{
        if (groupRef.current) setGroupWidth(groupRef.current.offsetWidth + 'px');
    }, []);
    ($9daab02d461809db$export$683480f191c0e3ea)({
        ref: groupRef,
        onResize: onResize
    });
    let { focusProps: focusProps, isFocused: isFocused, isFocusVisible: isFocusVisible } = ($f7dceffc5ad7768b$export$4e328f61c538687f)({
        within: true
    });
    let renderProps = ($64fa3d84918910a7$export$4d86445c2cf5e3)({
        ...props,
        values: {
            state: state,
            isFocusWithin: isFocused,
            isFocusVisible: isFocusVisible,
            isDisabled: props.isDisabled || false,
            isInvalid: state.isInvalid,
            isOpen: state.isOpen
        },
        defaultClassName: 'react-aria-DatePicker'
    });
    let DOMProps = ($65484d02dcb7eb3e$export$457c3d6518dd4c6f)(props);
    delete DOMProps.id;
    return /*#__PURE__*/ (React).createElement(($64fa3d84918910a7$export$2881499e37b75b9a), {
        values: [
            [
                $06d5b8ec9ee5d538$export$50a10c048fdcdee9,
                state
            ],
            [
                ($a049562f99e7db0e$export$f9c6924e160136d1),
                {
                    ...groupProps,
                    ref: groupRef,
                    isInvalid: state.isInvalid
                }
            ],
            [
                ($40825cdb76e74f70$export$7b3e670c86da5fe8),
                fieldProps
            ],
            [
                ($d2b4bc8c273e7be6$export$24d547caef80ccd1),
                {
                    ...buttonProps,
                    isPressed: state.isOpen
                }
            ],
            [
                ($01b77f81d0f07f68$export$75b6ee27786ba447),
                {
                    ...labelProps,
                    ref: labelRef,
                    elementType: 'span'
                }
            ],
            [
                ($dfd62f934fc76fed$export$3b805cea1f178355),
                calendarProps
            ],
            [
                ($de32f1b87079253c$export$d2f961adcb0afbe),
                state
            ],
            [
                ($07b14b47974efb58$export$9b9a0cd73afb7ca4),
                {
                    trigger: 'DatePicker',
                    triggerRef: groupRef,
                    placement: 'bottom start',
                    style: {
                        '--trigger-width': groupWidth
                    }
                }
            ],
            [
                ($de32f1b87079253c$export$8b93a07348a7730c),
                dialogProps
            ],
            [
                ($514c0188e459b4c0$export$9afb8bc826b033ea),
                {
                    slots: {
                        description: descriptionProps,
                        errorMessage: errorMessageProps
                    }
                }
            ],
            [
                ($ee014567cb39d3f0$export$ff05c3ac10437e03),
                validation
            ]
        ]
    }, /*#__PURE__*/ (React).createElement("div", {
        ...focusProps,
        ...DOMProps,
        ...renderProps,
        ref: ref,
        slot: props.slot || undefined,
        "data-focus-within": isFocused || undefined,
        "data-invalid": state.isInvalid || undefined,
        "data-focus-visible": isFocusVisible || undefined,
        "data-disabled": props.isDisabled || undefined,
        "data-open": state.isOpen || undefined
    }));
}
/**
 * A date picker combines a DateField and a Calendar popover to allow users to enter or select a date and time value.
 */ const $06d5b8ec9ee5d538$export$5109c6dd95d8fb00 = /*#__PURE__*/ (reactExports.forwardRef)($06d5b8ec9ee5d538$var$DatePicker);
function $06d5b8ec9ee5d538$var$DateRangePicker(props, ref) {
    [props, ref] = ($64fa3d84918910a7$export$29f1550f4b0d4415)(props, ref, $06d5b8ec9ee5d538$export$8282edba42ee28a);
    let { validationBehavior: formValidationBehavior } = ($64fa3d84918910a7$export$fabf2dc03a41866e)(($d3e0e05bdfcf66bd$export$c24727297075ec6a)) || {};
    var _props_validationBehavior, _ref;
    let validationBehavior = (_ref = (_props_validationBehavior = props.validationBehavior) !== null && _props_validationBehavior !== void 0 ? _props_validationBehavior : formValidationBehavior) !== null && _ref !== void 0 ? _ref : 'native';
    let state = ($93c38a5e28be6249$export$e50a61c1de9f574)({
        ...props,
        validationBehavior: validationBehavior
    });
    let groupRef = (reactExports.useRef)(null);
    let [labelRef, label] = ($64fa3d84918910a7$export$9d4c57ee4c6ffdd8)();
    let { groupProps: groupProps, labelProps: labelProps, startFieldProps: startFieldProps, endFieldProps: endFieldProps, buttonProps: buttonProps, dialogProps: dialogProps, calendarProps: calendarProps, descriptionProps: descriptionProps, errorMessageProps: errorMessageProps, ...validation } = ($887cac91b7cc8801$export$12fd5f0e9f4bb192)({
        ...($64fa3d84918910a7$export$ef03459518577ad4)(props),
        label: label,
        validationBehavior: validationBehavior
    }, state, groupRef);
    // Allows calendar width to match input group
    let [groupWidth, setGroupWidth] = (reactExports.useState)(null);
    let onResize = (reactExports.useCallback)(()=>{
        if (groupRef.current) setGroupWidth(groupRef.current.offsetWidth + 'px');
    }, []);
    ($9daab02d461809db$export$683480f191c0e3ea)({
        ref: groupRef,
        onResize: onResize
    });
    let { focusProps: focusProps, isFocused: isFocused, isFocusVisible: isFocusVisible } = ($f7dceffc5ad7768b$export$4e328f61c538687f)({
        within: true
    });
    let renderProps = ($64fa3d84918910a7$export$4d86445c2cf5e3)({
        ...props,
        values: {
            state: state,
            isFocusWithin: isFocused,
            isFocusVisible: isFocusVisible,
            isDisabled: props.isDisabled || false,
            isInvalid: state.isInvalid,
            isOpen: state.isOpen
        },
        defaultClassName: 'react-aria-DateRangePicker'
    });
    let DOMProps = ($65484d02dcb7eb3e$export$457c3d6518dd4c6f)(props);
    delete DOMProps.id;
    return /*#__PURE__*/ (React).createElement(($64fa3d84918910a7$export$2881499e37b75b9a), {
        values: [
            [
                $06d5b8ec9ee5d538$export$80d7ae1f804790be,
                state
            ],
            [
                ($a049562f99e7db0e$export$f9c6924e160136d1),
                {
                    ...groupProps,
                    ref: groupRef,
                    isInvalid: state.isInvalid
                }
            ],
            [
                ($d2b4bc8c273e7be6$export$24d547caef80ccd1),
                {
                    ...buttonProps,
                    isPressed: state.isOpen
                }
            ],
            [
                ($01b77f81d0f07f68$export$75b6ee27786ba447),
                {
                    ...labelProps,
                    ref: labelRef,
                    elementType: 'span'
                }
            ],
            [
                ($dfd62f934fc76fed$export$233dd9682e1ad64b),
                calendarProps
            ],
            [
                ($de32f1b87079253c$export$d2f961adcb0afbe),
                state
            ],
            [
                ($07b14b47974efb58$export$9b9a0cd73afb7ca4),
                {
                    trigger: 'DateRangePicker',
                    triggerRef: groupRef,
                    placement: 'bottom start',
                    style: {
                        '--trigger-width': groupWidth
                    }
                }
            ],
            [
                ($de32f1b87079253c$export$8b93a07348a7730c),
                dialogProps
            ],
            [
                ($40825cdb76e74f70$export$7b3e670c86da5fe8),
                {
                    slots: {
                        start: startFieldProps,
                        end: endFieldProps
                    }
                }
            ],
            [
                ($514c0188e459b4c0$export$9afb8bc826b033ea),
                {
                    slots: {
                        description: descriptionProps,
                        errorMessage: errorMessageProps
                    }
                }
            ],
            [
                ($ee014567cb39d3f0$export$ff05c3ac10437e03),
                validation
            ]
        ]
    }, /*#__PURE__*/ (React).createElement("div", {
        ...focusProps,
        ...DOMProps,
        ...renderProps,
        ref: ref,
        slot: props.slot || undefined,
        "data-focus-within": isFocused || undefined,
        "data-invalid": state.isInvalid || undefined,
        "data-focus-visible": isFocusVisible || undefined,
        "data-disabled": props.isDisabled || undefined,
        "data-open": state.isOpen || undefined
    }));
}
/**
 * A date range picker combines two DateFields and a RangeCalendar popover to allow
 * users to enter or select a date and time range.
 */ const $06d5b8ec9ee5d538$export$17334619f3ac2224 = /*#__PURE__*/ (reactExports.forwardRef)($06d5b8ec9ee5d538$var$DateRangePicker);

/*
 * Copyright 2022 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 











const $72e60046c03fbe42$export$54fe942636b6416d = /*#__PURE__*/ (reactExports.createContext)(null);
function $72e60046c03fbe42$var$GridList(props, ref) {
    // Render the portal first so that we have the collection by the time we render the DOM in SSR.
    [props, ref] = ($64fa3d84918910a7$export$29f1550f4b0d4415)(props, ref, $72e60046c03fbe42$export$54fe942636b6416d);
    return /*#__PURE__*/ (React).createElement(($e1995378a142960e$export$bf788dd355e3a401), {
        content: /*#__PURE__*/ (React).createElement(($e1995378a142960e$export$fb8073518f34e6ec), props)
    }, (collection)=>/*#__PURE__*/ (React).createElement($72e60046c03fbe42$var$GridListInner, {
            props: props,
            collection: collection,
            gridListRef: ref
        }));
}
function $72e60046c03fbe42$var$GridListInner({ props: props, collection: collection, gridListRef: ref }) {
    let { dragAndDropHooks: dragAndDropHooks, keyboardNavigationBehavior: keyboardNavigationBehavior = 'arrow', layout: layout = 'stack' } = props;
    let { CollectionRoot: CollectionRoot, isVirtualized: isVirtualized, layoutDelegate: layoutDelegate, dropTargetDelegate: ctxDropTargetDelegate } = (reactExports.useContext)(($7135fc7d473fd974$export$4feb769f8ddf26c5));
    let state = ($e72dd72e1c76a225$export$2f645645f7bca764)({
        ...props,
        collection: collection,
        children: undefined
    });
    let collator = ($325a3faab7a68acd$export$a16aca283550c30d)({
        usage: 'search',
        sensitivity: 'base'
    });
    let { disabledBehavior: disabledBehavior, disabledKeys: disabledKeys } = state.selectionManager;
    let { direction: direction } = ($18f2051aff69b9bf$export$43bb16f9c6d9e3f7)();
    let keyboardDelegate = (reactExports.useMemo)(()=>new ($2a25aae57d74318e$export$a05409b8bb224a5a)({
            collection: collection,
            collator: collator,
            ref: ref,
            disabledKeys: disabledKeys,
            disabledBehavior: disabledBehavior,
            layoutDelegate: layoutDelegate,
            layout: layout,
            direction: direction
        }), [
        collection,
        ref,
        layout,
        disabledKeys,
        disabledBehavior,
        layoutDelegate,
        collator,
        direction
    ]);
    let { gridProps: gridProps } = ($f47efb0c3a859cf2$export$664f9155035607eb)({
        ...props,
        keyboardDelegate: keyboardDelegate,
        // Only tab navigation is supported in grid layout.
        keyboardNavigationBehavior: layout === 'grid' ? 'tab' : keyboardNavigationBehavior,
        isVirtualized: isVirtualized
    }, state, ref);
    let selectionManager = state.selectionManager;
    let isListDraggable = !!(dragAndDropHooks === null || dragAndDropHooks === void 0 ? void 0 : dragAndDropHooks.useDraggableCollectionState);
    let isListDroppable = !!(dragAndDropHooks === null || dragAndDropHooks === void 0 ? void 0 : dragAndDropHooks.useDroppableCollectionState);
    let dragHooksProvided = (reactExports.useRef)(isListDraggable);
    let dropHooksProvided = (reactExports.useRef)(isListDroppable);
    (reactExports.useEffect)(()=>{
        if (dragHooksProvided.current !== isListDraggable) console.warn('Drag hooks were provided during one render, but not another. This should be avoided as it may produce unexpected behavior.');
        if (dropHooksProvided.current !== isListDroppable) console.warn('Drop hooks were provided during one render, but not another. This should be avoided as it may produce unexpected behavior.');
    }, [
        isListDraggable,
        isListDroppable
    ]);
    let dragState = undefined;
    let dropState = undefined;
    let droppableCollection = undefined;
    let isRootDropTarget = false;
    let dragPreview = null;
    let preview = (reactExports.useRef)(null);
    if (isListDraggable && dragAndDropHooks) {
        dragState = dragAndDropHooks.useDraggableCollectionState({
            collection: collection,
            selectionManager: selectionManager,
            preview: dragAndDropHooks.renderDragPreview ? preview : undefined
        });
        dragAndDropHooks.useDraggableCollection({}, dragState, ref);
        let DragPreview = dragAndDropHooks.DragPreview;
        dragPreview = dragAndDropHooks.renderDragPreview ? /*#__PURE__*/ (React).createElement(DragPreview, {
            ref: preview
        }, dragAndDropHooks.renderDragPreview) : null;
    }
    if (isListDroppable && dragAndDropHooks) {
        dropState = dragAndDropHooks.useDroppableCollectionState({
            collection: collection,
            selectionManager: selectionManager
        });
        let keyboardDelegate = new ($2a25aae57d74318e$export$a05409b8bb224a5a)({
            collection: collection,
            disabledKeys: selectionManager.disabledKeys,
            disabledBehavior: selectionManager.disabledBehavior,
            ref: ref
        });
        let dropTargetDelegate = dragAndDropHooks.dropTargetDelegate || ctxDropTargetDelegate || new dragAndDropHooks.ListDropTargetDelegate(collection, ref, {
            layout: layout,
            direction: direction
        });
        droppableCollection = dragAndDropHooks.useDroppableCollection({
            keyboardDelegate: keyboardDelegate,
            dropTargetDelegate: dropTargetDelegate
        }, dropState, ref);
        isRootDropTarget = dropState.isDropTarget({
            type: 'root'
        });
    }
    let { focusProps: focusProps, isFocused: isFocused, isFocusVisible: isFocusVisible } = ($f7dceffc5ad7768b$export$4e328f61c538687f)();
    let renderValues = {
        isDropTarget: isRootDropTarget,
        isEmpty: state.collection.size === 0,
        isFocused: isFocused,
        isFocusVisible: isFocusVisible,
        layout: layout,
        state: state
    };
    let renderProps = ($64fa3d84918910a7$export$4d86445c2cf5e3)({
        className: props.className,
        style: props.style,
        defaultClassName: 'react-aria-GridList',
        values: renderValues
    });
    let emptyState = null;
    let emptyStatePropOverrides = null;
    if (state.collection.size === 0 && props.renderEmptyState) {
        let content = props.renderEmptyState(renderValues);
        emptyState = /*#__PURE__*/ (React).createElement("div", {
            role: "row",
            style: {
                display: 'contents'
            }
        }, /*#__PURE__*/ (React).createElement("div", {
            role: "gridcell",
            style: {
                display: 'contents'
            }
        }, content));
    }
    return /*#__PURE__*/ (React).createElement(($9bf71ea28793e738$export$20e40289641fbbb6), null, /*#__PURE__*/ (React).createElement("div", {
        ...($65484d02dcb7eb3e$export$457c3d6518dd4c6f)(props),
        ...renderProps,
        ...($3ef42575df84b30b$export$9d1611c77c2fe928)(gridProps, focusProps, droppableCollection === null || droppableCollection === void 0 ? void 0 : droppableCollection.collectionProps, emptyStatePropOverrides),
        ref: ref,
        slot: props.slot || undefined,
        onScroll: props.onScroll,
        "data-drop-target": isRootDropTarget || undefined,
        "data-empty": state.collection.size === 0 || undefined,
        "data-focused": isFocused || undefined,
        "data-focus-visible": isFocusVisible || undefined,
        "data-layout": layout
    }, /*#__PURE__*/ (React).createElement(($64fa3d84918910a7$export$2881499e37b75b9a), {
        values: [
            [
                ($eed445e0843c11d0$export$7c5906fe4f1f2af2),
                state
            ],
            [
                ($612b8eb6cb90e02d$export$d188a835a7bc5783),
                {
                    dragAndDropHooks: dragAndDropHooks,
                    dragState: dragState,
                    dropState: dropState
                }
            ],
            [
                ($612b8eb6cb90e02d$export$f55761759794cf55),
                {
                    render: $72e60046c03fbe42$var$GridListDropIndicatorWrapper
                }
            ]
        ]
    }, isListDroppable && /*#__PURE__*/ (React).createElement($72e60046c03fbe42$var$RootDropIndicator, null), /*#__PURE__*/ (React).createElement(CollectionRoot, {
        collection: collection,
        scrollRef: ref,
        persistedKeys: ($612b8eb6cb90e02d$export$d1e8e3fbb7461f6)(selectionManager, dragAndDropHooks, dropState),
        renderDropIndicator: ($612b8eb6cb90e02d$export$971707d8a129a1f7)(dragAndDropHooks, dropState)
    })), emptyState, dragPreview));
}
/**
 * A grid list displays a list of interactive items, with support for keyboard navigation,
 * single or multiple selection, and row actions.
 */ const $72e60046c03fbe42$export$a7bfbda1311ca015 = /*#__PURE__*/ (reactExports.forwardRef)($72e60046c03fbe42$var$GridList);
const $72e60046c03fbe42$export$e96fc9a8407faa6b = /*#__PURE__*/ ($e1995378a142960e$export$18af5c7a9e9b3664)('item', function GridListItem(props, forwardedRef, item) {
    let state = (reactExports.useContext)(($eed445e0843c11d0$export$7c5906fe4f1f2af2));
    let { dragAndDropHooks: dragAndDropHooks, dragState: dragState, dropState: dropState } = (reactExports.useContext)(($612b8eb6cb90e02d$export$d188a835a7bc5783));
    let ref = ($df56164dff5785e2$export$4338b53315abf666)(forwardedRef);
    let { isVirtualized: isVirtualized } = (reactExports.useContext)(($7135fc7d473fd974$export$4feb769f8ddf26c5));
    let { rowProps: rowProps, gridCellProps: gridCellProps, descriptionProps: descriptionProps, ...states } = ($4e8b0456ef72939f$export$9610e69494fadfd2)({
        node: item,
        shouldSelectOnPressUp: !!dragState,
        isVirtualized: isVirtualized
    }, state, ref);
    let { hoverProps: hoverProps, isHovered: isHovered } = ($6179b936705e76d3$export$ae780daf29e6d456)({
        isDisabled: !states.allowsSelection && !states.hasAction,
        onHoverStart: item.props.onHoverStart,
        onHoverChange: item.props.onHoverChange,
        onHoverEnd: item.props.onHoverEnd
    });
    let { isFocusVisible: isFocusVisible, focusProps: focusProps } = ($f7dceffc5ad7768b$export$4e328f61c538687f)();
    let { checkboxProps: checkboxProps } = ($e52ffc04a4adbd52$export$e29f2573fabbf7b9)({
        key: item.key
    }, state);
    let buttonProps = state.selectionManager.disabledBehavior === 'all' && states.isDisabled ? {
        isDisabled: true
    } : {};
    let draggableItem = null;
    if (dragState && dragAndDropHooks) draggableItem = dragAndDropHooks.useDraggableItem({
        key: item.key,
        hasDragButton: true
    }, dragState);
    let dropIndicator = null;
    let dropIndicatorRef = (reactExports.useRef)(null);
    let { visuallyHiddenProps: visuallyHiddenProps } = ($5c3e21d68f1c4674$export$a966af930f325cab)();
    if (dropState && dragAndDropHooks) dropIndicator = dragAndDropHooks.useDropIndicator({
        target: {
            type: 'item',
            key: item.key,
            dropPosition: 'on'
        }
    }, dropState, dropIndicatorRef);
    let isDragging = dragState && dragState.isDragging(item.key);
    let renderProps = ($64fa3d84918910a7$export$4d86445c2cf5e3)({
        ...props,
        id: undefined,
        children: item.rendered,
        defaultClassName: 'react-aria-GridListItem',
        values: {
            ...states,
            isHovered: isHovered,
            isFocusVisible: isFocusVisible,
            selectionMode: state.selectionManager.selectionMode,
            selectionBehavior: state.selectionManager.selectionBehavior,
            allowsDragging: !!dragState,
            isDragging: isDragging,
            isDropTarget: dropIndicator === null || dropIndicator === void 0 ? void 0 : dropIndicator.isDropTarget
        }
    });
    let dragButtonRef = (reactExports.useRef)(null);
    (reactExports.useEffect)(()=>{
        if (dragState && !dragButtonRef.current) console.warn('Draggable items in a GridList must contain a <Button slot="drag"> element so that keyboard and screen reader users can drag them.');
    // eslint-disable-next-line
    }, []);
    (reactExports.useEffect)(()=>{
        if (!item.textValue) console.warn('A `textValue` prop is required for <GridListItem> elements with non-plain text children in order to support accessibility features such as type to select.');
    }, [
        item.textValue
    ]);
    return /*#__PURE__*/ (React).createElement((React).Fragment, null, dropIndicator && !dropIndicator.isHidden && /*#__PURE__*/ (React).createElement("div", {
        role: "row",
        style: {
            position: 'absolute'
        }
    }, /*#__PURE__*/ (React).createElement("div", {
        role: "gridcell"
    }, /*#__PURE__*/ (React).createElement("div", {
        role: "button",
        ...visuallyHiddenProps,
        ...dropIndicator === null || dropIndicator === void 0 ? void 0 : dropIndicator.dropIndicatorProps,
        ref: dropIndicatorRef
    }))), /*#__PURE__*/ (React).createElement("div", {
        ...($3ef42575df84b30b$export$9d1611c77c2fe928)(($65484d02dcb7eb3e$export$457c3d6518dd4c6f)(props), rowProps, focusProps, hoverProps, draggableItem === null || draggableItem === void 0 ? void 0 : draggableItem.dragProps),
        ...renderProps,
        ref: ref,
        "data-selected": states.isSelected || undefined,
        "data-disabled": states.isDisabled || undefined,
        "data-hovered": isHovered || undefined,
        "data-focused": states.isFocused || undefined,
        "data-focus-visible": isFocusVisible || undefined,
        "data-pressed": states.isPressed || undefined,
        "data-allows-dragging": !!dragState || undefined,
        "data-dragging": isDragging || undefined,
        "data-drop-target": (dropIndicator === null || dropIndicator === void 0 ? void 0 : dropIndicator.isDropTarget) || undefined,
        "data-selection-mode": state.selectionManager.selectionMode === 'none' ? undefined : state.selectionManager.selectionMode
    }, /*#__PURE__*/ (React).createElement("div", {
        ...gridCellProps,
        style: {
            display: 'contents'
        }
    }, /*#__PURE__*/ (React).createElement(($64fa3d84918910a7$export$2881499e37b75b9a), {
        values: [
            [
                ($4e85f108e88277b8$export$b085522c77523c51),
                {
                    slots: {
                        selection: checkboxProps
                    }
                }
            ],
            [
                ($d2b4bc8c273e7be6$export$24d547caef80ccd1),
                {
                    slots: {
                        [($64fa3d84918910a7$export$c62b8e45d58ddad9)]: buttonProps,
                        drag: {
                            ...draggableItem === null || draggableItem === void 0 ? void 0 : draggableItem.dragButtonProps,
                            ref: dragButtonRef,
                            style: {
                                pointerEvents: 'none'
                            }
                        }
                    }
                }
            ],
            [
                ($514c0188e459b4c0$export$9afb8bc826b033ea),
                {
                    slots: {
                        description: descriptionProps
                    }
                }
            ],
            [
                ($7135fc7d473fd974$export$4feb769f8ddf26c5),
                ($7135fc7d473fd974$export$a164736487e3f0ae)
            ],
            [
                ($eed445e0843c11d0$export$7c5906fe4f1f2af2),
                null
            ]
        ]
    }, renderProps.children))));
});
function $72e60046c03fbe42$var$GridListDropIndicatorWrapper(props, ref) {
    ref = ($df56164dff5785e2$export$4338b53315abf666)(ref);
    let { dragAndDropHooks: dragAndDropHooks, dropState: dropState } = (reactExports.useContext)(($612b8eb6cb90e02d$export$d188a835a7bc5783));
    let buttonRef = (reactExports.useRef)(null);
    let { dropIndicatorProps: dropIndicatorProps, isHidden: isHidden, isDropTarget: isDropTarget } = dragAndDropHooks.useDropIndicator(props, dropState, buttonRef);
    if (isHidden) return null;
    return /*#__PURE__*/ (React).createElement($72e60046c03fbe42$var$GridListDropIndicatorForwardRef, {
        ...props,
        dropIndicatorProps: dropIndicatorProps,
        isDropTarget: isDropTarget,
        buttonRef: buttonRef,
        ref: ref
    });
}
function $72e60046c03fbe42$var$GridListDropIndicator(props, ref) {
    let { dropIndicatorProps: dropIndicatorProps, isDropTarget: isDropTarget, buttonRef: buttonRef, ...otherProps } = props;
    let { visuallyHiddenProps: visuallyHiddenProps } = ($5c3e21d68f1c4674$export$a966af930f325cab)();
    let renderProps = ($64fa3d84918910a7$export$4d86445c2cf5e3)({
        ...otherProps,
        defaultClassName: 'react-aria-DropIndicator',
        values: {
            isDropTarget: isDropTarget
        }
    });
    return /*#__PURE__*/ (React).createElement("div", {
        ...renderProps,
        role: "row",
        ref: ref,
        "data-drop-target": isDropTarget || undefined
    }, /*#__PURE__*/ (React).createElement("div", {
        role: "gridcell"
    }, /*#__PURE__*/ (React).createElement("div", {
        ...visuallyHiddenProps,
        role: "button",
        ...dropIndicatorProps,
        ref: buttonRef
    }), renderProps.children));
}
const $72e60046c03fbe42$var$GridListDropIndicatorForwardRef = /*#__PURE__*/ (reactExports.forwardRef)($72e60046c03fbe42$var$GridListDropIndicator);
function $72e60046c03fbe42$var$RootDropIndicator() {
    let { dragAndDropHooks: dragAndDropHooks, dropState: dropState } = (reactExports.useContext)(($612b8eb6cb90e02d$export$d188a835a7bc5783));
    let ref = (reactExports.useRef)(null);
    let { dropIndicatorProps: dropIndicatorProps } = dragAndDropHooks.useDropIndicator({
        target: {
            type: 'root'
        }
    }, dropState, ref);
    let isDropTarget = dropState.isDropTarget({
        type: 'root'
    });
    let { visuallyHiddenProps: visuallyHiddenProps } = ($5c3e21d68f1c4674$export$a966af930f325cab)();
    if (!isDropTarget && dropIndicatorProps['aria-hidden']) return null;
    return /*#__PURE__*/ (React).createElement("div", {
        role: "row",
        "aria-hidden": dropIndicatorProps['aria-hidden'],
        style: {
            position: 'absolute'
        }
    }, /*#__PURE__*/ (React).createElement("div", {
        role: "gridcell"
    }, /*#__PURE__*/ (React).createElement("div", {
        role: "button",
        ...visuallyHiddenProps,
        ...dropIndicatorProps,
        ref: ref
    })));
}

/*
 * Copyright 2022 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 


function $5cb03073d3f54797$var$Heading(props, ref) {
    [props, ref] = ($64fa3d84918910a7$export$29f1550f4b0d4415)(props, ref, ($4e85f108e88277b8$export$d688439359537581));
    let { children: children, level: level = 3, className: className, ...domProps } = props;
    let Element = `h${level}`;
    return /*#__PURE__*/ (React).createElement(Element, {
        ...domProps,
        ref: ref,
        className: className !== null && className !== void 0 ? className : 'react-aria-Heading'
    }, children);
}
const $5cb03073d3f54797$export$a8a3e93435678ff9 = /*#__PURE__*/ (reactExports.forwardRef)($5cb03073d3f54797$var$Heading);

/*
 * Copyright 2022 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 

const $63df2425e2108aa8$export$744d98a3b8a94e1c = /*#__PURE__*/ (reactExports.createContext)({});

/*
 * Copyright 2022 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 















const $3674c52c6b3c5bce$export$c7e742effb1c51e2 = /*#__PURE__*/ (reactExports.createContext)(null);
const $3674c52c6b3c5bce$export$24aad8519b95b41b = /*#__PURE__*/ (reactExports.createContext)(null);
const $3674c52c6b3c5bce$export$795aec4671cbae19 = /*#__PURE__*/ (reactExports.createContext)(null);
function $3674c52c6b3c5bce$export$27d2ad3c5815583e(props) {
    let state = ($a28c903ee9ad8dc5$export$79fefeb1c2091ac3)(props);
    let ref = (reactExports.useRef)(null);
    let { menuTriggerProps: menuTriggerProps, menuProps: menuProps } = ($168583247155ddda$export$dc9c12ed27dd1b49)({
        ...props,
        type: 'menu'
    }, state, ref);
    // Allows menu width to match button
    let [buttonWidth, setButtonWidth] = (reactExports.useState)(null);
    let onResize = (reactExports.useCallback)(()=>{
        if (ref.current) setButtonWidth(ref.current.offsetWidth + 'px');
    }, [
        ref
    ]);
    ($9daab02d461809db$export$683480f191c0e3ea)({
        ref: ref,
        onResize: onResize
    });
    let scrollRef = (reactExports.useRef)(null);
    return /*#__PURE__*/ (React).createElement(($64fa3d84918910a7$export$2881499e37b75b9a), {
        values: [
            [
                $3674c52c6b3c5bce$export$c7e742effb1c51e2,
                {
                    ...menuProps,
                    ref: scrollRef
                }
            ],
            [
                ($de32f1b87079253c$export$d2f961adcb0afbe),
                state
            ],
            [
                $3674c52c6b3c5bce$export$795aec4671cbae19,
                state
            ],
            [
                ($07b14b47974efb58$export$9b9a0cd73afb7ca4),
                {
                    trigger: 'MenuTrigger',
                    triggerRef: ref,
                    scrollRef: scrollRef,
                    placement: 'bottom start',
                    style: {
                        '--trigger-width': buttonWidth
                    }
                }
            ]
        ]
    }, /*#__PURE__*/ (React).createElement(($f1ab8c75478c6f73$export$3351871ee4b288b8), {
        ...menuTriggerProps,
        ref: ref,
        isPressed: state.isOpen
    }, props.children));
}
const $3674c52c6b3c5bce$var$SubmenuTriggerContext = /*#__PURE__*/ (reactExports.createContext)(null);
function $3674c52c6b3c5bce$var$Menu(props, ref) {
    [props, ref] = ($64fa3d84918910a7$export$29f1550f4b0d4415)(props, ref, $3674c52c6b3c5bce$export$c7e742effb1c51e2);
    // Delay rendering the actual menu until we have the collection so that auto focus works properly.
    return /*#__PURE__*/ (React).createElement(($e1995378a142960e$export$bf788dd355e3a401), {
        content: /*#__PURE__*/ (React).createElement(($e1995378a142960e$export$fb8073518f34e6ec), props)
    }, (collection)=>collection.size > 0 && /*#__PURE__*/ (React).createElement($3674c52c6b3c5bce$var$MenuInner, {
            props: props,
            collection: collection,
            menuRef: ref
        }));
}
function $3674c52c6b3c5bce$var$MenuInner({ props: props, collection: collection, menuRef: ref }) {
    let state = ($875d6693e12af071$export$728d6ba534403756)({
        ...props,
        collection: collection,
        children: undefined
    });
    let [popoverContainer, setPopoverContainer] = (reactExports.useState)(null);
    let { isVirtualized: isVirtualized, CollectionRoot: CollectionRoot } = (reactExports.useContext)(($7135fc7d473fd974$export$4feb769f8ddf26c5));
    let { menuProps: menuProps } = ($d5336fe17ce95402$export$38eaa17faae8f579)({
        ...props,
        isVirtualized: isVirtualized
    }, state, ref);
    let rootMenuTriggerState = (reactExports.useContext)($3674c52c6b3c5bce$export$795aec4671cbae19);
    let popoverContext = (reactExports.useContext)(($07b14b47974efb58$export$9b9a0cd73afb7ca4));
    let isSubmenu = (popoverContext === null || popoverContext === void 0 ? void 0 : popoverContext.trigger) === 'SubmenuTrigger';
    ($e0b6e0b68ec7f50f$export$872b660ac5a1ff98)({
        ref: ref,
        onInteractOutside: (e)=>{
            if (rootMenuTriggerState && !(popoverContainer === null || popoverContainer === void 0 ? void 0 : popoverContainer.contains(e.target))) rootMenuTriggerState.close();
        },
        isDisabled: isSubmenu || (rootMenuTriggerState === null || rootMenuTriggerState === void 0 ? void 0 : rootMenuTriggerState.expandedKeysStack.length) === 0
    });
    let prevPopoverContainer = (reactExports.useRef)(null);
    let [leftOffset, setLeftOffset] = (reactExports.useState)({
        left: 0
    });
    (reactExports.useEffect)(()=>{
        if (popoverContainer && prevPopoverContainer.current !== popoverContainer && leftOffset.left === 0) {
            prevPopoverContainer.current = popoverContainer;
            let { left: left } = popoverContainer.getBoundingClientRect();
            setLeftOffset({
                left: -1 * left
            });
        }
    }, [
        leftOffset,
        popoverContainer
    ]);
    let renderProps = ($64fa3d84918910a7$export$4d86445c2cf5e3)({
        defaultClassName: 'react-aria-Menu',
        className: props.className,
        style: props.style,
        values: {}
    });
    return /*#__PURE__*/ (React).createElement(($9bf71ea28793e738$export$20e40289641fbbb6), null, /*#__PURE__*/ (React).createElement("div", {
        ...($65484d02dcb7eb3e$export$457c3d6518dd4c6f)(props),
        ...menuProps,
        ...renderProps,
        ref: ref,
        slot: props.slot || undefined,
        onScroll: props.onScroll
    }, /*#__PURE__*/ (React).createElement(($64fa3d84918910a7$export$2881499e37b75b9a), {
        values: [
            [
                $3674c52c6b3c5bce$export$24aad8519b95b41b,
                state
            ],
            [
                ($431f98aba6844401$export$6615d83f6de245ce),
                {
                    elementType: 'div'
                }
            ],
            [
                ($07b14b47974efb58$export$9b9a0cd73afb7ca4),
                {
                    UNSTABLE_portalContainer: popoverContainer || undefined
                }
            ],
            [
                ($7135fc7d473fd974$export$d40e14dec8b060a8),
                {
                    render: $3674c52c6b3c5bce$var$MenuSection
                }
            ],
            [
                $3674c52c6b3c5bce$var$SubmenuTriggerContext,
                {
                    parentMenuRef: ref
                }
            ],
            [
                $3674c52c6b3c5bce$var$MenuItemContext,
                null
            ]
        ]
    }, /*#__PURE__*/ (React).createElement(CollectionRoot, {
        collection: collection,
        persistedKeys: ($7135fc7d473fd974$export$90e00781bc59d8f9)(state.selectionManager.focusedKey),
        scrollRef: ref
    }))), /*#__PURE__*/ (React).createElement("div", {
        ref: setPopoverContainer,
        style: {
            width: '100vw',
            position: 'absolute',
            top: 0,
            ...leftOffset
        }
    }));
}
/**
 * A menu displays a list of actions or options that a user can choose.
 */ const $3674c52c6b3c5bce$export$d9b273488cd8ce6f = /*#__PURE__*/ (reactExports.forwardRef)($3674c52c6b3c5bce$var$Menu);
function $3674c52c6b3c5bce$var$MenuSection(props, ref, section) {
    var _section_props, _section_props1;
    let state = (reactExports.useContext)($3674c52c6b3c5bce$export$24aad8519b95b41b);
    let { CollectionBranch: CollectionBranch } = (reactExports.useContext)(($7135fc7d473fd974$export$4feb769f8ddf26c5));
    let [headingRef, heading] = ($64fa3d84918910a7$export$9d4c57ee4c6ffdd8)();
    var _section_props_arialabel;
    let { headingProps: headingProps, groupProps: groupProps } = ($3e5eb2498db5b506$export$73f7a44322579622)({
        heading: heading,
        'aria-label': (_section_props_arialabel = section.props['aria-label']) !== null && _section_props_arialabel !== void 0 ? _section_props_arialabel : undefined
    });
    let renderProps = ($64fa3d84918910a7$export$4d86445c2cf5e3)({
        defaultClassName: 'react-aria-Section',
        className: (_section_props = section.props) === null || _section_props === void 0 ? void 0 : _section_props.className,
        style: (_section_props1 = section.props) === null || _section_props1 === void 0 ? void 0 : _section_props1.style,
        values: {}
    });
    return /*#__PURE__*/ (React).createElement("section", {
        ...($65484d02dcb7eb3e$export$457c3d6518dd4c6f)(props),
        ...groupProps,
        ...renderProps,
        ref: ref
    }, /*#__PURE__*/ (React).createElement(($72a5793c14baf454$export$e0e4026c12a8bdbb).Provider, {
        value: {
            ...headingProps,
            ref: headingRef
        }
    }, /*#__PURE__*/ (React).createElement(CollectionBranch, {
        collection: state.collection,
        parent: section
    })));
}
const $3674c52c6b3c5bce$var$MenuItemContext = /*#__PURE__*/ (reactExports.createContext)(null);
const $3674c52c6b3c5bce$export$2ce376c2cc3355c8 = /*#__PURE__*/ ($e1995378a142960e$export$18af5c7a9e9b3664)('item', function MenuItem(props, forwardedRef, item) {
    var _useSlottedContext;
    [props, forwardedRef] = ($64fa3d84918910a7$export$29f1550f4b0d4415)(props, forwardedRef, $3674c52c6b3c5bce$var$MenuItemContext);
    let id = (_useSlottedContext = ($64fa3d84918910a7$export$fabf2dc03a41866e)($3674c52c6b3c5bce$var$MenuItemContext)) === null || _useSlottedContext === void 0 ? void 0 : _useSlottedContext.id;
    let state = (reactExports.useContext)($3674c52c6b3c5bce$export$24aad8519b95b41b);
    let ref = ($df56164dff5785e2$export$4338b53315abf666)(forwardedRef);
    let { menuItemProps: menuItemProps, labelProps: labelProps, descriptionProps: descriptionProps, keyboardShortcutProps: keyboardShortcutProps, ...states } = ($a2e5df62f93c7633$export$9d32628fc2aea7da)({
        ...props,
        id: id,
        key: item.key
    }, state, ref);
    let { isFocusVisible: isFocusVisible, focusProps: focusProps } = ($f7dceffc5ad7768b$export$4e328f61c538687f)();
    let { hoverProps: hoverProps, isHovered: isHovered } = ($6179b936705e76d3$export$ae780daf29e6d456)({
        isDisabled: states.isDisabled
    });
    let renderProps = ($64fa3d84918910a7$export$4d86445c2cf5e3)({
        ...props,
        id: undefined,
        children: item.rendered,
        defaultClassName: 'react-aria-MenuItem',
        values: {
            ...states,
            isHovered: isHovered,
            isFocusVisible: isFocusVisible,
            selectionMode: state.selectionManager.selectionMode,
            selectionBehavior: state.selectionManager.selectionBehavior,
            hasSubmenu: !!props['aria-haspopup'],
            isOpen: props['aria-expanded'] === 'true'
        }
    });
    let ElementType = props.href ? 'a' : 'div';
    return /*#__PURE__*/ (React).createElement(ElementType, {
        ...($3ef42575df84b30b$export$9d1611c77c2fe928)(menuItemProps, focusProps, hoverProps),
        ...renderProps,
        ref: ref,
        "data-disabled": states.isDisabled || undefined,
        "data-hovered": isHovered || undefined,
        "data-focused": states.isFocused || undefined,
        "data-focus-visible": isFocusVisible || undefined,
        "data-pressed": states.isPressed || undefined,
        "data-selected": states.isSelected || undefined,
        "data-selection-mode": state.selectionManager.selectionMode === 'none' ? undefined : state.selectionManager.selectionMode,
        "data-has-submenu": !!props['aria-haspopup'] || undefined,
        "data-open": props['aria-expanded'] === 'true' || undefined
    }, /*#__PURE__*/ (React).createElement(($64fa3d84918910a7$export$2881499e37b75b9a), {
        values: [
            [
                ($514c0188e459b4c0$export$9afb8bc826b033ea),
                {
                    slots: {
                        label: labelProps,
                        description: descriptionProps
                    }
                }
            ],
            [
                ($63df2425e2108aa8$export$744d98a3b8a94e1c),
                keyboardShortcutProps
            ]
        ]
    }, renderProps.children));
});

/*
 * Copyright 2022 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 




const $c0c9ced265f3594c$export$8b645da15a96b44f = /*#__PURE__*/ (reactExports.createContext)(null);
function $c0c9ced265f3594c$var$Meter(props, ref) {
    [props, ref] = ($64fa3d84918910a7$export$29f1550f4b0d4415)(props, ref, $c0c9ced265f3594c$export$8b645da15a96b44f);
    let { value: value = 0, minValue: minValue = 0, maxValue: maxValue = 100 } = props;
    value = ($9446cca9a3875146$export$7d15b64cf5a3a4c4)(value, minValue, maxValue);
    let [labelRef, label] = ($64fa3d84918910a7$export$9d4c57ee4c6ffdd8)();
    let { meterProps: meterProps, labelProps: labelProps } = ($0002d7e1d16de204$export$e969dbfa146870ff)({
        ...props,
        label: label
    });
    // Calculate the width of the progress bar as a percentage
    let percentage = (value - minValue) / (maxValue - minValue) * 100;
    let renderProps = ($64fa3d84918910a7$export$4d86445c2cf5e3)({
        ...props,
        defaultClassName: 'react-aria-Meter',
        values: {
            percentage: percentage,
            valueText: meterProps['aria-valuetext']
        }
    });
    return /*#__PURE__*/ (React).createElement("div", {
        ...meterProps,
        ...renderProps,
        ref: ref,
        slot: props.slot || undefined
    }, /*#__PURE__*/ (React).createElement(($01b77f81d0f07f68$export$75b6ee27786ba447).Provider, {
        value: {
            ...labelProps,
            ref: labelRef,
            elementType: 'span'
        }
    }, renderProps.children));
}
/**
 * A meter represents a quantity within a known range, or a fractional value.
 */ const $c0c9ced265f3594c$export$62e3ae2a4090b879 = /*#__PURE__*/ (reactExports.forwardRef)($c0c9ced265f3594c$var$Meter);

/*
 * Copyright 2022 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 





const $f3f84453ead64de5$export$ab57792b9b6974a6 = /*#__PURE__*/ (reactExports.createContext)(null);
const $f3f84453ead64de5$var$InternalModalContext = /*#__PURE__*/ (reactExports.createContext)(null);
function $f3f84453ead64de5$var$Modal(props, ref) {
    let ctx = (reactExports.useContext)($f3f84453ead64de5$var$InternalModalContext);
    if (ctx) return /*#__PURE__*/ (React).createElement($f3f84453ead64de5$var$ModalContent, {
        ...props,
        modalRef: ref
    }, props.children);
    let { isDismissable: isDismissable, isKeyboardDismissDisabled: isKeyboardDismissDisabled, isOpen: isOpen, defaultOpen: defaultOpen, onOpenChange: onOpenChange, children: children, isEntering: isEntering, isExiting: isExiting, UNSTABLE_portalContainer: UNSTABLE_portalContainer, shouldCloseOnInteractOutside: shouldCloseOnInteractOutside, ...otherProps } = props;
    return /*#__PURE__*/ (React).createElement($f3f84453ead64de5$export$8948f78d83984c69, {
        isDismissable: isDismissable,
        isKeyboardDismissDisabled: isKeyboardDismissDisabled,
        isOpen: isOpen,
        defaultOpen: defaultOpen,
        onOpenChange: onOpenChange,
        isEntering: isEntering,
        isExiting: isExiting,
        UNSTABLE_portalContainer: UNSTABLE_portalContainer,
        shouldCloseOnInteractOutside: shouldCloseOnInteractOutside
    }, /*#__PURE__*/ (React).createElement($f3f84453ead64de5$var$ModalContent, {
        ...otherProps,
        modalRef: ref
    }, children));
}
/**
 * A modal is an overlay element which blocks interaction with elements outside it.
 */ const $f3f84453ead64de5$export$2b77a92f1a5ad772 = /*#__PURE__*/ (reactExports.forwardRef)($f3f84453ead64de5$var$Modal);
function $f3f84453ead64de5$var$ModalOverlayWithForwardRef(props, ref) {
    [props, ref] = ($64fa3d84918910a7$export$29f1550f4b0d4415)(props, ref, $f3f84453ead64de5$export$ab57792b9b6974a6);
    let contextState = (reactExports.useContext)(($de32f1b87079253c$export$d2f961adcb0afbe));
    let localState = ($fc909762b330b746$export$61c6a8c84e605fb6)(props);
    let state = props.isOpen != null || props.defaultOpen != null || !contextState ? localState : contextState;
    let objectRef = ($df56164dff5785e2$export$4338b53315abf666)(ref);
    let modalRef = (reactExports.useRef)(null);
    let isOverlayExiting = ($64fa3d84918910a7$export$45fda7c47f93fd48)(objectRef, state.isOpen);
    let isModalExiting = ($64fa3d84918910a7$export$45fda7c47f93fd48)(modalRef, state.isOpen);
    let isExiting = isOverlayExiting || isModalExiting || props.isExiting || false;
    let isSSR = ($b5e257d569688ac6$export$535bd6ca7f90a273)();
    if (!state.isOpen && !isExiting || isSSR) return null;
    return /*#__PURE__*/ (React).createElement($f3f84453ead64de5$var$ModalOverlayInner, {
        ...props,
        state: state,
        isExiting: isExiting,
        overlayRef: objectRef,
        modalRef: modalRef
    });
}
const $f3f84453ead64de5$export$8948f78d83984c69 = /*#__PURE__*/ (reactExports.forwardRef)($f3f84453ead64de5$var$ModalOverlayWithForwardRef);
function $f3f84453ead64de5$var$ModalOverlayInner({ UNSTABLE_portalContainer: UNSTABLE_portalContainer, ...props }) {
    let modalRef = props.modalRef;
    let { state: state } = props;
    let { modalProps: modalProps, underlayProps: underlayProps } = ($8ac8429251c45e4b$export$dbc0f175b25fb0fb)(props, state, modalRef);
    let entering = ($64fa3d84918910a7$export$6d3443f2c48bfc20)(props.overlayRef) || props.isEntering || false;
    let renderProps = ($64fa3d84918910a7$export$4d86445c2cf5e3)({
        ...props,
        defaultClassName: 'react-aria-ModalOverlay',
        values: {
            isEntering: entering,
            isExiting: props.isExiting,
            state: state
        }
    });
    let viewport = ($5df64b3807dc15ee$export$d699905dd57c73ca)();
    let style = {
        ...renderProps.style,
        '--visual-viewport-height': viewport.height + 'px'
    };
    return /*#__PURE__*/ (React).createElement(($337b884510726a0d$export$c6fdb837b070b4ff), {
        isExiting: props.isExiting,
        portalContainer: UNSTABLE_portalContainer
    }, /*#__PURE__*/ (React).createElement("div", {
        ...($3ef42575df84b30b$export$9d1611c77c2fe928)(($65484d02dcb7eb3e$export$457c3d6518dd4c6f)(props), underlayProps),
        ...renderProps,
        style: style,
        ref: props.overlayRef,
        "data-entering": entering || undefined,
        "data-exiting": props.isExiting || undefined
    }, /*#__PURE__*/ (React).createElement(($64fa3d84918910a7$export$2881499e37b75b9a), {
        values: [
            [
                $f3f84453ead64de5$var$InternalModalContext,
                {
                    modalProps: modalProps,
                    modalRef: modalRef,
                    isExiting: props.isExiting,
                    isDismissable: props.isDismissable
                }
            ],
            [
                ($de32f1b87079253c$export$d2f961adcb0afbe),
                state
            ]
        ]
    }, renderProps.children)));
}
function $f3f84453ead64de5$var$ModalContent(props) {
    let { modalProps: modalProps, modalRef: modalRef, isExiting: isExiting, isDismissable: isDismissable } = (reactExports.useContext)($f3f84453ead64de5$var$InternalModalContext);
    let state = (reactExports.useContext)(($de32f1b87079253c$export$d2f961adcb0afbe));
    let mergedRefs = (reactExports.useMemo)(()=>($5dc95899b306f630$export$c9058316764c140e)(props.modalRef, modalRef), [
        props.modalRef,
        modalRef
    ]);
    let ref = ($df56164dff5785e2$export$4338b53315abf666)(mergedRefs);
    let entering = ($64fa3d84918910a7$export$6d3443f2c48bfc20)(ref);
    let renderProps = ($64fa3d84918910a7$export$4d86445c2cf5e3)({
        ...props,
        defaultClassName: 'react-aria-Modal',
        values: {
            isEntering: entering,
            isExiting: isExiting,
            state: state
        }
    });
    return /*#__PURE__*/ (React).createElement("div", {
        ...($3ef42575df84b30b$export$9d1611c77c2fe928)(($65484d02dcb7eb3e$export$457c3d6518dd4c6f)(props), modalProps),
        ...renderProps,
        ref: ref,
        "data-entering": entering || undefined,
        "data-exiting": isExiting || undefined
    }, isDismissable && /*#__PURE__*/ (React).createElement(($86ea4cb521eb2e37$export$2317d149ed6f78c4), {
        onDismiss: state.close
    }), renderProps.children);
}

/*
 * Copyright 2022 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 











const $b91743d66a0ed188$export$b414a48cf5dcbc11 = /*#__PURE__*/ (reactExports.createContext)(null);
const $b91743d66a0ed188$export$6cc906c6cff9bec5 = /*#__PURE__*/ (reactExports.createContext)(null);
function $b91743d66a0ed188$var$NumberField(props, ref) {
    [props, ref] = ($64fa3d84918910a7$export$29f1550f4b0d4415)(props, ref, $b91743d66a0ed188$export$b414a48cf5dcbc11);
    let { validationBehavior: formValidationBehavior } = ($64fa3d84918910a7$export$fabf2dc03a41866e)(($d3e0e05bdfcf66bd$export$c24727297075ec6a)) || {};
    var _props_validationBehavior, _ref;
    let validationBehavior = (_ref = (_props_validationBehavior = props.validationBehavior) !== null && _props_validationBehavior !== void 0 ? _props_validationBehavior : formValidationBehavior) !== null && _ref !== void 0 ? _ref : 'native';
    let { locale: locale } = ($18f2051aff69b9bf$export$43bb16f9c6d9e3f7)();
    let state = ($de67e98908f0c6ee$export$7f629e9dc1ecf37c)({
        ...props,
        locale: locale,
        validationBehavior: validationBehavior
    });
    let inputRef = (reactExports.useRef)(null);
    let [labelRef, label] = ($64fa3d84918910a7$export$9d4c57ee4c6ffdd8)();
    let { labelProps: labelProps, groupProps: groupProps, inputProps: inputProps, incrementButtonProps: incrementButtonProps, decrementButtonProps: decrementButtonProps, descriptionProps: descriptionProps, errorMessageProps: errorMessageProps, ...validation } = ($81397a9303501bda$export$23f548e970bdf099)({
        ...($64fa3d84918910a7$export$ef03459518577ad4)(props),
        label: label,
        validationBehavior: validationBehavior
    }, state, inputRef);
    let renderProps = ($64fa3d84918910a7$export$4d86445c2cf5e3)({
        ...props,
        values: {
            state: state,
            isDisabled: props.isDisabled || false,
            isInvalid: validation.isInvalid || false
        },
        defaultClassName: 'react-aria-NumberField'
    });
    let DOMProps = ($65484d02dcb7eb3e$export$457c3d6518dd4c6f)(props);
    delete DOMProps.id;
    return /*#__PURE__*/ (React).createElement(($64fa3d84918910a7$export$2881499e37b75b9a), {
        values: [
            [
                $b91743d66a0ed188$export$6cc906c6cff9bec5,
                state
            ],
            [
                ($a049562f99e7db0e$export$f9c6924e160136d1),
                groupProps
            ],
            [
                ($3985021b0ad6602f$export$37fb8590cf2c088c),
                {
                    ...inputProps,
                    ref: inputRef
                }
            ],
            [
                ($01b77f81d0f07f68$export$75b6ee27786ba447),
                {
                    ...labelProps,
                    ref: labelRef
                }
            ],
            [
                ($d2b4bc8c273e7be6$export$24d547caef80ccd1),
                {
                    slots: {
                        increment: incrementButtonProps,
                        decrement: decrementButtonProps
                    }
                }
            ],
            [
                ($514c0188e459b4c0$export$9afb8bc826b033ea),
                {
                    slots: {
                        description: descriptionProps,
                        errorMessage: errorMessageProps
                    }
                }
            ],
            [
                ($ee014567cb39d3f0$export$ff05c3ac10437e03),
                validation
            ]
        ]
    }, /*#__PURE__*/ (React).createElement("div", {
        ...DOMProps,
        ...renderProps,
        ref: ref,
        slot: props.slot || undefined,
        "data-disabled": props.isDisabled || undefined,
        "data-invalid": validation.isInvalid || undefined
    }), props.name && /*#__PURE__*/ (React).createElement("input", {
        type: "hidden",
        name: props.name,
        value: isNaN(state.numberValue) ? '' : state.numberValue
    }));
}
/**
 * A number field allows a user to enter a number, and increment or decrement the value using stepper buttons.
 */ const $b91743d66a0ed188$export$63c5fa0b2fdccd2e = /*#__PURE__*/ (reactExports.forwardRef)($b91743d66a0ed188$var$NumberField);

/*
 * Copyright 2022 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 




const $0393f8ab869a0f1a$export$e9f3bf65a26ce129 = /*#__PURE__*/ (reactExports.createContext)(null);
function $0393f8ab869a0f1a$var$ProgressBar(props, ref) {
    [props, ref] = ($64fa3d84918910a7$export$29f1550f4b0d4415)(props, ref, $0393f8ab869a0f1a$export$e9f3bf65a26ce129);
    let { value: value = 0, minValue: minValue = 0, maxValue: maxValue = 100, isIndeterminate: isIndeterminate = false } = props;
    value = ($9446cca9a3875146$export$7d15b64cf5a3a4c4)(value, minValue, maxValue);
    let [labelRef, label] = ($64fa3d84918910a7$export$9d4c57ee4c6ffdd8)();
    let { progressBarProps: progressBarProps, labelProps: labelProps } = ($204d9ebcedfb8806$export$ed5abd763a836edc)({
        ...props,
        label: label
    });
    // Calculate the width of the progress bar as a percentage
    let percentage = isIndeterminate ? undefined : (value - minValue) / (maxValue - minValue) * 100;
    let renderProps = ($64fa3d84918910a7$export$4d86445c2cf5e3)({
        ...props,
        defaultClassName: 'react-aria-ProgressBar',
        values: {
            percentage: percentage,
            valueText: progressBarProps['aria-valuetext'],
            isIndeterminate: isIndeterminate
        }
    });
    return /*#__PURE__*/ (React).createElement("div", {
        ...progressBarProps,
        ...renderProps,
        ref: ref,
        slot: props.slot || undefined
    }, /*#__PURE__*/ (React).createElement(($01b77f81d0f07f68$export$75b6ee27786ba447).Provider, {
        value: {
            ...labelProps,
            ref: labelRef,
            elementType: 'span'
        }
    }, renderProps.children));
}
/**
 * Progress bars show either determinate or indeterminate progress of an operation
 * over time.
 */ const $0393f8ab869a0f1a$export$c17561cb55d4db30 = /*#__PURE__*/ (reactExports.forwardRef)($0393f8ab869a0f1a$var$ProgressBar);

/*
 * Copyright 2022 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 








const $b6c3ddc6086f204d$export$a79eda4ff50e30b6 = /*#__PURE__*/ (reactExports.createContext)(null);
const $b6c3ddc6086f204d$export$b118023277d4a5c3 = /*#__PURE__*/ (reactExports.createContext)(null);
const $b6c3ddc6086f204d$export$29d84393af70866c = /*#__PURE__*/ (reactExports.createContext)(null);
function $b6c3ddc6086f204d$var$RadioGroup(props, ref) {
    [props, ref] = ($64fa3d84918910a7$export$29f1550f4b0d4415)(props, ref, $b6c3ddc6086f204d$export$a79eda4ff50e30b6);
    let { validationBehavior: formValidationBehavior } = ($64fa3d84918910a7$export$fabf2dc03a41866e)(($d3e0e05bdfcf66bd$export$c24727297075ec6a)) || {};
    var _props_validationBehavior, _ref;
    let validationBehavior = (_ref = (_props_validationBehavior = props.validationBehavior) !== null && _props_validationBehavior !== void 0 ? _props_validationBehavior : formValidationBehavior) !== null && _ref !== void 0 ? _ref : 'native';
    let state = ($a54cdc5c1942b639$export$bca9d026f8e704eb)({
        ...props,
        validationBehavior: validationBehavior
    });
    let [labelRef, label] = ($64fa3d84918910a7$export$9d4c57ee4c6ffdd8)();
    let { radioGroupProps: radioGroupProps, labelProps: labelProps, descriptionProps: descriptionProps, errorMessageProps: errorMessageProps, ...validation } = ($430f30ed08ec25fa$export$62b9571f283ff5c2)({
        ...props,
        label: label,
        validationBehavior: validationBehavior
    }, state);
    let renderProps = ($64fa3d84918910a7$export$4d86445c2cf5e3)({
        ...props,
        values: {
            orientation: props.orientation || 'vertical',
            isDisabled: state.isDisabled,
            isReadOnly: state.isReadOnly,
            isRequired: state.isRequired,
            isInvalid: state.isInvalid,
            state: state
        },
        defaultClassName: 'react-aria-RadioGroup'
    });
    return /*#__PURE__*/ (React).createElement("div", {
        ...radioGroupProps,
        ...renderProps,
        ref: ref,
        slot: props.slot || undefined,
        "data-orientation": props.orientation || 'vertical',
        "data-invalid": state.isInvalid || undefined,
        "data-disabled": state.isDisabled || undefined,
        "data-readonly": state.isReadOnly || undefined,
        "data-required": state.isRequired || undefined
    }, /*#__PURE__*/ (React).createElement(($64fa3d84918910a7$export$2881499e37b75b9a), {
        values: [
            [
                $b6c3ddc6086f204d$export$29d84393af70866c,
                state
            ],
            [
                ($01b77f81d0f07f68$export$75b6ee27786ba447),
                {
                    ...labelProps,
                    ref: labelRef,
                    elementType: 'span'
                }
            ],
            [
                ($514c0188e459b4c0$export$9afb8bc826b033ea),
                {
                    slots: {
                        description: descriptionProps,
                        errorMessage: errorMessageProps
                    }
                }
            ],
            [
                ($ee014567cb39d3f0$export$ff05c3ac10437e03),
                validation
            ]
        ]
    }, renderProps.children));
}
function $b6c3ddc6086f204d$var$Radio(props, ref) {
    let { inputRef: userProvidedInputRef = null, ...otherProps } = props;
    [props, ref] = ($64fa3d84918910a7$export$29f1550f4b0d4415)(otherProps, ref, $b6c3ddc6086f204d$export$b118023277d4a5c3);
    let state = (React).useContext($b6c3ddc6086f204d$export$29d84393af70866c);
    let inputRef = ($df56164dff5785e2$export$4338b53315abf666)(($5dc95899b306f630$export$c9058316764c140e)(userProvidedInputRef, props.inputRef !== undefined ? props.inputRef : null));
    let { labelProps: labelProps, inputProps: inputProps, isSelected: isSelected, isDisabled: isDisabled, isPressed: isPressed } = ($0d5c49892c1215da$export$37b0961d2f4751e2)({
        ...($64fa3d84918910a7$export$ef03459518577ad4)(props),
        // ReactNode type doesn't allow function children.
        children: typeof props.children === 'function' ? true : props.children
    }, state, inputRef);
    let { isFocused: isFocused, isFocusVisible: isFocusVisible, focusProps: focusProps } = ($f7dceffc5ad7768b$export$4e328f61c538687f)();
    let interactionDisabled = isDisabled || state.isReadOnly;
    let { hoverProps: hoverProps, isHovered: isHovered } = ($6179b936705e76d3$export$ae780daf29e6d456)({
        ...props,
        isDisabled: interactionDisabled
    });
    let renderProps = ($64fa3d84918910a7$export$4d86445c2cf5e3)({
        ...props,
        defaultClassName: 'react-aria-Radio',
        values: {
            isSelected: isSelected,
            isPressed: isPressed,
            isHovered: isHovered,
            isFocused: isFocused,
            isFocusVisible: isFocusVisible,
            isDisabled: isDisabled,
            isReadOnly: state.isReadOnly,
            isInvalid: state.isInvalid,
            isRequired: state.isRequired
        }
    });
    let DOMProps = ($65484d02dcb7eb3e$export$457c3d6518dd4c6f)(props);
    delete DOMProps.id;
    return /*#__PURE__*/ (React).createElement("label", {
        ...($3ef42575df84b30b$export$9d1611c77c2fe928)(DOMProps, labelProps, hoverProps, renderProps),
        ref: ref,
        "data-selected": isSelected || undefined,
        "data-pressed": isPressed || undefined,
        "data-hovered": isHovered || undefined,
        "data-focused": isFocused || undefined,
        "data-focus-visible": isFocusVisible || undefined,
        "data-disabled": isDisabled || undefined,
        "data-readonly": state.isReadOnly || undefined,
        "data-invalid": state.isInvalid || undefined,
        "data-required": state.isRequired || undefined
    }, /*#__PURE__*/ (React).createElement(($5c3e21d68f1c4674$export$439d29a4e110a164), {
        elementType: "span"
    }, /*#__PURE__*/ (React).createElement("input", {
        ...($3ef42575df84b30b$export$9d1611c77c2fe928)(inputProps, focusProps),
        ref: inputRef
    })), renderProps.children);
}
/**
 * A radio group allows a user to select a single item from a list of mutually exclusive options.
 */ const $b6c3ddc6086f204d$export$a98f0dcb43a68a25 = /*#__PURE__*/ (reactExports.forwardRef)($b6c3ddc6086f204d$var$RadioGroup);
/**
 * A radio represents an individual option within a radio group.
 */ const $b6c3ddc6086f204d$export$d7b12c4107be0d61 = /*#__PURE__*/ (reactExports.forwardRef)($b6c3ddc6086f204d$var$Radio);

/*
 * Copyright 2022 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 











const $440f4836bcb56932$export$d1c4e4c63cb03a11 = /*#__PURE__*/ (reactExports.createContext)(null);
function $440f4836bcb56932$var$SearchField(props, ref) {
    [props, ref] = ($64fa3d84918910a7$export$29f1550f4b0d4415)(props, ref, $440f4836bcb56932$export$d1c4e4c63cb03a11);
    let { validationBehavior: formValidationBehavior } = ($64fa3d84918910a7$export$fabf2dc03a41866e)(($d3e0e05bdfcf66bd$export$c24727297075ec6a)) || {};
    var _props_validationBehavior, _ref;
    let validationBehavior = (_ref = (_props_validationBehavior = props.validationBehavior) !== null && _props_validationBehavior !== void 0 ? _props_validationBehavior : formValidationBehavior) !== null && _ref !== void 0 ? _ref : 'native';
    let inputRef = (reactExports.useRef)(null);
    let [labelRef, label] = ($64fa3d84918910a7$export$9d4c57ee4c6ffdd8)();
    let state = ($0b2218c4e3fe7d7e$export$3f8be18b0f41eaf2)({
        ...props,
        validationBehavior: validationBehavior
    });
    let { labelProps: labelProps, inputProps: inputProps, clearButtonProps: clearButtonProps, descriptionProps: descriptionProps, errorMessageProps: errorMessageProps, ...validation } = ($4d52238874b24f86$export$9bb30bbe003b82e0)({
        ...($64fa3d84918910a7$export$ef03459518577ad4)(props),
        label: label,
        validationBehavior: validationBehavior
    }, state, inputRef);
    let renderProps = ($64fa3d84918910a7$export$4d86445c2cf5e3)({
        ...props,
        values: {
            isEmpty: state.value === '',
            isDisabled: props.isDisabled || false,
            isInvalid: validation.isInvalid || false,
            state: state
        },
        defaultClassName: 'react-aria-SearchField'
    });
    let DOMProps = ($65484d02dcb7eb3e$export$457c3d6518dd4c6f)(props);
    delete DOMProps.id;
    return /*#__PURE__*/ (React).createElement("div", {
        ...DOMProps,
        ...renderProps,
        ref: ref,
        slot: props.slot || undefined,
        "data-empty": state.value === '' || undefined,
        "data-disabled": props.isDisabled || undefined,
        "data-invalid": validation.isInvalid || undefined
    }, /*#__PURE__*/ (React).createElement(($64fa3d84918910a7$export$2881499e37b75b9a), {
        values: [
            [
                ($01b77f81d0f07f68$export$75b6ee27786ba447),
                {
                    ...labelProps,
                    ref: labelRef
                }
            ],
            [
                ($3985021b0ad6602f$export$37fb8590cf2c088c),
                {
                    ...inputProps,
                    ref: inputRef
                }
            ],
            [
                ($d2b4bc8c273e7be6$export$24d547caef80ccd1),
                clearButtonProps
            ],
            [
                ($514c0188e459b4c0$export$9afb8bc826b033ea),
                {
                    slots: {
                        description: descriptionProps,
                        errorMessage: errorMessageProps
                    }
                }
            ],
            [
                ($a049562f99e7db0e$export$f9c6924e160136d1),
                {
                    isInvalid: validation.isInvalid,
                    isDisabled: props.isDisabled || false
                }
            ],
            [
                ($ee014567cb39d3f0$export$ff05c3ac10437e03),
                validation
            ]
        ]
    }, renderProps.children));
}
/**
 * A search field allows a user to enter and clear a search query.
 */ const $440f4836bcb56932$export$b94867ecbd698f21 = /*#__PURE__*/ (reactExports.forwardRef)($440f4836bcb56932$var$SearchField);

function $parcel$interopDefault(a) {
  return a && a.__esModule ? a.default : a;
}
/*
 * Copyright 2022 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 














const $82d7e5349645de74$export$7540cee5be7dc19b = /*#__PURE__*/ (reactExports.createContext)(null);
const $82d7e5349645de74$export$ef445b55be0601bd = /*#__PURE__*/ (reactExports.createContext)(null);
function $82d7e5349645de74$var$Select(props, ref) {
    [props, ref] = ($64fa3d84918910a7$export$29f1550f4b0d4415)(props, ref, $82d7e5349645de74$export$7540cee5be7dc19b);
    let { children: children, isDisabled: isDisabled = false, isInvalid: isInvalid = false, isRequired: isRequired = false } = props;
    let content = (reactExports.useMemo)(()=>typeof children === 'function' ? children({
            isOpen: false,
            isDisabled: isDisabled,
            isInvalid: isInvalid,
            isRequired: isRequired,
            isFocused: false,
            isFocusVisible: false,
            defaultChildren: null
        }) : children, [
        children,
        isDisabled,
        isInvalid,
        isRequired
    ]);
    return /*#__PURE__*/ (React).createElement(($e1995378a142960e$export$bf788dd355e3a401), {
        content: content
    }, (collection)=>/*#__PURE__*/ (React).createElement($82d7e5349645de74$var$SelectInner, {
            props: props,
            collection: collection,
            selectRef: ref
        }));
}
function $82d7e5349645de74$var$SelectInner({ props: props, selectRef: ref, collection: collection }) {
    let { validationBehavior: formValidationBehavior } = ($64fa3d84918910a7$export$fabf2dc03a41866e)(($d3e0e05bdfcf66bd$export$c24727297075ec6a)) || {};
    var _props_validationBehavior, _ref;
    let validationBehavior = (_ref = (_props_validationBehavior = props.validationBehavior) !== null && _props_validationBehavior !== void 0 ? _props_validationBehavior : formValidationBehavior) !== null && _ref !== void 0 ? _ref : 'native';
    let state = ($2bc3a590c5373a4e$export$5159ec8b34d4ec12)({
        ...props,
        collection: collection,
        children: undefined,
        validationBehavior: validationBehavior
    });
    let { isFocusVisible: isFocusVisible, focusProps: focusProps } = ($f7dceffc5ad7768b$export$4e328f61c538687f)({
        within: true
    });
    // Get props for child elements from useSelect
    let buttonRef = (reactExports.useRef)(null);
    let [labelRef, label] = ($64fa3d84918910a7$export$9d4c57ee4c6ffdd8)();
    let { labelProps: labelProps, triggerProps: triggerProps, valueProps: valueProps, menuProps: menuProps, descriptionProps: descriptionProps, errorMessageProps: errorMessageProps, ...validation } = ($58aed456727eb0f3$export$e64b2f635402ca43)({
        ...($64fa3d84918910a7$export$ef03459518577ad4)(props),
        label: label,
        validationBehavior: validationBehavior
    }, state, buttonRef);
    // Make menu width match input + button
    let [buttonWidth, setButtonWidth] = (reactExports.useState)(null);
    let onResize = (reactExports.useCallback)(()=>{
        if (buttonRef.current) setButtonWidth(buttonRef.current.offsetWidth + 'px');
    }, [
        buttonRef
    ]);
    ($9daab02d461809db$export$683480f191c0e3ea)({
        ref: buttonRef,
        onResize: onResize
    });
    // Only expose a subset of state to renderProps function to avoid infinite render loop
    let renderPropsState = (reactExports.useMemo)(()=>({
            isOpen: state.isOpen,
            isFocused: state.isFocused,
            isFocusVisible: isFocusVisible,
            isDisabled: props.isDisabled || false,
            isInvalid: validation.isInvalid || false,
            isRequired: props.isRequired || false
        }), [
        state.isOpen,
        state.isFocused,
        isFocusVisible,
        props.isDisabled,
        validation.isInvalid,
        props.isRequired
    ]);
    let renderProps = ($64fa3d84918910a7$export$4d86445c2cf5e3)({
        ...props,
        values: renderPropsState,
        defaultClassName: 'react-aria-Select'
    });
    let DOMProps = ($65484d02dcb7eb3e$export$457c3d6518dd4c6f)(props);
    delete DOMProps.id;
    let scrollRef = (reactExports.useRef)(null);
    return /*#__PURE__*/ (React).createElement(($64fa3d84918910a7$export$2881499e37b75b9a), {
        values: [
            [
                $82d7e5349645de74$export$7540cee5be7dc19b,
                props
            ],
            [
                $82d7e5349645de74$export$ef445b55be0601bd,
                state
            ],
            [
                $82d7e5349645de74$export$f8f745c04421623f,
                valueProps
            ],
            [
                ($01b77f81d0f07f68$export$75b6ee27786ba447),
                {
                    ...labelProps,
                    ref: labelRef,
                    elementType: 'span'
                }
            ],
            [
                ($d2b4bc8c273e7be6$export$24d547caef80ccd1),
                {
                    ...triggerProps,
                    ref: buttonRef,
                    isPressed: state.isOpen
                }
            ],
            [
                ($de32f1b87079253c$export$d2f961adcb0afbe),
                state
            ],
            [
                ($07b14b47974efb58$export$9b9a0cd73afb7ca4),
                {
                    trigger: 'Select',
                    triggerRef: buttonRef,
                    scrollRef: scrollRef,
                    placement: 'bottom start',
                    style: {
                        '--trigger-width': buttonWidth
                    }
                }
            ],
            [
                ($eed445e0843c11d0$export$7ff8f37d2d81a48d),
                {
                    ...menuProps,
                    ref: scrollRef
                }
            ],
            [
                ($eed445e0843c11d0$export$7c5906fe4f1f2af2),
                state
            ],
            [
                ($514c0188e459b4c0$export$9afb8bc826b033ea),
                {
                    slots: {
                        description: descriptionProps,
                        errorMessage: errorMessageProps
                    }
                }
            ],
            [
                ($ee014567cb39d3f0$export$ff05c3ac10437e03),
                validation
            ]
        ]
    }, /*#__PURE__*/ (React).createElement("div", {
        ...DOMProps,
        ...renderProps,
        ...focusProps,
        ref: ref,
        slot: props.slot || undefined,
        "data-focused": state.isFocused || undefined,
        "data-focus-visible": isFocusVisible || undefined,
        "data-open": state.isOpen || undefined,
        "data-disabled": props.isDisabled || undefined,
        "data-invalid": validation.isInvalid || undefined,
        "data-required": props.isRequired || undefined
    }), /*#__PURE__*/ (React).createElement(($bdd25dc72710631f$export$cbd84cdb2e668835), {
        state: state,
        triggerRef: buttonRef,
        label: label,
        name: props.name,
        isDisabled: props.isDisabled
    }));
}
/**
 * A select displays a collapsible list of options and allows a user to select one of them.
 */ const $82d7e5349645de74$export$ef9b1a59e592288f = /*#__PURE__*/ (reactExports.forwardRef)($82d7e5349645de74$var$Select);
const $82d7e5349645de74$export$f8f745c04421623f = /*#__PURE__*/ (reactExports.createContext)(null);
function $82d7e5349645de74$var$SelectValue(props, ref) {
    var _state_selectedItem, _state_selectedItem1;
    [props, ref] = ($64fa3d84918910a7$export$29f1550f4b0d4415)(props, ref, $82d7e5349645de74$export$f8f745c04421623f);
    let state = (reactExports.useContext)($82d7e5349645de74$export$ef445b55be0601bd);
    let { placeholder: placeholder } = ($64fa3d84918910a7$export$fabf2dc03a41866e)($82d7e5349645de74$export$7540cee5be7dc19b);
    let selectedItem = state.selectedKey != null ? state.collection.getItem(state.selectedKey) : null;
    let rendered = selectedItem === null || selectedItem === void 0 ? void 0 : selectedItem.props.children;
    if (typeof rendered === 'function') {
        // If the selected item has a function as a child, we need to call it to render to React.JSX.
        let fn = rendered;
        rendered = fn({
            isHovered: false,
            isPressed: false,
            isSelected: false,
            isFocused: false,
            isFocusVisible: false,
            isDisabled: false,
            selectionMode: 'single',
            selectionBehavior: 'toggle'
        });
    }
    let stringFormatter = ($fca6afa0e843324b$export$f12b703ca79dfbb1)((($parcel$interopDefault($df39c1238ae2b5f3$exports))), 'react-aria-components');
    var _state_selectedItem_value, _state_selectedItem_textValue;
    let renderProps = ($64fa3d84918910a7$export$4d86445c2cf5e3)({
        ...props,
        defaultChildren: rendered || placeholder || stringFormatter.format('selectPlaceholder'),
        defaultClassName: 'react-aria-SelectValue',
        values: {
            selectedItem: (_state_selectedItem_value = (_state_selectedItem = state.selectedItem) === null || _state_selectedItem === void 0 ? void 0 : _state_selectedItem.value) !== null && _state_selectedItem_value !== void 0 ? _state_selectedItem_value : null,
            selectedText: (_state_selectedItem_textValue = (_state_selectedItem1 = state.selectedItem) === null || _state_selectedItem1 === void 0 ? void 0 : _state_selectedItem1.textValue) !== null && _state_selectedItem_textValue !== void 0 ? _state_selectedItem_textValue : null,
            isPlaceholder: !selectedItem
        }
    });
    let DOMProps = ($65484d02dcb7eb3e$export$457c3d6518dd4c6f)(props);
    return /*#__PURE__*/ (React).createElement("span", {
        ref: ref,
        ...DOMProps,
        ...renderProps,
        "data-placeholder": !selectedItem || undefined
    }, /*#__PURE__*/ (React).createElement(($514c0188e459b4c0$export$9afb8bc826b033ea).Provider, {
        value: undefined
    }, renderProps.children));
}
/**
 * SelectValue renders the current value of a Select, or a placeholder if no value is selected.
 * It is usually placed within the button element.
 */ const $82d7e5349645de74$export$e288731fd71264f0 = /*#__PURE__*/ (reactExports.forwardRef)($82d7e5349645de74$var$SelectValue);

/*
 * Copyright 2022 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 




const $8e59e948500a8fe1$export$8699e3b644d5a28a = /*#__PURE__*/ (reactExports.createContext)(null);
function $8e59e948500a8fe1$var$Switch(props, ref) {
    let { inputRef: userProvidedInputRef = null, ...otherProps } = props;
    [props, ref] = ($64fa3d84918910a7$export$29f1550f4b0d4415)(otherProps, ref, $8e59e948500a8fe1$export$8699e3b644d5a28a);
    let inputRef = ($df56164dff5785e2$export$4338b53315abf666)(($5dc95899b306f630$export$c9058316764c140e)(userProvidedInputRef, props.inputRef !== undefined ? props.inputRef : null));
    let state = ($3017fa7ffdddec74$export$8042c6c013fd5226)(props);
    let { labelProps: labelProps, inputProps: inputProps, isSelected: isSelected, isDisabled: isDisabled, isReadOnly: isReadOnly, isPressed: isPressed } = ($b418ec0c85c52f27$export$d853f7095ae95f88)({
        ...($64fa3d84918910a7$export$ef03459518577ad4)(props),
        // ReactNode type doesn't allow function children.
        children: typeof props.children === 'function' ? true : props.children
    }, state, inputRef);
    let { isFocused: isFocused, isFocusVisible: isFocusVisible, focusProps: focusProps } = ($f7dceffc5ad7768b$export$4e328f61c538687f)();
    let isInteractionDisabled = props.isDisabled || props.isReadOnly;
    let { hoverProps: hoverProps, isHovered: isHovered } = ($6179b936705e76d3$export$ae780daf29e6d456)({
        ...props,
        isDisabled: isInteractionDisabled
    });
    let renderProps = ($64fa3d84918910a7$export$4d86445c2cf5e3)({
        ...props,
        defaultClassName: 'react-aria-Switch',
        values: {
            isSelected: isSelected,
            isPressed: isPressed,
            isHovered: isHovered,
            isFocused: isFocused,
            isFocusVisible: isFocusVisible,
            isDisabled: isDisabled,
            isReadOnly: isReadOnly,
            state: state
        }
    });
    let DOMProps = ($65484d02dcb7eb3e$export$457c3d6518dd4c6f)(props);
    delete DOMProps.id;
    return /*#__PURE__*/ (React).createElement("label", {
        ...($3ef42575df84b30b$export$9d1611c77c2fe928)(DOMProps, labelProps, hoverProps, renderProps),
        ref: ref,
        slot: props.slot || undefined,
        "data-selected": isSelected || undefined,
        "data-pressed": isPressed || undefined,
        "data-hovered": isHovered || undefined,
        "data-focused": isFocused || undefined,
        "data-focus-visible": isFocusVisible || undefined,
        "data-disabled": isDisabled || undefined,
        "data-readonly": isReadOnly || undefined
    }, /*#__PURE__*/ (React).createElement(($5c3e21d68f1c4674$export$439d29a4e110a164), {
        elementType: "span"
    }, /*#__PURE__*/ (React).createElement("input", {
        ...($3ef42575df84b30b$export$9d1611c77c2fe928)(inputProps, focusProps),
        ref: inputRef
    })), renderProps.children);
}
/**
 * A switch allows a user to turn a setting on or off.
 */ const $8e59e948500a8fe1$export$b5d5cf8927ab7262 = /*#__PURE__*/ (reactExports.forwardRef)($8e59e948500a8fe1$var$Switch);

class $1910c06f0ca9905e$var$TableCollection extends ($23b9f4fcf0fe224b$export$408d25a4e12db025) {
    addNode(node) {
        super.addNode(node);
        this.columnsDirty || (this.columnsDirty = node.type === 'column');
        if (node.type === 'tableheader') this.head = node;
        if (node.type === 'tablebody') this.body = node;
    }
    commit(firstKey, lastKey, isSSR = false) {
        this.updateColumns(isSSR);
        super.commit(firstKey, lastKey, isSSR);
        this.rows = [
            ...this.getChildren(this.body.key)
        ];
    }
    updateColumns(isSSR) {
        if (!this.columnsDirty) return;
        this.rowHeaderColumnKeys = new Set();
        this.columns = [];
        let columnKeyMap = new Map();
        let visit = (node)=>{
            switch(node.type){
                case 'column':
                    columnKeyMap.set(node.key, node);
                    if (!node.hasChildNodes) {
                        node.index = this.columns.length;
                        this.columns.push(node);
                        if (node.props.isRowHeader) this.rowHeaderColumnKeys.add(node.key);
                    }
                    break;
            }
            for (let child of this.getChildren(node.key))visit(child);
        };
        for (let node of this.getChildren(this.head.key))visit(node);
        this.headerRows = ($788781baa30117fa$export$7c127db850d4e81e)(columnKeyMap, this.columns);
        this.columnsDirty = false;
        if (this.rowHeaderColumnKeys.size === 0 && this.columns.length > 0 && !isSSR) throw new Error('A table must have at least one Column with the isRowHeader prop set to true');
    }
    get columnCount() {
        return this.columns.length;
    }
    *[Symbol.iterator]() {
        // Wait until the collection is initialized.
        if (this.head.key === -1) return;
        yield this.head;
        yield this.body;
    }
    get size() {
        return this.rows.length;
    }
    getFirstKey() {
        return this.body.firstChildKey;
    }
    getLastKey() {
        return this.body.lastChildKey;
    }
    getKeyAfter(key) {
        let node = this.getItem(key);
        var _node_nextKey;
        if ((node === null || node === void 0 ? void 0 : node.type) === 'column') return (_node_nextKey = node.nextKey) !== null && _node_nextKey !== void 0 ? _node_nextKey : null;
        return super.getKeyAfter(key);
    }
    getKeyBefore(key) {
        var _this_getItem;
        let node = this.getItem(key);
        var _node_prevKey;
        if ((node === null || node === void 0 ? void 0 : node.type) === 'column') return (_node_prevKey = node.prevKey) !== null && _node_prevKey !== void 0 ? _node_prevKey : null;
        let k = super.getKeyBefore(key);
        if (k != null && ((_this_getItem = this.getItem(k)) === null || _this_getItem === void 0 ? void 0 : _this_getItem.type) === 'tablebody') return null;
        return k;
    }
    getChildren(key) {
        if (!this.getItem(key)) for (let row of this.headerRows){
            if (row.key === key) return row.childNodes;
        }
        return super.getChildren(key);
    }
    clone() {
        let collection = super.clone();
        collection.headerRows = this.headerRows;
        collection.columns = this.columns;
        collection.rowHeaderColumnKeys = this.rowHeaderColumnKeys;
        collection.head = this.head;
        collection.body = this.body;
        return collection;
    }
    getTextValue(key) {
        let row = this.getItem(key);
        if (!row) return '';
        // If the row has a textValue, use that.
        if (row.textValue) return row.textValue;
        // Otherwise combine the text of each of the row header columns.
        let rowHeaderColumnKeys = this.rowHeaderColumnKeys;
        let text = [];
        for (let cell of this.getChildren(key)){
            let column = this.columns[cell.index];
            if (rowHeaderColumnKeys.has(column.key) && cell.textValue) text.push(cell.textValue);
            if (text.length === rowHeaderColumnKeys.size) break;
        }
        return text.join(' ');
    }
    constructor(...args){
        super(...args);
        this.headerRows = [];
        this.columns = [];
        this.rows = [];
        this.rowHeaderColumnKeys = new Set();
        this.head = new ($23b9f4fcf0fe224b$export$d68d59712b04d9d1)('tableheader', -1);
        this.body = new ($23b9f4fcf0fe224b$export$d68d59712b04d9d1)('tablebody', -2);
        this.columnsDirty = true;
    }
}
const $1910c06f0ca9905e$var$ResizableTableContainerContext = /*#__PURE__*/ (reactExports.createContext)(null);
function $1910c06f0ca9905e$var$ResizableTableContainer(props, ref) {
    let containerRef = ($df56164dff5785e2$export$4338b53315abf666)(ref);
    let tableRef = (reactExports.useRef)(null);
    let scrollRef = (reactExports.useRef)(null);
    let [width, setWidth] = (reactExports.useState)(0);
    ($f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(()=>{
        // Walk up the DOM from the Table to the ResizableTableContainer and stop
        // when we reach the first scrollable element. This is what we'll measure
        // to determine column widths (important due to width of scrollbars).
        // This will usually be the ResizableTableContainer for native tables, and
        // the Table itself for virtualized tables.
        let table = tableRef.current;
        while(table && table !== containerRef.current && !($cc38e7bd3fc7b213$export$2bb74740c4e19def)(table))table = table.parentElement;
        scrollRef.current = table;
    }, [
        containerRef
    ]);
    ($9daab02d461809db$export$683480f191c0e3ea)({
        ref: scrollRef,
        box: 'border-box',
        onResize () {
            var _scrollRef_current;
            var _scrollRef_current_clientWidth;
            setWidth((_scrollRef_current_clientWidth = (_scrollRef_current = scrollRef.current) === null || _scrollRef_current === void 0 ? void 0 : _scrollRef_current.clientWidth) !== null && _scrollRef_current_clientWidth !== void 0 ? _scrollRef_current_clientWidth : 0);
        }
    });
    ($f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(()=>{
        var _scrollRef_current;
        var _scrollRef_current_clientWidth;
        setWidth((_scrollRef_current_clientWidth = (_scrollRef_current = scrollRef.current) === null || _scrollRef_current === void 0 ? void 0 : _scrollRef_current.clientWidth) !== null && _scrollRef_current_clientWidth !== void 0 ? _scrollRef_current_clientWidth : 0);
    }, []);
    let ctx = (reactExports.useMemo)(()=>({
            tableRef: tableRef,
            scrollRef: scrollRef,
            tableWidth: width,
            useTableColumnResizeState: $292bc4e09cd0eb62$export$cb895dcf85db1319,
            onResizeStart: props.onResizeStart,
            onResize: props.onResize,
            onResizeEnd: props.onResizeEnd
        }), [
        tableRef,
        width,
        props.onResizeStart,
        props.onResize,
        props.onResizeEnd
    ]);
    return /*#__PURE__*/ (React).createElement("div", {
        ...($65484d02dcb7eb3e$export$457c3d6518dd4c6f)(props),
        ref: containerRef,
        className: props.className || 'react-aria-ResizableTableContainer',
        style: props.style,
        onScroll: props.onScroll
    }, /*#__PURE__*/ (React).createElement($1910c06f0ca9905e$var$ResizableTableContainerContext.Provider, {
        value: ctx
    }, props.children));
}
const $1910c06f0ca9905e$export$7063e69b8a954175 = /*#__PURE__*/ (reactExports.forwardRef)($1910c06f0ca9905e$var$ResizableTableContainer);
const $1910c06f0ca9905e$export$93e4b0b2cc49b648 = /*#__PURE__*/ (reactExports.createContext)(null);
const $1910c06f0ca9905e$export$38de1cb0526c21fb = /*#__PURE__*/ (reactExports.createContext)(null);
const $1910c06f0ca9905e$export$a2680a798823803c = /*#__PURE__*/ (reactExports.createContext)(null);
function $1910c06f0ca9905e$var$Table(props, ref) {
    var _props_dragAndDropHooks;
    [props, ref] = ($64fa3d84918910a7$export$29f1550f4b0d4415)(props, ref, $1910c06f0ca9905e$export$93e4b0b2cc49b648);
    // Separate selection state so we have access to it from collection components via useTableOptions.
    let selectionState = ($7af3f5b51489e0b5$export$253fe78d46329472)(props);
    let { selectionBehavior: selectionBehavior, selectionMode: selectionMode, disallowEmptySelection: disallowEmptySelection } = selectionState;
    let hasDragHooks = !!((_props_dragAndDropHooks = props.dragAndDropHooks) === null || _props_dragAndDropHooks === void 0 ? void 0 : _props_dragAndDropHooks.useDraggableCollectionState);
    let ctx = (reactExports.useMemo)(()=>({
            selectionBehavior: selectionMode === 'none' ? null : selectionBehavior,
            selectionMode: selectionMode,
            disallowEmptySelection: disallowEmptySelection,
            allowsDragging: hasDragHooks
        }), [
        selectionBehavior,
        selectionMode,
        disallowEmptySelection,
        hasDragHooks
    ]);
    let content = /*#__PURE__*/ (React).createElement($1910c06f0ca9905e$var$TableOptionsContext.Provider, {
        value: ctx
    }, /*#__PURE__*/ (React).createElement(($e1995378a142960e$export$fb8073518f34e6ec), props));
    return /*#__PURE__*/ (React).createElement(($e1995378a142960e$export$bf788dd355e3a401), {
        content: content,
        createCollection: ()=>new $1910c06f0ca9905e$var$TableCollection()
    }, (collection)=>/*#__PURE__*/ (React).createElement($1910c06f0ca9905e$var$TableInner, {
            props: props,
            forwardedRef: ref,
            selectionState: selectionState,
            collection: collection
        }));
}
function $1910c06f0ca9905e$var$TableInner({ props: props, forwardedRef: ref, selectionState: selectionState, collection: collection }) {
    let tableContainerContext = (reactExports.useContext)($1910c06f0ca9905e$var$ResizableTableContainerContext);
    ref = ($df56164dff5785e2$export$4338b53315abf666)((reactExports.useMemo)(()=>($5dc95899b306f630$export$c9058316764c140e)(ref, tableContainerContext === null || tableContainerContext === void 0 ? void 0 : tableContainerContext.tableRef), [
        ref,
        tableContainerContext === null || tableContainerContext === void 0 ? void 0 : tableContainerContext.tableRef
    ]));
    let state = ($4a0dd036d492cee4$export$907bcc6c48325fd6)({
        ...props,
        collection: collection,
        children: undefined,
        UNSAFE_selectionState: selectionState
    });
    let { isVirtualized: isVirtualized, layoutDelegate: layoutDelegate, dropTargetDelegate: ctxDropTargetDelegate, CollectionRoot: CollectionRoot } = (reactExports.useContext)(($7135fc7d473fd974$export$4feb769f8ddf26c5));
    let { dragAndDropHooks: dragAndDropHooks } = props;
    let { gridProps: gridProps } = ($6e31608fbba75bab$export$25bceaac3c7e4dc7)({
        ...props,
        layoutDelegate: layoutDelegate,
        isVirtualized: isVirtualized
    }, state, ref);
    let selectionManager = state.selectionManager;
    let hasDragHooks = !!(dragAndDropHooks === null || dragAndDropHooks === void 0 ? void 0 : dragAndDropHooks.useDraggableCollectionState);
    let hasDropHooks = !!(dragAndDropHooks === null || dragAndDropHooks === void 0 ? void 0 : dragAndDropHooks.useDroppableCollectionState);
    let dragHooksProvided = (reactExports.useRef)(hasDragHooks);
    let dropHooksProvided = (reactExports.useRef)(hasDropHooks);
    (reactExports.useEffect)(()=>{
        if (dragHooksProvided.current !== hasDragHooks) console.warn('Drag hooks were provided during one render, but not another. This should be avoided as it may produce unexpected behavior.');
        if (dropHooksProvided.current !== hasDropHooks) console.warn('Drop hooks were provided during one render, but not another. This should be avoided as it may produce unexpected behavior.');
    }, [
        hasDragHooks,
        hasDropHooks
    ]);
    let dragState = undefined;
    let dropState = undefined;
    let droppableCollection = undefined;
    let isRootDropTarget = false;
    let dragPreview = null;
    let preview = (reactExports.useRef)(null);
    if (hasDragHooks && dragAndDropHooks) {
        dragState = dragAndDropHooks.useDraggableCollectionState({
            collection: collection,
            selectionManager: selectionManager,
            preview: dragAndDropHooks.renderDragPreview ? preview : undefined
        });
        dragAndDropHooks.useDraggableCollection({}, dragState, ref);
        let DragPreview = dragAndDropHooks.DragPreview;
        dragPreview = dragAndDropHooks.renderDragPreview ? /*#__PURE__*/ (React).createElement(DragPreview, {
            ref: preview
        }, dragAndDropHooks.renderDragPreview) : null;
    }
    if (hasDropHooks && dragAndDropHooks) {
        dropState = dragAndDropHooks.useDroppableCollectionState({
            collection: collection,
            selectionManager: selectionManager
        });
        let keyboardDelegate = new ($2a25aae57d74318e$export$a05409b8bb224a5a)({
            collection: collection,
            disabledKeys: selectionManager.disabledKeys,
            disabledBehavior: selectionManager.disabledBehavior,
            ref: ref,
            layoutDelegate: layoutDelegate
        });
        let dropTargetDelegate = dragAndDropHooks.dropTargetDelegate || ctxDropTargetDelegate || new dragAndDropHooks.ListDropTargetDelegate(collection.rows, ref);
        droppableCollection = dragAndDropHooks.useDroppableCollection({
            keyboardDelegate: keyboardDelegate,
            dropTargetDelegate: dropTargetDelegate
        }, dropState, ref);
        isRootDropTarget = dropState.isDropTarget({
            type: 'root'
        });
    }
    let { focusProps: focusProps, isFocused: isFocused, isFocusVisible: isFocusVisible } = ($f7dceffc5ad7768b$export$4e328f61c538687f)();
    let renderProps = ($64fa3d84918910a7$export$4d86445c2cf5e3)({
        className: props.className,
        style: props.style,
        defaultClassName: 'react-aria-Table',
        values: {
            isDropTarget: isRootDropTarget,
            isFocused: isFocused,
            isFocusVisible: isFocusVisible,
            state: state
        }
    });
    let isListDraggable = !!(hasDragHooks && !(dragState === null || dragState === void 0 ? void 0 : dragState.isDisabled));
    let style = renderProps.style;
    let layoutState = null;
    if (tableContainerContext) {
        layoutState = tableContainerContext.useTableColumnResizeState({
            tableWidth: tableContainerContext.tableWidth
        }, state);
        if (!isVirtualized) style = {
            ...style,
            tableLayout: 'fixed',
            width: 'fit-content'
        };
    }
    let ElementType = $1910c06f0ca9905e$var$useElementType('table');
    var _tableContainerContext_scrollRef;
    return /*#__PURE__*/ (React).createElement(($64fa3d84918910a7$export$2881499e37b75b9a), {
        values: [
            [
                $1910c06f0ca9905e$export$38de1cb0526c21fb,
                state
            ],
            [
                $1910c06f0ca9905e$export$a2680a798823803c,
                layoutState
            ],
            [
                ($612b8eb6cb90e02d$export$d188a835a7bc5783),
                {
                    dragAndDropHooks: dragAndDropHooks,
                    dragState: dragState,
                    dropState: dropState
                }
            ],
            [
                ($612b8eb6cb90e02d$export$f55761759794cf55),
                {
                    render: $1910c06f0ca9905e$var$TableDropIndicatorWrapper
                }
            ]
        ]
    }, /*#__PURE__*/ (React).createElement(($9bf71ea28793e738$export$20e40289641fbbb6), null, /*#__PURE__*/ (React).createElement(ElementType, {
        ...($65484d02dcb7eb3e$export$457c3d6518dd4c6f)(props),
        ...renderProps,
        ...($3ef42575df84b30b$export$9d1611c77c2fe928)(gridProps, focusProps, droppableCollection === null || droppableCollection === void 0 ? void 0 : droppableCollection.collectionProps),
        style: style,
        ref: ref,
        slot: props.slot || undefined,
        onScroll: props.onScroll,
        "data-allows-dragging": isListDraggable || undefined,
        "data-drop-target": isRootDropTarget || undefined,
        "data-focused": isFocused || undefined,
        "data-focus-visible": isFocusVisible || undefined
    }, /*#__PURE__*/ (React).createElement(CollectionRoot, {
        collection: collection,
        scrollRef: (_tableContainerContext_scrollRef = tableContainerContext === null || tableContainerContext === void 0 ? void 0 : tableContainerContext.scrollRef) !== null && _tableContainerContext_scrollRef !== void 0 ? _tableContainerContext_scrollRef : ref,
        persistedKeys: ($612b8eb6cb90e02d$export$d1e8e3fbb7461f6)(selectionManager, dragAndDropHooks, dropState)
    }))), dragPreview);
}
/**
 * A table displays data in rows and columns and enables a user to navigate its contents via directional navigation keys,
 * and optionally supports row selection and sorting.
 */ const $1910c06f0ca9905e$export$54ec01a60f47d33d = /*#__PURE__*/ (reactExports.forwardRef)($1910c06f0ca9905e$var$Table);
function $1910c06f0ca9905e$var$useElementType(element) {
    let { isVirtualized: isVirtualized } = (reactExports.useContext)(($7135fc7d473fd974$export$4feb769f8ddf26c5));
    return isVirtualized ? 'div' : element;
}
const $1910c06f0ca9905e$var$TableOptionsContext = /*#__PURE__*/ (reactExports.createContext)(null);
function $1910c06f0ca9905e$export$fddc468cd8cb4db9() {
    return (reactExports.useContext)($1910c06f0ca9905e$var$TableOptionsContext);
}
const $1910c06f0ca9905e$export$f850895b287ef28e = /*#__PURE__*/ ($e1995378a142960e$export$e953bb1cd0f19726)('tableheader', (props, ref)=>{
    let collection = (reactExports.useContext)($1910c06f0ca9905e$export$38de1cb0526c21fb).collection;
    let headerRows = ($e948873055cbafe4$export$727c8fc270210f13)({
        items: collection.headerRows,
        children: (reactExports.useCallback)((item)=>{
            switch(item.type){
                case 'headerrow':
                    return /*#__PURE__*/ (React).createElement($1910c06f0ca9905e$var$TableHeaderRow, {
                        item: item
                    });
                default:
                    throw new Error('Unsupported node type in TableHeader: ' + item.type);
            }
        }, [])
    });
    let THead = $1910c06f0ca9905e$var$useElementType('thead');
    let { rowGroupProps: rowGroupProps } = ($0047e6c294ea075f$export$6fb1613bd7b28198)();
    let { hoverProps: hoverProps, isHovered: isHovered } = ($6179b936705e76d3$export$ae780daf29e6d456)({
        onHoverStart: props.onHoverStart,
        onHoverChange: props.onHoverChange,
        onHoverEnd: props.onHoverEnd
    });
    let renderProps = ($64fa3d84918910a7$export$4d86445c2cf5e3)({
        className: props.className,
        style: props.style,
        defaultClassName: 'react-aria-TableHeader',
        values: {
            isHovered: isHovered
        }
    });
    return /*#__PURE__*/ (React).createElement(THead, {
        ...($3ef42575df84b30b$export$9d1611c77c2fe928)(($65484d02dcb7eb3e$export$457c3d6518dd4c6f)(props), rowGroupProps, hoverProps),
        ...renderProps,
        ref: ref,
        "data-hovered": isHovered || undefined
    }, headerRows);
}, (props)=>/*#__PURE__*/ (React).createElement(($e1995378a142960e$export$fb8073518f34e6ec), {
        dependencies: props.dependencies,
        items: props.columns
    }, props.children));
function $1910c06f0ca9905e$var$TableHeaderRow({ item: item }) {
    let ref = (reactExports.useRef)(null);
    let state = (reactExports.useContext)($1910c06f0ca9905e$export$38de1cb0526c21fb);
    let { isVirtualized: isVirtualized, CollectionBranch: CollectionBranch } = (reactExports.useContext)(($7135fc7d473fd974$export$4feb769f8ddf26c5));
    let { rowProps: rowProps } = ($f917ee10f4c32dab$export$1b95a7d2d517b841)({
        node: item,
        isVirtualized: isVirtualized
    }, state, ref);
    let { checkboxProps: checkboxProps } = ($2a795c53a101c542$export$1003db6a7e384b99)(state);
    let TR = $1910c06f0ca9905e$var$useElementType('tr');
    return /*#__PURE__*/ (React).createElement(TR, {
        ...rowProps,
        ref: ref
    }, /*#__PURE__*/ (React).createElement(($64fa3d84918910a7$export$2881499e37b75b9a), {
        values: [
            [
                ($4e85f108e88277b8$export$b085522c77523c51),
                {
                    slots: {
                        selection: checkboxProps
                    }
                }
            ]
        ]
    }, /*#__PURE__*/ (React).createElement(CollectionBranch, {
        collection: state.collection,
        parent: item
    })));
}
const $1910c06f0ca9905e$export$816b5d811295e6bc = /*#__PURE__*/ ($e1995378a142960e$export$18af5c7a9e9b3664)('column', (props, forwardedRef, column)=>{
    var _state_sortDescriptor, _state_sortDescriptor1;
    let ref = ($df56164dff5785e2$export$4338b53315abf666)(forwardedRef);
    let state = (reactExports.useContext)($1910c06f0ca9905e$export$38de1cb0526c21fb);
    let { isVirtualized: isVirtualized } = (reactExports.useContext)(($7135fc7d473fd974$export$4feb769f8ddf26c5));
    let { columnHeaderProps: columnHeaderProps } = ($f329116d8ad0aba0$export$9514819a8c81e960)({
        node: column,
        isVirtualized: isVirtualized
    }, state, ref);
    let { isFocused: isFocused, isFocusVisible: isFocusVisible, focusProps: focusProps } = ($f7dceffc5ad7768b$export$4e328f61c538687f)();
    let layoutState = (reactExports.useContext)($1910c06f0ca9905e$export$a2680a798823803c);
    let isResizing = false;
    if (layoutState) isResizing = layoutState.resizingColumn === column.key;
    else {
        for(let prop in [
            'width',
            'defaultWidth',
            'minWidth',
            'maxWidth'
        ])if (prop in column.props) console.warn(`The ${prop} prop on a <Column> only applies when a <Table> is wrapped in a <ResizableTableContainer>. If you aren't using column resizing, you can set the width of a column with CSS.`);
    }
    let { hoverProps: hoverProps, isHovered: isHovered } = ($6179b936705e76d3$export$ae780daf29e6d456)({
        isDisabled: !props.allowsSorting
    });
    let renderProps = ($64fa3d84918910a7$export$4d86445c2cf5e3)({
        ...props,
        id: undefined,
        children: column.rendered,
        defaultClassName: 'react-aria-Column',
        values: {
            isHovered: isHovered,
            isFocused: isFocused,
            isFocusVisible: isFocusVisible,
            allowsSorting: column.props.allowsSorting,
            sortDirection: ((_state_sortDescriptor = state.sortDescriptor) === null || _state_sortDescriptor === void 0 ? void 0 : _state_sortDescriptor.column) === column.key ? state.sortDescriptor.direction : undefined,
            isResizing: isResizing,
            startResize: ()=>{
                if (layoutState) {
                    layoutState.startResize(column.key);
                    state.setKeyboardNavigationDisabled(true);
                } else throw new Error('Wrap your <Table> in a <ResizableTableContainer> to enable column resizing');
            },
            sort: (direction)=>{
                state.sort(column.key, direction);
            }
        }
    });
    let style = renderProps.style;
    if (layoutState) style = {
        ...style,
        width: layoutState.getColumnWidth(column.key)
    };
    let TH = $1910c06f0ca9905e$var$useElementType('th');
    return /*#__PURE__*/ (React).createElement(TH, {
        ...($3ef42575df84b30b$export$9d1611c77c2fe928)(($65484d02dcb7eb3e$export$457c3d6518dd4c6f)(props), columnHeaderProps, focusProps, hoverProps),
        ...renderProps,
        style: style,
        colSpan: column.colspan,
        ref: ref,
        "data-hovered": isHovered || undefined,
        "data-focused": isFocused || undefined,
        "data-focus-visible": isFocusVisible || undefined,
        "data-resizing": isResizing || undefined,
        "data-allows-sorting": column.props.allowsSorting || undefined,
        "data-sort-direction": ((_state_sortDescriptor1 = state.sortDescriptor) === null || _state_sortDescriptor1 === void 0 ? void 0 : _state_sortDescriptor1.column) === column.key ? state.sortDescriptor.direction : undefined
    }, /*#__PURE__*/ (React).createElement(($64fa3d84918910a7$export$2881499e37b75b9a), {
        values: [
            [
                $1910c06f0ca9905e$var$ColumnResizerContext,
                {
                    column: column,
                    triggerRef: ref
                }
            ],
            [
                ($7135fc7d473fd974$export$4feb769f8ddf26c5),
                ($7135fc7d473fd974$export$a164736487e3f0ae)
            ]
        ]
    }, renderProps.children));
});
const $1910c06f0ca9905e$var$ColumnResizerContext = /*#__PURE__*/ (reactExports.createContext)(null);
const $1910c06f0ca9905e$export$76ccd210b9029917 = /*#__PURE__*/ ($e1995378a142960e$export$e953bb1cd0f19726)('tablebody', (props, ref)=>{
    let state = (reactExports.useContext)($1910c06f0ca9905e$export$38de1cb0526c21fb);
    let { isVirtualized: isVirtualized } = (reactExports.useContext)(($7135fc7d473fd974$export$4feb769f8ddf26c5));
    let collection = state.collection;
    let { CollectionBranch: CollectionBranch } = (reactExports.useContext)(($7135fc7d473fd974$export$4feb769f8ddf26c5));
    let { dragAndDropHooks: dragAndDropHooks, dropState: dropState } = (reactExports.useContext)(($612b8eb6cb90e02d$export$d188a835a7bc5783));
    let isDroppable = !!(dragAndDropHooks === null || dragAndDropHooks === void 0 ? void 0 : dragAndDropHooks.useDroppableCollectionState) && !(dropState === null || dropState === void 0 ? void 0 : dropState.isDisabled);
    var _dropState_isDropTarget;
    let isRootDropTarget = isDroppable && !!dropState && ((_dropState_isDropTarget = dropState.isDropTarget({
        type: 'root'
    })) !== null && _dropState_isDropTarget !== void 0 ? _dropState_isDropTarget : false);
    let renderValues = {
        isDropTarget: isRootDropTarget,
        isEmpty: collection.size === 0
    };
    let renderProps = ($64fa3d84918910a7$export$4d86445c2cf5e3)({
        ...props,
        id: undefined,
        children: undefined,
        defaultClassName: 'react-aria-TableBody',
        values: renderValues
    });
    let emptyState;
    let TR = $1910c06f0ca9905e$var$useElementType('tr');
    let TD = $1910c06f0ca9905e$var$useElementType('td');
    let numColumns = collection.columnCount;
    if (collection.size === 0 && props.renderEmptyState && state) {
        let rowProps = {};
        let rowHeaderProps = {};
        let style = {};
        if (isVirtualized) {
            rowProps['aria-rowindex'] = collection.headerRows.length + 1;
            rowHeaderProps['aria-colspan'] = numColumns;
            style = {
                display: 'contents'
            };
        } else rowHeaderProps['colSpan'] = numColumns;
        emptyState = /*#__PURE__*/ (React).createElement(TR, {
            role: "row",
            ...rowProps,
            style: style
        }, /*#__PURE__*/ (React).createElement(TD, {
            role: "rowheader",
            ...rowHeaderProps,
            style: style
        }, props.renderEmptyState(renderValues)));
    }
    let { rowGroupProps: rowGroupProps } = ($0047e6c294ea075f$export$6fb1613bd7b28198)();
    let TBody = $1910c06f0ca9905e$var$useElementType('tbody');
    // TODO: TableBody doesn't support being the scrollable body of the table yet, to revisit if needed. Would need to
    // call useLoadMore here and walk up the DOM to the nearest scrollable element to set scrollRef
    return /*#__PURE__*/ (React).createElement(TBody, {
        ...($3ef42575df84b30b$export$9d1611c77c2fe928)(($65484d02dcb7eb3e$export$457c3d6518dd4c6f)(props), rowGroupProps),
        ...renderProps,
        ref: ref,
        "data-empty": collection.size === 0 || undefined
    }, isDroppable && /*#__PURE__*/ (React).createElement($1910c06f0ca9905e$var$RootDropIndicator, null), /*#__PURE__*/ (React).createElement(CollectionBranch, {
        collection: collection,
        parent: collection.body,
        renderDropIndicator: ($612b8eb6cb90e02d$export$971707d8a129a1f7)(dragAndDropHooks, dropState)
    }), emptyState);
});
const $1910c06f0ca9905e$export$b59bdbef9ce70de2 = /*#__PURE__*/ ($e1995378a142960e$export$e953bb1cd0f19726)('item', (props, forwardedRef, item)=>{
    let ref = ($df56164dff5785e2$export$4338b53315abf666)(forwardedRef);
    let state = (reactExports.useContext)($1910c06f0ca9905e$export$38de1cb0526c21fb);
    let { dragAndDropHooks: dragAndDropHooks, dragState: dragState, dropState: dropState } = (reactExports.useContext)(($612b8eb6cb90e02d$export$d188a835a7bc5783));
    let { isVirtualized: isVirtualized, CollectionBranch: CollectionBranch } = (reactExports.useContext)(($7135fc7d473fd974$export$4feb769f8ddf26c5));
    let { rowProps: rowProps, ...states } = ($b2db214c022798eb$export$7f2f6ae19e707aa5)({
        node: item,
        shouldSelectOnPressUp: !!dragState,
        isVirtualized: isVirtualized
    }, state, ref);
    let { isFocused: isFocused, isFocusVisible: isFocusVisible, focusProps: focusProps } = ($f7dceffc5ad7768b$export$4e328f61c538687f)();
    let { isFocusVisible: isFocusVisibleWithin, focusProps: focusWithinProps } = ($f7dceffc5ad7768b$export$4e328f61c538687f)({
        within: true
    });
    let { hoverProps: hoverProps, isHovered: isHovered } = ($6179b936705e76d3$export$ae780daf29e6d456)({
        isDisabled: !states.allowsSelection && !states.hasAction,
        onHoverStart: props.onHoverStart,
        onHoverChange: props.onHoverChange,
        onHoverEnd: props.onHoverEnd
    });
    let { checkboxProps: checkboxProps } = ($2a795c53a101c542$export$16ea7f650bd7c1bb)({
        key: item.key
    }, state);
    let draggableItem = undefined;
    if (dragState && dragAndDropHooks) draggableItem = dragAndDropHooks.useDraggableItem({
        key: item.key,
        hasDragButton: true
    }, dragState);
    let dropIndicator = undefined;
    let dropIndicatorRef = (reactExports.useRef)(null);
    let { visuallyHiddenProps: visuallyHiddenProps } = ($5c3e21d68f1c4674$export$a966af930f325cab)();
    if (dropState && dragAndDropHooks) dropIndicator = dragAndDropHooks.useDropIndicator({
        target: {
            type: 'item',
            key: item.key,
            dropPosition: 'on'
        }
    }, dropState, dropIndicatorRef);
    let dragButtonRef = (reactExports.useRef)(null);
    (reactExports.useEffect)(()=>{
        if (dragState && !dragButtonRef.current) console.warn('Draggable items in a Table must contain a <Button slot="drag"> element so that keyboard and screen reader users can drag them.');
    // eslint-disable-next-line
    }, []);
    let isDragging = dragState && dragState.isDragging(item.key);
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    let { children: _, ...restProps } = props;
    let renderProps = ($64fa3d84918910a7$export$4d86445c2cf5e3)({
        ...restProps,
        id: undefined,
        defaultClassName: 'react-aria-Row',
        values: {
            ...states,
            isHovered: isHovered,
            isFocused: isFocused,
            isFocusVisible: isFocusVisible,
            selectionMode: state.selectionManager.selectionMode,
            selectionBehavior: state.selectionManager.selectionBehavior,
            isDragging: isDragging,
            isDropTarget: dropIndicator === null || dropIndicator === void 0 ? void 0 : dropIndicator.isDropTarget,
            isFocusVisibleWithin: isFocusVisibleWithin
        }
    });
    let TR = $1910c06f0ca9905e$var$useElementType('tr');
    let TD = $1910c06f0ca9905e$var$useElementType('td');
    return /*#__PURE__*/ (React).createElement((React).Fragment, null, dropIndicator && !dropIndicator.isHidden && /*#__PURE__*/ (React).createElement(TR, {
        role: "row",
        style: {
            height: 0
        }
    }, /*#__PURE__*/ (React).createElement(TD, {
        role: "gridcell",
        colSpan: state.collection.columnCount,
        style: {
            padding: 0
        }
    }, /*#__PURE__*/ (React).createElement("div", {
        role: "button",
        ...visuallyHiddenProps,
        ...dropIndicator.dropIndicatorProps,
        ref: dropIndicatorRef
    }))), /*#__PURE__*/ (React).createElement(TR, {
        ...($3ef42575df84b30b$export$9d1611c77c2fe928)(($65484d02dcb7eb3e$export$457c3d6518dd4c6f)(props), rowProps, focusProps, hoverProps, draggableItem === null || draggableItem === void 0 ? void 0 : draggableItem.dragProps, focusWithinProps),
        ...renderProps,
        ref: ref,
        "data-disabled": states.isDisabled || undefined,
        "data-selected": states.isSelected || undefined,
        "data-hovered": isHovered || undefined,
        "data-focused": states.isFocused || undefined,
        "data-focus-visible": isFocusVisible || undefined,
        "data-pressed": states.isPressed || undefined,
        "data-dragging": isDragging || undefined,
        "data-drop-target": (dropIndicator === null || dropIndicator === void 0 ? void 0 : dropIndicator.isDropTarget) || undefined,
        "data-selection-mode": state.selectionManager.selectionMode === 'none' ? undefined : state.selectionManager.selectionMode,
        "data-focus-visible-within": isFocusVisibleWithin || undefined
    }, /*#__PURE__*/ (React).createElement(($64fa3d84918910a7$export$2881499e37b75b9a), {
        values: [
            [
                ($4e85f108e88277b8$export$b085522c77523c51),
                {
                    slots: {
                        selection: checkboxProps
                    }
                }
            ],
            [
                ($d2b4bc8c273e7be6$export$24d547caef80ccd1),
                {
                    slots: {
                        [($64fa3d84918910a7$export$c62b8e45d58ddad9)]: {},
                        drag: {
                            ...draggableItem === null || draggableItem === void 0 ? void 0 : draggableItem.dragButtonProps,
                            ref: dragButtonRef,
                            style: {
                                pointerEvents: 'none'
                            }
                        }
                    }
                }
            ]
        ]
    }, /*#__PURE__*/ (React).createElement(CollectionBranch, {
        collection: state.collection,
        parent: item
    }))));
}, (props)=>{
    if (props.id == null && typeof props.children === 'function') console.warn('No id detected for the Row element. The Row element requires a id to be provided to it when the cells are rendered dynamically.');
    let dependencies = [
        props.value
    ].concat(props.dependencies);
    return /*#__PURE__*/ (React).createElement(($e1995378a142960e$export$fb8073518f34e6ec), {
        dependencies: dependencies,
        items: props.columns,
        idScope: props.id
    }, props.children);
});
const $1910c06f0ca9905e$export$f6f0c3fe4ec306ea = /*#__PURE__*/ ($e1995378a142960e$export$18af5c7a9e9b3664)('cell', (props, forwardedRef, cell)=>{
    let ref = ($df56164dff5785e2$export$4338b53315abf666)(forwardedRef);
    let state = (reactExports.useContext)($1910c06f0ca9905e$export$38de1cb0526c21fb);
    let { dragState: dragState } = (reactExports.useContext)(($612b8eb6cb90e02d$export$d188a835a7bc5783));
    let { isVirtualized: isVirtualized } = (reactExports.useContext)(($7135fc7d473fd974$export$4feb769f8ddf26c5));
    // @ts-ignore
    cell.column = state.collection.columns[cell.index];
    let { gridCellProps: gridCellProps, isPressed: isPressed } = ($7713593715703b24$export$49571c903d73624c)({
        node: cell,
        shouldSelectOnPressUp: !!dragState,
        isVirtualized: isVirtualized
    }, state, ref);
    let { isFocused: isFocused, isFocusVisible: isFocusVisible, focusProps: focusProps } = ($f7dceffc5ad7768b$export$4e328f61c538687f)();
    let { hoverProps: hoverProps, isHovered: isHovered } = ($6179b936705e76d3$export$ae780daf29e6d456)({});
    let renderProps = ($64fa3d84918910a7$export$4d86445c2cf5e3)({
        ...props,
        id: undefined,
        defaultClassName: 'react-aria-Cell',
        values: {
            isFocused: isFocused,
            isFocusVisible: isFocusVisible,
            isPressed: isPressed,
            isHovered: isHovered
        }
    });
    let TD = $1910c06f0ca9905e$var$useElementType('td');
    return /*#__PURE__*/ (React).createElement(TD, {
        ...($3ef42575df84b30b$export$9d1611c77c2fe928)(($65484d02dcb7eb3e$export$457c3d6518dd4c6f)(props), gridCellProps, focusProps, hoverProps),
        ...renderProps,
        ref: ref,
        "data-focused": isFocused || undefined,
        "data-focus-visible": isFocusVisible || undefined,
        "data-pressed": isPressed || undefined
    }, /*#__PURE__*/ (React).createElement(($7135fc7d473fd974$export$4feb769f8ddf26c5).Provider, {
        value: ($7135fc7d473fd974$export$a164736487e3f0ae)
    }, renderProps.children));
});
function $1910c06f0ca9905e$var$TableDropIndicatorWrapper(props, ref) {
    ref = ($df56164dff5785e2$export$4338b53315abf666)(ref);
    let { dragAndDropHooks: dragAndDropHooks, dropState: dropState } = (reactExports.useContext)(($612b8eb6cb90e02d$export$d188a835a7bc5783));
    let buttonRef = (reactExports.useRef)(null);
    let { dropIndicatorProps: dropIndicatorProps, isHidden: isHidden, isDropTarget: isDropTarget } = dragAndDropHooks.useDropIndicator(props, dropState, buttonRef);
    if (isHidden) return null;
    return /*#__PURE__*/ (React).createElement($1910c06f0ca9905e$var$TableDropIndicatorForwardRef, {
        ...props,
        dropIndicatorProps: dropIndicatorProps,
        isDropTarget: isDropTarget,
        buttonRef: buttonRef,
        ref: ref
    });
}
function $1910c06f0ca9905e$var$TableDropIndicator(props, ref) {
    let { dropIndicatorProps: dropIndicatorProps, isDropTarget: isDropTarget, buttonRef: buttonRef, ...otherProps } = props;
    let state = (reactExports.useContext)($1910c06f0ca9905e$export$38de1cb0526c21fb);
    let { visuallyHiddenProps: visuallyHiddenProps } = ($5c3e21d68f1c4674$export$a966af930f325cab)();
    let renderProps = ($64fa3d84918910a7$export$4d86445c2cf5e3)({
        ...otherProps,
        defaultClassName: 'react-aria-DropIndicator',
        values: {
            isDropTarget: isDropTarget
        }
    });
    let TR = $1910c06f0ca9905e$var$useElementType('tr');
    let TD = $1910c06f0ca9905e$var$useElementType('td');
    return /*#__PURE__*/ (React).createElement(TR, {
        ...($65484d02dcb7eb3e$export$457c3d6518dd4c6f)(props),
        ...renderProps,
        role: "row",
        ref: ref,
        "data-drop-target": isDropTarget || undefined
    }, /*#__PURE__*/ (React).createElement(TD, {
        role: "gridcell",
        colSpan: state.collection.columnCount,
        style: {
            padding: 0
        }
    }, /*#__PURE__*/ (React).createElement("div", {
        ...visuallyHiddenProps,
        role: "button",
        ...dropIndicatorProps,
        ref: buttonRef
    }), renderProps.children));
}
const $1910c06f0ca9905e$var$TableDropIndicatorForwardRef = /*#__PURE__*/ (reactExports.forwardRef)($1910c06f0ca9905e$var$TableDropIndicator);
function $1910c06f0ca9905e$var$RootDropIndicator() {
    let state = (reactExports.useContext)($1910c06f0ca9905e$export$38de1cb0526c21fb);
    let { dragAndDropHooks: dragAndDropHooks, dropState: dropState } = (reactExports.useContext)(($612b8eb6cb90e02d$export$d188a835a7bc5783));
    let ref = (reactExports.useRef)(null);
    let { dropIndicatorProps: dropIndicatorProps } = dragAndDropHooks.useDropIndicator({
        target: {
            type: 'root'
        }
    }, dropState, ref);
    let isDropTarget = dropState.isDropTarget({
        type: 'root'
    });
    let { visuallyHiddenProps: visuallyHiddenProps } = ($5c3e21d68f1c4674$export$a966af930f325cab)();
    let TR = $1910c06f0ca9905e$var$useElementType('tr');
    let TD = $1910c06f0ca9905e$var$useElementType('td');
    if (!isDropTarget && dropIndicatorProps['aria-hidden']) return null;
    return /*#__PURE__*/ (React).createElement(TR, {
        role: "row",
        "aria-hidden": dropIndicatorProps['aria-hidden'],
        style: {
            height: 0
        }
    }, /*#__PURE__*/ (React).createElement(TD, {
        role: "gridcell",
        colSpan: state.collection.columnCount,
        style: {
            padding: 0
        }
    }, /*#__PURE__*/ (React).createElement("div", {
        role: "button",
        ...visuallyHiddenProps,
        ...dropIndicatorProps,
        ref: ref
    })));
}
($e1995378a142960e$export$18af5c7a9e9b3664)('loader', function TableLoadingIndicator(props, ref, item) {
    let state = (reactExports.useContext)($1910c06f0ca9905e$export$38de1cb0526c21fb);
    let { isVirtualized: isVirtualized } = (reactExports.useContext)(($7135fc7d473fd974$export$4feb769f8ddf26c5));
    let numColumns = state.collection.columns.length;
    let renderProps = ($64fa3d84918910a7$export$4d86445c2cf5e3)({
        ...props,
        id: undefined,
        children: item.rendered,
        defaultClassName: 'react-aria-TableLoadingIndicator',
        values: null
    });
    let TR = $1910c06f0ca9905e$var$useElementType('tr');
    let TD = $1910c06f0ca9905e$var$useElementType('td');
    let rowProps = {};
    let rowHeaderProps = {};
    let style = {};
    if (isVirtualized) {
        rowProps['aria-rowindex'] = state.collection.headerRows.length + state.collection.size;
        rowHeaderProps['aria-colspan'] = numColumns;
        style = {
            display: 'contents'
        };
    } else rowHeaderProps['colSpan'] = numColumns;
    return /*#__PURE__*/ (React).createElement((React).Fragment, null, /*#__PURE__*/ (React).createElement(TR, {
        role: "row",
        ref: ref,
        ...($3ef42575df84b30b$export$9d1611c77c2fe928)(($65484d02dcb7eb3e$export$457c3d6518dd4c6f)(props), rowProps),
        ...renderProps
    }, /*#__PURE__*/ (React).createElement(TD, {
        role: "rowheader",
        ...rowHeaderProps,
        style: style
    }, renderProps.children)));
});

/*
 * Copyright 2022 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 






const $5e8ad37a45e1c704$export$cfa7aa87c26e7d1f = /*#__PURE__*/ (reactExports.createContext)(null);
const $5e8ad37a45e1c704$export$364712098d2aa57c = /*#__PURE__*/ (reactExports.createContext)(null);
function $5e8ad37a45e1c704$var$Tabs(props, ref) {
    [props, ref] = ($64fa3d84918910a7$export$29f1550f4b0d4415)(props, ref, $5e8ad37a45e1c704$export$cfa7aa87c26e7d1f);
    let { children: children, orientation: orientation = 'horizontal' } = props;
    children = (reactExports.useMemo)(()=>typeof children === 'function' ? children({
            orientation: orientation,
            defaultChildren: null
        }) : children, [
        children,
        orientation
    ]);
    return /*#__PURE__*/ (React).createElement(($e1995378a142960e$export$bf788dd355e3a401), {
        content: children
    }, (collection)=>/*#__PURE__*/ (React).createElement($5e8ad37a45e1c704$var$TabsInner, {
            props: props,
            collection: collection,
            tabsRef: ref
        }));
}
function $5e8ad37a45e1c704$var$TabsInner({ props: props, tabsRef: ref, collection: collection }) {
    let { orientation: orientation = 'horizontal' } = props;
    let state = ($76f919a04c5a7d14$export$4ba071daf4e486)({
        ...props,
        collection: collection,
        children: undefined
    });
    let { focusProps: focusProps, isFocused: isFocused, isFocusVisible: isFocusVisible } = ($f7dceffc5ad7768b$export$4e328f61c538687f)({
        within: true
    });
    let values = (reactExports.useMemo)(()=>({
            orientation: orientation,
            isFocusWithin: isFocused,
            isFocusVisible: isFocusVisible
        }), [
        orientation,
        isFocused,
        isFocusVisible
    ]);
    let renderProps = ($64fa3d84918910a7$export$4d86445c2cf5e3)({
        ...props,
        defaultClassName: 'react-aria-Tabs',
        values: values
    });
    return /*#__PURE__*/ (React).createElement("div", {
        ...($65484d02dcb7eb3e$export$457c3d6518dd4c6f)(props),
        ...focusProps,
        ...renderProps,
        ref: ref,
        slot: props.slot || undefined,
        "data-focused": isFocused || undefined,
        "data-orientation": orientation,
        "data-focus-visible": isFocusVisible || undefined,
        "data-disabled": state.isDisabled || undefined
    }, /*#__PURE__*/ (React).createElement(($64fa3d84918910a7$export$2881499e37b75b9a), {
        values: [
            [
                $5e8ad37a45e1c704$export$cfa7aa87c26e7d1f,
                props
            ],
            [
                $5e8ad37a45e1c704$export$364712098d2aa57c,
                state
            ]
        ]
    }, renderProps.children));
}
/**
 * Tabs organize content into multiple sections and allow users to navigate between them.
 */ const $5e8ad37a45e1c704$export$b2539bed5023c21c = /*#__PURE__*/ (reactExports.forwardRef)($5e8ad37a45e1c704$var$Tabs);
function $5e8ad37a45e1c704$var$TabList(props, ref) {
    let state = (reactExports.useContext)($5e8ad37a45e1c704$export$364712098d2aa57c);
    return state ? /*#__PURE__*/ (React).createElement($5e8ad37a45e1c704$var$TabListInner, {
        props: props,
        forwardedRef: ref
    }) : /*#__PURE__*/ (React).createElement(($e1995378a142960e$export$fb8073518f34e6ec), props);
}
function $5e8ad37a45e1c704$var$TabListInner({ props: props, forwardedRef: ref }) {
    let state = (reactExports.useContext)($5e8ad37a45e1c704$export$364712098d2aa57c);
    let { CollectionRoot: CollectionRoot } = (reactExports.useContext)(($7135fc7d473fd974$export$4feb769f8ddf26c5));
    let { orientation: orientation = 'horizontal', keyboardActivation: keyboardActivation = 'automatic' } = ($64fa3d84918910a7$export$fabf2dc03a41866e)($5e8ad37a45e1c704$export$cfa7aa87c26e7d1f);
    let objectRef = ($df56164dff5785e2$export$4338b53315abf666)(ref);
    let { tabListProps: tabListProps } = ($58d314389b21fa3f$export$773e389e644c5874)({
        ...props,
        orientation: orientation,
        keyboardActivation: keyboardActivation
    }, state, objectRef);
    let renderProps = ($64fa3d84918910a7$export$4d86445c2cf5e3)({
        ...props,
        children: null,
        defaultClassName: 'react-aria-TabList',
        values: {
            orientation: orientation,
            state: state
        }
    });
    let DOMProps = ($65484d02dcb7eb3e$export$457c3d6518dd4c6f)(props);
    delete DOMProps.id;
    return /*#__PURE__*/ (React).createElement("div", {
        ...DOMProps,
        ...tabListProps,
        ref: objectRef,
        ...renderProps,
        "data-orientation": orientation || undefined
    }, /*#__PURE__*/ (React).createElement(CollectionRoot, {
        collection: state.collection,
        persistedKeys: ($7135fc7d473fd974$export$90e00781bc59d8f9)(state.selectionManager.focusedKey)
    }));
}
/**
 * A TabList is used within Tabs to group tabs that a user can switch between.
 * The ids of the items within the <TabList> must match up with a corresponding item inside the <TabPanels>.
 */ const $5e8ad37a45e1c704$export$e51a686c67fdaa2d = /*#__PURE__*/ (reactExports.forwardRef)($5e8ad37a45e1c704$var$TabList);
const $5e8ad37a45e1c704$export$3e41faf802a29e71 = /*#__PURE__*/ ($e1995378a142960e$export$18af5c7a9e9b3664)('item', (props, forwardedRef, item)=>{
    let state = (reactExports.useContext)($5e8ad37a45e1c704$export$364712098d2aa57c);
    let ref = ($df56164dff5785e2$export$4338b53315abf666)(forwardedRef);
    let { tabProps: tabProps, isSelected: isSelected, isDisabled: isDisabled, isPressed: isPressed } = ($0175d55c2a017ebc$export$fdf4756d5b8ef90a)({
        key: item.key,
        ...props
    }, state, ref);
    let { focusProps: focusProps, isFocused: isFocused, isFocusVisible: isFocusVisible } = ($f7dceffc5ad7768b$export$4e328f61c538687f)();
    let { hoverProps: hoverProps, isHovered: isHovered } = ($6179b936705e76d3$export$ae780daf29e6d456)({
        isDisabled: isDisabled,
        onHoverStart: props.onHoverStart,
        onHoverEnd: props.onHoverEnd,
        onHoverChange: props.onHoverChange
    });
    let renderProps = ($64fa3d84918910a7$export$4d86445c2cf5e3)({
        ...props,
        id: undefined,
        defaultClassName: 'react-aria-Tab',
        values: {
            isSelected: isSelected,
            isDisabled: isDisabled,
            isFocused: isFocused,
            isFocusVisible: isFocusVisible,
            isPressed: isPressed,
            isHovered: isHovered
        }
    });
    let ElementType = item.props.href ? 'a' : 'div';
    return /*#__PURE__*/ (React).createElement(ElementType, {
        ...($3ef42575df84b30b$export$9d1611c77c2fe928)(tabProps, focusProps, hoverProps, renderProps),
        ref: ref,
        "data-selected": isSelected || undefined,
        "data-disabled": isDisabled || undefined,
        "data-focused": isFocused || undefined,
        "data-focus-visible": isFocusVisible || undefined,
        "data-pressed": isPressed || undefined,
        "data-hovered": isHovered || undefined
    });
});
function $5e8ad37a45e1c704$var$TabPanel(props, forwardedRef) {
    const state = (reactExports.useContext)($5e8ad37a45e1c704$export$364712098d2aa57c);
    let ref = ($df56164dff5785e2$export$4338b53315abf666)(forwardedRef);
    let { tabPanelProps: tabPanelProps } = ($34bce698202e07cb$export$fae0121b5afe572d)(props, state, ref);
    let { focusProps: focusProps, isFocused: isFocused, isFocusVisible: isFocusVisible } = ($f7dceffc5ad7768b$export$4e328f61c538687f)();
    let isSelected = state.selectedKey === props.id;
    let renderProps = ($64fa3d84918910a7$export$4d86445c2cf5e3)({
        ...props,
        defaultClassName: 'react-aria-TabPanel',
        values: {
            isFocused: isFocused,
            isFocusVisible: isFocusVisible,
            isInert: !isSelected,
            state: state
        }
    });
    if (!isSelected && !props.shouldForceMount) return null;
    let DOMProps = ($65484d02dcb7eb3e$export$457c3d6518dd4c6f)(props);
    delete DOMProps.id;
    let domProps = isSelected ? ($3ef42575df84b30b$export$9d1611c77c2fe928)(DOMProps, tabPanelProps, focusProps, renderProps) : renderProps;
    return /*#__PURE__*/ (React).createElement("div", {
        ...domProps,
        ref: ref,
        "data-focused": isFocused || undefined,
        "data-focus-visible": isFocusVisible || undefined,
        // @ts-ignore
        inert: !isSelected ? 'true' : undefined,
        "data-inert": !isSelected ? 'true' : undefined
    }, /*#__PURE__*/ (React).createElement(($64fa3d84918910a7$export$2881499e37b75b9a), {
        values: [
            [
                $5e8ad37a45e1c704$export$cfa7aa87c26e7d1f,
                null
            ],
            [
                $5e8ad37a45e1c704$export$364712098d2aa57c,
                null
            ]
        ]
    }, renderProps.children));
}
/**
 * A TabPanel provides the content for a tab.
 */ const $5e8ad37a45e1c704$export$3d96ec278d3efce4 = /*#__PURE__*/ ($f39a9eba43920ace$export$86427a43e3e48ebb)($5e8ad37a45e1c704$var$TabPanel);

/*
 * Copyright 2022 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 










const $eaf9e70818b436db$export$5b07b5dd2cbd96e3 = /*#__PURE__*/ (reactExports.createContext)(null);
const $eaf9e70818b436db$export$e755ce3685dd0ca9 = /*#__PURE__*/ (reactExports.createContext)(null);
function $eaf9e70818b436db$var$TagGroup(props, ref) {
    [props, ref] = ($64fa3d84918910a7$export$29f1550f4b0d4415)(props, ref, $eaf9e70818b436db$export$5b07b5dd2cbd96e3);
    return /*#__PURE__*/ (React).createElement(($e1995378a142960e$export$bf788dd355e3a401), {
        content: props.children
    }, (collection)=>/*#__PURE__*/ (React).createElement($eaf9e70818b436db$var$TagGroupInner, {
            props: props,
            forwardedRef: ref,
            collection: collection
        }));
}
function $eaf9e70818b436db$var$TagGroupInner({ props: props, forwardedRef: ref, collection: collection }) {
    let tagListRef = (reactExports.useRef)(null);
    let [labelRef, label] = ($64fa3d84918910a7$export$9d4c57ee4c6ffdd8)();
    let state = ($e72dd72e1c76a225$export$2f645645f7bca764)({
        ...props,
        children: undefined,
        collection: collection
    });
    // Prevent DOM props from going to two places.
    let domProps = ($65484d02dcb7eb3e$export$457c3d6518dd4c6f)(props);
    let domPropOverrides = Object.fromEntries(Object.entries(domProps).map(([k])=>[
            k,
            undefined
        ]));
    let { gridProps: gridProps, labelProps: labelProps, descriptionProps: descriptionProps, errorMessageProps: errorMessageProps } = ($d7323bca8d074eeb$export$4f8b5cda58b7e8ff)({
        ...props,
        ...domPropOverrides,
        label: label
    }, state, tagListRef);
    var _props_className;
    return /*#__PURE__*/ (React).createElement("div", {
        ...domProps,
        ref: ref,
        slot: props.slot || undefined,
        className: (_props_className = props.className) !== null && _props_className !== void 0 ? _props_className : 'react-aria-TagGroup',
        style: props.style
    }, /*#__PURE__*/ (React).createElement(($64fa3d84918910a7$export$2881499e37b75b9a), {
        values: [
            [
                ($01b77f81d0f07f68$export$75b6ee27786ba447),
                {
                    ...labelProps,
                    elementType: 'span',
                    ref: labelRef
                }
            ],
            [
                $eaf9e70818b436db$export$e755ce3685dd0ca9,
                {
                    ...gridProps,
                    ref: tagListRef
                }
            ],
            [
                ($eed445e0843c11d0$export$7c5906fe4f1f2af2),
                state
            ],
            [
                ($514c0188e459b4c0$export$9afb8bc826b033ea),
                {
                    slots: {
                        description: descriptionProps,
                        errorMessage: errorMessageProps
                    }
                }
            ]
        ]
    }, props.children));
}
/**
 * A tag group is a focusable list of labels, categories, keywords, filters, or other items, with support for keyboard navigation, selection, and removal.
 */ const $eaf9e70818b436db$export$67ea30858aaf75e3 = /*#__PURE__*/ (reactExports.forwardRef)($eaf9e70818b436db$var$TagGroup);
function $eaf9e70818b436db$var$TagList(props, ref) {
    let state = (reactExports.useContext)(($eed445e0843c11d0$export$7c5906fe4f1f2af2));
    return state ? /*#__PURE__*/ (React).createElement($eaf9e70818b436db$var$TagListInner, {
        props: props,
        forwardedRef: ref
    }) : /*#__PURE__*/ (React).createElement(($e1995378a142960e$export$fb8073518f34e6ec), props);
}
function $eaf9e70818b436db$var$TagListInner({ props: props, forwardedRef: forwardedRef }) {
    let state = (reactExports.useContext)(($eed445e0843c11d0$export$7c5906fe4f1f2af2));
    let { CollectionRoot: CollectionRoot } = (reactExports.useContext)(($7135fc7d473fd974$export$4feb769f8ddf26c5));
    let [gridProps, ref] = ($64fa3d84918910a7$export$29f1550f4b0d4415)(props, forwardedRef, $eaf9e70818b436db$export$e755ce3685dd0ca9);
    delete gridProps.items;
    delete gridProps.renderEmptyState;
    let { focusProps: focusProps, isFocused: isFocused, isFocusVisible: isFocusVisible } = ($f7dceffc5ad7768b$export$4e328f61c538687f)();
    let renderValues = {
        isEmpty: state.collection.size === 0,
        isFocused: isFocused,
        isFocusVisible: isFocusVisible,
        state: state
    };
    let renderProps = ($64fa3d84918910a7$export$4d86445c2cf5e3)({
        className: props.className,
        style: props.style,
        defaultClassName: 'react-aria-TagList',
        values: renderValues
    });
    let persistedKeys = ($7135fc7d473fd974$export$90e00781bc59d8f9)(state.selectionManager.focusedKey);
    return /*#__PURE__*/ (React).createElement("div", {
        ...($3ef42575df84b30b$export$9d1611c77c2fe928)(gridProps, focusProps),
        ...renderProps,
        ref: ref,
        "data-empty": state.collection.size === 0 || undefined,
        "data-focused": isFocused || undefined,
        "data-focus-visible": isFocusVisible || undefined
    }, state.collection.size === 0 && props.renderEmptyState ? props.renderEmptyState(renderValues) : /*#__PURE__*/ (React).createElement(CollectionRoot, {
        collection: state.collection,
        persistedKeys: persistedKeys
    }));
}
/**
 * A tag list is a container for tags within a TagGroup.
 */ const $eaf9e70818b436db$export$f9fef0f55402315b = /*#__PURE__*/ (reactExports.forwardRef)($eaf9e70818b436db$var$TagList);
const $eaf9e70818b436db$export$3288d34c523a1192 = /*#__PURE__*/ ($e1995378a142960e$export$18af5c7a9e9b3664)('item', (props, forwardedRef, item)=>{
    let state = (reactExports.useContext)(($eed445e0843c11d0$export$7c5906fe4f1f2af2));
    let ref = ($df56164dff5785e2$export$4338b53315abf666)(forwardedRef);
    let { focusProps: focusProps, isFocusVisible: isFocusVisible } = ($f7dceffc5ad7768b$export$4e328f61c538687f)({
        within: true
    });
    let { rowProps: rowProps, gridCellProps: gridCellProps, removeButtonProps: removeButtonProps, ...states } = ($fc6126c82a4601f1$export$3f568fff7dff2f03)({
        item: item
    }, state, ref);
    let { hoverProps: hoverProps, isHovered: isHovered } = ($6179b936705e76d3$export$ae780daf29e6d456)({
        isDisabled: !states.allowsSelection,
        onHoverStart: item.props.onHoverStart,
        onHoverChange: item.props.onHoverChange,
        onHoverEnd: item.props.onHoverEnd
    });
    let renderProps = ($64fa3d84918910a7$export$4d86445c2cf5e3)({
        ...props,
        id: undefined,
        children: item.rendered,
        defaultClassName: 'react-aria-Tag',
        values: {
            ...states,
            isFocusVisible: isFocusVisible,
            isHovered: isHovered,
            selectionMode: state.selectionManager.selectionMode,
            selectionBehavior: state.selectionManager.selectionBehavior
        }
    });
    (reactExports.useEffect)(()=>{
        if (!item.textValue) console.warn('A `textValue` prop is required for <Tag> elements with non-plain text children for accessibility.');
    }, [
        item.textValue
    ]);
    return /*#__PURE__*/ (React).createElement("div", {
        ref: ref,
        ...renderProps,
        ...($3ef42575df84b30b$export$9d1611c77c2fe928)(($65484d02dcb7eb3e$export$457c3d6518dd4c6f)(props), rowProps, focusProps, hoverProps),
        "data-selected": states.isSelected || undefined,
        "data-disabled": states.isDisabled || undefined,
        "data-hovered": isHovered || undefined,
        "data-focused": states.isFocused || undefined,
        "data-focus-visible": isFocusVisible || undefined,
        "data-pressed": states.isPressed || undefined,
        "data-allows-removing": states.allowsRemoving || undefined,
        "data-selection-mode": state.selectionManager.selectionMode === 'none' ? undefined : state.selectionManager.selectionMode
    }, /*#__PURE__*/ (React).createElement("div", {
        ...gridCellProps,
        style: {
            display: 'contents'
        }
    }, /*#__PURE__*/ (React).createElement(($64fa3d84918910a7$export$2881499e37b75b9a), {
        values: [
            [
                ($d2b4bc8c273e7be6$export$24d547caef80ccd1),
                {
                    slots: {
                        remove: removeButtonProps
                    }
                }
            ],
            [
                ($7135fc7d473fd974$export$4feb769f8ddf26c5),
                ($7135fc7d473fd974$export$a164736487e3f0ae)
            ]
        ]
    }, renderProps.children)));
});

const $216918bed6669f72$export$2dc6166a7e65358c = /*#__PURE__*/ (reactExports.createContext)({});

/*
 * Copyright 2022 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 









const $bcdf0525bf22703d$export$2129e27b3ef0d483 = /*#__PURE__*/ (reactExports.createContext)(null);
function $bcdf0525bf22703d$var$TextField(props, ref) {
    [props, ref] = ($64fa3d84918910a7$export$29f1550f4b0d4415)(props, ref, $bcdf0525bf22703d$export$2129e27b3ef0d483);
    let { validationBehavior: formValidationBehavior } = ($64fa3d84918910a7$export$fabf2dc03a41866e)(($d3e0e05bdfcf66bd$export$c24727297075ec6a)) || {};
    var _props_validationBehavior, _ref;
    let validationBehavior = (_ref = (_props_validationBehavior = props.validationBehavior) !== null && _props_validationBehavior !== void 0 ? _props_validationBehavior : formValidationBehavior) !== null && _ref !== void 0 ? _ref : 'native';
    let inputRef = (reactExports.useRef)(null);
    let [labelRef, label] = ($64fa3d84918910a7$export$9d4c57ee4c6ffdd8)();
    let [inputElementType, setInputElementType] = (reactExports.useState)('input');
    let { labelProps: labelProps, inputProps: inputProps, descriptionProps: descriptionProps, errorMessageProps: errorMessageProps, ...validation } = ($2d73ec29415bd339$export$712718f7aec83d5)({
        ...($64fa3d84918910a7$export$ef03459518577ad4)(props),
        inputElementType: inputElementType,
        label: label,
        validationBehavior: validationBehavior
    }, inputRef);
    // Intercept setting the input ref so we can determine what kind of element we have.
    // useTextField uses this to determine what props to include.
    let inputOrTextAreaRef = (reactExports.useCallback)((el)=>{
        inputRef.current = el;
        if (el) setInputElementType(el instanceof HTMLTextAreaElement ? 'textarea' : 'input');
    }, []);
    let renderProps = ($64fa3d84918910a7$export$4d86445c2cf5e3)({
        ...props,
        values: {
            isDisabled: props.isDisabled || false,
            isInvalid: validation.isInvalid,
            isReadOnly: props.isReadOnly || false,
            isRequired: props.isRequired || false
        },
        defaultClassName: 'react-aria-TextField'
    });
    let DOMProps = ($65484d02dcb7eb3e$export$457c3d6518dd4c6f)(props);
    delete DOMProps.id;
    return /*#__PURE__*/ (React).createElement("div", {
        ...DOMProps,
        ...renderProps,
        ref: ref,
        slot: props.slot || undefined,
        "data-disabled": props.isDisabled || undefined,
        "data-invalid": validation.isInvalid || undefined,
        "data-readonly": props.isReadOnly || undefined,
        "data-required": props.isRequired || undefined
    }, /*#__PURE__*/ (React).createElement(($64fa3d84918910a7$export$2881499e37b75b9a), {
        values: [
            [
                ($01b77f81d0f07f68$export$75b6ee27786ba447),
                {
                    ...labelProps,
                    ref: labelRef
                }
            ],
            [
                ($3985021b0ad6602f$export$37fb8590cf2c088c),
                {
                    ...inputProps,
                    ref: inputOrTextAreaRef
                }
            ],
            [
                ($216918bed6669f72$export$2dc6166a7e65358c),
                {
                    ...inputProps,
                    ref: inputOrTextAreaRef
                }
            ],
            [
                ($514c0188e459b4c0$export$9afb8bc826b033ea),
                {
                    slots: {
                        description: descriptionProps,
                        errorMessage: errorMessageProps
                    }
                }
            ],
            [
                ($ee014567cb39d3f0$export$ff05c3ac10437e03),
                validation
            ]
        ]
    }, renderProps.children));
}
/**
 * A text field allows a user to enter a plain text value with a keyboard.
 */ const $bcdf0525bf22703d$export$2c73285ae9390cec = /*#__PURE__*/ (reactExports.forwardRef)($bcdf0525bf22703d$var$TextField);

/*
 * Copyright 2022 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 



const $efde0372d7a700fe$export$43506d75ebd2e218 = /*#__PURE__*/ (reactExports.createContext)({});
function $efde0372d7a700fe$var$ToggleButton(props, ref) {
    [props, ref] = ($64fa3d84918910a7$export$29f1550f4b0d4415)(props, ref, $efde0372d7a700fe$export$43506d75ebd2e218);
    let state = ($3017fa7ffdddec74$export$8042c6c013fd5226)(props);
    let { buttonProps: buttonProps, isPressed: isPressed } = ($55f54f7887471b58$export$51e84d46ca0bc451)(props, state, ref);
    let { focusProps: focusProps, isFocused: isFocused, isFocusVisible: isFocusVisible } = ($f7dceffc5ad7768b$export$4e328f61c538687f)(props);
    let { hoverProps: hoverProps, isHovered: isHovered } = ($6179b936705e76d3$export$ae780daf29e6d456)(props);
    let renderProps = ($64fa3d84918910a7$export$4d86445c2cf5e3)({
        ...props,
        values: {
            isHovered: isHovered,
            isPressed: isPressed,
            isFocused: isFocused,
            isSelected: state.isSelected,
            isFocusVisible: isFocusVisible,
            isDisabled: props.isDisabled || false,
            state: state
        },
        defaultClassName: 'react-aria-ToggleButton'
    });
    return /*#__PURE__*/ (React).createElement("button", {
        ...($3ef42575df84b30b$export$9d1611c77c2fe928)(buttonProps, focusProps, hoverProps),
        ...renderProps,
        ref: ref,
        slot: props.slot || undefined,
        "data-focused": isFocused || undefined,
        "data-disabled": props.isDisabled || undefined,
        "data-pressed": isPressed || undefined,
        "data-selected": state.isSelected || undefined,
        "data-hovered": isHovered || undefined,
        "data-focus-visible": isFocusVisible || undefined
    });
}
/**
 * A toggle button allows a user to toggle a selection on or off, for example switching between two states or modes.
 */ const $efde0372d7a700fe$export$d2b052e7b4be1756 = /*#__PURE__*/ (reactExports.forwardRef)($efde0372d7a700fe$var$ToggleButton);

/*
 * Copyright 2022 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 






const $4e3b923658d69c60$export$7a7623236eec67fa = /*#__PURE__*/ (reactExports.createContext)(null);
const $4e3b923658d69c60$export$39ae08fa83328b12 = /*#__PURE__*/ (reactExports.createContext)(null);
function $4e3b923658d69c60$var$Tooltip({ UNSTABLE_portalContainer: UNSTABLE_portalContainer, ...props }, ref) {
    [props, ref] = ($64fa3d84918910a7$export$29f1550f4b0d4415)(props, ref, $4e3b923658d69c60$export$39ae08fa83328b12);
    let contextState = (reactExports.useContext)($4e3b923658d69c60$export$7a7623236eec67fa);
    let localState = ($8796f90736e175cb$export$4d40659c25ecb50b)(props);
    let state = props.isOpen != null || props.defaultOpen != null || !contextState ? localState : contextState;
    let isExiting = ($64fa3d84918910a7$export$45fda7c47f93fd48)(ref, state.isOpen) || props.isExiting || false;
    if (!state.isOpen && !isExiting) return null;
    return /*#__PURE__*/ (React).createElement(($f57aed4a881a3485$export$b47c3594eab58386), {
        portalContainer: UNSTABLE_portalContainer
    }, /*#__PURE__*/ (React).createElement($4e3b923658d69c60$var$TooltipInner, {
        ...props,
        tooltipRef: ref,
        isExiting: isExiting
    }));
}
/**
 * A tooltip displays a description of an element on hover or focus.
 */ const $4e3b923658d69c60$export$28c660c63b792dea = /*#__PURE__*/ (reactExports.forwardRef)($4e3b923658d69c60$var$Tooltip);
function $4e3b923658d69c60$var$TooltipInner(props) {
    let state = (reactExports.useContext)($4e3b923658d69c60$export$7a7623236eec67fa);
    // Calculate the arrow size internally
    // Referenced from: packages/@react-spectrum/tooltip/src/TooltipTrigger.tsx
    let arrowRef = (reactExports.useRef)(null);
    let [arrowWidth, setArrowWidth] = (reactExports.useState)(0);
    ($f0a04ccd8dbdd83b$export$e5c5a5f917a5871c)(()=>{
        if (arrowRef.current && state.isOpen) setArrowWidth(arrowRef.current.getBoundingClientRect().width);
    }, [
        state.isOpen,
        arrowRef
    ]);
    let { overlayProps: overlayProps, arrowProps: arrowProps, placement: placement } = ($2a41e45df1593e64$export$d39e1813b3bdd0e1)({
        placement: props.placement || 'top',
        targetRef: props.triggerRef,
        overlayRef: props.tooltipRef,
        offset: props.offset,
        crossOffset: props.crossOffset,
        isOpen: state.isOpen,
        arrowSize: arrowWidth,
        arrowBoundaryOffset: props.arrowBoundaryOffset,
        shouldFlip: props.shouldFlip
    });
    let isEntering = ($64fa3d84918910a7$export$6d3443f2c48bfc20)(props.tooltipRef, !!placement) || props.isEntering || false;
    let renderProps = ($64fa3d84918910a7$export$4d86445c2cf5e3)({
        ...props,
        defaultClassName: 'react-aria-Tooltip',
        values: {
            placement: placement,
            isEntering: isEntering,
            isExiting: props.isExiting,
            state: state
        }
    });
    props = ($3ef42575df84b30b$export$9d1611c77c2fe928)(props, overlayProps);
    let { tooltipProps: tooltipProps } = ($326e436e94273fe1$export$1c4b08e0eca38426)(props, state);
    return /*#__PURE__*/ (React).createElement("div", {
        ...tooltipProps,
        ref: props.tooltipRef,
        ...renderProps,
        style: {
            ...overlayProps.style,
            ...renderProps.style
        },
        "data-placement": placement,
        "data-entering": isEntering || undefined,
        "data-exiting": props.isExiting || undefined
    }, /*#__PURE__*/ (React).createElement(($44f671af83e7d9e0$export$2de4954e8ae13b9f).Provider, {
        value: {
            ...arrowProps,
            placement: placement,
            ref: arrowRef
        }
    }, renderProps.children));
}

/*
 * Copyright 2022 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 



function $d8f176866e6dc039$export$2cfc5be7a55829f6(options) {
    let dragAndDropHooks = (reactExports.useMemo)(()=>{
        let { onDrop: onDrop, onInsert: onInsert, onItemDrop: onItemDrop, onReorder: onReorder, onRootDrop: onRootDrop, getItems: getItems, renderDragPreview: renderDragPreview, renderDropIndicator: renderDropIndicator, dropTargetDelegate: dropTargetDelegate } = options;
        let isDraggable = !!getItems;
        let isDroppable = !!(onDrop || onInsert || onItemDrop || onReorder || onRootDrop);
        let hooks = {};
        if (isDraggable) {
            hooks.useDraggableCollectionState = function useDraggableCollectionStateOverride(props) {
                return ($b45bbbaf0c3785df$export$29efd034f1d79f81)({
                    ...props,
                    ...options
                });
            };
            hooks.useDraggableCollection = ($4ac1fdc3a0fcd564$export$2962a7984b2f0a80);
            hooks.useDraggableItem = ($fd98cf7cbf233429$export$b35afafff42da2d9);
            hooks.DragPreview = ($ad0e3f3d9c50e4ba$export$905ab40ac2179daa);
            hooks.renderDragPreview = renderDragPreview;
            hooks.isVirtualDragging = ($67560de7c78cb232$export$403bc76cbf68cf60);
        }
        if (isDroppable) {
            hooks.useDroppableCollectionState = function useDroppableCollectionStateOverride(props) {
                return ($e672e8bc247525d1$export$926850f6ecef79d0)({
                    ...props,
                    ...options
                });
            };
            hooks.useDroppableItem = ($bfaab576ce1c580e$export$f7b0c5d28b66b6a5);
            hooks.useDroppableCollection = function useDroppableCollectionOverride(props, state, ref) {
                return ($4b52e4eff84e5217$export$f4e2f423c21f7b04)({
                    ...props,
                    ...options
                }, state, ref);
            };
            hooks.useDropIndicator = ($ddf25448c71fc93a$export$8d0e41d2815afac5);
            hooks.renderDropIndicator = renderDropIndicator;
            hooks.dropTargetDelegate = dropTargetDelegate;
            hooks.ListDropTargetDelegate = ($3ca85212bf8898e4$export$fbd65d14c79e28cc);
        }
        return hooks;
    }, [
        options
    ]);
    return {
        dragAndDropHooks: dragAndDropHooks
    };
}

var l=e=>typeof e=="boolean"?`${e}`:e===0?"0":e,u=e=>!e||typeof e!="object"||Object.keys(e).length===0,x=(e,o)=>JSON.stringify(e)===JSON.stringify(o);function i(e,o){e.forEach(function(r){Array.isArray(r)?i(r,o):o.push(r);});}function y(e){let o=[];return i(e,o),o}var a=(...e)=>y(e).filter(Boolean),p=(e,o)=>{let r={},c=Object.keys(e),f=Object.keys(o);for(let t of c)if(f.includes(t)){let s=e[t],n=o[t];typeof s=="object"&&typeof n=="object"?r[t]=p(s,n):Array.isArray(s)||Array.isArray(n)?r[t]=a(n,s):r[t]=n+" "+s;}else r[t]=e[t];for(let t of f)c.includes(t)||(r[t]=o[t]);return r},g=e=>!e||typeof e!="string"?e:e.replace(/\s+/g," ").trim();

const CLASS_PART_SEPARATOR = '-';
const createClassGroupUtils = config => {
  const classMap = createClassMap(config);
  const {
    conflictingClassGroups,
    conflictingClassGroupModifiers
  } = config;
  const getClassGroupId = className => {
    const classParts = className.split(CLASS_PART_SEPARATOR);
    // Classes like `-inset-1` produce an empty string as first classPart. We assume that classes for negative values are used correctly and remove it from classParts.
    if (classParts[0] === '' && classParts.length !== 1) {
      classParts.shift();
    }
    return getGroupRecursive(classParts, classMap) || getGroupIdForArbitraryProperty(className);
  };
  const getConflictingClassGroupIds = (classGroupId, hasPostfixModifier) => {
    const conflicts = conflictingClassGroups[classGroupId] || [];
    if (hasPostfixModifier && conflictingClassGroupModifiers[classGroupId]) {
      return [...conflicts, ...conflictingClassGroupModifiers[classGroupId]];
    }
    return conflicts;
  };
  return {
    getClassGroupId,
    getConflictingClassGroupIds
  };
};
const getGroupRecursive = (classParts, classPartObject) => {
  if (classParts.length === 0) {
    return classPartObject.classGroupId;
  }
  const currentClassPart = classParts[0];
  const nextClassPartObject = classPartObject.nextPart.get(currentClassPart);
  const classGroupFromNextClassPart = nextClassPartObject ? getGroupRecursive(classParts.slice(1), nextClassPartObject) : undefined;
  if (classGroupFromNextClassPart) {
    return classGroupFromNextClassPart;
  }
  if (classPartObject.validators.length === 0) {
    return undefined;
  }
  const classRest = classParts.join(CLASS_PART_SEPARATOR);
  return classPartObject.validators.find(({
    validator
  }) => validator(classRest))?.classGroupId;
};
const arbitraryPropertyRegex = /^\[(.+)\]$/;
const getGroupIdForArbitraryProperty = className => {
  if (arbitraryPropertyRegex.test(className)) {
    const arbitraryPropertyClassName = arbitraryPropertyRegex.exec(className)[1];
    const property = arbitraryPropertyClassName?.substring(0, arbitraryPropertyClassName.indexOf(':'));
    if (property) {
      // I use two dots here because one dot is used as prefix for class groups in plugins
      return 'arbitrary..' + property;
    }
  }
};
/**
 * Exported for testing only
 */
const createClassMap = config => {
  const {
    theme,
    prefix
  } = config;
  const classMap = {
    nextPart: new Map(),
    validators: []
  };
  const prefixedClassGroupEntries = getPrefixedClassGroupEntries(Object.entries(config.classGroups), prefix);
  prefixedClassGroupEntries.forEach(([classGroupId, classGroup]) => {
    processClassesRecursively(classGroup, classMap, classGroupId, theme);
  });
  return classMap;
};
const processClassesRecursively = (classGroup, classPartObject, classGroupId, theme) => {
  classGroup.forEach(classDefinition => {
    if (typeof classDefinition === 'string') {
      const classPartObjectToEdit = classDefinition === '' ? classPartObject : getPart(classPartObject, classDefinition);
      classPartObjectToEdit.classGroupId = classGroupId;
      return;
    }
    if (typeof classDefinition === 'function') {
      if (isThemeGetter(classDefinition)) {
        processClassesRecursively(classDefinition(theme), classPartObject, classGroupId, theme);
        return;
      }
      classPartObject.validators.push({
        validator: classDefinition,
        classGroupId
      });
      return;
    }
    Object.entries(classDefinition).forEach(([key, classGroup]) => {
      processClassesRecursively(classGroup, getPart(classPartObject, key), classGroupId, theme);
    });
  });
};
const getPart = (classPartObject, path) => {
  let currentClassPartObject = classPartObject;
  path.split(CLASS_PART_SEPARATOR).forEach(pathPart => {
    if (!currentClassPartObject.nextPart.has(pathPart)) {
      currentClassPartObject.nextPart.set(pathPart, {
        nextPart: new Map(),
        validators: []
      });
    }
    currentClassPartObject = currentClassPartObject.nextPart.get(pathPart);
  });
  return currentClassPartObject;
};
const isThemeGetter = func => func.isThemeGetter;
const getPrefixedClassGroupEntries = (classGroupEntries, prefix) => {
  if (!prefix) {
    return classGroupEntries;
  }
  return classGroupEntries.map(([classGroupId, classGroup]) => {
    const prefixedClassGroup = classGroup.map(classDefinition => {
      if (typeof classDefinition === 'string') {
        return prefix + classDefinition;
      }
      if (typeof classDefinition === 'object') {
        return Object.fromEntries(Object.entries(classDefinition).map(([key, value]) => [prefix + key, value]));
      }
      return classDefinition;
    });
    return [classGroupId, prefixedClassGroup];
  });
};

// LRU cache inspired from hashlru (https://github.com/dominictarr/hashlru/blob/v1.0.4/index.js) but object replaced with Map to improve performance
const createLruCache = maxCacheSize => {
  if (maxCacheSize < 1) {
    return {
      get: () => undefined,
      set: () => {}
    };
  }
  let cacheSize = 0;
  let cache = new Map();
  let previousCache = new Map();
  const update = (key, value) => {
    cache.set(key, value);
    cacheSize++;
    if (cacheSize > maxCacheSize) {
      cacheSize = 0;
      previousCache = cache;
      cache = new Map();
    }
  };
  return {
    get(key) {
      let value = cache.get(key);
      if (value !== undefined) {
        return value;
      }
      if ((value = previousCache.get(key)) !== undefined) {
        update(key, value);
        return value;
      }
    },
    set(key, value) {
      if (cache.has(key)) {
        cache.set(key, value);
      } else {
        update(key, value);
      }
    }
  };
};
const IMPORTANT_MODIFIER = '!';
const createParseClassName = config => {
  const {
    separator,
    experimentalParseClassName
  } = config;
  const isSeparatorSingleCharacter = separator.length === 1;
  const firstSeparatorCharacter = separator[0];
  const separatorLength = separator.length;
  // parseClassName inspired by https://github.com/tailwindlabs/tailwindcss/blob/v3.2.2/src/util/splitAtTopLevelOnly.js
  const parseClassName = className => {
    const modifiers = [];
    let bracketDepth = 0;
    let modifierStart = 0;
    let postfixModifierPosition;
    for (let index = 0; index < className.length; index++) {
      let currentCharacter = className[index];
      if (bracketDepth === 0) {
        if (currentCharacter === firstSeparatorCharacter && (isSeparatorSingleCharacter || className.slice(index, index + separatorLength) === separator)) {
          modifiers.push(className.slice(modifierStart, index));
          modifierStart = index + separatorLength;
          continue;
        }
        if (currentCharacter === '/') {
          postfixModifierPosition = index;
          continue;
        }
      }
      if (currentCharacter === '[') {
        bracketDepth++;
      } else if (currentCharacter === ']') {
        bracketDepth--;
      }
    }
    const baseClassNameWithImportantModifier = modifiers.length === 0 ? className : className.substring(modifierStart);
    const hasImportantModifier = baseClassNameWithImportantModifier.startsWith(IMPORTANT_MODIFIER);
    const baseClassName = hasImportantModifier ? baseClassNameWithImportantModifier.substring(1) : baseClassNameWithImportantModifier;
    const maybePostfixModifierPosition = postfixModifierPosition && postfixModifierPosition > modifierStart ? postfixModifierPosition - modifierStart : undefined;
    return {
      modifiers,
      hasImportantModifier,
      baseClassName,
      maybePostfixModifierPosition
    };
  };
  if (experimentalParseClassName) {
    return className => experimentalParseClassName({
      className,
      parseClassName
    });
  }
  return parseClassName;
};
/**
 * Sorts modifiers according to following schema:
 * - Predefined modifiers are sorted alphabetically
 * - When an arbitrary variant appears, it must be preserved which modifiers are before and after it
 */
const sortModifiers = modifiers => {
  if (modifiers.length <= 1) {
    return modifiers;
  }
  const sortedModifiers = [];
  let unsortedModifiers = [];
  modifiers.forEach(modifier => {
    const isArbitraryVariant = modifier[0] === '[';
    if (isArbitraryVariant) {
      sortedModifiers.push(...unsortedModifiers.sort(), modifier);
      unsortedModifiers = [];
    } else {
      unsortedModifiers.push(modifier);
    }
  });
  sortedModifiers.push(...unsortedModifiers.sort());
  return sortedModifiers;
};
const createConfigUtils = config => ({
  cache: createLruCache(config.cacheSize),
  parseClassName: createParseClassName(config),
  ...createClassGroupUtils(config)
});
const SPLIT_CLASSES_REGEX = /\s+/;
const mergeClassList = (classList, configUtils) => {
  const {
    parseClassName,
    getClassGroupId,
    getConflictingClassGroupIds
  } = configUtils;
  /**
   * Set of classGroupIds in following format:
   * `{importantModifier}{variantModifiers}{classGroupId}`
   * @example 'float'
   * @example 'hover:focus:bg-color'
   * @example 'md:!pr'
   */
  const classGroupsInConflict = [];
  const classNames = classList.trim().split(SPLIT_CLASSES_REGEX);
  let result = '';
  for (let index = classNames.length - 1; index >= 0; index -= 1) {
    const originalClassName = classNames[index];
    const {
      modifiers,
      hasImportantModifier,
      baseClassName,
      maybePostfixModifierPosition
    } = parseClassName(originalClassName);
    let hasPostfixModifier = Boolean(maybePostfixModifierPosition);
    let classGroupId = getClassGroupId(hasPostfixModifier ? baseClassName.substring(0, maybePostfixModifierPosition) : baseClassName);
    if (!classGroupId) {
      if (!hasPostfixModifier) {
        // Not a Tailwind class
        result = originalClassName + (result.length > 0 ? ' ' + result : result);
        continue;
      }
      classGroupId = getClassGroupId(baseClassName);
      if (!classGroupId) {
        // Not a Tailwind class
        result = originalClassName + (result.length > 0 ? ' ' + result : result);
        continue;
      }
      hasPostfixModifier = false;
    }
    const variantModifier = sortModifiers(modifiers).join(':');
    const modifierId = hasImportantModifier ? variantModifier + IMPORTANT_MODIFIER : variantModifier;
    const classId = modifierId + classGroupId;
    if (classGroupsInConflict.includes(classId)) {
      // Tailwind class omitted due to conflict
      continue;
    }
    classGroupsInConflict.push(classId);
    const conflictGroups = getConflictingClassGroupIds(classGroupId, hasPostfixModifier);
    for (let i = 0; i < conflictGroups.length; ++i) {
      const group = conflictGroups[i];
      classGroupsInConflict.push(modifierId + group);
    }
    // Tailwind class not in conflict
    result = originalClassName + (result.length > 0 ? ' ' + result : result);
  }
  return result;
};

/**
 * The code in this file is copied from https://github.com/lukeed/clsx and modified to suit the needs of tailwind-merge better.
 *
 * Specifically:
 * - Runtime code from https://github.com/lukeed/clsx/blob/v1.2.1/src/index.js
 * - TypeScript types from https://github.com/lukeed/clsx/blob/v1.2.1/clsx.d.ts
 *
 * Original code has MIT license: Copyright (c) Luke Edwards <luke.edwards05@gmail.com> (lukeed.com)
 */
function twJoin() {
  let index = 0;
  let argument;
  let resolvedValue;
  let string = '';
  while (index < arguments.length) {
    if (argument = arguments[index++]) {
      if (resolvedValue = toValue(argument)) {
        string && (string += ' ');
        string += resolvedValue;
      }
    }
  }
  return string;
}
const toValue = mix => {
  if (typeof mix === 'string') {
    return mix;
  }
  let resolvedValue;
  let string = '';
  for (let k = 0; k < mix.length; k++) {
    if (mix[k]) {
      if (resolvedValue = toValue(mix[k])) {
        string && (string += ' ');
        string += resolvedValue;
      }
    }
  }
  return string;
};
function createTailwindMerge(createConfigFirst, ...createConfigRest) {
  let configUtils;
  let cacheGet;
  let cacheSet;
  let functionToCall = initTailwindMerge;
  function initTailwindMerge(classList) {
    const config = createConfigRest.reduce((previousConfig, createConfigCurrent) => createConfigCurrent(previousConfig), createConfigFirst());
    configUtils = createConfigUtils(config);
    cacheGet = configUtils.cache.get;
    cacheSet = configUtils.cache.set;
    functionToCall = tailwindMerge;
    return tailwindMerge(classList);
  }
  function tailwindMerge(classList) {
    const cachedResult = cacheGet(classList);
    if (cachedResult) {
      return cachedResult;
    }
    const result = mergeClassList(classList, configUtils);
    cacheSet(classList, result);
    return result;
  }
  return function callTailwindMerge() {
    return functionToCall(twJoin.apply(null, arguments));
  };
}
const fromTheme = key => {
  const themeGetter = theme => theme[key] || [];
  themeGetter.isThemeGetter = true;
  return themeGetter;
};
const arbitraryValueRegex = /^\[(?:([a-z-]+):)?(.+)\]$/i;
const fractionRegex = /^\d+\/\d+$/;
const stringLengths = /*#__PURE__*/new Set(['px', 'full', 'screen']);
const tshirtUnitRegex = /^(\d+(\.\d+)?)?(xs|sm|md|lg|xl)$/;
const lengthUnitRegex = /\d+(%|px|r?em|[sdl]?v([hwib]|min|max)|pt|pc|in|cm|mm|cap|ch|ex|r?lh|cq(w|h|i|b|min|max))|\b(calc|min|max|clamp)\(.+\)|^0$/;
const colorFunctionRegex = /^(rgba?|hsla?|hwb|(ok)?(lab|lch))\(.+\)$/;
// Shadow always begins with x and y offset separated by underscore optionally prepended by inset
const shadowRegex = /^(inset_)?-?((\d+)?\.?(\d+)[a-z]+|0)_-?((\d+)?\.?(\d+)[a-z]+|0)/;
const imageRegex = /^(url|image|image-set|cross-fade|element|(repeating-)?(linear|radial|conic)-gradient)\(.+\)$/;
const isLength$1 = value => isNumber(value) || stringLengths.has(value) || fractionRegex.test(value);
const isArbitraryLength = value => getIsArbitraryValue(value, 'length', isLengthOnly);
const isNumber = value => Boolean(value) && !Number.isNaN(Number(value));
const isArbitraryNumber = value => getIsArbitraryValue(value, 'number', isNumber);
const isInteger = value => Boolean(value) && Number.isInteger(Number(value));
const isPercent = value => value.endsWith('%') && isNumber(value.slice(0, -1));
const isArbitraryValue = value => arbitraryValueRegex.test(value);
const isTshirtSize = value => tshirtUnitRegex.test(value);
const sizeLabels = /*#__PURE__*/new Set(['length', 'size', 'percentage']);
const isArbitrarySize = value => getIsArbitraryValue(value, sizeLabels, isNever);
const isArbitraryPosition = value => getIsArbitraryValue(value, 'position', isNever);
const imageLabels = /*#__PURE__*/new Set(['image', 'url']);
const isArbitraryImage = value => getIsArbitraryValue(value, imageLabels, isImage);
const isArbitraryShadow = value => getIsArbitraryValue(value, '', isShadow);
const isAny = () => true;
const getIsArbitraryValue = (value, label, testValue) => {
  const result = arbitraryValueRegex.exec(value);
  if (result) {
    if (result[1]) {
      return typeof label === 'string' ? result[1] === label : label.has(result[1]);
    }
    return testValue(result[2]);
  }
  return false;
};
const isLengthOnly = value =>
// `colorFunctionRegex` check is necessary because color functions can have percentages in them which which would be incorrectly classified as lengths.
// For example, `hsl(0 0% 0%)` would be classified as a length without this check.
// I could also use lookbehind assertion in `lengthUnitRegex` but that isn't supported widely enough.
lengthUnitRegex.test(value) && !colorFunctionRegex.test(value);
const isNever = () => false;
const isShadow = value => shadowRegex.test(value);
const isImage = value => imageRegex.test(value);
const getDefaultConfig = () => {
  const colors = fromTheme('colors');
  const spacing = fromTheme('spacing');
  const blur = fromTheme('blur');
  const brightness = fromTheme('brightness');
  const borderColor = fromTheme('borderColor');
  const borderRadius = fromTheme('borderRadius');
  const borderSpacing = fromTheme('borderSpacing');
  const borderWidth = fromTheme('borderWidth');
  const contrast = fromTheme('contrast');
  const grayscale = fromTheme('grayscale');
  const hueRotate = fromTheme('hueRotate');
  const invert = fromTheme('invert');
  const gap = fromTheme('gap');
  const gradientColorStops = fromTheme('gradientColorStops');
  const gradientColorStopPositions = fromTheme('gradientColorStopPositions');
  const inset = fromTheme('inset');
  const margin = fromTheme('margin');
  const opacity = fromTheme('opacity');
  const padding = fromTheme('padding');
  const saturate = fromTheme('saturate');
  const scale = fromTheme('scale');
  const sepia = fromTheme('sepia');
  const skew = fromTheme('skew');
  const space = fromTheme('space');
  const translate = fromTheme('translate');
  const getOverscroll = () => ['auto', 'contain', 'none'];
  const getOverflow = () => ['auto', 'hidden', 'clip', 'visible', 'scroll'];
  const getSpacingWithAutoAndArbitrary = () => ['auto', isArbitraryValue, spacing];
  const getSpacingWithArbitrary = () => [isArbitraryValue, spacing];
  const getLengthWithEmptyAndArbitrary = () => ['', isLength$1, isArbitraryLength];
  const getNumberWithAutoAndArbitrary = () => ['auto', isNumber, isArbitraryValue];
  const getPositions = () => ['bottom', 'center', 'left', 'left-bottom', 'left-top', 'right', 'right-bottom', 'right-top', 'top'];
  const getLineStyles = () => ['solid', 'dashed', 'dotted', 'double', 'none'];
  const getBlendModes = () => ['normal', 'multiply', 'screen', 'overlay', 'darken', 'lighten', 'color-dodge', 'color-burn', 'hard-light', 'soft-light', 'difference', 'exclusion', 'hue', 'saturation', 'color', 'luminosity'];
  const getAlign = () => ['start', 'end', 'center', 'between', 'around', 'evenly', 'stretch'];
  const getZeroAndEmpty = () => ['', '0', isArbitraryValue];
  const getBreaks = () => ['auto', 'avoid', 'all', 'avoid-page', 'page', 'left', 'right', 'column'];
  const getNumberAndArbitrary = () => [isNumber, isArbitraryValue];
  return {
    cacheSize: 500,
    separator: ':',
    theme: {
      colors: [isAny],
      spacing: [isLength$1, isArbitraryLength],
      blur: ['none', '', isTshirtSize, isArbitraryValue],
      brightness: getNumberAndArbitrary(),
      borderColor: [colors],
      borderRadius: ['none', '', 'full', isTshirtSize, isArbitraryValue],
      borderSpacing: getSpacingWithArbitrary(),
      borderWidth: getLengthWithEmptyAndArbitrary(),
      contrast: getNumberAndArbitrary(),
      grayscale: getZeroAndEmpty(),
      hueRotate: getNumberAndArbitrary(),
      invert: getZeroAndEmpty(),
      gap: getSpacingWithArbitrary(),
      gradientColorStops: [colors],
      gradientColorStopPositions: [isPercent, isArbitraryLength],
      inset: getSpacingWithAutoAndArbitrary(),
      margin: getSpacingWithAutoAndArbitrary(),
      opacity: getNumberAndArbitrary(),
      padding: getSpacingWithArbitrary(),
      saturate: getNumberAndArbitrary(),
      scale: getNumberAndArbitrary(),
      sepia: getZeroAndEmpty(),
      skew: getNumberAndArbitrary(),
      space: getSpacingWithArbitrary(),
      translate: getSpacingWithArbitrary()
    },
    classGroups: {
      // Layout
      /**
       * Aspect Ratio
       * @see https://tailwindcss.com/docs/aspect-ratio
       */
      aspect: [{
        aspect: ['auto', 'square', 'video', isArbitraryValue]
      }],
      /**
       * Container
       * @see https://tailwindcss.com/docs/container
       */
      container: ['container'],
      /**
       * Columns
       * @see https://tailwindcss.com/docs/columns
       */
      columns: [{
        columns: [isTshirtSize]
      }],
      /**
       * Break After
       * @see https://tailwindcss.com/docs/break-after
       */
      'break-after': [{
        'break-after': getBreaks()
      }],
      /**
       * Break Before
       * @see https://tailwindcss.com/docs/break-before
       */
      'break-before': [{
        'break-before': getBreaks()
      }],
      /**
       * Break Inside
       * @see https://tailwindcss.com/docs/break-inside
       */
      'break-inside': [{
        'break-inside': ['auto', 'avoid', 'avoid-page', 'avoid-column']
      }],
      /**
       * Box Decoration Break
       * @see https://tailwindcss.com/docs/box-decoration-break
       */
      'box-decoration': [{
        'box-decoration': ['slice', 'clone']
      }],
      /**
       * Box Sizing
       * @see https://tailwindcss.com/docs/box-sizing
       */
      box: [{
        box: ['border', 'content']
      }],
      /**
       * Display
       * @see https://tailwindcss.com/docs/display
       */
      display: ['block', 'inline-block', 'inline', 'flex', 'inline-flex', 'table', 'inline-table', 'table-caption', 'table-cell', 'table-column', 'table-column-group', 'table-footer-group', 'table-header-group', 'table-row-group', 'table-row', 'flow-root', 'grid', 'inline-grid', 'contents', 'list-item', 'hidden'],
      /**
       * Floats
       * @see https://tailwindcss.com/docs/float
       */
      float: [{
        float: ['right', 'left', 'none', 'start', 'end']
      }],
      /**
       * Clear
       * @see https://tailwindcss.com/docs/clear
       */
      clear: [{
        clear: ['left', 'right', 'both', 'none', 'start', 'end']
      }],
      /**
       * Isolation
       * @see https://tailwindcss.com/docs/isolation
       */
      isolation: ['isolate', 'isolation-auto'],
      /**
       * Object Fit
       * @see https://tailwindcss.com/docs/object-fit
       */
      'object-fit': [{
        object: ['contain', 'cover', 'fill', 'none', 'scale-down']
      }],
      /**
       * Object Position
       * @see https://tailwindcss.com/docs/object-position
       */
      'object-position': [{
        object: [...getPositions(), isArbitraryValue]
      }],
      /**
       * Overflow
       * @see https://tailwindcss.com/docs/overflow
       */
      overflow: [{
        overflow: getOverflow()
      }],
      /**
       * Overflow X
       * @see https://tailwindcss.com/docs/overflow
       */
      'overflow-x': [{
        'overflow-x': getOverflow()
      }],
      /**
       * Overflow Y
       * @see https://tailwindcss.com/docs/overflow
       */
      'overflow-y': [{
        'overflow-y': getOverflow()
      }],
      /**
       * Overscroll Behavior
       * @see https://tailwindcss.com/docs/overscroll-behavior
       */
      overscroll: [{
        overscroll: getOverscroll()
      }],
      /**
       * Overscroll Behavior X
       * @see https://tailwindcss.com/docs/overscroll-behavior
       */
      'overscroll-x': [{
        'overscroll-x': getOverscroll()
      }],
      /**
       * Overscroll Behavior Y
       * @see https://tailwindcss.com/docs/overscroll-behavior
       */
      'overscroll-y': [{
        'overscroll-y': getOverscroll()
      }],
      /**
       * Position
       * @see https://tailwindcss.com/docs/position
       */
      position: ['static', 'fixed', 'absolute', 'relative', 'sticky'],
      /**
       * Top / Right / Bottom / Left
       * @see https://tailwindcss.com/docs/top-right-bottom-left
       */
      inset: [{
        inset: [inset]
      }],
      /**
       * Right / Left
       * @see https://tailwindcss.com/docs/top-right-bottom-left
       */
      'inset-x': [{
        'inset-x': [inset]
      }],
      /**
       * Top / Bottom
       * @see https://tailwindcss.com/docs/top-right-bottom-left
       */
      'inset-y': [{
        'inset-y': [inset]
      }],
      /**
       * Start
       * @see https://tailwindcss.com/docs/top-right-bottom-left
       */
      start: [{
        start: [inset]
      }],
      /**
       * End
       * @see https://tailwindcss.com/docs/top-right-bottom-left
       */
      end: [{
        end: [inset]
      }],
      /**
       * Top
       * @see https://tailwindcss.com/docs/top-right-bottom-left
       */
      top: [{
        top: [inset]
      }],
      /**
       * Right
       * @see https://tailwindcss.com/docs/top-right-bottom-left
       */
      right: [{
        right: [inset]
      }],
      /**
       * Bottom
       * @see https://tailwindcss.com/docs/top-right-bottom-left
       */
      bottom: [{
        bottom: [inset]
      }],
      /**
       * Left
       * @see https://tailwindcss.com/docs/top-right-bottom-left
       */
      left: [{
        left: [inset]
      }],
      /**
       * Visibility
       * @see https://tailwindcss.com/docs/visibility
       */
      visibility: ['visible', 'invisible', 'collapse'],
      /**
       * Z-Index
       * @see https://tailwindcss.com/docs/z-index
       */
      z: [{
        z: ['auto', isInteger, isArbitraryValue]
      }],
      // Flexbox and Grid
      /**
       * Flex Basis
       * @see https://tailwindcss.com/docs/flex-basis
       */
      basis: [{
        basis: getSpacingWithAutoAndArbitrary()
      }],
      /**
       * Flex Direction
       * @see https://tailwindcss.com/docs/flex-direction
       */
      'flex-direction': [{
        flex: ['row', 'row-reverse', 'col', 'col-reverse']
      }],
      /**
       * Flex Wrap
       * @see https://tailwindcss.com/docs/flex-wrap
       */
      'flex-wrap': [{
        flex: ['wrap', 'wrap-reverse', 'nowrap']
      }],
      /**
       * Flex
       * @see https://tailwindcss.com/docs/flex
       */
      flex: [{
        flex: ['1', 'auto', 'initial', 'none', isArbitraryValue]
      }],
      /**
       * Flex Grow
       * @see https://tailwindcss.com/docs/flex-grow
       */
      grow: [{
        grow: getZeroAndEmpty()
      }],
      /**
       * Flex Shrink
       * @see https://tailwindcss.com/docs/flex-shrink
       */
      shrink: [{
        shrink: getZeroAndEmpty()
      }],
      /**
       * Order
       * @see https://tailwindcss.com/docs/order
       */
      order: [{
        order: ['first', 'last', 'none', isInteger, isArbitraryValue]
      }],
      /**
       * Grid Template Columns
       * @see https://tailwindcss.com/docs/grid-template-columns
       */
      'grid-cols': [{
        'grid-cols': [isAny]
      }],
      /**
       * Grid Column Start / End
       * @see https://tailwindcss.com/docs/grid-column
       */
      'col-start-end': [{
        col: ['auto', {
          span: ['full', isInteger, isArbitraryValue]
        }, isArbitraryValue]
      }],
      /**
       * Grid Column Start
       * @see https://tailwindcss.com/docs/grid-column
       */
      'col-start': [{
        'col-start': getNumberWithAutoAndArbitrary()
      }],
      /**
       * Grid Column End
       * @see https://tailwindcss.com/docs/grid-column
       */
      'col-end': [{
        'col-end': getNumberWithAutoAndArbitrary()
      }],
      /**
       * Grid Template Rows
       * @see https://tailwindcss.com/docs/grid-template-rows
       */
      'grid-rows': [{
        'grid-rows': [isAny]
      }],
      /**
       * Grid Row Start / End
       * @see https://tailwindcss.com/docs/grid-row
       */
      'row-start-end': [{
        row: ['auto', {
          span: [isInteger, isArbitraryValue]
        }, isArbitraryValue]
      }],
      /**
       * Grid Row Start
       * @see https://tailwindcss.com/docs/grid-row
       */
      'row-start': [{
        'row-start': getNumberWithAutoAndArbitrary()
      }],
      /**
       * Grid Row End
       * @see https://tailwindcss.com/docs/grid-row
       */
      'row-end': [{
        'row-end': getNumberWithAutoAndArbitrary()
      }],
      /**
       * Grid Auto Flow
       * @see https://tailwindcss.com/docs/grid-auto-flow
       */
      'grid-flow': [{
        'grid-flow': ['row', 'col', 'dense', 'row-dense', 'col-dense']
      }],
      /**
       * Grid Auto Columns
       * @see https://tailwindcss.com/docs/grid-auto-columns
       */
      'auto-cols': [{
        'auto-cols': ['auto', 'min', 'max', 'fr', isArbitraryValue]
      }],
      /**
       * Grid Auto Rows
       * @see https://tailwindcss.com/docs/grid-auto-rows
       */
      'auto-rows': [{
        'auto-rows': ['auto', 'min', 'max', 'fr', isArbitraryValue]
      }],
      /**
       * Gap
       * @see https://tailwindcss.com/docs/gap
       */
      gap: [{
        gap: [gap]
      }],
      /**
       * Gap X
       * @see https://tailwindcss.com/docs/gap
       */
      'gap-x': [{
        'gap-x': [gap]
      }],
      /**
       * Gap Y
       * @see https://tailwindcss.com/docs/gap
       */
      'gap-y': [{
        'gap-y': [gap]
      }],
      /**
       * Justify Content
       * @see https://tailwindcss.com/docs/justify-content
       */
      'justify-content': [{
        justify: ['normal', ...getAlign()]
      }],
      /**
       * Justify Items
       * @see https://tailwindcss.com/docs/justify-items
       */
      'justify-items': [{
        'justify-items': ['start', 'end', 'center', 'stretch']
      }],
      /**
       * Justify Self
       * @see https://tailwindcss.com/docs/justify-self
       */
      'justify-self': [{
        'justify-self': ['auto', 'start', 'end', 'center', 'stretch']
      }],
      /**
       * Align Content
       * @see https://tailwindcss.com/docs/align-content
       */
      'align-content': [{
        content: ['normal', ...getAlign(), 'baseline']
      }],
      /**
       * Align Items
       * @see https://tailwindcss.com/docs/align-items
       */
      'align-items': [{
        items: ['start', 'end', 'center', 'baseline', 'stretch']
      }],
      /**
       * Align Self
       * @see https://tailwindcss.com/docs/align-self
       */
      'align-self': [{
        self: ['auto', 'start', 'end', 'center', 'stretch', 'baseline']
      }],
      /**
       * Place Content
       * @see https://tailwindcss.com/docs/place-content
       */
      'place-content': [{
        'place-content': [...getAlign(), 'baseline']
      }],
      /**
       * Place Items
       * @see https://tailwindcss.com/docs/place-items
       */
      'place-items': [{
        'place-items': ['start', 'end', 'center', 'baseline', 'stretch']
      }],
      /**
       * Place Self
       * @see https://tailwindcss.com/docs/place-self
       */
      'place-self': [{
        'place-self': ['auto', 'start', 'end', 'center', 'stretch']
      }],
      // Spacing
      /**
       * Padding
       * @see https://tailwindcss.com/docs/padding
       */
      p: [{
        p: [padding]
      }],
      /**
       * Padding X
       * @see https://tailwindcss.com/docs/padding
       */
      px: [{
        px: [padding]
      }],
      /**
       * Padding Y
       * @see https://tailwindcss.com/docs/padding
       */
      py: [{
        py: [padding]
      }],
      /**
       * Padding Start
       * @see https://tailwindcss.com/docs/padding
       */
      ps: [{
        ps: [padding]
      }],
      /**
       * Padding End
       * @see https://tailwindcss.com/docs/padding
       */
      pe: [{
        pe: [padding]
      }],
      /**
       * Padding Top
       * @see https://tailwindcss.com/docs/padding
       */
      pt: [{
        pt: [padding]
      }],
      /**
       * Padding Right
       * @see https://tailwindcss.com/docs/padding
       */
      pr: [{
        pr: [padding]
      }],
      /**
       * Padding Bottom
       * @see https://tailwindcss.com/docs/padding
       */
      pb: [{
        pb: [padding]
      }],
      /**
       * Padding Left
       * @see https://tailwindcss.com/docs/padding
       */
      pl: [{
        pl: [padding]
      }],
      /**
       * Margin
       * @see https://tailwindcss.com/docs/margin
       */
      m: [{
        m: [margin]
      }],
      /**
       * Margin X
       * @see https://tailwindcss.com/docs/margin
       */
      mx: [{
        mx: [margin]
      }],
      /**
       * Margin Y
       * @see https://tailwindcss.com/docs/margin
       */
      my: [{
        my: [margin]
      }],
      /**
       * Margin Start
       * @see https://tailwindcss.com/docs/margin
       */
      ms: [{
        ms: [margin]
      }],
      /**
       * Margin End
       * @see https://tailwindcss.com/docs/margin
       */
      me: [{
        me: [margin]
      }],
      /**
       * Margin Top
       * @see https://tailwindcss.com/docs/margin
       */
      mt: [{
        mt: [margin]
      }],
      /**
       * Margin Right
       * @see https://tailwindcss.com/docs/margin
       */
      mr: [{
        mr: [margin]
      }],
      /**
       * Margin Bottom
       * @see https://tailwindcss.com/docs/margin
       */
      mb: [{
        mb: [margin]
      }],
      /**
       * Margin Left
       * @see https://tailwindcss.com/docs/margin
       */
      ml: [{
        ml: [margin]
      }],
      /**
       * Space Between X
       * @see https://tailwindcss.com/docs/space
       */
      'space-x': [{
        'space-x': [space]
      }],
      /**
       * Space Between X Reverse
       * @see https://tailwindcss.com/docs/space
       */
      'space-x-reverse': ['space-x-reverse'],
      /**
       * Space Between Y
       * @see https://tailwindcss.com/docs/space
       */
      'space-y': [{
        'space-y': [space]
      }],
      /**
       * Space Between Y Reverse
       * @see https://tailwindcss.com/docs/space
       */
      'space-y-reverse': ['space-y-reverse'],
      // Sizing
      /**
       * Width
       * @see https://tailwindcss.com/docs/width
       */
      w: [{
        w: ['auto', 'min', 'max', 'fit', 'svw', 'lvw', 'dvw', isArbitraryValue, spacing]
      }],
      /**
       * Min-Width
       * @see https://tailwindcss.com/docs/min-width
       */
      'min-w': [{
        'min-w': [isArbitraryValue, spacing, 'min', 'max', 'fit']
      }],
      /**
       * Max-Width
       * @see https://tailwindcss.com/docs/max-width
       */
      'max-w': [{
        'max-w': [isArbitraryValue, spacing, 'none', 'full', 'min', 'max', 'fit', 'prose', {
          screen: [isTshirtSize]
        }, isTshirtSize]
      }],
      /**
       * Height
       * @see https://tailwindcss.com/docs/height
       */
      h: [{
        h: [isArbitraryValue, spacing, 'auto', 'min', 'max', 'fit', 'svh', 'lvh', 'dvh']
      }],
      /**
       * Min-Height
       * @see https://tailwindcss.com/docs/min-height
       */
      'min-h': [{
        'min-h': [isArbitraryValue, spacing, 'min', 'max', 'fit', 'svh', 'lvh', 'dvh']
      }],
      /**
       * Max-Height
       * @see https://tailwindcss.com/docs/max-height
       */
      'max-h': [{
        'max-h': [isArbitraryValue, spacing, 'min', 'max', 'fit', 'svh', 'lvh', 'dvh']
      }],
      /**
       * Size
       * @see https://tailwindcss.com/docs/size
       */
      size: [{
        size: [isArbitraryValue, spacing, 'auto', 'min', 'max', 'fit']
      }],
      // Typography
      /**
       * Font Size
       * @see https://tailwindcss.com/docs/font-size
       */
      'font-size': [{
        text: ['base', isTshirtSize, isArbitraryLength]
      }],
      /**
       * Font Smoothing
       * @see https://tailwindcss.com/docs/font-smoothing
       */
      'font-smoothing': ['antialiased', 'subpixel-antialiased'],
      /**
       * Font Style
       * @see https://tailwindcss.com/docs/font-style
       */
      'font-style': ['italic', 'not-italic'],
      /**
       * Font Weight
       * @see https://tailwindcss.com/docs/font-weight
       */
      'font-weight': [{
        font: ['thin', 'extralight', 'light', 'normal', 'medium', 'semibold', 'bold', 'extrabold', 'black', isArbitraryNumber]
      }],
      /**
       * Font Family
       * @see https://tailwindcss.com/docs/font-family
       */
      'font-family': [{
        font: [isAny]
      }],
      /**
       * Font Variant Numeric
       * @see https://tailwindcss.com/docs/font-variant-numeric
       */
      'fvn-normal': ['normal-nums'],
      /**
       * Font Variant Numeric
       * @see https://tailwindcss.com/docs/font-variant-numeric
       */
      'fvn-ordinal': ['ordinal'],
      /**
       * Font Variant Numeric
       * @see https://tailwindcss.com/docs/font-variant-numeric
       */
      'fvn-slashed-zero': ['slashed-zero'],
      /**
       * Font Variant Numeric
       * @see https://tailwindcss.com/docs/font-variant-numeric
       */
      'fvn-figure': ['lining-nums', 'oldstyle-nums'],
      /**
       * Font Variant Numeric
       * @see https://tailwindcss.com/docs/font-variant-numeric
       */
      'fvn-spacing': ['proportional-nums', 'tabular-nums'],
      /**
       * Font Variant Numeric
       * @see https://tailwindcss.com/docs/font-variant-numeric
       */
      'fvn-fraction': ['diagonal-fractions', 'stacked-fractons'],
      /**
       * Letter Spacing
       * @see https://tailwindcss.com/docs/letter-spacing
       */
      tracking: [{
        tracking: ['tighter', 'tight', 'normal', 'wide', 'wider', 'widest', isArbitraryValue]
      }],
      /**
       * Line Clamp
       * @see https://tailwindcss.com/docs/line-clamp
       */
      'line-clamp': [{
        'line-clamp': ['none', isNumber, isArbitraryNumber]
      }],
      /**
       * Line Height
       * @see https://tailwindcss.com/docs/line-height
       */
      leading: [{
        leading: ['none', 'tight', 'snug', 'normal', 'relaxed', 'loose', isLength$1, isArbitraryValue]
      }],
      /**
       * List Style Image
       * @see https://tailwindcss.com/docs/list-style-image
       */
      'list-image': [{
        'list-image': ['none', isArbitraryValue]
      }],
      /**
       * List Style Type
       * @see https://tailwindcss.com/docs/list-style-type
       */
      'list-style-type': [{
        list: ['none', 'disc', 'decimal', isArbitraryValue]
      }],
      /**
       * List Style Position
       * @see https://tailwindcss.com/docs/list-style-position
       */
      'list-style-position': [{
        list: ['inside', 'outside']
      }],
      /**
       * Placeholder Color
       * @deprecated since Tailwind CSS v3.0.0
       * @see https://tailwindcss.com/docs/placeholder-color
       */
      'placeholder-color': [{
        placeholder: [colors]
      }],
      /**
       * Placeholder Opacity
       * @see https://tailwindcss.com/docs/placeholder-opacity
       */
      'placeholder-opacity': [{
        'placeholder-opacity': [opacity]
      }],
      /**
       * Text Alignment
       * @see https://tailwindcss.com/docs/text-align
       */
      'text-alignment': [{
        text: ['left', 'center', 'right', 'justify', 'start', 'end']
      }],
      /**
       * Text Color
       * @see https://tailwindcss.com/docs/text-color
       */
      'text-color': [{
        text: [colors]
      }],
      /**
       * Text Opacity
       * @see https://tailwindcss.com/docs/text-opacity
       */
      'text-opacity': [{
        'text-opacity': [opacity]
      }],
      /**
       * Text Decoration
       * @see https://tailwindcss.com/docs/text-decoration
       */
      'text-decoration': ['underline', 'overline', 'line-through', 'no-underline'],
      /**
       * Text Decoration Style
       * @see https://tailwindcss.com/docs/text-decoration-style
       */
      'text-decoration-style': [{
        decoration: [...getLineStyles(), 'wavy']
      }],
      /**
       * Text Decoration Thickness
       * @see https://tailwindcss.com/docs/text-decoration-thickness
       */
      'text-decoration-thickness': [{
        decoration: ['auto', 'from-font', isLength$1, isArbitraryLength]
      }],
      /**
       * Text Underline Offset
       * @see https://tailwindcss.com/docs/text-underline-offset
       */
      'underline-offset': [{
        'underline-offset': ['auto', isLength$1, isArbitraryValue]
      }],
      /**
       * Text Decoration Color
       * @see https://tailwindcss.com/docs/text-decoration-color
       */
      'text-decoration-color': [{
        decoration: [colors]
      }],
      /**
       * Text Transform
       * @see https://tailwindcss.com/docs/text-transform
       */
      'text-transform': ['uppercase', 'lowercase', 'capitalize', 'normal-case'],
      /**
       * Text Overflow
       * @see https://tailwindcss.com/docs/text-overflow
       */
      'text-overflow': ['truncate', 'text-ellipsis', 'text-clip'],
      /**
       * Text Wrap
       * @see https://tailwindcss.com/docs/text-wrap
       */
      'text-wrap': [{
        text: ['wrap', 'nowrap', 'balance', 'pretty']
      }],
      /**
       * Text Indent
       * @see https://tailwindcss.com/docs/text-indent
       */
      indent: [{
        indent: getSpacingWithArbitrary()
      }],
      /**
       * Vertical Alignment
       * @see https://tailwindcss.com/docs/vertical-align
       */
      'vertical-align': [{
        align: ['baseline', 'top', 'middle', 'bottom', 'text-top', 'text-bottom', 'sub', 'super', isArbitraryValue]
      }],
      /**
       * Whitespace
       * @see https://tailwindcss.com/docs/whitespace
       */
      whitespace: [{
        whitespace: ['normal', 'nowrap', 'pre', 'pre-line', 'pre-wrap', 'break-spaces']
      }],
      /**
       * Word Break
       * @see https://tailwindcss.com/docs/word-break
       */
      break: [{
        break: ['normal', 'words', 'all', 'keep']
      }],
      /**
       * Hyphens
       * @see https://tailwindcss.com/docs/hyphens
       */
      hyphens: [{
        hyphens: ['none', 'manual', 'auto']
      }],
      /**
       * Content
       * @see https://tailwindcss.com/docs/content
       */
      content: [{
        content: ['none', isArbitraryValue]
      }],
      // Backgrounds
      /**
       * Background Attachment
       * @see https://tailwindcss.com/docs/background-attachment
       */
      'bg-attachment': [{
        bg: ['fixed', 'local', 'scroll']
      }],
      /**
       * Background Clip
       * @see https://tailwindcss.com/docs/background-clip
       */
      'bg-clip': [{
        'bg-clip': ['border', 'padding', 'content', 'text']
      }],
      /**
       * Background Opacity
       * @deprecated since Tailwind CSS v3.0.0
       * @see https://tailwindcss.com/docs/background-opacity
       */
      'bg-opacity': [{
        'bg-opacity': [opacity]
      }],
      /**
       * Background Origin
       * @see https://tailwindcss.com/docs/background-origin
       */
      'bg-origin': [{
        'bg-origin': ['border', 'padding', 'content']
      }],
      /**
       * Background Position
       * @see https://tailwindcss.com/docs/background-position
       */
      'bg-position': [{
        bg: [...getPositions(), isArbitraryPosition]
      }],
      /**
       * Background Repeat
       * @see https://tailwindcss.com/docs/background-repeat
       */
      'bg-repeat': [{
        bg: ['no-repeat', {
          repeat: ['', 'x', 'y', 'round', 'space']
        }]
      }],
      /**
       * Background Size
       * @see https://tailwindcss.com/docs/background-size
       */
      'bg-size': [{
        bg: ['auto', 'cover', 'contain', isArbitrarySize]
      }],
      /**
       * Background Image
       * @see https://tailwindcss.com/docs/background-image
       */
      'bg-image': [{
        bg: ['none', {
          'gradient-to': ['t', 'tr', 'r', 'br', 'b', 'bl', 'l', 'tl']
        }, isArbitraryImage]
      }],
      /**
       * Background Color
       * @see https://tailwindcss.com/docs/background-color
       */
      'bg-color': [{
        bg: [colors]
      }],
      /**
       * Gradient Color Stops From Position
       * @see https://tailwindcss.com/docs/gradient-color-stops
       */
      'gradient-from-pos': [{
        from: [gradientColorStopPositions]
      }],
      /**
       * Gradient Color Stops Via Position
       * @see https://tailwindcss.com/docs/gradient-color-stops
       */
      'gradient-via-pos': [{
        via: [gradientColorStopPositions]
      }],
      /**
       * Gradient Color Stops To Position
       * @see https://tailwindcss.com/docs/gradient-color-stops
       */
      'gradient-to-pos': [{
        to: [gradientColorStopPositions]
      }],
      /**
       * Gradient Color Stops From
       * @see https://tailwindcss.com/docs/gradient-color-stops
       */
      'gradient-from': [{
        from: [gradientColorStops]
      }],
      /**
       * Gradient Color Stops Via
       * @see https://tailwindcss.com/docs/gradient-color-stops
       */
      'gradient-via': [{
        via: [gradientColorStops]
      }],
      /**
       * Gradient Color Stops To
       * @see https://tailwindcss.com/docs/gradient-color-stops
       */
      'gradient-to': [{
        to: [gradientColorStops]
      }],
      // Borders
      /**
       * Border Radius
       * @see https://tailwindcss.com/docs/border-radius
       */
      rounded: [{
        rounded: [borderRadius]
      }],
      /**
       * Border Radius Start
       * @see https://tailwindcss.com/docs/border-radius
       */
      'rounded-s': [{
        'rounded-s': [borderRadius]
      }],
      /**
       * Border Radius End
       * @see https://tailwindcss.com/docs/border-radius
       */
      'rounded-e': [{
        'rounded-e': [borderRadius]
      }],
      /**
       * Border Radius Top
       * @see https://tailwindcss.com/docs/border-radius
       */
      'rounded-t': [{
        'rounded-t': [borderRadius]
      }],
      /**
       * Border Radius Right
       * @see https://tailwindcss.com/docs/border-radius
       */
      'rounded-r': [{
        'rounded-r': [borderRadius]
      }],
      /**
       * Border Radius Bottom
       * @see https://tailwindcss.com/docs/border-radius
       */
      'rounded-b': [{
        'rounded-b': [borderRadius]
      }],
      /**
       * Border Radius Left
       * @see https://tailwindcss.com/docs/border-radius
       */
      'rounded-l': [{
        'rounded-l': [borderRadius]
      }],
      /**
       * Border Radius Start Start
       * @see https://tailwindcss.com/docs/border-radius
       */
      'rounded-ss': [{
        'rounded-ss': [borderRadius]
      }],
      /**
       * Border Radius Start End
       * @see https://tailwindcss.com/docs/border-radius
       */
      'rounded-se': [{
        'rounded-se': [borderRadius]
      }],
      /**
       * Border Radius End End
       * @see https://tailwindcss.com/docs/border-radius
       */
      'rounded-ee': [{
        'rounded-ee': [borderRadius]
      }],
      /**
       * Border Radius End Start
       * @see https://tailwindcss.com/docs/border-radius
       */
      'rounded-es': [{
        'rounded-es': [borderRadius]
      }],
      /**
       * Border Radius Top Left
       * @see https://tailwindcss.com/docs/border-radius
       */
      'rounded-tl': [{
        'rounded-tl': [borderRadius]
      }],
      /**
       * Border Radius Top Right
       * @see https://tailwindcss.com/docs/border-radius
       */
      'rounded-tr': [{
        'rounded-tr': [borderRadius]
      }],
      /**
       * Border Radius Bottom Right
       * @see https://tailwindcss.com/docs/border-radius
       */
      'rounded-br': [{
        'rounded-br': [borderRadius]
      }],
      /**
       * Border Radius Bottom Left
       * @see https://tailwindcss.com/docs/border-radius
       */
      'rounded-bl': [{
        'rounded-bl': [borderRadius]
      }],
      /**
       * Border Width
       * @see https://tailwindcss.com/docs/border-width
       */
      'border-w': [{
        border: [borderWidth]
      }],
      /**
       * Border Width X
       * @see https://tailwindcss.com/docs/border-width
       */
      'border-w-x': [{
        'border-x': [borderWidth]
      }],
      /**
       * Border Width Y
       * @see https://tailwindcss.com/docs/border-width
       */
      'border-w-y': [{
        'border-y': [borderWidth]
      }],
      /**
       * Border Width Start
       * @see https://tailwindcss.com/docs/border-width
       */
      'border-w-s': [{
        'border-s': [borderWidth]
      }],
      /**
       * Border Width End
       * @see https://tailwindcss.com/docs/border-width
       */
      'border-w-e': [{
        'border-e': [borderWidth]
      }],
      /**
       * Border Width Top
       * @see https://tailwindcss.com/docs/border-width
       */
      'border-w-t': [{
        'border-t': [borderWidth]
      }],
      /**
       * Border Width Right
       * @see https://tailwindcss.com/docs/border-width
       */
      'border-w-r': [{
        'border-r': [borderWidth]
      }],
      /**
       * Border Width Bottom
       * @see https://tailwindcss.com/docs/border-width
       */
      'border-w-b': [{
        'border-b': [borderWidth]
      }],
      /**
       * Border Width Left
       * @see https://tailwindcss.com/docs/border-width
       */
      'border-w-l': [{
        'border-l': [borderWidth]
      }],
      /**
       * Border Opacity
       * @see https://tailwindcss.com/docs/border-opacity
       */
      'border-opacity': [{
        'border-opacity': [opacity]
      }],
      /**
       * Border Style
       * @see https://tailwindcss.com/docs/border-style
       */
      'border-style': [{
        border: [...getLineStyles(), 'hidden']
      }],
      /**
       * Divide Width X
       * @see https://tailwindcss.com/docs/divide-width
       */
      'divide-x': [{
        'divide-x': [borderWidth]
      }],
      /**
       * Divide Width X Reverse
       * @see https://tailwindcss.com/docs/divide-width
       */
      'divide-x-reverse': ['divide-x-reverse'],
      /**
       * Divide Width Y
       * @see https://tailwindcss.com/docs/divide-width
       */
      'divide-y': [{
        'divide-y': [borderWidth]
      }],
      /**
       * Divide Width Y Reverse
       * @see https://tailwindcss.com/docs/divide-width
       */
      'divide-y-reverse': ['divide-y-reverse'],
      /**
       * Divide Opacity
       * @see https://tailwindcss.com/docs/divide-opacity
       */
      'divide-opacity': [{
        'divide-opacity': [opacity]
      }],
      /**
       * Divide Style
       * @see https://tailwindcss.com/docs/divide-style
       */
      'divide-style': [{
        divide: getLineStyles()
      }],
      /**
       * Border Color
       * @see https://tailwindcss.com/docs/border-color
       */
      'border-color': [{
        border: [borderColor]
      }],
      /**
       * Border Color X
       * @see https://tailwindcss.com/docs/border-color
       */
      'border-color-x': [{
        'border-x': [borderColor]
      }],
      /**
       * Border Color Y
       * @see https://tailwindcss.com/docs/border-color
       */
      'border-color-y': [{
        'border-y': [borderColor]
      }],
      /**
       * Border Color Top
       * @see https://tailwindcss.com/docs/border-color
       */
      'border-color-t': [{
        'border-t': [borderColor]
      }],
      /**
       * Border Color Right
       * @see https://tailwindcss.com/docs/border-color
       */
      'border-color-r': [{
        'border-r': [borderColor]
      }],
      /**
       * Border Color Bottom
       * @see https://tailwindcss.com/docs/border-color
       */
      'border-color-b': [{
        'border-b': [borderColor]
      }],
      /**
       * Border Color Left
       * @see https://tailwindcss.com/docs/border-color
       */
      'border-color-l': [{
        'border-l': [borderColor]
      }],
      /**
       * Divide Color
       * @see https://tailwindcss.com/docs/divide-color
       */
      'divide-color': [{
        divide: [borderColor]
      }],
      /**
       * Outline Style
       * @see https://tailwindcss.com/docs/outline-style
       */
      'outline-style': [{
        outline: ['', ...getLineStyles()]
      }],
      /**
       * Outline Offset
       * @see https://tailwindcss.com/docs/outline-offset
       */
      'outline-offset': [{
        'outline-offset': [isLength$1, isArbitraryValue]
      }],
      /**
       * Outline Width
       * @see https://tailwindcss.com/docs/outline-width
       */
      'outline-w': [{
        outline: [isLength$1, isArbitraryLength]
      }],
      /**
       * Outline Color
       * @see https://tailwindcss.com/docs/outline-color
       */
      'outline-color': [{
        outline: [colors]
      }],
      /**
       * Ring Width
       * @see https://tailwindcss.com/docs/ring-width
       */
      'ring-w': [{
        ring: getLengthWithEmptyAndArbitrary()
      }],
      /**
       * Ring Width Inset
       * @see https://tailwindcss.com/docs/ring-width
       */
      'ring-w-inset': ['ring-inset'],
      /**
       * Ring Color
       * @see https://tailwindcss.com/docs/ring-color
       */
      'ring-color': [{
        ring: [colors]
      }],
      /**
       * Ring Opacity
       * @see https://tailwindcss.com/docs/ring-opacity
       */
      'ring-opacity': [{
        'ring-opacity': [opacity]
      }],
      /**
       * Ring Offset Width
       * @see https://tailwindcss.com/docs/ring-offset-width
       */
      'ring-offset-w': [{
        'ring-offset': [isLength$1, isArbitraryLength]
      }],
      /**
       * Ring Offset Color
       * @see https://tailwindcss.com/docs/ring-offset-color
       */
      'ring-offset-color': [{
        'ring-offset': [colors]
      }],
      // Effects
      /**
       * Box Shadow
       * @see https://tailwindcss.com/docs/box-shadow
       */
      shadow: [{
        shadow: ['', 'inner', 'none', isTshirtSize, isArbitraryShadow]
      }],
      /**
       * Box Shadow Color
       * @see https://tailwindcss.com/docs/box-shadow-color
       */
      'shadow-color': [{
        shadow: [isAny]
      }],
      /**
       * Opacity
       * @see https://tailwindcss.com/docs/opacity
       */
      opacity: [{
        opacity: [opacity]
      }],
      /**
       * Mix Blend Mode
       * @see https://tailwindcss.com/docs/mix-blend-mode
       */
      'mix-blend': [{
        'mix-blend': [...getBlendModes(), 'plus-lighter', 'plus-darker']
      }],
      /**
       * Background Blend Mode
       * @see https://tailwindcss.com/docs/background-blend-mode
       */
      'bg-blend': [{
        'bg-blend': getBlendModes()
      }],
      // Filters
      /**
       * Filter
       * @deprecated since Tailwind CSS v3.0.0
       * @see https://tailwindcss.com/docs/filter
       */
      filter: [{
        filter: ['', 'none']
      }],
      /**
       * Blur
       * @see https://tailwindcss.com/docs/blur
       */
      blur: [{
        blur: [blur]
      }],
      /**
       * Brightness
       * @see https://tailwindcss.com/docs/brightness
       */
      brightness: [{
        brightness: [brightness]
      }],
      /**
       * Contrast
       * @see https://tailwindcss.com/docs/contrast
       */
      contrast: [{
        contrast: [contrast]
      }],
      /**
       * Drop Shadow
       * @see https://tailwindcss.com/docs/drop-shadow
       */
      'drop-shadow': [{
        'drop-shadow': ['', 'none', isTshirtSize, isArbitraryValue]
      }],
      /**
       * Grayscale
       * @see https://tailwindcss.com/docs/grayscale
       */
      grayscale: [{
        grayscale: [grayscale]
      }],
      /**
       * Hue Rotate
       * @see https://tailwindcss.com/docs/hue-rotate
       */
      'hue-rotate': [{
        'hue-rotate': [hueRotate]
      }],
      /**
       * Invert
       * @see https://tailwindcss.com/docs/invert
       */
      invert: [{
        invert: [invert]
      }],
      /**
       * Saturate
       * @see https://tailwindcss.com/docs/saturate
       */
      saturate: [{
        saturate: [saturate]
      }],
      /**
       * Sepia
       * @see https://tailwindcss.com/docs/sepia
       */
      sepia: [{
        sepia: [sepia]
      }],
      /**
       * Backdrop Filter
       * @deprecated since Tailwind CSS v3.0.0
       * @see https://tailwindcss.com/docs/backdrop-filter
       */
      'backdrop-filter': [{
        'backdrop-filter': ['', 'none']
      }],
      /**
       * Backdrop Blur
       * @see https://tailwindcss.com/docs/backdrop-blur
       */
      'backdrop-blur': [{
        'backdrop-blur': [blur]
      }],
      /**
       * Backdrop Brightness
       * @see https://tailwindcss.com/docs/backdrop-brightness
       */
      'backdrop-brightness': [{
        'backdrop-brightness': [brightness]
      }],
      /**
       * Backdrop Contrast
       * @see https://tailwindcss.com/docs/backdrop-contrast
       */
      'backdrop-contrast': [{
        'backdrop-contrast': [contrast]
      }],
      /**
       * Backdrop Grayscale
       * @see https://tailwindcss.com/docs/backdrop-grayscale
       */
      'backdrop-grayscale': [{
        'backdrop-grayscale': [grayscale]
      }],
      /**
       * Backdrop Hue Rotate
       * @see https://tailwindcss.com/docs/backdrop-hue-rotate
       */
      'backdrop-hue-rotate': [{
        'backdrop-hue-rotate': [hueRotate]
      }],
      /**
       * Backdrop Invert
       * @see https://tailwindcss.com/docs/backdrop-invert
       */
      'backdrop-invert': [{
        'backdrop-invert': [invert]
      }],
      /**
       * Backdrop Opacity
       * @see https://tailwindcss.com/docs/backdrop-opacity
       */
      'backdrop-opacity': [{
        'backdrop-opacity': [opacity]
      }],
      /**
       * Backdrop Saturate
       * @see https://tailwindcss.com/docs/backdrop-saturate
       */
      'backdrop-saturate': [{
        'backdrop-saturate': [saturate]
      }],
      /**
       * Backdrop Sepia
       * @see https://tailwindcss.com/docs/backdrop-sepia
       */
      'backdrop-sepia': [{
        'backdrop-sepia': [sepia]
      }],
      // Tables
      /**
       * Border Collapse
       * @see https://tailwindcss.com/docs/border-collapse
       */
      'border-collapse': [{
        border: ['collapse', 'separate']
      }],
      /**
       * Border Spacing
       * @see https://tailwindcss.com/docs/border-spacing
       */
      'border-spacing': [{
        'border-spacing': [borderSpacing]
      }],
      /**
       * Border Spacing X
       * @see https://tailwindcss.com/docs/border-spacing
       */
      'border-spacing-x': [{
        'border-spacing-x': [borderSpacing]
      }],
      /**
       * Border Spacing Y
       * @see https://tailwindcss.com/docs/border-spacing
       */
      'border-spacing-y': [{
        'border-spacing-y': [borderSpacing]
      }],
      /**
       * Table Layout
       * @see https://tailwindcss.com/docs/table-layout
       */
      'table-layout': [{
        table: ['auto', 'fixed']
      }],
      /**
       * Caption Side
       * @see https://tailwindcss.com/docs/caption-side
       */
      caption: [{
        caption: ['top', 'bottom']
      }],
      // Transitions and Animation
      /**
       * Tranisition Property
       * @see https://tailwindcss.com/docs/transition-property
       */
      transition: [{
        transition: ['none', 'all', '', 'colors', 'opacity', 'shadow', 'transform', isArbitraryValue]
      }],
      /**
       * Transition Duration
       * @see https://tailwindcss.com/docs/transition-duration
       */
      duration: [{
        duration: getNumberAndArbitrary()
      }],
      /**
       * Transition Timing Function
       * @see https://tailwindcss.com/docs/transition-timing-function
       */
      ease: [{
        ease: ['linear', 'in', 'out', 'in-out', isArbitraryValue]
      }],
      /**
       * Transition Delay
       * @see https://tailwindcss.com/docs/transition-delay
       */
      delay: [{
        delay: getNumberAndArbitrary()
      }],
      /**
       * Animation
       * @see https://tailwindcss.com/docs/animation
       */
      animate: [{
        animate: ['none', 'spin', 'ping', 'pulse', 'bounce', isArbitraryValue]
      }],
      // Transforms
      /**
       * Transform
       * @see https://tailwindcss.com/docs/transform
       */
      transform: [{
        transform: ['', 'gpu', 'none']
      }],
      /**
       * Scale
       * @see https://tailwindcss.com/docs/scale
       */
      scale: [{
        scale: [scale]
      }],
      /**
       * Scale X
       * @see https://tailwindcss.com/docs/scale
       */
      'scale-x': [{
        'scale-x': [scale]
      }],
      /**
       * Scale Y
       * @see https://tailwindcss.com/docs/scale
       */
      'scale-y': [{
        'scale-y': [scale]
      }],
      /**
       * Rotate
       * @see https://tailwindcss.com/docs/rotate
       */
      rotate: [{
        rotate: [isInteger, isArbitraryValue]
      }],
      /**
       * Translate X
       * @see https://tailwindcss.com/docs/translate
       */
      'translate-x': [{
        'translate-x': [translate]
      }],
      /**
       * Translate Y
       * @see https://tailwindcss.com/docs/translate
       */
      'translate-y': [{
        'translate-y': [translate]
      }],
      /**
       * Skew X
       * @see https://tailwindcss.com/docs/skew
       */
      'skew-x': [{
        'skew-x': [skew]
      }],
      /**
       * Skew Y
       * @see https://tailwindcss.com/docs/skew
       */
      'skew-y': [{
        'skew-y': [skew]
      }],
      /**
       * Transform Origin
       * @see https://tailwindcss.com/docs/transform-origin
       */
      'transform-origin': [{
        origin: ['center', 'top', 'top-right', 'right', 'bottom-right', 'bottom', 'bottom-left', 'left', 'top-left', isArbitraryValue]
      }],
      // Interactivity
      /**
       * Accent Color
       * @see https://tailwindcss.com/docs/accent-color
       */
      accent: [{
        accent: ['auto', colors]
      }],
      /**
       * Appearance
       * @see https://tailwindcss.com/docs/appearance
       */
      appearance: [{
        appearance: ['none', 'auto']
      }],
      /**
       * Cursor
       * @see https://tailwindcss.com/docs/cursor
       */
      cursor: [{
        cursor: ['auto', 'default', 'pointer', 'wait', 'text', 'move', 'help', 'not-allowed', 'none', 'context-menu', 'progress', 'cell', 'crosshair', 'vertical-text', 'alias', 'copy', 'no-drop', 'grab', 'grabbing', 'all-scroll', 'col-resize', 'row-resize', 'n-resize', 'e-resize', 's-resize', 'w-resize', 'ne-resize', 'nw-resize', 'se-resize', 'sw-resize', 'ew-resize', 'ns-resize', 'nesw-resize', 'nwse-resize', 'zoom-in', 'zoom-out', isArbitraryValue]
      }],
      /**
       * Caret Color
       * @see https://tailwindcss.com/docs/just-in-time-mode#caret-color-utilities
       */
      'caret-color': [{
        caret: [colors]
      }],
      /**
       * Pointer Events
       * @see https://tailwindcss.com/docs/pointer-events
       */
      'pointer-events': [{
        'pointer-events': ['none', 'auto']
      }],
      /**
       * Resize
       * @see https://tailwindcss.com/docs/resize
       */
      resize: [{
        resize: ['none', 'y', 'x', '']
      }],
      /**
       * Scroll Behavior
       * @see https://tailwindcss.com/docs/scroll-behavior
       */
      'scroll-behavior': [{
        scroll: ['auto', 'smooth']
      }],
      /**
       * Scroll Margin
       * @see https://tailwindcss.com/docs/scroll-margin
       */
      'scroll-m': [{
        'scroll-m': getSpacingWithArbitrary()
      }],
      /**
       * Scroll Margin X
       * @see https://tailwindcss.com/docs/scroll-margin
       */
      'scroll-mx': [{
        'scroll-mx': getSpacingWithArbitrary()
      }],
      /**
       * Scroll Margin Y
       * @see https://tailwindcss.com/docs/scroll-margin
       */
      'scroll-my': [{
        'scroll-my': getSpacingWithArbitrary()
      }],
      /**
       * Scroll Margin Start
       * @see https://tailwindcss.com/docs/scroll-margin
       */
      'scroll-ms': [{
        'scroll-ms': getSpacingWithArbitrary()
      }],
      /**
       * Scroll Margin End
       * @see https://tailwindcss.com/docs/scroll-margin
       */
      'scroll-me': [{
        'scroll-me': getSpacingWithArbitrary()
      }],
      /**
       * Scroll Margin Top
       * @see https://tailwindcss.com/docs/scroll-margin
       */
      'scroll-mt': [{
        'scroll-mt': getSpacingWithArbitrary()
      }],
      /**
       * Scroll Margin Right
       * @see https://tailwindcss.com/docs/scroll-margin
       */
      'scroll-mr': [{
        'scroll-mr': getSpacingWithArbitrary()
      }],
      /**
       * Scroll Margin Bottom
       * @see https://tailwindcss.com/docs/scroll-margin
       */
      'scroll-mb': [{
        'scroll-mb': getSpacingWithArbitrary()
      }],
      /**
       * Scroll Margin Left
       * @see https://tailwindcss.com/docs/scroll-margin
       */
      'scroll-ml': [{
        'scroll-ml': getSpacingWithArbitrary()
      }],
      /**
       * Scroll Padding
       * @see https://tailwindcss.com/docs/scroll-padding
       */
      'scroll-p': [{
        'scroll-p': getSpacingWithArbitrary()
      }],
      /**
       * Scroll Padding X
       * @see https://tailwindcss.com/docs/scroll-padding
       */
      'scroll-px': [{
        'scroll-px': getSpacingWithArbitrary()
      }],
      /**
       * Scroll Padding Y
       * @see https://tailwindcss.com/docs/scroll-padding
       */
      'scroll-py': [{
        'scroll-py': getSpacingWithArbitrary()
      }],
      /**
       * Scroll Padding Start
       * @see https://tailwindcss.com/docs/scroll-padding
       */
      'scroll-ps': [{
        'scroll-ps': getSpacingWithArbitrary()
      }],
      /**
       * Scroll Padding End
       * @see https://tailwindcss.com/docs/scroll-padding
       */
      'scroll-pe': [{
        'scroll-pe': getSpacingWithArbitrary()
      }],
      /**
       * Scroll Padding Top
       * @see https://tailwindcss.com/docs/scroll-padding
       */
      'scroll-pt': [{
        'scroll-pt': getSpacingWithArbitrary()
      }],
      /**
       * Scroll Padding Right
       * @see https://tailwindcss.com/docs/scroll-padding
       */
      'scroll-pr': [{
        'scroll-pr': getSpacingWithArbitrary()
      }],
      /**
       * Scroll Padding Bottom
       * @see https://tailwindcss.com/docs/scroll-padding
       */
      'scroll-pb': [{
        'scroll-pb': getSpacingWithArbitrary()
      }],
      /**
       * Scroll Padding Left
       * @see https://tailwindcss.com/docs/scroll-padding
       */
      'scroll-pl': [{
        'scroll-pl': getSpacingWithArbitrary()
      }],
      /**
       * Scroll Snap Align
       * @see https://tailwindcss.com/docs/scroll-snap-align
       */
      'snap-align': [{
        snap: ['start', 'end', 'center', 'align-none']
      }],
      /**
       * Scroll Snap Stop
       * @see https://tailwindcss.com/docs/scroll-snap-stop
       */
      'snap-stop': [{
        snap: ['normal', 'always']
      }],
      /**
       * Scroll Snap Type
       * @see https://tailwindcss.com/docs/scroll-snap-type
       */
      'snap-type': [{
        snap: ['none', 'x', 'y', 'both']
      }],
      /**
       * Scroll Snap Type Strictness
       * @see https://tailwindcss.com/docs/scroll-snap-type
       */
      'snap-strictness': [{
        snap: ['mandatory', 'proximity']
      }],
      /**
       * Touch Action
       * @see https://tailwindcss.com/docs/touch-action
       */
      touch: [{
        touch: ['auto', 'none', 'manipulation']
      }],
      /**
       * Touch Action X
       * @see https://tailwindcss.com/docs/touch-action
       */
      'touch-x': [{
        'touch-pan': ['x', 'left', 'right']
      }],
      /**
       * Touch Action Y
       * @see https://tailwindcss.com/docs/touch-action
       */
      'touch-y': [{
        'touch-pan': ['y', 'up', 'down']
      }],
      /**
       * Touch Action Pinch Zoom
       * @see https://tailwindcss.com/docs/touch-action
       */
      'touch-pz': ['touch-pinch-zoom'],
      /**
       * User Select
       * @see https://tailwindcss.com/docs/user-select
       */
      select: [{
        select: ['none', 'text', 'all', 'auto']
      }],
      /**
       * Will Change
       * @see https://tailwindcss.com/docs/will-change
       */
      'will-change': [{
        'will-change': ['auto', 'scroll', 'contents', 'transform', isArbitraryValue]
      }],
      // SVG
      /**
       * Fill
       * @see https://tailwindcss.com/docs/fill
       */
      fill: [{
        fill: [colors, 'none']
      }],
      /**
       * Stroke Width
       * @see https://tailwindcss.com/docs/stroke-width
       */
      'stroke-w': [{
        stroke: [isLength$1, isArbitraryLength, isArbitraryNumber]
      }],
      /**
       * Stroke
       * @see https://tailwindcss.com/docs/stroke
       */
      stroke: [{
        stroke: [colors, 'none']
      }],
      // Accessibility
      /**
       * Screen Readers
       * @see https://tailwindcss.com/docs/screen-readers
       */
      sr: ['sr-only', 'not-sr-only'],
      /**
       * Forced Color Adjust
       * @see https://tailwindcss.com/docs/forced-color-adjust
       */
      'forced-color-adjust': [{
        'forced-color-adjust': ['auto', 'none']
      }]
    },
    conflictingClassGroups: {
      overflow: ['overflow-x', 'overflow-y'],
      overscroll: ['overscroll-x', 'overscroll-y'],
      inset: ['inset-x', 'inset-y', 'start', 'end', 'top', 'right', 'bottom', 'left'],
      'inset-x': ['right', 'left'],
      'inset-y': ['top', 'bottom'],
      flex: ['basis', 'grow', 'shrink'],
      gap: ['gap-x', 'gap-y'],
      p: ['px', 'py', 'ps', 'pe', 'pt', 'pr', 'pb', 'pl'],
      px: ['pr', 'pl'],
      py: ['pt', 'pb'],
      m: ['mx', 'my', 'ms', 'me', 'mt', 'mr', 'mb', 'ml'],
      mx: ['mr', 'ml'],
      my: ['mt', 'mb'],
      size: ['w', 'h'],
      'font-size': ['leading'],
      'fvn-normal': ['fvn-ordinal', 'fvn-slashed-zero', 'fvn-figure', 'fvn-spacing', 'fvn-fraction'],
      'fvn-ordinal': ['fvn-normal'],
      'fvn-slashed-zero': ['fvn-normal'],
      'fvn-figure': ['fvn-normal'],
      'fvn-spacing': ['fvn-normal'],
      'fvn-fraction': ['fvn-normal'],
      'line-clamp': ['display', 'overflow'],
      rounded: ['rounded-s', 'rounded-e', 'rounded-t', 'rounded-r', 'rounded-b', 'rounded-l', 'rounded-ss', 'rounded-se', 'rounded-ee', 'rounded-es', 'rounded-tl', 'rounded-tr', 'rounded-br', 'rounded-bl'],
      'rounded-s': ['rounded-ss', 'rounded-es'],
      'rounded-e': ['rounded-se', 'rounded-ee'],
      'rounded-t': ['rounded-tl', 'rounded-tr'],
      'rounded-r': ['rounded-tr', 'rounded-br'],
      'rounded-b': ['rounded-br', 'rounded-bl'],
      'rounded-l': ['rounded-tl', 'rounded-bl'],
      'border-spacing': ['border-spacing-x', 'border-spacing-y'],
      'border-w': ['border-w-s', 'border-w-e', 'border-w-t', 'border-w-r', 'border-w-b', 'border-w-l'],
      'border-w-x': ['border-w-r', 'border-w-l'],
      'border-w-y': ['border-w-t', 'border-w-b'],
      'border-color': ['border-color-t', 'border-color-r', 'border-color-b', 'border-color-l'],
      'border-color-x': ['border-color-r', 'border-color-l'],
      'border-color-y': ['border-color-t', 'border-color-b'],
      'scroll-m': ['scroll-mx', 'scroll-my', 'scroll-ms', 'scroll-me', 'scroll-mt', 'scroll-mr', 'scroll-mb', 'scroll-ml'],
      'scroll-mx': ['scroll-mr', 'scroll-ml'],
      'scroll-my': ['scroll-mt', 'scroll-mb'],
      'scroll-p': ['scroll-px', 'scroll-py', 'scroll-ps', 'scroll-pe', 'scroll-pt', 'scroll-pr', 'scroll-pb', 'scroll-pl'],
      'scroll-px': ['scroll-pr', 'scroll-pl'],
      'scroll-py': ['scroll-pt', 'scroll-pb'],
      touch: ['touch-x', 'touch-y', 'touch-pz'],
      'touch-x': ['touch'],
      'touch-y': ['touch'],
      'touch-pz': ['touch']
    },
    conflictingClassGroupModifiers: {
      'font-size': ['leading']
    }
  };
};

/**
 * @param baseConfig Config where other config will be merged into. This object will be mutated.
 * @param configExtension Partial config to merge into the `baseConfig`.
 */
const mergeConfigs = (baseConfig, {
  cacheSize,
  prefix,
  separator,
  experimentalParseClassName,
  extend = {},
  override = {}
}) => {
  overrideProperty(baseConfig, 'cacheSize', cacheSize);
  overrideProperty(baseConfig, 'prefix', prefix);
  overrideProperty(baseConfig, 'separator', separator);
  overrideProperty(baseConfig, 'experimentalParseClassName', experimentalParseClassName);
  for (const configKey in override) {
    overrideConfigProperties(baseConfig[configKey], override[configKey]);
  }
  for (const key in extend) {
    mergeConfigProperties(baseConfig[key], extend[key]);
  }
  return baseConfig;
};
const overrideProperty = (baseObject, overrideKey, overrideValue) => {
  if (overrideValue !== undefined) {
    baseObject[overrideKey] = overrideValue;
  }
};
const overrideConfigProperties = (baseObject, overrideObject) => {
  if (overrideObject) {
    for (const key in overrideObject) {
      overrideProperty(baseObject, key, overrideObject[key]);
    }
  }
};
const mergeConfigProperties = (baseObject, mergeObject) => {
  if (mergeObject) {
    for (const key in mergeObject) {
      const mergeValue = mergeObject[key];
      if (mergeValue !== undefined) {
        baseObject[key] = (baseObject[key] || []).concat(mergeValue);
      }
    }
  }
};
const extendTailwindMerge = (configExtension, ...createConfig) => typeof configExtension === 'function' ? createTailwindMerge(getDefaultConfig, configExtension, ...createConfig) : createTailwindMerge(() => mergeConfigs(getDefaultConfig(), configExtension), ...createConfig);
const twMerge = /*#__PURE__*/createTailwindMerge(getDefaultConfig);

var ie={twMerge:!0,twMergeConfig:{},responsiveVariants:!1},_=s=>s||void 0,M=(...s)=>_(y(s).filter(Boolean).join(" ")),R=null,v={},q=!1,j=(...s)=>b$1=>b$1.twMerge?((!R||q)&&(q=!1,R=u(v)?twMerge:extendTailwindMerge({...v,extend:{theme:v.theme,classGroups:v.classGroups,conflictingClassGroupModifiers:v.conflictingClassGroupModifiers,conflictingClassGroups:v.conflictingClassGroups,...v.extend}})),_(R(M(s)))):M(s),Z=(s,b)=>{for(let e in b)s.hasOwnProperty(e)?s[e]=M(s[e],b[e]):s[e]=b[e];return s},ce=(s,b$1)=>{let{extend:e=null,slots:N={},variants:F={},compoundVariants:U=[],compoundSlots:C=[],defaultVariants:W={}}=s,m={...ie,...b$1},S=e!=null&&e.base?M(e.base,s==null?void 0:s.base):s==null?void 0:s.base,g$1=e!=null&&e.variants&&!u(e.variants)?p(F,e.variants):F,A=e!=null&&e.defaultVariants&&!u(e.defaultVariants)?{...e.defaultVariants,...W}:W;!u(m.twMergeConfig)&&!x(m.twMergeConfig,v)&&(q=!0,v=m.twMergeConfig);let O=u(e==null?void 0:e.slots),$=u(N)?{}:{base:M(s==null?void 0:s.base,O&&(e==null?void 0:e.base)),...N},w=O?$:Z({...e==null?void 0:e.slots},u($)?{base:s==null?void 0:s.base}:$),h$1=u(e==null?void 0:e.compoundVariants)?U:a(e==null?void 0:e.compoundVariants,U),V=f=>{if(u(g$1)&&u(N)&&O)return j(S,f==null?void 0:f.class,f==null?void 0:f.className)(m);if(h$1&&!Array.isArray(h$1))throw new TypeError(`The "compoundVariants" prop must be an array. Received: ${typeof h$1}`);if(C&&!Array.isArray(C))throw new TypeError(`The "compoundSlots" prop must be an array. Received: ${typeof C}`);let K=(t,n,a=[],i)=>{let r=a;if(typeof n=="string")r=r.concat(g(n).split(" ").map(o=>`${t}:${o}`));else if(Array.isArray(n))r=r.concat(n.reduce((o,c)=>o.concat(`${t}:${c}`),[]));else if(typeof n=="object"&&typeof i=="string"){for(let o in n)if(n.hasOwnProperty(o)&&o===i){let c=n[o];if(c&&typeof c=="string"){let l=g(c);r[i]?r[i]=r[i].concat(l.split(" ").map(u=>`${t}:${u}`)):r[i]=l.split(" ").map(u=>`${t}:${u}`);}else Array.isArray(c)&&c.length>0&&(r[i]=c.reduce((l,u)=>l.concat(`${t}:${u}`),[]));}}return r},z=(t,n=g$1,a$1=null,i=null)=>{var J;let r=n[t];if(!r||u(r))return null;let o=(J=i==null?void 0:i[t])!=null?J:f==null?void 0:f[t];if(o===null)return null;let c=l(o),l$1=Array.isArray(m.responsiveVariants)&&m.responsiveVariants.length>0||m.responsiveVariants===!0,u$1=A==null?void 0:A[t],d=[];if(typeof c=="object"&&l$1)for(let[T,L]of Object.entries(c)){let ne=r[L];if(T==="initial"){u$1=L;continue}Array.isArray(m.responsiveVariants)&&!m.responsiveVariants.includes(T)||(d=K(T,ne,d,a$1));}let ae=c!=null&&typeof c!="object"?c:l(u$1),k=r[ae||"false"];return typeof d=="object"&&typeof a$1=="string"&&d[a$1]?Z(d,k):d.length>0?(d.push(k),d):k},P=()=>g$1?Object.keys(g$1).map(t=>z(t,g$1)):null,p=(t,n)=>{if(!g$1||typeof g$1!="object")return null;let a=new Array;for(let i in g$1){let r=z(i,g$1,t,n),o=t==="base"&&typeof r=="string"?r:r&&r[t];o&&(a[a.length]=o);}return a},D={};for(let t in f)f[t]!==void 0&&(D[t]=f[t]);let H=(t,n)=>{var i;let a=typeof(f==null?void 0:f[t])=="object"?{[t]:(i=f[t])==null?void 0:i.initial}:{};return {...A,...D,...a,...n}},I=(t=[],n)=>{let a=[];for(let{class:i,className:r,...o}of t){let c=!0;for(let[l,u]of Object.entries(o)){let d=H(l,n);if(Array.isArray(u)){if(!u.includes(d[l])){c=!1;break}}else if(d[l]!==u){c=!1;break}}c&&(i&&a.push(i),r&&a.push(r));}return a},ee=t=>{let n=I(h$1,t);if(!Array.isArray(n))return n;let a={};for(let i of n)if(typeof i=="string"&&(a.base=j(a.base,i)(m)),typeof i=="object")for(let[r,o]of Object.entries(i))a[r]=j(a[r],o)(m);return a},te=t=>{if(C.length<1)return null;let n={};for(let{slots:a=[],class:i,className:r,...o}of C){if(!u(o)){let c=!0;for(let l of Object.keys(o)){let u=H(l,t)[l];if(u===void 0||(Array.isArray(o[l])?!o[l].includes(u):o[l]!==u)){c=!1;break}}if(!c)continue}for(let c of a)n[c]=n[c]||[],n[c].push([i,r]);}return n};if(!u(N)||!O){let t={};if(typeof w=="object"&&!u(w))for(let n of Object.keys(w))t[n]=a=>{var i,r;return j(w[n],p(n,a),((i=ee(a))!=null?i:[])[n],((r=te(a))!=null?r:[])[n],a==null?void 0:a.class,a==null?void 0:a.className)(m)};return t}return j(S,P(),I(h$1),f==null?void 0:f.class,f==null?void 0:f.className)(m)},x$1=()=>{if(!(!g$1||typeof g$1!="object"))return Object.keys(g$1)};return V.variantKeys=x$1(),V.extend=e,V.base=S,V.slots=w,V.variants=g$1,V.defaultVariants=A,V.compoundSlots=C,V.compoundVariants=h$1,V};

const focusRing = ce({
    base: "outline outline-primary forced-colors:outline-[Highlight] outline-offset-1",
    variants: {
        isFocusVisible: {
            false: "outline-0",
            true: "outline-2",
        },
    },
});
function composeTailwindRenderProps(className, tw) {
    return $64fa3d84918910a7$export$c245e6201fed2f75(className, (className) => twMerge(tw, className));
}

let button = ce({
    extend: focusRing,
    base: "px-[--btnPx] flex flex-row justify-center items-center text-center border border-black/10 cursor-pointer overflow-hidden transition",
    variants: {
        rounded: {
            none: "rounded-none",
            sm: "rounded-sm",
            md: "rounded-md",
            lg: "rounded-lg",
            xl: "rounded-xl",
            full: "rounded-full",
        },
        color: {
            default: [
                "[--bgDefaultHover:hsl(var(--hok-default-400))]",
                "[--bgFlat:hsl(var(--hok-default-200))]",
                "[--bgColor:hsl(var(--hok-default-500))]",
                "[--bgColorHover:hsl(var(--hok-default-500)/0.3)]",
                "[--borderColor:hsl(var(--hok-default-500))]",
                "[--textColor:hsl(var(--hok-default-500))]",
            ],
            primary: [
                "[--bgDefaultHover:hsl(var(--hok-primary-400))]",
                "[--bgFlat:hsl(var(--hok-primary-200))]",
                "[--bgColor:hsl(var(--hok-primary-500))]",
                "[--bgColorHover:hsl(var(--hok-primary-500)/0.3)]",
                "[--borderColor:hsl(var(--hok-primary-500))]",
                "[--textColor:hsl(var(--hok-primary-500))]",
            ],
            secondary: [
                "[--bgDefaultHover:hsl(var(--hok-secondary-400))]",
                "[--bgFlat:hsl(var(--hok-secondary-200))]",
                "[--bgColor:hsl(var(--hok-secondary-500))]",
                "[--bgColorHover:hsl(var(--hok-secondary-500)/0.3)]",
                "[--borderColor:hsl(var(--hok-secondary-500))]",
                "[--textColor:hsl(var(--hok-secondary-500))]",
            ],
            success: [
                "[--bgDefaultHover:hsl(var(--hok-success-400))]",
                "[--bgFlat:hsl(var(--hok-success-200))]",
                "[--bgColor:hsl(var(--hok-success-500))]",
                "[--bgColorHover:hsl(var(--hok-success-500)/0.3)]",
                "[--borderColor:hsl(var(--hok-success-500))]",
                "[--textColor:hsl(var(--hok-success-500))]",
            ],
            danger: [
                "[--bgDefaultHover:hsl(var(--hok-danger-400))]",
                "[--bgFlat:hsl(var(--hok-danger-200))]",
                "[--bgColor:hsl(var(--hok-danger-500))]",
                "[--bgColorHover:hsl(var(--hok-danger-500)/0.3)]",
                "[--borderColor:hsl(var(--hok-danger-500))]",
                "[--textColor:hsl(var(--hok-danger-500))]",
            ],
            warning: [
                "[--bgDefaultHover:hsl(var(--hok-warning-400))]",
                "[--bgFlat:hsl(var(--hok-warning-200))]",
                "[--bgColor:hsl(var(--hok-warning-500))]",
                "[--bgColorHover:hsl(var(--hok-warning-500)/0.3)]",
                "[--borderColor:hsl(var(--hok-warning-500))]",
                "[--textColor:hsl(var(--hok-warning-500))]",
            ],
            info: [
                "[--bgDefaultHover:hsl(var(--hok-info-400))]",
                "[--bgFlat:hsl(var(--hok-info-200))]",
                "[--bgColor:hsl(var(--hok-info-500))]",
                "[--bgColorHover:hsl(var(--hok-info-500)/0.3)]",
                "[--borderColor:hsl(var(--hok-info-500))]",
                "[--textColor:hsl(var(--hok-info-500))]",
            ],
        },
        variant: {
            default: "bg-[--bgColor] border-0 text-white hover:bg-[--bgDefaultHover]",
            bordered: "bg-transparent border-[--borderColor] border-2 text-[--textColor] hover:bg-[--bgColorHover]",
            flat: "border-0 bg-[--bgFlat] text-[--textColor] hover:bg-[--bgColorHover]",
            text: "border-0 bg-transparent text-[--textColor] hover:bg-[--bgColorHover]",
            icon: "![--btnPx:0] border-0 text-[--textColor] hover:bg-[--bgColorHover]",
        },
        isDisabled: {
            true: "bg-gray-100 text-gray-300 border-black/5 cursor-not-allowed",
        },
        size: {
            sm: "[--btnPx:0.5rem] h-6 min-w-6 text-sm",
            md: "[--btnPx:0.75rem] h-8 min-w-8 text-md",
            lg: "[--btnPx:1rem] h-10 min-w-10 text-lg",
            xl: "[--btnPx:1.25rem] h-12 min-w-12 text-xl",
        },
        isHovered: {
            true: "scale-105",
        },
        isPressed: {
            true: "scale-95",
        },
    },
    defaultVariants: {
        variant: "default",
        color: "default",
        rounded: "md",
        size: "md",
    },
});
function Button(props) {
    return (jsxRuntimeExports.jsx($d2b4bc8c273e7be6$export$353f5b6fc5456de1, { ...props, isDisabled: props.isDisabled || props.isLoading, className: $64fa3d84918910a7$export$c245e6201fed2f75(props.className, (className, renderProps) => button({
            ...renderProps,
            variant: props.variant,
            color: props.color,
            rounded: props.rounded,
            size: props.size,
            className,
        })), children: props.isLoading ? (jsxRuntimeExports.jsxs("svg", { "aria-hidden": "true", className: "w-5 h-5 text-gray-300 animate-spin fill-blue-600", viewBox: "0 0 100 101", fill: "none", xmlns: "http://www.w3.org/2000/svg", children: [jsxRuntimeExports.jsx("path", { d: "M100 50.5908C100 78.2051 77.6142 100.591 50 100.591C22.3858 100.591 0 78.2051 0 50.5908C0 22.9766 22.3858 0.59082 50 0.59082C77.6142 0.59082 100 22.9766 100 50.5908ZM9.08144 50.5908C9.08144 73.1895 27.4013 91.5094 50 91.5094C72.5987 91.5094 90.9186 73.1895 90.9186 50.5908C90.9186 27.9921 72.5987 9.67226 50 9.67226C27.4013 9.67226 9.08144 27.9921 9.08144 50.5908Z", fill: "currentColor" }), jsxRuntimeExports.jsx("path", { d: "M93.9676 39.0409C96.393 38.4038 97.8624 35.9116 97.0079 33.5539C95.2932 28.8227 92.871 24.3692 89.8167 20.348C85.8452 15.1192 80.8826 10.7238 75.2124 7.41289C69.5422 4.10194 63.2754 1.94025 56.7698 1.05124C51.7666 0.367541 46.6976 0.446843 41.7345 1.27873C39.2613 1.69328 37.813 4.19778 38.4501 6.62326C39.0873 9.04874 41.5694 10.4717 44.0505 10.1071C47.8511 9.54855 51.7191 9.52689 55.5402 10.0491C60.8642 10.7766 65.9928 12.5457 70.6331 15.2552C75.2735 17.9648 79.3347 21.5619 82.5849 25.841C84.9175 28.9121 86.7997 32.2913 88.1811 35.8758C89.083 38.2158 91.5421 39.6781 93.9676 39.0409Z", fill: "currentFill" })] })) : (props.children) }));
}

const styles$6 = ce({
    base: "p-1 bg-white forced-colors:bg-[Canvas] shadow-2xl rounded-xl bg-clip-padding border border-black/10 text-slate-700",
    variants: {
        isEntering: {
            true: "animate-in fade-in ease-out duration-200",
        },
        placement: {
            left: "",
            right: "",
            top: "",
            bottom: "",
            center: "",
        },
        isExiting: {
            true: "animate-out fade-out ease-in duration-150",
        },
    },
    compoundVariants: [
        {
            isEntering: true,
            placement: "left",
            class: "placement-left:slide-in-from-right-1",
        },
        {
            isEntering: true,
            placement: "right",
            class: "placement-right:slide-in-from-left-1",
        },
        {
            isEntering: true,
            placement: "top",
            class: "placement-top:slide-in-from-bottom-1",
        },
        {
            isEntering: true,
            placement: "bottom",
            class: "placement-bottom:slide-in-from-top-1",
        },
        {
            isExiting: true,
            placement: "left",
            class: "placement-left:slide-out-to-right-1",
        },
        {
            isExiting: true,
            placement: "right",
            class: "placement-right:slide-out-to-left-1",
        },
        {
            isExiting: true,
            placement: "top",
            class: "placement-top:slide-out-to-bottom-1",
        },
        {
            isExiting: true,
            placement: "bottom",
            class: "placement-bottom:slide-out-to-top-1",
        },
    ],
});
function Popover({ children, showArrow, className, ...props }) {
    let popoverContext = $64fa3d84918910a7$export$fabf2dc03a41866e($07b14b47974efb58$export$9b9a0cd73afb7ca4);
    let isSubmenu = popoverContext?.trigger === "SubmenuTrigger";
    let offset = showArrow ? 12 : 8;
    let crossOffset = 0;
    offset = isSubmenu ? offset - 6 : offset;
    return (jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [props.activator ? props.activator() : jsxRuntimeExports.jsx(Button, { children: props.label }), jsxRuntimeExports.jsxs($07b14b47974efb58$export$5b6b19405a83ff9d, { offset: offset, crossOffset: crossOffset, ...props, className: $64fa3d84918910a7$export$c245e6201fed2f75(className, (className, renderProps) => styles$6({ ...renderProps, className })), children: [showArrow && (jsxRuntimeExports.jsx($44f671af83e7d9e0$export$746d02f47f4d381, { className: "group", children: jsxRuntimeExports.jsx("svg", { width: 12, height: 12, viewBox: "0 0 12 12", className: "block fill-white forced-colors:fill-[Canvas] stroke-1 stroke-black/10 forced-colors:stroke-[ButtonBorder] group-placement-bottom:rotate-180 group-placement-left:-rotate-90 group-placement-right:rotate-90", children: jsxRuntimeExports.jsx("path", { d: "M0 0 L6 6 L12 0" }) }) })), children] })] }));
}

function Dialog(props) {
    return (jsxRuntimeExports.jsx($de32f1b87079253c$export$2e1e1122cf0cba88, { children: jsxRuntimeExports.jsx(Popover, { showArrow: true, label: props.label, activator: props.activator, children: jsxRuntimeExports.jsx($de32f1b87079253c$export$3ddf2d174ce01153, { ...props, className: twMerge("outline outline-0 p-6 [[data-placement]>&]:p-4 max-h-[inherit] overflow-auto relative", props.className) }) }) }));
}

function AlertDialog({ title, cancelLabel, actionLabel, onAction, children, ...props }) {
    return (jsxRuntimeExports.jsx(Dialog, { role: "alertdialog", ...props, children: ({ close }) => (jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [jsxRuntimeExports.jsx($5cb03073d3f54797$export$a8a3e93435678ff9, { slot: "title", className: "text-xl font-semibold leading-6 my-0", children: title }), jsxRuntimeExports.jsx("p", { className: "mt-3 text-slate-500 dark:text-zinc-400", children: children }), jsxRuntimeExports.jsxs("div", { className: "mt-6 flex justify-end gap-2", children: [jsxRuntimeExports.jsx(Button, { variant: "text", onPress: close, children: cancelLabel || "Cancel" }), jsxRuntimeExports.jsx(Button, { variant: "flat", color: "primary", onPress: $ff5963eb1fccf552$export$e08e3b67e392101e(onAction, close), children: actionLabel })] })] })) }));
}

const badgeStyle = ce({
    base: "absolute px-[6px] text-sm text-[--text]",
    variants: {
        position: {
            "top-right": "top-[calc(var(--yPosition)*-1)] right-0 translate-x-1/2",
            "top-left": "top-[calc(var(--yPosition)_*_-1)] left-0 -translate-x-1/2",
            "bottom-left": "bottom-[calc(var(--yPosition)*-1)] right-0 translate-x-1/2",
            "bottom-right": "bottom-[calc(var(--yPosition)*-1)] left-0 -translate-x-1/2",
        },
        variant: {
            default: "[--yPosition:1rem] bg-[--bgColor] border-white border-2",
            bordered: "[--yPosition:1rem] bg-white border-[--borderColor] border-2",
            flat: "[--yPosition:0.75rem] bg-[--bgColor] border-0",
        },
        rounded: {
            default: "rounded-sm",
            full: "rounded-full",
        },
        color: {
            default: "[--bgColor:hsl(var(--hok-default-200))] [--borderColor:hsl(var(--hok-default-300))] [--text:hsl(var(--hok-default-500))]",
            primary: "[--bgColor:hsl(var(--hok-primary-100))] [--borderColor:hsl(var(--hok-primary-200))] [--text:hsl(var(--hok-primary-500))]",
            secondary: "[--bgColor:hsl(var(--hok-secondary-100))] [--borderColor:hsl(var(--hok-secondary-200))] [--text:hsl(var(--hok-secondary-500))]",
            success: "[--bgColor:hsl(var(--hok-success-100))] [--borderColor:hsl(var(--hok-success-200))] [--text:hsl(var(--hok-success-500))]",
            danger: "[--bgColor:hsl(var(--hok-danger-100))] [--borderColor:hsl(var(--hok-danger-200))] [--text:hsl(var(--hok-danger-500))]",
            warning: "[--bgColor:hsl(var(--hok-warning-100))] [--borderColor:hsl(var(--hok-warning-200))] [--text:hsl(var(--hok-warning-500))]",
            info: "[--bgColor:hsl(var(--hok-info-100))] [--borderColor:hsl(var(--hok-info-200))] [--text:hsl(var(--hok-info-500))]",
        },
    },
    defaultVariants: {
        position: "top-right",
        variant: "default",
        rounded: "default",
        color: "default",
    },
});
function Badge(props) {
    return (jsxRuntimeExports.jsxs("div", { className: "relative", children: [jsxRuntimeExports.jsx("div", { className: badgeStyle({
                    position: props.position,
                    variant: props.variant,
                    rounded: props.rounded,
                    color: props.color,
                    className: props.className,
                }), children: jsxRuntimeExports.jsx("div", { children: props.content }) }), props.children] }));
}

/**
 * @license lucide-react v0.445.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */

const toKebabCase = (string) => string.replace(/([a-z0-9])([A-Z])/g, "$1-$2").toLowerCase();
const mergeClasses = (...classes) => classes.filter((className, index, array) => {
  return Boolean(className) && array.indexOf(className) === index;
}).join(" ");

/**
 * @license lucide-react v0.445.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */

var defaultAttributes = {
  xmlns: "http://www.w3.org/2000/svg",
  width: 24,
  height: 24,
  viewBox: "0 0 24 24",
  fill: "none",
  stroke: "currentColor",
  strokeWidth: 2,
  strokeLinecap: "round",
  strokeLinejoin: "round"
};

/**
 * @license lucide-react v0.445.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */


const Icon = reactExports.forwardRef(
  ({
    color = "currentColor",
    size = 24,
    strokeWidth = 2,
    absoluteStrokeWidth,
    className = "",
    children,
    iconNode,
    ...rest
  }, ref) => {
    return reactExports.createElement(
      "svg",
      {
        ref,
        ...defaultAttributes,
        width: size,
        height: size,
        stroke: color,
        strokeWidth: absoluteStrokeWidth ? Number(strokeWidth) * 24 / Number(size) : strokeWidth,
        className: mergeClasses("lucide", className),
        ...rest
      },
      [
        ...iconNode.map(([tag, attrs]) => reactExports.createElement(tag, attrs)),
        ...Array.isArray(children) ? children : [children]
      ]
    );
  }
);

/**
 * @license lucide-react v0.445.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */


const createLucideIcon = (iconName, iconNode) => {
  const Component = reactExports.forwardRef(
    ({ className, ...props }, ref) => reactExports.createElement(Icon, {
      ref,
      iconNode,
      className: mergeClasses(`lucide-${toKebabCase(iconName)}`, className),
      ...props
    })
  );
  Component.displayName = `${iconName}`;
  return Component;
};

/**
 * @license lucide-react v0.445.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */


const ArrowUp = createLucideIcon("ArrowUp", [
  ["path", { d: "m5 12 7-7 7 7", key: "hav0vg" }],
  ["path", { d: "M12 19V5", key: "x0mq9r" }]
]);

/**
 * @license lucide-react v0.445.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */


const Calendar$1 = createLucideIcon("Calendar", [
  ["path", { d: "M8 2v4", key: "1cmpym" }],
  ["path", { d: "M16 2v4", key: "4m81vk" }],
  ["rect", { width: "18", height: "18", x: "3", y: "4", rx: "2", key: "1hopcy" }],
  ["path", { d: "M3 10h18", key: "8toen8" }]
]);

/**
 * @license lucide-react v0.445.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */


const Check = createLucideIcon("Check", [["path", { d: "M20 6 9 17l-5-5", key: "1gmf2c" }]]);

/**
 * @license lucide-react v0.445.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */


const ChevronDown = createLucideIcon("ChevronDown", [
  ["path", { d: "m6 9 6 6 6-6", key: "qrunsl" }]
]);

/**
 * @license lucide-react v0.445.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */


const ChevronLeft = createLucideIcon("ChevronLeft", [
  ["path", { d: "m15 18-6-6 6-6", key: "1wnfg3" }]
]);

/**
 * @license lucide-react v0.445.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */


const ChevronRight = createLucideIcon("ChevronRight", [
  ["path", { d: "m9 18 6-6-6-6", key: "mthhwq" }]
]);

/**
 * @license lucide-react v0.445.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */


const ChevronUp = createLucideIcon("ChevronUp", [["path", { d: "m18 15-6-6-6 6", key: "153udz" }]]);

/**
 * @license lucide-react v0.445.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */


const GripVertical = createLucideIcon("GripVertical", [
  ["circle", { cx: "9", cy: "12", r: "1", key: "1vctgf" }],
  ["circle", { cx: "9", cy: "5", r: "1", key: "hp0tcf" }],
  ["circle", { cx: "9", cy: "19", r: "1", key: "fkjjf6" }],
  ["circle", { cx: "15", cy: "12", r: "1", key: "1tmaij" }],
  ["circle", { cx: "15", cy: "5", r: "1", key: "19l28e" }],
  ["circle", { cx: "15", cy: "19", r: "1", key: "f4zoj3" }]
]);

/**
 * @license lucide-react v0.445.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */


const Minus = createLucideIcon("Minus", [["path", { d: "M5 12h14", key: "1ays0h" }]]);

/**
 * @license lucide-react v0.445.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */


const Search = createLucideIcon("Search", [
  ["circle", { cx: "11", cy: "11", r: "8", key: "4ej97u" }],
  ["path", { d: "m21 21-4.3-4.3", key: "1qie3q" }]
]);

/**
 * @license lucide-react v0.445.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */


const TriangleAlert = createLucideIcon("TriangleAlert", [
  [
    "path",
    {
      d: "m21.73 18-8-14a2 2 0 0 0-3.48 0l-8 14A2 2 0 0 0 4 21h16a2 2 0 0 0 1.73-3",
      key: "wmoenq"
    }
  ],
  ["path", { d: "M12 9v4", key: "juzpu7" }],
  ["path", { d: "M12 17h.01", key: "p32p05" }]
]);

/**
 * @license lucide-react v0.445.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */


const X = createLucideIcon("X", [
  ["path", { d: "M18 6 6 18", key: "1bl5f8" }],
  ["path", { d: "m6 6 12 12", key: "d8bk6v" }]
]);

const styles$5 = ce({
    extend: focusRing,
    base: "underline disabled:no-underline disabled:cursor-default forced-colors:disabled:text-[GrayText] transition rounded cursor-pointer",
    variants: {
        variant: {
            text: "text-[--text] underline decoration-[--decoration] hover:decoration-[--hoverDecoration]",
            flat: "bg-[--bg] hover:bg-[--hoverBg] text-[--text] px-3 py-[0.2rem] rounded-sm",
        },
        color: {
            default: "[--c:var(--hok-default-500)] [--text:hsl(var(--c))] [--decoration:hsl(var(--c)/0.4)] [--hoverDecoration:hsl(var(--c))] [--bg:hsl(var(--c)/0.2)] [--hoverBg:hsl(var(--c)/0.1)]",
            primary: "[--c:var(--hok-primary-500)] [--text:hsl(var(--c))] [--decoration:hsl(var(--c)/0.4)] [--hoverDecoration:hsl(var(--c))] [--bg:hsl(var(--c)/0.2)] [--hoverBg:hsl(var(--c)/0.1)]",
            secondary: "[--c:var(--hok-secondary-500)] [--text:hsl(var(--c))] [--decoration:hsl(var(--c)/0.4)] [--hoverDecoration:hsl(var(--c))] [--bg:hsl(var(--c)/0.2)] [--hoverBg:hsl(var(--c)/0.1)]",
            success: "[--c:var(--hok-success-500)] [--text:hsl(var(--c))] [--decoration:hsl(var(--c)/0.4)] [--hoverDecoration:hsl(var(--c))] [--bg:hsl(var(--c)/0.2)] [--hoverBg:hsl(var(--c)/0.1)]",
            danger: "[--c:var(--hok-danger-500)] [--text:hsl(var(--c))] [--decoration:hsl(var(--c)/0.4)] [--hoverDecoration:hsl(var(--c))] [--bg:hsl(var(--c)/0.2)] [--hoverBg:hsl(var(--c)/0.1)]",
            warning: "[--c:var(--hok-warning-500)] [--text:hsl(var(--c))] [--decoration:hsl(var(--c)/0.4)] [--hoverDecoration:hsl(var(--c))] [--bg:hsl(var(--c)/0.2)] [--hoverBg:hsl(var(--c)/0.1)]",
            info: "[--c:var(--hok-info-500)] [--text:hsl(var(--c))] [--decoration:hsl(var(--c)/0.4)] [--hoverDecoration:hsl(var(--c))] [--bg:hsl(var(--c)/0.2)] [--hoverBg:hsl(var(--c)/0.1)]",
        },
    },
    defaultVariants: {
        variant: "text",
        color: "default",
    },
});
function Link(props) {
    return (jsxRuntimeExports.jsx($4f118338184dc1d9$export$a6c7ac8248d6e38a, { ...props, className: $64fa3d84918910a7$export$c245e6201fed2f75(props.className, (className, renderProps) => styles$5({
            ...renderProps,
            className,
            variant: props.variant,
            color: props.color,
        })) }));
}

function Breadcrumbs(props) {
    return (jsxRuntimeExports.jsx($778035c5624f61e7$export$2dc68d50d56fbbd, { ...props, className: twMerge("flex gap-1", props.className), children: props.menus.map((e, i) => (jsxRuntimeExports.jsx(Breadcrumb, { href: props.menus.length - 1 === i ? "" : e.to, children: e.title }, i))) }));
}
function Breadcrumb(props) {
    return (jsxRuntimeExports.jsxs($778035c5624f61e7$export$dabcc1ec9dd9d1cc, { ...props, className: composeTailwindRenderProps(props.className, "flex items-center gap-1"), children: [jsxRuntimeExports.jsx(Link, { variant: "text", ...props }), props.href && jsxRuntimeExports.jsx(ChevronRight, { className: "w-3 h-3 text-gray-600" })] }));
}

const cellStyles$1 = ce({
    extend: focusRing,
    base: "rounded w-9 h-9 text-sm cursor-default flex items-center justify-center forced-color-adjust-none cursor-pointer",
    variants: {
        isSelected: {
            false: "text-zinc-900 hover:bg-gray-100 pressed:bg-gray-200",
            true: "bg-[--selectedColor] invalid:bg-red-600 text-white forced-colors:bg-[Highlight] forced-colors:invalid:bg-[Mark] forced-colors:text-[HighlightText]",
        },
        isDisabled: {
            true: "text-gray-300 forced-colors:text-[GrayText]",
        },
        color: {
            default: "[--selectedColor:hsl(var(--hok-default-400))]",
            primary: "[--selectedColor:hsl(var(--hok-primary-400))]",
            secondary: "[--selectedColor:hsl(var(--hok-secondary-500))]",
            success: "[--selectedColor:hsl(var(--hok-success-500))]",
            danger: "[--selectedColor:hsl(var(--hok-danger-500))]",
            warning: "[--selectedColor:hsl(var(--hok-warning-500))]",
            info: "[--selectedColor:hsl(var(--hok-info-500))]",
        },
    },
    defaultVariants: {
        color: "default",
    },
});
function Calendar({ errorMessage, ...props }) {
    return (jsxRuntimeExports.jsxs($dfd62f934fc76fed$export$e1aef45b828286de, { ...props, children: [jsxRuntimeExports.jsx(CalendarHeader, {}), jsxRuntimeExports.jsxs($dfd62f934fc76fed$export$5bd780d491cfc46c, { children: [jsxRuntimeExports.jsx(CalendarGridHeader, {}), jsxRuntimeExports.jsx($dfd62f934fc76fed$export$e11f8ba65d857bff, { children: (date) => (jsxRuntimeExports.jsx($dfd62f934fc76fed$export$5d847498420df57b, { date: date, className: (renderProps) => cellStyles$1({ ...renderProps, color: props.color }) })) })] }), errorMessage && (jsxRuntimeExports.jsx($514c0188e459b4c0$export$5f1af8db9871e1d6, { slot: "errorMessage", className: "text-sm text-red-600", children: errorMessage }))] }));
}
function Header() {
    return (jsxRuntimeExports.jsx("div", { className: "w-full", children: jsxRuntimeExports.jsx($5cb03073d3f54797$export$a8a3e93435678ff9, { className: "flex-1 font-semibold text-xl text-center mx-2 text-zinc-900" }) }));
}
function CalendarHeader() {
    const { direction } = $18f2051aff69b9bf$export$43bb16f9c6d9e3f7();
    return (jsxRuntimeExports.jsxs("div", { className: "flex items-center gap-1 pb-4 px-1 w-full", children: [jsxRuntimeExports.jsx(Button, { variant: "icon", slot: "previous", children: direction === "rtl" ? (jsxRuntimeExports.jsx(ChevronRight, { "aria-hidden": true })) : (jsxRuntimeExports.jsx(ChevronLeft, { "aria-hidden": true })) }), jsxRuntimeExports.jsx(Header, {}), jsxRuntimeExports.jsx(Button, { variant: "icon", slot: "next", children: direction === "rtl" ? (jsxRuntimeExports.jsx(ChevronLeft, { "aria-hidden": true })) : (jsxRuntimeExports.jsx(ChevronRight, { "aria-hidden": true })) })] }));
}
function CalendarGridHeader() {
    return (jsxRuntimeExports.jsx($dfd62f934fc76fed$export$22e2d15eaa4d2377, { children: (day) => (jsxRuntimeExports.jsx($dfd62f934fc76fed$export$ad2135cac3a11b3d, { className: "text-xs text-gray-500 font-semibold", children: day })) }));
}

function Label(props) {
    return (jsxRuntimeExports.jsx($01b77f81d0f07f68$export$b04be29aa201d4f5, { ...props, className: twMerge("text-sm text-gray-500 font-medium cursor-default w-fit", props.className) }));
}
function Description(props) {
    return (jsxRuntimeExports.jsx($514c0188e459b4c0$export$5f1af8db9871e1d6, { ...props, slot: "description", className: twMerge("text-sm text-gray-600", props.className) }));
}
function FieldError(props) {
    return (jsxRuntimeExports.jsx($ee014567cb39d3f0$export$f551688fc98f2e09, { ...props, className: composeTailwindRenderProps(props.className, "text-sm text-red-600 forced-colors:text-[Mark]") }));
}
const fieldBorderStyles = ce({
    variants: {
        isFocusWithin: {
            false: "border-[--borderColor] forced-colors:border-[ButtonBorder]",
            true: "border-[--borderColor] forced-colors:border-[Highlight]",
        },
        isInvalid: {
            true: "border-red-600 forced-colors:border-[Mark]",
        },
        isDisabled: {
            true: "border-gray-200 forced-colors:border-[GrayText]",
        },
        variant: {
            bordered: "bg-white border-2",
            underlined: "",
            flat: "bg-[--bgColorFlat] border-0",
        },
        rounded: {
            none: "rounded-none",
            sm: "rounded-sm",
            md: "rounded-md",
            lg: "rounded-lg",
            xl: "rounded-xl",
            full: "rounded-full",
        },
        color: {
            default: "[--c:var(--hok-default-200)] [--borderColor:hsl(var(--c))] [--bgColorFlat:hsl(var(--c)/0.8)]",
            primary: "[--c:var(--hok-primary-100)] [--borderColor:hsl(var(--c))] [--bgColorFlat:hsl(var(--c)/0.8)]",
            secondary: "[--c:var(--hok-secondary-100)] [--borderColor:hsl(var(--c))] [--bgColorFlat:hsl(var(--c)/0.8)]",
            success: "[--c:var(--hok-success-300)] [--borderColor:hsl(var(--c))] [--bgColorFlat:hsl(var(--c)/0.8)]",
            danger: "[--c:var(--hok-danger-300)] [--borderColor:hsl(var(--c))] [--bgColorFlat:hsl(var(--c)/0.8)]",
            warning: "[--c:var(--hok-warning-300)] [--borderColor:hsl(var(--c))] [--bgColorFlat:hsl(var(--c)/0.8)]",
            info: "[--c:var(--hok-info-300)] [--borderColor:hsl(var(--c))] [--bgColorFlat:hsl(var(--c)/0.8)]",
        },
    },
    defaultVariants: {
        variant: "bordered",
        rounded: "md",
        color: "default",
    },
});
const fieldGroupStyles = ce({
    extend: focusRing,
    base: "group flex items-center h-9 bg-white forced-colors:bg-[Field] overflow-hidden",
    variants: fieldBorderStyles.variants,
    defaultVariants: {
        variant: "bordered",
        rounded: "md",
        color: "default",
    },
});
function FieldGroup(props) {
    return (jsxRuntimeExports.jsx($a049562f99e7db0e$export$eb2fcfdbd7ba97d4, { ...props, className: $64fa3d84918910a7$export$c245e6201fed2f75(props.className, (className, renderProps) => fieldGroupStyles({
            ...renderProps,
            className,
            color: props.color,
            variant: props.variant,
            rounded: props.rounded,
        })) }));
}
function Input(props) {
    return (jsxRuntimeExports.jsx($3985021b0ad6602f$export$f5b8910cec6cf069, { ...props, className: composeTailwindRenderProps(props.className, "bg-transparent outline-0 px-2 py-1.5 flex-1 min-w-0s text-sm text-gray-800 disabled:text-gray-200") }));
}

function CheckboxGroup(props) {
    return (jsxRuntimeExports.jsxs($bc237834342dbd75$export$4aa08d5625cb8ead, { ...props, className: composeTailwindRenderProps(props.className, "flex flex-col gap-2"), children: [jsxRuntimeExports.jsx(Label, { children: props.label }), props.children, props.description && jsxRuntimeExports.jsx(Description, { children: props.description }), jsxRuntimeExports.jsx(FieldError, { children: props.errorMessage })] }));
}
const checkboxStyles = ce({
    base: "flex gap-2 items-center group text-sm transition",
    variants: {
        isDisabled: {
            false: "text-gray-800 dark:text-zinc-200",
            true: "text-gray-300 dark:text-zinc-600 forced-colors:text-[GrayText]",
        },
    },
});
const boxStyles = ce({
    extend: focusRing,
    base: "w-5 h-5 flex-shrink-0 rounded-[.35rem] flex items-center justify-center border-2 transition cursor-pointer",
    variants: {
        isSelected: {
            false: "bg-white border-[--color] [--color:--colorSelectFalse] group-pressed:text-default",
            true: "bg-[--color] border-[--color] [--color:--colorSelectTrue] group-pressed:[--color:--colorSelectPressed] forced-colors:![--color:Highlight]",
        },
        isInvalid: {
            true: "[--color:theme(colors.red.700)] forced-colors:![--color:Mark] group-pressed:[--color:theme(colors.red.800)]",
        },
        isDisabled: {
            true: "[--color:theme(colors.gray.200)] forced-colors:![--color:GrayText]",
        },
        color: {
            default: [
                "[--colorSelectFalse:hsl(var(--hok-default-200))]",
                "[--colorSelectTrue:hsl(var(--hok-default-600))]",
                "[--colorSelectPressed:hsl(var(--hok-default-700))]",
            ],
            primary: [
                "[--colorSelectFalse:hsl(var(--hok-primary-200))]",
                "[--colorSelectTrue:hsl(var(--hok-primary-300))]",
                "[--colorSelectPressed:hsl(var(--hok-primary-400))]",
            ],
            secondary: [
                "[--colorSelectFalse:hsl(var(--hok-secondary-200))]",
                "[--colorSelectTrue:hsl(var(--hok-secondary-700))]",
                "[--colorSelectPressed:hsl(var(--hok-secondary-800))]",
            ],
            success: [
                "[--colorSelectFalse:hsl(var(--hok-success-400))]",
                "[--colorSelectTrue:hsl(var(--hok-success-500))]",
                "[--colorSelectPressed:hsl(var(--hok-success-600))]",
            ],
            danger: [
                "[--colorSelectFalse:hsl(var(--hok-danger-400))]",
                "[--colorSelectTrue:hsl(var(--hok-danger-500))]",
                "[--colorSelectPressed:hsl(var(--hok-danger-600))]",
            ],
            warning: [
                "[--colorSelectFalse:hsl(var(--hok-warning-400))]",
                "[--colorSelectTrue:hsl(var(--hok-warning-500))]",
                "[--colorSelectPressed:hsl(var(--hok-warning-600))]",
            ],
            info: [
                "[--colorSelectFalse:hsl(var(--hok-info-400))]",
                "[--colorSelectTrue:hsl(var(--hok-info-500))]",
                "[--colorSelectPressed:hsl(var(--hok-info-600))]",
            ],
        },
        isHovered: {
            true: "scale-105",
        },
        isPressed: {
            true: "scale-95",
        },
    },
    defaultVariants: {
        color: "default",
    },
});
const iconStyles = "w-4 h-4 text-white group-disabled:text-gray-400 forced-colors:text-[HighlightText]";
function Checkbox(props) {
    return (jsxRuntimeExports.jsx($bc237834342dbd75$export$48513f6b9f8ce62d, { ...props, className: $64fa3d84918910a7$export$c245e6201fed2f75(props.className, (className, renderProps) => checkboxStyles({ ...renderProps, className })), children: ({ isSelected, isIndeterminate, ...renderProps }) => (jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [jsxRuntimeExports.jsx("div", { className: boxStyles({
                        isSelected: isSelected || isIndeterminate,
                        color: props.color,
                        ...renderProps,
                    }), children: isIndeterminate ? (jsxRuntimeExports.jsx(Minus, { "aria-hidden": true, className: iconStyles })) : isSelected ? (jsxRuntimeExports.jsx(Check, { "aria-hidden": true, className: iconStyles })) : null }), props.children] })) }));
}

const listBoxContext = reactExports.createContext({ color: "default" });
function ListBox({ children, ...props }) {
    return (jsxRuntimeExports.jsx(listBoxContext.Provider, { value: { color: props.color }, children: jsxRuntimeExports.jsx($eed445e0843c11d0$export$41f133550aa26f48, { ...props, className: composeTailwindRenderProps(props.className, "outline-0 p-1 border border-gray-300 rounded-lg"), onSelectionChange: (e) => props.onSelect
                ? props.onSelect(Array.from(e).map((f) => String(f)))
                : undefined, children: children
                ? children
                : (e) => jsxRuntimeExports.jsx(ListBoxItem, { children: e.title }, e.key) }) }));
}
const itemStyles$1 = ce({
    extend: focusRing,
    base: "group relative flex items-center gap-8 cursor-default select-none py-1.5 px-2.5 rounded-md will-change-transform text-sm forced-color-adjust-none",
    variants: {
        isSelected: {
            false: "text-[--text] hover:bg-[--bgHover] -outline-offset-2",
            true: "bg-[--bg] text-white forced-colors:bg-[Highlight] forced-colors:text-[HighlightText] [&:has(+[data-selected])]:rounded-b-none [&+[data-selected]]:rounded-t-none -outline-offset-4 outline-white forced-colors:outline-[HighlightText]",
        },
        isDisabled: {
            true: "text-slate-300 forced-colors:text-[GrayText]",
        },
        color: {
            default: "[--bg:hsl(var(--hok-default-300))] [--bgHover:hsl(var(--hok-default-200))] [--text:hsl(var(--hok-default-500))]",
            primary: "[--bg:hsl(var(--hok-primary-300))] [--bgHover:hsl(var(--hok-primary-100))] [--text:hsl(var(--hok-primary-500))]",
            secondary: "[--bg:hsl(var(--hok-secondary-300))] [--bgHover:hsl(var(--hok-secondary-100))] [--text:hsl(var(--hok-secondary-500))]",
            success: "[--bg:hsl(var(--hok-success-500))] [--bgHover:hsl(var(--hok-success-300))] [--text:hsl(var(--hok-success-600))]",
            warning: "[--bg:hsl(var(--hok-warning-500))] [--bgHover:hsl(var(--hok-warning-300))] [--text:hsl(var(--hok-warning-500))]",
            danger: "[--bg:hsl(var(--hok-danger-500))] [--bgHover:hsl(var(--hok-danger-300))] [--text:hsl(var(--hok-danger-500))]",
            info: "[--bg:hsl(var(--hok-info-400))] [--bgHover:hsl(var(--hok-info-100))] [--text:hsl(var(--hok-info-500))]",
        },
    },
    defaultVariants: {
        color: "default",
    },
});
function ListBoxItem(props) {
    let textValue = props.textValue ||
        (typeof props.children === "string" ? props.children : undefined);
    const ctx = reactExports.useContext(listBoxContext);
    return (jsxRuntimeExports.jsx($eed445e0843c11d0$export$a11e76429ed99b4, { ...props, textValue: textValue, className: (renderProps) => itemStyles$1({
            ...renderProps,
            color: ctx.color,
        }), children: $64fa3d84918910a7$export$c245e6201fed2f75(props.children, (children) => (jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [children, jsxRuntimeExports.jsx("div", { className: "absolute left-4 right-4 bottom-0 h-px bg-white/20 forced-colors:bg-[HighlightText] hidden [.group[data-selected]:has(+[data-selected])_&]:block" })] }))) }));
}
const dropdownItemStyles = ce({
    base: "group flex items-center gap-4 cursor-default select-none py-2 pl-3 pr-1 rounded outline outline-0 text-sm forced-color-adjust-none",
    variants: {
        isDisabled: {
            false: "text-gray-900",
            true: "text-gray-300 forced-colors:text-[GrayText]",
        },
        isFocused: {
            true: "bg-[--bg] text-white forced-colors:bg-[Highlight] forced-colors:text-[HighlightText]",
        },
        color: {
            default: "[--bg:hsl(var(--hok-default-300))]",
            primary: "[--bg:hsl(var(--hok-primary-300))]",
            secondary: "[--bg:hsl(var(--hok-secondary-300))]",
            success: "[--bg:hsl(var(--hok-success-500))]",
            warning: "[--bg:hsl(var(--hok-warning-500))]",
            danger: "[--bg:hsl(var(--hok-danger-500))]",
            info: "[--bg:hsl(var(--hok-info-400))]",
        },
    },
    defaultVariants: {
        color: "default",
    },
    compoundVariants: [
        {
            isFocused: false,
            isOpen: true,
            className: "bg-gray-100",
        },
    ],
});
function DropdownItem(props) {
    let textValue = props.textValue ||
        (typeof props.children === "string" ? props.children : undefined);
    const ctx = reactExports.useContext(listBoxContext);
    return (jsxRuntimeExports.jsx($eed445e0843c11d0$export$a11e76429ed99b4, { ...props, textValue: textValue, className: (renderProps) => dropdownItemStyles({ ...renderProps, color: ctx.color }), children: $64fa3d84918910a7$export$c245e6201fed2f75(props.children, (children, { isSelected }) => (jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [jsxRuntimeExports.jsx("span", { className: "flex items-center flex-1 gap-2 font-normal truncate group-selected:font-semibold", children: children }), jsxRuntimeExports.jsx("span", { className: "flex items-center w-5", children: isSelected && jsxRuntimeExports.jsx(Check, { className: "w-4 h-4" }) })] }))) }));
}
function DropdownSection(props) {
    return (jsxRuntimeExports.jsxs($7135fc7d473fd974$export$6e2c8f0811a474ce, { className: "first:-mt-[5px] after:content-[''] after:block after:h-[5px]", children: [jsxRuntimeExports.jsx($72a5793c14baf454$export$8b251419efc915eb, { className: "text-sm font-semibold text-gray-500 px-4 py-1 truncate sticky -top-[5px] -mt-px -mx-1 z-10 bg-gray-100/60 backdrop-blur-md supports-[-moz-appearance:none]:bg-gray-100 border-y [&+*]:mt-1", children: props.title }), jsxRuntimeExports.jsx($e1995378a142960e$export$fb8073518f34e6ec, { items: props.items, children: props.children })] }));
}

function ComboBox({ label, description, errorMessage, children, items, ...props }) {
    return (jsxRuntimeExports.jsx($d01f2c01039c0eec$export$72b9695b8216309a, { ...props, className: composeTailwindRenderProps(props.className, "group flex flex-col gap-1"), onSelectionChange: (e) => {
            if (props.onSelectionChange) {
                const k = String(e);
                props.onSelectionChange(k);
            }
        }, children: jsxRuntimeExports.jsx(Popover, { activator: () => (jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [jsxRuntimeExports.jsx(Label, { children: label }), jsxRuntimeExports.jsxs(FieldGroup, { color: props.color, variant: props.variant, rounded: props.rounded, children: [jsxRuntimeExports.jsx(Input, {}), jsxRuntimeExports.jsx(Button, { variant: "icon", size: "sm", className: "mr-1", rounded: props.rounded === "full" ? "full" : "sm", children: jsxRuntimeExports.jsx(ChevronDown, { "aria-hidden": true, className: "w-4 h-4" }) })] }), description && jsxRuntimeExports.jsx(Description, { children: description }), jsxRuntimeExports.jsx(FieldError, { children: errorMessage })] })), className: "w-56", children: jsxRuntimeExports.jsx(ListBox, { items: items, color: props.color, selectionMode: "single", className: "border-0", children: children
                    ? children
                    : (e) => jsxRuntimeExports.jsx(ComboBoxItem, { children: e.title }, e.key) }) }) }));
}
function ComboBoxItem(props) {
    return jsxRuntimeExports.jsx(DropdownItem, { ...props });
}
function ComboBoxSection(props) {
    return jsxRuntimeExports.jsx(DropdownSection, { ...props });
}

function DateField({ label, description, errorMessage, ...props }) {
    return (jsxRuntimeExports.jsxs($40825cdb76e74f70$export$d9781c7894a82487, { ...props, className: composeTailwindRenderProps(props.className, "flex flex-col gap-1"), children: [label && jsxRuntimeExports.jsx(Label, { children: label }), jsxRuntimeExports.jsx(DateInput, { color: props.color, variant: props.variant, rounded: props.rounded }), description && jsxRuntimeExports.jsx(Description, { children: description }), jsxRuntimeExports.jsx(FieldError, { children: errorMessage })] }));
}
const segmentStyles = ce({
    base: "inline p-0.5 type-literal:px-0 rounded-xs outline outline-0 forced-color-adjust-none caret-transparent text-gray-800 forced-colors:text-[ButtonText]",
    variants: {
        isPlaceholder: {
            true: "text-gray-600 italic",
        },
        isDisabled: {
            true: "text-gray-200 forced-colors:text-[GrayText]",
        },
        isFocused: {
            true: "bg-[--textColor] text-white forced-colors:bg-[Highlight] forced-colors:text-[HighlightText]",
        },
        color: {
            default: "[--c:var(--hok-default-400)] [--textColor:hsl(var(--c))]",
            primary: "[--c:var(--hok-primary-400)] [--textColor:hsl(var(--c))]",
            secondary: "[--c:var(--hok-secondary-400)] [--textColor:hsl(var(--c))]",
            success: "[--c:var(--hok-success-400)] [--textColor:hsl(var(--c))]",
            danger: "[--c:var(--hok-danger-400)] [--textColor:hsl(var(--c))]",
            warning: "[--c:var(--hok-warning-400)] [--textColor:hsl(var(--c))]",
            info: "[--c:var(--hok-info-400)] [--textColor:hsl(var(--c))]",
        },
    },
    defaultVariants: {
        color: "default",
    },
});
function DateInput(props) {
    return (jsxRuntimeExports.jsx($40825cdb76e74f70$export$7edc06cf1783b30f, { className: (renderProps) => fieldGroupStyles({
            ...renderProps,
            class: "flex min-w-[150px] px-2 py-1.5 text-sm",
            rounded: props.rounded,
            color: props.color,
            variant: props.variant,
        }), ...props, children: (segment) => (jsxRuntimeExports.jsx($40825cdb76e74f70$export$336ab7fa954c4b5f, { segment: segment, className: (renderProps) => segmentStyles({
                ...renderProps,
                color: props.color,
            }) })) }));
}

function DatePicker({ label, description, errorMessage, ...props }) {
    return (jsxRuntimeExports.jsx($06d5b8ec9ee5d538$export$5109c6dd95d8fb00, { ...props, className: composeTailwindRenderProps(props.className, "group flex flex-col gap-1"), children: jsxRuntimeExports.jsx(Popover, { activator: () => (jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [label && jsxRuntimeExports.jsx(Label, { children: label }), jsxRuntimeExports.jsxs(FieldGroup, { color: props.color, rounded: props.rounded, variant: props.variant, className: "min-w-[208px] w-auto", children: [jsxRuntimeExports.jsx(DateInput, { color: props.color, className: "flex-1 min-w-[150px] px-2 py-1.5 text-sm" }), jsxRuntimeExports.jsx(Button, { variant: "icon", size: "sm", rounded: "sm", className: "mr-1", children: jsxRuntimeExports.jsx(Calendar$1, { "aria-hidden": true, className: "w-4 h-4" }) })] }), description && jsxRuntimeExports.jsx(Description, { children: description }), jsxRuntimeExports.jsx(FieldError, { children: errorMessage })] })), children: jsxRuntimeExports.jsx(Dialog, { children: jsxRuntimeExports.jsx(Calendar, { color: props.color }) }) }) }));
}

const cell = ce({
    extend: focusRing,
    base: "w-full h-full flex items-center justify-center rounded forced-color-adjust-none text-zinc-900",
    variants: {
        selectionState: {
            none: "group-hover:bg-gray-100 group-pressed:bg-gray-200",
            middle: [
                "group-hover:bg-[--hoverColor] forced-colors:group-hover:bg-[Highlight]",
                "group-invalid:group-hover:bg-red-200 forced-colors:group-invalid:group-hover:bg-[Mark]",
                "group-pressed:bg-[--pressedColor] forced-colors:group-pressed:bg-[Highlight] forced-colors:text-[HighlightText]",
                "group-invalid:group-pressed:bg-red-300 forced-colors:group-invalid:group-pressed:bg-[Mark]",
            ],
            cap: "bg-[--selectedColor] group-invalid:bg-red-600 forced-colors:bg-[Highlight] forced-colors:group-invalid:bg-[Mark] text-white forced-colors:text-[HighlightText]",
        },
        isDisabled: {
            true: "text-gray-300 forced-colors:text-[GrayText]",
        },
        color: {
            default: "[--c:var(--hok-default-400)] [--selectedColor:hsl(var(--c))] [--hoverColor:hsl(var(--c)/0.3)] [--pressedColor:hsl(var(--c)/0.5)] [--midColor:hsl(var(--c)/0.1)]",
            primary: "[--c:var(--hok-primary-400)] [--selectedColor:hsl(var(--c))] [--hoverColor:hsl(var(--c)/0.3)] [--pressedColor:hsl(var(--c)/0.5)] [--midColor:hsl(var(--c)/0.1)]",
            secondary: "[--c:var(--hok-secondary-500)] [--selectedColor:hsl(var(--c))] [--hoverColor:hsl(var(--c)/0.3)] [--pressedColor:hsl(var(--c)/0.5)] [--midColor:hsl(var(--c)/0.1)]",
            success: "[--c:var(--hok-success-500)] [--selectedColor:hsl(var(--c))] [--hoverColor:hsl(var(--c)/0.3)] [--pressedColor:hsl(var(--c)/0.5)] [--midColor:hsl(var(--c)/0.1)]",
            danger: "[--c:var(--hok-danger-500)] [--selectedColor:hsl(var(--c))] [--hoverColor:hsl(var(--c)/0.3)] [--pressedColor:hsl(var(--c)/0.5)] [--midColor:hsl(var(--c)/0.1)]",
            warning: "[--c:var(--hok-warning-500)] [--selectedColor:hsl(var(--c))] [--hoverColor:hsl(var(--c)/0.3)] [--pressedColor:hsl(var(--c)/0.5)] [--midColor:hsl(var(--c)/0.1)]",
            info: "[--c:var(--hok-info-500)] [--selectedColor:hsl(var(--c))] [--hoverColor:hsl(var(--c)/0.3)] [--pressedColor:hsl(var(--c)/0.5)] [--midColor:hsl(var(--c)/0.1)]",
        },
    },
    defaultVariants: {
        color: "default",
    },
});
const calendarCell = ce({
    base: "group w-9 h-9 text-sm outline outline-0 cursor-default outside-month:text-gray-300 selected:bg-[--midColor] forced-colors:selected:bg-[Highlight] invalid:selected:bg-red-100 forced-colors:invalid:selected:bg-[Mark] [td:first-child_&]:rounded-s selection-start:rounded-s [td:last-child_&]:rounded-e selection-end:rounded-e",
    variants: {
        color: {
            default: "[--c:var(--hok-default-400)] [--midColor:hsl(var(--c)/0.2)]",
            primary: "[--c:var(--hok-primary-400)] [--midColor:hsl(var(--c)/0.2)]",
            secondary: "[--c:var(--hok-secondary-500)] [--midColor:hsl(var(--c)/0.2)]",
            success: "[--c:var(--hok-success-500)] [--midColor:hsl(var(--c)/0.2)]",
            danger: "[--c:var(--hok-danger-500)] [--midColor:hsl(var(--c)/0.2)]",
            warning: "[--c:var(--hok-warning-500)] [--midColor:hsl(var(--c)/0.2)]",
            info: "[--c:var(--hok-info-500)] [--midColor:hsl(var(--c)/0.2)]",
        },
    },
    defaultVariants: {
        color: "default",
    },
});
function RangeCalendar({ errorMessage, ...props }) {
    return (jsxRuntimeExports.jsxs($dfd62f934fc76fed$export$a4f5c8b89d277a8d, { ...props, children: [jsxRuntimeExports.jsx(CalendarHeader, {}), jsxRuntimeExports.jsxs($dfd62f934fc76fed$export$5bd780d491cfc46c, { className: "[&_td]:px-0", children: [jsxRuntimeExports.jsx(CalendarGridHeader, {}), jsxRuntimeExports.jsx($dfd62f934fc76fed$export$e11f8ba65d857bff, { children: (date) => (jsxRuntimeExports.jsx($dfd62f934fc76fed$export$5d847498420df57b, { date: date, className: () => calendarCell({ color: props.color }), children: ({ formattedDate, isSelected, isSelectionStart, isSelectionEnd, isFocusVisible, isDisabled, }) => (jsxRuntimeExports.jsx("span", { className: cell({
                                    selectionState: isSelected && (isSelectionStart || isSelectionEnd)
                                        ? "cap"
                                        : isSelected
                                            ? "middle"
                                            : "none",
                                    isDisabled,
                                    isFocusVisible,
                                    color: props.color,
                                }), children: formattedDate })) })) })] }), errorMessage && (jsxRuntimeExports.jsx($514c0188e459b4c0$export$5f1af8db9871e1d6, { slot: "errorMessage", className: "text-sm text-red-600", children: errorMessage }))] }));
}

function DateRangePicker({ label, description, errorMessage, ...props }) {
    return (jsxRuntimeExports.jsx($06d5b8ec9ee5d538$export$17334619f3ac2224, { ...props, className: composeTailwindRenderProps(props.className, "group flex flex-col gap-1"), children: jsxRuntimeExports.jsx(Popover, { activator: () => (jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [label && jsxRuntimeExports.jsx(Label, { children: label }), jsxRuntimeExports.jsxs(FieldGroup, { color: props.color, rounded: props.rounded, variant: props.variant, className: "min-w-[208px] w-auto", children: [jsxRuntimeExports.jsx(DateInput, { color: props.color, slot: "start", className: "px-2 py-1.5 text-sm" }), jsxRuntimeExports.jsx("span", { "aria-hidden": "true", className: "text-gray-800 forced-colors:text-[ButtonText] group-disabled:text-gray-200 group-disabled:dark:text-zinc-600 group-disabled:forced-colors:text-[GrayText]", children: "~" }), jsxRuntimeExports.jsx(DateInput, { color: props.color, slot: "end", className: "flex-1 px-2 py-1.5 text-sm" }), jsxRuntimeExports.jsx(Button, { variant: "icon", size: "sm", rounded: "sm", className: "mr-1", children: jsxRuntimeExports.jsx(Calendar$1, { "aria-hidden": true, className: "w-4 h-4" }) })] }), description && jsxRuntimeExports.jsx(Description, { children: description }), jsxRuntimeExports.jsx(FieldError, { children: errorMessage })] })), children: jsxRuntimeExports.jsx(Dialog, { children: jsxRuntimeExports.jsx(RangeCalendar, { color: props.color }) }) }) }));
}

function Form(props) {
    return jsxRuntimeExports.jsx($d3e0e05bdfcf66bd$export$a7fed597f4b8afd8, { ...props, className: twMerge('flex flex-col gap-4', props.className) });
}

const GridContext = reactExports.createContext({
    color: "default",
    allowDragandDrop: false,
});
function GridList(props) {
    const { dragAndDropHooks } = $d8f176866e6dc039$export$2cfc5be7a55829f6({
        isDisabled: !Boolean(props.allowDragandDrop),
        getItems: (keys) => Array.from(keys).map((key) => ({
            "text/plain": props.items?.getItem(key).title ?? "",
        })),
        onReorder: (e) => {
            if (props.items) {
                if (e.target.dropPosition === "before") {
                    props.items.moveBefore(e.target.key, e.keys);
                }
                else if (e.target.dropPosition === "after") {
                    props.items.moveAfter(e.target.key, e.keys);
                }
            }
        },
        renderDragPreview: (items) => {
            if (items[0]) {
                if (items.length === 1) {
                    return (jsxRuntimeExports.jsxs("div", { className: "w-28 h-10 flex flex-row items-center gap-2 bg-white p-2 rounded", children: [jsxRuntimeExports.jsx("span", { className: "w-2/3 overflow-hidden text-ellipsis", children: items[0]["text/plain"] }), jsxRuntimeExports.jsx("div", { className: "w-6 h-6 rounded-sm bg-default-200 text-center", children: items.length })] }));
                }
                return (jsxRuntimeExports.jsxs("div", { className: "relative w-32 h-20", children: [jsxRuntimeExports.jsx("div", { className: "w-28 h-10 bg-white drop-shadow-lg absolute z-[1] rounded overflow-hidden translate-x-1/4 translate-y-1/2", children: jsxRuntimeExports.jsxs("div", { className: "flex flex-row items-center gap-2 bg-white p-2", children: [jsxRuntimeExports.jsx("span", { className: "w-2/3 overflow-hidden text-ellipsis", children: items[0]["text/plain"] }), jsxRuntimeExports.jsx("div", { className: "w-6 h-6 rounded-sm bg-default-200 text-center", children: items.length })] }) }), jsxRuntimeExports.jsx("div", { className: "w-28 h-10 bg-white absolute top-[0.3rem] left-[0.3rem] rounded-lg translate-x-1/4 translate-y-1/2" })] }));
            }
            return jsxRuntimeExports.jsx("div", {});
        },
    });
    return (jsxRuntimeExports.jsx(GridContext.Provider, { value: {
            color: props.color,
            allowDragandDrop: props.allowDragandDrop,
        }, children: props.items && (jsxRuntimeExports.jsx($72e60046c03fbe42$export$a7bfbda1311ca015, { ...props, items: props.items.items, dragAndDropHooks: dragAndDropHooks, onSelectionChange: (e) => props.onSelect
                ? props.onSelect(Array.from(e).map((f) => String(f)))
                : undefined, className: composeTailwindRenderProps(props.className, "overflow-auto relative border rounded"), children: props.children
                ? props.children
                : (item) => (jsxRuntimeExports.jsx(GridListItem, { children: item.title }, item.key)) })) }));
}
const itemStyles = ce({
    extend: focusRing,
    base: "relative flex gap-3 cursor-default select-none py-2 px-3 text-sm text-gray-900 border-y border-transparent first:border-t-0 last:border-b-0 first:rounded-t-md last:rounded-b-md -mb-px last:mb-0 -outline-offset-2 transition-colors",
    variants: {
        isSelected: {
            false: "hover:bg-[--bgUnselectedHover]",
            true: "bg-[--bg] hover:bg-[--bgHover] border-y-[--bgHover] z-20",
        },
        isDisabled: {
            true: "text-slate-300 forced-colors:text-[GrayText] z-10",
        },
        color: {
            default: "[--bg:hsl(var(--hok-default-200))] [--bgHover:hsl(var(--hok-default-300))] [--bgUnselectedHover:hsl(var(--hok-default-100))]",
            primary: "[--bg:hsl(var(--hok-primary-100))] [--bgHover:hsl(var(--hok-primary-200))] [--bgUnselectedHover:hsl(var(--hok-primary-50))]",
            secondary: "[--bg:hsl(var(--hok-secondary-200))] [--bgHover:hsl(var(--hok-secondary-300))] [--bgUnselectedHover:hsl(var(--hok-secondary-100))]",
            success: "[--bg:hsl(var(--hok-success-300))] [--bgHover:hsl(var(--hok-success-400))] [--bgUnselectedHover:hsl(var(--hok-success-200))]",
            danger: "[--bg:hsl(var(--hok-danger-300))] [--bgHover:hsl(var(--hok-danger-400))] [--bgUnselectedHover:hsl(var(--hok-danger-200))]",
            warning: "[--bg:hsl(var(--hok-warning-300))] [--bgHover:hsl(var(--hok-warning-400))] [--bgUnselectedHover:hsl(var(--hok-warning-200))]",
            info: "[--bg:hsl(var(--hok-info-200))] [--bgHover:hsl(var(--hok-info-300))] [--bgUnselectedHover:hsl(var(--hok-info-100))]",
        },
    },
    defaultVariants: {
        color: "default",
    },
});
function GridListItem({ children, ...props }) {
    let textValue = typeof children === "string" ? children : undefined;
    const gridContext = reactExports.useContext(GridContext);
    return (jsxRuntimeExports.jsx($72e60046c03fbe42$export$e96fc9a8407faa6b, { ...props, textValue: textValue, className: (renderProps) => itemStyles({
            ...renderProps,
            color: gridContext.color,
        }), children: ({ selectionMode, selectionBehavior, allowsDragging }) => (jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [Boolean(gridContext.allowDragandDrop && allowsDragging) ? (jsxRuntimeExports.jsx($d2b4bc8c273e7be6$export$353f5b6fc5456de1, { slot: "drag", children: jsxRuntimeExports.jsx(GripVertical, { "aria-hidden": true, className: "w-4 h-4 text-gray-600" }) })) : (jsxRuntimeExports.jsx($d2b4bc8c273e7be6$export$353f5b6fc5456de1, { slot: "drag", className: "hidden" })), selectionMode === "multiple" && selectionBehavior === "toggle" && (jsxRuntimeExports.jsx(Checkbox, { slot: "selection", color: gridContext.color })), children] })) }));
}

function Menu(props) {
    return (jsxRuntimeExports.jsx($3674c52c6b3c5bce$export$27d2ad3c5815583e, { children: jsxRuntimeExports.jsx(Popover, { showArrow: true, label: props.label, activator: props.activator, placement: props.placement, className: "min-w-[150px]", children: jsxRuntimeExports.jsx($3674c52c6b3c5bce$export$d9b273488cd8ce6f, { ...props, className: "outline outline-0 max-h-[inherit] overflow-auto [clip-path:inset(0_0_0_0_round_.5rem)]", children: props.children
                    ? props.children
                    : (e) => jsxRuntimeExports.jsx(MenuItem, { children: e.title }, e.key) }) }) }));
}
function MenuItem(props) {
    return (jsxRuntimeExports.jsx($3674c52c6b3c5bce$export$2ce376c2cc3355c8, { ...props, className: dropdownItemStyles, children: $64fa3d84918910a7$export$c245e6201fed2f75(props.children, (children, { selectionMode, isSelected, hasSubmenu }) => (jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [selectionMode !== "none" && (jsxRuntimeExports.jsx("span", { className: "flex items-center w-4", children: isSelected && jsxRuntimeExports.jsx(Check, { "aria-hidden": true, className: "w-4 h-4" }) })), jsxRuntimeExports.jsx("span", { className: "flex items-center flex-1 gap-2 font-normal truncate group-selected:font-semibold", children: children }), hasSubmenu && (jsxRuntimeExports.jsx(ChevronRight, { "aria-hidden": true, className: "absolute w-4 h-4 right-2" }))] }))) }));
}
function MenuSeparator(props) {
    return (jsxRuntimeExports.jsx($431f98aba6844401$export$1ff3c3f08ae963c0, { ...props, className: "mx-3 my-1 border-b border-gray-300" }));
}
function MenuSection(props) {
    return jsxRuntimeExports.jsx(DropdownSection, { ...props });
}

function Meter({ label, ...props }) {
    return (jsxRuntimeExports.jsx($c0c9ced265f3594c$export$62e3ae2a4090b879, { ...props, className: composeTailwindRenderProps(props.className, "flex flex-col gap-1"), children: ({ percentage, valueText }) => (jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [jsxRuntimeExports.jsxs("div", { className: "flex justify-between gap-2", children: [jsxRuntimeExports.jsx(Label, { children: label }), jsxRuntimeExports.jsxs("span", { className: `text-sm ${percentage >= 80 ? "text-red-600" : "text-gray-600"}`, children: [percentage >= 80 && (jsxRuntimeExports.jsx(TriangleAlert, { "aria-label": "Alert", className: "inline-block w-4 h-4 align-text-bottom" })), " " + valueText] })] }), jsxRuntimeExports.jsx("div", { className: "w-64 h-2 rounded-full bg-gray-300 outline outline-1 -outline-offset-1 outline-transparent relative", children: jsxRuntimeExports.jsx("div", { className: `absolute top-0 left-0 h-full rounded-full ${getColor(percentage)} forced-colors:bg-[Highlight]`, style: { width: percentage + "%" } }) })] })) }));
}
function getColor(percentage) {
    if (percentage < 70) {
        return "bg-green-600";
    }
    if (percentage < 80) {
        return "bg-orange-500";
    }
    return "bg-red-600";
}

const useSlots = (componentChildren) => {
    const slots = reactExports.useMemo(() => {
        var _a;
        let children = componentChildren;
        if ((componentChildren === null || componentChildren === void 0 ? void 0 : componentChildren.type) === React.Fragment) {
            children = componentChildren.props.children;
        }
        children = Array.isArray(children) ? children : [children];
        const collector = {
            general: [],
        };
        for (const child of children) {
            const slotName = ((_a = child === null || child === void 0 ? void 0 : child.props) === null || _a === void 0 ? void 0 : _a.slot) || "general";
            if (!collector[slotName]) {
                collector[slotName] = [];
            }
            collector[slotName].push(child);
        }
        return collector;
    }, [componentChildren]);
    const slot = (name = "", defaultChildren = []) => {
        var _a;
        const children = !name ? slots.general : (_a = slots[name]) !== null && _a !== void 0 ? _a : defaultChildren;
        return React.createElement(React.Fragment, {}, children);
    };
    const hasSlotFunction = (slot) => {
        return slots.hasOwnProperty(slot) && slots[slot].length > 0;
    };
    return [slot, hasSlotFunction];
};

const overlayStyles = ce({
    base: "fixed top-0 left-0 w-full h-[--visual-viewport-height] isolate z-20 bg-black/[15%] flex items-center justify-center p-4 text-center backdrop-blur-lg",
    variants: {
        isEntering: {
            true: "animate-in fade-in duration-200 ease-out",
        },
        isExiting: {
            true: "animate-out fade-out duration-200 ease-in",
        },
    },
});
const modalStyles = ce({
    base: "max-w-6xl max-h-full rounded-2xl bg-white forced-colors:bg-[Canvas] text-left align-middle text-slate-700 shadow-2xl bg-clip-padding border border-black/10",
    variants: {
        isEntering: {
            true: "animate-in zoom-in-105 ease-out duration-200",
        },
        isExiting: {
            true: "animate-out zoom-out-95 ease-in duration-200",
        },
        size: {
            xs: "w-[20vw]",
            sm: "w-[35vw]",
            md: "w-[50vw]",
            lg: "w-[65vw]",
            xl: "w-[80vw]",
        },
    },
    defaultVariants: {
        size: "md",
    },
});
function RenderSlot(props, slotName, element) {
    const [slot, hasSlot] = useSlots(props.children);
    if (slotName && element) {
        if (hasSlot(slotName)) {
            return slot(slotName);
        }
        return element();
    }
    return slot();
}
function Modal(props) {
    const handleCLickCancel = () => {
        if (props.onCancel) {
            props.onCancel();
        }
    };
    const handleCLickOk = () => {
        if (props.onOk) {
            props.onOk();
        }
    };
    return (jsxRuntimeExports.jsx($f3f84453ead64de5$export$8948f78d83984c69, { ...props, className: overlayStyles, children: jsxRuntimeExports.jsx($f3f84453ead64de5$export$2b77a92f1a5ad772, { ...props, className: (renderProps) => modalStyles({ ...renderProps, size: props.size }), children: jsxRuntimeExports.jsxs("div", { className: "flex flex-col gap-4 p-4", children: [RenderSlot(props, "header-content", () => (jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, { children: props.title && (jsxRuntimeExports.jsx("span", { className: "font-semibold text-lg", children: props.title })) }))), jsxRuntimeExports.jsx("div", { className: "max-h-[75vh] overflow-y-auto overflow-x-hidden", children: RenderSlot(props) }), RenderSlot(props, "bottom-content", () => (jsxRuntimeExports.jsxs("div", { className: "flex flex-row justify-end gap-2", children: [jsxRuntimeExports.jsx(Button, { color: "danger", variant: "text", onPress: handleCLickCancel, children: "\u0E22\u0E01\u0E40\u0E25\u0E34\u0E01" }), jsxRuntimeExports.jsx(Button, { color: "primary", variant: "default", onPress: handleCLickOk, children: "\u0E15\u0E01\u0E25\u0E07" })] })))] }) }) }));
}

function NumberField({ label, description, errorMessage, ...props }) {
    return (jsxRuntimeExports.jsxs($b91743d66a0ed188$export$63c5fa0b2fdccd2e, { ...props, className: composeTailwindRenderProps(props.className, "group flex flex-col gap-1"), children: [jsxRuntimeExports.jsxs(Label, { children: [label, props.isRequired && jsxRuntimeExports.jsx("span", { className: "text-danger", children: "*" })] }), jsxRuntimeExports.jsx(FieldGroup, { color: props.color, rounded: props.rounded, variant: props.variant, children: (renderProps) => (jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [jsxRuntimeExports.jsx(Input, {}), !!!props.hideSpinButton && (jsxRuntimeExports.jsxs("div", { className: fieldBorderStyles({
                                ...renderProps,
                                class: "flex flex-col border-s-2",
                                rounded: "none",
                                variant: "underlined",
                                color: props.color,
                            }), children: [jsxRuntimeExports.jsx(StepperButton, { slot: "increment", children: jsxRuntimeExports.jsx(ChevronUp, { "aria-hidden": true, className: "w-4 h-4" }) }), jsxRuntimeExports.jsx("div", { className: fieldBorderStyles({
                                        ...renderProps,
                                        class: "border-b-2",
                                        rounded: "none",
                                        variant: "underlined",
                                        color: props.color,
                                    }) }), jsxRuntimeExports.jsx(StepperButton, { slot: "decrement", children: jsxRuntimeExports.jsx(ChevronDown, { "aria-hidden": true, className: "w-4 h-4" }) })] }))] })) }), description && jsxRuntimeExports.jsx(Description, { children: description }), jsxRuntimeExports.jsx(FieldError, { children: errorMessage })] }));
}
function StepperButton(props) {
    return (jsxRuntimeExports.jsx($d2b4bc8c273e7be6$export$353f5b6fc5456de1, { ...props, className: "px-0.5 cursor-default text-gray-500 pressed:bg-gray-100 group-disabled:text-gray-200 forced-colors:group-disabled:text-[GrayText]" }));
}

function ProgressBar({ label, ...props }) {
    return (jsxRuntimeExports.jsx($0393f8ab869a0f1a$export$c17561cb55d4db30, { ...props, className: composeTailwindRenderProps(props.className, "flex flex-col gap-1"), children: ({ percentage, valueText, isIndeterminate }) => (jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [jsxRuntimeExports.jsxs("div", { className: "flex justify-between gap-2", children: [jsxRuntimeExports.jsx(Label, { children: label }), jsxRuntimeExports.jsx("span", { className: "text-sm text-gray-600 dark:text-zinc-400", children: valueText })] }), jsxRuntimeExports.jsx("div", { className: "w-64 h-2 rounded-full bg-gray-300 dark:bg-zinc-700 outline outline-1 -outline-offset-1 outline-transparent relative overflow-hidden", children: jsxRuntimeExports.jsx("div", { className: `absolute top-0 h-full rounded-full bg-blue-600 dark:bg-blue-500 forced-colors:bg-[Highlight] ${isIndeterminate
                            ? "left-full animate-in duration-1000 [--tw-enter-translate-x:calc(-16rem-100%)] slide-out-to-right-full repeat-infinite ease-out"
                            : "left-0"}`, style: { width: (isIndeterminate ? 40 : percentage) + "%" } }) })] })) }));
}

function RadioGroup(props) {
    return (jsxRuntimeExports.jsxs($b6c3ddc6086f204d$export$a98f0dcb43a68a25, { ...props, className: composeTailwindRenderProps(props.className, "group flex flex-col gap-2"), children: [jsxRuntimeExports.jsx(Label, { children: props.label }), jsxRuntimeExports.jsx("div", { className: "flex group-orientation-vertical:flex-col gap-2 group-orientation-horizontal:gap-4", children: props.options.map((e) => props.children ? (props.children(e)) : (jsxRuntimeExports.jsx(Radio, { value: e.value, color: props.color, children: e.title }, e.value))) }), props.description && jsxRuntimeExports.jsx(Description, { children: props.description }), jsxRuntimeExports.jsx(FieldError, { children: props.errorMessage })] }));
}
const styles$4 = ce({
    extend: focusRing,
    base: "w-5 h-5 rounded-full border-2 bg-white transition-all cursor-pointer",
    variants: {
        isSelected: {
            false: "border-[--borderUnselected] group-pressed:border-[--borderUnselectedPressed]",
            true: "border-[7px] border-[--border] forced-colors:!border-[Highlight] group-pressed:border-[--borderPressed]",
        },
        isInvalid: {
            true: "border-red-700 group-pressed:border-red-800 forced-colors:!border-[Mark]",
        },
        isDisabled: {
            true: "border-gray-200 forced-colors:!border-[GrayText]",
        },
        color: {
            default: "[--borderUnselected:hsl(var(--hok-default-300))] [--borderUnselectedPressed:hsl(var(--hok-default-400))] [--border:hsl(var(--hok-default-400))] [--borderPressed:hsl(var(--hok-default-600))]",
            primary: "[--borderUnselected:hsl(var(--hok-primary-300))] [--borderUnselectedPressed:hsl(var(--hok-primary-400))] [--border:hsl(var(--hok-primary-400))] [--borderPressed:hsl(var(--hok-primary-600))]",
            secondary: "[--borderUnselected:hsl(var(--hok-secondary-400))] [--borderUnselectedPressed:hsl(var(--hok-secondary-500))] [--border:hsl(var(--hok-secondary-500))] [--borderPressed:hsl(var(--hok-secondary-700))]",
            success: "[--borderUnselected:hsl(var(--hok-success-400))] [--borderUnselectedPressed:hsl(var(--hok-success-500))] [--border:hsl(var(--hok-success-500))] [--borderPressed:hsl(var(--hok-success-600))]",
            danger: "[--borderUnselected:hsl(var(--hok-danger-400))] [--borderUnselectedPressed:hsl(var(--hok-danger-500))] [--border:hsl(var(--hok-danger-500))] [--borderPressed:hsl(var(--hok-danger-600))]",
            warning: "[--borderUnselected:hsl(var(--hok-warning-400))] [--borderUnselectedPressed:hsl(var(--hok-warning-500))] [--border:hsl(var(--hok-warning-500))] [--borderPressed:hsl(var(--hok-warning-600))]",
            info: "[--borderUnselected:hsl(var(--hok-info-200))] [--borderUnselectedPressed:hsl(var(--hok-info-400))] [--border:hsl(var(--hok-info-400))] [--borderPressed:hsl(var(--hok-info-500))]",
        },
    },
    defaultVariants: {
        color: "default",
    },
});
function Radio(props) {
    return (jsxRuntimeExports.jsx($b6c3ddc6086f204d$export$d7b12c4107be0d61, { ...props, className: composeTailwindRenderProps(props.className, "flex gap-2 items-center group text-gray-800 disabled:text-gray-300 forced-colors:disabled:text-[GrayText] text-sm transition"), children: (renderProps) => (jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [jsxRuntimeExports.jsx("div", { className: styles$4({ ...renderProps, color: props.color }) }), props.children] })) }));
}

function SearchField({ label, description, errorMessage, ...props }) {
    return (jsxRuntimeExports.jsxs($440f4836bcb56932$export$b94867ecbd698f21, { ...props, className: composeTailwindRenderProps(props.className, "group flex flex-col gap-1 min-w-[40px]"), children: [label && jsxRuntimeExports.jsx(Label, { children: label }), jsxRuntimeExports.jsxs(FieldGroup, { variant: props.variant, rounded: props.rounded, color: props.color, children: [jsxRuntimeExports.jsx(Search, { "aria-hidden": true, className: "w-4 h-4 ml-2 text-primary forced-colors:text-[ButtonText] group-disabled:text-gray-200 forced-colors:group-disabled:text-[GrayText]" }), jsxRuntimeExports.jsx(Input, { className: "[&::-webkit-search-cancel-button]:hidden" }), jsxRuntimeExports.jsx(Button, { variant: "icon", className: "mr-1 w-6 group-empty:invisible", children: jsxRuntimeExports.jsx(X, { "aria-hidden": true, className: "w-4 h-4" }) })] }), description && jsxRuntimeExports.jsx(Description, { children: description }), jsxRuntimeExports.jsx(FieldError, { children: errorMessage })] }));
}

const styles$3 = ce({
    extend: focusRing,
    base: "flex items-center text-start gap-4 w-full cursor-default border border-black/10 shadow-[inset_0_1px_0_0_rgba(255,255,255,0.1)] pl-3 pr-2 py-2 min-w-[150px] transition bg-gray-50",
    variants: {
        isDisabled: {
            false: "text-gray-800",
            true: "text-gray-200 forced-colors:text-[GrayText] forced-colors:border-[GrayText]",
        },
        rounded: {
            none: "rounded-none",
            sm: "rounded-sm",
            md: "rounded-md",
            lg: "rounded-lg",
            xl: "rounded-xl",
            full: "rounded-full",
        },
        color: {
            default: "[--c:var(--hok-default-500)] [--bgColor:hsl(var(--c)/0.1)] [--bgColorHover:hsl(var(--c)/0.2)] [--bgColorPressed:hsl(var(--c)/0.3)]",
            primary: "[--c:var(--hok-primary-500)] [--bgColor:hsl(var(--c)/0.1)] [--bgColorHover:hsl(var(--c)/0.2)] [--bgColorPressed:hsl(var(--c)/0.3)]",
            secondary: "[--c:var(--hok-secondary-500)] [--bgColor:hsl(var(--c)/0.1)] [--bgColorHover:hsl(var(--c)/0.2)] [--bgColorPressed:hsl(var(--c)/0.3)]",
            success: "[--c:var(--hok-success-500)] [--bgColor:hsl(var(--c)/0.1)] [--bgColorHover:hsl(var(--c)/0.2)] [--bgColorPressed:hsl(var(--c)/0.3)]",
            danger: "[--c:var(--hok-danger-500)] [--bgColor:hsl(var(--c)/0.1)] [--bgColorHover:hsl(var(--c)/0.2)] [--bgColorPressed:hsl(var(--c)/0.3)]",
            warning: "[--c:var(--hok-warning-500)] [--bgColor:hsl(var(--c)/0.4)] [--bgColorHover:hsl(var(--c)/0.2)] [--bgColorPressed:hsl(var(--c)/0.3)]",
            info: "[--c:var(--hok-warning-500)] [--bgColor:hsl(var(--c)/0.4)] [--bgColorHover:hsl(var(--c)/0.2)] [--bgColorPressed:hsl(var(--c)/0.3)]",
        },
        variant: {
            bordered: "bg-transparent border-2 border-[--bgColor] hover:border-[--bgColorPressed] pressed:border-[hsl(var(--c))]",
            underlined: "",
            flat: "bg-[--bgColor] hover:bg-[--bgColorHover] pressed:bg-[--bgColorPressed] group-invalid:border-red-600 forced-colors:group-invalid:border-[Mark]",
        },
    },
    defaultVariants: {
        rounded: "md",
        color: "default",
        variant: "bordered",
    },
});
function Select({ label, description, errorMessage, children, items, ...props }) {
    return (jsxRuntimeExports.jsxs($82d7e5349645de74$export$ef9b1a59e592288f, { ...props, onSelectionChange: (e) => {
            const i = items;
            const f = i.findLast((j) => j.key === e);
            if (props.onSelect && f) {
                props.onSelect(f);
            }
        }, className: composeTailwindRenderProps(props.className, "group flex flex-col gap-1"), children: [label && jsxRuntimeExports.jsx(Label, { children: label }), jsxRuntimeExports.jsx(Popover, { activator: () => (jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [jsxRuntimeExports.jsxs($d2b4bc8c273e7be6$export$353f5b6fc5456de1, { className: (renderProps) => styles$3({
                                ...renderProps,
                                rounded: props.rounded,
                                color: props.color,
                                variant: props.variant,
                            }), children: [jsxRuntimeExports.jsx($82d7e5349645de74$export$e288731fd71264f0, { className: "flex-1 text-sm placeholder-shown:italic" }), jsxRuntimeExports.jsx(ChevronDown, { "aria-hidden": true, className: "w-4 h-4 text-gray-600 forced-colors:text-[ButtonText] group-disabled:text-gray-200 forced-colors:group-disabled:text-[GrayText]" })] }), description && jsxRuntimeExports.jsx(Description, { children: description }), jsxRuntimeExports.jsx(FieldError, { children: errorMessage })] })), className: "min-w-[--trigger-width]", children: jsxRuntimeExports.jsx($eed445e0843c11d0$export$41f133550aa26f48, { items: items, className: "outline-none p-1 max-h-[inherit] overflow-auto [clip-path:inset(0_0_0_0_round_.75rem)]", children: children }) })] }));
}
function SelectItem(props) {
    return jsxRuntimeExports.jsx(DropdownItem, { ...props });
}
function SelectSection(props) {
    return jsxRuntimeExports.jsx(DropdownSection, { ...props });
}

const styles$2 = ce({
    base: "bg-gray-300 forced-colors:bg-[ButtonBorder]",
    variants: {
        orientation: {
            horizontal: "h-px w-full",
            vertical: "w-px",
        },
    },
    defaultVariants: {
        orientation: "horizontal",
    },
});
function Separator(props) {
    return (jsxRuntimeExports.jsx($431f98aba6844401$export$1ff3c3f08ae963c0, { ...props, className: styles$2({
            orientation: props.orientation,
            className: props.className,
        }) }));
}

const trackStyles = ce({
    base: "rounded-full",
    variants: {
        orientation: {
            horizontal: "w-full h-[6px]",
            vertical: "h-full w-[6px] ml-[50%] -translate-x-[50%]",
        },
        isDisabled: {
            false: "bg-gray-300 forced-colors:bg-[ButtonBorder]",
            true: "bg-gray-200 forced-colors:bg-[GrayText]",
        },
    },
});
const trackValueStyles = ce({
    base: "absolute h-2 top-[50%] translate-y-[-50%] rounded-full",
    variants: {
        orientation: {
            horizontal: "w-full h-[6px]",
            vertical: "h-full w-[6px] ml-[50%] -translate-x-[50%]",
        },
        isDisabled: {
            false: "bg-[--bg] forced-colors:bg-[ButtonBorder]",
            true: "bg-[--bgDisabled] forced-colors:bg-[GrayText]",
        },
        color: {
            default: "[--bg:hsl(var(--hok-default-500))] [--bgDisabled:hsl(var(--hok-default-300))]",
            primary: "[--bg:hsl(var(--hok-primary-400))] [--bgDisabled:hsl(var(--hok-primary-100))]",
            secondary: "[--bg:hsl(var(--hok-secondary-500))] [--bgDisabled:hsl(var(--hok-secondary-100))]",
            success: "[--bg:hsl(var(--hok-success-500))] [--bgDisabled:hsl(var(--hok-success-400))]",
            danger: "[--bg:hsl(var(--hok-danger-500))] [--bgDisabled:hsl(var(--hok-danger-400))]",
            warning: "[--bg:hsl(var(--hok-warning-500))] [--bgDisabled:hsl(var(--hok-warning-400))]",
            info: "[--bg:hsl(var(--hok-info-400))] [--bgDisabled:hsl(var(--hok-info-200))]",
        },
    },
    defaultVariants: {
        color: "default",
    },
});
const thumbStyles = ce({
    extend: focusRing,
    base: "border-[--bg] bg-gray-50 w-6 h-6 group-orientation-horizontal:mt-6 group-orientation-vertical:ml-3 rounded-full border-2 transition-colors",
    variants: {
        isDragging: {
            true: "bg-[--bg] forced-colors:bg-[ButtonBorder]",
        },
        isDisabled: {
            true: "border-[--borderDisabled] forced-colors:border-[GrayText] cursor-not-allowed",
            false: "cursor-pointer",
        },
        color: {
            default: "[--bg:hsl(var(--hok-default-500))] [--borderDisabled:hsl(var(--hok-default-300))]",
            primary: "[--bg:hsl(var(--hok-primary-400))] [--borderDisabled:hsl(var(--hok-primary-100))]",
            secondary: "[--bg:hsl(var(--hok-secondary-500))] [--borderDisabled:hsl(var(--hok-secondary-100))]",
            success: "[--bg:hsl(var(--hok-success-500))] [--borderDisabled:hsl(var(--hok-success-400))]",
            danger: "[--bg:hsl(var(--hok-danger-500))] [--borderDisabled:hsl(var(--hok-danger-400))]",
            warning: "[--bg:hsl(var(--hok-warning-500))] [--borderDisabled:hsl(var(--hok-warning-400))]",
            info: "[--bg:hsl(var(--hok-info-400))] [--borderDisabled:hsl(var(--hok-info-200))]",
        },
    },
    defaultVariants: {
        color: "default",
    },
});
function Slider({ label, thumbLabels, ...props }) {
    return (jsxRuntimeExports.jsxs($6f909507e6374d18$export$472062a354075cee, { ...props, className: composeTailwindRenderProps(props.className, "orientation-horizontal:grid orientation-vertical:flex grid-cols-[1fr_auto] flex-col items-center gap-2 orientation-horizontal:w-64"), children: [jsxRuntimeExports.jsx(Label, { children: label }), jsxRuntimeExports.jsx($6f909507e6374d18$export$a590f758a961cb5b, { className: "text-sm text-gray-500 font-medium orientation-vertical:hidden", children: ({ state }) => state.values.map((_, i) => state.getThumbValueLabel(i)).join(" – ") }), jsxRuntimeExports.jsx($6f909507e6374d18$export$105594979f116971, { className: "group col-span-2 orientation-horizontal:h-6 orientation-vertical:w-6 orientation-vertical:h-64 flex items-center", children: ({ state, ...renderProps }) => (jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [jsxRuntimeExports.jsx("div", { className: trackStyles(renderProps) }), jsxRuntimeExports.jsx("div", { className: trackValueStyles({
                                ...renderProps,
                                color: props.color,
                            }), style: { width: state.getThumbPercent(0) * 100 + "%" } }), state.values.map((_, i) => (jsxRuntimeExports.jsx($6f909507e6374d18$export$2c1b491743890dec, { index: i, "aria-label": thumbLabels?.[i], className: (renderProps) => thumbStyles({ ...renderProps, color: props.color }) }, i)))] })) })] }));
}

const track = ce({
    extend: focusRing,
    base: "flex h-7 w-12 px-px items-center shrink-0 cursor-default rounded-full transition duration-200 ease-in-out shadow-inner border border-transparent",
    variants: {
        isSelected: {
            false: "bg-gray-300 group-pressed:bg-gray-400",
            true: "bg-[--bgSelected] forced-colors:!bg-[Highlight] group-pressed:bg-[--bgSelectedPressed]",
        },
        isDisabled: {
            true: "bg-gray-200 forced-colors:group-selected:!bg-[GrayText] forced-colors:border-[GrayText] cursor-not-allowed",
            false: "cursor-pointer",
        },
        color: {
            default: "[--bgSelected:hsl(var(--hok-default-400))] [--bgSelectedPressed:hsl(var(--hok-default-500))]",
            primary: "[--bgSelected:hsl(var(--hok-primary-400))] [--bgSelectedPressed:hsl(var(--hok-primary-500))]",
            secondary: "[--bgSelected:hsl(var(--hok-secondary-500))] [--bgSelectedPressed:hsl(var(--hok-secondary-600))]",
            success: "[--bgSelected:hsl(var(--hok-success-500))] [--bgSelectedPressed:hsl(var(--hok-success-600))]",
            danger: "[--bgSelected:hsl(var(--hok-danger-500))] [--bgSelectedPressed:hsl(var(--hok-danger-600))]",
            warning: "[--bgSelected:hsl(var(--hok-warning-500))] [--bgSelectedPressed:hsl(var(--hok-warning-600))]",
            info: "[--bgSelected:hsl(var(--hok-info-500))] [--bgSelectedPressed:hsl(var(--hok-info-600))]",
        },
    },
    defaultVariants: {
        color: "default",
    },
});
const handle = ce({
    base: "h-5 w-5 transform rounded-full bg-white outline outline-1 -outline-offset-1 outline-transparent shadow transition duration-200 ease-in-out",
    variants: {
        isSelected: {
            false: "translate-x-[2px]",
            true: "translate-x-[110%]",
        },
        isDisabled: {
            true: "forced-colors:outline-[GrayText]",
        },
    },
});
function Switch({ label, ...props }) {
    return (jsxRuntimeExports.jsx($8e59e948500a8fe1$export$b5d5cf8927ab7262, { ...props, className: composeTailwindRenderProps(props.className, "group flex gap-2 items-center text-gray-800 disabled:text-gray-300 forced-colors:disabled:text-[GrayText] text-sm transition"), children: (renderProps) => (jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [jsxRuntimeExports.jsx("div", { className: track({ ...renderProps, color: props.color }), children: jsxRuntimeExports.jsx("span", { className: handle(renderProps) }) }), label] })) }));
}

const TableStyle = ce({
    base: "min-w-[550px] overflow-auto scroll-pt-[2.281rem] relative rounded-lg",
    variants: {
        variant: {
            bordered: "border bg-transparent drop-shadow-none",
            flat: "border-0 bg-white drop-shadow-none",
            float: "border-0 bg-white drop-shadow-md",
        },
    },
    defaultVariants: {
        variant: "bordered",
    },
});
function Table(props) {
    const { dragAndDropHooks } = $d8f176866e6dc039$export$2cfc5be7a55829f6({
        isDisabled: !Boolean(props.allowDragAndDrop),
        getItems: (keys) => Array.from(keys).map((key) => ({
            "text/plain": props.items.getItem(key).key,
        })),
        onReorder: (e) => {
            if (e.target.dropPosition === "before") {
                props.items.moveBefore(e.target.key, e.keys);
            }
            else if (e.target.dropPosition === "after") {
                props.items.moveAfter(e.target.key, e.keys);
            }
        },
    });
    return (jsxRuntimeExports.jsx($1910c06f0ca9905e$export$7063e69b8a954175, { className: TableStyle({
            variant: props.variant,
        }), style: {
            maxHeight: `${props.hiehgt ?? "580"}px`,
            width: `${props.width ?? "550"}px`,
        }, children: jsxRuntimeExports.jsxs($1910c06f0ca9905e$export$54ec01a60f47d33d, { ...props, "aria-label": "data-table", className: "border-separate border-spacing-0", dragAndDropHooks: dragAndDropHooks, onSelectionChange: (key) => {
                if (props.onSelect) {
                    if (typeof key === "string") {
                        return props.onSelect(props.items.items);
                    }
                    else {
                        return props.onSelect(Array.from(key).map((e) => props.items.getItem(e)));
                    }
                }
                return undefined;
            }, children: [jsxRuntimeExports.jsx(TableHeader, { allowDragAndDrop: props.allowDragAndDrop, color: props.color, children: props.header.map((h, i) => (jsxRuntimeExports.jsx(Column, { isRowHeader: Boolean(h.isRowHeader), width: Number(h.decoration?.width), fontWeight: h.decoration?.fontWeight, fontSize: h.decoration?.fontSize, fontColor: h.decoration?.fontColor, align: h.decoration?.align, children: h.title }, i))) }), jsxRuntimeExports.jsx($1910c06f0ca9905e$export$76ccd210b9029917, { items: props.items.items, children: (item) => (jsxRuntimeExports.jsx(Row, { allowDragAndDrop: props.allowDragAndDrop, id: item.key, color: props.color, isDisabled: Boolean(item["disabled"]), children: props.header.map((h, j) => props.children ? (jsxRuntimeExports.jsx(Cell, { align: h.decoration?.align, children: props.children({
                                index: props.items.items.findIndex((e) => e.key === item.key),
                                value: props.items.getItem(item.key)[h.key],
                                columnValue: props.items.getItem(item.key),
                                key: h.key,
                            }) }, j)) : (jsxRuntimeExports.jsx(Cell, { align: h.decoration?.align, children: item[h.key] }, j))) })) })] }) }));
}
const columnStyles = ce({
    extend: focusRing,
    base: "px-2 h-5 flex-1 flex gap-1 items-center overflow-hidden",
});
const ColumnDecoration = ce({
    base: "truncate w-full",
    variants: {
        fontWeight: {
            thin: "font-thin",
            light: "font-light",
            medium: "font-medium",
            semibold: "font-semibold",
            bold: "font-bold",
        },
        fontSize: {
            xs: "text-xs",
            sm: "text-sm",
            base: "text-base",
            lg: "text-lg",
            xl: "text-xl",
        },
        fontColor: {
            default: "text-default-600",
            primary: "text-primary",
            secondary: "text-secondary",
            success: "text-success",
            danger: "text-danger",
            warning: "text-warning",
            info: "text-info",
        },
        align: {
            start: "text-start",
            center: "text-center",
            end: "text-end",
        },
    },
    defaultVariants: {
        fontWeight: "semibold",
        fontSize: "base",
        fontColor: "default",
        align: "start",
    },
});
function Column(props) {
    return (jsxRuntimeExports.jsx($1910c06f0ca9905e$export$816b5d811295e6bc, { ...props, className: composeTailwindRenderProps(props.className, "[&:hover]:z-20 [&:focus-within]:z-20 font-semibold cursor-default"), children: $64fa3d84918910a7$export$c245e6201fed2f75(props.children, (children, { allowsSorting, sortDirection }) => (jsxRuntimeExports.jsx("div", { className: "flex items-center", children: jsxRuntimeExports.jsxs($a049562f99e7db0e$export$eb2fcfdbd7ba97d4, { role: "presentation", tabIndex: -1, className: columnStyles, children: [jsxRuntimeExports.jsx("span", { className: ColumnDecoration({
                            fontWeight: props.fontWeight,
                            fontSize: props.fontSize,
                            fontColor: props.fontColor,
                            align: props.align,
                        }), children: children }), allowsSorting && (jsxRuntimeExports.jsx("span", { className: `w-4 h-4 flex items-center justify-center transition ${sortDirection === "descending" ? "rotate-180" : ""}`, children: sortDirection && (jsxRuntimeExports.jsx(ArrowUp, { "aria-hidden": true, className: "w-4 h-4 text-gray-500 forced-colors:text-[ButtonText]" })) }))] }) }))) }));
}
function TableHeader(props) {
    let { selectionBehavior, selectionMode, allowsDragging } = $1910c06f0ca9905e$export$fddc468cd8cb4db9();
    return (jsxRuntimeExports.jsxs($1910c06f0ca9905e$export$f850895b287ef28e, { ...props, className: composeTailwindRenderProps(props.className, "sticky top-0 z-10 bg-gray-100/60 backdrop-blur-md supports-[-moz-appearance:none]:bg-gray-100 forced-colors:bg-[Canvas] rounded-t-lg border-b"), children: [Boolean(props.allowDragAndDrop && allowsDragging) && (jsxRuntimeExports.jsx(Column, { width: 26, minWidth: 26 })), selectionBehavior === "toggle" && (jsxRuntimeExports.jsx($1910c06f0ca9905e$export$816b5d811295e6bc, { width: 48, minWidth: 48, className: "text-center text-sm font-semibold cursor-default flex flex-row justify-center items-center h-12", children: selectionMode === "multiple" && (jsxRuntimeExports.jsx(Checkbox, { slot: "selection", color: props.color })) })), jsxRuntimeExports.jsx($e1995378a142960e$export$fb8073518f34e6ec, { items: props.columns, children: props.children })] }));
}
const rowStyles = ce({
    extend: focusRing,
    base: "text-default-800 hover:bg-[hsl(var(--c)/0.1)] selected:bg-[hsl(var(--c)/0.2)] selected:hover:bg-[hsl(var(--c)/0.3)] group/row relative cursor-default select-none -outline-offset-2 text-sm transition-colors",
    variants: {
        color: {
            default: "[--c:var(--hok-default-500)]",
            primary: "[--c:var(--hok-primary-300)]",
            secondary: "[--c:var(--hok-secondary-600)]",
            success: "[--c:var(--hok-success-500)]",
            danger: "[--c:var(--hok-danger-500)]",
            warning: "[--c:var(--hok-warning-500)]",
            info: "[--c:var(--hok-info-500)]",
        },
    },
    defaultVariants: {
        color: "default",
    },
});
function Row({ columns, children, ...otherProps }) {
    let { selectionBehavior, allowsDragging } = $1910c06f0ca9905e$export$fddc468cd8cb4db9();
    return (jsxRuntimeExports.jsxs($1910c06f0ca9905e$export$b59bdbef9ce70de2, { ...otherProps, isDisabled: otherProps.isDisabled, className: (renderProps) => rowStyles({ ...renderProps, color: otherProps.color }), children: [Boolean(otherProps.allowDragAndDrop && allowsDragging) && (jsxRuntimeExports.jsx(Cell, { children: jsxRuntimeExports.jsx($d2b4bc8c273e7be6$export$353f5b6fc5456de1, { slot: "drag", className: "flex flex-col justify-center", children: jsxRuntimeExports.jsx(GripVertical, { "aria-hidden": true, className: "w-4 h-4 text-gray-600" }) }) })), selectionBehavior === "toggle" && (jsxRuntimeExports.jsx(Cell, { children: jsxRuntimeExports.jsxs("div", { className: "flex flex-row justify-center", children: [!Boolean(otherProps.allowDragAndDrop) && (jsxRuntimeExports.jsx($d2b4bc8c273e7be6$export$353f5b6fc5456de1, { slot: "drag", className: "hidden" })), jsxRuntimeExports.jsx(Checkbox, { slot: "selection", color: otherProps.color, isDisabled: otherProps.isDisabled })] }) })), jsxRuntimeExports.jsx($e1995378a142960e$export$fb8073518f34e6ec, { items: columns, children: children })] }));
}
const cellStyles = ce({
    extend: focusRing,
    base: "border-b group-last/row:border-b-0 [--selected-border:hsl(var(--hok-default-100))] group-selected/row:border-[--selected-border] [:has(+[data-selected])_&]:border-[--selected-border] p-2 truncate -outline-offset-2",
    variants: {
        align: {
            center: "text-center",
            start: "text-start",
            end: "text-end",
        },
    },
    defaultVariants: {
        align: "start",
    },
});
function Cell(props) {
    return (jsxRuntimeExports.jsx($1910c06f0ca9905e$export$f6f0c3fe4ec306ea, { ...props, className: (renderProps) => cellStyles({ ...renderProps, align: props.align }) }));
}

const tabsStyles = ce({
    base: "flex gap-4",
    variants: {
        orientation: {
            horizontal: "flex-col",
            vertical: "flex-row w-[800px]",
        },
    },
});
function Tabs(props) {
    return (jsxRuntimeExports.jsx($5e8ad37a45e1c704$export$b2539bed5023c21c, { ...props, className: $64fa3d84918910a7$export$c245e6201fed2f75(props.className, (className, renderProps) => tabsStyles({ ...renderProps, className })) }));
}
const tabListStyles = ce({
    base: "flex gap-1",
    variants: {
        orientation: {
            horizontal: "flex-row",
            vertical: "flex-col items-start",
        },
    },
});
function TabList(props) {
    return (jsxRuntimeExports.jsx($5e8ad37a45e1c704$export$e51a686c67fdaa2d, { ...props, className: $64fa3d84918910a7$export$c245e6201fed2f75(props.className, (className, renderProps) => tabListStyles({ ...renderProps, className })) }));
}
const tabProps = ce({
    extend: focusRing,
    base: "flex items-center cursor-default rounded-full px-4 py-1.5 text-sm font-medium transition forced-color-adjust-none",
    variants: {
        isSelected: {
            false: "text-gray-600 dark:text-zinc-300 hover:text-gray-700 pressed:text-gray-700 dark:hover:text-zinc-200 dark:pressed:text-zinc-200 hover:bg-gray-200 dark:hover:bg-zinc-800 pressed:bg-gray-200 dark:pressed:bg-zinc-800",
            true: "text-white dark:text-black forced-colors:text-[HighlightText] bg-gray-800 dark:bg-zinc-200 forced-colors:bg-[Highlight]",
        },
        isDisabled: {
            true: "text-gray-200 dark:text-zinc-600 forced-colors:text-[GrayText] selected:text-gray-300 dark:selected:text-zinc-500 forced-colors:selected:text-[HighlightText] selected:bg-gray-200 dark:selected:bg-zinc-600 forced-colors:selected:bg-[GrayText]",
        },
    },
});
function Tab(props) {
    return (jsxRuntimeExports.jsx($5e8ad37a45e1c704$export$3e41faf802a29e71, { ...props, className: $64fa3d84918910a7$export$c245e6201fed2f75(props.className, (className, renderProps) => tabProps({ ...renderProps, className })) }));
}
const tabPanelStyles = ce({
    extend: focusRing,
    base: "flex-1 p-4 text-sm text-gray-900 dark:text-zinc-100",
});
function TabPanel(props) {
    return (jsxRuntimeExports.jsx($5e8ad37a45e1c704$export$3d96ec278d3efce4, { ...props, className: $64fa3d84918910a7$export$c245e6201fed2f75(props.className, (className, renderProps) => tabPanelStyles({ ...renderProps, className })) }));
}

const ColorContext = reactExports.createContext({
    color: "default",
    variant: "default",
    rounded: "default",
});
const tagStyles = ce({
    extend: focusRing,
    base: "text-[--text] border-[--border] hover:border-[--borderHover] transition cursor-default text-xs px-3 py-[6px] flex items-center max-w-fit gap-1",
    variants: {
        color: {
            default: [
                "[--bgSelected:hsl(var(--hok-default-500))]",
                "[--bg:hsl(var(--hok-default-100))]",
                "[--text:hsl(var(--hok-default-600))]",
                "[--border:hsl(var(--hok-default-200))]",
                "[--borderHover:hsl(var(--hok-default-300))]",
            ],
            primary: [
                "[--bgSelected:hsl(var(--hok-primary-500))]",
                "[--bg:hsl(var(--hok-primary-100))]",
                "[--text:hsl(var(--hok-primary-600))]",
                "[--border:hsl(var(--hok-primary-200))]",
                "[--borderHover:hsl(var(--hok-primary-300))]",
            ],
            secondary: [
                "[--bgSelected:hsl(var(--hok-secondary-500))]",
                "[--bg:hsl(var(--hok-secondary-100))]",
                "[--text:hsl(var(--hok-secondary-600))]",
                "[--border:hsl(var(--hok-secondary-200))]",
                "[--borderHover:hsl(var(--hok-secondary-300))]",
            ],
            success: [
                "[--bgSelected:hsl(var(--hok-success-500))]",
                "[--bg:hsl(var(--hok-success-100))]",
                "[--text:hsl(var(--hok-success-600))]",
                "[--border:hsl(var(--hok-success-200))]",
                "[--borderHover:hsl(var(--hok-success-300))]",
            ],
            danger: [
                "[--bgSelected:hsl(var(--hok-danger-500))]",
                "[--bg:hsl(var(--hok-danger-100))]",
                "[--text:hsl(var(--hok-danger-600))]",
                "[--border:hsl(var(--hok-danger-200))]",
                "[--borderHover:hsl(var(--hok-danger-300))]",
            ],
            warning: [
                "[--bgSelected:hsl(var(--hok-warning-500))]",
                "[--bg:hsl(var(--hok-warning-100))]",
                "[--text:hsl(var(--hok-warning-600))]",
                "[--border:hsl(var(--hok-warning-200))]",
                "[--borderHover:hsl(var(--hok-warning-300))]",
            ],
            info: [
                "[--bgSelected:hsl(var(--hok-info-500))]",
                "[--bg:hsl(var(--hok-info-100))]",
                "[--text:hsl(var(--hok-info-600))]",
                "[--border:hsl(var(--hok-info-200))]",
                "[--borderHover:hsl(var(--hok-info-300))]",
            ],
        },
        allowsRemoving: {
            true: "pr-1",
        },
        rounded: {
            default: "rounded-sm",
            full: "rounded-full",
        },
        variant: {
            default: "border-[1.5px] bg-[--bg]",
            bordered: "border-[1.5px] bg-tranparent",
            flat: "border-0 bg-[--border] hover:bg-[--borderHover]",
        },
        isSelected: {
            true: "bg-[--bgSelected] text-white border-transparent forced-colors:bg-[Highlight] forced-colors:text-[HighlightText] forced-color-adjust-none",
        },
        isDisabled: {
            true: "bg-gray-100 text-gray-300 forced-colors:text-[GrayText]",
        },
    },
    defaultVariants: {
        isSelected: false,
        color: "default",
        rounded: "default",
        variant: "default",
    },
});
function TagGroup({ label, description, errorMessage, items, children, renderEmptyState, selectionMode, ...props }) {
    return (jsxRuntimeExports.jsxs($eaf9e70818b436db$export$67ea30858aaf75e3, { ...props, selectionMode: selectionMode, onRemove: (keys) => {
            if (props.onRemove) {
                props.onRemove(Array.from(keys).map((e) => String(e)));
            }
        }, className: twMerge("flex flex-col justify-center gap-1", props.className), children: [jsxRuntimeExports.jsx(Label, { children: label }), items && (jsxRuntimeExports.jsx(ColorContext.Provider, { value: {
                    color: props.color,
                    variant: props.variant,
                    rounded: props.rounded,
                }, children: jsxRuntimeExports.jsx($eaf9e70818b436db$export$f9fef0f55402315b, { items: items.items, renderEmptyState: renderEmptyState, className: "flex flex-wrap gap-1", children: children }) })), description && jsxRuntimeExports.jsx(Description, { children: description }), errorMessage && (jsxRuntimeExports.jsx($514c0188e459b4c0$export$5f1af8db9871e1d6, { slot: "errorMessage", className: "text-sm text-red-600", children: errorMessage }))] }));
}
const removeButtonStyles = ce({
    extend: focusRing,
    base: "cursor-default rounded-full transition-[background-color] p-0.5 flex items-center justify-center",
    variants: {
        color: {
            default: "hover:bg-default-300 pressed:bg-default-400",
            primary: "hover:bg-primary-300 pressed:bg-primary-400",
            secondary: "hover:bg-secondary-300 pressed:bg-secondary-400",
            success: "hover:bg-success-300 pressed:bg-success-400",
            danger: "hover:bg-danger-300 pressed:bg-danger-400",
            warning: "hover:bg-warning-300 pressed:bg-warning-400",
            info: "hover:bg-info-300 pressed:bg-info-400",
        },
    },
    defaultVariants: {
        color: "default",
    },
});
function Tag({ children, ...props }) {
    let textValue = typeof children === "string" ? children : undefined;
    let groupCtx = reactExports.useContext(ColorContext);
    return (jsxRuntimeExports.jsx($eaf9e70818b436db$export$3288d34c523a1192, { textValue: textValue, ...props, className: $64fa3d84918910a7$export$c245e6201fed2f75(props.className, (className, renderProps) => tagStyles({
            ...renderProps,
            className,
            color: groupCtx.color,
            rounded: groupCtx.rounded,
            variant: groupCtx.variant,
        })), children: ({ allowsRemoving }) => (jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment, { children: [children, allowsRemoving && (jsxRuntimeExports.jsx($d2b4bc8c273e7be6$export$353f5b6fc5456de1, { slot: "remove", className: (renderProps) => removeButtonStyles({ ...renderProps, color: groupCtx.color }), children: jsxRuntimeExports.jsx(X, { "aria-hidden": true, className: "w-3 h-3" }) }))] })) }));
}

const inputStyles = ce({
    extend: focusRing,
    base: "border-2 rounded-md",
    variants: {
        isFocused: fieldBorderStyles.variants.isFocusWithin,
        ...fieldBorderStyles.variants,
    },
});
function TextField({ label, description, errorMessage, ...props }) {
    return (jsxRuntimeExports.jsxs($bcdf0525bf22703d$export$2c73285ae9390cec, { ...props, className: composeTailwindRenderProps(props.className, "flex flex-col gap-1"), children: [label && jsxRuntimeExports.jsx(Label, { children: label }), jsxRuntimeExports.jsx(Input, { className: inputStyles }), description && jsxRuntimeExports.jsx(Description, { children: description }), jsxRuntimeExports.jsx(FieldError, { children: errorMessage })] }));
}

function TimeField({ label, description, errorMessage, ...props }) {
    return (jsxRuntimeExports.jsxs($40825cdb76e74f70$export$5eaee2322dd727eb, { ...props, children: [jsxRuntimeExports.jsx(Label, { children: label }), jsxRuntimeExports.jsx(DateInput, {}), description && jsxRuntimeExports.jsx(Description, { children: description }), jsxRuntimeExports.jsx(FieldError, { children: errorMessage })] }));
}

let styles$1 = ce({
    extend: focusRing,
    base: "px-[--btnPx] pressed:bg-[--bgColor] flex flex-row justify-center items-center py-2 text-center transition shadow-[inset_0_1px_0_0_rgba(255,255,255,0.1)] cursor-pointer forced-color-adjust-none",
    variants: {
        isDisabled: {
            true: "bg-gray-100 forced-colors:!bg-[ButtonFace] text-gray-300 forced-colors:!text-[GrayText] border-black/5 forced-colors:border-[GrayText] cursor-not-allowed",
        },
        isSelected: {
            true: "text-white bg-[--borderColor] hover:bg-[--bgDefaultHover] forced-colors:!bg-[Highlight] forced-colors:!text-[HighlightText]",
            false: "text-[--textColor] hover:bg-[--bgFlatHover] forced-colors:!bg-[ButtonFace] forced-colors:!text-[ButtonText]",
        },
        color: {
            default: [
                "[--bgDefaultHover:hsl(var(--hok-default-400))]",
                "[--bgFlat:hsl(var(--hok-default-200))]",
                "[--bgIcon:hsl(var(--hok-default-200)/0.7)]",
                "[--bgFlatHover:hsl(var(--hok-default-200)/0.6)]",
                "[--bgColor:hsl(var(--hok-default-500))]",
                "[--bgColorHover:hsl(var(--hok-default-500)/0.9)]",
                "[--borderColor:hsl(var(--hok-default-500))]",
                "[--textColor:hsl(var(--hok-default-500))]",
            ],
            primary: [
                "[--bgDefaultHover:hsl(var(--hok-primary-400))]",
                "[--bgFlat:hsl(var(--hok-primary-200))]",
                "[--bgIcon:hsl(var(--hok-primary-100)/0.7)]",
                "[--bgFlatHover:hsl(var(--hok-primary-200)/0.6)]",
                "[--bgColor:hsl(var(--hok-primary-500))]",
                "[--bgColorHover:hsl(var(--hok-primary-500)/0.9)]",
                "[--borderColor:hsl(var(--hok-primary-500))]",
                "[--textColor:hsl(var(--hok-primary-500))]",
            ],
            secondary: [
                "[--bgDefaultHover:hsl(var(--hok-secondary-400))]",
                "[--bgFlat:hsl(var(--hok-secondary-200))]",
                "[--bgIcon:hsl(var(--hok-secondary-100)/0.7)]",
                "[--bgFlatHover:hsl(var(--hok-secondary-200)/0.6)]",
                "[--bgColor:hsl(var(--hok-secondary-500))]",
                "[--bgColorHover:hsl(var(--hok-secondary-500)/0.9)]",
                "[--borderColor:hsl(var(--hok-secondary-500))]",
                "[--textColor:hsl(var(--hok-secondary-500))]",
            ],
            success: [
                "[--bgDefaultHover:hsl(var(--hok-success-400))]",
                "[--bgFlat:hsl(var(--hok-success-200))]",
                "[--bgIcon:hsl(var(--hok-success-100)/0.7)]",
                "[--bgFlatHover:hsl(var(--hok-success-200)/0.6)]",
                "[--bgColor:hsl(var(--hok-success-500))]",
                "[--bgColorHover:hsl(var(--hok-success-500)/0.9)]",
                "[--borderColor:hsl(var(--hok-success-500))]",
                "[--textColor:hsl(var(--hok-success-500))]",
            ],
            danger: [
                "[--bgDefaultHover:hsl(var(--hok-danger-400))]",
                "[--bgFlat:hsl(var(--hok-danger-200))]",
                "[--bgIcon:hsl(var(--hok-danger-100)/0.7)]",
                "[--bgFlatHover:hsl(var(--hok-danger-200)/0.6)]",
                "[--bgColor:hsl(var(--hok-danger-500))]",
                "[--bgColorHover:hsl(var(--hok-danger-500)/0.9)]",
                "[--borderColor:hsl(var(--hok-danger-500))]",
                "[--textColor:hsl(var(--hok-danger-500))]",
            ],
            warning: [
                "[--bgDefaultHover:hsl(var(--hok-warning-400))]",
                "[--bgFlat:hsl(var(--hok-warning-200))]",
                "[--bgIcon:hsl(var(--hok-warning-100)/0.7)]",
                "[--bgFlatHover:hsl(var(--hok-warning-200)/0.6)]",
                "[--bgColor:hsl(var(--hok-warning-500))]",
                "[--bgColorHover:hsl(var(--hok-warning-500)/0.9)]",
                "[--borderColor:hsl(var(--hok-warning-500))]",
                "[--textColor:hsl(var(--hok-warning-500))]",
            ],
            info: [
                "[--bgDefaultHover:hsl(var(--hok-info-400))]",
                "[--bgFlat:hsl(var(--hok-info-200))]",
                "[--bgIcon:hsl(var(--hok-info-100)/0.7)]",
                "[--bgFlatHover:hsl(var(--hok-info-200)/0.6)]",
                "[--bgColor:hsl(var(--hok-info-500))]",
                "[--bgColorHover:hsl(var(--hok-info-500)/0.9)]",
                "[--borderColor:hsl(var(--hok-info-500))]",
                "[--textColor:hsl(var(--hok-info-500))]",
            ],
        },
        variant: {
            bordered: "border-2",
            flat: "border-0",
            text: "border-0",
            icon: "![--btnPx:0] border-0",
        },
        size: {
            xs: "[--btnPx:0.75rem] h-6 min-w-6 text-xs",
            sm: "[--btnPx:1rem] h-8 min-w-8 text-sm",
            md: "[--btnPx:1.25rem] h-10 min-w-10 text-md",
            lg: "[--btnPx:1.5rem] h-12 min-w-12 text-lg",
            xl: "[--btnPx:1.75rem] h-14 min-w-14 text-xl",
        },
        rounded: {
            none: "rounded-none",
            sm: "rounded-sm",
            md: "rounded-md",
            lg: "rounded-lg",
            xl: "rounded-xl",
            full: "rounded-full",
        },
    },
    defaultVariants: {
        color: "default",
        variant: "bordered",
        rounded: "md",
        size: "md",
    },
    compoundVariants: [
        {
            isSelected: false,
            variant: "bordered",
            className: "bg-transparent border-[--borderColor]",
        },
        {
            isSelected: false,
            variant: "flat",
            className: "bg-[--bgFlat]",
        },
        {
            isSelected: false,
            variant: "icon",
            className: "bg-[--bgIcon]",
        },
        {
            isSelected: false,
            variant: "text",
            className: "bg-transparent",
        },
    ],
});
function ToggleButton(props) {
    return (jsxRuntimeExports.jsx($efde0372d7a700fe$export$d2b052e7b4be1756, { ...props, className: $64fa3d84918910a7$export$c245e6201fed2f75(props.className, (className, renderProps) => styles$1({
            ...renderProps,
            className,
            color: props.color,
            variant: props.variant,
            rounded: props.rounded,
            size: props.size,
        })) }));
}

const styles = ce({
    base: "group bg-slate-700 dark:bg-slate-600 border border-slate-800 dark:border-white/10 shadow-[inset_0_1px_0_0_theme(colors.gray.600)] dark:shadow-none text-white text-sm rounded-lg drop-shadow-lg will-change-transform px-3 py-1",
    variants: {
        isEntering: {
            true: "animate-in fade-in placement-bottom:slide-in-from-top-0.5 placement-top:slide-in-from-bottom-0.5 placement-left:slide-in-from-right-0.5 placement-right:slide-in-from-left-0.5 ease-out duration-200",
        },
        isExiting: {
            true: "animate-out fade-out placement-bottom:slide-out-to-top-0.5 placement-top:slide-out-to-bottom-0.5 placement-left:slide-out-to-right-0.5 placement-right:slide-out-to-left-0.5 ease-in duration-150",
        },
    },
});
function Tooltip({ children, ...props }) {
    return (jsxRuntimeExports.jsxs($4e3b923658d69c60$export$28c660c63b792dea, { ...props, offset: 10, className: $64fa3d84918910a7$export$c245e6201fed2f75(props.className, (className, renderProps) => styles({ ...renderProps, className })), children: [jsxRuntimeExports.jsx($44f671af83e7d9e0$export$746d02f47f4d381, { children: jsxRuntimeExports.jsx("svg", { width: 8, height: 8, viewBox: "0 0 8 8", className: "fill-slate-700 dark:fill-slate-600 forced-colors:fill-[Canvas] stroke-gray-800 dark:stroke-white/10 forced-colors:stroke-[ButtonBorder] group-placement-bottom:rotate-180 group-placement-left:-rotate-90 group-placement-right:rotate-90", children: jsxRuntimeExports.jsx("path", { d: "M0 0 L4 4 L8 0" }) }) }), children] }));
}

var colorString$1 = {exports: {}};

var colorName = {
	"aliceblue": [240, 248, 255],
	"antiquewhite": [250, 235, 215],
	"aqua": [0, 255, 255],
	"aquamarine": [127, 255, 212],
	"azure": [240, 255, 255],
	"beige": [245, 245, 220],
	"bisque": [255, 228, 196],
	"black": [0, 0, 0],
	"blanchedalmond": [255, 235, 205],
	"blue": [0, 0, 255],
	"blueviolet": [138, 43, 226],
	"brown": [165, 42, 42],
	"burlywood": [222, 184, 135],
	"cadetblue": [95, 158, 160],
	"chartreuse": [127, 255, 0],
	"chocolate": [210, 105, 30],
	"coral": [255, 127, 80],
	"cornflowerblue": [100, 149, 237],
	"cornsilk": [255, 248, 220],
	"crimson": [220, 20, 60],
	"cyan": [0, 255, 255],
	"darkblue": [0, 0, 139],
	"darkcyan": [0, 139, 139],
	"darkgoldenrod": [184, 134, 11],
	"darkgray": [169, 169, 169],
	"darkgreen": [0, 100, 0],
	"darkgrey": [169, 169, 169],
	"darkkhaki": [189, 183, 107],
	"darkmagenta": [139, 0, 139],
	"darkolivegreen": [85, 107, 47],
	"darkorange": [255, 140, 0],
	"darkorchid": [153, 50, 204],
	"darkred": [139, 0, 0],
	"darksalmon": [233, 150, 122],
	"darkseagreen": [143, 188, 143],
	"darkslateblue": [72, 61, 139],
	"darkslategray": [47, 79, 79],
	"darkslategrey": [47, 79, 79],
	"darkturquoise": [0, 206, 209],
	"darkviolet": [148, 0, 211],
	"deeppink": [255, 20, 147],
	"deepskyblue": [0, 191, 255],
	"dimgray": [105, 105, 105],
	"dimgrey": [105, 105, 105],
	"dodgerblue": [30, 144, 255],
	"firebrick": [178, 34, 34],
	"floralwhite": [255, 250, 240],
	"forestgreen": [34, 139, 34],
	"fuchsia": [255, 0, 255],
	"gainsboro": [220, 220, 220],
	"ghostwhite": [248, 248, 255],
	"gold": [255, 215, 0],
	"goldenrod": [218, 165, 32],
	"gray": [128, 128, 128],
	"green": [0, 128, 0],
	"greenyellow": [173, 255, 47],
	"grey": [128, 128, 128],
	"honeydew": [240, 255, 240],
	"hotpink": [255, 105, 180],
	"indianred": [205, 92, 92],
	"indigo": [75, 0, 130],
	"ivory": [255, 255, 240],
	"khaki": [240, 230, 140],
	"lavender": [230, 230, 250],
	"lavenderblush": [255, 240, 245],
	"lawngreen": [124, 252, 0],
	"lemonchiffon": [255, 250, 205],
	"lightblue": [173, 216, 230],
	"lightcoral": [240, 128, 128],
	"lightcyan": [224, 255, 255],
	"lightgoldenrodyellow": [250, 250, 210],
	"lightgray": [211, 211, 211],
	"lightgreen": [144, 238, 144],
	"lightgrey": [211, 211, 211],
	"lightpink": [255, 182, 193],
	"lightsalmon": [255, 160, 122],
	"lightseagreen": [32, 178, 170],
	"lightskyblue": [135, 206, 250],
	"lightslategray": [119, 136, 153],
	"lightslategrey": [119, 136, 153],
	"lightsteelblue": [176, 196, 222],
	"lightyellow": [255, 255, 224],
	"lime": [0, 255, 0],
	"limegreen": [50, 205, 50],
	"linen": [250, 240, 230],
	"magenta": [255, 0, 255],
	"maroon": [128, 0, 0],
	"mediumaquamarine": [102, 205, 170],
	"mediumblue": [0, 0, 205],
	"mediumorchid": [186, 85, 211],
	"mediumpurple": [147, 112, 219],
	"mediumseagreen": [60, 179, 113],
	"mediumslateblue": [123, 104, 238],
	"mediumspringgreen": [0, 250, 154],
	"mediumturquoise": [72, 209, 204],
	"mediumvioletred": [199, 21, 133],
	"midnightblue": [25, 25, 112],
	"mintcream": [245, 255, 250],
	"mistyrose": [255, 228, 225],
	"moccasin": [255, 228, 181],
	"navajowhite": [255, 222, 173],
	"navy": [0, 0, 128],
	"oldlace": [253, 245, 230],
	"olive": [128, 128, 0],
	"olivedrab": [107, 142, 35],
	"orange": [255, 165, 0],
	"orangered": [255, 69, 0],
	"orchid": [218, 112, 214],
	"palegoldenrod": [238, 232, 170],
	"palegreen": [152, 251, 152],
	"paleturquoise": [175, 238, 238],
	"palevioletred": [219, 112, 147],
	"papayawhip": [255, 239, 213],
	"peachpuff": [255, 218, 185],
	"peru": [205, 133, 63],
	"pink": [255, 192, 203],
	"plum": [221, 160, 221],
	"powderblue": [176, 224, 230],
	"purple": [128, 0, 128],
	"rebeccapurple": [102, 51, 153],
	"red": [255, 0, 0],
	"rosybrown": [188, 143, 143],
	"royalblue": [65, 105, 225],
	"saddlebrown": [139, 69, 19],
	"salmon": [250, 128, 114],
	"sandybrown": [244, 164, 96],
	"seagreen": [46, 139, 87],
	"seashell": [255, 245, 238],
	"sienna": [160, 82, 45],
	"silver": [192, 192, 192],
	"skyblue": [135, 206, 235],
	"slateblue": [106, 90, 205],
	"slategray": [112, 128, 144],
	"slategrey": [112, 128, 144],
	"snow": [255, 250, 250],
	"springgreen": [0, 255, 127],
	"steelblue": [70, 130, 180],
	"tan": [210, 180, 140],
	"teal": [0, 128, 128],
	"thistle": [216, 191, 216],
	"tomato": [255, 99, 71],
	"turquoise": [64, 224, 208],
	"violet": [238, 130, 238],
	"wheat": [245, 222, 179],
	"white": [255, 255, 255],
	"whitesmoke": [245, 245, 245],
	"yellow": [255, 255, 0],
	"yellowgreen": [154, 205, 50]
};

var simpleSwizzle = {exports: {}};

var isArrayish$1 = function isArrayish(obj) {
	if (!obj || typeof obj === 'string') {
		return false;
	}

	return obj instanceof Array || Array.isArray(obj) ||
		(obj.length >= 0 && (obj.splice instanceof Function ||
			(Object.getOwnPropertyDescriptor(obj, (obj.length - 1)) && obj.constructor.name !== 'String')));
};

var isArrayish = isArrayish$1;

var concat = Array.prototype.concat;
var slice = Array.prototype.slice;

var swizzle$1 = simpleSwizzle.exports = function swizzle(args) {
	var results = [];

	for (var i = 0, len = args.length; i < len; i++) {
		var arg = args[i];

		if (isArrayish(arg)) {
			// http://jsperf.com/javascript-array-concat-vs-push/98
			results = concat.call(results, slice.call(arg));
		} else {
			results.push(arg);
		}
	}

	return results;
};

swizzle$1.wrap = function (fn) {
	return function () {
		return fn(swizzle$1(arguments));
	};
};

var simpleSwizzleExports = simpleSwizzle.exports;

/* MIT license */

var colorNames = colorName;
var swizzle = simpleSwizzleExports;
var hasOwnProperty$1 = Object.hasOwnProperty;

var reverseNames = Object.create(null);

// create a list of reverse color names
for (var name in colorNames) {
	if (hasOwnProperty$1.call(colorNames, name)) {
		reverseNames[colorNames[name]] = name;
	}
}

var cs = colorString$1.exports = {
	to: {},
	get: {}
};

cs.get = function (string) {
	var prefix = string.substring(0, 3).toLowerCase();
	var val;
	var model;
	switch (prefix) {
		case 'hsl':
			val = cs.get.hsl(string);
			model = 'hsl';
			break;
		case 'hwb':
			val = cs.get.hwb(string);
			model = 'hwb';
			break;
		default:
			val = cs.get.rgb(string);
			model = 'rgb';
			break;
	}

	if (!val) {
		return null;
	}

	return {model: model, value: val};
};

cs.get.rgb = function (string) {
	if (!string) {
		return null;
	}

	var abbr = /^#([a-f0-9]{3,4})$/i;
	var hex = /^#([a-f0-9]{6})([a-f0-9]{2})?$/i;
	var rgba = /^rgba?\(\s*([+-]?\d+)(?=[\s,])\s*(?:,\s*)?([+-]?\d+)(?=[\s,])\s*(?:,\s*)?([+-]?\d+)\s*(?:[,|\/]\s*([+-]?[\d\.]+)(%?)\s*)?\)$/;
	var per = /^rgba?\(\s*([+-]?[\d\.]+)\%\s*,?\s*([+-]?[\d\.]+)\%\s*,?\s*([+-]?[\d\.]+)\%\s*(?:[,|\/]\s*([+-]?[\d\.]+)(%?)\s*)?\)$/;
	var keyword = /^(\w+)$/;

	var rgb = [0, 0, 0, 1];
	var match;
	var i;
	var hexAlpha;

	if (match = string.match(hex)) {
		hexAlpha = match[2];
		match = match[1];

		for (i = 0; i < 3; i++) {
			// https://jsperf.com/slice-vs-substr-vs-substring-methods-long-string/19
			var i2 = i * 2;
			rgb[i] = parseInt(match.slice(i2, i2 + 2), 16);
		}

		if (hexAlpha) {
			rgb[3] = parseInt(hexAlpha, 16) / 255;
		}
	} else if (match = string.match(abbr)) {
		match = match[1];
		hexAlpha = match[3];

		for (i = 0; i < 3; i++) {
			rgb[i] = parseInt(match[i] + match[i], 16);
		}

		if (hexAlpha) {
			rgb[3] = parseInt(hexAlpha + hexAlpha, 16) / 255;
		}
	} else if (match = string.match(rgba)) {
		for (i = 0; i < 3; i++) {
			rgb[i] = parseInt(match[i + 1], 0);
		}

		if (match[4]) {
			if (match[5]) {
				rgb[3] = parseFloat(match[4]) * 0.01;
			} else {
				rgb[3] = parseFloat(match[4]);
			}
		}
	} else if (match = string.match(per)) {
		for (i = 0; i < 3; i++) {
			rgb[i] = Math.round(parseFloat(match[i + 1]) * 2.55);
		}

		if (match[4]) {
			if (match[5]) {
				rgb[3] = parseFloat(match[4]) * 0.01;
			} else {
				rgb[3] = parseFloat(match[4]);
			}
		}
	} else if (match = string.match(keyword)) {
		if (match[1] === 'transparent') {
			return [0, 0, 0, 0];
		}

		if (!hasOwnProperty$1.call(colorNames, match[1])) {
			return null;
		}

		rgb = colorNames[match[1]];
		rgb[3] = 1;

		return rgb;
	} else {
		return null;
	}

	for (i = 0; i < 3; i++) {
		rgb[i] = clamp(rgb[i], 0, 255);
	}
	rgb[3] = clamp(rgb[3], 0, 1);

	return rgb;
};

cs.get.hsl = function (string) {
	if (!string) {
		return null;
	}

	var hsl = /^hsla?\(\s*([+-]?(?:\d{0,3}\.)?\d+)(?:deg)?\s*,?\s*([+-]?[\d\.]+)%\s*,?\s*([+-]?[\d\.]+)%\s*(?:[,|\/]\s*([+-]?(?=\.\d|\d)(?:0|[1-9]\d*)?(?:\.\d*)?(?:[eE][+-]?\d+)?)\s*)?\)$/;
	var match = string.match(hsl);

	if (match) {
		var alpha = parseFloat(match[4]);
		var h = ((parseFloat(match[1]) % 360) + 360) % 360;
		var s = clamp(parseFloat(match[2]), 0, 100);
		var l = clamp(parseFloat(match[3]), 0, 100);
		var a = clamp(isNaN(alpha) ? 1 : alpha, 0, 1);

		return [h, s, l, a];
	}

	return null;
};

cs.get.hwb = function (string) {
	if (!string) {
		return null;
	}

	var hwb = /^hwb\(\s*([+-]?\d{0,3}(?:\.\d+)?)(?:deg)?\s*,\s*([+-]?[\d\.]+)%\s*,\s*([+-]?[\d\.]+)%\s*(?:,\s*([+-]?(?=\.\d|\d)(?:0|[1-9]\d*)?(?:\.\d*)?(?:[eE][+-]?\d+)?)\s*)?\)$/;
	var match = string.match(hwb);

	if (match) {
		var alpha = parseFloat(match[4]);
		var h = ((parseFloat(match[1]) % 360) + 360) % 360;
		var w = clamp(parseFloat(match[2]), 0, 100);
		var b = clamp(parseFloat(match[3]), 0, 100);
		var a = clamp(isNaN(alpha) ? 1 : alpha, 0, 1);
		return [h, w, b, a];
	}

	return null;
};

cs.to.hex = function () {
	var rgba = swizzle(arguments);

	return (
		'#' +
		hexDouble(rgba[0]) +
		hexDouble(rgba[1]) +
		hexDouble(rgba[2]) +
		(rgba[3] < 1
			? (hexDouble(Math.round(rgba[3] * 255)))
			: '')
	);
};

cs.to.rgb = function () {
	var rgba = swizzle(arguments);

	return rgba.length < 4 || rgba[3] === 1
		? 'rgb(' + Math.round(rgba[0]) + ', ' + Math.round(rgba[1]) + ', ' + Math.round(rgba[2]) + ')'
		: 'rgba(' + Math.round(rgba[0]) + ', ' + Math.round(rgba[1]) + ', ' + Math.round(rgba[2]) + ', ' + rgba[3] + ')';
};

cs.to.rgb.percent = function () {
	var rgba = swizzle(arguments);

	var r = Math.round(rgba[0] / 255 * 100);
	var g = Math.round(rgba[1] / 255 * 100);
	var b = Math.round(rgba[2] / 255 * 100);

	return rgba.length < 4 || rgba[3] === 1
		? 'rgb(' + r + '%, ' + g + '%, ' + b + '%)'
		: 'rgba(' + r + '%, ' + g + '%, ' + b + '%, ' + rgba[3] + ')';
};

cs.to.hsl = function () {
	var hsla = swizzle(arguments);
	return hsla.length < 4 || hsla[3] === 1
		? 'hsl(' + hsla[0] + ', ' + hsla[1] + '%, ' + hsla[2] + '%)'
		: 'hsla(' + hsla[0] + ', ' + hsla[1] + '%, ' + hsla[2] + '%, ' + hsla[3] + ')';
};

// hwb is a bit different than rgb(a) & hsl(a) since there is no alpha specific syntax
// (hwb have alpha optional & 1 is default value)
cs.to.hwb = function () {
	var hwba = swizzle(arguments);

	var a = '';
	if (hwba.length >= 4 && hwba[3] !== 1) {
		a = ', ' + hwba[3];
	}

	return 'hwb(' + hwba[0] + ', ' + hwba[1] + '%, ' + hwba[2] + '%' + a + ')';
};

cs.to.keyword = function (rgb) {
	return reverseNames[rgb.slice(0, 3)];
};

// helpers
function clamp(num, min, max) {
	return Math.min(Math.max(min, num), max);
}

function hexDouble(num) {
	var str = Math.round(num).toString(16).toUpperCase();
	return (str.length < 2) ? '0' + str : str;
}

var colorStringExports = colorString$1.exports;

/* MIT license */

/* eslint-disable no-mixed-operators */
const cssKeywords = colorName;

// NOTE: conversions should only return primitive values (i.e. arrays, or
//       values that give correct `typeof` results).
//       do not use box values types (i.e. Number(), String(), etc.)

const reverseKeywords = {};
for (const key of Object.keys(cssKeywords)) {
	reverseKeywords[cssKeywords[key]] = key;
}

const convert$2 = {
	rgb: {channels: 3, labels: 'rgb'},
	hsl: {channels: 3, labels: 'hsl'},
	hsv: {channels: 3, labels: 'hsv'},
	hwb: {channels: 3, labels: 'hwb'},
	cmyk: {channels: 4, labels: 'cmyk'},
	xyz: {channels: 3, labels: 'xyz'},
	lab: {channels: 3, labels: 'lab'},
	lch: {channels: 3, labels: 'lch'},
	hex: {channels: 1, labels: ['hex']},
	keyword: {channels: 1, labels: ['keyword']},
	ansi16: {channels: 1, labels: ['ansi16']},
	ansi256: {channels: 1, labels: ['ansi256']},
	hcg: {channels: 3, labels: ['h', 'c', 'g']},
	apple: {channels: 3, labels: ['r16', 'g16', 'b16']},
	gray: {channels: 1, labels: ['gray']}
};

var conversions$2 = convert$2;

// Hide .channels and .labels properties
for (const model of Object.keys(convert$2)) {
	if (!('channels' in convert$2[model])) {
		throw new Error('missing channels property: ' + model);
	}

	if (!('labels' in convert$2[model])) {
		throw new Error('missing channel labels property: ' + model);
	}

	if (convert$2[model].labels.length !== convert$2[model].channels) {
		throw new Error('channel and label counts mismatch: ' + model);
	}

	const {channels, labels} = convert$2[model];
	delete convert$2[model].channels;
	delete convert$2[model].labels;
	Object.defineProperty(convert$2[model], 'channels', {value: channels});
	Object.defineProperty(convert$2[model], 'labels', {value: labels});
}

convert$2.rgb.hsl = function (rgb) {
	const r = rgb[0] / 255;
	const g = rgb[1] / 255;
	const b = rgb[2] / 255;
	const min = Math.min(r, g, b);
	const max = Math.max(r, g, b);
	const delta = max - min;
	let h;
	let s;

	if (max === min) {
		h = 0;
	} else if (r === max) {
		h = (g - b) / delta;
	} else if (g === max) {
		h = 2 + (b - r) / delta;
	} else if (b === max) {
		h = 4 + (r - g) / delta;
	}

	h = Math.min(h * 60, 360);

	if (h < 0) {
		h += 360;
	}

	const l = (min + max) / 2;

	if (max === min) {
		s = 0;
	} else if (l <= 0.5) {
		s = delta / (max + min);
	} else {
		s = delta / (2 - max - min);
	}

	return [h, s * 100, l * 100];
};

convert$2.rgb.hsv = function (rgb) {
	let rdif;
	let gdif;
	let bdif;
	let h;
	let s;

	const r = rgb[0] / 255;
	const g = rgb[1] / 255;
	const b = rgb[2] / 255;
	const v = Math.max(r, g, b);
	const diff = v - Math.min(r, g, b);
	const diffc = function (c) {
		return (v - c) / 6 / diff + 1 / 2;
	};

	if (diff === 0) {
		h = 0;
		s = 0;
	} else {
		s = diff / v;
		rdif = diffc(r);
		gdif = diffc(g);
		bdif = diffc(b);

		if (r === v) {
			h = bdif - gdif;
		} else if (g === v) {
			h = (1 / 3) + rdif - bdif;
		} else if (b === v) {
			h = (2 / 3) + gdif - rdif;
		}

		if (h < 0) {
			h += 1;
		} else if (h > 1) {
			h -= 1;
		}
	}

	return [
		h * 360,
		s * 100,
		v * 100
	];
};

convert$2.rgb.hwb = function (rgb) {
	const r = rgb[0];
	const g = rgb[1];
	let b = rgb[2];
	const h = convert$2.rgb.hsl(rgb)[0];
	const w = 1 / 255 * Math.min(r, Math.min(g, b));

	b = 1 - 1 / 255 * Math.max(r, Math.max(g, b));

	return [h, w * 100, b * 100];
};

convert$2.rgb.cmyk = function (rgb) {
	const r = rgb[0] / 255;
	const g = rgb[1] / 255;
	const b = rgb[2] / 255;

	const k = Math.min(1 - r, 1 - g, 1 - b);
	const c = (1 - r - k) / (1 - k) || 0;
	const m = (1 - g - k) / (1 - k) || 0;
	const y = (1 - b - k) / (1 - k) || 0;

	return [c * 100, m * 100, y * 100, k * 100];
};

function comparativeDistance(x, y) {
	/*
		See https://en.m.wikipedia.org/wiki/Euclidean_distance#Squared_Euclidean_distance
	*/
	return (
		((x[0] - y[0]) ** 2) +
		((x[1] - y[1]) ** 2) +
		((x[2] - y[2]) ** 2)
	);
}

convert$2.rgb.keyword = function (rgb) {
	const reversed = reverseKeywords[rgb];
	if (reversed) {
		return reversed;
	}

	let currentClosestDistance = Infinity;
	let currentClosestKeyword;

	for (const keyword of Object.keys(cssKeywords)) {
		const value = cssKeywords[keyword];

		// Compute comparative distance
		const distance = comparativeDistance(rgb, value);

		// Check if its less, if so set as closest
		if (distance < currentClosestDistance) {
			currentClosestDistance = distance;
			currentClosestKeyword = keyword;
		}
	}

	return currentClosestKeyword;
};

convert$2.keyword.rgb = function (keyword) {
	return cssKeywords[keyword];
};

convert$2.rgb.xyz = function (rgb) {
	let r = rgb[0] / 255;
	let g = rgb[1] / 255;
	let b = rgb[2] / 255;

	// Assume sRGB
	r = r > 0.04045 ? (((r + 0.055) / 1.055) ** 2.4) : (r / 12.92);
	g = g > 0.04045 ? (((g + 0.055) / 1.055) ** 2.4) : (g / 12.92);
	b = b > 0.04045 ? (((b + 0.055) / 1.055) ** 2.4) : (b / 12.92);

	const x = (r * 0.4124) + (g * 0.3576) + (b * 0.1805);
	const y = (r * 0.2126) + (g * 0.7152) + (b * 0.0722);
	const z = (r * 0.0193) + (g * 0.1192) + (b * 0.9505);

	return [x * 100, y * 100, z * 100];
};

convert$2.rgb.lab = function (rgb) {
	const xyz = convert$2.rgb.xyz(rgb);
	let x = xyz[0];
	let y = xyz[1];
	let z = xyz[2];

	x /= 95.047;
	y /= 100;
	z /= 108.883;

	x = x > 0.008856 ? (x ** (1 / 3)) : (7.787 * x) + (16 / 116);
	y = y > 0.008856 ? (y ** (1 / 3)) : (7.787 * y) + (16 / 116);
	z = z > 0.008856 ? (z ** (1 / 3)) : (7.787 * z) + (16 / 116);

	const l = (116 * y) - 16;
	const a = 500 * (x - y);
	const b = 200 * (y - z);

	return [l, a, b];
};

convert$2.hsl.rgb = function (hsl) {
	const h = hsl[0] / 360;
	const s = hsl[1] / 100;
	const l = hsl[2] / 100;
	let t2;
	let t3;
	let val;

	if (s === 0) {
		val = l * 255;
		return [val, val, val];
	}

	if (l < 0.5) {
		t2 = l * (1 + s);
	} else {
		t2 = l + s - l * s;
	}

	const t1 = 2 * l - t2;

	const rgb = [0, 0, 0];
	for (let i = 0; i < 3; i++) {
		t3 = h + 1 / 3 * -(i - 1);
		if (t3 < 0) {
			t3++;
		}

		if (t3 > 1) {
			t3--;
		}

		if (6 * t3 < 1) {
			val = t1 + (t2 - t1) * 6 * t3;
		} else if (2 * t3 < 1) {
			val = t2;
		} else if (3 * t3 < 2) {
			val = t1 + (t2 - t1) * (2 / 3 - t3) * 6;
		} else {
			val = t1;
		}

		rgb[i] = val * 255;
	}

	return rgb;
};

convert$2.hsl.hsv = function (hsl) {
	const h = hsl[0];
	let s = hsl[1] / 100;
	let l = hsl[2] / 100;
	let smin = s;
	const lmin = Math.max(l, 0.01);

	l *= 2;
	s *= (l <= 1) ? l : 2 - l;
	smin *= lmin <= 1 ? lmin : 2 - lmin;
	const v = (l + s) / 2;
	const sv = l === 0 ? (2 * smin) / (lmin + smin) : (2 * s) / (l + s);

	return [h, sv * 100, v * 100];
};

convert$2.hsv.rgb = function (hsv) {
	const h = hsv[0] / 60;
	const s = hsv[1] / 100;
	let v = hsv[2] / 100;
	const hi = Math.floor(h) % 6;

	const f = h - Math.floor(h);
	const p = 255 * v * (1 - s);
	const q = 255 * v * (1 - (s * f));
	const t = 255 * v * (1 - (s * (1 - f)));
	v *= 255;

	switch (hi) {
		case 0:
			return [v, t, p];
		case 1:
			return [q, v, p];
		case 2:
			return [p, v, t];
		case 3:
			return [p, q, v];
		case 4:
			return [t, p, v];
		case 5:
			return [v, p, q];
	}
};

convert$2.hsv.hsl = function (hsv) {
	const h = hsv[0];
	const s = hsv[1] / 100;
	const v = hsv[2] / 100;
	const vmin = Math.max(v, 0.01);
	let sl;
	let l;

	l = (2 - s) * v;
	const lmin = (2 - s) * vmin;
	sl = s * vmin;
	sl /= (lmin <= 1) ? lmin : 2 - lmin;
	sl = sl || 0;
	l /= 2;

	return [h, sl * 100, l * 100];
};

// http://dev.w3.org/csswg/css-color/#hwb-to-rgb
convert$2.hwb.rgb = function (hwb) {
	const h = hwb[0] / 360;
	let wh = hwb[1] / 100;
	let bl = hwb[2] / 100;
	const ratio = wh + bl;
	let f;

	// Wh + bl cant be > 1
	if (ratio > 1) {
		wh /= ratio;
		bl /= ratio;
	}

	const i = Math.floor(6 * h);
	const v = 1 - bl;
	f = 6 * h - i;

	if ((i & 0x01) !== 0) {
		f = 1 - f;
	}

	const n = wh + f * (v - wh); // Linear interpolation

	let r;
	let g;
	let b;
	/* eslint-disable max-statements-per-line,no-multi-spaces */
	switch (i) {
		default:
		case 6:
		case 0: r = v;  g = n;  b = wh; break;
		case 1: r = n;  g = v;  b = wh; break;
		case 2: r = wh; g = v;  b = n; break;
		case 3: r = wh; g = n;  b = v; break;
		case 4: r = n;  g = wh; b = v; break;
		case 5: r = v;  g = wh; b = n; break;
	}
	/* eslint-enable max-statements-per-line,no-multi-spaces */

	return [r * 255, g * 255, b * 255];
};

convert$2.cmyk.rgb = function (cmyk) {
	const c = cmyk[0] / 100;
	const m = cmyk[1] / 100;
	const y = cmyk[2] / 100;
	const k = cmyk[3] / 100;

	const r = 1 - Math.min(1, c * (1 - k) + k);
	const g = 1 - Math.min(1, m * (1 - k) + k);
	const b = 1 - Math.min(1, y * (1 - k) + k);

	return [r * 255, g * 255, b * 255];
};

convert$2.xyz.rgb = function (xyz) {
	const x = xyz[0] / 100;
	const y = xyz[1] / 100;
	const z = xyz[2] / 100;
	let r;
	let g;
	let b;

	r = (x * 3.2406) + (y * -1.5372) + (z * -0.4986);
	g = (x * -0.9689) + (y * 1.8758) + (z * 0.0415);
	b = (x * 0.0557) + (y * -0.2040) + (z * 1.0570);

	// Assume sRGB
	r = r > 0.0031308
		? ((1.055 * (r ** (1.0 / 2.4))) - 0.055)
		: r * 12.92;

	g = g > 0.0031308
		? ((1.055 * (g ** (1.0 / 2.4))) - 0.055)
		: g * 12.92;

	b = b > 0.0031308
		? ((1.055 * (b ** (1.0 / 2.4))) - 0.055)
		: b * 12.92;

	r = Math.min(Math.max(0, r), 1);
	g = Math.min(Math.max(0, g), 1);
	b = Math.min(Math.max(0, b), 1);

	return [r * 255, g * 255, b * 255];
};

convert$2.xyz.lab = function (xyz) {
	let x = xyz[0];
	let y = xyz[1];
	let z = xyz[2];

	x /= 95.047;
	y /= 100;
	z /= 108.883;

	x = x > 0.008856 ? (x ** (1 / 3)) : (7.787 * x) + (16 / 116);
	y = y > 0.008856 ? (y ** (1 / 3)) : (7.787 * y) + (16 / 116);
	z = z > 0.008856 ? (z ** (1 / 3)) : (7.787 * z) + (16 / 116);

	const l = (116 * y) - 16;
	const a = 500 * (x - y);
	const b = 200 * (y - z);

	return [l, a, b];
};

convert$2.lab.xyz = function (lab) {
	const l = lab[0];
	const a = lab[1];
	const b = lab[2];
	let x;
	let y;
	let z;

	y = (l + 16) / 116;
	x = a / 500 + y;
	z = y - b / 200;

	const y2 = y ** 3;
	const x2 = x ** 3;
	const z2 = z ** 3;
	y = y2 > 0.008856 ? y2 : (y - 16 / 116) / 7.787;
	x = x2 > 0.008856 ? x2 : (x - 16 / 116) / 7.787;
	z = z2 > 0.008856 ? z2 : (z - 16 / 116) / 7.787;

	x *= 95.047;
	y *= 100;
	z *= 108.883;

	return [x, y, z];
};

convert$2.lab.lch = function (lab) {
	const l = lab[0];
	const a = lab[1];
	const b = lab[2];
	let h;

	const hr = Math.atan2(b, a);
	h = hr * 360 / 2 / Math.PI;

	if (h < 0) {
		h += 360;
	}

	const c = Math.sqrt(a * a + b * b);

	return [l, c, h];
};

convert$2.lch.lab = function (lch) {
	const l = lch[0];
	const c = lch[1];
	const h = lch[2];

	const hr = h / 360 * 2 * Math.PI;
	const a = c * Math.cos(hr);
	const b = c * Math.sin(hr);

	return [l, a, b];
};

convert$2.rgb.ansi16 = function (args, saturation = null) {
	const [r, g, b] = args;
	let value = saturation === null ? convert$2.rgb.hsv(args)[2] : saturation; // Hsv -> ansi16 optimization

	value = Math.round(value / 50);

	if (value === 0) {
		return 30;
	}

	let ansi = 30
		+ ((Math.round(b / 255) << 2)
		| (Math.round(g / 255) << 1)
		| Math.round(r / 255));

	if (value === 2) {
		ansi += 60;
	}

	return ansi;
};

convert$2.hsv.ansi16 = function (args) {
	// Optimization here; we already know the value and don't need to get
	// it converted for us.
	return convert$2.rgb.ansi16(convert$2.hsv.rgb(args), args[2]);
};

convert$2.rgb.ansi256 = function (args) {
	const r = args[0];
	const g = args[1];
	const b = args[2];

	// We use the extended greyscale palette here, with the exception of
	// black and white. normal palette only has 4 greyscale shades.
	if (r === g && g === b) {
		if (r < 8) {
			return 16;
		}

		if (r > 248) {
			return 231;
		}

		return Math.round(((r - 8) / 247) * 24) + 232;
	}

	const ansi = 16
		+ (36 * Math.round(r / 255 * 5))
		+ (6 * Math.round(g / 255 * 5))
		+ Math.round(b / 255 * 5);

	return ansi;
};

convert$2.ansi16.rgb = function (args) {
	let color = args % 10;

	// Handle greyscale
	if (color === 0 || color === 7) {
		if (args > 50) {
			color += 3.5;
		}

		color = color / 10.5 * 255;

		return [color, color, color];
	}

	const mult = (~~(args > 50) + 1) * 0.5;
	const r = ((color & 1) * mult) * 255;
	const g = (((color >> 1) & 1) * mult) * 255;
	const b = (((color >> 2) & 1) * mult) * 255;

	return [r, g, b];
};

convert$2.ansi256.rgb = function (args) {
	// Handle greyscale
	if (args >= 232) {
		const c = (args - 232) * 10 + 8;
		return [c, c, c];
	}

	args -= 16;

	let rem;
	const r = Math.floor(args / 36) / 5 * 255;
	const g = Math.floor((rem = args % 36) / 6) / 5 * 255;
	const b = (rem % 6) / 5 * 255;

	return [r, g, b];
};

convert$2.rgb.hex = function (args) {
	const integer = ((Math.round(args[0]) & 0xFF) << 16)
		+ ((Math.round(args[1]) & 0xFF) << 8)
		+ (Math.round(args[2]) & 0xFF);

	const string = integer.toString(16).toUpperCase();
	return '000000'.substring(string.length) + string;
};

convert$2.hex.rgb = function (args) {
	const match = args.toString(16).match(/[a-f0-9]{6}|[a-f0-9]{3}/i);
	if (!match) {
		return [0, 0, 0];
	}

	let colorString = match[0];

	if (match[0].length === 3) {
		colorString = colorString.split('').map(char => {
			return char + char;
		}).join('');
	}

	const integer = parseInt(colorString, 16);
	const r = (integer >> 16) & 0xFF;
	const g = (integer >> 8) & 0xFF;
	const b = integer & 0xFF;

	return [r, g, b];
};

convert$2.rgb.hcg = function (rgb) {
	const r = rgb[0] / 255;
	const g = rgb[1] / 255;
	const b = rgb[2] / 255;
	const max = Math.max(Math.max(r, g), b);
	const min = Math.min(Math.min(r, g), b);
	const chroma = (max - min);
	let grayscale;
	let hue;

	if (chroma < 1) {
		grayscale = min / (1 - chroma);
	} else {
		grayscale = 0;
	}

	if (chroma <= 0) {
		hue = 0;
	} else
	if (max === r) {
		hue = ((g - b) / chroma) % 6;
	} else
	if (max === g) {
		hue = 2 + (b - r) / chroma;
	} else {
		hue = 4 + (r - g) / chroma;
	}

	hue /= 6;
	hue %= 1;

	return [hue * 360, chroma * 100, grayscale * 100];
};

convert$2.hsl.hcg = function (hsl) {
	const s = hsl[1] / 100;
	const l = hsl[2] / 100;

	const c = l < 0.5 ? (2.0 * s * l) : (2.0 * s * (1.0 - l));

	let f = 0;
	if (c < 1.0) {
		f = (l - 0.5 * c) / (1.0 - c);
	}

	return [hsl[0], c * 100, f * 100];
};

convert$2.hsv.hcg = function (hsv) {
	const s = hsv[1] / 100;
	const v = hsv[2] / 100;

	const c = s * v;
	let f = 0;

	if (c < 1.0) {
		f = (v - c) / (1 - c);
	}

	return [hsv[0], c * 100, f * 100];
};

convert$2.hcg.rgb = function (hcg) {
	const h = hcg[0] / 360;
	const c = hcg[1] / 100;
	const g = hcg[2] / 100;

	if (c === 0.0) {
		return [g * 255, g * 255, g * 255];
	}

	const pure = [0, 0, 0];
	const hi = (h % 1) * 6;
	const v = hi % 1;
	const w = 1 - v;
	let mg = 0;

	/* eslint-disable max-statements-per-line */
	switch (Math.floor(hi)) {
		case 0:
			pure[0] = 1; pure[1] = v; pure[2] = 0; break;
		case 1:
			pure[0] = w; pure[1] = 1; pure[2] = 0; break;
		case 2:
			pure[0] = 0; pure[1] = 1; pure[2] = v; break;
		case 3:
			pure[0] = 0; pure[1] = w; pure[2] = 1; break;
		case 4:
			pure[0] = v; pure[1] = 0; pure[2] = 1; break;
		default:
			pure[0] = 1; pure[1] = 0; pure[2] = w;
	}
	/* eslint-enable max-statements-per-line */

	mg = (1.0 - c) * g;

	return [
		(c * pure[0] + mg) * 255,
		(c * pure[1] + mg) * 255,
		(c * pure[2] + mg) * 255
	];
};

convert$2.hcg.hsv = function (hcg) {
	const c = hcg[1] / 100;
	const g = hcg[2] / 100;

	const v = c + g * (1.0 - c);
	let f = 0;

	if (v > 0.0) {
		f = c / v;
	}

	return [hcg[0], f * 100, v * 100];
};

convert$2.hcg.hsl = function (hcg) {
	const c = hcg[1] / 100;
	const g = hcg[2] / 100;

	const l = g * (1.0 - c) + 0.5 * c;
	let s = 0;

	if (l > 0.0 && l < 0.5) {
		s = c / (2 * l);
	} else
	if (l >= 0.5 && l < 1.0) {
		s = c / (2 * (1 - l));
	}

	return [hcg[0], s * 100, l * 100];
};

convert$2.hcg.hwb = function (hcg) {
	const c = hcg[1] / 100;
	const g = hcg[2] / 100;
	const v = c + g * (1.0 - c);
	return [hcg[0], (v - c) * 100, (1 - v) * 100];
};

convert$2.hwb.hcg = function (hwb) {
	const w = hwb[1] / 100;
	const b = hwb[2] / 100;
	const v = 1 - b;
	const c = v - w;
	let g = 0;

	if (c < 1) {
		g = (v - c) / (1 - c);
	}

	return [hwb[0], c * 100, g * 100];
};

convert$2.apple.rgb = function (apple) {
	return [(apple[0] / 65535) * 255, (apple[1] / 65535) * 255, (apple[2] / 65535) * 255];
};

convert$2.rgb.apple = function (rgb) {
	return [(rgb[0] / 255) * 65535, (rgb[1] / 255) * 65535, (rgb[2] / 255) * 65535];
};

convert$2.gray.rgb = function (args) {
	return [args[0] / 100 * 255, args[0] / 100 * 255, args[0] / 100 * 255];
};

convert$2.gray.hsl = function (args) {
	return [0, 0, args[0]];
};

convert$2.gray.hsv = convert$2.gray.hsl;

convert$2.gray.hwb = function (gray) {
	return [0, 100, gray[0]];
};

convert$2.gray.cmyk = function (gray) {
	return [0, 0, 0, gray[0]];
};

convert$2.gray.lab = function (gray) {
	return [gray[0], 0, 0];
};

convert$2.gray.hex = function (gray) {
	const val = Math.round(gray[0] / 100 * 255) & 0xFF;
	const integer = (val << 16) + (val << 8) + val;

	const string = integer.toString(16).toUpperCase();
	return '000000'.substring(string.length) + string;
};

convert$2.rgb.gray = function (rgb) {
	const val = (rgb[0] + rgb[1] + rgb[2]) / 3;
	return [val / 255 * 100];
};

const conversions$1 = conversions$2;

/*
	This function routes a model to all other models.

	all functions that are routed have a property `.conversion` attached
	to the returned synthetic function. This property is an array
	of strings, each with the steps in between the 'from' and 'to'
	color models (inclusive).

	conversions that are not possible simply are not included.
*/

function buildGraph() {
	const graph = {};
	// https://jsperf.com/object-keys-vs-for-in-with-closure/3
	const models = Object.keys(conversions$1);

	for (let len = models.length, i = 0; i < len; i++) {
		graph[models[i]] = {
			// http://jsperf.com/1-vs-infinity
			// micro-opt, but this is simple.
			distance: -1,
			parent: null
		};
	}

	return graph;
}

// https://en.wikipedia.org/wiki/Breadth-first_search
function deriveBFS(fromModel) {
	const graph = buildGraph();
	const queue = [fromModel]; // Unshift -> queue -> pop

	graph[fromModel].distance = 0;

	while (queue.length) {
		const current = queue.pop();
		const adjacents = Object.keys(conversions$1[current]);

		for (let len = adjacents.length, i = 0; i < len; i++) {
			const adjacent = adjacents[i];
			const node = graph[adjacent];

			if (node.distance === -1) {
				node.distance = graph[current].distance + 1;
				node.parent = current;
				queue.unshift(adjacent);
			}
		}
	}

	return graph;
}

function link(from, to) {
	return function (args) {
		return to(from(args));
	};
}

function wrapConversion(toModel, graph) {
	const path = [graph[toModel].parent, toModel];
	let fn = conversions$1[graph[toModel].parent][toModel];

	let cur = graph[toModel].parent;
	while (graph[cur].parent) {
		path.unshift(graph[cur].parent);
		fn = link(conversions$1[graph[cur].parent][cur], fn);
		cur = graph[cur].parent;
	}

	fn.conversion = path;
	return fn;
}

var route$1 = function (fromModel) {
	const graph = deriveBFS(fromModel);
	const conversion = {};

	const models = Object.keys(graph);
	for (let len = models.length, i = 0; i < len; i++) {
		const toModel = models[i];
		const node = graph[toModel];

		if (node.parent === null) {
			// No possible conversion, or this node is the source model.
			continue;
		}

		conversion[toModel] = wrapConversion(toModel, graph);
	}

	return conversion;
};

const conversions = conversions$2;
const route = route$1;

const convert$1 = {};

const models = Object.keys(conversions);

function wrapRaw(fn) {
	const wrappedFn = function (...args) {
		const arg0 = args[0];
		if (arg0 === undefined || arg0 === null) {
			return arg0;
		}

		if (arg0.length > 1) {
			args = arg0;
		}

		return fn(args);
	};

	// Preserve .conversion property if there is one
	if ('conversion' in fn) {
		wrappedFn.conversion = fn.conversion;
	}

	return wrappedFn;
}

function wrapRounded(fn) {
	const wrappedFn = function (...args) {
		const arg0 = args[0];

		if (arg0 === undefined || arg0 === null) {
			return arg0;
		}

		if (arg0.length > 1) {
			args = arg0;
		}

		const result = fn(args);

		// We're assuming the result is an array here.
		// see notice in conversions.js; don't use box types
		// in conversion functions.
		if (typeof result === 'object') {
			for (let len = result.length, i = 0; i < len; i++) {
				result[i] = Math.round(result[i]);
			}
		}

		return result;
	};

	// Preserve .conversion property if there is one
	if ('conversion' in fn) {
		wrappedFn.conversion = fn.conversion;
	}

	return wrappedFn;
}

models.forEach(fromModel => {
	convert$1[fromModel] = {};

	Object.defineProperty(convert$1[fromModel], 'channels', {value: conversions[fromModel].channels});
	Object.defineProperty(convert$1[fromModel], 'labels', {value: conversions[fromModel].labels});

	const routes = route(fromModel);
	const routeModels = Object.keys(routes);

	routeModels.forEach(toModel => {
		const fn = routes[toModel];

		convert$1[fromModel][toModel] = wrapRounded(fn);
		convert$1[fromModel][toModel].raw = wrapRaw(fn);
	});
});

var colorConvert = convert$1;

const colorString = colorStringExports;
const convert = colorConvert;

const skippedModels = [
	// To be honest, I don't really feel like keyword belongs in color convert, but eh.
	'keyword',

	// Gray conflicts with some method names, and has its own method defined.
	'gray',

	// Shouldn't really be in color-convert either...
	'hex',
];

const hashedModelKeys = {};
for (const model of Object.keys(convert)) {
	hashedModelKeys[[...convert[model].labels].sort().join('')] = model;
}

const limiters = {};

function Color(object, model) {
	if (!(this instanceof Color)) {
		return new Color(object, model);
	}

	if (model && model in skippedModels) {
		model = null;
	}

	if (model && !(model in convert)) {
		throw new Error('Unknown model: ' + model);
	}

	let i;
	let channels;

	if (object == null) { // eslint-disable-line no-eq-null,eqeqeq
		this.model = 'rgb';
		this.color = [0, 0, 0];
		this.valpha = 1;
	} else if (object instanceof Color) {
		this.model = object.model;
		this.color = [...object.color];
		this.valpha = object.valpha;
	} else if (typeof object === 'string') {
		const result = colorString.get(object);
		if (result === null) {
			throw new Error('Unable to parse color from string: ' + object);
		}

		this.model = result.model;
		channels = convert[this.model].channels;
		this.color = result.value.slice(0, channels);
		this.valpha = typeof result.value[channels] === 'number' ? result.value[channels] : 1;
	} else if (object.length > 0) {
		this.model = model || 'rgb';
		channels = convert[this.model].channels;
		const newArray = Array.prototype.slice.call(object, 0, channels);
		this.color = zeroArray(newArray, channels);
		this.valpha = typeof object[channels] === 'number' ? object[channels] : 1;
	} else if (typeof object === 'number') {
		// This is always RGB - can be converted later on.
		this.model = 'rgb';
		this.color = [
			(object >> 16) & 0xFF,
			(object >> 8) & 0xFF,
			object & 0xFF,
		];
		this.valpha = 1;
	} else {
		this.valpha = 1;

		const keys = Object.keys(object);
		if ('alpha' in object) {
			keys.splice(keys.indexOf('alpha'), 1);
			this.valpha = typeof object.alpha === 'number' ? object.alpha : 0;
		}

		const hashedKeys = keys.sort().join('');
		if (!(hashedKeys in hashedModelKeys)) {
			throw new Error('Unable to parse color from object: ' + JSON.stringify(object));
		}

		this.model = hashedModelKeys[hashedKeys];

		const {labels} = convert[this.model];
		const color = [];
		for (i = 0; i < labels.length; i++) {
			color.push(object[labels[i]]);
		}

		this.color = zeroArray(color);
	}

	// Perform limitations (clamping, etc.)
	if (limiters[this.model]) {
		channels = convert[this.model].channels;
		for (i = 0; i < channels; i++) {
			const limit = limiters[this.model][i];
			if (limit) {
				this.color[i] = limit(this.color[i]);
			}
		}
	}

	this.valpha = Math.max(0, Math.min(1, this.valpha));

	if (Object.freeze) {
		Object.freeze(this);
	}
}

Color.prototype = {
	toString() {
		return this.string();
	},

	toJSON() {
		return this[this.model]();
	},

	string(places) {
		let self = this.model in colorString.to ? this : this.rgb();
		self = self.round(typeof places === 'number' ? places : 1);
		const args = self.valpha === 1 ? self.color : [...self.color, this.valpha];
		return colorString.to[self.model](args);
	},

	percentString(places) {
		const self = this.rgb().round(typeof places === 'number' ? places : 1);
		const args = self.valpha === 1 ? self.color : [...self.color, this.valpha];
		return colorString.to.rgb.percent(args);
	},

	array() {
		return this.valpha === 1 ? [...this.color] : [...this.color, this.valpha];
	},

	object() {
		const result = {};
		const {channels} = convert[this.model];
		const {labels} = convert[this.model];

		for (let i = 0; i < channels; i++) {
			result[labels[i]] = this.color[i];
		}

		if (this.valpha !== 1) {
			result.alpha = this.valpha;
		}

		return result;
	},

	unitArray() {
		const rgb = this.rgb().color;
		rgb[0] /= 255;
		rgb[1] /= 255;
		rgb[2] /= 255;

		if (this.valpha !== 1) {
			rgb.push(this.valpha);
		}

		return rgb;
	},

	unitObject() {
		const rgb = this.rgb().object();
		rgb.r /= 255;
		rgb.g /= 255;
		rgb.b /= 255;

		if (this.valpha !== 1) {
			rgb.alpha = this.valpha;
		}

		return rgb;
	},

	round(places) {
		places = Math.max(places || 0, 0);
		return new Color([...this.color.map(roundToPlace(places)), this.valpha], this.model);
	},

	alpha(value) {
		if (value !== undefined) {
			return new Color([...this.color, Math.max(0, Math.min(1, value))], this.model);
		}

		return this.valpha;
	},

	// Rgb
	red: getset('rgb', 0, maxfn(255)),
	green: getset('rgb', 1, maxfn(255)),
	blue: getset('rgb', 2, maxfn(255)),

	hue: getset(['hsl', 'hsv', 'hsl', 'hwb', 'hcg'], 0, value => ((value % 360) + 360) % 360),

	saturationl: getset('hsl', 1, maxfn(100)),
	lightness: getset('hsl', 2, maxfn(100)),

	saturationv: getset('hsv', 1, maxfn(100)),
	value: getset('hsv', 2, maxfn(100)),

	chroma: getset('hcg', 1, maxfn(100)),
	gray: getset('hcg', 2, maxfn(100)),

	white: getset('hwb', 1, maxfn(100)),
	wblack: getset('hwb', 2, maxfn(100)),

	cyan: getset('cmyk', 0, maxfn(100)),
	magenta: getset('cmyk', 1, maxfn(100)),
	yellow: getset('cmyk', 2, maxfn(100)),
	black: getset('cmyk', 3, maxfn(100)),

	x: getset('xyz', 0, maxfn(95.047)),
	y: getset('xyz', 1, maxfn(100)),
	z: getset('xyz', 2, maxfn(108.833)),

	l: getset('lab', 0, maxfn(100)),
	a: getset('lab', 1),
	b: getset('lab', 2),

	keyword(value) {
		if (value !== undefined) {
			return new Color(value);
		}

		return convert[this.model].keyword(this.color);
	},

	hex(value) {
		if (value !== undefined) {
			return new Color(value);
		}

		return colorString.to.hex(this.rgb().round().color);
	},

	hexa(value) {
		if (value !== undefined) {
			return new Color(value);
		}

		const rgbArray = this.rgb().round().color;

		let alphaHex = Math.round(this.valpha * 255).toString(16).toUpperCase();
		if (alphaHex.length === 1) {
			alphaHex = '0' + alphaHex;
		}

		return colorString.to.hex(rgbArray) + alphaHex;
	},

	rgbNumber() {
		const rgb = this.rgb().color;
		return ((rgb[0] & 0xFF) << 16) | ((rgb[1] & 0xFF) << 8) | (rgb[2] & 0xFF);
	},

	luminosity() {
		// http://www.w3.org/TR/WCAG20/#relativeluminancedef
		const rgb = this.rgb().color;

		const lum = [];
		for (const [i, element] of rgb.entries()) {
			const chan = element / 255;
			lum[i] = (chan <= 0.04045) ? chan / 12.92 : ((chan + 0.055) / 1.055) ** 2.4;
		}

		return 0.2126 * lum[0] + 0.7152 * lum[1] + 0.0722 * lum[2];
	},

	contrast(color2) {
		// http://www.w3.org/TR/WCAG20/#contrast-ratiodef
		const lum1 = this.luminosity();
		const lum2 = color2.luminosity();

		if (lum1 > lum2) {
			return (lum1 + 0.05) / (lum2 + 0.05);
		}

		return (lum2 + 0.05) / (lum1 + 0.05);
	},

	level(color2) {
		// https://www.w3.org/TR/WCAG/#contrast-enhanced
		const contrastRatio = this.contrast(color2);
		if (contrastRatio >= 7) {
			return 'AAA';
		}

		return (contrastRatio >= 4.5) ? 'AA' : '';
	},

	isDark() {
		// YIQ equation from http://24ways.org/2010/calculating-color-contrast
		const rgb = this.rgb().color;
		const yiq = (rgb[0] * 2126 + rgb[1] * 7152 + rgb[2] * 722) / 10000;
		return yiq < 128;
	},

	isLight() {
		return !this.isDark();
	},

	negate() {
		const rgb = this.rgb();
		for (let i = 0; i < 3; i++) {
			rgb.color[i] = 255 - rgb.color[i];
		}

		return rgb;
	},

	lighten(ratio) {
		const hsl = this.hsl();
		hsl.color[2] += hsl.color[2] * ratio;
		return hsl;
	},

	darken(ratio) {
		const hsl = this.hsl();
		hsl.color[2] -= hsl.color[2] * ratio;
		return hsl;
	},

	saturate(ratio) {
		const hsl = this.hsl();
		hsl.color[1] += hsl.color[1] * ratio;
		return hsl;
	},

	desaturate(ratio) {
		const hsl = this.hsl();
		hsl.color[1] -= hsl.color[1] * ratio;
		return hsl;
	},

	whiten(ratio) {
		const hwb = this.hwb();
		hwb.color[1] += hwb.color[1] * ratio;
		return hwb;
	},

	blacken(ratio) {
		const hwb = this.hwb();
		hwb.color[2] += hwb.color[2] * ratio;
		return hwb;
	},

	grayscale() {
		// http://en.wikipedia.org/wiki/Grayscale#Converting_color_to_grayscale
		const rgb = this.rgb().color;
		const value = rgb[0] * 0.3 + rgb[1] * 0.59 + rgb[2] * 0.11;
		return Color.rgb(value, value, value);
	},

	fade(ratio) {
		return this.alpha(this.valpha - (this.valpha * ratio));
	},

	opaquer(ratio) {
		return this.alpha(this.valpha + (this.valpha * ratio));
	},

	rotate(degrees) {
		const hsl = this.hsl();
		let hue = hsl.color[0];
		hue = (hue + degrees) % 360;
		hue = hue < 0 ? 360 + hue : hue;
		hsl.color[0] = hue;
		return hsl;
	},

	mix(mixinColor, weight) {
		// Ported from sass implementation in C
		// https://github.com/sass/libsass/blob/0e6b4a2850092356aa3ece07c6b249f0221caced/functions.cpp#L209
		if (!mixinColor || !mixinColor.rgb) {
			throw new Error('Argument to "mix" was not a Color instance, but rather an instance of ' + typeof mixinColor);
		}

		const color1 = mixinColor.rgb();
		const color2 = this.rgb();
		const p = weight === undefined ? 0.5 : weight;

		const w = 2 * p - 1;
		const a = color1.alpha() - color2.alpha();

		const w1 = (((w * a === -1) ? w : (w + a) / (1 + w * a)) + 1) / 2;
		const w2 = 1 - w1;

		return Color.rgb(
			w1 * color1.red() + w2 * color2.red(),
			w1 * color1.green() + w2 * color2.green(),
			w1 * color1.blue() + w2 * color2.blue(),
			color1.alpha() * p + color2.alpha() * (1 - p));
	},
};

// Model conversion methods and static constructors
for (const model of Object.keys(convert)) {
	if (skippedModels.includes(model)) {
		continue;
	}

	const {channels} = convert[model];

	// Conversion methods
	Color.prototype[model] = function (...args) {
		if (this.model === model) {
			return new Color(this);
		}

		if (args.length > 0) {
			return new Color(args, model);
		}

		return new Color([...assertArray(convert[this.model][model].raw(this.color)), this.valpha], model);
	};

	// 'static' construction methods
	Color[model] = function (...args) {
		let color = args[0];
		if (typeof color === 'number') {
			color = zeroArray(args, channels);
		}

		return new Color(color, model);
	};
}

function roundTo(number, places) {
	return Number(number.toFixed(places));
}

function roundToPlace(places) {
	return function (number) {
		return roundTo(number, places);
	};
}

function getset(model, channel, modifier) {
	model = Array.isArray(model) ? model : [model];

	for (const m of model) {
		(limiters[m] || (limiters[m] = []))[channel] = modifier;
	}

	model = model[0];

	return function (value) {
		let result;

		if (value !== undefined) {
			if (modifier) {
				value = modifier(value);
			}

			result = this[model]();
			result.color[channel] = value;
			return result;
		}

		result = this[model]().color[channel];
		if (modifier) {
			result = modifier(result);
		}

		return result;
	};
}

function maxfn(max) {
	return function (v) {
		return Math.max(0, Math.min(max, v));
	};
}

function assertArray(value) {
	return Array.isArray(value) ? value : [value];
}

function zeroArray(array, length) {
	for (let i = 0; i < length; i++) {
		if (typeof array[i] !== 'number') {
			array[i] = 0;
		}
	}

	return array;
}

var color = Color;

var Color$1 = /*@__PURE__*/getDefaultExportFromCjs(color);

/**
 * lodash (Custom Build) <https://lodash.com/>
 * Build: `lodash modularize exports="npm" -o ./`
 * Copyright jQuery Foundation and other contributors <https://jquery.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */

/** Used as references for various `Number` constants. */
var MAX_SAFE_INTEGER = 9007199254740991;

/** `Object#toString` result references. */
var argsTag = '[object Arguments]',
    funcTag = '[object Function]',
    genTag = '[object GeneratorFunction]';

/** Used to detect unsigned integer values. */
var reIsUint = /^(?:0|[1-9]\d*)$/;

/**
 * A specialized version of `_.forEach` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns `array`.
 */
function arrayEach(array, iteratee) {
  var index = -1,
      length = array ? array.length : 0;

  while (++index < length) {
    if (iteratee(array[index], index, array) === false) {
      break;
    }
  }
  return array;
}

/**
 * The base implementation of `_.times` without support for iteratee shorthands
 * or max array length checks.
 *
 * @private
 * @param {number} n The number of times to invoke `iteratee`.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the array of results.
 */
function baseTimes(n, iteratee) {
  var index = -1,
      result = Array(n);

  while (++index < n) {
    result[index] = iteratee(index);
  }
  return result;
}

/**
 * Creates a unary function that invokes `func` with its argument transformed.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {Function} transform The argument transform.
 * @returns {Function} Returns the new function.
 */
function overArg(func, transform) {
  return function(arg) {
    return func(transform(arg));
  };
}

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var objectToString = objectProto.toString;

/** Built-in value references. */
var propertyIsEnumerable = objectProto.propertyIsEnumerable;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeKeys = overArg(Object.keys, Object);

/**
 * Creates an array of the enumerable property names of the array-like `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @param {boolean} inherited Specify returning inherited property names.
 * @returns {Array} Returns the array of property names.
 */
function arrayLikeKeys(value, inherited) {
  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.
  // Safari 9 makes `arguments.length` enumerable in strict mode.
  var result = (isArray(value) || isArguments(value))
    ? baseTimes(value.length, String)
    : [];

  var length = result.length,
      skipIndexes = !!length;

  for (var key in value) {
    if ((inherited || hasOwnProperty.call(value, key)) &&
        !(skipIndexes && (key == 'length' || isIndex(key, length)))) {
      result.push(key);
    }
  }
  return result;
}

/**
 * The base implementation of `_.forEach` without support for iteratee shorthands.
 *
 * @private
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array|Object} Returns `collection`.
 */
var baseEach = createBaseEach(baseForOwn);

/**
 * The base implementation of `baseForOwn` which iterates over `object`
 * properties returned by `keysFunc` and invokes `iteratee` for each property.
 * Iteratee functions may exit iteration early by explicitly returning `false`.
 *
 * @private
 * @param {Object} object The object to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @param {Function} keysFunc The function to get the keys of `object`.
 * @returns {Object} Returns `object`.
 */
var baseFor = createBaseFor();

/**
 * The base implementation of `_.forOwn` without support for iteratee shorthands.
 *
 * @private
 * @param {Object} object The object to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Object} Returns `object`.
 */
function baseForOwn(object, iteratee) {
  return object && baseFor(object, iteratee, keys);
}

/**
 * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */
function baseKeys(object) {
  if (!isPrototype(object)) {
    return nativeKeys(object);
  }
  var result = [];
  for (var key in Object(object)) {
    if (hasOwnProperty.call(object, key) && key != 'constructor') {
      result.push(key);
    }
  }
  return result;
}

/**
 * Creates a `baseEach` or `baseEachRight` function.
 *
 * @private
 * @param {Function} eachFunc The function to iterate over a collection.
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {Function} Returns the new base function.
 */
function createBaseEach(eachFunc, fromRight) {
  return function(collection, iteratee) {
    if (collection == null) {
      return collection;
    }
    if (!isArrayLike(collection)) {
      return eachFunc(collection, iteratee);
    }
    var length = collection.length,
        index = fromRight ? length : -1,
        iterable = Object(collection);

    while ((fromRight ? index-- : ++index < length)) {
      if (iteratee(iterable[index], index, iterable) === false) {
        break;
      }
    }
    return collection;
  };
}

/**
 * Creates a base function for methods like `_.forIn` and `_.forOwn`.
 *
 * @private
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {Function} Returns the new base function.
 */
function createBaseFor(fromRight) {
  return function(object, iteratee, keysFunc) {
    var index = -1,
        iterable = Object(object),
        props = keysFunc(object),
        length = props.length;

    while (length--) {
      var key = props[fromRight ? length : ++index];
      if (iteratee(iterable[key], key, iterable) === false) {
        break;
      }
    }
    return object;
  };
}

/**
 * Checks if `value` is a valid array-like index.
 *
 * @private
 * @param {*} value The value to check.
 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
 */
function isIndex(value, length) {
  length = length == null ? MAX_SAFE_INTEGER : length;
  return !!length &&
    (typeof value == 'number' || reIsUint.test(value)) &&
    (value > -1 && value % 1 == 0 && value < length);
}

/**
 * Checks if `value` is likely a prototype object.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
 */
function isPrototype(value) {
  var Ctor = value && value.constructor,
      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

  return value === proto;
}

/**
 * Iterates over elements of `collection` and invokes `iteratee` for each element.
 * The iteratee is invoked with three arguments: (value, index|key, collection).
 * Iteratee functions may exit iteration early by explicitly returning `false`.
 *
 * **Note:** As with other "Collections" methods, objects with a "length"
 * property are iterated like arrays. To avoid this behavior use `_.forIn`
 * or `_.forOwn` for object iteration.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @alias each
 * @category Collection
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
 * @returns {Array|Object} Returns `collection`.
 * @see _.forEachRight
 * @example
 *
 * _([1, 2]).forEach(function(value) {
 *   console.log(value);
 * });
 * // => Logs `1` then `2`.
 *
 * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {
 *   console.log(key);
 * });
 * // => Logs 'a' then 'b' (iteration order is not guaranteed).
 */
function forEach(collection, iteratee) {
  var func = isArray(collection) ? arrayEach : baseEach;
  return func(collection, typeof iteratee == 'function' ? iteratee : identity);
}

/**
 * Checks if `value` is likely an `arguments` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 *  else `false`.
 * @example
 *
 * _.isArguments(function() { return arguments; }());
 * // => true
 *
 * _.isArguments([1, 2, 3]);
 * // => false
 */
function isArguments(value) {
  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.
  return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') &&
    (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);
}

/**
 * Checks if `value` is classified as an `Array` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
 * @example
 *
 * _.isArray([1, 2, 3]);
 * // => true
 *
 * _.isArray(document.body.children);
 * // => false
 *
 * _.isArray('abc');
 * // => false
 *
 * _.isArray(_.noop);
 * // => false
 */
var isArray = Array.isArray;

/**
 * Checks if `value` is array-like. A value is considered array-like if it's
 * not a function and has a `value.length` that's an integer greater than or
 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
 * @example
 *
 * _.isArrayLike([1, 2, 3]);
 * // => true
 *
 * _.isArrayLike(document.body.children);
 * // => true
 *
 * _.isArrayLike('abc');
 * // => true
 *
 * _.isArrayLike(_.noop);
 * // => false
 */
function isArrayLike(value) {
  return value != null && isLength(value.length) && !isFunction(value);
}

/**
 * This method is like `_.isArrayLike` except that it also checks if `value`
 * is an object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array-like object,
 *  else `false`.
 * @example
 *
 * _.isArrayLikeObject([1, 2, 3]);
 * // => true
 *
 * _.isArrayLikeObject(document.body.children);
 * // => true
 *
 * _.isArrayLikeObject('abc');
 * // => false
 *
 * _.isArrayLikeObject(_.noop);
 * // => false
 */
function isArrayLikeObject(value) {
  return isObjectLike(value) && isArrayLike(value);
}

/**
 * Checks if `value` is classified as a `Function` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
 * @example
 *
 * _.isFunction(_);
 * // => true
 *
 * _.isFunction(/abc/);
 * // => false
 */
function isFunction(value) {
  // The use of `Object#toString` avoids issues with the `typeof` operator
  // in Safari 8-9 which returns 'object' for typed array and other constructors.
  var tag = isObject(value) ? objectToString.call(value) : '';
  return tag == funcTag || tag == genTag;
}

/**
 * Checks if `value` is a valid array-like length.
 *
 * **Note:** This method is loosely based on
 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
 * @example
 *
 * _.isLength(3);
 * // => true
 *
 * _.isLength(Number.MIN_VALUE);
 * // => false
 *
 * _.isLength(Infinity);
 * // => false
 *
 * _.isLength('3');
 * // => false
 */
function isLength(value) {
  return typeof value == 'number' &&
    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
}

/**
 * Checks if `value` is the
 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */
function isObject(value) {
  var type = typeof value;
  return !!value && (type == 'object' || type == 'function');
}

/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */
function isObjectLike(value) {
  return !!value && typeof value == 'object';
}

/**
 * Creates an array of the own enumerable property names of `object`.
 *
 * **Note:** Non-object values are coerced to objects. See the
 * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
 * for more details.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.keys(new Foo);
 * // => ['a', 'b'] (iteration order is not guaranteed)
 *
 * _.keys('hi');
 * // => ['0', '1']
 */
function keys(object) {
  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
}

/**
 * This method returns the first argument it receives.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Util
 * @param {*} value Any value.
 * @returns {*} Returns `value`.
 * @example
 *
 * var object = { 'a': 1 };
 *
 * console.log(_.identity(object) === object);
 * // => true
 */
function identity(value) {
  return value;
}

var lodash_foreach = forEach;

var forEach$1 = /*@__PURE__*/getDefaultExportFromCjs(lodash_foreach);

var flat = flatten;
flatten.flatten = flatten;
flatten.unflatten = unflatten;

function isBuffer (obj) {
  return obj &&
    obj.constructor &&
    (typeof obj.constructor.isBuffer === 'function') &&
    obj.constructor.isBuffer(obj)
}

function keyIdentity (key) {
  return key
}

function flatten (target, opts) {
  opts = opts || {};

  const delimiter = opts.delimiter || '.';
  const maxDepth = opts.maxDepth;
  const transformKey = opts.transformKey || keyIdentity;
  const output = {};

  function step (object, prev, currentDepth) {
    currentDepth = currentDepth || 1;
    Object.keys(object).forEach(function (key) {
      const value = object[key];
      const isarray = opts.safe && Array.isArray(value);
      const type = Object.prototype.toString.call(value);
      const isbuffer = isBuffer(value);
      const isobject = (
        type === '[object Object]' ||
        type === '[object Array]'
      );

      const newKey = prev
        ? prev + delimiter + transformKey(key)
        : transformKey(key);

      if (!isarray && !isbuffer && isobject && Object.keys(value).length &&
        (!opts.maxDepth || currentDepth < maxDepth)) {
        return step(value, newKey, currentDepth + 1)
      }

      output[newKey] = value;
    });
  }

  step(target);

  return output
}

function unflatten (target, opts) {
  opts = opts || {};

  const delimiter = opts.delimiter || '.';
  const overwrite = opts.overwrite || false;
  const transformKey = opts.transformKey || keyIdentity;
  const result = {};

  const isbuffer = isBuffer(target);
  if (isbuffer || Object.prototype.toString.call(target) !== '[object Object]') {
    return target
  }

  // safely ensure that the key is
  // an integer.
  function getkey (key) {
    const parsedKey = Number(key);

    return (
      isNaN(parsedKey) ||
      key.indexOf('.') !== -1 ||
      opts.object
    ) ? key
      : parsedKey
  }

  function addKeys (keyPrefix, recipient, target) {
    return Object.keys(target).reduce(function (result, key) {
      result[keyPrefix + delimiter + key] = target[key];

      return result
    }, recipient)
  }

  function isEmpty (val) {
    const type = Object.prototype.toString.call(val);
    const isArray = type === '[object Array]';
    const isObject = type === '[object Object]';

    if (!val) {
      return true
    } else if (isArray) {
      return !val.length
    } else if (isObject) {
      return !Object.keys(val).length
    }
  }

  target = Object.keys(target).reduce(function (result, key) {
    const type = Object.prototype.toString.call(target[key]);
    const isObject = (type === '[object Object]' || type === '[object Array]');
    if (!isObject || isEmpty(target[key])) {
      result[key] = target[key];
      return result
    } else {
      return addKeys(
        key,
        result,
        flatten(target[key], opts)
      )
    }
  }, {});

  Object.keys(target).forEach(function (key) {
    const split = key.split(delimiter).map(transformKey);
    let key1 = getkey(split.shift());
    let key2 = getkey(split[0]);
    let recipient = result;

    while (key2 !== undefined) {
      if (key1 === '__proto__') {
        return
      }

      const type = Object.prototype.toString.call(recipient[key1]);
      const isobject = (
        type === '[object Object]' ||
        type === '[object Array]'
      );

      // do not write over falsey, non-undefined values if overwrite is false
      if (!overwrite && !isobject && typeof recipient[key1] !== 'undefined') {
        return
      }

      if ((overwrite && !isobject) || (!overwrite && recipient[key1] == null)) {
        recipient[key1] = (
          typeof key2 === 'number' &&
          !opts.object ? [] : {}
        );
      }

      recipient = recipient[key1];
      if (split.length > 0) {
        key1 = getkey(split.shift());
        key2 = getkey(split[0]);
      }
    }

    // unflatten again for 'messy objects'
    recipient[key1] = unflatten(target[key], opts);
  });

  return result
}

var flatten$1 = /*@__PURE__*/getDefaultExportFromCjs(flat);

// lib/index.ts
var SCHEME = Symbol("color-scheme");
var emptyConfig = {};
var resolveTwcConfig = (config = emptyConfig, {
  produceCssVariable = defaultProduceCssVariable,
  produceThemeClass = defaultProduceThemeClass,
  produceThemeVariant = produceThemeClass,
  defaultTheme,
  strict = false
} = {}) => {
  const resolved = {
    variants: [],
    utilities: {},
    colors: {}
  };
  const configObject = typeof config === "function" ? config({ dark, light }) : config;
  forEach$1(configObject, (colors, themeName) => {
    const themeClassName = produceThemeClass(themeName);
    const themeVariant = produceThemeVariant(themeName);
    const flatColors = flattenColors(colors);
    resolved.variants.push({
      name: themeVariant,
      // tailwind will generate only the first matched definition
      definition: [
        generateVariantDefinitions(`.${themeClassName}`),
        generateVariantDefinitions(`[data-theme='${themeName}']`),
        generateRootVariantDefinitions(themeName, defaultTheme)
      ].flat()
    });
    const cssSelector = `.${themeClassName},[data-theme="${themeName}"]`;
    resolved.utilities[cssSelector] = colors[SCHEME] ? { "color-scheme": colors[SCHEME] } : {};
    forEach$1(flatColors, (colorValue, colorName) => {
      if (colorName === SCHEME)
        return;
      const safeColorName = escapeChars(colorName, "/");
      let [h, s, l, defaultAlphaValue] = [0, 0, 0, 1];
      try {
        [h, s, l, defaultAlphaValue] = toHslaArray(colorValue);
      } catch (error) {
        const message = `\r
Warning - In theme "${themeName}" color "${colorName}". ${error.message}`;
        if (strict) {
          throw new Error(message);
        }
        return console.error(message);
      }
      const twcColorVariable = produceCssVariable(safeColorName);
      const twcOpacityVariable = `${produceCssVariable(safeColorName)}-opacity`;
      const hslValues = `${h} ${s}% ${l}%`;
      resolved.utilities[cssSelector][twcColorVariable] = hslValues;
      addRootUtilities(resolved.utilities, {
        key: twcColorVariable,
        value: hslValues,
        defaultTheme,
        themeName
      });
      if (typeof defaultAlphaValue === "number") {
        const alphaValue = defaultAlphaValue.toFixed(2);
        resolved.utilities[cssSelector][twcOpacityVariable] = alphaValue;
        addRootUtilities(resolved.utilities, {
          key: twcOpacityVariable,
          value: alphaValue,
          defaultTheme,
          themeName
        });
      }
      resolved.colors[colorName] = ({ opacityVariable, opacityValue }) => {
        if (!isNaN(+opacityValue)) {
          return `hsl(var(${twcColorVariable}) / ${opacityValue})`;
        }
        if (opacityVariable) {
          return `hsl(var(${twcColorVariable}) / var(${twcOpacityVariable}, var(${opacityVariable})))`;
        }
        return `hsl(var(${twcColorVariable}) / var(${twcOpacityVariable}, 1))`;
      };
    });
  });
  return resolved;
};
var createThemes = (config = emptyConfig, options = {}) => {
  const resolved = resolveTwcConfig(config, options);
  return plugin(
    ({ addUtilities, addVariant }) => {
      addUtilities(resolved.utilities);
      resolved.variants.forEach(({ name, definition }) => addVariant(name, definition));
    },
    // extend the colors config
    {
      theme: {
        extend: {
          // @ts-ignore tailwind types are broken
          colors: resolved.colors
        }
      }
    }
  );
};
function escapeChars(str, ...chars) {
  let result = str;
  for (let char of chars) {
    const regexp = new RegExp(char, "g");
    result = str.replace(regexp, "\\" + char);
  }
  return result;
}
function flattenColors(colors) {
  const flatColorsWithDEFAULT = flatten$1(colors, {
    safe: true,
    delimiter: "-"
  });
  return Object.entries(flatColorsWithDEFAULT).reduce((acc, [key, value]) => {
    acc[key.replace(/\-DEFAULT$/, "")] = value;
    return acc;
  }, {});
}
function toHslaArray(colorValue) {
  return Color$1(colorValue).hsl().round(1).array();
}
function defaultProduceCssVariable(themeName) {
  return `--twc-${themeName}`;
}
function defaultProduceThemeClass(themeName) {
  return themeName;
}
function dark(colors) {
  return {
    ...colors,
    [SCHEME]: "dark"
  };
}
function light(colors) {
  return {
    ...colors,
    [SCHEME]: "light"
  };
}
function generateVariantDefinitions(selector) {
  return [
    `${selector}&`,
    `:is(${selector} > &:not([data-theme]))`,
    `:is(${selector} &:not(${selector} [data-theme]:not(${selector}) * ))`,
    `:is(${selector}:not(:has([data-theme])) &:not([data-theme]))`
  ];
}
function generateRootVariantDefinitions(themeName, defaultTheme) {
  const baseDefinitions = [
    `:root&`,
    `:is(:root > &:not([data-theme]))`,
    `:is(:root &:not([data-theme] *):not([data-theme]))`
  ];
  if (typeof defaultTheme === "string" && themeName === defaultTheme) {
    return baseDefinitions;
  }
  if (typeof defaultTheme === "object" && themeName === defaultTheme.light) {
    return baseDefinitions.map(
      (definition) => `@media (prefers-color-scheme: light){${definition}}`
    );
  }
  if (typeof defaultTheme === "object" && themeName === defaultTheme.dark) {
    return baseDefinitions.map(
      (definition) => `@media (prefers-color-scheme: dark){${definition}}`
    );
  }
  return [];
}
function addRootUtilities(utilities, {
  key,
  value,
  defaultTheme,
  themeName
}) {
  if (!defaultTheme)
    return;
  if (typeof defaultTheme === "string") {
    if (themeName === defaultTheme) {
      if (!utilities[":root"]) {
        utilities[":root"] = {};
      }
      utilities[":root"][key] = value;
    }
  } else if (themeName === defaultTheme.light) {
    if (!utilities["@media (prefers-color-scheme: light)"]) {
      utilities["@media (prefers-color-scheme: light)"] = {
        ":root": {}
      };
    }
    utilities["@media (prefers-color-scheme: light)"][":root"][key] = value;
  } else if (themeName === defaultTheme.dark) {
    if (!utilities["@media (prefers-color-scheme: dark)"]) {
      utilities["@media (prefers-color-scheme: dark)"] = {
        ":root": {}
      };
    }
    utilities["@media (prefers-color-scheme: dark)"][":root"][key] = value;
  }
}

const defaultLightTheme = {
    light: {
        background: "#F6F5F4",
        primary: {
            50: "#EEF6FF",
            100: "#DCEBFC",
            200: "#BED5F2",
            300: "#95B8E5",
            400: "#7DAAE0",
            500: "#5B91D4",
            600: "#4874A9",
            700: "#36577F",
            800: "#243A54",
            900: "#121D2A",
            DEFAULT: "#5B91D4",
        },
        secondary: {
            50: "#F0F2F5",
            100: "#E3E7EF",
            200: "#CAD0DB",
            300: "#ADB5C4",
            400: "#8F9AAE",
            500: "#64718B",
            600: "#505A6F",
            700: "#3C4353",
            800: "#282D37",
            900: "#14161B",
            DEFAULT: "#64718B",
        },
        default: {
            50: "#F9FAFB",
            100: "#F3F4F6",
            200: "#D8DADF",
            300: "#B6BAC3",
            400: "#8E95A2",
            500: "#6B7280",
            600: "#4A4E5A",
            700: "#40444C",
            800: "#383A42",
            900: "#25272C",
            DEFAULT: "#6B7280",
        },
        success: {
            50: "#F0F7F6",
            100: "#E2F0ED",
            200: "#C5E2DB",
            300: "#A9D3CA",
            400: "#8CC5B8",
            500: "#70B7A7",
            600: "#599285",
            700: "#436D64",
            800: "#2C4942",
            900: "#162421",
            DEFAULT: "#70B7A7",
        },
        danger: {
            50: "#FBEDEF",
            100: "#F7DBE0",
            200: "#F0B8C2",
            300: "#E894A3",
            400: "#E17185",
            500: "#DA4E67",
            600: "#AE3E52",
            700: "#822E3D",
            800: "#571F29",
            900: "#2B0F14",
            DEFAULT: "#DA4E67",
        },
        warning: {
            50: "#FEF2EF",
            100: "#FDE6E0",
            200: "#FBCDC1",
            300: "#F9B5A2",
            400: "#F79C83",
            500: "#F58465",
            600: "#C46950",
            700: "#934F3C",
            800: "#623428",
            900: "#311A14",
            DEFAULT: "#F58465",
        },
        info: {
            50: "#F0F4FC",
            100: "#E2E9FA",
            200: "#C6D3F6",
            300: "#A9BEF1",
            400: "#8DA8ED",
            500: "#7193E9",
            600: "#5A75BA",
            700: "#43588B",
            800: "#2D3A5D",
            900: "#161D2E",
            DEFAULT: "#7193E9",
        },
    },
};
function hokTheme(config) {
    return createThemes(config ?? defaultLightTheme, {
        produceCssVariable: (colorName) => `--hok-${colorName}`,
        defaultTheme: "light",
    });
}

function WithListData(Component) {
    function ComponentWithListDataHook(props) {
        const list = $0d86e9c8f07f9a7b$export$762f73dccccd255d({
            initialItems: [],
        });
        return jsxRuntimeExports.jsx(Component, { ...props, listData: list });
    }
    return ComponentWithListDataHook;
}

exports.AlertDialog = AlertDialog;
exports.Badge = Badge;
exports.Breadcrumbs = Breadcrumbs;
exports.Button = Button;
exports.Calendar = Calendar;
exports.CalendarGridHeader = CalendarGridHeader;
exports.CalendarHeader = CalendarHeader;
exports.Checkbox = Checkbox;
exports.CheckboxGroup = CheckboxGroup;
exports.ComboBox = ComboBox;
exports.ComboBoxItem = ComboBoxItem;
exports.ComboBoxSection = ComboBoxSection;
exports.DateField = DateField;
exports.DateInput = DateInput;
exports.DatePicker = DatePicker;
exports.DateRangePicker = DateRangePicker;
exports.Description = Description;
exports.Dialog = Dialog;
exports.DropdownItem = DropdownItem;
exports.DropdownSection = DropdownSection;
exports.FieldError = FieldError;
exports.FieldGroup = FieldGroup;
exports.Form = Form;
exports.GridList = GridList;
exports.GridListItem = GridListItem;
exports.Input = Input;
exports.Label = Label;
exports.Link = Link;
exports.ListBox = ListBox;
exports.ListBoxItem = ListBoxItem;
exports.Menu = Menu;
exports.MenuItem = MenuItem;
exports.MenuSection = MenuSection;
exports.MenuSeparator = MenuSeparator;
exports.Meter = Meter;
exports.Modal = Modal;
exports.NumberField = NumberField;
exports.Popover = Popover;
exports.ProgressBar = ProgressBar;
exports.Radio = Radio;
exports.RadioGroup = RadioGroup;
exports.RangeCalendar = RangeCalendar;
exports.SearchField = SearchField;
exports.Select = Select;
exports.SelectItem = SelectItem;
exports.SelectSection = SelectSection;
exports.Separator = Separator;
exports.Slider = Slider;
exports.Switch = Switch;
exports.Tab = Tab;
exports.TabList = TabList;
exports.TabPanel = TabPanel;
exports.Table = Table;
exports.Tabs = Tabs;
exports.Tag = Tag;
exports.TagGroup = TagGroup;
exports.TextField = TextField;
exports.TimeField = TimeField;
exports.ToggleButton = ToggleButton;
exports.Tooltip = Tooltip;
exports.WithListData = WithListData;
exports.fieldBorderStyles = fieldBorderStyles;
exports.fieldGroupStyles = fieldGroupStyles;
exports.hokTheme = hokTheme;
//# sourceMappingURL=index.js.map
